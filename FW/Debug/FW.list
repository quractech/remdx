
FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000133bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bcc  08013560  08013560  00023560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801512c  0801512c  000302e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801512c  0801512c  0002512c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015134  08015134  000302e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015134  08015134  00025134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015138  08015138  00025138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  0801513c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b64  200002e4  08015420  000302e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005e48  08015420  00035e48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b1ca  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000697d  00000000  00000000  0005b4de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002308  00000000  00000000  00061e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fe8  00000000  00000000  00064168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024bf8  00000000  00000000  00066150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032438  00000000  00000000  0008ad48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac34e  00000000  00000000  000bd180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001694ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1ac  00000000  00000000  00169520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e4 	.word	0x200002e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013544 	.word	0x08013544

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e8 	.word	0x200002e8
 80001dc:	08013544 	.word	0x08013544

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig =
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000fae:	4b38      	ldr	r3, [pc, #224]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fb0:	4a38      	ldr	r2, [pc, #224]	; (8001094 <MX_ADC1_Init+0xf8>)
 8000fb2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fb4:	4b36      	ldr	r3, [pc, #216]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fba:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fbc:	4b34      	ldr	r3, [pc, #208]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000fc2:	4b33      	ldr	r3, [pc, #204]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000fc8:	4b31      	ldr	r3, [pc, #196]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fce:	4b30      	ldr	r3, [pc, #192]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fde:	4a2e      	ldr	r2, [pc, #184]	; (8001098 <MX_ADC1_Init+0xfc>)
 8000fe0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe2:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 4;
 8000fe8:	4b29      	ldr	r3, [pc, #164]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fea:	2204      	movs	r2, #4
 8000fec:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fee:	4b28      	ldr	r3, [pc, #160]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ff6:	4b26      	ldr	r3, [pc, #152]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ffc:	4824      	ldr	r0, [pc, #144]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000ffe:	f003 ff69 	bl	8004ed4 <HAL_ADC_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8001008:	f001 fe26 	bl	8002c58 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 800100c:	2308      	movs	r3, #8
 800100e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001010:	2301      	movs	r3, #1
 8001012:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001014:	2306      	movs	r3, #6
 8001016:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001018:	463b      	mov	r3, r7
 800101a:	4619      	mov	r1, r3
 800101c:	481c      	ldr	r0, [pc, #112]	; (8001090 <MX_ADC1_Init+0xf4>)
 800101e:	f004 f8ab 	bl	8005178 <HAL_ADC_ConfigChannel>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8001028:	f001 fe16 	bl	8002c58 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800102c:	2309      	movs	r3, #9
 800102e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8001030:	2302      	movs	r3, #2
 8001032:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	4619      	mov	r1, r3
 8001038:	4815      	ldr	r0, [pc, #84]	; (8001090 <MX_ADC1_Init+0xf4>)
 800103a:	f004 f89d 	bl	8005178 <HAL_ADC_ConfigChannel>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 8001044:	f001 fe08 	bl	8002c58 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001048:	2310      	movs	r3, #16
 800104a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 800104c:	2303      	movs	r3, #3
 800104e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001050:	2307      	movs	r3, #7
 8001052:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001054:	463b      	mov	r3, r7
 8001056:	4619      	mov	r1, r3
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_ADC1_Init+0xf4>)
 800105a:	f004 f88d 	bl	8005178 <HAL_ADC_ConfigChannel>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC1_Init+0xcc>
	{
		Error_Handler();
 8001064:	f001 fdf8 	bl	8002c58 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001068:	2311      	movs	r3, #17
 800106a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 800106c:	2304      	movs	r3, #4
 800106e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001070:	2306      	movs	r3, #6
 8001072:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_ADC1_Init+0xf4>)
 800107a:	f004 f87d 	bl	8005178 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0xec>
	{
		Error_Handler();
 8001084:	f001 fde8 	bl	8002c58 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000300 	.word	0x20000300
 8001094:	40012000 	.word	0x40012000
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (adcHandle->Instance == ADC1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <HAL_ADC_MspInit+0xdc>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d158      	bne.n	8001170 <HAL_ADC_MspInit+0xd4>
	{
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a2d      	ldr	r2, [pc, #180]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a26      	ldr	r2, [pc, #152]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
		/**ADC1 GPIO Configuration
		 PB0     ------> ADC1_IN8
		 PB1     ------> ADC1_IN9
		 */
		GPIO_InitStruct.Pin = ANA_IN0_Pin | ANA_IN1_Pin;
 80010f6:	2303      	movs	r3, #3
 80010f8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	481d      	ldr	r0, [pc, #116]	; (8001180 <HAL_ADC_MspInit+0xe4>)
 800110a:	f004 ff43 	bl	8005f94 <HAL_GPIO_Init>

		/* ADC1 DMA Init */
		/* ADC1 Init */
		hdma_adc1.Instance = DMA2_Stream0;
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001110:	4a1d      	ldr	r2, [pc, #116]	; (8001188 <HAL_ADC_MspInit+0xec>)
 8001112:	601a      	str	r2, [r3, #0]
		hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111a:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001120:	4b18      	ldr	r3, [pc, #96]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001126:	4b17      	ldr	r3, [pc, #92]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001128:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112c:	611a      	str	r2, [r3, #16]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001130:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001134:	615a      	str	r2, [r3, #20]
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001138:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800113c:	619a      	str	r2, [r3, #24]
		hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001140:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001144:	61da      	str	r2, [r3, #28]
		hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001148:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800114c:	621a      	str	r2, [r3, #32]
		hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001156:	f004 fbad 	bl	80058b4 <HAL_DMA_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_ADC_MspInit+0xc8>
		{
			Error_Handler();
 8001160:	f001 fd7a 	bl	8002c58 <Error_Handler>
		}

		__HAL_LINKDMA(adcHandle, DMA_Handle, hdma_adc1);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001168:	639a      	str	r2, [r3, #56]	; 0x38
 800116a:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6393      	str	r3, [r2, #56]	; 0x38

		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 8001170:	bf00      	nop
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40012000 	.word	0x40012000
 800117c:	40023800 	.word	0x40023800
 8001180:	40020400 	.word	0x40020400
 8001184:	20000348 	.word	0x20000348
 8001188:	40026410 	.word	0x40026410

0800118c <adcRead>:
	}
}

/* USER CODE BEGIN 1 */
uint32_t adcRead(uint16_t channel)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]
	return adc_data[channel];
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <adcRead+0x20>)
 800119a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	200006a8 	.word	0x200006a8

080011b0 <EEPROMWriteByte>:
	float floatVariable = thing.a;
	return floatVariable;
}

void EEPROMWriteByte(uint16_t page, uint16_t offset, uint8_t *data)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af04      	add	r7, sp, #16
 80011b6:	4603      	mov	r3, r0
 80011b8:	603a      	str	r2, [r7, #0]
 80011ba:	80fb      	strh	r3, [r7, #6]
 80011bc:	460b      	mov	r3, r1
 80011be:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2120      	movs	r1, #32
 80011c4:	4817      	ldr	r0, [pc, #92]	; (8001224 <EEPROMWriteByte+0x74>)
 80011c6:	f005 f881 	bl	80062cc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80011ca:	2001      	movs	r0, #1
 80011cc:	f003 fe5e 	bl	8004e8c <HAL_Delay>
	int paddrposition = 6;
 80011d0:	2306      	movs	r3, #6
 80011d2:	617b      	str	r3, [r7, #20]
	uint16_t startPage = page;
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	827b      	strh	r3, [r7, #18]
	uint16_t endPage = page;
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	823b      	strh	r3, [r7, #16]
	uint16_t MemAddress = ((startPage << paddrposition) | offset);
 80011dc:	8a7a      	ldrh	r2, [r7, #18]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	81fb      	strh	r3, [r7, #14]

	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data, 1, 1000);
 80011f0:	89fa      	ldrh	r2, [r7, #14]
 80011f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	2301      	movs	r3, #1
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	463b      	mov	r3, r7
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2302      	movs	r3, #2
 8001202:	21a0      	movs	r1, #160	; 0xa0
 8001204:	4808      	ldr	r0, [pc, #32]	; (8001228 <EEPROMWriteByte+0x78>)
 8001206:	f005 fd21 	bl	8006c4c <HAL_I2C_Mem_Write>
	HAL_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, SET);
 800120a:	2201      	movs	r2, #1
 800120c:	2120      	movs	r1, #32
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <EEPROMWriteByte+0x74>)
 8001210:	f005 f85c 	bl	80062cc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001214:	2001      	movs	r0, #1
 8001216:	f003 fe39 	bl	8004e8c <HAL_Delay>
}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40020400 	.word	0x40020400
 8001228:	200006cc 	.word	0x200006cc

0800122c <EEPROMReadByte>:
		HAL_Delay(1);
	}
}

uint8_t EEPROMReadByte(uint16_t page, uint16_t offset)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af04      	add	r7, sp, #16
 8001232:	4603      	mov	r3, r0
 8001234:	460a      	mov	r2, r1
 8001236:	80fb      	strh	r3, [r7, #6]
 8001238:	4613      	mov	r3, r2
 800123a:	80bb      	strh	r3, [r7, #4]
	uint8_t *data;
	int paddrposition = 6;
 800123c:	2306      	movs	r3, #6
 800123e:	617b      	str	r3, [r7, #20]
	uint16_t startPage = page;
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	827b      	strh	r3, [r7, #18]
	uint16_t endPage = page;
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	823b      	strh	r3, [r7, #16]
	uint16_t MemAddress = ((startPage << paddrposition) | offset);
 8001248:	8a7a      	ldrh	r2, [r7, #18]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	b21a      	sxth	r2, r3
 8001252:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001256:	4313      	orrs	r3, r2
 8001258:	b21b      	sxth	r3, r3
 800125a:	81fb      	strh	r3, [r7, #14]

	HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data, 1, 1000);
 800125c:	89fa      	ldrh	r2, [r7, #14]
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	2301      	movs	r3, #1
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2302      	movs	r3, #2
 8001270:	21a0      	movs	r1, #160	; 0xa0
 8001272:	4804      	ldr	r0, [pc, #16]	; (8001284 <EEPROMReadByte+0x58>)
 8001274:	f005 fde4 	bl	8006e40 <HAL_I2C_Mem_Read>
	return data;
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	b2db      	uxtb	r3, r3
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200006cc 	.word	0x200006cc

08001288 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_DMA_Init+0x3c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <MX_DMA_Init+0x3c>)
 8001298:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_DMA_Init+0x3c>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2105      	movs	r1, #5
 80012ae:	2038      	movs	r0, #56	; 0x38
 80012b0:	f004 fad1 	bl	8005856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012b4:	2038      	movs	r0, #56	; 0x38
 80012b6:	f004 faea 	bl	800588e <HAL_NVIC_EnableIRQ>

}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800

080012c8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
	/* This function will be called by each tick interrupt if
	 configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
	 added here, but the tick hook is called from an interrupt context, so
	 code must not attempt to block, and only the interrupt safe FreeRTOS API
	 functions can be used (those that end in FromISR()). */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
	 demo application. If heap_1.c or heap_2.c are used, then the size of the
	 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	 to query the size of free heap space that remains (although it does not
	 provide information on how the remaining heap might be fragmented). */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer,
		uint32_t *pulIdleTaskStackSize)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4a07      	ldr	r2, [pc, #28]	; (8001334 <vApplicationGetIdleTaskMemory+0x2c>)
 8001318:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	4a06      	ldr	r2, [pc, #24]	; (8001338 <vApplicationGetIdleTaskMemory+0x30>)
 800131e:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	200003e0 	.word	0x200003e0
 8001338:	20000498 	.word	0x20000498

0800133c <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 800133c:	b5b0      	push	{r4, r5, r7, lr}
 800133e:	b0aa      	sub	sp, #168	; 0xa8
 8001340:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of LED1Task */
	osThreadDef(LED1Task, startLED1Task, osPriorityNormal, 0, 128);
 8001342:	4b3a      	ldr	r3, [pc, #232]	; (800142c <MX_FREERTOS_Init+0xf0>)
 8001344:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001348:	461d      	mov	r5, r3
 800134a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800134c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800134e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001352:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	LED1TaskHandle = osThreadCreate(osThread(LED1Task), NULL);
 8001356:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f00d f808 	bl	800e372 <osThreadCreate>
 8001362:	4603      	mov	r3, r0
 8001364:	4a32      	ldr	r2, [pc, #200]	; (8001430 <MX_FREERTOS_Init+0xf4>)
 8001366:	6013      	str	r3, [r2, #0]

	/* definition and creation of USBTask */
	osThreadDef(USBTask, startUSBTask, osPriorityNormal, 0, 256);
 8001368:	4b32      	ldr	r3, [pc, #200]	; (8001434 <MX_FREERTOS_Init+0xf8>)
 800136a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800136e:	461d      	mov	r5, r3
 8001370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001374:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001378:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	USBTaskHandle = osThreadCreate(osThread(USBTask), NULL);
 800137c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f00c fff5 	bl	800e372 <osThreadCreate>
 8001388:	4603      	mov	r3, r0
 800138a:	4a2b      	ldr	r2, [pc, #172]	; (8001438 <MX_FREERTOS_Init+0xfc>)
 800138c:	6013      	str	r3, [r2, #0]

	/* definition and creation of OLEDUpdateTask */
	osThreadDef(OLEDUpdateTask, startOLEDUpdateTask, osPriorityLow, 0, 256);
 800138e:	4b2b      	ldr	r3, [pc, #172]	; (800143c <MX_FREERTOS_Init+0x100>)
 8001390:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001394:	461d      	mov	r5, r3
 8001396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800139a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800139e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	OLEDUpdateTaskHandle = osThreadCreate(osThread(OLEDUpdateTask), NULL);
 80013a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f00c ffe2 	bl	800e372 <osThreadCreate>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a23      	ldr	r2, [pc, #140]	; (8001440 <MX_FREERTOS_Init+0x104>)
 80013b2:	6013      	str	r3, [r2, #0]

	/* definition and creation of fetchReadingTask */
	osThreadDef(fetchReadingTask, startFetchReadingTask, osPriorityHigh, 0, 512);
 80013b4:	4b23      	ldr	r3, [pc, #140]	; (8001444 <MX_FREERTOS_Init+0x108>)
 80013b6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80013ba:	461d      	mov	r5, r3
 80013bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	fetchReadingTaskHandle = osThreadCreate(osThread(fetchReadingTask), NULL);
 80013c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00c ffcf 	bl	800e372 <osThreadCreate>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a1c      	ldr	r2, [pc, #112]	; (8001448 <MX_FREERTOS_Init+0x10c>)
 80013d8:	6013      	str	r3, [r2, #0]

	/* definition and creation of regUpdateTask */
	osThreadDef(regUpdateTask, startRegUpdateTask, osPriorityAboveNormal, 0, 256);
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <MX_FREERTOS_Init+0x110>)
 80013dc:	f107 041c 	add.w	r4, r7, #28
 80013e0:	461d      	mov	r5, r3
 80013e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	regUpdateTaskHandle = osThreadCreate(osThread(regUpdateTask), NULL);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f00c ffbc 	bl	800e372 <osThreadCreate>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a14      	ldr	r2, [pc, #80]	; (8001450 <MX_FREERTOS_Init+0x114>)
 80013fe:	6013      	str	r3, [r2, #0]

	/* definition and creation of LED2Task */
	osThreadDef(LED2Task, startLED2Task, osPriorityIdle, 0, 128);
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_FREERTOS_Init+0x118>)
 8001402:	463c      	mov	r4, r7
 8001404:	461d      	mov	r5, r3
 8001406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800140e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	LED2TaskHandle = osThreadCreate(osThread(LED2Task), NULL);
 8001412:	463b      	mov	r3, r7
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f00c ffab 	bl	800e372 <osThreadCreate>
 800141c:	4603      	mov	r3, r0
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <MX_FREERTOS_Init+0x11c>)
 8001420:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 8001422:	bf00      	nop
 8001424:	37a8      	adds	r7, #168	; 0xa8
 8001426:	46bd      	mov	sp, r7
 8001428:	bdb0      	pop	{r4, r5, r7, pc}
 800142a:	bf00      	nop
 800142c:	080135b4 	.word	0x080135b4
 8001430:	200003c8 	.word	0x200003c8
 8001434:	080135d0 	.word	0x080135d0
 8001438:	200003cc 	.word	0x200003cc
 800143c:	080135ec 	.word	0x080135ec
 8001440:	200003d0 	.word	0x200003d0
 8001444:	08013608 	.word	0x08013608
 8001448:	200003d4 	.word	0x200003d4
 800144c:	08013624 	.word	0x08013624
 8001450:	200003d8 	.word	0x200003d8
 8001454:	08013640 	.word	0x08013640
 8001458:	200003dc 	.word	0x200003dc

0800145c <startLED1Task>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startLED1Task */
void startLED1Task(void const *argument)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
//	MX_USB_DEVICE_Init();
	/* USER CODE BEGIN startLED1Task */
	/* Infinite loop */
	for (;;)
	{
		if (newSetupData.setRegister.blink_led1 == 1)
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <startLED1Task+0x50>)
 8001466:	7edb      	ldrb	r3, [r3, #27]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d108      	bne.n	800147e <startLED1Task+0x22>
		{
			newSetupData.setRegister.set_led1 = 0;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <startLED1Task+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	765a      	strb	r2, [r3, #25]
			led1Blink(newSetupData.setRegister.led1_blink_rate);
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <startLED1Task+0x50>)
 8001474:	8b9b      	ldrh	r3, [r3, #28]
 8001476:	4618      	mov	r0, r3
 8001478:	f001 f9ba 	bl	80027f0 <led1Blink>
 800147c:	e7f2      	b.n	8001464 <startLED1Task+0x8>
		}
		else if (newSetupData.setRegister.set_led1 == 1 && newSetupData.setRegister.blink_led1 == 0)
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <startLED1Task+0x50>)
 8001480:	7e5b      	ldrb	r3, [r3, #25]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d10a      	bne.n	800149c <startLED1Task+0x40>
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <startLED1Task+0x50>)
 8001488:	7edb      	ldrb	r3, [r3, #27]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d106      	bne.n	800149c <startLED1Task+0x40>
		{
			led1On();
 800148e:	f001 f97f 	bl	8002790 <led1On>
			osDelay(LED1UpdateTime);
 8001492:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001496:	f00c ffb8 	bl	800e40a <osDelay>
		{
 800149a:	e005      	b.n	80014a8 <startLED1Task+0x4c>
		}
		else
		{
			led1Off();
 800149c:	f001 f990 	bl	80027c0 <led1Off>
			osDelay(LED1UpdateTime);
 80014a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a4:	f00c ffb1 	bl	800e40a <osDelay>
		if (newSetupData.setRegister.blink_led1 == 1)
 80014a8:	e7dc      	b.n	8001464 <startLED1Task+0x8>
 80014aa:	bf00      	nop
 80014ac:	20000720 	.word	0x20000720

080014b0 <startUSBTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUSBTask */
void startUSBTask(void const *argument)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startUSBTask */
	/* Infinite loop */
	for (;;)
	{
//		printf("g_regMapUpdateFlag=%d\r\n", g_regMapUpdateFlag);
		streamMeasurements(&newSetupData, &lm75adAmbTemp, &channel1Data, &channel2Data);
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <startUSBTask+0x1c>)
 80014ba:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <startUSBTask+0x20>)
 80014bc:	4905      	ldr	r1, [pc, #20]	; (80014d4 <startUSBTask+0x24>)
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <startUSBTask+0x28>)
 80014c0:	f000 fc9c 	bl	8001dfc <streamMeasurements>
//		printf("id0 = %d\r\n", newSetupData.setRegister.id0);
		osDelay(USBUpdateTime);
 80014c4:	2064      	movs	r0, #100	; 0x64
 80014c6:	f00c ffa0 	bl	800e40a <osDelay>
	{
 80014ca:	e7f5      	b.n	80014b8 <startUSBTask+0x8>
 80014cc:	200003b8 	.word	0x200003b8
 80014d0:	200003a8 	.word	0x200003a8
 80014d4:	200006a4 	.word	0x200006a4
 80014d8:	20000720 	.word	0x20000720

080014dc <startOLEDUpdateTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startOLEDUpdateTask */
void startOLEDUpdateTask(void const *argument)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startOLEDUpdateTask */
	/* Infinite loop */
	for (;;)
	{
		displayEfficiency(1, &channel1Data, &channel2Data, &lm75adAmbTemp);
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <startOLEDUpdateTask+0x20>)
 80014e6:	4a06      	ldr	r2, [pc, #24]	; (8001500 <startOLEDUpdateTask+0x24>)
 80014e8:	4906      	ldr	r1, [pc, #24]	; (8001504 <startOLEDUpdateTask+0x28>)
 80014ea:	2001      	movs	r0, #1
 80014ec:	f000 f9da 	bl	80018a4 <displayEfficiency>
		osDelay(OLEDUpdateTime);
 80014f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014f4:	f00c ff89 	bl	800e40a <osDelay>
	{
 80014f8:	e7f4      	b.n	80014e4 <startOLEDUpdateTask+0x8>
 80014fa:	bf00      	nop
 80014fc:	200006a4 	.word	0x200006a4
 8001500:	200003b8 	.word	0x200003b8
 8001504:	200003a8 	.word	0x200003a8

08001508 <startFetchReadingTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startFetchReadingTask */
void startFetchReadingTask(void const *argument)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startFetchReadingTask */
	/* Infinite loop */
	for (;;)
	{
		lm75adAmbTemp = lm75ad_getTempValue(&hi2c1, LM75AD_ADDRESS, lm75adAmbTemp);
 8001510:	4b4b      	ldr	r3, [pc, #300]	; (8001640 <startFetchReadingTask+0x138>)
 8001512:	edd3 7a00 	vldr	s15, [r3]
 8001516:	eeb0 0a67 	vmov.f32	s0, s15
 800151a:	2190      	movs	r1, #144	; 0x90
 800151c:	4849      	ldr	r0, [pc, #292]	; (8001644 <startFetchReadingTask+0x13c>)
 800151e:	f001 fa6d 	bl	80029fc <lm75ad_getTempValue>
 8001522:	eef0 7a40 	vmov.f32	s15, s0
 8001526:	4b46      	ldr	r3, [pc, #280]	; (8001640 <startFetchReadingTask+0x138>)
 8001528:	edc3 7a00 	vstr	s15, [r3]
		ina226_getResult(&channel1Data, &hi2c1, CH1_ADDRESS);
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	4945      	ldr	r1, [pc, #276]	; (8001644 <startFetchReadingTask+0x13c>)
 8001530:	4845      	ldr	r0, [pc, #276]	; (8001648 <startFetchReadingTask+0x140>)
 8001532:	f001 f829 	bl	8002588 <ina226_getResult>
		ina226_getResult(&channel2Data, &hi2c1, CH2_ADDRESS);
 8001536:	2282      	movs	r2, #130	; 0x82
 8001538:	4942      	ldr	r1, [pc, #264]	; (8001644 <startFetchReadingTask+0x13c>)
 800153a:	4844      	ldr	r0, [pc, #272]	; (800164c <startFetchReadingTask+0x144>)
 800153c:	f001 f824 	bl	8002588 <ina226_getResult>
		stm32Temp = (VSENSE * adcRead(MCU_TEMP_ADC_CHANNEL) - V25) / Avg_Slope + 25.0;
 8001540:	2002      	movs	r0, #2
 8001542:	f7ff fe23 	bl	800118c <adcRead>
 8001546:	4603      	mov	r3, r0
 8001548:	4618      	mov	r0, r3
 800154a:	f7fe fff3 	bl	8000534 <__aeabi_i2d>
 800154e:	a336      	add	r3, pc, #216	; (adr r3, 8001628 <startFetchReadingTask+0x120>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7ff f858 	bl	8000608 <__aeabi_dmul>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	a333      	add	r3, pc, #204	; (adr r3, 8001630 <startFetchReadingTask+0x128>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	f7fe fe97 	bl	8000298 <__aeabi_dsub>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	a331      	add	r3, pc, #196	; (adr r3, 8001638 <startFetchReadingTask+0x130>)
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	f7ff f970 	bl	800085c <__aeabi_ddiv>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	4b31      	ldr	r3, [pc, #196]	; (8001650 <startFetchReadingTask+0x148>)
 800158a:	f7fe fe87 	bl	800029c <__adddf3>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fb2f 	bl	8000bf8 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	4a2d      	ldr	r2, [pc, #180]	; (8001654 <startFetchReadingTask+0x14c>)
 800159e:	6013      	str	r3, [r2, #0]
		stm32Vref = (VSENSE) * adcRead(MCU_INT_REF_ADC_CHANNEL);
 80015a0:	2003      	movs	r0, #3
 80015a2:	f7ff fdf3 	bl	800118c <adcRead>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe ffc3 	bl	8000534 <__aeabi_i2d>
 80015ae:	a31e      	add	r3, pc, #120	; (adr r3, 8001628 <startFetchReadingTask+0x120>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7ff f828 	bl	8000608 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fb1a 	bl	8000bf8 <__aeabi_d2f>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4a24      	ldr	r2, [pc, #144]	; (8001658 <startFetchReadingTask+0x150>)
 80015c8:	6013      	str	r3, [r2, #0]

		ina_in0 = (VSENSE) * adcRead(INA_IN0_ADC_CHANNEL);
 80015ca:	2000      	movs	r0, #0
 80015cc:	f7ff fdde 	bl	800118c <adcRead>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ffae 	bl	8000534 <__aeabi_i2d>
 80015d8:	a313      	add	r3, pc, #76	; (adr r3, 8001628 <startFetchReadingTask+0x120>)
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f7ff f813 	bl	8000608 <__aeabi_dmul>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff fb05 	bl	8000bf8 <__aeabi_d2f>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4a1a      	ldr	r2, [pc, #104]	; (800165c <startFetchReadingTask+0x154>)
 80015f2:	6013      	str	r3, [r2, #0]

		ina_in1 = VSENSE * adcRead(INA_IN1_ADC_CHANNEL);
 80015f4:	2001      	movs	r0, #1
 80015f6:	f7ff fdc9 	bl	800118c <adcRead>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ff99 	bl	8000534 <__aeabi_i2d>
 8001602:	a309      	add	r3, pc, #36	; (adr r3, 8001628 <startFetchReadingTask+0x120>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f7fe fffe 	bl	8000608 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f7ff faf0 	bl	8000bf8 <__aeabi_d2f>
 8001618:	4603      	mov	r3, r0
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <startFetchReadingTask+0x158>)
 800161c:	6013      	str	r3, [r2, #0]
//		stm32Vref = (VSENSE) * adcRead(3);
//
//		ina_in0 = (VSENSE) * adcRead(0);
//
//		ina_in1 = VSENSE * adcRead(1);
		osDelay(100);
 800161e:	2064      	movs	r0, #100	; 0x64
 8001620:	f00c fef3 	bl	800e40a <osDelay>
	{
 8001624:	e774      	b.n	8001510 <startFetchReadingTask+0x8>
 8001626:	bf00      	nop
 8001628:	c6a7ef9e 	.word	0xc6a7ef9e
 800162c:	3f4a374b 	.word	0x3f4a374b
 8001630:	851eb852 	.word	0x851eb852
 8001634:	3fe851eb 	.word	0x3fe851eb
 8001638:	47ae147b 	.word	0x47ae147b
 800163c:	3f647ae1 	.word	0x3f647ae1
 8001640:	200006a4 	.word	0x200006a4
 8001644:	200006cc 	.word	0x200006cc
 8001648:	200003a8 	.word	0x200003a8
 800164c:	200003b8 	.word	0x200003b8
 8001650:	40390000 	.word	0x40390000
 8001654:	200006bc 	.word	0x200006bc
 8001658:	200006c0 	.word	0x200006c0
 800165c:	200006c4 	.word	0x200006c4
 8001660:	200006c8 	.word	0x200006c8

08001664 <startRegUpdateTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startRegUpdateTask */
void startRegUpdateTask(void const *argument)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startRegUpdateTask */
	/* Infinite loop */
	for (;;)
	{
		configHW(&newSetupData, g_HWUpdateFlag);
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <startRegUpdateTask+0x34>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	480a      	ldr	r0, [pc, #40]	; (800169c <startRegUpdateTask+0x38>)
 8001674:	f000 fb74 	bl	8001d60 <configHW>
		if (g_regMapUpdateFlag)
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <startRegUpdateTask+0x3c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d007      	beq.n	8001690 <startRegUpdateTask+0x2c>
		{
			registerMap(USBRXDataBuffer);
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <startRegUpdateTask+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f001 fb4b 	bl	8002d20 <registerMap>
			g_regMapUpdateFlag = 0;
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <startRegUpdateTask+0x3c>)
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
		}

		osDelay(100);
 8001690:	2064      	movs	r0, #100	; 0x64
 8001692:	f00c feba 	bl	800e40a <osDelay>
	{
 8001696:	e7e9      	b.n	800166c <startRegUpdateTask+0x8>
 8001698:	200006b8 	.word	0x200006b8
 800169c:	20000720 	.word	0x20000720
 80016a0:	200006a0 	.word	0x200006a0
 80016a4:	2000069c 	.word	0x2000069c

080016a8 <startLED2Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startLED2Task */
void startLED2Task(void const *argument)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startLED2Task */
	/* Infinite loop */
	for (;;)
	{
		if (newSetupData.setRegister.blink_led2 == 1)
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <startLED2Task+0x58>)
 80016b2:	7f9b      	ldrb	r3, [r3, #30]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d10c      	bne.n	80016d2 <startLED2Task+0x2a>
		{
			newSetupData.setRegister.set_led2 = 0;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <startLED2Task+0x58>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	769a      	strb	r2, [r3, #26]
//			led2Blink(newSetupData.setRegister.led2_blink_rate);
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80016be:	2110      	movs	r1, #16
 80016c0:	4810      	ldr	r0, [pc, #64]	; (8001704 <startLED2Task+0x5c>)
 80016c2:	f004 fe1c 	bl	80062fe <HAL_GPIO_TogglePin>
			osDelay(newSetupData.setRegister.led2_blink_rate);
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <startLED2Task+0x58>)
 80016c8:	8c1b      	ldrh	r3, [r3, #32]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f00c fe9d 	bl	800e40a <osDelay>
 80016d0:	e7ee      	b.n	80016b0 <startLED2Task+0x8>
		}
		else if (newSetupData.setRegister.set_led2 == 1 && newSetupData.setRegister.blink_led2 == 0)
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <startLED2Task+0x58>)
 80016d4:	7e9b      	ldrb	r3, [r3, #26]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d10a      	bne.n	80016f0 <startLED2Task+0x48>
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <startLED2Task+0x58>)
 80016dc:	7f9b      	ldrb	r3, [r3, #30]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d106      	bne.n	80016f0 <startLED2Task+0x48>
		{
			led2On();
 80016e2:	f001 f861 	bl	80027a8 <led2On>
			osDelay(LED2UpdateTime);
 80016e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ea:	f00c fe8e 	bl	800e40a <osDelay>
		{
 80016ee:	e005      	b.n	80016fc <startLED2Task+0x54>
		}
		else
		{
			led2Off();
 80016f0:	f001 f872 	bl	80027d8 <led2Off>
			osDelay(LED2UpdateTime);
 80016f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f8:	f00c fe87 	bl	800e40a <osDelay>
		if (newSetupData.setRegister.blink_led2 == 1)
 80016fc:	e7d8      	b.n	80016b0 <startLED2Task+0x8>
 80016fe:	bf00      	nop
 8001700:	20000720 	.word	0x20000720
 8001704:	40020000 	.word	0x40020000

08001708 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b5c      	ldr	r3, [pc, #368]	; (8001894 <MX_GPIO_Init+0x18c>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a5b      	ldr	r2, [pc, #364]	; (8001894 <MX_GPIO_Init+0x18c>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b59      	ldr	r3, [pc, #356]	; (8001894 <MX_GPIO_Init+0x18c>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b55      	ldr	r3, [pc, #340]	; (8001894 <MX_GPIO_Init+0x18c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a54      	ldr	r2, [pc, #336]	; (8001894 <MX_GPIO_Init+0x18c>)
 8001744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b52      	ldr	r3, [pc, #328]	; (8001894 <MX_GPIO_Init+0x18c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b4e      	ldr	r3, [pc, #312]	; (8001894 <MX_GPIO_Init+0x18c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a4d      	ldr	r2, [pc, #308]	; (8001894 <MX_GPIO_Init+0x18c>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b4b      	ldr	r3, [pc, #300]	; (8001894 <MX_GPIO_Init+0x18c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4b47      	ldr	r3, [pc, #284]	; (8001894 <MX_GPIO_Init+0x18c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a46      	ldr	r2, [pc, #280]	; (8001894 <MX_GPIO_Init+0x18c>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b44      	ldr	r3, [pc, #272]	; (8001894 <MX_GPIO_Init+0x18c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|SDCard_CS_Pin|Auto_off_dis_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	f248 4110 	movw	r1, #33808	; 0x8410
 8001794:	4840      	ldr	r0, [pc, #256]	; (8001898 <MX_GPIO_Init+0x190>)
 8001796:	f004 fd99 	bl	80062cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|EEPROM_WP_Pin, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80017a0:	483e      	ldr	r0, [pc, #248]	; (800189c <MX_GPIO_Init+0x194>)
 80017a2:	f004 fd93 	bl	80062cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIG_OUT0_Pin|DIG_OUT1_Pin, GPIO_PIN_SET);
 80017a6:	2201      	movs	r2, #1
 80017a8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80017ac:	483b      	ldr	r0, [pc, #236]	; (800189c <MX_GPIO_Init+0x194>)
 80017ae:	f004 fd8d 	bl	80062cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = INT_OUT_Pin|INT_IN_Pin|TEMP_IRQ_Pin;
 80017b2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80017b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	4835      	ldr	r0, [pc, #212]	; (80018a0 <MX_GPIO_Init+0x198>)
 80017ca:	f004 fbe3 	bl	8005f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80017ce:	2310      	movs	r3, #16
 80017d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	4619      	mov	r1, r3
 80017e4:	482c      	ldr	r0, [pc, #176]	; (8001898 <MX_GPIO_Init+0x190>)
 80017e6:	f004 fbd5 	bl	8005f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|DIG_OUT0_Pin|DIG_OUT1_Pin|EEPROM_WP_Pin;
 80017ea:	f243 4320 	movw	r3, #13344	; 0x3420
 80017ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f0:	2301      	movs	r3, #1
 80017f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4619      	mov	r1, r3
 8001802:	4826      	ldr	r0, [pc, #152]	; (800189c <MX_GPIO_Init+0x194>)
 8001804:	f004 fbc6 	bl	8005f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIG_IN0_Pin|DIG_IN1_Pin;
 8001808:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800180c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	481f      	ldr	r0, [pc, #124]	; (800189c <MX_GPIO_Init+0x194>)
 800181e:	f004 fbb9 	bl	8005f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SDCard_CS_Pin|Auto_off_dis_Pin;
 8001822:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001828:	2301      	movs	r3, #1
 800182a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4619      	mov	r1, r3
 800183a:	4817      	ldr	r0, [pc, #92]	; (8001898 <MX_GPIO_Init+0x190>)
 800183c:	f004 fbaa 	bl	8005f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = INT_IN0_Pin|INT_IN1_Pin;
 8001840:	2318      	movs	r3, #24
 8001842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001844:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4619      	mov	r1, r3
 8001854:	4811      	ldr	r0, [pc, #68]	; (800189c <MX_GPIO_Init+0x194>)
 8001856:	f004 fb9d 	bl	8005f94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2105      	movs	r1, #5
 800185e:	2009      	movs	r0, #9
 8001860:	f003 fff9 	bl	8005856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001864:	2009      	movs	r0, #9
 8001866:	f004 f812 	bl	800588e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2105      	movs	r1, #5
 800186e:	200a      	movs	r0, #10
 8001870:	f003 fff1 	bl	8005856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001874:	200a      	movs	r0, #10
 8001876:	f004 f80a 	bl	800588e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2105      	movs	r1, #5
 800187e:	2028      	movs	r0, #40	; 0x28
 8001880:	f003 ffe9 	bl	8005856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001884:	2028      	movs	r0, #40	; 0x28
 8001886:	f004 f802 	bl	800588e <HAL_NVIC_EnableIRQ>

}
 800188a:	bf00      	nop
 800188c:	3728      	adds	r7, #40	; 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40020000 	.word	0x40020000
 800189c:	40020400 	.word	0x40020400
 80018a0:	40020800 	.word	0x40020800

080018a4 <displayEfficiency>:
 */

#include "hw.h"

void displayEfficiency(uint8_t en_disp, Ina226Data_t *ch1Data, Ina226Data_t *ch2Data, float *temp_data)
{
 80018a4:	b5b0      	push	{r4, r5, r7, lr}
 80018a6:	b08e      	sub	sp, #56	; 0x38
 80018a8:	af02      	add	r7, sp, #8
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	4603      	mov	r3, r0
 80018b2:	73fb      	strb	r3, [r7, #15]
	char str[28];
	if (en_disp == 1)
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	f040 818a 	bne.w	8001bd0 <displayEfficiency+0x32c>
	{
		ssd1306_SetDisplayOn(1);
 80018bc:	2001      	movs	r0, #1
 80018be:	f002 ffbf 	bl	8004840 <ssd1306_SetDisplayOn>
		ssd1306_Fill(Black);
 80018c2:	2000      	movs	r0, #0
 80018c4:	f002 fe36 	bl	8004534 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 80018c8:	2100      	movs	r1, #0
 80018ca:	2000      	movs	r0, #0
 80018cc:	f002 ff8c 	bl	80047e8 <ssd1306_SetCursor>
		sprintf(str, "%0.1fC|%0.1f%%", *temp_data, ((ch2Data->power / ch1Data->power) * 100));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fe3f 	bl	8000558 <__aeabi_f2d>
 80018da:	4604      	mov	r4, r0
 80018dc:	460d      	mov	r5, r1
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	edd3 6a03 	vldr	s13, [r3, #12]
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80018ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ee:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8001be0 <displayEfficiency+0x33c>
 80018f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f6:	ee17 0a90 	vmov	r0, s15
 80018fa:	f7fe fe2d 	bl	8000558 <__aeabi_f2d>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	f107 0014 	add.w	r0, r7, #20
 8001906:	e9cd 2300 	strd	r2, r3, [sp]
 800190a:	4622      	mov	r2, r4
 800190c:	462b      	mov	r3, r5
 800190e:	49b5      	ldr	r1, [pc, #724]	; (8001be4 <displayEfficiency+0x340>)
 8001910:	f00f fcd6 	bl	80112c0 <siprintf>
		ssd1306_WriteString(str, Font_11x18, White);
 8001914:	4ab4      	ldr	r2, [pc, #720]	; (8001be8 <displayEfficiency+0x344>)
 8001916:	f107 0014 	add.w	r0, r7, #20
 800191a:	2301      	movs	r3, #1
 800191c:	ca06      	ldmia	r2, {r1, r2}
 800191e:	f002 ff3d 	bl	800479c <ssd1306_WriteString>

		ssd1306_SetCursor(0, 24);
 8001922:	2118      	movs	r1, #24
 8001924:	2000      	movs	r0, #0
 8001926:	f002 ff5f 	bl	80047e8 <ssd1306_SetCursor>
		(ch1Data->vbus >= 1 ? sprintf(str, "%0.3f", ch1Data->vbus) : sprintf(str, "%0.3f", ch1Data->vbus));
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001930:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193c:	db0c      	blt.n	8001958 <displayEfficiency+0xb4>
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fe08 	bl	8000558 <__aeabi_f2d>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	f107 0014 	add.w	r0, r7, #20
 8001950:	49a6      	ldr	r1, [pc, #664]	; (8001bec <displayEfficiency+0x348>)
 8001952:	f00f fcb5 	bl	80112c0 <siprintf>
 8001956:	e00b      	b.n	8001970 <displayEfficiency+0xcc>
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fdfb 	bl	8000558 <__aeabi_f2d>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	f107 0014 	add.w	r0, r7, #20
 800196a:	49a0      	ldr	r1, [pc, #640]	; (8001bec <displayEfficiency+0x348>)
 800196c:	f00f fca8 	bl	80112c0 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 8001970:	4a9f      	ldr	r2, [pc, #636]	; (8001bf0 <displayEfficiency+0x34c>)
 8001972:	f107 0014 	add.w	r0, r7, #20
 8001976:	2301      	movs	r3, #1
 8001978:	ca06      	ldmia	r2, {r1, r2}
 800197a:	f002 ff0f 	bl	800479c <ssd1306_WriteString>

		ssd1306_SetCursor(((SSD1306_WIDTH - 10) / 2 - 6), 24);
 800197e:	2118      	movs	r1, #24
 8001980:	2035      	movs	r0, #53	; 0x35
 8001982:	f002 ff31 	bl	80047e8 <ssd1306_SetCursor>
		sprintf(str, "%0.3f", ch2Data->vbus);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fde4 	bl	8000558 <__aeabi_f2d>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	f107 0014 	add.w	r0, r7, #20
 8001998:	4994      	ldr	r1, [pc, #592]	; (8001bec <displayEfficiency+0x348>)
 800199a:	f00f fc91 	bl	80112c0 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 800199e:	4a94      	ldr	r2, [pc, #592]	; (8001bf0 <displayEfficiency+0x34c>)
 80019a0:	f107 0014 	add.w	r0, r7, #20
 80019a4:	2301      	movs	r3, #1
 80019a6:	ca06      	ldmia	r2, {r1, r2}
 80019a8:	f002 fef8 	bl	800479c <ssd1306_WriteString>

		ssd1306_SetCursor((SSD1306_WIDTH - 20), 24);
 80019ac:	2118      	movs	r1, #24
 80019ae:	206c      	movs	r0, #108	; 0x6c
 80019b0:	f002 ff1a 	bl	80047e8 <ssd1306_SetCursor>
		ssd1306_WriteString("V", Font_7x10, White);
 80019b4:	4a8e      	ldr	r2, [pc, #568]	; (8001bf0 <displayEfficiency+0x34c>)
 80019b6:	2301      	movs	r3, #1
 80019b8:	ca06      	ldmia	r2, {r1, r2}
 80019ba:	488e      	ldr	r0, [pc, #568]	; (8001bf4 <displayEfficiency+0x350>)
 80019bc:	f002 feee 	bl	800479c <ssd1306_WriteString>

		ssd1306_SetCursor(0, 34);
 80019c0:	2122      	movs	r1, #34	; 0x22
 80019c2:	2000      	movs	r0, #0
 80019c4:	f002 ff10 	bl	80047e8 <ssd1306_SetCursor>
		(ch1Data->current < 1 ? sprintf(str, "%0.1f", ch1Data->current * 1e3) : sprintf(str, "%0.3f", ch1Data->current));
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019da:	d511      	bpl.n	8001a00 <displayEfficiency+0x15c>
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fdb9 	bl	8000558 <__aeabi_f2d>
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	4b83      	ldr	r3, [pc, #524]	; (8001bf8 <displayEfficiency+0x354>)
 80019ec:	f7fe fe0c 	bl	8000608 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	f107 0014 	add.w	r0, r7, #20
 80019f8:	4980      	ldr	r1, [pc, #512]	; (8001bfc <displayEfficiency+0x358>)
 80019fa:	f00f fc61 	bl	80112c0 <siprintf>
 80019fe:	e00b      	b.n	8001a18 <displayEfficiency+0x174>
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fda7 	bl	8000558 <__aeabi_f2d>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	f107 0014 	add.w	r0, r7, #20
 8001a12:	4976      	ldr	r1, [pc, #472]	; (8001bec <displayEfficiency+0x348>)
 8001a14:	f00f fc54 	bl	80112c0 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 8001a18:	4a75      	ldr	r2, [pc, #468]	; (8001bf0 <displayEfficiency+0x34c>)
 8001a1a:	f107 0014 	add.w	r0, r7, #20
 8001a1e:	2301      	movs	r3, #1
 8001a20:	ca06      	ldmia	r2, {r1, r2}
 8001a22:	f002 febb 	bl	800479c <ssd1306_WriteString>

		ssd1306_SetCursor(((SSD1306_WIDTH - 10) / 2 - 6), 34);
 8001a26:	2122      	movs	r1, #34	; 0x22
 8001a28:	2035      	movs	r0, #53	; 0x35
 8001a2a:	f002 fedd 	bl	80047e8 <ssd1306_SetCursor>
		(ch2Data->current < 1 ? sprintf(str, "%0.1f", ch2Data->current * 1e3) : sprintf(str, "%0.3f", ch2Data->current));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a40:	d511      	bpl.n	8001a66 <displayEfficiency+0x1c2>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fd86 	bl	8000558 <__aeabi_f2d>
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	4b69      	ldr	r3, [pc, #420]	; (8001bf8 <displayEfficiency+0x354>)
 8001a52:	f7fe fdd9 	bl	8000608 <__aeabi_dmul>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	f107 0014 	add.w	r0, r7, #20
 8001a5e:	4967      	ldr	r1, [pc, #412]	; (8001bfc <displayEfficiency+0x358>)
 8001a60:	f00f fc2e 	bl	80112c0 <siprintf>
 8001a64:	e00b      	b.n	8001a7e <displayEfficiency+0x1da>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fd74 	bl	8000558 <__aeabi_f2d>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	f107 0014 	add.w	r0, r7, #20
 8001a78:	495c      	ldr	r1, [pc, #368]	; (8001bec <displayEfficiency+0x348>)
 8001a7a:	f00f fc21 	bl	80112c0 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 8001a7e:	4a5c      	ldr	r2, [pc, #368]	; (8001bf0 <displayEfficiency+0x34c>)
 8001a80:	f107 0014 	add.w	r0, r7, #20
 8001a84:	2301      	movs	r3, #1
 8001a86:	ca06      	ldmia	r2, {r1, r2}
 8001a88:	f002 fe88 	bl	800479c <ssd1306_WriteString>

		ssd1306_SetCursor((SSD1306_WIDTH - 20), 34);
 8001a8c:	2122      	movs	r1, #34	; 0x22
 8001a8e:	206c      	movs	r0, #108	; 0x6c
 8001a90:	f002 feaa 	bl	80047e8 <ssd1306_SetCursor>
		(ch1Data->current > 1 && ch2Data->current > 1) ?
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	edd3 7a00 	vldr	s15, [r3]
				ssd1306_WriteString("A", Font_7x10, White) : ssd1306_WriteString("mA", Font_7x10, White);
 8001a9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa6:	dd10      	ble.n	8001aca <displayEfficiency+0x226>
		(ch1Data->current > 1 && ch2Data->current > 1) ?
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	edd3 7a00 	vldr	s15, [r3]
 8001aae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ab2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aba:	dd06      	ble.n	8001aca <displayEfficiency+0x226>
				ssd1306_WriteString("A", Font_7x10, White) : ssd1306_WriteString("mA", Font_7x10, White);
 8001abc:	4a4c      	ldr	r2, [pc, #304]	; (8001bf0 <displayEfficiency+0x34c>)
 8001abe:	2301      	movs	r3, #1
 8001ac0:	ca06      	ldmia	r2, {r1, r2}
 8001ac2:	484f      	ldr	r0, [pc, #316]	; (8001c00 <displayEfficiency+0x35c>)
 8001ac4:	f002 fe6a 	bl	800479c <ssd1306_WriteString>
 8001ac8:	e005      	b.n	8001ad6 <displayEfficiency+0x232>
 8001aca:	4a49      	ldr	r2, [pc, #292]	; (8001bf0 <displayEfficiency+0x34c>)
 8001acc:	2301      	movs	r3, #1
 8001ace:	ca06      	ldmia	r2, {r1, r2}
 8001ad0:	484c      	ldr	r0, [pc, #304]	; (8001c04 <displayEfficiency+0x360>)
 8001ad2:	f002 fe63 	bl	800479c <ssd1306_WriteString>

		ssd1306_SetCursor(0, 44);
 8001ad6:	212c      	movs	r1, #44	; 0x2c
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f002 fe85 	bl	80047e8 <ssd1306_SetCursor>
		sprintf(str, "%0.3f", ch1Data->vshunt * 1e3);
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd38 	bl	8000558 <__aeabi_f2d>
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	4b42      	ldr	r3, [pc, #264]	; (8001bf8 <displayEfficiency+0x354>)
 8001aee:	f7fe fd8b 	bl	8000608 <__aeabi_dmul>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	f107 0014 	add.w	r0, r7, #20
 8001afa:	493c      	ldr	r1, [pc, #240]	; (8001bec <displayEfficiency+0x348>)
 8001afc:	f00f fbe0 	bl	80112c0 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 8001b00:	4a3b      	ldr	r2, [pc, #236]	; (8001bf0 <displayEfficiency+0x34c>)
 8001b02:	f107 0014 	add.w	r0, r7, #20
 8001b06:	2301      	movs	r3, #1
 8001b08:	ca06      	ldmia	r2, {r1, r2}
 8001b0a:	f002 fe47 	bl	800479c <ssd1306_WriteString>

		ssd1306_SetCursor(((SSD1306_WIDTH - 10) / 2 - 6), 44);
 8001b0e:	212c      	movs	r1, #44	; 0x2c
 8001b10:	2035      	movs	r0, #53	; 0x35
 8001b12:	f002 fe69 	bl	80047e8 <ssd1306_SetCursor>
		sprintf(str, "%0.3f", ch2Data->vshunt * 1e3);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fd1c 	bl	8000558 <__aeabi_f2d>
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <displayEfficiency+0x354>)
 8001b26:	f7fe fd6f 	bl	8000608 <__aeabi_dmul>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	f107 0014 	add.w	r0, r7, #20
 8001b32:	492e      	ldr	r1, [pc, #184]	; (8001bec <displayEfficiency+0x348>)
 8001b34:	f00f fbc4 	bl	80112c0 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 8001b38:	4a2d      	ldr	r2, [pc, #180]	; (8001bf0 <displayEfficiency+0x34c>)
 8001b3a:	f107 0014 	add.w	r0, r7, #20
 8001b3e:	2301      	movs	r3, #1
 8001b40:	ca06      	ldmia	r2, {r1, r2}
 8001b42:	f002 fe2b 	bl	800479c <ssd1306_WriteString>

		ssd1306_SetCursor((SSD1306_WIDTH - 20), 44);
 8001b46:	212c      	movs	r1, #44	; 0x2c
 8001b48:	206c      	movs	r0, #108	; 0x6c
 8001b4a:	f002 fe4d 	bl	80047e8 <ssd1306_SetCursor>
		ssd1306_WriteString("mV", Font_7x10, White);
 8001b4e:	4a28      	ldr	r2, [pc, #160]	; (8001bf0 <displayEfficiency+0x34c>)
 8001b50:	2301      	movs	r3, #1
 8001b52:	ca06      	ldmia	r2, {r1, r2}
 8001b54:	482c      	ldr	r0, [pc, #176]	; (8001c08 <displayEfficiency+0x364>)
 8001b56:	f002 fe21 	bl	800479c <ssd1306_WriteString>

		ssd1306_SetCursor(0, 54);
 8001b5a:	2136      	movs	r1, #54	; 0x36
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f002 fe43 	bl	80047e8 <ssd1306_SetCursor>
		sprintf(str, "%0.3f", ch1Data->power);
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fcf6 	bl	8000558 <__aeabi_f2d>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	f107 0014 	add.w	r0, r7, #20
 8001b74:	491d      	ldr	r1, [pc, #116]	; (8001bec <displayEfficiency+0x348>)
 8001b76:	f00f fba3 	bl	80112c0 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 8001b7a:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <displayEfficiency+0x34c>)
 8001b7c:	f107 0014 	add.w	r0, r7, #20
 8001b80:	2301      	movs	r3, #1
 8001b82:	ca06      	ldmia	r2, {r1, r2}
 8001b84:	f002 fe0a 	bl	800479c <ssd1306_WriteString>

		ssd1306_SetCursor(((SSD1306_WIDTH - 10) / 2 - 6), 54);
 8001b88:	2136      	movs	r1, #54	; 0x36
 8001b8a:	2035      	movs	r0, #53	; 0x35
 8001b8c:	f002 fe2c 	bl	80047e8 <ssd1306_SetCursor>
		sprintf(str, "%0.3f", ch2Data->power);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fcdf 	bl	8000558 <__aeabi_f2d>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	f107 0014 	add.w	r0, r7, #20
 8001ba2:	4912      	ldr	r1, [pc, #72]	; (8001bec <displayEfficiency+0x348>)
 8001ba4:	f00f fb8c 	bl	80112c0 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 8001ba8:	4a11      	ldr	r2, [pc, #68]	; (8001bf0 <displayEfficiency+0x34c>)
 8001baa:	f107 0014 	add.w	r0, r7, #20
 8001bae:	2301      	movs	r3, #1
 8001bb0:	ca06      	ldmia	r2, {r1, r2}
 8001bb2:	f002 fdf3 	bl	800479c <ssd1306_WriteString>

		ssd1306_SetCursor((SSD1306_WIDTH - 20), 54);
 8001bb6:	2136      	movs	r1, #54	; 0x36
 8001bb8:	206c      	movs	r0, #108	; 0x6c
 8001bba:	f002 fe15 	bl	80047e8 <ssd1306_SetCursor>
		ssd1306_WriteString("W", Font_7x10, White);
 8001bbe:	4a0c      	ldr	r2, [pc, #48]	; (8001bf0 <displayEfficiency+0x34c>)
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	ca06      	ldmia	r2, {r1, r2}
 8001bc4:	4811      	ldr	r0, [pc, #68]	; (8001c0c <displayEfficiency+0x368>)
 8001bc6:	f002 fde9 	bl	800479c <ssd1306_WriteString>

		ssd1306_UpdateScreen();
 8001bca:	f002 fcd7 	bl	800457c <ssd1306_UpdateScreen>
	}
	else
	{
		ssd1306_SetDisplayOn(0);
	}
}
 8001bce:	e002      	b.n	8001bd6 <displayEfficiency+0x332>
		ssd1306_SetDisplayOn(0);
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f002 fe35 	bl	8004840 <ssd1306_SetDisplayOn>
}
 8001bd6:	bf00      	nop
 8001bd8:	3730      	adds	r7, #48	; 0x30
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8001bde:	bf00      	nop
 8001be0:	42c80000 	.word	0x42c80000
 8001be4:	0801365c 	.word	0x0801365c
 8001be8:	2000000c 	.word	0x2000000c
 8001bec:	0801366c 	.word	0x0801366c
 8001bf0:	20000004 	.word	0x20000004
 8001bf4:	08013674 	.word	0x08013674
 8001bf8:	408f4000 	.word	0x408f4000
 8001bfc:	08013678 	.word	0x08013678
 8001c00:	08013680 	.word	0x08013680
 8001c04:	08013684 	.word	0x08013684
 8001c08:	08013688 	.word	0x08013688
 8001c0c:	0801368c 	.word	0x0801368c

08001c10 <digRead>:

uint8_t digRead(uint8_t dig_pin)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
	if (dig_pin == 0)
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10b      	bne.n	8001c38 <digRead+0x28>
	{
		if (HAL_GPIO_ReadPin(DIG_IN0_GPIO_Port, DIG_IN0_Pin) == GPIO_PIN_RESET)
 8001c20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c24:	480e      	ldr	r0, [pc, #56]	; (8001c60 <digRead+0x50>)
 8001c26:	f004 fb39 	bl	800629c <HAL_GPIO_ReadPin>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <digRead+0x24>
			return 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	e011      	b.n	8001c58 <digRead+0x48>
		else
			return 1;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e00f      	b.n	8001c58 <digRead+0x48>
	}
	else if (dig_pin == 1)
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d10b      	bne.n	8001c56 <digRead+0x46>
	{
		if (HAL_GPIO_ReadPin(DIG_IN1_GPIO_Port, DIG_IN1_Pin) == GPIO_PIN_RESET)
 8001c3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c42:	4807      	ldr	r0, [pc, #28]	; (8001c60 <digRead+0x50>)
 8001c44:	f004 fb2a 	bl	800629c <HAL_GPIO_ReadPin>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <digRead+0x42>
			return 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e002      	b.n	8001c58 <digRead+0x48>
		else
			return 1;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <digRead+0x48>
	}
	else
		return 0;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40020400 	.word	0x40020400

08001c64 <digitalWrite>:

void digitalWrite(uint8_t dig_pin, uint8_t value)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	460a      	mov	r2, r1
 8001c6e:	71fb      	strb	r3, [r7, #7]
 8001c70:	4613      	mov	r3, r2
 8001c72:	71bb      	strb	r3, [r7, #6]
	if (dig_pin == 0)
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d110      	bne.n	8001c9c <digitalWrite+0x38>
	{
		if (value == 1)
 8001c7a:	79bb      	ldrb	r3, [r7, #6]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d106      	bne.n	8001c8e <digitalWrite+0x2a>
			HAL_GPIO_WritePin(DIG_OUT0_GPIO_Port, DIG_OUT0_Pin, RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c86:	4811      	ldr	r0, [pc, #68]	; (8001ccc <digitalWrite+0x68>)
 8001c88:	f004 fb20 	bl	80062cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_OUT1_GPIO_Port, DIG_OUT1_Pin, RESET);
		else
			HAL_GPIO_WritePin(DIG_OUT1_GPIO_Port, DIG_OUT1_Pin, SET);
	}

}
 8001c8c:	e019      	b.n	8001cc2 <digitalWrite+0x5e>
			HAL_GPIO_WritePin(DIG_OUT0_GPIO_Port, DIG_OUT0_Pin, SET);
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c94:	480d      	ldr	r0, [pc, #52]	; (8001ccc <digitalWrite+0x68>)
 8001c96:	f004 fb19 	bl	80062cc <HAL_GPIO_WritePin>
}
 8001c9a:	e012      	b.n	8001cc2 <digitalWrite+0x5e>
	else if (dig_pin == 1)
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d10f      	bne.n	8001cc2 <digitalWrite+0x5e>
		if (value == 1)
 8001ca2:	79bb      	ldrb	r3, [r7, #6]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d106      	bne.n	8001cb6 <digitalWrite+0x52>
			HAL_GPIO_WritePin(DIG_OUT1_GPIO_Port, DIG_OUT1_Pin, RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cae:	4807      	ldr	r0, [pc, #28]	; (8001ccc <digitalWrite+0x68>)
 8001cb0:	f004 fb0c 	bl	80062cc <HAL_GPIO_WritePin>
}
 8001cb4:	e005      	b.n	8001cc2 <digitalWrite+0x5e>
			HAL_GPIO_WritePin(DIG_OUT1_GPIO_Port, DIG_OUT1_Pin, SET);
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cbc:	4803      	ldr	r0, [pc, #12]	; (8001ccc <digitalWrite+0x68>)
 8001cbe:	f004 fb05 	bl	80062cc <HAL_GPIO_WritePin>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40020400 	.word	0x40020400

08001cd0 <restartMCU>:

void restartMCU(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 8001cd4:	f003 fde9 	bl	80058aa <HAL_NVIC_SystemReset>
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <saveUserConfigData>:

void saveUserConfigData(uint16_t page, RegisterData_t *inputBuffer)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	80fb      	strh	r3, [r7, #6]
//	EEPROMPageErase(page);
	for (uint8_t offset = 0; offset < NO_REGISTERS; offset++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	73fb      	strb	r3, [r7, #15]
 8001cec:	e010      	b.n	8001d10 <saveUserConfigData+0x34>
	{
		EEPROMWriteByte(page, offset, (inputBuffer + offset)->value);
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	b299      	uxth	r1, r3
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fa56 	bl	80011b0 <EEPROMWriteByte>
		HAL_Delay(1);
 8001d04:	2001      	movs	r0, #1
 8001d06:	f003 f8c1 	bl	8004e8c <HAL_Delay>
	for (uint8_t offset = 0; offset < NO_REGISTERS; offset++)
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	2b1f      	cmp	r3, #31
 8001d14:	d9eb      	bls.n	8001cee <saveUserConfigData+0x12>
	}
}
 8001d16:	bf00      	nop
 8001d18:	bf00      	nop
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <getSavedUserConfigData>:

void getSavedUserConfigData(uint16_t page, RegisterData_t *outBuffer)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	80fb      	strh	r3, [r7, #6]
	for (uint8_t offset = 0; offset < NO_REGISTERS; offset++)
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	73fb      	strb	r3, [r7, #15]
 8001d30:	e00d      	b.n	8001d4e <getSavedUserConfigData+0x2e>
	{
		(outBuffer + offset)->value = EEPROMReadByte(page, offset);
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	b299      	uxth	r1, r3
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	18d4      	adds	r4, r2, r3
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fa74 	bl	800122c <EEPROMReadByte>
 8001d44:	4603      	mov	r3, r0
 8001d46:	7023      	strb	r3, [r4, #0]
	for (uint8_t offset = 0; offset < NO_REGISTERS; offset++)
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	73fb      	strb	r3, [r7, #15]
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	2b1f      	cmp	r3, #31
 8001d52:	d9ee      	bls.n	8001d32 <getSavedUserConfigData+0x12>
	}

}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd90      	pop	{r4, r7, pc}
	...

08001d60 <configHW>:

void configHW(SetupData_t *setupData, uint8_t update)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	70fb      	strb	r3, [r7, #3]
	if (update == 1)
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d113      	bne.n	8001d9a <configHW+0x3a>
	{
		digitalWrite(DIG_OUT0, setupData->setRegister.set_dig_out0);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001d78:	4619      	mov	r1, r3
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f7ff ff72 	bl	8001c64 <digitalWrite>
		digitalWrite(DIG_OUT1, setupData->setRegister.set_dig_out1);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001d86:	4619      	mov	r1, r3
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f7ff ff6b 	bl	8001c64 <digitalWrite>

//	enableLED(setupData);

		enablePWM(setupData);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f80a 	bl	8001da8 <enablePWM>

//		disablePowerSaveMode(setupData);
		g_HWUpdateFlag = 0;
 8001d94:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <configHW+0x44>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
	}

}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200006b8 	.word	0x200006b8

08001da8 <enablePWM>:

void enablePWM(SetupData_t *setupData)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	set_pwm_freq(setupData->setRegister.set_pwm_freq);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 ff99 	bl	8002cec <set_pwm_freq>
	if (setupData->setRegister.en_pwm0 == 1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d106      	bne.n	8001dd2 <enablePWM+0x2a>
	{
		run_pwm_out0(setupData->setRegister.set_pwm0_duty);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 ff4a 	bl	8002c64 <run_pwm_out0>
 8001dd0:	e001      	b.n	8001dd6 <enablePWM+0x2e>
	}
	else
	{
		stop_pwm_out0();
 8001dd2:	f000 ff5b 	bl	8002c8c <stop_pwm_out0>
	}

	if (setupData->setRegister.en_pwm1 == 1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d106      	bne.n	8001dee <enablePWM+0x46>
	{
		run_pwm_out1(setupData->setRegister.set_pwm1_duty);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 ff5e 	bl	8002ca8 <run_pwm_out1>
	}
	else
	{
		stop_pwm_out1();
	}
}
 8001dec:	e001      	b.n	8001df2 <enablePWM+0x4a>
		stop_pwm_out1();
 8001dee:	f000 ff6f 	bl	8002cd0 <stop_pwm_out1>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <streamMeasurements>:

void streamMeasurements(SetupData_t *setupData, float *temp_data, Ina226Data_t *channel1, Ina226Data_t *channel2)
{
 8001dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e00:	b0b7      	sub	sp, #220	; 0xdc
 8001e02:	af1c      	add	r7, sp, #112	; 0x70
 8001e04:	6678      	str	r0, [r7, #100]	; 0x64
 8001e06:	6639      	str	r1, [r7, #96]	; 0x60
 8001e08:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e0a:	65bb      	str	r3, [r7, #88]	; 0x58

	if (newSetupData.setRegister.meas_mode == 1)
 8001e0c:	4b58      	ldr	r3, [pc, #352]	; (8001f70 <streamMeasurements+0x174>)
 8001e0e:	7ddb      	ldrb	r3, [r3, #23]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	f040 80a7 	bne.w	8001f64 <streamMeasurements+0x168>
//				setupData->setRegister.set_pwm1_duty, setupData->setRegister.set_pwm_freq, channel1->vshunt,
//				channel1->vbus, channel1->current, channel1->power, channel2->vshunt, channel2->vbus, channel2->current,
//				channel2->power, (channel2->power / channel1->power) * 100);

		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
				*temp_data, stm32Temp, stm32Vref, channel1->vshunt, channel1->vbus, channel1->current, channel1->power,
 8001e16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e18:	681b      	ldr	r3, [r3, #0]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fb9c 	bl	8000558 <__aeabi_f2d>
 8001e20:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 8001e24:	4b53      	ldr	r3, [pc, #332]	; (8001f74 <streamMeasurements+0x178>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fb95 	bl	8000558 <__aeabi_f2d>
 8001e2e:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8001e32:	4b51      	ldr	r3, [pc, #324]	; (8001f78 <streamMeasurements+0x17c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fb8e 	bl	8000558 <__aeabi_f2d>
 8001e3c:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
				*temp_data, stm32Temp, stm32Vref, channel1->vshunt, channel1->vbus, channel1->current, channel1->power,
 8001e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e42:	689b      	ldr	r3, [r3, #8]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fb87 	bl	8000558 <__aeabi_f2d>
 8001e4a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
				*temp_data, stm32Temp, stm32Vref, channel1->vshunt, channel1->vbus, channel1->current, channel1->power,
 8001e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e50:	685b      	ldr	r3, [r3, #4]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fb80 	bl	8000558 <__aeabi_f2d>
 8001e58:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
				*temp_data, stm32Temp, stm32Vref, channel1->vshunt, channel1->vbus, channel1->current, channel1->power,
 8001e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e5e:	681b      	ldr	r3, [r3, #0]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fb79 	bl	8000558 <__aeabi_f2d>
 8001e66:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				*temp_data, stm32Temp, stm32Vref, channel1->vshunt, channel1->vbus, channel1->current, channel1->power,
 8001e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e6c:	68db      	ldr	r3, [r3, #12]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fb72 	bl	8000558 <__aeabi_f2d>
 8001e74:	e9c7 0108 	strd	r0, r1, [r7, #32]
				channel2->vshunt, channel2->vbus, channel2->current, channel2->power,
 8001e78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e7a:	689b      	ldr	r3, [r3, #8]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb6b 	bl	8000558 <__aeabi_f2d>
 8001e82:	e9c7 0106 	strd	r0, r1, [r7, #24]
				channel2->vshunt, channel2->vbus, channel2->current, channel2->power,
 8001e86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e88:	685b      	ldr	r3, [r3, #4]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fb64 	bl	8000558 <__aeabi_f2d>
 8001e90:	e9c7 0104 	strd	r0, r1, [r7, #16]
				channel2->vshunt, channel2->vbus, channel2->current, channel2->power,
 8001e94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e96:	681b      	ldr	r3, [r3, #0]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fb5d 	bl	8000558 <__aeabi_f2d>
 8001e9e:	e9c7 0102 	strd	r0, r1, [r7, #8]
				channel2->vshunt, channel2->vbus, channel2->current, channel2->power,
 8001ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ea4:	68db      	ldr	r3, [r3, #12]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fb56 	bl	8000558 <__aeabi_f2d>
 8001eac:	e9c7 0100 	strd	r0, r1, [r7]
				(channel2->power / channel1->power), ina_in0, ina_in1, digRead(DIG_IN0), digRead(DIG_IN1));
 8001eb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eb2:	ed93 7a03 	vldr	s14, [r3, #12]
 8001eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eb8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ebc:	eec7 6a27 	vdiv.f32	s13, s14, s15
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001ec0:	ee16 0a90 	vmov	r0, s13
 8001ec4:	f7fe fb48 	bl	8000558 <__aeabi_f2d>
 8001ec8:	4682      	mov	sl, r0
 8001eca:	468b      	mov	fp, r1
 8001ecc:	4b2b      	ldr	r3, [pc, #172]	; (8001f7c <streamMeasurements+0x180>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fb41 	bl	8000558 <__aeabi_f2d>
 8001ed6:	4680      	mov	r8, r0
 8001ed8:	4689      	mov	r9, r1
 8001eda:	4b29      	ldr	r3, [pc, #164]	; (8001f80 <streamMeasurements+0x184>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fb3a 	bl	8000558 <__aeabi_f2d>
 8001ee4:	4604      	mov	r4, r0
 8001ee6:	460d      	mov	r5, r1
				(channel2->power / channel1->power), ina_in0, ina_in1, digRead(DIG_IN0), digRead(DIG_IN1));
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f7ff fe91 	bl	8001c10 <digRead>
 8001eee:	4603      	mov	r3, r0
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001ef0:	461e      	mov	r6, r3
				(channel2->power / channel1->power), ina_in0, ina_in1, digRead(DIG_IN0), digRead(DIG_IN1));
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f7ff fe8c 	bl	8001c10 <digRead>
 8001ef8:	4603      	mov	r3, r0
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001efa:	931b      	str	r3, [sp, #108]	; 0x6c
 8001efc:	961a      	str	r6, [sp, #104]	; 0x68
 8001efe:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 8001f02:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 8001f06:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8001f0a:	ed97 7b00 	vldr	d7, [r7]
 8001f0e:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8001f12:	ed97 7b02 	vldr	d7, [r7, #8]
 8001f16:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001f1a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f1e:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001f22:	ed97 7b06 	vldr	d7, [r7, #24]
 8001f26:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001f2a:	ed97 7b08 	vldr	d7, [r7, #32]
 8001f2e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001f32:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001f36:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001f3a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001f3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001f42:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001f46:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001f4a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001f4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001f52:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001f56:	ed8d 7b00 	vstr	d7, [sp]
 8001f5a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f5e:	4809      	ldr	r0, [pc, #36]	; (8001f84 <streamMeasurements+0x188>)
 8001f60:	f00f f8a6 	bl	80110b0 <iprintf>
//				channel2->vshunt * 1e3, channel2->vbus, channel2->current, channel2->power,
//				(channel2->power / channel1->power) * 100);

//		printf("#D#%0.1f#%0.1f#%0.3f#%0.3f#4#\n", LM75TempReading, stm32Temp, stm32Vref, channel1->vbus);
	}
}
 8001f64:	bf00      	nop
 8001f66:	376c      	adds	r7, #108	; 0x6c
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000720 	.word	0x20000720
 8001f74:	200006bc 	.word	0x200006bc
 8001f78:	200006c0 	.word	0x200006c0
 8001f7c:	200006c4 	.word	0x200006c4
 8001f80:	200006c8 	.word	0x200006c8
 8001f84:	08013690 	.word	0x08013690

08001f88 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001f8e:	4a13      	ldr	r2, [pc, #76]	; (8001fdc <MX_I2C1_Init+0x54>)
 8001f90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001f94:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <MX_I2C1_Init+0x58>)
 8001f96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f98:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001fa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001faa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fb8:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fc4:	4804      	ldr	r0, [pc, #16]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001fc6:	f004 f9d9 	bl	800637c <HAL_I2C_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fd0:	f000 fe42 	bl	8002c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	200006cc 	.word	0x200006cc
 8001fdc:	40005400 	.word	0x40005400
 8001fe0:	000186a0 	.word	0x000186a0

08001fe4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a19      	ldr	r2, [pc, #100]	; (8002068 <HAL_I2C_MspInit+0x84>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d12b      	bne.n	800205e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	4b18      	ldr	r3, [pc, #96]	; (800206c <HAL_I2C_MspInit+0x88>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	4a17      	ldr	r2, [pc, #92]	; (800206c <HAL_I2C_MspInit+0x88>)
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	6313      	str	r3, [r2, #48]	; 0x30
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <HAL_I2C_MspInit+0x88>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002022:	23c0      	movs	r3, #192	; 0xc0
 8002024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002026:	2312      	movs	r3, #18
 8002028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800202a:	2301      	movs	r3, #1
 800202c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002032:	2304      	movs	r3, #4
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4619      	mov	r1, r3
 800203c:	480c      	ldr	r0, [pc, #48]	; (8002070 <HAL_I2C_MspInit+0x8c>)
 800203e:	f003 ffa9 	bl	8005f94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_I2C_MspInit+0x88>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a08      	ldr	r2, [pc, #32]	; (800206c <HAL_I2C_MspInit+0x88>)
 800204c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002050:	6413      	str	r3, [r2, #64]	; 0x40
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_I2C_MspInit+0x88>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800205e:	bf00      	nop
 8002060:	3728      	adds	r7, #40	; 0x28
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40005400 	.word	0x40005400
 800206c:	40023800 	.word	0x40023800
 8002070:	40020400 	.word	0x40020400

08002074 <ina226_getBusVoltage>:
 */

#include "ina226.h"

float ina226_getBusVoltage(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	460b      	mov	r3, r1
 800207e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002082:	817b      	strh	r3, [r7, #10]
	return (ina226_getBusVoltageReg(I2CHandler, Address, preResult) * VBUS_LSB );
 8002084:	897b      	ldrh	r3, [r7, #10]
 8002086:	ed97 0a01 	vldr	s0, [r7, #4]
 800208a:	4619      	mov	r1, r3
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f000 f999 	bl	80023c4 <ina226_getBusVoltageReg>
 8002092:	4603      	mov	r3, r0
 8002094:	ee07 3a90 	vmov	s15, r3
 8002098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800209c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80020b0 <ina226_getBusVoltage+0x3c>
 80020a0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80020a4:	eeb0 0a67 	vmov.f32	s0, s15
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	3aa3d70a 	.word	0x3aa3d70a

080020b4 <ina226_getCurrent>:

float ina226_getCurrent(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	460b      	mov	r3, r1
 80020be:	ed87 0a01 	vstr	s0, [r7, #4]
 80020c2:	817b      	strh	r3, [r7, #10]
	return (ina226_getCurrentReg(I2CHandler, Address, preResult) * CURRENT_LSB );
 80020c4:	897b      	ldrh	r3, [r7, #10]
 80020c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80020ca:	4619      	mov	r1, r3
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f9fb 	bl	80024c8 <ina226_getCurrentReg>
 80020d2:	ee07 0a90 	vmov	s15, r0
 80020d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020da:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80020ec <ina226_getCurrent+0x38>
 80020de:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80020e2:	eeb0 0a67 	vmov.f32	s0, s15
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	3983126f 	.word	0x3983126f

080020f0 <ina226_getPower>:

float ina226_getPower(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	460b      	mov	r3, r1
 80020fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80020fe:	817b      	strh	r3, [r7, #10]
	return (ina226_getPowerReg(I2CHandler, Address, preResult) * POWER_LSB );
 8002100:	897b      	ldrh	r3, [r7, #10]
 8002102:	ed97 0a01 	vldr	s0, [r7, #4]
 8002106:	4619      	mov	r1, r3
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 f9a3 	bl	8002454 <ina226_getPowerReg>
 800210e:	4603      	mov	r3, r0
 8002110:	ee07 3a90 	vmov	s15, r3
 8002114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002118:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800212c <ina226_getPower+0x3c>
 800211c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002120:	eeb0 0a67 	vmov.f32	s0, s15
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	3bcccccd 	.word	0x3bcccccd

08002130 <ina226_getShuntVoltage>:

float ina226_getShuntVoltage(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	460b      	mov	r3, r1
 800213a:	ed87 0a01 	vstr	s0, [r7, #4]
 800213e:	817b      	strh	r3, [r7, #10]
	return (ina226_getShuntVoltageReg(I2CHandler, Address, preResult) * VSHUNT_LSB );
 8002140:	897b      	ldrh	r3, [r7, #10]
 8002142:	ed97 0a01 	vldr	s0, [r7, #4]
 8002146:	4619      	mov	r1, r3
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 f8f3 	bl	8002334 <ina226_getShuntVoltageReg>
 800214e:	ee07 0a90 	vmov	s15, r0
 8002152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002156:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002168 <ina226_getShuntVoltage+0x38>
 800215a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800215e:	eeb0 0a67 	vmov.f32	s0, s15
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	3627c5ac 	.word	0x3627c5ac

0800216c <ina226_setConfig>:

uint8_t ina226_setConfig(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint16_t ConfigWord)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af02      	add	r7, sp, #8
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	807b      	strh	r3, [r7, #2]
 8002178:	4613      	mov	r3, r2
 800217a:	803b      	strh	r3, [r7, #0]
	uint8_t sentTable[3];
	sentTable[0] = CONFIG_REG;
 800217c:	2300      	movs	r3, #0
 800217e:	733b      	strb	r3, [r7, #12]
	sentTable[1] = (ConfigWord & 0xFF00) >> 8;
 8002180:	883b      	ldrh	r3, [r7, #0]
 8002182:	0a1b      	lsrs	r3, r3, #8
 8002184:	b29b      	uxth	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	737b      	strb	r3, [r7, #13]
	sentTable[2] = (ConfigWord & 0x00FF);
 800218a:	883b      	ldrh	r3, [r7, #0]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	73bb      	strb	r3, [r7, #14]
	return HAL_I2C_Master_Transmit(I2CHandler, Address, sentTable, 3,
 8002190:	f107 020c 	add.w	r2, r7, #12
 8002194:	8879      	ldrh	r1, [r7, #2]
 8002196:	230a      	movs	r3, #10
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2303      	movs	r3, #3
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f004 fa31 	bl	8006604 <HAL_I2C_Master_Transmit>
 80021a2:	4603      	mov	r3, r0
	I2CTIMEOUT);
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <ina226_getConfig>:

uint16_t ina226_getConfig(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af02      	add	r7, sp, #8
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	807b      	strh	r3, [r7, #2]
	uint8_t sentTable[1] =
 80021b8:	2300      	movs	r3, #0
 80021ba:	733b      	strb	r3, [r7, #12]
	{ CONFIG_REG };
	uint8_t receivedTable[2];
	HAL_I2C_Master_Transmit(I2CHandler, Address, sentTable, 1, I2CTIMEOUT);
 80021bc:	f107 020c 	add.w	r2, r7, #12
 80021c0:	8879      	ldrh	r1, [r7, #2]
 80021c2:	230a      	movs	r3, #10
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	2301      	movs	r3, #1
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f004 fa1b 	bl	8006604 <HAL_I2C_Master_Transmit>
	if (HAL_I2C_Master_Receive(I2CHandler, Address, receivedTable, 2,
 80021ce:	f107 0208 	add.w	r2, r7, #8
 80021d2:	8879      	ldrh	r1, [r7, #2]
 80021d4:	230a      	movs	r3, #10
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	2302      	movs	r3, #2
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f004 fb10 	bl	8006800 <HAL_I2C_Master_Receive>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <ina226_getConfig+0x3e>
	I2CTIMEOUT) != HAL_OK)
		return 0x00;
 80021e6:	2300      	movs	r3, #0
 80021e8:	e007      	b.n	80021fa <ina226_getConfig+0x4e>
	else
		return ((uint16_t) receivedTable[0] << 8 | receivedTable[1]);
 80021ea:	7a3b      	ldrb	r3, [r7, #8]
 80021ec:	021b      	lsls	r3, r3, #8
 80021ee:	b21a      	sxth	r2, r3
 80021f0:	7a7b      	ldrb	r3, [r7, #9]
 80021f2:	b21b      	sxth	r3, r3
 80021f4:	4313      	orrs	r3, r2
 80021f6:	b21b      	sxth	r3, r3
 80021f8:	b29b      	uxth	r3, r3
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <ina226_setAVG>:

void ina226_setAVG(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint8_t AVG)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	807b      	strh	r3, [r7, #2]
 800220e:	4613      	mov	r3, r2
 8002210:	707b      	strb	r3, [r7, #1]
	uint16_t preConfigData = 0;
 8002212:	2300      	movs	r3, #0
 8002214:	81fb      	strh	r3, [r7, #14]
	preConfigData = ina226_getConfig(I2CHandler, Address);
 8002216:	887b      	ldrh	r3, [r7, #2]
 8002218:	4619      	mov	r1, r3
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ffc6 	bl	80021ac <ina226_getConfig>
 8002220:	4603      	mov	r3, r0
 8002222:	81fb      	strh	r3, [r7, #14]
	preConfigData = (preConfigData & 0xF1FF);	// Clear bits[11:9]
 8002224:	89fb      	ldrh	r3, [r7, #14]
 8002226:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 800222a:	81fb      	strh	r3, [r7, #14]
	preConfigData |= (AVG << 9);				// Shift AVG value into bit field [11:9]
 800222c:	787b      	ldrb	r3, [r7, #1]
 800222e:	025b      	lsls	r3, r3, #9
 8002230:	b21a      	sxth	r2, r3
 8002232:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002236:	4313      	orrs	r3, r2
 8002238:	b21b      	sxth	r3, r3
 800223a:	81fb      	strh	r3, [r7, #14]
	ina226_setConfig(I2CHandler, Address, preConfigData);
 800223c:	89fa      	ldrh	r2, [r7, #14]
 800223e:	887b      	ldrh	r3, [r7, #2]
 8002240:	4619      	mov	r1, r3
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff ff92 	bl	800216c <ina226_setConfig>
}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <ina226_setMODE>:
void ina226_setMODE(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint8_t MODE)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	807b      	strh	r3, [r7, #2]
 800225c:	4613      	mov	r3, r2
 800225e:	707b      	strb	r3, [r7, #1]
	uint16_t preConfigData = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	81fb      	strh	r3, [r7, #14]
	preConfigData = ina226_getConfig(I2CHandler, Address);
 8002264:	887b      	ldrh	r3, [r7, #2]
 8002266:	4619      	mov	r1, r3
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ff9f 	bl	80021ac <ina226_getConfig>
 800226e:	4603      	mov	r3, r0
 8002270:	81fb      	strh	r3, [r7, #14]
	preConfigData = (preConfigData & 0xFFF8);	// Clear bits [2:0]
 8002272:	89fb      	ldrh	r3, [r7, #14]
 8002274:	f023 0307 	bic.w	r3, r3, #7
 8002278:	81fb      	strh	r3, [r7, #14]
	preConfigData |= MODE;						// Or MODE value into bit field [2:0]
 800227a:	787b      	ldrb	r3, [r7, #1]
 800227c:	b29a      	uxth	r2, r3
 800227e:	89fb      	ldrh	r3, [r7, #14]
 8002280:	4313      	orrs	r3, r2
 8002282:	81fb      	strh	r3, [r7, #14]
	ina226_setConfig(I2CHandler, Address, preConfigData);
 8002284:	89fa      	ldrh	r2, [r7, #14]
 8002286:	887b      	ldrh	r3, [r7, #2]
 8002288:	4619      	mov	r1, r3
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ff6e 	bl	800216c <ina226_setConfig>
}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <ina226_setVBUSCT>:

void ina226_setVBUSCT(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint8_t VBUSCT)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	807b      	strh	r3, [r7, #2]
 80022a4:	4613      	mov	r3, r2
 80022a6:	707b      	strb	r3, [r7, #1]
	uint16_t preConfigData = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	81fb      	strh	r3, [r7, #14]
	preConfigData = ina226_getConfig(I2CHandler, Address);
 80022ac:	887b      	ldrh	r3, [r7, #2]
 80022ae:	4619      	mov	r1, r3
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff7b 	bl	80021ac <ina226_getConfig>
 80022b6:	4603      	mov	r3, r0
 80022b8:	81fb      	strh	r3, [r7, #14]
	preConfigData = (preConfigData & 0xFE3F);	// Clear bits [8:6]
 80022ba:	89fb      	ldrh	r3, [r7, #14]
 80022bc:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80022c0:	81fb      	strh	r3, [r7, #14]
	preConfigData |= (VBUSCT << 6);				// shift VBUS 6 places and or with previous Configuration Data
 80022c2:	787b      	ldrb	r3, [r7, #1]
 80022c4:	019b      	lsls	r3, r3, #6
 80022c6:	b21a      	sxth	r2, r3
 80022c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	b21b      	sxth	r3, r3
 80022d0:	81fb      	strh	r3, [r7, #14]
	ina226_setConfig(I2CHandler, Address, preConfigData);
 80022d2:	89fa      	ldrh	r2, [r7, #14]
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	4619      	mov	r1, r3
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7ff ff47 	bl	800216c <ina226_setConfig>
}
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <ina226_setVSHUNTCT>:

void ina226_setVSHUNTCT(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint8_t VSHUNTCT)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	460b      	mov	r3, r1
 80022f0:	807b      	strh	r3, [r7, #2]
 80022f2:	4613      	mov	r3, r2
 80022f4:	707b      	strb	r3, [r7, #1]
	uint16_t preConfigData = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	81fb      	strh	r3, [r7, #14]
	preConfigData = ina226_getConfig(I2CHandler, Address);
 80022fa:	887b      	ldrh	r3, [r7, #2]
 80022fc:	4619      	mov	r1, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff ff54 	bl	80021ac <ina226_getConfig>
 8002304:	4603      	mov	r3, r0
 8002306:	81fb      	strh	r3, [r7, #14]
	preConfigData = (preConfigData & 0xFFC7);	// Clear bits [5:3]
 8002308:	89fb      	ldrh	r3, [r7, #14]
 800230a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800230e:	81fb      	strh	r3, [r7, #14]
	preConfigData |= (VSHUNTCT << 3);			// shift VBUS 3 places and or with previous Configuration Data
 8002310:	787b      	ldrb	r3, [r7, #1]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	b21a      	sxth	r2, r3
 8002316:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800231a:	4313      	orrs	r3, r2
 800231c:	b21b      	sxth	r3, r3
 800231e:	81fb      	strh	r3, [r7, #14]
	ina226_setConfig(I2CHandler, Address, preConfigData);
 8002320:	89fa      	ldrh	r2, [r7, #14]
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	4619      	mov	r1, r3
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ff20 	bl	800216c <ina226_setConfig>
}
 800232c:	bf00      	nop
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <ina226_getShuntVoltageReg>:
	float convRshunt = (((float) (Rshunt >> 3) * 0.001)) * (pow(10, (float) (Rshunt & 0x07)));
	ina226_setCalibrationReg(I2CHandler, Address, (uint16_t) (INA226_CONST / (convRshunt * CURRENT_LSB )));
}

int32_t ina226_getShuntVoltageReg(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af02      	add	r7, sp, #8
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	460b      	mov	r3, r1
 800233e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002342:	817b      	strh	r3, [r7, #10]
	uint8_t SentTable[1] =
 8002344:	2301      	movs	r3, #1
 8002346:	753b      	strb	r3, [r7, #20]
	{ SHUNTV_REG };
	uint8_t ReceivedTable[2];
	HAL_I2C_Master_Transmit(I2CHandler, Address, SentTable, 1, I2CTIMEOUT);
 8002348:	f107 0214 	add.w	r2, r7, #20
 800234c:	8979      	ldrh	r1, [r7, #10]
 800234e:	230a      	movs	r3, #10
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	2301      	movs	r3, #1
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f004 f955 	bl	8006604 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(I2CHandler, Address, ReceivedTable, 2, I2CTIMEOUT);
 800235a:	f107 0210 	add.w	r2, r7, #16
 800235e:	8979      	ldrh	r1, [r7, #10]
 8002360:	230a      	movs	r3, #10
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	2302      	movs	r3, #2
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f004 fa4a 	bl	8006800 <HAL_I2C_Master_Receive>
	if (HAL_I2C_Master_Receive(I2CHandler, Address, ReceivedTable, 2,
 800236c:	f107 0210 	add.w	r2, r7, #16
 8002370:	8979      	ldrh	r1, [r7, #10]
 8002372:	230a      	movs	r3, #10
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	2302      	movs	r3, #2
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f004 fa41 	bl	8006800 <HAL_I2C_Master_Receive>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <ina226_getShuntVoltageReg+0x66>
	I2CTIMEOUT) != HAL_OK)
	{
		return (int32_t) (preResult / VSHUNT_LSB );
 8002384:	ed97 7a01 	vldr	s14, [r7, #4]
 8002388:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80023c0 <ina226_getShuntVoltageReg+0x8c>
 800238c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002394:	ee17 3a90 	vmov	r3, s15
 8002398:	e00e      	b.n	80023b8 <ina226_getShuntVoltageReg+0x84>
	}
	else
	{
		if (ReceivedTable[0] > 127)
 800239a:	7c3b      	ldrb	r3, [r7, #16]
 800239c:	b25b      	sxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	da06      	bge.n	80023b0 <ina226_getShuntVoltageReg+0x7c>
		{
			return (int32_t) ((ReceivedTable[0] << 8 | ReceivedTable[1]) - INA226_ADC_RESOLUTION );
 80023a2:	7c3b      	ldrb	r3, [r7, #16]
 80023a4:	021b      	lsls	r3, r3, #8
 80023a6:	7c7a      	ldrb	r2, [r7, #17]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80023ae:	e003      	b.n	80023b8 <ina226_getShuntVoltageReg+0x84>
		}
		else
		{

			return ((int32_t) ReceivedTable[0] << 8 | ReceivedTable[1]);
 80023b0:	7c3b      	ldrb	r3, [r7, #16]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	7c7a      	ldrb	r2, [r7, #17]
 80023b6:	4313      	orrs	r3, r2
		}
	}
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	3627c5ac 	.word	0x3627c5ac

080023c4 <ina226_getBusVoltageReg>:

uint16_t ina226_getBusVoltageReg(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	460b      	mov	r3, r1
 80023ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80023d2:	817b      	strh	r3, [r7, #10]
	uint8_t sentTable[1] =
 80023d4:	2302      	movs	r3, #2
 80023d6:	753b      	strb	r3, [r7, #20]
	{ BUSV_REG };
	uint8_t receivedTable[2];
	HAL_I2C_Master_Transmit(I2CHandler, Address, sentTable, 1, I2CTIMEOUT);
 80023d8:	f107 0214 	add.w	r2, r7, #20
 80023dc:	8979      	ldrh	r1, [r7, #10]
 80023de:	230a      	movs	r3, #10
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	2301      	movs	r3, #1
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f004 f90d 	bl	8006604 <HAL_I2C_Master_Transmit>
	if (HAL_I2C_Master_Receive(I2CHandler, Address, receivedTable, 2, I2CTIMEOUT) != HAL_OK)
 80023ea:	f107 0210 	add.w	r2, r7, #16
 80023ee:	8979      	ldrh	r1, [r7, #10]
 80023f0:	230a      	movs	r3, #10
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	2302      	movs	r3, #2
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f004 fa02 	bl	8006800 <HAL_I2C_Master_Receive>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <ina226_getBusVoltageReg+0x56>
	{
		return (uint16_t) (preResult / VBUS_LSB );
 8002402:	ed97 7a01 	vldr	s14, [r7, #4]
 8002406:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002450 <ina226_getBusVoltageReg+0x8c>
 800240a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800240e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002412:	ee17 3a90 	vmov	r3, s15
 8002416:	b29b      	uxth	r3, r3
 8002418:	e016      	b.n	8002448 <ina226_getBusVoltageReg+0x84>
	}
	else
	{
		if (receivedTable[0] > 127)
 800241a:	7c3b      	ldrb	r3, [r7, #16]
 800241c:	b25b      	sxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	da0a      	bge.n	8002438 <ina226_getBusVoltageReg+0x74>
		{
			return (uint16_t) (INA226_ADC_RESOLUTION - (receivedTable[0] << 8 | receivedTable[1]));
 8002422:	7c3b      	ldrb	r3, [r7, #16]
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	b21a      	sxth	r2, r3
 8002428:	7c7b      	ldrb	r3, [r7, #17]
 800242a:	b21b      	sxth	r3, r3
 800242c:	4313      	orrs	r3, r2
 800242e:	b21b      	sxth	r3, r3
 8002430:	b29b      	uxth	r3, r3
 8002432:	425b      	negs	r3, r3
 8002434:	b29b      	uxth	r3, r3
 8002436:	e007      	b.n	8002448 <ina226_getBusVoltageReg+0x84>
		}
		else
		{
			return ((uint16_t) receivedTable[0] << 8 | receivedTable[1]);
 8002438:	7c3b      	ldrb	r3, [r7, #16]
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	b21a      	sxth	r2, r3
 800243e:	7c7b      	ldrb	r3, [r7, #17]
 8002440:	b21b      	sxth	r3, r3
 8002442:	4313      	orrs	r3, r2
 8002444:	b21b      	sxth	r3, r3
 8002446:	b29b      	uxth	r3, r3
		}
	}
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	3aa3d70a 	.word	0x3aa3d70a

08002454 <ina226_getPowerReg>:

uint16_t ina226_getPowerReg(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af02      	add	r7, sp, #8
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	460b      	mov	r3, r1
 800245e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002462:	817b      	strh	r3, [r7, #10]
	uint8_t SentTable[1] =
 8002464:	2303      	movs	r3, #3
 8002466:	753b      	strb	r3, [r7, #20]
	{ POWER_REG };
	uint8_t ReceivedTable[2];
	HAL_I2C_Master_Transmit(I2CHandler, Address, SentTable, 1, I2CTIMEOUT);
 8002468:	f107 0214 	add.w	r2, r7, #20
 800246c:	8979      	ldrh	r1, [r7, #10]
 800246e:	230a      	movs	r3, #10
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2301      	movs	r3, #1
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f004 f8c5 	bl	8006604 <HAL_I2C_Master_Transmit>
	if (HAL_I2C_Master_Receive(I2CHandler, Address, ReceivedTable, 2,
 800247a:	f107 0210 	add.w	r2, r7, #16
 800247e:	8979      	ldrh	r1, [r7, #10]
 8002480:	230a      	movs	r3, #10
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2302      	movs	r3, #2
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f004 f9ba 	bl	8006800 <HAL_I2C_Master_Receive>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00b      	beq.n	80024aa <ina226_getPowerReg+0x56>
	I2CTIMEOUT) != HAL_OK)
	{
		return preResult / POWER_LSB ;
 8002492:	ed97 7a01 	vldr	s14, [r7, #4]
 8002496:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80024c4 <ina226_getPowerReg+0x70>
 800249a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800249e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024a2:	ee17 3a90 	vmov	r3, s15
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	e007      	b.n	80024ba <ina226_getPowerReg+0x66>
	}
	else
		return (uint16_t) (ReceivedTable[0] << 8 | ReceivedTable[1]);
 80024aa:	7c3b      	ldrb	r3, [r7, #16]
 80024ac:	021b      	lsls	r3, r3, #8
 80024ae:	b21a      	sxth	r2, r3
 80024b0:	7c7b      	ldrb	r3, [r7, #17]
 80024b2:	b21b      	sxth	r3, r3
 80024b4:	4313      	orrs	r3, r2
 80024b6:	b21b      	sxth	r3, r3
 80024b8:	b29b      	uxth	r3, r3

}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	3bcccccd 	.word	0x3bcccccd

080024c8 <ina226_getCurrentReg>:

int32_t ina226_getCurrentReg(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	460b      	mov	r3, r1
 80024d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80024d6:	817b      	strh	r3, [r7, #10]
	uint8_t SentTable[1] =
 80024d8:	2304      	movs	r3, #4
 80024da:	753b      	strb	r3, [r7, #20]
	{ CURRENT_REG };
	uint8_t ReceivedTable[2];
	HAL_I2C_Master_Transmit(I2CHandler, Address, SentTable, 1, I2CTIMEOUT);
 80024dc:	f107 0214 	add.w	r2, r7, #20
 80024e0:	8979      	ldrh	r1, [r7, #10]
 80024e2:	230a      	movs	r3, #10
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	2301      	movs	r3, #1
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f004 f88b 	bl	8006604 <HAL_I2C_Master_Transmit>
	if (HAL_I2C_Master_Receive(I2CHandler, Address, ReceivedTable, 2,
 80024ee:	f107 0210 	add.w	r2, r7, #16
 80024f2:	8979      	ldrh	r1, [r7, #10]
 80024f4:	230a      	movs	r3, #10
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	2302      	movs	r3, #2
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f004 f980 	bl	8006800 <HAL_I2C_Master_Receive>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00b      	beq.n	800251e <ina226_getCurrentReg+0x56>
	I2CTIMEOUT) != HAL_OK)
	{
		return (uint16_t) (preResult / CURRENT_LSB );
 8002506:	ed97 7a01 	vldr	s14, [r7, #4]
 800250a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002544 <ina226_getCurrentReg+0x7c>
 800250e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002516:	ee17 3a90 	vmov	r3, s15
 800251a:	b29b      	uxth	r3, r3
 800251c:	e00e      	b.n	800253c <ina226_getCurrentReg+0x74>
	}
	else
	{
		if (ReceivedTable[0] > 127)
 800251e:	7c3b      	ldrb	r3, [r7, #16]
 8002520:	b25b      	sxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	da06      	bge.n	8002534 <ina226_getCurrentReg+0x6c>
		{
			return ((int32_t) ((ReceivedTable[0] << 8 | ReceivedTable[1]) - INA226_ADC_RESOLUTION ));
 8002526:	7c3b      	ldrb	r3, [r7, #16]
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	7c7a      	ldrb	r2, [r7, #17]
 800252c:	4313      	orrs	r3, r2
 800252e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8002532:	e003      	b.n	800253c <ina226_getCurrentReg+0x74>
		}
		else
		{

			return ((int32_t) ReceivedTable[0] << 8 | ReceivedTable[1]);
 8002534:	7c3b      	ldrb	r3, [r7, #16]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	7c7a      	ldrb	r2, [r7, #17]
 800253a:	4313      	orrs	r3, r2
		}
	}

}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	3983126f 	.word	0x3983126f

08002548 <ina226_setCalibrationReg>:

uint8_t ina226_setCalibrationReg(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint16_t ConfigWord)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af02      	add	r7, sp, #8
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	807b      	strh	r3, [r7, #2]
 8002554:	4613      	mov	r3, r2
 8002556:	803b      	strh	r3, [r7, #0]
	uint8_t sentTable[3];
	sentTable[0] = CALIB_REG;
 8002558:	2305      	movs	r3, #5
 800255a:	733b      	strb	r3, [r7, #12]
	sentTable[1] = (ConfigWord & 0xFF00) >> 8;
 800255c:	883b      	ldrh	r3, [r7, #0]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	b29b      	uxth	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	737b      	strb	r3, [r7, #13]
	sentTable[2] = (ConfigWord & 0x00FF);
 8002566:	883b      	ldrh	r3, [r7, #0]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	73bb      	strb	r3, [r7, #14]
	return HAL_I2C_Master_Transmit(I2CHandler, Address, sentTable, 3,
 800256c:	f107 020c 	add.w	r2, r7, #12
 8002570:	8879      	ldrh	r1, [r7, #2]
 8002572:	230a      	movs	r3, #10
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	2303      	movs	r3, #3
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f004 f843 	bl	8006604 <HAL_I2C_Master_Transmit>
 800257e:	4603      	mov	r3, r0
	I2CTIMEOUT);
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <ina226_getResult>:

	return calRegResult;
}

void ina226_getResult(Ina226Data_t *resultdef, I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	4613      	mov	r3, r2
 8002594:	80fb      	strh	r3, [r7, #6]
	resultdef->vbus = ina226_getBusVoltage(I2CHandler, Address, resultdef->vbus);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	edd3 7a01 	vldr	s15, [r3, #4]
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	eeb0 0a67 	vmov.f32	s0, s15
 80025a2:	4619      	mov	r1, r3
 80025a4:	68b8      	ldr	r0, [r7, #8]
 80025a6:	f7ff fd65 	bl	8002074 <ina226_getBusVoltage>
 80025aa:	eef0 7a40 	vmov.f32	s15, s0
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	edc3 7a01 	vstr	s15, [r3, #4]
	osDelay(1);
 80025b4:	2001      	movs	r0, #1
 80025b6:	f00b ff28 	bl	800e40a <osDelay>
	resultdef->current = ina226_getCurrent(I2CHandler, Address, resultdef->current);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	edd3 7a00 	vldr	s15, [r3]
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	eeb0 0a67 	vmov.f32	s0, s15
 80025c6:	4619      	mov	r1, r3
 80025c8:	68b8      	ldr	r0, [r7, #8]
 80025ca:	f7ff fd73 	bl	80020b4 <ina226_getCurrent>
 80025ce:	eef0 7a40 	vmov.f32	s15, s0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	edc3 7a00 	vstr	s15, [r3]
	osDelay(1);
 80025d8:	2001      	movs	r0, #1
 80025da:	f00b ff16 	bl	800e40a <osDelay>
	resultdef->vshunt = ina226_getShuntVoltage(I2CHandler, Address, resultdef->vshunt);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ea:	4619      	mov	r1, r3
 80025ec:	68b8      	ldr	r0, [r7, #8]
 80025ee:	f7ff fd9f 	bl	8002130 <ina226_getShuntVoltage>
 80025f2:	eef0 7a40 	vmov.f32	s15, s0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	edc3 7a02 	vstr	s15, [r3, #8]
	osDelay(1);
 80025fc:	2001      	movs	r0, #1
 80025fe:	f00b ff04 	bl	800e40a <osDelay>
	resultdef->power = ina226_getPower(I2CHandler, Address, resultdef->power);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	edd3 7a03 	vldr	s15, [r3, #12]
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	eeb0 0a67 	vmov.f32	s0, s15
 800260e:	4619      	mov	r1, r3
 8002610:	68b8      	ldr	r0, [r7, #8]
 8002612:	f7ff fd6d 	bl	80020f0 <ina226_getPower>
 8002616:	eef0 7a40 	vmov.f32	s15, s0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	edc3 7a03 	vstr	s15, [r3, #12]
	osDelay(1);
 8002620:	2001      	movs	r0, #1
 8002622:	f00b fef2 	bl	800e40a <osDelay>
//	{
//		resultdef->current = ina226_getCurrent(I2CHandler, Address);
//		resultdef->vshunt = ina226_getShuntVoltage(I2CHandler, Address);
//		resultdef->power = ina226_getPower(I2CHandler, Address);
//	}
}
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <ina226_setMaskEnable>:
	else
		return ((uint16_t) receivedTable[0] << 8 | receivedTable[1]);
}

uint8_t ina226_setMaskEnable(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint16_t ConfigWord)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af02      	add	r7, sp, #8
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	460b      	mov	r3, r1
 8002638:	807b      	strh	r3, [r7, #2]
 800263a:	4613      	mov	r3, r2
 800263c:	803b      	strh	r3, [r7, #0]
	uint8_t sentTable[3];
	sentTable[0] = MASK_REG;
 800263e:	2306      	movs	r3, #6
 8002640:	733b      	strb	r3, [r7, #12]
	sentTable[1] = (ConfigWord & 0xFF00) >> 8;
 8002642:	883b      	ldrh	r3, [r7, #0]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	b29b      	uxth	r3, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	737b      	strb	r3, [r7, #13]
	sentTable[2] = (ConfigWord & 0x00FF);
 800264c:	883b      	ldrh	r3, [r7, #0]
 800264e:	b2db      	uxtb	r3, r3
 8002650:	73bb      	strb	r3, [r7, #14]
	return HAL_I2C_Master_Transmit(I2CHandler, Address, sentTable, 3,
 8002652:	f107 020c 	add.w	r2, r7, #12
 8002656:	8879      	ldrh	r1, [r7, #2]
 8002658:	230a      	movs	r3, #10
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	2303      	movs	r3, #3
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f003 ffd0 	bl	8006604 <HAL_I2C_Master_Transmit>
 8002664:	4603      	mov	r3, r0
	I2CTIMEOUT);
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <ina226_channelInit>:
	else
		return ((uint16_t) receivedTable[0] << 8 | receivedTable[1]);
}

void ina226_channelInit(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint16_t config)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	460b      	mov	r3, r1
 8002678:	807b      	strh	r3, [r7, #2]
 800267a:	4613      	mov	r3, r2
 800267c:	803b      	strh	r3, [r7, #0]
	ina226_setCalibrationReg(I2CHandler, Address, CALIB_VAL);
 800267e:	887b      	ldrh	r3, [r7, #2]
 8002680:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002684:	4619      	mov	r1, r3
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ff5e 	bl	8002548 <ina226_setCalibrationReg>
	ina226_setConfig(I2CHandler, Address, config);
 800268c:	883a      	ldrh	r2, [r7, #0]
 800268e:	887b      	ldrh	r3, [r7, #2]
 8002690:	4619      	mov	r1, r3
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff fd6a 	bl	800216c <ina226_setConfig>
}
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <ina226_setBusUnderVoltageAlert>:
void ina226_setBusUnderVoltageAlert(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	807b      	strh	r3, [r7, #2]
	ina226_setMaskEnable(I2CHandler, Address, (BUL | APOL));
 80026ac:	887b      	ldrh	r3, [r7, #2]
 80026ae:	f241 0202 	movw	r2, #4098	; 0x1002
 80026b2:	4619      	mov	r1, r3
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff ffba 	bl	800262e <ina226_setMaskEnable>
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <ina226_setBusOverVoltageAlert>:

void ina226_setBusOverVoltageAlert(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	460b      	mov	r3, r1
 80026cc:	807b      	strh	r3, [r7, #2]
	ina226_setMaskEnable(I2CHandler, Address, (BOL | APOL));
 80026ce:	887b      	ldrh	r3, [r7, #2]
 80026d0:	f242 0202 	movw	r2, #8194	; 0x2002
 80026d4:	4619      	mov	r1, r3
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff ffa9 	bl	800262e <ina226_setMaskEnable>
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <ina226_setShuntOverVoltageAlert>:
{
	ina226_setAlertLimit(I2CHandler, Address, (uint16_t) (limit / VBUS_LSB ));
}

void ina226_setShuntOverVoltageAlert(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
	ina226_setMaskEnable(I2CHandler, Address, (SOL | APOL));
 80026f0:	887b      	ldrh	r3, [r7, #2]
 80026f2:	f248 0202 	movw	r2, #32770	; 0x8002
 80026f6:	4619      	mov	r1, r3
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ff98 	bl	800262e <ina226_setMaskEnable>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <ina226_setShuntUnderVoltageAlert>:
void ina226_setShuntUnderVoltageAlert(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	460b      	mov	r3, r1
 8002710:	807b      	strh	r3, [r7, #2]
	ina226_setMaskEnable(I2CHandler, Address, (SUL | APOL));
 8002712:	887b      	ldrh	r3, [r7, #2]
 8002714:	f244 0202 	movw	r2, #16386	; 0x4002
 8002718:	4619      	mov	r1, r3
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ff87 	bl	800262e <ina226_setMaskEnable>
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <ina226_setOverPowerAlert>:
{
	ina226_setAlertLimit(I2CHandler, Address, (uint16_t) (limit / VSHUNT_LSB ));
}

void ina226_setOverPowerAlert(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	807b      	strh	r3, [r7, #2]
	ina226_setMaskEnable(I2CHandler, Address, (POL | APOL));
 8002734:	887b      	ldrh	r3, [r7, #2]
 8002736:	f640 0202 	movw	r2, #2050	; 0x802
 800273a:	4619      	mov	r1, r3
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff ff76 	bl	800262e <ina226_setMaskEnable>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <ina226_setOverCurrentAlert>:
{
	ina226_setAlertLimit(I2CHandler, Address, (uint16_t) (limit / POWER_LSB ));
}

void ina226_setOverCurrentAlert(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	460b      	mov	r3, r1
 8002754:	807b      	strh	r3, [r7, #2]
	ina226_setMaskEnable(I2CHandler, Address, (SOL | APOL));
 8002756:	887b      	ldrh	r3, [r7, #2]
 8002758:	f248 0202 	movw	r2, #32770	; 0x8002
 800275c:	4619      	mov	r1, r3
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff ff65 	bl	800262e <ina226_setMaskEnable>
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <ina226_setUnderCurrentAlert>:

void ina226_setUnderCurrentAlert(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	807b      	strh	r3, [r7, #2]
	ina226_setMaskEnable(I2CHandler, Address, (SUL | APOL));
 8002778:	887b      	ldrh	r3, [r7, #2]
 800277a:	f244 0202 	movw	r2, #16386	; 0x4002
 800277e:	4619      	mov	r1, r3
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff ff54 	bl	800262e <ina226_setMaskEnable>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <led1On>:
 */

#include "led.h"

void led1On(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8002794:	2200      	movs	r2, #0
 8002796:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800279a:	4802      	ldr	r0, [pc, #8]	; (80027a4 <led1On+0x14>)
 800279c:	f003 fd96 	bl	80062cc <HAL_GPIO_WritePin>
}
 80027a0:	bf00      	nop
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40020400 	.word	0x40020400

080027a8 <led2On>:

void led2On(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 80027ac:	2200      	movs	r2, #0
 80027ae:	2110      	movs	r1, #16
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <led2On+0x14>)
 80027b2:	f003 fd8b 	bl	80062cc <HAL_GPIO_WritePin>
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40020000 	.word	0x40020000

080027c0 <led1Off>:

void led1Off(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 80027c4:	2201      	movs	r2, #1
 80027c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027ca:	4802      	ldr	r0, [pc, #8]	; (80027d4 <led1Off+0x14>)
 80027cc:	f003 fd7e 	bl	80062cc <HAL_GPIO_WritePin>
}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40020400 	.word	0x40020400

080027d8 <led2Off>:

void led2Off(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 80027dc:	2201      	movs	r2, #1
 80027de:	2110      	movs	r1, #16
 80027e0:	4802      	ldr	r0, [pc, #8]	; (80027ec <led2Off+0x14>)
 80027e2:	f003 fd73 	bl	80062cc <HAL_GPIO_WritePin>
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40020000 	.word	0x40020000

080027f0 <led1Blink>:

void led1Blink(uint16_t delay)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 80027fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027fe:	4805      	ldr	r0, [pc, #20]	; (8002814 <led1Blink+0x24>)
 8002800:	f003 fd7d 	bl	80062fe <HAL_GPIO_TogglePin>
	HAL_Delay((uint16_t) delay);
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	4618      	mov	r0, r3
 8002808:	f002 fb40 	bl	8004e8c <HAL_Delay>
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40020400 	.word	0x40020400

08002818 <lm75ad_readTempReg>:
	sent_table[1] = configuration;
	HAL_I2C_Master_Transmit(I2CHandler, Address, sent_table, 2, I2C_TIMEOUT);
}

uint16_t lm75ad_readTempReg(I2C_HandleTypeDef *I2CHandler, uint8_t Address, float preResult)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	460b      	mov	r3, r1
 8002822:	ed87 0a01 	vstr	s0, [r7, #4]
 8002826:	72fb      	strb	r3, [r7, #11]
	uint8_t sent_table[1] =
 8002828:	2300      	movs	r3, #0
 800282a:	753b      	strb	r3, [r7, #20]
	{ TEMP_REG };
	uint8_t received_table[2];
	HAL_I2C_Master_Transmit(I2CHandler, Address, sent_table, 1, I2C_TIMEOUT);
 800282c:	7afb      	ldrb	r3, [r7, #11]
 800282e:	b299      	uxth	r1, r3
 8002830:	f107 0214 	add.w	r2, r7, #20
 8002834:	230a      	movs	r3, #10
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	2301      	movs	r3, #1
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f003 fee2 	bl	8006604 <HAL_I2C_Master_Transmit>

	if (HAL_I2C_Master_Receive(I2CHandler, Address, received_table, 2, I2C_TIMEOUT) != HAL_OK)
 8002840:	7afb      	ldrb	r3, [r7, #11]
 8002842:	b299      	uxth	r1, r3
 8002844:	f107 0210 	add.w	r2, r7, #16
 8002848:	230a      	movs	r3, #10
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	2302      	movs	r3, #2
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f003 ffd6 	bl	8006800 <HAL_I2C_Master_Receive>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d011      	beq.n	800287e <lm75ad_readTempReg+0x66>
	{
		return (uint16_t) (preResult / TEMP_RESOLUTION);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fd fe7c 	bl	8000558 <__aeabi_f2d>
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002868:	f7fd fff8 	bl	800085c <__aeabi_ddiv>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4610      	mov	r0, r2
 8002872:	4619      	mov	r1, r3
 8002874:	f7fe f9a0 	bl	8000bb8 <__aeabi_d2uiz>
 8002878:	4603      	mov	r3, r0
 800287a:	b29b      	uxth	r3, r3
 800287c:	e005      	b.n	800288a <lm75ad_readTempReg+0x72>
	}
	else
	{
		return (uint16_t) (((received_table[0] << 8) | received_table[1]) >> 5);
 800287e:	7c3b      	ldrb	r3, [r7, #16]
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	7c7a      	ldrb	r2, [r7, #17]
 8002884:	4313      	orrs	r3, r2
 8002886:	115b      	asrs	r3, r3, #5
 8002888:	b29b      	uxth	r3, r3
	}

}
 800288a:	4618      	mov	r0, r3
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <lm75ad_setTosLimit>:

void lm75ad_setTosLimit(I2C_HandleTypeDef *I2CHandler, uint8_t Address, float tos_limit)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af02      	add	r7, sp, #8
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	460b      	mov	r3, r1
 800289e:	ed87 0a01 	vstr	s0, [r7, #4]
 80028a2:	72fb      	strb	r3, [r7, #11]
	uint16_t sent_limit = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	82fb      	strh	r3, [r7, #22]
	/*Example: Temp = -55C*/
	/*512-(-55*(-2))*=402 ==> 402<<7=51456 (0x0192<<7 = 0xC900)*/

	if (tos_limit < 0)
 80028a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80028ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b4:	d51b      	bpl.n	80028ee <lm75ad_setTosLimit+0x5a>
	{
		sent_limit = (512 - ((uint16_t) (-tos_limit / TOS_THYST_RESOLUTION))) << 7;
 80028b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80028ba:	eef1 7a67 	vneg.f32	s15, s15
 80028be:	ee17 3a90 	vmov	r3, s15
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fd fe48 	bl	8000558 <__aeabi_f2d>
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <lm75ad_setTosLimit+0xb0>)
 80028ce:	f7fd ffc5 	bl	800085c <__aeabi_ddiv>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	f7fe f96d 	bl	8000bb8 <__aeabi_d2uiz>
 80028de:	4603      	mov	r3, r0
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	01db      	lsls	r3, r3, #7
 80028ea:	82fb      	strh	r3, [r7, #22]
 80028ec:	e011      	b.n	8002912 <lm75ad_setTosLimit+0x7e>
	}
	else
	{
		sent_limit = (uint16_t) (tos_limit / TOS_THYST_RESOLUTION) << 7;
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fd fe32 	bl	8000558 <__aeabi_f2d>
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	4b12      	ldr	r3, [pc, #72]	; (8002944 <lm75ad_setTosLimit+0xb0>)
 80028fa:	f7fd ffaf 	bl	800085c <__aeabi_ddiv>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	f7fe f957 	bl	8000bb8 <__aeabi_d2uiz>
 800290a:	4603      	mov	r3, r0
 800290c:	b29b      	uxth	r3, r3
 800290e:	01db      	lsls	r3, r3, #7
 8002910:	82fb      	strh	r3, [r7, #22]
	}

	uint8_t sent_table[3];
	sent_table[0] = TOS_REG;
 8002912:	2303      	movs	r3, #3
 8002914:	743b      	strb	r3, [r7, #16]
	sent_table[1] = (sent_limit & 0xFF00) >> 8;
 8002916:	8afb      	ldrh	r3, [r7, #22]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	b29b      	uxth	r3, r3
 800291c:	b2db      	uxtb	r3, r3
 800291e:	747b      	strb	r3, [r7, #17]
	sent_table[2] = (sent_limit & 0x00FF);
 8002920:	8afb      	ldrh	r3, [r7, #22]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Master_Transmit(I2CHandler, Address, sent_table, 3,
 8002926:	7afb      	ldrb	r3, [r7, #11]
 8002928:	b299      	uxth	r1, r3
 800292a:	f107 0210 	add.w	r2, r7, #16
 800292e:	230a      	movs	r3, #10
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	2303      	movs	r3, #3
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f003 fe65 	bl	8006604 <HAL_I2C_Master_Transmit>
	I2C_TIMEOUT);

}
 800293a:	bf00      	nop
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	3fe00000 	.word	0x3fe00000

08002948 <lm75ad_setThystLimit>:

	}
}

void lm75ad_setThystLimit(I2C_HandleTypeDef *I2CHandler, uint8_t Address, float thyst_limit)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af02      	add	r7, sp, #8
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	460b      	mov	r3, r1
 8002952:	ed87 0a01 	vstr	s0, [r7, #4]
 8002956:	72fb      	strb	r3, [r7, #11]
	uint16_t sent_limit = 0;
 8002958:	2300      	movs	r3, #0
 800295a:	82fb      	strh	r3, [r7, #22]
	/*Example: Temp = -55C*/
	/*512-(-55*(-2))*=402 ==> 402<<7=51456 (0x0192<<7 = 0xC900)*/

	if (thyst_limit < 0)
 800295c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002960:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002968:	d51b      	bpl.n	80029a2 <lm75ad_setThystLimit+0x5a>
	{
		sent_limit = (512 - ((uint16_t) (-thyst_limit / TOS_THYST_RESOLUTION))) << 7;
 800296a:	edd7 7a01 	vldr	s15, [r7, #4]
 800296e:	eef1 7a67 	vneg.f32	s15, s15
 8002972:	ee17 3a90 	vmov	r3, s15
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fdee 	bl	8000558 <__aeabi_f2d>
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <lm75ad_setThystLimit+0xb0>)
 8002982:	f7fd ff6b 	bl	800085c <__aeabi_ddiv>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	f7fe f913 	bl	8000bb8 <__aeabi_d2uiz>
 8002992:	4603      	mov	r3, r0
 8002994:	b29b      	uxth	r3, r3
 8002996:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800299a:	b29b      	uxth	r3, r3
 800299c:	01db      	lsls	r3, r3, #7
 800299e:	82fb      	strh	r3, [r7, #22]
 80029a0:	e011      	b.n	80029c6 <lm75ad_setThystLimit+0x7e>
	}
	else
	{
		sent_limit = (uint16_t) (thyst_limit / TOS_THYST_RESOLUTION) << 7;
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fd fdd8 	bl	8000558 <__aeabi_f2d>
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <lm75ad_setThystLimit+0xb0>)
 80029ae:	f7fd ff55 	bl	800085c <__aeabi_ddiv>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	f7fe f8fd 	bl	8000bb8 <__aeabi_d2uiz>
 80029be:	4603      	mov	r3, r0
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	01db      	lsls	r3, r3, #7
 80029c4:	82fb      	strh	r3, [r7, #22]
	}

	uint8_t sent_table[3];
	sent_table[0] = THYST_REG;
 80029c6:	2302      	movs	r3, #2
 80029c8:	743b      	strb	r3, [r7, #16]
	sent_table[1] = (sent_limit & 0xFF00) >> 8;
 80029ca:	8afb      	ldrh	r3, [r7, #22]
 80029cc:	0a1b      	lsrs	r3, r3, #8
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	747b      	strb	r3, [r7, #17]
	sent_table[2] = (sent_limit & 0x00FF);
 80029d4:	8afb      	ldrh	r3, [r7, #22]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Master_Transmit(I2CHandler, Address, sent_table, 3,
 80029da:	7afb      	ldrb	r3, [r7, #11]
 80029dc:	b299      	uxth	r1, r3
 80029de:	f107 0210 	add.w	r2, r7, #16
 80029e2:	230a      	movs	r3, #10
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	2303      	movs	r3, #3
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f003 fe0b 	bl	8006604 <HAL_I2C_Master_Transmit>
	I2C_TIMEOUT);

}
 80029ee:	bf00      	nop
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	3fe00000 	.word	0x3fe00000

080029fc <lm75ad_getTempValue>:

	}
}

float lm75ad_getTempValue(I2C_HandleTypeDef *I2CHandler, uint8_t Address, float preResult)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	460b      	mov	r3, r1
 8002a06:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a0a:	72fb      	strb	r3, [r7, #11]
	uint16_t data = lm75ad_readTempReg(I2CHandler, Address, preResult);
 8002a0c:	7afb      	ldrb	r3, [r7, #11]
 8002a0e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a12:	4619      	mov	r1, r3
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f7ff feff 	bl	8002818 <lm75ad_readTempReg>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	82fb      	strh	r3, [r7, #22]
	/*Example: -25C*/
	/*-25 -> 0b111 1110 0111 (dec 2023) => 2023-2^11(2048)=-25*/
	if ((data >> 10) == 1) // Check if the MSB is 1, meaning a negative temperature is measured
 8002a1e:	8afb      	ldrh	r3, [r7, #22]
 8002a20:	0a9b      	lsrs	r3, r3, #10
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d10b      	bne.n	8002a40 <lm75ad_getTempValue+0x44>
	{
		//data = (~(data - 1)) & 0x07FF; // convert to positive number and keep 11-bits
		return ((float) (data - 2048) * TEMP_RESOLUTION);
 8002a28:	8afb      	ldrh	r3, [r7, #22]
 8002a2a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002a2e:	ee07 3a90 	vmov	s15, r3
 8002a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a36:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a3e:	e008      	b.n	8002a52 <lm75ad_getTempValue+0x56>
	}
	else
	{
		return ((float) (data) * TEMP_RESOLUTION);
 8002a40:	8afb      	ldrh	r3, [r7, #22]
 8002a42:	ee07 3a90 	vmov	s15, r3
 8002a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4a:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
	}

}
 8002a52:	eeb0 0a67 	vmov.f32	s0, s15
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002a60:	f002 f9d2 	bl	8004e08 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002a64:	f000 f87c 	bl	8002b60 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002a68:	f7fe fe4e 	bl	8001708 <MX_GPIO_Init>
	MX_DMA_Init();
 8002a6c:	f7fe fc0c 	bl	8001288 <MX_DMA_Init>
	MX_ADC1_Init();
 8002a70:	f7fe fa94 	bl	8000f9c <MX_ADC1_Init>
	MX_I2C1_Init();
 8002a74:	f7ff fa88 	bl	8001f88 <MX_I2C1_Init>
	MX_SPI1_Init();
 8002a78:	f001 fc3a 	bl	80042f0 <MX_SPI1_Init>
	MX_TIM4_Init();
 8002a7c:	f002 f8b4 	bl	8004be8 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8002a80:	f00c ff10 	bl	800f8a4 <MX_USB_DEVICE_Init>
//	printf("Initializing...\r\n");
	ssd1306_Init();
 8002a84:	f001 fcec 	bl	8004460 <ssd1306_Init>
	ssd1306_SetCursor(10, 10);
 8002a88:	210a      	movs	r1, #10
 8002a8a:	200a      	movs	r0, #10
 8002a8c:	f001 feac 	bl	80047e8 <ssd1306_SetCursor>
	ssd1306_WriteString("Welcome", Font_11x18, White);
 8002a90:	4a27      	ldr	r2, [pc, #156]	; (8002b30 <main+0xd4>)
 8002a92:	2301      	movs	r3, #1
 8002a94:	ca06      	ldmia	r2, {r1, r2}
 8002a96:	4827      	ldr	r0, [pc, #156]	; (8002b34 <main+0xd8>)
 8002a98:	f001 fe80 	bl	800479c <ssd1306_WriteString>
	ssd1306_SetCursor(10, 30);
 8002a9c:	211e      	movs	r1, #30
 8002a9e:	200a      	movs	r0, #10
 8002aa0:	f001 fea2 	bl	80047e8 <ssd1306_SetCursor>
	ssd1306_WriteString("to REMDx", Font_11x18, White);
 8002aa4:	4a22      	ldr	r2, [pc, #136]	; (8002b30 <main+0xd4>)
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	ca06      	ldmia	r2, {r1, r2}
 8002aaa:	4823      	ldr	r0, [pc, #140]	; (8002b38 <main+0xdc>)
 8002aac:	f001 fe76 	bl	800479c <ssd1306_WriteString>
	ssd1306_SetCursor(10, 50);
 8002ab0:	2132      	movs	r1, #50	; 0x32
 8002ab2:	200a      	movs	r0, #10
 8002ab4:	f001 fe98 	bl	80047e8 <ssd1306_SetCursor>
	ssd1306_WriteString("by Qu'rac Tech", Font_7x10, White);
 8002ab8:	4a20      	ldr	r2, [pc, #128]	; (8002b3c <main+0xe0>)
 8002aba:	2301      	movs	r3, #1
 8002abc:	ca06      	ldmia	r2, {r1, r2}
 8002abe:	4820      	ldr	r0, [pc, #128]	; (8002b40 <main+0xe4>)
 8002ac0:	f001 fe6c 	bl	800479c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002ac4:	f001 fd5a 	bl	800457c <ssd1306_UpdateScreen>
	HAL_Delay(2000);
 8002ac8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002acc:	f002 f9de 	bl	8004e8c <HAL_Delay>

	ina226_channelInit(&hi2c1, CH1_ADDRESS,
 8002ad0:	f244 1227 	movw	r2, #16679	; 0x4127
 8002ad4:	2180      	movs	r1, #128	; 0x80
 8002ad6:	481b      	ldr	r0, [pc, #108]	; (8002b44 <main+0xe8>)
 8002ad8:	f7ff fdc9 	bl	800266e <ina226_channelInit>
	RESET_INACTIVE | UNUSED_BITS | AVG_1 | VBUS_1100uS | VSH_1100uS | MODE_CONT_SHUNT_AND_BUS);
	HAL_Delay(1);
 8002adc:	2001      	movs	r0, #1
 8002ade:	f002 f9d5 	bl	8004e8c <HAL_Delay>
	ina226_channelInit(&hi2c1, CH2_ADDRESS,
 8002ae2:	f244 1227 	movw	r2, #16679	; 0x4127
 8002ae6:	2182      	movs	r1, #130	; 0x82
 8002ae8:	4816      	ldr	r0, [pc, #88]	; (8002b44 <main+0xe8>)
 8002aea:	f7ff fdc0 	bl	800266e <ina226_channelInit>
	RESET_INACTIVE | UNUSED_BITS | AVG_1 | VBUS_1100uS | VSH_1100uS | MODE_CONT_SHUNT_AND_BUS);
	if (HAL_OK != HAL_ADC_Start_DMA(&hadc1, adc_data, 4))
 8002aee:	2204      	movs	r2, #4
 8002af0:	4915      	ldr	r1, [pc, #84]	; (8002b48 <main+0xec>)
 8002af2:	4816      	ldr	r0, [pc, #88]	; (8002b4c <main+0xf0>)
 8002af4:	f002 fa32 	bl	8004f5c <HAL_ADC_Start_DMA>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <main+0xa6>
	{
		Error_Handler();
 8002afe:	f000 f8ab 	bl	8002c58 <Error_Handler>
	}
	CDC_Transmit_FS((uint8_t*) "Starting USB\r\n", sizeof("Starting USB\r\n"));
 8002b02:	210f      	movs	r1, #15
 8002b04:	4812      	ldr	r0, [pc, #72]	; (8002b50 <main+0xf4>)
 8002b06:	f00c ffd9 	bl	800fabc <CDC_Transmit_FS>

//	PWMInit(1000);
//	run_pwm_out0(1);
//	run_pwm_out1(1);
	defaultSettings(&defaultSetupData);
 8002b0a:	4812      	ldr	r0, [pc, #72]	; (8002b54 <main+0xf8>)
 8002b0c:	f000 fed0 	bl	80038b0 <defaultSettings>
	newSetupData = defaultSetupData;
 8002b10:	4a11      	ldr	r2, [pc, #68]	; (8002b58 <main+0xfc>)
 8002b12:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <main+0xf8>)
 8002b14:	4610      	mov	r0, r2
 8002b16:	4619      	mov	r1, r3
 8002b18:	2348      	movs	r3, #72	; 0x48
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f00d fd99 	bl	8010652 <memcpy>
	g_HWUpdateFlag = 1;
 8002b20:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <main+0x100>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	701a      	strb	r2, [r3, #0]

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8002b26:	f7fe fc09 	bl	800133c <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8002b2a:	f00b fc1b 	bl	800e364 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8002b2e:	e7fe      	b.n	8002b2e <main+0xd2>
 8002b30:	2000000c 	.word	0x2000000c
 8002b34:	080136f0 	.word	0x080136f0
 8002b38:	080136f8 	.word	0x080136f8
 8002b3c:	20000004 	.word	0x20000004
 8002b40:	08013704 	.word	0x08013704
 8002b44:	200006cc 	.word	0x200006cc
 8002b48:	200006a8 	.word	0x200006a8
 8002b4c:	20000300 	.word	0x20000300
 8002b50:	08013714 	.word	0x08013714
 8002b54:	20000768 	.word	0x20000768
 8002b58:	20000720 	.word	0x20000720
 8002b5c:	200006b8 	.word	0x200006b8

08002b60 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b094      	sub	sp, #80	; 0x50
 8002b64:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8002b66:	f107 0320 	add.w	r3, r7, #32
 8002b6a:	2230      	movs	r2, #48	; 0x30
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f00d fd97 	bl	80106a2 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8002b74:	f107 030c 	add.w	r3, r7, #12
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002b84:	2300      	movs	r3, #0
 8002b86:	60bb      	str	r3, [r7, #8]
 8002b88:	4b28      	ldr	r3, [pc, #160]	; (8002c2c <SystemClock_Config+0xcc>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	4a27      	ldr	r2, [pc, #156]	; (8002c2c <SystemClock_Config+0xcc>)
 8002b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b92:	6413      	str	r3, [r2, #64]	; 0x40
 8002b94:	4b25      	ldr	r3, [pc, #148]	; (8002c2c <SystemClock_Config+0xcc>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	607b      	str	r3, [r7, #4]
 8002ba4:	4b22      	ldr	r3, [pc, #136]	; (8002c30 <SystemClock_Config+0xd0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002bac:	4a20      	ldr	r2, [pc, #128]	; (8002c30 <SystemClock_Config+0xd0>)
 8002bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	4b1e      	ldr	r3, [pc, #120]	; (8002c30 <SystemClock_Config+0xd0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bbc:	607b      	str	r3, [r7, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002bd4:	2304      	movs	r3, #4
 8002bd6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8002bd8:	23a8      	movs	r3, #168	; 0xa8
 8002bda:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002bdc:	2304      	movs	r3, #4
 8002bde:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002be0:	2307      	movs	r3, #7
 8002be2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002be4:	f107 0320 	add.w	r3, r7, #32
 8002be8:	4618      	mov	r0, r3
 8002bea:	f006 fa77 	bl	80090dc <HAL_RCC_OscConfig>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8002bf4:	f000 f830 	bl	8002c58 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bf8:	230f      	movs	r3, #15
 8002bfa:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c08:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c0e:	f107 030c 	add.w	r3, r7, #12
 8002c12:	2102      	movs	r1, #2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f006 fcd9 	bl	80095cc <HAL_RCC_ClockConfig>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8002c20:	f000 f81a 	bl	8002c58 <Error_Handler>
	}
}
 8002c24:	bf00      	nop
 8002c26:	3750      	adds	r7, #80	; 0x50
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40007000 	.word	0x40007000

08002c34 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a04      	ldr	r2, [pc, #16]	; (8002c54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d101      	bne.n	8002c4a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8002c46:	f002 f901 	bl	8004e4c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40010000 	.word	0x40010000

08002c58 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c5c:	b672      	cpsid	i
}
 8002c5e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002c60:	e7fe      	b.n	8002c60 <Error_Handler+0x8>
	...

08002c64 <run_pwm_out0>:
	timer4->Instance->CCR3 = duty;
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
}

void run_pwm_out0(uint8_t duty_cycle)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	71fb      	strb	r3, [r7, #7]
	htim4.Instance->CCR3 = duty_cycle;
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <run_pwm_out0+0x24>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	79fa      	ldrb	r2, [r7, #7]
 8002c74:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002c76:	2108      	movs	r1, #8
 8002c78:	4803      	ldr	r0, [pc, #12]	; (8002c88 <run_pwm_out0+0x24>)
 8002c7a:	f007 f88d 	bl	8009d98 <HAL_TIM_PWM_Start>
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000c80 	.word	0x20000c80

08002c8c <stop_pwm_out0>:

void stop_pwm_out0(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
	htim4.Instance->CCR3 = 0;
 8002c90:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <stop_pwm_out0+0x18>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2200      	movs	r2, #0
 8002c96:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002c98:	2108      	movs	r1, #8
 8002c9a:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <stop_pwm_out0+0x18>)
 8002c9c:	f007 f87c 	bl	8009d98 <HAL_TIM_PWM_Start>
//	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000c80 	.word	0x20000c80

08002ca8 <run_pwm_out1>:

void run_pwm_out1(uint8_t duty_cycle)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	71fb      	strb	r3, [r7, #7]
	htim4.Instance->CCR4 = duty_cycle;
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <run_pwm_out1+0x24>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	79fa      	ldrb	r2, [r7, #7]
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002cba:	210c      	movs	r1, #12
 8002cbc:	4803      	ldr	r0, [pc, #12]	; (8002ccc <run_pwm_out1+0x24>)
 8002cbe:	f007 f86b 	bl	8009d98 <HAL_TIM_PWM_Start>
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000c80 	.word	0x20000c80

08002cd0 <stop_pwm_out1>:

void stop_pwm_out1(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
	htim4.Instance->CCR4 = 0;
 8002cd4:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <stop_pwm_out1+0x18>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002cdc:	210c      	movs	r1, #12
 8002cde:	4802      	ldr	r0, [pc, #8]	; (8002ce8 <stop_pwm_out1+0x18>)
 8002ce0:	f007 f85a 	bl	8009d98 <HAL_TIM_PWM_Start>
//	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
}
 8002ce4:	bf00      	nop
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000c80 	.word	0x20000c80

08002cec <set_pwm_freq>:

void set_pwm_freq(uint16_t pwm_freq)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	80fb      	strh	r3, [r7, #6]
	htim4.Instance->PSC = HAL_RCC_GetSysClockFreq() / (htim4.Instance->ARR * pwm_freq);
 8002cf6:	f006 fd4f 	bl	8009798 <HAL_RCC_GetSysClockFreq>
 8002cfa:	4601      	mov	r1, r0
 8002cfc:	4b07      	ldr	r3, [pc, #28]	; (8002d1c <set_pwm_freq+0x30>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	88fa      	ldrh	r2, [r7, #6]
 8002d04:	fb03 f202 	mul.w	r2, r3, r2
 8002d08:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <set_pwm_freq+0x30>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	fbb1 f2f2 	udiv	r2, r1, r2
 8002d10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000c80 	.word	0x20000c80

08002d20 <registerMap>:
SetupDataState_e SetupDataState = loadDefaultSetupData;
RegisterData_t regBuffer[NO_REGISTERS] =
{ 0 };

void registerMap(uint8_t *cmd)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b0a2      	sub	sp, #136	; 0x88
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
	static uint8_t w = 119;		// ascii value of w is 119 in decimal
	static uint8_t r = 114;		// ascii value of r is 114 in decimal
//	printf(cmd);
//	printf("cmd=%s\r\n", cmd);
	registerNumber = (uint8_t) (strtol(&cmd[1], NULL, 16) >> 8);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	2210      	movs	r2, #16
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f00e fbab 	bl	801148c <strtol>
 8002d36:	4603      	mov	r3, r0
 8002d38:	121b      	asrs	r3, r3, #8
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	4b32      	ldr	r3, [pc, #200]	; (8002e08 <registerMap+0xe8>)
 8002d3e:	701a      	strb	r2, [r3, #0]
	guserEnteredData = (uint8_t) (strtol(&cmd[3], NULL, 16));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3303      	adds	r3, #3
 8002d44:	2210      	movs	r2, #16
 8002d46:	2100      	movs	r1, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f00e fb9f 	bl	801148c <strtol>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	4b2e      	ldr	r3, [pc, #184]	; (8002e0c <registerMap+0xec>)
 8002d54:	701a      	strb	r2, [r3, #0]

	// Create an array of function pointers, one for each case in the switch statement
	regHandlerFunc regHandlers[NO_REGISTERS] =
 8002d56:	4a2e      	ldr	r2, [pc, #184]	; (8002e10 <registerMap+0xf0>)
 8002d58:	f107 0308 	add.w	r3, r7, #8
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	2280      	movs	r2, #128	; 0x80
 8002d60:	4618      	mov	r0, r3
 8002d62:	f00d fc76 	bl	8010652 <memcpy>
	{ &reg0Handler, &reg1Handler, &reg2Handler, &reg3Handler, &reg4Handler, &reg5Handler, &reg6Handler, &reg7Handler,
			&reg8Handler, &reg9Handler, &reg10Handler, &reg11Handler, &reg12Handler, &reg13Handler, &reg14Handler,
			&reg15Handler, &reg16Handler, &reg17Handler, &reg18Handler, &reg19Handler, &reg20Handler, &reg21Handler,
			&reg22Handler, &reg23Handler, &reg24Handler, &reg25Handler, &reg26Handler, &reg27Handler, &reg28Handler,
			&reg29Handler, &reg30Handler, &reg31Handler };
	if (cmd[0] == w)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	781a      	ldrb	r2, [r3, #0]
 8002d6a:	4b2a      	ldr	r3, [pc, #168]	; (8002e14 <registerMap+0xf4>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d12f      	bne.n	8002dd2 <registerMap+0xb2>
	{
		if (registerNumber < 2)
 8002d72:	4b25      	ldr	r3, [pc, #148]	; (8002e08 <registerMap+0xe8>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d815      	bhi.n	8002da6 <registerMap+0x86>
		{
			if (registerNumber == 0)
 8002d7a:	4b23      	ldr	r3, [pc, #140]	; (8002e08 <registerMap+0xe8>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <registerMap+0x70>
			{
				regBuffer[registerNumber].value = HW_VERSION;
 8002d82:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <registerMap+0xe8>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b23      	ldr	r3, [pc, #140]	; (8002e18 <registerMap+0xf8>)
 8002d8a:	2119      	movs	r1, #25
 8002d8c:	5499      	strb	r1, [r3, r2]
 8002d8e:	e011      	b.n	8002db4 <registerMap+0x94>
			}
			else if (registerNumber == 1)
 8002d90:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <registerMap+0xe8>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d10d      	bne.n	8002db4 <registerMap+0x94>
			{
				regBuffer[registerNumber].value = FW_VERSION;
 8002d98:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <registerMap+0xe8>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b1e      	ldr	r3, [pc, #120]	; (8002e18 <registerMap+0xf8>)
 8002da0:	2114      	movs	r1, #20
 8002da2:	5499      	strb	r1, [r3, r2]
 8002da4:	e006      	b.n	8002db4 <registerMap+0x94>
			}
		}
		else
		{
			regBuffer[registerNumber].value = guserEnteredData;
 8002da6:	4b18      	ldr	r3, [pc, #96]	; (8002e08 <registerMap+0xe8>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	4b17      	ldr	r3, [pc, #92]	; (8002e0c <registerMap+0xec>)
 8002dae:	7819      	ldrb	r1, [r3, #0]
 8002db0:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <registerMap+0xf8>)
 8002db2:	5499      	strb	r1, [r3, r2]
		}
		// Call the function pointer for the register number
		regHandlers[registerNumber](guserEnteredData);
 8002db4:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <registerMap+0xe8>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	3388      	adds	r3, #136	; 0x88
 8002dbc:	443b      	add	r3, r7
 8002dbe:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8002dc2:	4a12      	ldr	r2, [pc, #72]	; (8002e0c <registerMap+0xec>)
 8002dc4:	7812      	ldrb	r2, [r2, #0]
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	4798      	blx	r3
		printf("ACK\r\n");
 8002dca:	4814      	ldr	r0, [pc, #80]	; (8002e1c <registerMap+0xfc>)
 8002dcc:	f00e f9f6 	bl	80111bc <puts>
	}
	else
	{
		printf("NAK\r\n");
	}
}
 8002dd0:	e015      	b.n	8002dfe <registerMap+0xde>
	else if (cmd[0] == r)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	781a      	ldrb	r2, [r3, #0]
 8002dd6:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <registerMap+0x100>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d10c      	bne.n	8002df8 <registerMap+0xd8>
		printf("#R#%02X%02X\r\n", registerNumber, regBuffer[registerNumber].value);
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <registerMap+0xe8>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	4619      	mov	r1, r3
 8002de4:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <registerMap+0xe8>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <registerMap+0xf8>)
 8002dec:	5c9b      	ldrb	r3, [r3, r2]
 8002dee:	461a      	mov	r2, r3
 8002df0:	480c      	ldr	r0, [pc, #48]	; (8002e24 <registerMap+0x104>)
 8002df2:	f00e f95d 	bl	80110b0 <iprintf>
}
 8002df6:	e002      	b.n	8002dfe <registerMap+0xde>
		printf("NAK\r\n");
 8002df8:	480b      	ldr	r0, [pc, #44]	; (8002e28 <registerMap+0x108>)
 8002dfa:	f00e f9df 	bl	80111bc <puts>
}
 8002dfe:	bf00      	nop
 8002e00:	3788      	adds	r7, #136	; 0x88
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	200007b0 	.word	0x200007b0
 8002e0c:	200006a1 	.word	0x200006a1
 8002e10:	08013744 	.word	0x08013744
 8002e14:	20000000 	.word	0x20000000
 8002e18:	200007b4 	.word	0x200007b4
 8002e1c:	08013724 	.word	0x08013724
 8002e20:	20000001 	.word	0x20000001
 8002e24:	0801372c 	.word	0x0801372c
 8002e28:	0801373c 	.word	0x0801373c

08002e2c <reg0Handler>:

void reg0Handler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
	newSetupData.setRegister.id0 = HW_VERSION;
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <reg0Handler+0x1c>)
 8002e32:	2219      	movs	r2, #25
 8002e34:	751a      	strb	r2, [r3, #20]
	printf("HW VERSION: %0.2f\r\n", (float) (HW_VERSION) / 10);
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <reg0Handler+0x20>)
 8002e3c:	4804      	ldr	r0, [pc, #16]	; (8002e50 <reg0Handler+0x24>)
 8002e3e:	f00e f937 	bl	80110b0 <iprintf>
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000720 	.word	0x20000720
 8002e4c:	40040000 	.word	0x40040000
 8002e50:	080137c4 	.word	0x080137c4

08002e54 <reg1Handler>:

void reg1Handler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
	newSetupData.setRegister.id0 = FW_VERSION;
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <reg1Handler+0x1c>)
 8002e5a:	2214      	movs	r2, #20
 8002e5c:	751a      	strb	r2, [r3, #20]
	printf("FW VERSION: %0.2f\r\n", (float) (FW_VERSION) / 10);
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e66:	4803      	ldr	r0, [pc, #12]	; (8002e74 <reg1Handler+0x20>)
 8002e68:	f00e f922 	bl	80110b0 <iprintf>
}
 8002e6c:	bf00      	nop
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20000720 	.word	0x20000720
 8002e74:	080137d8 	.word	0x080137d8

08002e78 <reg2Handler>:

void reg2Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
	newSetupData.setRegister.set_led1 = (regBuffer[registerNumber].value & 0x01);
 8002e7c:	4b33      	ldr	r3, [pc, #204]	; (8002f4c <reg2Handler+0xd4>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	461a      	mov	r2, r3
 8002e82:	4b33      	ldr	r3, [pc, #204]	; (8002f50 <reg2Handler+0xd8>)
 8002e84:	5c9b      	ldrb	r3, [r3, r2]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <reg2Handler+0xdc>)
 8002e8e:	765a      	strb	r2, [r3, #25]
	newSetupData.setRegister.set_led2 = ((regBuffer[registerNumber].value & 0x02) >> 1);
 8002e90:	4b2e      	ldr	r3, [pc, #184]	; (8002f4c <reg2Handler+0xd4>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b2e      	ldr	r3, [pc, #184]	; (8002f50 <reg2Handler+0xd8>)
 8002e98:	5c9b      	ldrb	r3, [r3, r2]
 8002e9a:	105b      	asrs	r3, r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <reg2Handler+0xdc>)
 8002ea6:	769a      	strb	r2, [r3, #26]
	newSetupData.setRegister.set_dig_out0 = ((regBuffer[registerNumber].value & 0x04) >> 2);
 8002ea8:	4b28      	ldr	r3, [pc, #160]	; (8002f4c <reg2Handler+0xd4>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	461a      	mov	r2, r3
 8002eae:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <reg2Handler+0xd8>)
 8002eb0:	5c9b      	ldrb	r3, [r3, r2]
 8002eb2:	109b      	asrs	r3, r3, #2
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	4b25      	ldr	r3, [pc, #148]	; (8002f54 <reg2Handler+0xdc>)
 8002ebe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	newSetupData.setRegister.set_dig_out1 = ((regBuffer[registerNumber].value & 0x08) >> 3);
 8002ec2:	4b22      	ldr	r3, [pc, #136]	; (8002f4c <reg2Handler+0xd4>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <reg2Handler+0xd8>)
 8002eca:	5c9b      	ldrb	r3, [r3, r2]
 8002ecc:	10db      	asrs	r3, r3, #3
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	4b1f      	ldr	r3, [pc, #124]	; (8002f54 <reg2Handler+0xdc>)
 8002ed8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	;
	newSetupData.getRegister.get_int_in0 = ((regBuffer[registerNumber].value & 0x10) >> 4);
 8002edc:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <reg2Handler+0xd4>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <reg2Handler+0xd8>)
 8002ee4:	5c9b      	ldrb	r3, [r3, r2]
 8002ee6:	111b      	asrs	r3, r3, #4
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	4b18      	ldr	r3, [pc, #96]	; (8002f54 <reg2Handler+0xdc>)
 8002ef2:	72da      	strb	r2, [r3, #11]
	newSetupData.getRegister.get_int_in1 = ((regBuffer[registerNumber].value & 0x20) >> 5);
 8002ef4:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <reg2Handler+0xd4>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <reg2Handler+0xd8>)
 8002efc:	5c9b      	ldrb	r3, [r3, r2]
 8002efe:	115b      	asrs	r3, r3, #5
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <reg2Handler+0xdc>)
 8002f0a:	731a      	strb	r2, [r3, #12]
	newSetupData.setRegister.en_pwm0 = ((regBuffer[registerNumber].value & 0x40) >> 6);
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <reg2Handler+0xd4>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <reg2Handler+0xd8>)
 8002f14:	5c9b      	ldrb	r3, [r3, r2]
 8002f16:	119b      	asrs	r3, r3, #6
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <reg2Handler+0xdc>)
 8002f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	newSetupData.setRegister.en_pwm1 = ((regBuffer[registerNumber].value & 0x80) >> 7);
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <reg2Handler+0xd4>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <reg2Handler+0xd8>)
 8002f2e:	5c9b      	ldrb	r3, [r3, r2]
 8002f30:	09db      	lsrs	r3, r3, #7
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <reg2Handler+0xdc>)
 8002f36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
	g_HWUpdateFlag = 1;
 8002f3a:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <reg2Handler+0xe0>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	701a      	strb	r2, [r3, #0]
}
 8002f40:	bf00      	nop
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	200007b0 	.word	0x200007b0
 8002f50:	200007b4 	.word	0x200007b4
 8002f54:	20000720 	.word	0x20000720
 8002f58:	200006b8 	.word	0x200006b8

08002f5c <reg3Handler>:

void reg3Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
	newSetupData.setRegister.auto_off_dis = (regBuffer[registerNumber].value & 0x01);
 8002f60:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <reg3Handler+0x58>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <reg3Handler+0x5c>)
 8002f68:	5c9b      	ldrb	r3, [r3, r2]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <reg3Handler+0x60>)
 8002f72:	759a      	strb	r2, [r3, #22]
	newSetupData.setRegister.meas_mode = ((regBuffer[registerNumber].value & 0x02) >> 1);
 8002f74:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <reg3Handler+0x58>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <reg3Handler+0x5c>)
 8002f7c:	5c9b      	ldrb	r3, [r3, r2]
 8002f7e:	105b      	asrs	r3, r3, #1
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <reg3Handler+0x60>)
 8002f8a:	75da      	strb	r2, [r3, #23]
	newSetupData.setRegister.en_disp = ((regBuffer[registerNumber].value & 0x04) >> 2);
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <reg3Handler+0x58>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	461a      	mov	r2, r3
 8002f92:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <reg3Handler+0x5c>)
 8002f94:	5c9b      	ldrb	r3, [r3, r2]
 8002f96:	109b      	asrs	r3, r3, #2
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <reg3Handler+0x60>)
 8002fa2:	761a      	strb	r2, [r3, #24]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
	g_HWUpdateFlag = 1;
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <reg3Handler+0x64>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	200007b0 	.word	0x200007b0
 8002fb8:	200007b4 	.word	0x200007b4
 8002fbc:	20000720 	.word	0x20000720
 8002fc0:	200006b8 	.word	0x200006b8

08002fc4 <reg4Handler>:

void reg4Handler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
	newSetupData.setRegister.set_over_temp_limit = regBuffer[registerNumber].value;
 8002fc8:	4b24      	ldr	r3, [pc, #144]	; (800305c <reg4Handler+0x98>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4b24      	ldr	r3, [pc, #144]	; (8003060 <reg4Handler+0x9c>)
 8002fd0:	5c9a      	ldrb	r2, [r3, r2]
 8002fd2:	4b24      	ldr	r3, [pc, #144]	; (8003064 <reg4Handler+0xa0>)
 8002fd4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	if (newSetupData.setRegister.set_over_temp_limit > 127)
 8002fd8:	4b22      	ldr	r3, [pc, #136]	; (8003064 <reg4Handler+0xa0>)
 8002fda:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002fde:	b25b      	sxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	da1d      	bge.n	8003020 <reg4Handler+0x5c>
	{
		lm75ad_setTosLimit(&hi2c1, LM75AD_ADDRESS, (float) (newSetupData.setRegister.set_over_temp_limit - 256));
 8002fe4:	4b1f      	ldr	r3, [pc, #124]	; (8003064 <reg4Handler+0xa0>)
 8002fe6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002fea:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002fee:	ee07 3a90 	vmov	s15, r3
 8002ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8002ffa:	2190      	movs	r1, #144	; 0x90
 8002ffc:	481a      	ldr	r0, [pc, #104]	; (8003068 <reg4Handler+0xa4>)
 8002ffe:	f7ff fc49 	bl	8002894 <lm75ad_setTosLimit>
		lm75ad_setThystLimit(&hi2c1, LM75AD_ADDRESS, (float) (newSetupData.setRegister.set_over_temp_limit - 256 + 5));
 8003002:	4b18      	ldr	r3, [pc, #96]	; (8003064 <reg4Handler+0xa0>)
 8003004:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003008:	3bfb      	subs	r3, #251	; 0xfb
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003012:	eeb0 0a67 	vmov.f32	s0, s15
 8003016:	2190      	movs	r1, #144	; 0x90
 8003018:	4813      	ldr	r0, [pc, #76]	; (8003068 <reg4Handler+0xa4>)
 800301a:	f7ff fc95 	bl	8002948 <lm75ad_setThystLimit>
	{
		lm75ad_setTosLimit(&hi2c1, LM75AD_ADDRESS, (float) (newSetupData.setRegister.set_over_temp_limit));
		lm75ad_setThystLimit(&hi2c1, LM75AD_ADDRESS, (float) (newSetupData.setRegister.set_over_temp_limit - 5));
	}
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 800301e:	e01a      	b.n	8003056 <reg4Handler+0x92>
		lm75ad_setTosLimit(&hi2c1, LM75AD_ADDRESS, (float) (newSetupData.setRegister.set_over_temp_limit));
 8003020:	4b10      	ldr	r3, [pc, #64]	; (8003064 <reg4Handler+0xa0>)
 8003022:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003026:	ee07 3a90 	vmov	s15, r3
 800302a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800302e:	eeb0 0a67 	vmov.f32	s0, s15
 8003032:	2190      	movs	r1, #144	; 0x90
 8003034:	480c      	ldr	r0, [pc, #48]	; (8003068 <reg4Handler+0xa4>)
 8003036:	f7ff fc2d 	bl	8002894 <lm75ad_setTosLimit>
		lm75ad_setThystLimit(&hi2c1, LM75AD_ADDRESS, (float) (newSetupData.setRegister.set_over_temp_limit - 5));
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <reg4Handler+0xa0>)
 800303c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003040:	3b05      	subs	r3, #5
 8003042:	ee07 3a90 	vmov	s15, r3
 8003046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800304a:	eeb0 0a67 	vmov.f32	s0, s15
 800304e:	2190      	movs	r1, #144	; 0x90
 8003050:	4805      	ldr	r0, [pc, #20]	; (8003068 <reg4Handler+0xa4>)
 8003052:	f7ff fc79 	bl	8002948 <lm75ad_setThystLimit>
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	200007b0 	.word	0x200007b0
 8003060:	200007b4 	.word	0x200007b4
 8003064:	20000720 	.word	0x20000720
 8003068:	200006cc 	.word	0x200006cc

0800306c <reg5Handler>:

void reg5Handler(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
	newSetupData.setRegister.bus_volt_conv_time_ch1 = (regBuffer[registerNumber].value & 0x07);
 8003070:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <reg5Handler+0x74>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <reg5Handler+0x78>)
 8003078:	5c9b      	ldrb	r3, [r3, r2]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	b2da      	uxtb	r2, r3
 8003080:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <reg5Handler+0x7c>)
 8003082:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	newSetupData.setRegister.shunt_volt_conv_time_ch1 = ((regBuffer[registerNumber].value & 0x38) >> 3);
 8003086:	4b16      	ldr	r3, [pc, #88]	; (80030e0 <reg5Handler+0x74>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <reg5Handler+0x78>)
 800308e:	5c9b      	ldrb	r3, [r3, r2]
 8003090:	10db      	asrs	r3, r3, #3
 8003092:	b2db      	uxtb	r3, r3
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	b2da      	uxtb	r2, r3
 800309a:	4b13      	ldr	r3, [pc, #76]	; (80030e8 <reg5Handler+0x7c>)
 800309c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	newSetupData.setRegister.limit_unit_prefix_ch1 = ((regBuffer[registerNumber].value & 0x40) >> 6);
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <reg5Handler+0x74>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	461a      	mov	r2, r3
 80030a6:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <reg5Handler+0x78>)
 80030a8:	5c9b      	ldrb	r3, [r3, r2]
 80030aa:	119b      	asrs	r3, r3, #6
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <reg5Handler+0x7c>)
 80030b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	newSetupData.setRegister.limit_unit_prefix_ch2 = ((regBuffer[registerNumber].value & 0x80) >> 7);
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <reg5Handler+0x74>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <reg5Handler+0x78>)
 80030c2:	5c9b      	ldrb	r3, [r3, r2]
 80030c4:	09db      	lsrs	r3, r3, #7
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <reg5Handler+0x7c>)
 80030ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	g_ina226Ch1ConfigChangeFlag = 1;
 80030ce:	4b07      	ldr	r3, [pc, #28]	; (80030ec <reg5Handler+0x80>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	200007b0 	.word	0x200007b0
 80030e4:	200007b4 	.word	0x200007b4
 80030e8:	20000720 	.word	0x20000720
 80030ec:	200006b9 	.word	0x200006b9

080030f0 <reg6Handler>:

void reg6Handler(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
	newSetupData.setRegister.bus_volt_conv_time_ch2 = (regBuffer[registerNumber].value & 0x07);
 80030f4:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <reg6Handler+0x44>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <reg6Handler+0x48>)
 80030fc:	5c9b      	ldrb	r3, [r3, r2]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	b2da      	uxtb	r2, r3
 8003104:	4b0d      	ldr	r3, [pc, #52]	; (800313c <reg6Handler+0x4c>)
 8003106:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	newSetupData.setRegister.shunt_volt_conv_time_ch2 = ((regBuffer[registerNumber].value & 0x38) >> 3);
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <reg6Handler+0x44>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	4b09      	ldr	r3, [pc, #36]	; (8003138 <reg6Handler+0x48>)
 8003112:	5c9b      	ldrb	r3, [r3, r2]
 8003114:	10db      	asrs	r3, r3, #3
 8003116:	b2db      	uxtb	r3, r3
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	b2da      	uxtb	r2, r3
 800311e:	4b07      	ldr	r3, [pc, #28]	; (800313c <reg6Handler+0x4c>)
 8003120:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	g_ina226Ch2ConfigChangeFlag = 1;
 8003124:	4b06      	ldr	r3, [pc, #24]	; (8003140 <reg6Handler+0x50>)
 8003126:	2201      	movs	r2, #1
 8003128:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 800312a:	bf00      	nop
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	200007b0 	.word	0x200007b0
 8003138:	200007b4 	.word	0x200007b4
 800313c:	20000720 	.word	0x20000720
 8003140:	200006ba 	.word	0x200006ba

08003144 <reg7Handler>:

void reg7Handler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
	newSetupData.setRegister.en_int_ch1 = (regBuffer[registerNumber].value & 0x01);
 8003148:	4b52      	ldr	r3, [pc, #328]	; (8003294 <reg7Handler+0x150>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	4b52      	ldr	r3, [pc, #328]	; (8003298 <reg7Handler+0x154>)
 8003150:	5c9b      	ldrb	r3, [r3, r2]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	b2da      	uxtb	r2, r3
 8003158:	4b50      	ldr	r3, [pc, #320]	; (800329c <reg7Handler+0x158>)
 800315a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	newSetupData.setRegister.en_int_ch2 = ((regBuffer[registerNumber].value & 0x02) >> 1);
 800315e:	4b4d      	ldr	r3, [pc, #308]	; (8003294 <reg7Handler+0x150>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	4b4c      	ldr	r3, [pc, #304]	; (8003298 <reg7Handler+0x154>)
 8003166:	5c9b      	ldrb	r3, [r3, r2]
 8003168:	105b      	asrs	r3, r3, #1
 800316a:	b2db      	uxtb	r3, r3
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	b2da      	uxtb	r2, r3
 8003172:	4b4a      	ldr	r3, [pc, #296]	; (800329c <reg7Handler+0x158>)
 8003174:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	newSetupData.setRegister.ale_trig_ch1 = ((regBuffer[registerNumber].value & 0x1C) >> 2);
 8003178:	4b46      	ldr	r3, [pc, #280]	; (8003294 <reg7Handler+0x150>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	4b46      	ldr	r3, [pc, #280]	; (8003298 <reg7Handler+0x154>)
 8003180:	5c9b      	ldrb	r3, [r3, r2]
 8003182:	109b      	asrs	r3, r3, #2
 8003184:	b2db      	uxtb	r3, r3
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	b2da      	uxtb	r2, r3
 800318c:	4b43      	ldr	r3, [pc, #268]	; (800329c <reg7Handler+0x158>)
 800318e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	newSetupData.setRegister.ale_trig_ch2 = ((regBuffer[registerNumber].value & 0xE0) >> 5);
 8003192:	4b40      	ldr	r3, [pc, #256]	; (8003294 <reg7Handler+0x150>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	4b3f      	ldr	r3, [pc, #252]	; (8003298 <reg7Handler+0x154>)
 800319a:	5c9b      	ldrb	r3, [r3, r2]
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	4b3e      	ldr	r3, [pc, #248]	; (800329c <reg7Handler+0x158>)
 80031a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	switch (newSetupData.setRegister.ale_trig_ch1)
 80031a6:	4b3d      	ldr	r3, [pc, #244]	; (800329c <reg7Handler+0x158>)
 80031a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80031ac:	2b06      	cmp	r3, #6
 80031ae:	d834      	bhi.n	800321a <reg7Handler+0xd6>
 80031b0:	a201      	add	r2, pc, #4	; (adr r2, 80031b8 <reg7Handler+0x74>)
 80031b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b6:	bf00      	nop
 80031b8:	080031d5 	.word	0x080031d5
 80031bc:	080031df 	.word	0x080031df
 80031c0:	080031e9 	.word	0x080031e9
 80031c4:	080031f3 	.word	0x080031f3
 80031c8:	080031fd 	.word	0x080031fd
 80031cc:	08003207 	.word	0x08003207
 80031d0:	08003211 	.word	0x08003211
	{
		case underCurrentAlert:
			ina226_setUnderCurrentAlert(&hi2c1, CH1_ADDRESS);
 80031d4:	2180      	movs	r1, #128	; 0x80
 80031d6:	4832      	ldr	r0, [pc, #200]	; (80032a0 <reg7Handler+0x15c>)
 80031d8:	f7ff fac8 	bl	800276c <ina226_setUnderCurrentAlert>
			break;
 80031dc:	e01d      	b.n	800321a <reg7Handler+0xd6>
		case overCurrentAlert:
			ina226_setOverCurrentAlert(&hi2c1, CH1_ADDRESS);
 80031de:	2180      	movs	r1, #128	; 0x80
 80031e0:	482f      	ldr	r0, [pc, #188]	; (80032a0 <reg7Handler+0x15c>)
 80031e2:	f7ff fab2 	bl	800274a <ina226_setOverCurrentAlert>
			break;
 80031e6:	e018      	b.n	800321a <reg7Handler+0xd6>
		case underVshuntAlert:
			ina226_setShuntUnderVoltageAlert(&hi2c1, CH1_ADDRESS);
 80031e8:	2180      	movs	r1, #128	; 0x80
 80031ea:	482d      	ldr	r0, [pc, #180]	; (80032a0 <reg7Handler+0x15c>)
 80031ec:	f7ff fa8b 	bl	8002706 <ina226_setShuntUnderVoltageAlert>
			break;
 80031f0:	e013      	b.n	800321a <reg7Handler+0xd6>
		case overVshuntAlert:
			ina226_setShuntOverVoltageAlert(&hi2c1, CH1_ADDRESS);
 80031f2:	2180      	movs	r1, #128	; 0x80
 80031f4:	482a      	ldr	r0, [pc, #168]	; (80032a0 <reg7Handler+0x15c>)
 80031f6:	f7ff fa75 	bl	80026e4 <ina226_setShuntOverVoltageAlert>
			break;
 80031fa:	e00e      	b.n	800321a <reg7Handler+0xd6>
		case underVbusAlert:
			ina226_setBusUnderVoltageAlert(&hi2c1, CH1_ADDRESS);
 80031fc:	2180      	movs	r1, #128	; 0x80
 80031fe:	4828      	ldr	r0, [pc, #160]	; (80032a0 <reg7Handler+0x15c>)
 8003200:	f7ff fa4e 	bl	80026a0 <ina226_setBusUnderVoltageAlert>
			break;
 8003204:	e009      	b.n	800321a <reg7Handler+0xd6>
		case overVbusAlert:
			ina226_setBusOverVoltageAlert(&hi2c1, CH1_ADDRESS);
 8003206:	2180      	movs	r1, #128	; 0x80
 8003208:	4825      	ldr	r0, [pc, #148]	; (80032a0 <reg7Handler+0x15c>)
 800320a:	f7ff fa5a 	bl	80026c2 <ina226_setBusOverVoltageAlert>
			break;
 800320e:	e004      	b.n	800321a <reg7Handler+0xd6>
		case overPowerAlert:
			ina226_setOverPowerAlert(&hi2c1, CH1_ADDRESS);
 8003210:	2180      	movs	r1, #128	; 0x80
 8003212:	4823      	ldr	r0, [pc, #140]	; (80032a0 <reg7Handler+0x15c>)
 8003214:	f7ff fa88 	bl	8002728 <ina226_setOverPowerAlert>
			break;
 8003218:	bf00      	nop
	}
	switch (newSetupData.setRegister.ale_trig_ch2)
 800321a:	4b20      	ldr	r3, [pc, #128]	; (800329c <reg7Handler+0x158>)
 800321c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003220:	2b06      	cmp	r3, #6
 8003222:	d834      	bhi.n	800328e <reg7Handler+0x14a>
 8003224:	a201      	add	r2, pc, #4	; (adr r2, 800322c <reg7Handler+0xe8>)
 8003226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322a:	bf00      	nop
 800322c:	08003249 	.word	0x08003249
 8003230:	08003253 	.word	0x08003253
 8003234:	0800325d 	.word	0x0800325d
 8003238:	08003267 	.word	0x08003267
 800323c:	08003271 	.word	0x08003271
 8003240:	0800327b 	.word	0x0800327b
 8003244:	08003285 	.word	0x08003285
	{
		case underCurrentAlert:
			ina226_setUnderCurrentAlert(&hi2c1, CH2_ADDRESS);
 8003248:	2182      	movs	r1, #130	; 0x82
 800324a:	4815      	ldr	r0, [pc, #84]	; (80032a0 <reg7Handler+0x15c>)
 800324c:	f7ff fa8e 	bl	800276c <ina226_setUnderCurrentAlert>
			break;
 8003250:	e01d      	b.n	800328e <reg7Handler+0x14a>
		case overCurrentAlert:
			ina226_setOverCurrentAlert(&hi2c1, CH2_ADDRESS);
 8003252:	2182      	movs	r1, #130	; 0x82
 8003254:	4812      	ldr	r0, [pc, #72]	; (80032a0 <reg7Handler+0x15c>)
 8003256:	f7ff fa78 	bl	800274a <ina226_setOverCurrentAlert>
			break;
 800325a:	e018      	b.n	800328e <reg7Handler+0x14a>
		case underVshuntAlert:
			ina226_setShuntUnderVoltageAlert(&hi2c1, CH2_ADDRESS);
 800325c:	2182      	movs	r1, #130	; 0x82
 800325e:	4810      	ldr	r0, [pc, #64]	; (80032a0 <reg7Handler+0x15c>)
 8003260:	f7ff fa51 	bl	8002706 <ina226_setShuntUnderVoltageAlert>
			break;
 8003264:	e013      	b.n	800328e <reg7Handler+0x14a>
		case overVshuntAlert:
			ina226_setShuntOverVoltageAlert(&hi2c1, CH2_ADDRESS);
 8003266:	2182      	movs	r1, #130	; 0x82
 8003268:	480d      	ldr	r0, [pc, #52]	; (80032a0 <reg7Handler+0x15c>)
 800326a:	f7ff fa3b 	bl	80026e4 <ina226_setShuntOverVoltageAlert>
			break;
 800326e:	e00e      	b.n	800328e <reg7Handler+0x14a>
		case underVbusAlert:
			ina226_setBusUnderVoltageAlert(&hi2c1, CH2_ADDRESS);
 8003270:	2182      	movs	r1, #130	; 0x82
 8003272:	480b      	ldr	r0, [pc, #44]	; (80032a0 <reg7Handler+0x15c>)
 8003274:	f7ff fa14 	bl	80026a0 <ina226_setBusUnderVoltageAlert>
			break;
 8003278:	e009      	b.n	800328e <reg7Handler+0x14a>
		case overVbusAlert:
			ina226_setBusOverVoltageAlert(&hi2c1, CH2_ADDRESS);
 800327a:	2182      	movs	r1, #130	; 0x82
 800327c:	4808      	ldr	r0, [pc, #32]	; (80032a0 <reg7Handler+0x15c>)
 800327e:	f7ff fa20 	bl	80026c2 <ina226_setBusOverVoltageAlert>
			break;
 8003282:	e004      	b.n	800328e <reg7Handler+0x14a>
		case overPowerAlert:
			ina226_setOverPowerAlert(&hi2c1, CH2_ADDRESS);
 8003284:	2182      	movs	r1, #130	; 0x82
 8003286:	4806      	ldr	r0, [pc, #24]	; (80032a0 <reg7Handler+0x15c>)
 8003288:	f7ff fa4e 	bl	8002728 <ina226_setOverPowerAlert>
			break;
 800328c:	bf00      	nop
	}

	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 800328e:	bf00      	nop
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	200007b0 	.word	0x200007b0
 8003298:	200007b4 	.word	0x200007b4
 800329c:	20000720 	.word	0x20000720
 80032a0:	200006cc 	.word	0x200006cc

080032a4 <reg8Handler>:

void reg8Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
	newSetupData.setRegister.limit1_ch1 = regBuffer[registerNumber].value;
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <reg8Handler+0x20>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <reg8Handler+0x24>)
 80032b0:	5c9a      	ldrb	r2, [r3, r2]
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <reg8Handler+0x28>)
 80032b4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	200007b0 	.word	0x200007b0
 80032c8:	200007b4 	.word	0x200007b4
 80032cc:	20000720 	.word	0x20000720

080032d0 <reg9Handler>:

void reg9Handler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
	newSetupData.setRegister.limit2_ch1 = regBuffer[registerNumber].value;
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <reg9Handler+0x20>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	461a      	mov	r2, r3
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <reg9Handler+0x24>)
 80032dc:	5c9a      	ldrb	r2, [r3, r2]
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <reg9Handler+0x28>)
 80032e0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80032e4:	bf00      	nop
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	200007b0 	.word	0x200007b0
 80032f4:	200007b4 	.word	0x200007b4
 80032f8:	20000720 	.word	0x20000720

080032fc <reg10Handler>:

void reg10Handler(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
	newSetupData.setRegister.limit1_ch2 = regBuffer[registerNumber].value;
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <reg10Handler+0x20>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <reg10Handler+0x24>)
 8003308:	5c9a      	ldrb	r2, [r3, r2]
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <reg10Handler+0x28>)
 800330c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003310:	bf00      	nop
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	200007b0 	.word	0x200007b0
 8003320:	200007b4 	.word	0x200007b4
 8003324:	20000720 	.word	0x20000720

08003328 <reg11Handler>:

void reg11Handler(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
	newSetupData.setRegister.limit2_ch2 = regBuffer[registerNumber].value;
 800332c:	4b06      	ldr	r3, [pc, #24]	; (8003348 <reg11Handler+0x20>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	4b06      	ldr	r3, [pc, #24]	; (800334c <reg11Handler+0x24>)
 8003334:	5c9a      	ldrb	r2, [r3, r2]
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <reg11Handler+0x28>)
 8003338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 800333c:	bf00      	nop
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	200007b0 	.word	0x200007b0
 800334c:	200007b4 	.word	0x200007b4
 8003350:	20000720 	.word	0x20000720

08003354 <reg12Handler>:

void reg12Handler(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
	newSetupData.setRegister.set_pwm0_duty = (
			regBuffer[registerNumber].value > 100 ? 100 : regBuffer[registerNumber].value);
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <reg12Handler+0x34>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	4b0b      	ldr	r3, [pc, #44]	; (800338c <reg12Handler+0x38>)
 8003360:	5c9b      	ldrb	r3, [r3, r2]
 8003362:	2b64      	cmp	r3, #100	; 0x64
 8003364:	bf28      	it	cs
 8003366:	2364      	movcs	r3, #100	; 0x64
 8003368:	b2da      	uxtb	r2, r3
	newSetupData.setRegister.set_pwm0_duty = (
 800336a:	4b09      	ldr	r3, [pc, #36]	; (8003390 <reg12Handler+0x3c>)
 800336c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	run_pwm_out0(newSetupData.setRegister.set_pwm0_duty);
 8003370:	4b07      	ldr	r3, [pc, #28]	; (8003390 <reg12Handler+0x3c>)
 8003372:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fc74 	bl	8002c64 <run_pwm_out0>
	g_HWUpdateFlag = 1;
 800337c:	4b05      	ldr	r3, [pc, #20]	; (8003394 <reg12Handler+0x40>)
 800337e:	2201      	movs	r2, #1
 8003380:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	200007b0 	.word	0x200007b0
 800338c:	200007b4 	.word	0x200007b4
 8003390:	20000720 	.word	0x20000720
 8003394:	200006b8 	.word	0x200006b8

08003398 <reg13Handler>:

void reg13Handler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
	newSetupData.setRegister.set_pwm1_duty = (
			regBuffer[registerNumber].value > 100 ? 100 : regBuffer[registerNumber].value);
 800339c:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <reg13Handler+0x34>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	461a      	mov	r2, r3
 80033a2:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <reg13Handler+0x38>)
 80033a4:	5c9b      	ldrb	r3, [r3, r2]
 80033a6:	2b64      	cmp	r3, #100	; 0x64
 80033a8:	bf28      	it	cs
 80033aa:	2364      	movcs	r3, #100	; 0x64
 80033ac:	b2da      	uxtb	r2, r3
	newSetupData.setRegister.set_pwm1_duty = (
 80033ae:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <reg13Handler+0x3c>)
 80033b0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	run_pwm_out1(newSetupData.setRegister.set_pwm1_duty);
 80033b4:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <reg13Handler+0x3c>)
 80033b6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fc74 	bl	8002ca8 <run_pwm_out1>
	g_HWUpdateFlag = 1;
 80033c0:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <reg13Handler+0x40>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	200007b0 	.word	0x200007b0
 80033d0:	200007b4 	.word	0x200007b4
 80033d4:	20000720 	.word	0x20000720
 80033d8:	200006b8 	.word	0x200006b8
 80033dc:	00000000 	.word	0x00000000

080033e0 <reg14Handler>:

void reg14Handler(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
	newSetupData.setRegister.set_pwm_freq1 = (
			regBuffer[registerNumber].value > 255 ? 255 : regBuffer[registerNumber].value);
 80033e4:	4b18      	ldr	r3, [pc, #96]	; (8003448 <reg14Handler+0x68>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	4b18      	ldr	r3, [pc, #96]	; (800344c <reg14Handler+0x6c>)
 80033ec:	5c9a      	ldrb	r2, [r3, r2]
	newSetupData.setRegister.set_pwm_freq1 = (
 80033ee:	4b18      	ldr	r3, [pc, #96]	; (8003450 <reg14Handler+0x70>)
 80033f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	newSetupData.setRegister.set_pwm_freq = (uint16_t) ((float) (newSetupData.setRegister.set_pwm_freq1
 80033f4:	4b16      	ldr	r3, [pc, #88]	; (8003450 <reg14Handler+0x70>)
 80033f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80033fa:	461a      	mov	r2, r3
			+ (newSetupData.setRegister.set_pwm_freq2 << 8)) * PWMFreqCorrectionFactor);
 80033fc:	4b14      	ldr	r3, [pc, #80]	; (8003450 <reg14Handler+0x70>)
 80033fe:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8003402:	021b      	lsls	r3, r3, #8
 8003404:	4413      	add	r3, r2
	newSetupData.setRegister.set_pwm_freq = (uint16_t) ((float) (newSetupData.setRegister.set_pwm_freq1
 8003406:	ee07 3a90 	vmov	s15, r3
 800340a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800340e:	ee17 0a90 	vmov	r0, s15
 8003412:	f7fd f8a1 	bl	8000558 <__aeabi_f2d>
			+ (newSetupData.setRegister.set_pwm_freq2 << 8)) * PWMFreqCorrectionFactor);
 8003416:	a30a      	add	r3, pc, #40	; (adr r3, 8003440 <reg14Handler+0x60>)
 8003418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341c:	f7fd f8f4 	bl	8000608 <__aeabi_dmul>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
	newSetupData.setRegister.set_pwm_freq = (uint16_t) ((float) (newSetupData.setRegister.set_pwm_freq1
 8003424:	4610      	mov	r0, r2
 8003426:	4619      	mov	r1, r3
 8003428:	f7fd fbc6 	bl	8000bb8 <__aeabi_d2uiz>
 800342c:	4603      	mov	r3, r0
 800342e:	b29a      	uxth	r2, r3
 8003430:	4b07      	ldr	r3, [pc, #28]	; (8003450 <reg14Handler+0x70>)
 8003432:	871a      	strh	r2, [r3, #56]	; 0x38
	g_HWUpdateFlag = 1;
 8003434:	4b07      	ldr	r3, [pc, #28]	; (8003454 <reg14Handler+0x74>)
 8003436:	2201      	movs	r2, #1
 8003438:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 800343a:	bf00      	nop
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	e978d4fe 	.word	0xe978d4fe
 8003444:	3ff03126 	.word	0x3ff03126
 8003448:	200007b0 	.word	0x200007b0
 800344c:	200007b4 	.word	0x200007b4
 8003450:	20000720 	.word	0x20000720
 8003454:	200006b8 	.word	0x200006b8

08003458 <reg15Handler>:

void reg15Handler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
	newSetupData.setRegister.set_pwm_freq2 = (
			regBuffer[registerNumber].value > 255 ? 255 : regBuffer[registerNumber].value);
 800345c:	4b18      	ldr	r3, [pc, #96]	; (80034c0 <reg15Handler+0x68>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	4b18      	ldr	r3, [pc, #96]	; (80034c4 <reg15Handler+0x6c>)
 8003464:	5c9a      	ldrb	r2, [r3, r2]
	newSetupData.setRegister.set_pwm_freq2 = (
 8003466:	4b18      	ldr	r3, [pc, #96]	; (80034c8 <reg15Handler+0x70>)
 8003468:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	newSetupData.setRegister.set_pwm_freq = (uint16_t) ((float) (newSetupData.setRegister.set_pwm_freq1
 800346c:	4b16      	ldr	r3, [pc, #88]	; (80034c8 <reg15Handler+0x70>)
 800346e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003472:	461a      	mov	r2, r3
			+ (newSetupData.setRegister.set_pwm_freq2 << 8)) * PWMFreqCorrectionFactor);
 8003474:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <reg15Handler+0x70>)
 8003476:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800347a:	021b      	lsls	r3, r3, #8
 800347c:	4413      	add	r3, r2
	newSetupData.setRegister.set_pwm_freq = (uint16_t) ((float) (newSetupData.setRegister.set_pwm_freq1
 800347e:	ee07 3a90 	vmov	s15, r3
 8003482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003486:	ee17 0a90 	vmov	r0, s15
 800348a:	f7fd f865 	bl	8000558 <__aeabi_f2d>
			+ (newSetupData.setRegister.set_pwm_freq2 << 8)) * PWMFreqCorrectionFactor);
 800348e:	a30a      	add	r3, pc, #40	; (adr r3, 80034b8 <reg15Handler+0x60>)
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	f7fd f8b8 	bl	8000608 <__aeabi_dmul>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
	newSetupData.setRegister.set_pwm_freq = (uint16_t) ((float) (newSetupData.setRegister.set_pwm_freq1
 800349c:	4610      	mov	r0, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	f7fd fb8a 	bl	8000bb8 <__aeabi_d2uiz>
 80034a4:	4603      	mov	r3, r0
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <reg15Handler+0x70>)
 80034aa:	871a      	strh	r2, [r3, #56]	; 0x38
	g_HWUpdateFlag = 1;
 80034ac:	4b07      	ldr	r3, [pc, #28]	; (80034cc <reg15Handler+0x74>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	e978d4fe 	.word	0xe978d4fe
 80034bc:	3ff03126 	.word	0x3ff03126
 80034c0:	200007b0 	.word	0x200007b0
 80034c4:	200007b4 	.word	0x200007b4
 80034c8:	20000720 	.word	0x20000720
 80034cc:	200006b8 	.word	0x200006b8

080034d0 <reg16Handler>:

void reg16Handler(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
//	newSetupData.getRegister.get_adc0 = (regBuffer[registerNumber].value & 0x01);
	//				newSetupData.getRegister.get_adc1 = ((regBuffer[registerNumber].value & 0x02) >> 1);
	//				newSetupData.getRegister.get_vref_mcu = ((regBuffer[registerNumber].value & 0x04) >> 2);
	//				newSetupData.getRegister.get_temp_amb = ((regBuffer[registerNumber].value & 0x08) >> 3);
	//				newSetupData.getRegister.get_temp_mcu = ((regBuffer[registerNumber].value & 0x10) >> 4);
	newSetupData.getRegister.get_dig_in0 = ((regBuffer[registerNumber].value & 0x20) >> 5);
 80034d4:	4b18      	ldr	r3, [pc, #96]	; (8003538 <reg16Handler+0x68>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	4b18      	ldr	r3, [pc, #96]	; (800353c <reg16Handler+0x6c>)
 80034dc:	5c9b      	ldrb	r3, [r3, r2]
 80034de:	115b      	asrs	r3, r3, #5
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	4b15      	ldr	r3, [pc, #84]	; (8003540 <reg16Handler+0x70>)
 80034ea:	741a      	strb	r2, [r3, #16]
	newSetupData.getRegister.get_dig_in1 = ((regBuffer[registerNumber].value & 0x40) >> 6);
 80034ec:	4b12      	ldr	r3, [pc, #72]	; (8003538 <reg16Handler+0x68>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	461a      	mov	r2, r3
 80034f2:	4b12      	ldr	r3, [pc, #72]	; (800353c <reg16Handler+0x6c>)
 80034f4:	5c9b      	ldrb	r3, [r3, r2]
 80034f6:	119b      	asrs	r3, r3, #6
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <reg16Handler+0x70>)
 8003502:	745a      	strb	r2, [r3, #17]
	//				}
	//				if (newSetupData.getRegister.get_temp_mcu)
	//				{
	//					printf("temp_mcu=%0.2f\r\n", stm32Temp);
	//				}
	if (newSetupData.getRegister.get_dig_in0)
 8003504:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <reg16Handler+0x70>)
 8003506:	7c1b      	ldrb	r3, [r3, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d007      	beq.n	800351c <reg16Handler+0x4c>
	{
		printf("IN_DIG0=%d\r\n", digRead(DIG_IN0));
 800350c:	2000      	movs	r0, #0
 800350e:	f7fe fb7f 	bl	8001c10 <digRead>
 8003512:	4603      	mov	r3, r0
 8003514:	4619      	mov	r1, r3
 8003516:	480b      	ldr	r0, [pc, #44]	; (8003544 <reg16Handler+0x74>)
 8003518:	f00d fdca 	bl	80110b0 <iprintf>
	}
	if (newSetupData.getRegister.get_dig_in1)
 800351c:	4b08      	ldr	r3, [pc, #32]	; (8003540 <reg16Handler+0x70>)
 800351e:	7c5b      	ldrb	r3, [r3, #17]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d007      	beq.n	8003534 <reg16Handler+0x64>
	{
		printf("IN_DIG1=%d\r\n", digRead(DIG_IN1));
 8003524:	2001      	movs	r0, #1
 8003526:	f7fe fb73 	bl	8001c10 <digRead>
 800352a:	4603      	mov	r3, r0
 800352c:	4619      	mov	r1, r3
 800352e:	4806      	ldr	r0, [pc, #24]	; (8003548 <reg16Handler+0x78>)
 8003530:	f00d fdbe 	bl	80110b0 <iprintf>
	}
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003534:	bf00      	nop
 8003536:	bd80      	pop	{r7, pc}
 8003538:	200007b0 	.word	0x200007b0
 800353c:	200007b4 	.word	0x200007b4
 8003540:	20000720 	.word	0x20000720
 8003544:	080137ec 	.word	0x080137ec
 8003548:	080137fc 	.word	0x080137fc

0800354c <reg17Handler>:

void reg17Handler(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
	newSetupData.setRegister.restore_default = (regBuffer[registerNumber].value & 0x01);
 8003550:	4b42      	ldr	r3, [pc, #264]	; (800365c <reg17Handler+0x110>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	4b42      	ldr	r3, [pc, #264]	; (8003660 <reg17Handler+0x114>)
 8003558:	5c9b      	ldrb	r3, [r3, r2]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	b2da      	uxtb	r2, r3
 8003560:	4b40      	ldr	r3, [pc, #256]	; (8003664 <reg17Handler+0x118>)
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	newSetupData.setRegister.save_config = ((regBuffer[registerNumber].value & 0x02) >> 1);
 8003566:	4b3d      	ldr	r3, [pc, #244]	; (800365c <reg17Handler+0x110>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	4b3c      	ldr	r3, [pc, #240]	; (8003660 <reg17Handler+0x114>)
 800356e:	5c9b      	ldrb	r3, [r3, r2]
 8003570:	105b      	asrs	r3, r3, #1
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	b2da      	uxtb	r2, r3
 800357a:	4b3a      	ldr	r3, [pc, #232]	; (8003664 <reg17Handler+0x118>)
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	if ((newSetupData.setRegister.save_config == 1) && (newSetupData.setRegister.restore_default == 0))
 8003580:	4b38      	ldr	r3, [pc, #224]	; (8003664 <reg17Handler+0x118>)
 8003582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003586:	2b01      	cmp	r3, #1
 8003588:	d11e      	bne.n	80035c8 <reg17Handler+0x7c>
 800358a:	4b36      	ldr	r3, [pc, #216]	; (8003664 <reg17Handler+0x118>)
 800358c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d119      	bne.n	80035c8 <reg17Handler+0x7c>
	{
		EEPROMWriteByte(EEPROMLoadPage, 0, (uint8_t*) (1));
 8003594:	2201      	movs	r2, #1
 8003596:	2100      	movs	r1, #0
 8003598:	2009      	movs	r0, #9
 800359a:	f7fd fe09 	bl	80011b0 <EEPROMWriteByte>
		loadSettingFromBuffer(&newSetupData, regBuffer);
 800359e:	4930      	ldr	r1, [pc, #192]	; (8003660 <reg17Handler+0x114>)
 80035a0:	4830      	ldr	r0, [pc, #192]	; (8003664 <reg17Handler+0x118>)
 80035a2:	f000 fc59 	bl	8003e58 <loadSettingFromBuffer>
		newSetupData.setRegister.save_config = 0;
 80035a6:	4b2f      	ldr	r3, [pc, #188]	; (8003664 <reg17Handler+0x118>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		regBuffer[reg17].value = (regBuffer[reg17].value & 0xFC);
 80035ae:	4b2c      	ldr	r3, [pc, #176]	; (8003660 <reg17Handler+0x114>)
 80035b0:	7c5b      	ldrb	r3, [r3, #17]
 80035b2:	f023 0303 	bic.w	r3, r3, #3
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	4b29      	ldr	r3, [pc, #164]	; (8003660 <reg17Handler+0x114>)
 80035ba:	745a      	strb	r2, [r3, #17]
		saveUserConfigData(EEPROMCustomPage, regBuffer);
 80035bc:	4928      	ldr	r1, [pc, #160]	; (8003660 <reg17Handler+0x114>)
 80035be:	200c      	movs	r0, #12
 80035c0:	f7fe fb8c 	bl	8001cdc <saveUserConfigData>
		restartMCU();
 80035c4:	f7fe fb84 	bl	8001cd0 <restartMCU>
	}
	if (newSetupData.setRegister.restore_default == 1)
 80035c8:	4b26      	ldr	r3, [pc, #152]	; (8003664 <reg17Handler+0x118>)
 80035ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d113      	bne.n	80035fa <reg17Handler+0xae>
	{
		newSetupData.setRegister.save_config = 0;
 80035d2:	4b24      	ldr	r3, [pc, #144]	; (8003664 <reg17Handler+0x118>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		EEPROMWriteByte(EEPROMLoadPage, 0, (uint8_t*) (0));
 80035da:	2200      	movs	r2, #0
 80035dc:	2100      	movs	r1, #0
 80035de:	2009      	movs	r0, #9
 80035e0:	f7fd fde6 	bl	80011b0 <EEPROMWriteByte>
		getSavedUserConfigData(EEPROMDefaultPage, regBuffer);
 80035e4:	491e      	ldr	r1, [pc, #120]	; (8003660 <reg17Handler+0x114>)
 80035e6:	200a      	movs	r0, #10
 80035e8:	f7fe fb9a 	bl	8001d20 <getSavedUserConfigData>
		loadSettingFromBuffer(&newSetupData, regBuffer);
 80035ec:	491c      	ldr	r1, [pc, #112]	; (8003660 <reg17Handler+0x114>)
 80035ee:	481d      	ldr	r0, [pc, #116]	; (8003664 <reg17Handler+0x118>)
 80035f0:	f000 fc32 	bl	8003e58 <loadSettingFromBuffer>
		restartMCU();
 80035f4:	f7fe fb6c 	bl	8001cd0 <restartMCU>
 80035f8:	e014      	b.n	8003624 <reg17Handler+0xd8>
	}
	else if ((newSetupData.setRegister.restore_default == 0) && (newSetupData.setRegister.save_config == 0))
 80035fa:	4b1a      	ldr	r3, [pc, #104]	; (8003664 <reg17Handler+0x118>)
 80035fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10f      	bne.n	8003624 <reg17Handler+0xd8>
 8003604:	4b17      	ldr	r3, [pc, #92]	; (8003664 <reg17Handler+0x118>)
 8003606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10a      	bne.n	8003624 <reg17Handler+0xd8>
	{
		EEPROMWriteByte(EEPROMLoadPage, 0, (uint8_t*) (1));
 800360e:	2201      	movs	r2, #1
 8003610:	2100      	movs	r1, #0
 8003612:	2009      	movs	r0, #9
 8003614:	f7fd fdcc 	bl	80011b0 <EEPROMWriteByte>
		loadSettingFromBuffer(&newSetupData, regBuffer);
 8003618:	4911      	ldr	r1, [pc, #68]	; (8003660 <reg17Handler+0x114>)
 800361a:	4812      	ldr	r0, [pc, #72]	; (8003664 <reg17Handler+0x118>)
 800361c:	f000 fc1c 	bl	8003e58 <loadSettingFromBuffer>
		restartMCU();
 8003620:	f7fe fb56 	bl	8001cd0 <restartMCU>
	}

	newSetupData.setRegister.ina226_avg_ch1 = ((regBuffer[registerNumber].value & 0x1C) >> 2);
 8003624:	4b0d      	ldr	r3, [pc, #52]	; (800365c <reg17Handler+0x110>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	461a      	mov	r2, r3
 800362a:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <reg17Handler+0x114>)
 800362c:	5c9b      	ldrb	r3, [r3, r2]
 800362e:	109b      	asrs	r3, r3, #2
 8003630:	b2db      	uxtb	r3, r3
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	b2da      	uxtb	r2, r3
 8003638:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <reg17Handler+0x118>)
 800363a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	newSetupData.setRegister.ina226_mode_ch1 = ((regBuffer[registerNumber].value & 0xE0) >> 5);
 800363e:	4b07      	ldr	r3, [pc, #28]	; (800365c <reg17Handler+0x110>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <reg17Handler+0x114>)
 8003646:	5c9b      	ldrb	r3, [r3, r2]
 8003648:	095b      	lsrs	r3, r3, #5
 800364a:	b2da      	uxtb	r2, r3
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <reg17Handler+0x118>)
 800364e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	g_ina226Ch1ConfigChangeFlag = 1;
 8003652:	4b05      	ldr	r3, [pc, #20]	; (8003668 <reg17Handler+0x11c>)
 8003654:	2201      	movs	r2, #1
 8003656:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003658:	bf00      	nop
 800365a:	bd80      	pop	{r7, pc}
 800365c:	200007b0 	.word	0x200007b0
 8003660:	200007b4 	.word	0x200007b4
 8003664:	20000720 	.word	0x20000720
 8003668:	200006b9 	.word	0x200006b9

0800366c <reg18Handler>:

void reg18Handler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
	newSetupData.setRegister.restart_device = (regBuffer[registerNumber].value & 0x01);
 8003670:	4b18      	ldr	r3, [pc, #96]	; (80036d4 <reg18Handler+0x68>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	4b18      	ldr	r3, [pc, #96]	; (80036d8 <reg18Handler+0x6c>)
 8003678:	5c9b      	ldrb	r3, [r3, r2]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	b2da      	uxtb	r2, r3
 8003680:	4b16      	ldr	r3, [pc, #88]	; (80036dc <reg18Handler+0x70>)
 8003682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	newSetupData.setRegister.ina226_avg_ch2 = ((regBuffer[registerNumber].value & 0x1C) >> 2);
 8003686:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <reg18Handler+0x68>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <reg18Handler+0x6c>)
 800368e:	5c9b      	ldrb	r3, [r3, r2]
 8003690:	109b      	asrs	r3, r3, #2
 8003692:	b2db      	uxtb	r3, r3
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	b2da      	uxtb	r2, r3
 800369a:	4b10      	ldr	r3, [pc, #64]	; (80036dc <reg18Handler+0x70>)
 800369c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	newSetupData.setRegister.ina226_mode_ch2 = ((regBuffer[registerNumber].value & 0xE0) >> 5);
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <reg18Handler+0x68>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <reg18Handler+0x6c>)
 80036a8:	5c9b      	ldrb	r3, [r3, r2]
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <reg18Handler+0x70>)
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	if (newSetupData.setRegister.restart_device == 1)
 80036b4:	4b09      	ldr	r3, [pc, #36]	; (80036dc <reg18Handler+0x70>)
 80036b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d105      	bne.n	80036ca <reg18Handler+0x5e>
	{
		newSetupData.setRegister.restart_device = 0;
 80036be:	4b07      	ldr	r3, [pc, #28]	; (80036dc <reg18Handler+0x70>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		restartMCU();
 80036c6:	f7fe fb03 	bl	8001cd0 <restartMCU>
	}

	g_ina226Ch2ConfigChangeFlag = 1;
 80036ca:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <reg18Handler+0x74>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]

	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80036d0:	bf00      	nop
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	200007b0 	.word	0x200007b0
 80036d8:	200007b4 	.word	0x200007b4
 80036dc:	20000720 	.word	0x20000720
 80036e0:	200006ba 	.word	0x200006ba

080036e4 <reg19Handler>:

void reg19Handler(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
	newSetupData.setRegister.ina226_rsh_pwr_ch1 = (regBuffer[registerNumber].value & 0x07);
 80036e8:	4b0e      	ldr	r3, [pc, #56]	; (8003724 <reg19Handler+0x40>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <reg19Handler+0x44>)
 80036f0:	5c9b      	ldrb	r3, [r3, r2]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <reg19Handler+0x48>)
 80036fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	newSetupData.setRegister.ina226_rsh_base_ch1 = ((regBuffer[registerNumber].value & 0xF8) >> 3);
 80036fe:	4b09      	ldr	r3, [pc, #36]	; (8003724 <reg19Handler+0x40>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	4b08      	ldr	r3, [pc, #32]	; (8003728 <reg19Handler+0x44>)
 8003706:	5c9b      	ldrb	r3, [r3, r2]
 8003708:	08db      	lsrs	r3, r3, #3
 800370a:	b2da      	uxtb	r2, r3
 800370c:	4b07      	ldr	r3, [pc, #28]	; (800372c <reg19Handler+0x48>)
 800370e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	g_ina226Ch1ConfigChangeFlag = 1;
 8003712:	4b07      	ldr	r3, [pc, #28]	; (8003730 <reg19Handler+0x4c>)
 8003714:	2201      	movs	r2, #1
 8003716:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003718:	bf00      	nop
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	200007b0 	.word	0x200007b0
 8003728:	200007b4 	.word	0x200007b4
 800372c:	20000720 	.word	0x20000720
 8003730:	200006b9 	.word	0x200006b9

08003734 <reg20Handler>:

void reg20Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
	newSetupData.setRegister.ina226_rsh_pwr_ch2 = (regBuffer[registerNumber].value & 0x07);
 8003738:	4b0e      	ldr	r3, [pc, #56]	; (8003774 <reg20Handler+0x40>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <reg20Handler+0x44>)
 8003740:	5c9b      	ldrb	r3, [r3, r2]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	b2da      	uxtb	r2, r3
 8003748:	4b0c      	ldr	r3, [pc, #48]	; (800377c <reg20Handler+0x48>)
 800374a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	newSetupData.setRegister.ina226_rsh_base_ch2 = ((regBuffer[registerNumber].value & 0xF8) >> 3);
 800374e:	4b09      	ldr	r3, [pc, #36]	; (8003774 <reg20Handler+0x40>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	4b08      	ldr	r3, [pc, #32]	; (8003778 <reg20Handler+0x44>)
 8003756:	5c9b      	ldrb	r3, [r3, r2]
 8003758:	08db      	lsrs	r3, r3, #3
 800375a:	b2da      	uxtb	r2, r3
 800375c:	4b07      	ldr	r3, [pc, #28]	; (800377c <reg20Handler+0x48>)
 800375e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	g_ina226Ch2ConfigChangeFlag = 1;
 8003762:	4b07      	ldr	r3, [pc, #28]	; (8003780 <reg20Handler+0x4c>)
 8003764:	2201      	movs	r2, #1
 8003766:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003768:	bf00      	nop
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	200007b0 	.word	0x200007b0
 8003778:	200007b4 	.word	0x200007b4
 800377c:	20000720 	.word	0x20000720
 8003780:	200006ba 	.word	0x200006ba

08003784 <reg21Handler>:

void reg21Handler(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
	newSetupData.setRegister.blink_led1 = (regBuffer[registerNumber].value & 0x01);
 8003788:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <reg21Handler+0x40>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <reg21Handler+0x44>)
 8003790:	5c9b      	ldrb	r3, [r3, r2]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	b2da      	uxtb	r2, r3
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <reg21Handler+0x48>)
 800379a:	76da      	strb	r2, [r3, #27]
	newSetupData.setRegister.led1_blink_rate = ((regBuffer[registerNumber].value & 0xFE) >> 1) * 10;
 800379c:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <reg21Handler+0x40>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <reg21Handler+0x44>)
 80037a4:	5c9b      	ldrb	r3, [r3, r2]
 80037a6:	085b      	lsrs	r3, r3, #1
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	461a      	mov	r2, r3
 80037ae:	0092      	lsls	r2, r2, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	4b05      	ldr	r3, [pc, #20]	; (80037cc <reg21Handler+0x48>)
 80037b8:	839a      	strh	r2, [r3, #28]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80037ba:	bf00      	nop
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	200007b0 	.word	0x200007b0
 80037c8:	200007b4 	.word	0x200007b4
 80037cc:	20000720 	.word	0x20000720

080037d0 <reg22Handler>:

void reg22Handler(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
	newSetupData.setRegister.blink_led2 = (regBuffer[registerNumber].value & 0x01);
 80037d4:	4b0e      	ldr	r3, [pc, #56]	; (8003810 <reg22Handler+0x40>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <reg22Handler+0x44>)
 80037dc:	5c9b      	ldrb	r3, [r3, r2]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <reg22Handler+0x48>)
 80037e6:	779a      	strb	r2, [r3, #30]
	newSetupData.setRegister.led2_blink_rate = ((regBuffer[registerNumber].value & 0xFE) >> 1) * 10;
 80037e8:	4b09      	ldr	r3, [pc, #36]	; (8003810 <reg22Handler+0x40>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	4b09      	ldr	r3, [pc, #36]	; (8003814 <reg22Handler+0x44>)
 80037f0:	5c9b      	ldrb	r3, [r3, r2]
 80037f2:	085b      	lsrs	r3, r3, #1
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	0092      	lsls	r2, r2, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <reg22Handler+0x48>)
 8003804:	841a      	strh	r2, [r3, #32]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003806:	bf00      	nop
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	200007b0 	.word	0x200007b0
 8003814:	200007b4 	.word	0x200007b4
 8003818:	20000720 	.word	0x20000720

0800381c <reg23Handler>:

void reg23Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003820:	bf00      	nop
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <reg24Handler>:

void reg24Handler(void)
{
 800382a:	b480      	push	{r7}
 800382c:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 800382e:	bf00      	nop
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <reg25Handler>:

void reg25Handler(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 800383c:	bf00      	nop
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <reg26Handler>:

void reg26Handler(void)
{
 8003846:	b480      	push	{r7}
 8003848:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 800384a:	bf00      	nop
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <reg27Handler>:

void reg27Handler(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <reg28Handler>:

void reg28Handler(void)
{
 8003862:	b480      	push	{r7}
 8003864:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003866:	bf00      	nop
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <reg29Handler>:

void reg29Handler(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <reg30Handler>:

void reg30Handler(void)
{
 800387e:	b480      	push	{r7}
 8003880:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003882:	bf00      	nop
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <reg31Handler>:

void reg31Handler(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
	if (regBuffer[registerNumber].value == 255)
 8003890:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <reg31Handler+0x1c>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	4b05      	ldr	r3, [pc, #20]	; (80038ac <reg31Handler+0x20>)
 8003898:	5c9b      	ldrb	r3, [r3, r2]
 800389a:	2bff      	cmp	r3, #255	; 0xff
 800389c:	d101      	bne.n	80038a2 <reg31Handler+0x16>
	{
		restartMCU();
 800389e:	f7fe fa17 	bl	8001cd0 <restartMCU>
	}
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	200007b0 	.word	0x200007b0
 80038ac:	200007b4 	.word	0x200007b4

080038b0 <defaultSettings>:

void defaultSettings(SetupData_t *defaultSetupData)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	/*********************START REGISTER 0/1 DAFUALT DATA*********************/
	defaultSetupData->setRegister.id0 = HW_VERSION;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2219      	movs	r2, #25
 80038bc:	751a      	strb	r2, [r3, #20]
	regBuffer[reg0].value = defaultSetupData->setRegister.id0;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	7d1a      	ldrb	r2, [r3, #20]
 80038c2:	4baa      	ldr	r3, [pc, #680]	; (8003b6c <defaultSettings+0x2bc>)
 80038c4:	701a      	strb	r2, [r3, #0]

	defaultSetupData->setRegister.id1 = FW_VERSION;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2214      	movs	r2, #20
 80038ca:	755a      	strb	r2, [r3, #21]
	regBuffer[reg1].value = defaultSetupData->setRegister.id1;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	7d5a      	ldrb	r2, [r3, #21]
 80038d0:	4ba6      	ldr	r3, [pc, #664]	; (8003b6c <defaultSettings+0x2bc>)
 80038d2:	705a      	strb	r2, [r3, #1]
	/**********************END REGISTER 0/1 DAFUALT DATA**********************/

	/*********************START REGISTER 2 DAFUALT DATA*********************/
	defaultSetupData->setRegister.set_led1 = 0;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	765a      	strb	r2, [r3, #25]
	regBuffer[reg2].value = defaultSetupData->setRegister.set_led1;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	7e5a      	ldrb	r2, [r3, #25]
 80038de:	4ba3      	ldr	r3, [pc, #652]	; (8003b6c <defaultSettings+0x2bc>)
 80038e0:	709a      	strb	r2, [r3, #2]

	defaultSetupData->setRegister.set_led2 = 0;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	769a      	strb	r2, [r3, #26]
	regBuffer[reg2].value |= (defaultSetupData->setRegister.set_led2 << 1);
 80038e8:	4ba0      	ldr	r3, [pc, #640]	; (8003b6c <defaultSettings+0x2bc>)
 80038ea:	789b      	ldrb	r3, [r3, #2]
 80038ec:	b25a      	sxtb	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	7e9b      	ldrb	r3, [r3, #26]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	b25b      	sxtb	r3, r3
 80038f6:	4313      	orrs	r3, r2
 80038f8:	b25b      	sxtb	r3, r3
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	4b9b      	ldr	r3, [pc, #620]	; (8003b6c <defaultSettings+0x2bc>)
 80038fe:	709a      	strb	r2, [r3, #2]

	defaultSetupData->setRegister.set_dig_out0 = 0;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	regBuffer[reg2].value |= (defaultSetupData->setRegister.set_dig_out0 << 2);
 8003908:	4b98      	ldr	r3, [pc, #608]	; (8003b6c <defaultSettings+0x2bc>)
 800390a:	789b      	ldrb	r3, [r3, #2]
 800390c:	b25a      	sxtb	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	b25b      	sxtb	r3, r3
 8003918:	4313      	orrs	r3, r2
 800391a:	b25b      	sxtb	r3, r3
 800391c:	b2da      	uxtb	r2, r3
 800391e:	4b93      	ldr	r3, [pc, #588]	; (8003b6c <defaultSettings+0x2bc>)
 8003920:	709a      	strb	r2, [r3, #2]

	defaultSetupData->setRegister.set_dig_out1 = 0;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	regBuffer[reg2].value |= (defaultSetupData->setRegister.set_dig_out1 << 3);
 800392a:	4b90      	ldr	r3, [pc, #576]	; (8003b6c <defaultSettings+0x2bc>)
 800392c:	789b      	ldrb	r3, [r3, #2]
 800392e:	b25a      	sxtb	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	b25b      	sxtb	r3, r3
 800393a:	4313      	orrs	r3, r2
 800393c:	b25b      	sxtb	r3, r3
 800393e:	b2da      	uxtb	r2, r3
 8003940:	4b8a      	ldr	r3, [pc, #552]	; (8003b6c <defaultSettings+0x2bc>)
 8003942:	709a      	strb	r2, [r3, #2]

	defaultSetupData->getRegister.get_int_in0 = 0;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	72da      	strb	r2, [r3, #11]
	regBuffer[reg2].value |= (defaultSetupData->getRegister.get_int_in0 << 4);
 800394a:	4b88      	ldr	r3, [pc, #544]	; (8003b6c <defaultSettings+0x2bc>)
 800394c:	789b      	ldrb	r3, [r3, #2]
 800394e:	b25a      	sxtb	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	7adb      	ldrb	r3, [r3, #11]
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	b25b      	sxtb	r3, r3
 8003958:	4313      	orrs	r3, r2
 800395a:	b25b      	sxtb	r3, r3
 800395c:	b2da      	uxtb	r2, r3
 800395e:	4b83      	ldr	r3, [pc, #524]	; (8003b6c <defaultSettings+0x2bc>)
 8003960:	709a      	strb	r2, [r3, #2]

	defaultSetupData->getRegister.get_int_in1 = 0;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	731a      	strb	r2, [r3, #12]
	regBuffer[reg2].value |= (defaultSetupData->getRegister.get_int_in1 << 5);
 8003968:	4b80      	ldr	r3, [pc, #512]	; (8003b6c <defaultSettings+0x2bc>)
 800396a:	789b      	ldrb	r3, [r3, #2]
 800396c:	b25a      	sxtb	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	7b1b      	ldrb	r3, [r3, #12]
 8003972:	015b      	lsls	r3, r3, #5
 8003974:	b25b      	sxtb	r3, r3
 8003976:	4313      	orrs	r3, r2
 8003978:	b25b      	sxtb	r3, r3
 800397a:	b2da      	uxtb	r2, r3
 800397c:	4b7b      	ldr	r3, [pc, #492]	; (8003b6c <defaultSettings+0x2bc>)
 800397e:	709a      	strb	r2, [r3, #2]

	defaultSetupData->setRegister.en_pwm0 = 0;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	regBuffer[reg2].value |= (defaultSetupData->setRegister.en_pwm0 << 6);
 8003988:	4b78      	ldr	r3, [pc, #480]	; (8003b6c <defaultSettings+0x2bc>)
 800398a:	789b      	ldrb	r3, [r3, #2]
 800398c:	b25a      	sxtb	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003994:	019b      	lsls	r3, r3, #6
 8003996:	b25b      	sxtb	r3, r3
 8003998:	4313      	orrs	r3, r2
 800399a:	b25b      	sxtb	r3, r3
 800399c:	b2da      	uxtb	r2, r3
 800399e:	4b73      	ldr	r3, [pc, #460]	; (8003b6c <defaultSettings+0x2bc>)
 80039a0:	709a      	strb	r2, [r3, #2]

	defaultSetupData->setRegister.en_pwm1 = 0;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	regBuffer[reg2].value |= (defaultSetupData->setRegister.en_pwm1 << 7);
 80039aa:	4b70      	ldr	r3, [pc, #448]	; (8003b6c <defaultSettings+0x2bc>)
 80039ac:	789b      	ldrb	r3, [r3, #2]
 80039ae:	b25a      	sxtb	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039b6:	01db      	lsls	r3, r3, #7
 80039b8:	b25b      	sxtb	r3, r3
 80039ba:	4313      	orrs	r3, r2
 80039bc:	b25b      	sxtb	r3, r3
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	4b6a      	ldr	r3, [pc, #424]	; (8003b6c <defaultSettings+0x2bc>)
 80039c2:	709a      	strb	r2, [r3, #2]
	/**********************END REGISTER 2 DAFUALT DATA**********************/

	/*********************START REGISTER 3 DAFUALT DATA*********************/
	//newSetupData->STREAM_DATA.AUTO_OFF_DIS = 1;	// Means that the automatic switch off feature is disabled
	defaultSetupData->setRegister.auto_off_dis = 1;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	759a      	strb	r2, [r3, #22]
	regBuffer[reg3].value = defaultSetupData->setRegister.auto_off_dis;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	7d9a      	ldrb	r2, [r3, #22]
 80039ce:	4b67      	ldr	r3, [pc, #412]	; (8003b6c <defaultSettings+0x2bc>)
 80039d0:	70da      	strb	r2, [r3, #3]

	defaultSetupData->setRegister.meas_mode = 1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	75da      	strb	r2, [r3, #23]
	regBuffer[reg3].value |= (defaultSetupData->setRegister.meas_mode << 1);
 80039d8:	4b64      	ldr	r3, [pc, #400]	; (8003b6c <defaultSettings+0x2bc>)
 80039da:	78db      	ldrb	r3, [r3, #3]
 80039dc:	b25a      	sxtb	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	7ddb      	ldrb	r3, [r3, #23]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	b25b      	sxtb	r3, r3
 80039e6:	4313      	orrs	r3, r2
 80039e8:	b25b      	sxtb	r3, r3
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	4b5f      	ldr	r3, [pc, #380]	; (8003b6c <defaultSettings+0x2bc>)
 80039ee:	70da      	strb	r2, [r3, #3]

	defaultSetupData->setRegister.en_disp = 1;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	761a      	strb	r2, [r3, #24]
	regBuffer[reg3].value |= (defaultSetupData->setRegister.en_disp << 2);
 80039f6:	4b5d      	ldr	r3, [pc, #372]	; (8003b6c <defaultSettings+0x2bc>)
 80039f8:	78db      	ldrb	r3, [r3, #3]
 80039fa:	b25a      	sxtb	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	7e1b      	ldrb	r3, [r3, #24]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	b25b      	sxtb	r3, r3
 8003a04:	4313      	orrs	r3, r2
 8003a06:	b25b      	sxtb	r3, r3
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	4b58      	ldr	r3, [pc, #352]	; (8003b6c <defaultSettings+0x2bc>)
 8003a0c:	70da      	strb	r2, [r3, #3]

	defaultSetupData->getRegister.get_int_temp = 0;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	73da      	strb	r2, [r3, #15]
	regBuffer[reg3].value |= (defaultSetupData->getRegister.get_int_temp << 3);
 8003a14:	4b55      	ldr	r3, [pc, #340]	; (8003b6c <defaultSettings+0x2bc>)
 8003a16:	78db      	ldrb	r3, [r3, #3]
 8003a18:	b25a      	sxtb	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	7bdb      	ldrb	r3, [r3, #15]
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	b25b      	sxtb	r3, r3
 8003a22:	4313      	orrs	r3, r2
 8003a24:	b25b      	sxtb	r3, r3
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	4b50      	ldr	r3, [pc, #320]	; (8003b6c <defaultSettings+0x2bc>)
 8003a2a:	70da      	strb	r2, [r3, #3]
//	defaultSetupData->adc0_upper_limit = 4095;
//
//	defaultSetupData->adc1_lower_limit = 0;
//	defaultSetupData->adc1_upper_limit = 4095;
	/*********************START REGISTER 4 DAFUALT DATA*********************/
	defaultSetupData->setRegister.set_over_temp_limit = 50;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2232      	movs	r2, #50	; 0x32
 8003a30:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	regBuffer[reg4].value = defaultSetupData->setRegister.set_over_temp_limit;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8003a3a:	4b4c      	ldr	r3, [pc, #304]	; (8003b6c <defaultSettings+0x2bc>)
 8003a3c:	711a      	strb	r2, [r3, #4]
	lm75ad_setTosLimit(&hi2c1, LM75AD_ADDRESS, (float) (defaultSetupData->setRegister.set_over_temp_limit));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003a44:	ee07 3a90 	vmov	s15, r3
 8003a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a50:	2190      	movs	r1, #144	; 0x90
 8003a52:	4847      	ldr	r0, [pc, #284]	; (8003b70 <defaultSettings+0x2c0>)
 8003a54:	f7fe ff1e 	bl	8002894 <lm75ad_setTosLimit>
	lm75ad_setThystLimit(&hi2c1, LM75AD_ADDRESS, (float) (defaultSetupData->setRegister.set_over_temp_limit - 5));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003a5e:	3b05      	subs	r3, #5
 8003a60:	ee07 3a90 	vmov	s15, r3
 8003a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a68:	eeb0 0a67 	vmov.f32	s0, s15
 8003a6c:	2190      	movs	r1, #144	; 0x90
 8003a6e:	4840      	ldr	r0, [pc, #256]	; (8003b70 <defaultSettings+0x2c0>)
 8003a70:	f7fe ff6a 	bl	8002948 <lm75ad_setThystLimit>
	/**********************END REGISTER 4 DAFUALT DATA**********************/

	/*********************START REGISTER 5 DAFUALT DATA*********************/
	defaultSetupData->setRegister.bus_volt_conv_time_ch1 = 7;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2207      	movs	r2, #7
 8003a78:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	regBuffer[reg5].value = defaultSetupData->setRegister.bus_volt_conv_time_ch1;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8003a82:	4b3a      	ldr	r3, [pc, #232]	; (8003b6c <defaultSettings+0x2bc>)
 8003a84:	715a      	strb	r2, [r3, #5]
	ina226_setVBUSCT(&hi2c1, CH1_ADDRESS, defaultSetupData->setRegister.bus_volt_conv_time_ch1);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	2180      	movs	r1, #128	; 0x80
 8003a90:	4837      	ldr	r0, [pc, #220]	; (8003b70 <defaultSettings+0x2c0>)
 8003a92:	f7fe fc01 	bl	8002298 <ina226_setVBUSCT>

	defaultSetupData->setRegister.shunt_volt_conv_time_ch1 = 7;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2207      	movs	r2, #7
 8003a9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	regBuffer[reg5].value |= (defaultSetupData->setRegister.shunt_volt_conv_time_ch1 << 3);
 8003a9e:	4b33      	ldr	r3, [pc, #204]	; (8003b6c <defaultSettings+0x2bc>)
 8003aa0:	795b      	ldrb	r3, [r3, #5]
 8003aa2:	b25a      	sxtb	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	b25b      	sxtb	r3, r3
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	b25b      	sxtb	r3, r3
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	4b2d      	ldr	r3, [pc, #180]	; (8003b6c <defaultSettings+0x2bc>)
 8003ab6:	715a      	strb	r2, [r3, #5]
	ina226_setVSHUNTCT(&hi2c1, CH1_ADDRESS, defaultSetupData->setRegister.shunt_volt_conv_time_ch1);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003abe:	461a      	mov	r2, r3
 8003ac0:	2180      	movs	r1, #128	; 0x80
 8003ac2:	482b      	ldr	r0, [pc, #172]	; (8003b70 <defaultSettings+0x2c0>)
 8003ac4:	f7fe fc0f 	bl	80022e6 <ina226_setVSHUNTCT>

	defaultSetupData->setRegister.limit_unit_prefix_ch1 = 0;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	regBuffer[reg5].value |= (defaultSetupData->setRegister.limit_unit_prefix_ch1 << 6);
 8003ad0:	4b26      	ldr	r3, [pc, #152]	; (8003b6c <defaultSettings+0x2bc>)
 8003ad2:	795b      	ldrb	r3, [r3, #5]
 8003ad4:	b25a      	sxtb	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003adc:	019b      	lsls	r3, r3, #6
 8003ade:	b25b      	sxtb	r3, r3
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	b25b      	sxtb	r3, r3
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	4b21      	ldr	r3, [pc, #132]	; (8003b6c <defaultSettings+0x2bc>)
 8003ae8:	715a      	strb	r2, [r3, #5]

	defaultSetupData->setRegister.limit_unit_prefix_ch2 = 0;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	regBuffer[reg5].value |= (defaultSetupData->setRegister.limit_unit_prefix_ch2 << 7);
 8003af2:	4b1e      	ldr	r3, [pc, #120]	; (8003b6c <defaultSettings+0x2bc>)
 8003af4:	795b      	ldrb	r3, [r3, #5]
 8003af6:	b25a      	sxtb	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003afe:	01db      	lsls	r3, r3, #7
 8003b00:	b25b      	sxtb	r3, r3
 8003b02:	4313      	orrs	r3, r2
 8003b04:	b25b      	sxtb	r3, r3
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	4b18      	ldr	r3, [pc, #96]	; (8003b6c <defaultSettings+0x2bc>)
 8003b0a:	715a      	strb	r2, [r3, #5]
	/**********************END REGISTER 5 DAFUALT DATA**********************/

	/*********************START REGISTER 6 DAFUALT DATA*********************/
	defaultSetupData->setRegister.bus_volt_conv_time_ch2 = 7;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2207      	movs	r2, #7
 8003b10:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	regBuffer[reg6].value = defaultSetupData->setRegister.bus_volt_conv_time_ch2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8003b1a:	4b14      	ldr	r3, [pc, #80]	; (8003b6c <defaultSettings+0x2bc>)
 8003b1c:	719a      	strb	r2, [r3, #6]
	ina226_setVBUSCT(&hi2c1, CH2_ADDRESS, defaultSetupData->setRegister.bus_volt_conv_time_ch2);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003b24:	461a      	mov	r2, r3
 8003b26:	2182      	movs	r1, #130	; 0x82
 8003b28:	4811      	ldr	r0, [pc, #68]	; (8003b70 <defaultSettings+0x2c0>)
 8003b2a:	f7fe fbb5 	bl	8002298 <ina226_setVBUSCT>

	defaultSetupData->setRegister.shunt_volt_conv_time_ch2 = 7;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2207      	movs	r2, #7
 8003b32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	ina226_setVSHUNTCT(&hi2c1, CH2_ADDRESS, defaultSetupData->setRegister.shunt_volt_conv_time_ch2);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2182      	movs	r1, #130	; 0x82
 8003b40:	480b      	ldr	r0, [pc, #44]	; (8003b70 <defaultSettings+0x2c0>)
 8003b42:	f7fe fbd0 	bl	80022e6 <ina226_setVSHUNTCT>
	regBuffer[reg6].value |= (defaultSetupData->setRegister.shunt_volt_conv_time_ch2 << 3);
 8003b46:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <defaultSettings+0x2bc>)
 8003b48:	799b      	ldrb	r3, [r3, #6]
 8003b4a:	b25a      	sxtb	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	b25b      	sxtb	r3, r3
 8003b56:	4313      	orrs	r3, r2
 8003b58:	b25b      	sxtb	r3, r3
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	4b03      	ldr	r3, [pc, #12]	; (8003b6c <defaultSettings+0x2bc>)
 8003b5e:	719a      	strb	r2, [r3, #6]
	/**********************END REGISTER 6 DAFUALT DATA**********************/

	/*********************START REGISTER 7 DAFUALT DATA*********************/
	defaultSetupData->setRegister.en_int_ch1 = 0;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8003b68:	e004      	b.n	8003b74 <defaultSettings+0x2c4>
 8003b6a:	bf00      	nop
 8003b6c:	200007b4 	.word	0x200007b4
 8003b70:	200006cc 	.word	0x200006cc
	regBuffer[reg7].value = defaultSetupData->setRegister.en_int_ch1;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8003b7a:	4bb1      	ldr	r3, [pc, #708]	; (8003e40 <defaultSettings+0x590>)
 8003b7c:	71da      	strb	r2, [r3, #7]

	defaultSetupData->setRegister.en_int_ch2 = 0;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	regBuffer[reg7].value |= (defaultSetupData->setRegister.en_int_ch2 << 1);
 8003b86:	4bae      	ldr	r3, [pc, #696]	; (8003e40 <defaultSettings+0x590>)
 8003b88:	79db      	ldrb	r3, [r3, #7]
 8003b8a:	b25a      	sxtb	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	b25b      	sxtb	r3, r3
 8003b96:	4313      	orrs	r3, r2
 8003b98:	b25b      	sxtb	r3, r3
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	4ba8      	ldr	r3, [pc, #672]	; (8003e40 <defaultSettings+0x590>)
 8003b9e:	71da      	strb	r2, [r3, #7]

	defaultSetupData->setRegister.ale_trig_ch1 = overCurrentAlert;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	regBuffer[reg7].value |= (defaultSetupData->setRegister.ale_trig_ch1 << 2);
 8003ba8:	4ba5      	ldr	r3, [pc, #660]	; (8003e40 <defaultSettings+0x590>)
 8003baa:	79db      	ldrb	r3, [r3, #7]
 8003bac:	b25a      	sxtb	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	b25b      	sxtb	r3, r3
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	b25b      	sxtb	r3, r3
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	4ba0      	ldr	r3, [pc, #640]	; (8003e40 <defaultSettings+0x590>)
 8003bc0:	71da      	strb	r2, [r3, #7]

	defaultSetupData->setRegister.ale_trig_ch2 = overCurrentAlert;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	regBuffer[reg7].value |= (defaultSetupData->setRegister.ale_trig_ch1 << 5);
 8003bca:	4b9d      	ldr	r3, [pc, #628]	; (8003e40 <defaultSettings+0x590>)
 8003bcc:	79db      	ldrb	r3, [r3, #7]
 8003bce:	b25a      	sxtb	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003bd6:	015b      	lsls	r3, r3, #5
 8003bd8:	b25b      	sxtb	r3, r3
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	b25b      	sxtb	r3, r3
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	4b97      	ldr	r3, [pc, #604]	; (8003e40 <defaultSettings+0x590>)
 8003be2:	71da      	strb	r2, [r3, #7]
	/**********************END REGISTER 7 DAFUALT DATA**********************/

	/*********************START REGISTER 8 DAFUALT DATA*********************/
	defaultSetupData->setRegister.limit1_ch1 = 0;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	regBuffer[reg8].value = defaultSetupData->setRegister.limit1_ch1 = 0;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8003bfa:	4b91      	ldr	r3, [pc, #580]	; (8003e40 <defaultSettings+0x590>)
 8003bfc:	721a      	strb	r2, [r3, #8]
	/**********************END REGISTER 8 DAFUALT DATA**********************/

	/*********************START REGISTER 9 DAFUALT DATA*********************/
	defaultSetupData->setRegister.limit2_ch1 = 0;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	regBuffer[reg9].value = defaultSetupData->setRegister.limit2_ch1 = 0;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8003c14:	4b8a      	ldr	r3, [pc, #552]	; (8003e40 <defaultSettings+0x590>)
 8003c16:	725a      	strb	r2, [r3, #9]
	/**********************END REGISTER 9 DAFUALT DATA**********************/

	/*********************START REGISTER 10 DAFUALT DATA*********************/
	defaultSetupData->setRegister.limit1_ch2 = 0;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	regBuffer[reg10].value = defaultSetupData->setRegister.limit1_ch2 = 0;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8003c2e:	4b84      	ldr	r3, [pc, #528]	; (8003e40 <defaultSettings+0x590>)
 8003c30:	729a      	strb	r2, [r3, #10]
	/**********************END REGISTER 10 DAFUALT DATA**********************/

	/*********************START REGISTER 11 DAFUALT DATA*********************/
	defaultSetupData->setRegister.limit2_ch2 = 0;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	regBuffer[reg11].value = defaultSetupData->setRegister.limit2_ch2 = 0;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8003c48:	4b7d      	ldr	r3, [pc, #500]	; (8003e40 <defaultSettings+0x590>)
 8003c4a:	72da      	strb	r2, [r3, #11]
	/**********************END REGISTER 11 DAFUALT DATA**********************/

	/*********************START REGISTER 12 DAFUALT DATA*********************/
	defaultSetupData->setRegister.set_pwm0_duty = 50;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2232      	movs	r2, #50	; 0x32
 8003c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	regBuffer[reg12].value = defaultSetupData->setRegister.set_pwm0_duty;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8003c5a:	4b79      	ldr	r3, [pc, #484]	; (8003e40 <defaultSettings+0x590>)
 8003c5c:	731a      	strb	r2, [r3, #12]
	/**********************END REGISTER 12 DAFUALT DATA**********************/

	/*********************START REGISTER 13 DAFUALT DATA*********************/
	defaultSetupData->setRegister.set_pwm1_duty = 25;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2219      	movs	r2, #25
 8003c62:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	regBuffer[reg13].value = defaultSetupData->setRegister.set_pwm1_duty;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8003c6c:	4b74      	ldr	r3, [pc, #464]	; (8003e40 <defaultSettings+0x590>)
 8003c6e:	735a      	strb	r2, [r3, #13]
	/**********************END REGISTER 13 DAFUALT DATA**********************/

	/*********************START REGISTER 14 DAFUALT DATA*********************/
	// The default PWM frequency is 1kHz
	defaultSetupData->setRegister.set_pwm_freq1 = 232;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	22e8      	movs	r2, #232	; 0xe8
 8003c74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	regBuffer[reg14].value = defaultSetupData->setRegister.set_pwm_freq1;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8003c7e:	4b70      	ldr	r3, [pc, #448]	; (8003e40 <defaultSettings+0x590>)
 8003c80:	739a      	strb	r2, [r3, #14]
	/**********************END REGISTER 14 DAFUALT DATA**********************/

	/*********************START REGISTER 15 DAFUALT DATA*********************/
	defaultSetupData->setRegister.set_pwm_freq2 = 3;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2203      	movs	r2, #3
 8003c86:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	regBuffer[reg15].value = defaultSetupData->setRegister.set_pwm_freq2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8003c90:	4b6b      	ldr	r3, [pc, #428]	; (8003e40 <defaultSettings+0x590>)
 8003c92:	73da      	strb	r2, [r3, #15]
	defaultSetupData->setRegister.set_pwm_freq = (uint16_t) ((float) (defaultSetupData->setRegister.set_pwm_freq1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c9a:	461a      	mov	r2, r3
			+ (defaultSetupData->setRegister.set_pwm_freq2 << 8)) * PWMFreqCorrectionFactor);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	4413      	add	r3, r2
	defaultSetupData->setRegister.set_pwm_freq = (uint16_t) ((float) (defaultSetupData->setRegister.set_pwm_freq1
 8003ca6:	ee07 3a90 	vmov	s15, r3
 8003caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cae:	ee17 0a90 	vmov	r0, s15
 8003cb2:	f7fc fc51 	bl	8000558 <__aeabi_f2d>
			+ (defaultSetupData->setRegister.set_pwm_freq2 << 8)) * PWMFreqCorrectionFactor);
 8003cb6:	a360      	add	r3, pc, #384	; (adr r3, 8003e38 <defaultSettings+0x588>)
 8003cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbc:	f7fc fca4 	bl	8000608 <__aeabi_dmul>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
	defaultSetupData->setRegister.set_pwm_freq = (uint16_t) ((float) (defaultSetupData->setRegister.set_pwm_freq1
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	f7fc ff76 	bl	8000bb8 <__aeabi_d2uiz>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	871a      	strh	r2, [r3, #56]	; 0x38
//	defaultSetupData->getRegister.get_temp_amb = 0;
//	regBuffer[reg16].value |= (defaultSetupData->getRegister.get_temp_amb << 3);
//
//	defaultSetupData->getRegister.get_temp_mcu = 0;
//	regBuffer[reg16].value |= (defaultSetupData->getRegister.get_temp_mcu << 4);
	defaultSetupData->getRegister.get_dig_in0 = 0;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	741a      	strb	r2, [r3, #16]
	regBuffer[reg16].value |= (defaultSetupData->getRegister.get_dig_in0 << 5);
 8003cda:	4b59      	ldr	r3, [pc, #356]	; (8003e40 <defaultSettings+0x590>)
 8003cdc:	7c1b      	ldrb	r3, [r3, #16]
 8003cde:	b25a      	sxtb	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	7c1b      	ldrb	r3, [r3, #16]
 8003ce4:	015b      	lsls	r3, r3, #5
 8003ce6:	b25b      	sxtb	r3, r3
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	b25b      	sxtb	r3, r3
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	4b54      	ldr	r3, [pc, #336]	; (8003e40 <defaultSettings+0x590>)
 8003cf0:	741a      	strb	r2, [r3, #16]

	defaultSetupData->getRegister.get_dig_in1 = 0;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	745a      	strb	r2, [r3, #17]
	regBuffer[reg16].value |= (defaultSetupData->getRegister.get_dig_in1 << 6);
 8003cf8:	4b51      	ldr	r3, [pc, #324]	; (8003e40 <defaultSettings+0x590>)
 8003cfa:	7c1b      	ldrb	r3, [r3, #16]
 8003cfc:	b25a      	sxtb	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	7c5b      	ldrb	r3, [r3, #17]
 8003d02:	019b      	lsls	r3, r3, #6
 8003d04:	b25b      	sxtb	r3, r3
 8003d06:	4313      	orrs	r3, r2
 8003d08:	b25b      	sxtb	r3, r3
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	4b4c      	ldr	r3, [pc, #304]	; (8003e40 <defaultSettings+0x590>)
 8003d0e:	741a      	strb	r2, [r3, #16]
//	defaultSetupData->getRegister.get_effiency = 0;
//	regBuffer[reg16].value |= (defaultSetupData->getRegister.get_effiency << 7);
	/**********************END REGISTER 16 DAFUALT DATA**********************/

	/**********************START REGISTER 17 DAFUALT DATA**********************/
	defaultSetupData->setRegister.restore_default = 0;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	regBuffer[reg17].value = defaultSetupData->setRegister.restore_default;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8003d1e:	4b48      	ldr	r3, [pc, #288]	; (8003e40 <defaultSettings+0x590>)
 8003d20:	745a      	strb	r2, [r3, #17]

	defaultSetupData->setRegister.save_config = 0;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	regBuffer[reg17].value |= (defaultSetupData->setRegister.save_config << 1);
 8003d2a:	4b45      	ldr	r3, [pc, #276]	; (8003e40 <defaultSettings+0x590>)
 8003d2c:	7c5b      	ldrb	r3, [r3, #17]
 8003d2e:	b25a      	sxtb	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	b25b      	sxtb	r3, r3
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	b25b      	sxtb	r3, r3
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	4b3f      	ldr	r3, [pc, #252]	; (8003e40 <defaultSettings+0x590>)
 8003d42:	745a      	strb	r2, [r3, #17]

	defaultSetupData->setRegister.ina226_avg_ch1 = 4;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2204      	movs	r2, #4
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	regBuffer[reg17].value |= (defaultSetupData->setRegister.ina226_avg_ch1 << 2);
 8003d4c:	4b3c      	ldr	r3, [pc, #240]	; (8003e40 <defaultSettings+0x590>)
 8003d4e:	7c5b      	ldrb	r3, [r3, #17]
 8003d50:	b25a      	sxtb	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	b25b      	sxtb	r3, r3
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	b25b      	sxtb	r3, r3
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	4b37      	ldr	r3, [pc, #220]	; (8003e40 <defaultSettings+0x590>)
 8003d64:	745a      	strb	r2, [r3, #17]
//	ina226_setAVG(&hi2c1, CH1_ADDRESS, defaultSetupData->setRegister.ina226_avg_ch1);
	defaultSetupData->setRegister.ina226_mode_ch1 = 7;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2207      	movs	r2, #7
 8003d6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	regBuffer[reg17].value |= (defaultSetupData->setRegister.ina226_mode_ch1 << 5);
 8003d6e:	4b34      	ldr	r3, [pc, #208]	; (8003e40 <defaultSettings+0x590>)
 8003d70:	7c5b      	ldrb	r3, [r3, #17]
 8003d72:	b25a      	sxtb	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d7a:	015b      	lsls	r3, r3, #5
 8003d7c:	b25b      	sxtb	r3, r3
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	b25b      	sxtb	r3, r3
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	4b2e      	ldr	r3, [pc, #184]	; (8003e40 <defaultSettings+0x590>)
 8003d86:	745a      	strb	r2, [r3, #17]
//	ina226_setMODE(&hi2c1, CH1_ADDRESS, defaultSetupData->setRegister.ina226_mode_ch1);
	/**********************END REGISTER 17 DAFUALT DATA**********************/

	/**********************START REGISTER 18 DAFUALT DATA**********************/
	defaultSetupData->setRegister.ina226_avg_ch2 = 4;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	regBuffer[reg18].value |= (defaultSetupData->setRegister.ina226_avg_ch2 << 2);
 8003d90:	4b2b      	ldr	r3, [pc, #172]	; (8003e40 <defaultSettings+0x590>)
 8003d92:	7c9b      	ldrb	r3, [r3, #18]
 8003d94:	b25a      	sxtb	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	b25b      	sxtb	r3, r3
 8003da0:	4313      	orrs	r3, r2
 8003da2:	b25b      	sxtb	r3, r3
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <defaultSettings+0x590>)
 8003da8:	749a      	strb	r2, [r3, #18]
//	ina226_setAVG(&hi2c1, CH2_ADDRESS, defaultSetupData->setRegister.ina226_avg_ch2);
	defaultSetupData->setRegister.ina226_mode_ch2 = 7;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2207      	movs	r2, #7
 8003dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	regBuffer[reg18].value |= (defaultSetupData->setRegister.ina226_mode_ch2 << 5);
 8003db2:	4b23      	ldr	r3, [pc, #140]	; (8003e40 <defaultSettings+0x590>)
 8003db4:	7c9b      	ldrb	r3, [r3, #18]
 8003db6:	b25a      	sxtb	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dbe:	015b      	lsls	r3, r3, #5
 8003dc0:	b25b      	sxtb	r3, r3
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	b25b      	sxtb	r3, r3
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	4b1d      	ldr	r3, [pc, #116]	; (8003e40 <defaultSettings+0x590>)
 8003dca:	749a      	strb	r2, [r3, #18]
//	ina226_setMODE(&hi2c1, CH2_ADDRESS, defaultSetupData->setRegister.ina226_mode_ch2);
	/**********************END REGISTER 18 DAFUALT DATA**********************/

	/**********************START REGISTER 19 DAFUALT DATA**********************/
	defaultSetupData->setRegister.ina226_rsh_base_ch1 = 5;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2205      	movs	r2, #5
 8003dd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	regBuffer[reg19].value = defaultSetupData->setRegister.ina226_rsh_base_ch1;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8003dda:	4b19      	ldr	r3, [pc, #100]	; (8003e40 <defaultSettings+0x590>)
 8003ddc:	74da      	strb	r2, [r3, #19]

	defaultSetupData->setRegister.ina226_rsh_pwr_ch1 = 0;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	regBuffer[reg19].value |= (defaultSetupData->setRegister.ina226_rsh_pwr_ch1 << 3);
 8003de6:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <defaultSettings+0x590>)
 8003de8:	7cdb      	ldrb	r3, [r3, #19]
 8003dea:	b25a      	sxtb	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	b25b      	sxtb	r3, r3
 8003df6:	4313      	orrs	r3, r2
 8003df8:	b25b      	sxtb	r3, r3
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <defaultSettings+0x590>)
 8003dfe:	74da      	strb	r2, [r3, #19]
//			((defaultSetupData->setRegister.ina226_rsh_base_ch1 << 3)
//					| (defaultSetupData->setRegister.ina226_rsh_pwr_ch1)));
	/**********************END REGISTER 19 DAFUALT DATA**********************/

	/**********************START REGISTER 20 DAFUALT DATA**********************/
	defaultSetupData->setRegister.ina226_rsh_base_ch2 = 10;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	220a      	movs	r2, #10
 8003e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	regBuffer[reg20].value = defaultSetupData->setRegister.ina226_rsh_base_ch2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <defaultSettings+0x590>)
 8003e10:	751a      	strb	r2, [r3, #20]

	defaultSetupData->setRegister.ina226_rsh_pwr_ch2 = 0;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regBuffer[reg20].value |= (defaultSetupData->setRegister.ina226_rsh_pwr_ch2 << 3);
 8003e1a:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <defaultSettings+0x590>)
 8003e1c:	7d1b      	ldrb	r3, [r3, #20]
 8003e1e:	b25a      	sxtb	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	b25b      	sxtb	r3, r3
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	b25b      	sxtb	r3, r3
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	e008      	b.n	8003e44 <defaultSettings+0x594>
 8003e32:	bf00      	nop
 8003e34:	f3af 8000 	nop.w
 8003e38:	e978d4fe 	.word	0xe978d4fe
 8003e3c:	3ff03126 	.word	0x3ff03126
 8003e40:	200007b4 	.word	0x200007b4
 8003e44:	4b02      	ldr	r3, [pc, #8]	; (8003e50 <defaultSettings+0x5a0>)
 8003e46:	751a      	strb	r2, [r3, #20]

//	g_HWupdatedFlag = 1;
//	g_registerUpdatedFlag = 1;
//	g_ina226Ch1ConfigChangedFlag = 1;
//	g_ina226Ch2ConfigChangedFlag = 1;
}
 8003e48:	bf00      	nop
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	200007b4 	.word	0x200007b4
 8003e54:	00000000 	.word	0x00000000

08003e58 <loadSettingFromBuffer>:

void loadSettingFromBuffer(SetupData_t *SetupData, RegisterData_t *inputBuffer)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
	SetupData->setRegister.id0 = (inputBuffer + reg0)->value;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	781a      	ldrb	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	751a      	strb	r2, [r3, #20]

	SetupData->setRegister.id1 = (inputBuffer + reg1)->value;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	781a      	ldrb	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	755a      	strb	r2, [r3, #21]
	/**********************END REGISTER 0/1 DAFUALT DATA**********************/

	/*********************START REGISTER 2 DAFUALT DATA*********************/
	SetupData->setRegister.set_led1 = ((inputBuffer + reg2)->value & 0x01);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	3302      	adds	r3, #2
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	765a      	strb	r2, [r3, #25]

	SetupData->setRegister.set_led2 = ((inputBuffer + reg2)->value & 0x02) >> 1;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	3302      	adds	r3, #2
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	105b      	asrs	r3, r3, #1
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	769a      	strb	r2, [r3, #26]

	SetupData->setRegister.set_dig_out0 = ((inputBuffer + reg2)->value & 0x04) >> 2;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	3302      	adds	r3, #2
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	109b      	asrs	r3, r3, #2
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	SetupData->setRegister.set_dig_out1 = ((inputBuffer + reg2)->value & 0x8) >> 3;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	3302      	adds	r3, #2
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	10db      	asrs	r3, r3, #3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	SetupData->getRegister.get_int_in0 = ((inputBuffer + reg2)->value & 0x10) >> 4;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	111b      	asrs	r3, r3, #4
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	72da      	strb	r2, [r3, #11]

	SetupData->getRegister.get_int_in1 = ((inputBuffer + reg2)->value & 0x20) >> 5;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	3302      	adds	r3, #2
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	115b      	asrs	r3, r3, #5
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	731a      	strb	r2, [r3, #12]

	SetupData->setRegister.en_pwm0 = ((inputBuffer + reg2)->value & 0x40) >> 6;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	3302      	adds	r3, #2
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	119b      	asrs	r3, r3, #6
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	SetupData->setRegister.en_pwm1 = ((inputBuffer + reg2)->value & 0x80) >> 7;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	3302      	adds	r3, #2
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	09db      	lsrs	r3, r3, #7
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	/**********************END REGISTER 2 DAFUALT DATA**********************/

	/*********************START REGISTER 3 DAFUALT DATA*********************/
	SetupData->setRegister.auto_off_dis = ((inputBuffer + reg3)->value & 0x01);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	3303      	adds	r3, #3
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	759a      	strb	r2, [r3, #22]

	SetupData->setRegister.meas_mode = ((inputBuffer + reg3)->value & 0x02) >> 1;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	3303      	adds	r3, #3
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	105b      	asrs	r3, r3, #1
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	75da      	strb	r2, [r3, #23]

	SetupData->setRegister.en_disp = ((inputBuffer + reg3)->value & 0x04) >> 2;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	3303      	adds	r3, #3
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	109b      	asrs	r3, r3, #2
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	761a      	strb	r2, [r3, #24]

	SetupData->getRegister.get_int_temp = ((inputBuffer + reg3)->value & 0x08) >> 3;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	3303      	adds	r3, #3
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	10db      	asrs	r3, r3, #3
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	73da      	strb	r2, [r3, #15]
	SetupData->getRegister.get_detect_5v = ((inputBuffer + reg3)->value & 0x10) >> 4;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	3303      	adds	r3, #3
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	111b      	asrs	r3, r3, #4
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	749a      	strb	r2, [r3, #18]
	//	defaultSetupData->adc0_upper_limit = 4095;
	//
	//	defaultSetupData->adc1_lower_limit = 0;
	//	defaultSetupData->adc1_upper_limit = 4095;
	/*********************START REGISTER 4 DAFUALT DATA*********************/
	SetupData->setRegister.set_over_temp_limit = (inputBuffer + reg4)->value;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	3304      	adds	r3, #4
 8003f76:	781a      	ldrb	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	lm75ad_setTosLimit(&hi2c1, LM75AD_ADDRESS, (float) (SetupData->setRegister.set_over_temp_limit));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003f84:	ee07 3a90 	vmov	s15, r3
 8003f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f90:	2190      	movs	r1, #144	; 0x90
 8003f92:	48b7      	ldr	r0, [pc, #732]	; (8004270 <loadSettingFromBuffer+0x418>)
 8003f94:	f7fe fc7e 	bl	8002894 <lm75ad_setTosLimit>
	lm75ad_setThystLimit(&hi2c1, LM75AD_ADDRESS, (float) (SetupData->setRegister.set_over_temp_limit - 5));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003f9e:	3b05      	subs	r3, #5
 8003fa0:	ee07 3a90 	vmov	s15, r3
 8003fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fac:	2190      	movs	r1, #144	; 0x90
 8003fae:	48b0      	ldr	r0, [pc, #704]	; (8004270 <loadSettingFromBuffer+0x418>)
 8003fb0:	f7fe fcca 	bl	8002948 <lm75ad_setThystLimit>
	/**********************END REGISTER 4 DAFUALT DATA**********************/

	/*********************START REGISTER 5 DAFUALT DATA*********************/
	SetupData->setRegister.bus_volt_conv_time_ch1 = ((inputBuffer + reg5)->value & 0x07);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	3305      	adds	r3, #5
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	ina226_setVBUSCT(&hi2c1, CH1_ADDRESS, SetupData->setRegister.bus_volt_conv_time_ch1);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2180      	movs	r1, #128	; 0x80
 8003fd0:	48a7      	ldr	r0, [pc, #668]	; (8004270 <loadSettingFromBuffer+0x418>)
 8003fd2:	f7fe f961 	bl	8002298 <ina226_setVBUSCT>

	SetupData->setRegister.shunt_volt_conv_time_ch1 = ((inputBuffer + reg5)->value & 0x38) >> 3;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	3305      	adds	r3, #5
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	10db      	asrs	r3, r3, #3
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	ina226_setVSHUNTCT(&hi2c1, CH1_ADDRESS, SetupData->setRegister.shunt_volt_conv_time_ch1);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	2180      	movs	r1, #128	; 0x80
 8003ff6:	489e      	ldr	r0, [pc, #632]	; (8004270 <loadSettingFromBuffer+0x418>)
 8003ff8:	f7fe f975 	bl	80022e6 <ina226_setVSHUNTCT>

	SetupData->setRegister.limit_unit_prefix_ch1 = ((inputBuffer + reg5)->value & 0x40) >> 6;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	3305      	adds	r3, #5
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	119b      	asrs	r3, r3, #6
 8004004:	b2db      	uxtb	r3, r3
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	b2da      	uxtb	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	SetupData->setRegister.limit_unit_prefix_ch2 = ((inputBuffer + reg5)->value & 0x80) >> 7;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	3305      	adds	r3, #5
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	09db      	lsrs	r3, r3, #7
 800401a:	b2da      	uxtb	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	/**********************END REGISTER 5 DAFUALT DATA**********************/

	/*********************START REGISTER 6 DAFUALT DATA*********************/
	SetupData->setRegister.bus_volt_conv_time_ch2 = ((inputBuffer + reg6)->value & 0x07);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	3306      	adds	r3, #6
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	b2da      	uxtb	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	ina226_setVBUSCT(&hi2c1, CH2_ADDRESS, SetupData->setRegister.bus_volt_conv_time_ch2);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800403a:	461a      	mov	r2, r3
 800403c:	2182      	movs	r1, #130	; 0x82
 800403e:	488c      	ldr	r0, [pc, #560]	; (8004270 <loadSettingFromBuffer+0x418>)
 8004040:	f7fe f92a 	bl	8002298 <ina226_setVBUSCT>

	SetupData->setRegister.shunt_volt_conv_time_ch2 = ((inputBuffer + reg6)->value & 0x38) >> 3;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	3306      	adds	r3, #6
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	10db      	asrs	r3, r3, #3
 800404c:	b2db      	uxtb	r3, r3
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	b2da      	uxtb	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	ina226_setVSHUNTCT(&hi2c1, CH2_ADDRESS, SetupData->setRegister.shunt_volt_conv_time_ch2);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004060:	461a      	mov	r2, r3
 8004062:	2182      	movs	r1, #130	; 0x82
 8004064:	4882      	ldr	r0, [pc, #520]	; (8004270 <loadSettingFromBuffer+0x418>)
 8004066:	f7fe f93e 	bl	80022e6 <ina226_setVSHUNTCT>
	/**********************END REGISTER 6 DAFUALT DATA**********************/

	/*********************START REGISTER 7 DAFUALT DATA*********************/
	SetupData->setRegister.en_int_ch1 = ((inputBuffer + reg7)->value & 0x01);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	3307      	adds	r3, #7
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	b2da      	uxtb	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	SetupData->setRegister.en_int_ch2 = ((inputBuffer + reg7)->value & 0x02) >> 1;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	3307      	adds	r3, #7
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	105b      	asrs	r3, r3, #1
 8004084:	b2db      	uxtb	r3, r3
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	b2da      	uxtb	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	SetupData->setRegister.ale_trig_ch1 = ((inputBuffer + reg7)->value & 0x1C) >> 2;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	3307      	adds	r3, #7
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	109b      	asrs	r3, r3, #2
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	SetupData->setRegister.ale_trig_ch2 = ((inputBuffer + reg7)->value & 0xE0) >> 5;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	3307      	adds	r3, #7
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	/**********************END REGISTER 7 DAFUALT DATA**********************/

	/*********************START REGISTER 8 DAFUALT DATA*********************/
	SetupData->setRegister.limit1_ch1 = (inputBuffer + reg8)->value;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	3308      	adds	r3, #8
 80040bc:	781a      	ldrb	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	/**********************END REGISTER 8 DAFUALT DATA**********************/

	/*********************START REGISTER 9 DAFUALT DATA*********************/
	SetupData->setRegister.limit2_ch1 = (inputBuffer + reg9)->value;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	3309      	adds	r3, #9
 80040c8:	781a      	ldrb	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	/**********************END REGISTER 9 DAFUALT DATA**********************/

	/*********************START REGISTER 10 DAFUALT DATA*********************/
	SetupData->setRegister.limit1_ch2 = (inputBuffer + reg10)->value;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	330a      	adds	r3, #10
 80040d4:	781a      	ldrb	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	/**********************END REGISTER 10 DAFUALT DATA**********************/

	/*********************START REGISTER 11 DAFUALT DATA*********************/
	SetupData->setRegister.limit2_ch2 = (inputBuffer + reg11)->value;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	330b      	adds	r3, #11
 80040e0:	781a      	ldrb	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	/**********************END REGISTER 11 DAFUALT DATA**********************/

	/*********************START REGISTER 12 DAFUALT DATA*********************/
	SetupData->setRegister.set_pwm0_duty = (inputBuffer + reg12)->value;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	330c      	adds	r3, #12
 80040ec:	781a      	ldrb	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	/**********************END REGISTER 12 DAFUALT DATA**********************/

	/*********************START REGISTER 13 DAFUALT DATA*********************/
	SetupData->setRegister.set_pwm1_duty = (inputBuffer + reg13)->value;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	330d      	adds	r3, #13
 80040f8:	781a      	ldrb	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	/**********************END REGISTER 13 DAFUALT DATA**********************/

	/*********************START REGISTER 14 DAFUALT DATA*********************/
	// The default PWM frequency is 1kHz
	SetupData->setRegister.set_pwm_freq1 = (inputBuffer + reg14)->value;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	330e      	adds	r3, #14
 8004104:	781a      	ldrb	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	/**********************END REGISTER 14 DAFUALT DATA**********************/

	/*********************START REGISTER 15 DAFUALT DATA*********************/
	SetupData->setRegister.set_pwm_freq2 = (inputBuffer + reg15)->value;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	330f      	adds	r3, #15
 8004110:	781a      	ldrb	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	SetupData->setRegister.set_pwm_freq = (uint16_t) ((float) (SetupData->setRegister.set_pwm_freq1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800411e:	461a      	mov	r2, r3
			+ (SetupData->setRegister.set_pwm_freq2 << 8)) * PWMFreqCorrectionFactor);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8004126:	021b      	lsls	r3, r3, #8
 8004128:	4413      	add	r3, r2
	SetupData->setRegister.set_pwm_freq = (uint16_t) ((float) (SetupData->setRegister.set_pwm_freq1
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004132:	ee17 0a90 	vmov	r0, s15
 8004136:	f7fc fa0f 	bl	8000558 <__aeabi_f2d>
			+ (SetupData->setRegister.set_pwm_freq2 << 8)) * PWMFreqCorrectionFactor);
 800413a:	a34b      	add	r3, pc, #300	; (adr r3, 8004268 <loadSettingFromBuffer+0x410>)
 800413c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004140:	f7fc fa62 	bl	8000608 <__aeabi_dmul>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
	SetupData->setRegister.set_pwm_freq = (uint16_t) ((float) (SetupData->setRegister.set_pwm_freq1
 8004148:	4610      	mov	r0, r2
 800414a:	4619      	mov	r1, r3
 800414c:	f7fc fd34 	bl	8000bb8 <__aeabi_d2uiz>
 8004150:	4603      	mov	r3, r0
 8004152:	b29a      	uxth	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	871a      	strh	r2, [r3, #56]	; 0x38
//	SetupData->getRegister.get_vref_mcu = ((inputBuffer + reg16)->value & 0x04) >> 2;
//
//	SetupData->getRegister.get_temp_amb = ((inputBuffer + reg16)->value & 0x08) >> 3;
//
//	SetupData->getRegister.get_temp_mcu = ((inputBuffer + reg16)->value & 0x10) >> 4;
	SetupData->getRegister.get_dig_in0 = ((inputBuffer + reg16)->value & 0x20) >> 5;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	3310      	adds	r3, #16
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	115b      	asrs	r3, r3, #5
 8004160:	b2db      	uxtb	r3, r3
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	b2da      	uxtb	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	741a      	strb	r2, [r3, #16]

	SetupData->getRegister.get_dig_in1 = ((inputBuffer + reg16)->value & 0x40) >> 6;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	3310      	adds	r3, #16
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	119b      	asrs	r3, r3, #6
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	b2da      	uxtb	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	745a      	strb	r2, [r3, #17]

//	SetupData->getRegister.get_effiency = ((inputBuffer + reg16)->value & 0x80) >> 7;
	/**********************END REGISTER 16 DAFUALT DATA**********************/

	/**********************START REGISTER 17 DAFUALT DATA**********************/
	SetupData->setRegister.restore_default = ((inputBuffer + reg17)->value & 0x01);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	3311      	adds	r3, #17
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	b2da      	uxtb	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	SetupData->setRegister.save_config = ((inputBuffer + reg17)->value & 0x02) >> 1;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	3311      	adds	r3, #17
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	105b      	asrs	r3, r3, #1
 800419a:	b2db      	uxtb	r3, r3
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	SetupData->setRegister.ina226_avg_ch1 = ((inputBuffer + reg17)->value & 0x1C) >> 2;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	3311      	adds	r3, #17
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	109b      	asrs	r3, r3, #2
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	ina226_setAVG(&hi2c1, CH1_ADDRESS, SetupData->setRegister.ina226_avg_ch1);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041c4:	461a      	mov	r2, r3
 80041c6:	2180      	movs	r1, #128	; 0x80
 80041c8:	4829      	ldr	r0, [pc, #164]	; (8004270 <loadSettingFromBuffer+0x418>)
 80041ca:	f7fe f81a 	bl	8002202 <ina226_setAVG>
	SetupData->setRegister.ina226_mode_ch1 = ((inputBuffer + reg17)->value & 0xE0) >> 5;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	3311      	adds	r3, #17
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	095b      	lsrs	r3, r3, #5
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	ina226_setMODE(&hi2c1, CH1_ADDRESS, SetupData->setRegister.ina226_mode_ch1);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041e4:	461a      	mov	r2, r3
 80041e6:	2180      	movs	r1, #128	; 0x80
 80041e8:	4821      	ldr	r0, [pc, #132]	; (8004270 <loadSettingFromBuffer+0x418>)
 80041ea:	f7fe f831 	bl	8002250 <ina226_setMODE>
	/**********************END REGISTER 17 DAFUALT DATA**********************/

	/**********************START REGISTER 18 DAFUALT DATA**********************/
	SetupData->setRegister.ina226_avg_ch2 = ((inputBuffer + reg18)->value & 0x1C) >> 2;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	3312      	adds	r3, #18
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	109b      	asrs	r3, r3, #2
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	ina226_setAVG(&hi2c1, CH2_ADDRESS, SetupData->setRegister.ina226_avg_ch2);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800420a:	461a      	mov	r2, r3
 800420c:	2182      	movs	r1, #130	; 0x82
 800420e:	4818      	ldr	r0, [pc, #96]	; (8004270 <loadSettingFromBuffer+0x418>)
 8004210:	f7fd fff7 	bl	8002202 <ina226_setAVG>
	SetupData->setRegister.ina226_mode_ch2 = ((inputBuffer + reg18)->value & 0xE0) >> 5;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	3312      	adds	r3, #18
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	b2da      	uxtb	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	ina226_setMODE(&hi2c1, CH2_ADDRESS, SetupData->setRegister.ina226_mode_ch2);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800422a:	461a      	mov	r2, r3
 800422c:	2182      	movs	r1, #130	; 0x82
 800422e:	4810      	ldr	r0, [pc, #64]	; (8004270 <loadSettingFromBuffer+0x418>)
 8004230:	f7fe f80e 	bl	8002250 <ina226_setMODE>
	/**********************END REGISTER 18 DAFUALT DATA**********************/

	/**********************START REGISTER 19 DAFUALT DATA**********************/
	SetupData->setRegister.ina226_rsh_pwr_ch1 = ((inputBuffer + reg19)->value & 0x07);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	3313      	adds	r3, #19
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	b2da      	uxtb	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	SetupData->setRegister.ina226_rsh_base_ch1 = ((inputBuffer + reg19)->value & 0xF8) >> 3;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	3313      	adds	r3, #19
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	08db      	lsrs	r3, r3, #3
 800424e:	b2da      	uxtb	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
//	((SetupData->setRegister.ina226_rsh_base_ch1 << 3) | (SetupData->setRegister.ina226_rsh_pwr_ch1))
//	);
	/**********************END REGISTER 19 DAFUALT DATA**********************/

	/**********************START REGISTER 20 DAFUALT DATA**********************/
	SetupData->setRegister.ina226_rsh_pwr_ch2 = ((inputBuffer + reg20)->value & 0x07);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	3314      	adds	r3, #20
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	b2da      	uxtb	r2, r3
 8004262:	e007      	b.n	8004274 <loadSettingFromBuffer+0x41c>
 8004264:	f3af 8000 	nop.w
 8004268:	e978d4fe 	.word	0xe978d4fe
 800426c:	3ff03126 	.word	0x3ff03126
 8004270:	200006cc 	.word	0x200006cc
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	SetupData->setRegister.ina226_rsh_base_ch2 = ((inputBuffer + reg20)->value & 0xF8) >> 3;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	3314      	adds	r3, #20
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	08db      	lsrs	r3, r3, #3
 8004282:	b2da      	uxtb	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
//	((SetupData->setRegister.ina226_rsh_base_ch2 << 3) | (SetupData->setRegister.ina226_rsh_pwr_ch2))
//	);
	/**********************END REGISTER 20 DAFUALT DATA**********************/

	/**********************START REGISTER 21 DAFUALT DATA**********************/
	SetupData->setRegister.blink_led1 = ((inputBuffer + reg21)->value & 0x01);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	3315      	adds	r3, #21
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	b2da      	uxtb	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	76da      	strb	r2, [r3, #27]
	SetupData->setRegister.led1_blink_rate = (((inputBuffer + reg21)->value & 0xFE) >> 1) * 10;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	3315      	adds	r3, #21
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	085b      	lsrs	r3, r3, #1
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	461a      	mov	r2, r3
 80042a8:	0092      	lsls	r2, r2, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	839a      	strh	r2, [r3, #28]
	/***********************END REGISTER 21 DAFUALT DATA***********************/

	/**********************START REGISTER 22 DAFUALT DATA**********************/
	SetupData->setRegister.blink_led2 = ((inputBuffer + reg22)->value & 0x01);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	3316      	adds	r3, #22
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	779a      	strb	r2, [r3, #30]
	SetupData->setRegister.led2_blink_rate = (((inputBuffer + reg22)->value & 0xFE) >> 1) * 10;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	3316      	adds	r3, #22
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	085b      	lsrs	r3, r3, #1
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	461a      	mov	r2, r3
 80042d2:	0092      	lsls	r2, r2, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	b29a      	uxth	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	841a      	strh	r2, [r3, #32]
	/***********************END REGISTER 22 DAFUALT DATA***********************/

	g_HWUpdateFlag = 1;
 80042de:	4b03      	ldr	r3, [pc, #12]	; (80042ec <loadSettingFromBuffer+0x494>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	701a      	strb	r2, [r3, #0]
}
 80042e4:	bf00      	nop
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	200006b8 	.word	0x200006b8

080042f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80042f4:	4b17      	ldr	r3, [pc, #92]	; (8004354 <MX_SPI1_Init+0x64>)
 80042f6:	4a18      	ldr	r2, [pc, #96]	; (8004358 <MX_SPI1_Init+0x68>)
 80042f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80042fa:	4b16      	ldr	r3, [pc, #88]	; (8004354 <MX_SPI1_Init+0x64>)
 80042fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004300:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004302:	4b14      	ldr	r3, [pc, #80]	; (8004354 <MX_SPI1_Init+0x64>)
 8004304:	2200      	movs	r2, #0
 8004306:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004308:	4b12      	ldr	r3, [pc, #72]	; (8004354 <MX_SPI1_Init+0x64>)
 800430a:	2200      	movs	r2, #0
 800430c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800430e:	4b11      	ldr	r3, [pc, #68]	; (8004354 <MX_SPI1_Init+0x64>)
 8004310:	2200      	movs	r2, #0
 8004312:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004314:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <MX_SPI1_Init+0x64>)
 8004316:	2200      	movs	r2, #0
 8004318:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800431a:	4b0e      	ldr	r3, [pc, #56]	; (8004354 <MX_SPI1_Init+0x64>)
 800431c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004320:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004322:	4b0c      	ldr	r3, [pc, #48]	; (8004354 <MX_SPI1_Init+0x64>)
 8004324:	2200      	movs	r2, #0
 8004326:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004328:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <MX_SPI1_Init+0x64>)
 800432a:	2200      	movs	r2, #0
 800432c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800432e:	4b09      	ldr	r3, [pc, #36]	; (8004354 <MX_SPI1_Init+0x64>)
 8004330:	2200      	movs	r2, #0
 8004332:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004334:	4b07      	ldr	r3, [pc, #28]	; (8004354 <MX_SPI1_Init+0x64>)
 8004336:	2200      	movs	r2, #0
 8004338:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800433a:	4b06      	ldr	r3, [pc, #24]	; (8004354 <MX_SPI1_Init+0x64>)
 800433c:	220a      	movs	r2, #10
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004340:	4804      	ldr	r0, [pc, #16]	; (8004354 <MX_SPI1_Init+0x64>)
 8004342:	f005 fb95 	bl	8009a70 <HAL_SPI_Init>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800434c:	f7fe fc84 	bl	8002c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004350:	bf00      	nop
 8004352:	bd80      	pop	{r7, pc}
 8004354:	200007d4 	.word	0x200007d4
 8004358:	40013000 	.word	0x40013000

0800435c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	; 0x28
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004364:	f107 0314 	add.w	r3, r7, #20
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	605a      	str	r2, [r3, #4]
 800436e:	609a      	str	r2, [r3, #8]
 8004370:	60da      	str	r2, [r3, #12]
 8004372:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a19      	ldr	r2, [pc, #100]	; (80043e0 <HAL_SPI_MspInit+0x84>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d12b      	bne.n	80043d6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	4b18      	ldr	r3, [pc, #96]	; (80043e4 <HAL_SPI_MspInit+0x88>)
 8004384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004386:	4a17      	ldr	r2, [pc, #92]	; (80043e4 <HAL_SPI_MspInit+0x88>)
 8004388:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800438c:	6453      	str	r3, [r2, #68]	; 0x44
 800438e:	4b15      	ldr	r3, [pc, #84]	; (80043e4 <HAL_SPI_MspInit+0x88>)
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800439a:	2300      	movs	r3, #0
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	4b11      	ldr	r3, [pc, #68]	; (80043e4 <HAL_SPI_MspInit+0x88>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	4a10      	ldr	r2, [pc, #64]	; (80043e4 <HAL_SPI_MspInit+0x88>)
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	6313      	str	r3, [r2, #48]	; 0x30
 80043aa:	4b0e      	ldr	r3, [pc, #56]	; (80043e4 <HAL_SPI_MspInit+0x88>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80043b6:	23e0      	movs	r3, #224	; 0xe0
 80043b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ba:	2302      	movs	r3, #2
 80043bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043be:	2301      	movs	r3, #1
 80043c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c2:	2303      	movs	r3, #3
 80043c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80043c6:	2305      	movs	r3, #5
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ca:	f107 0314 	add.w	r3, r7, #20
 80043ce:	4619      	mov	r1, r3
 80043d0:	4805      	ldr	r0, [pc, #20]	; (80043e8 <HAL_SPI_MspInit+0x8c>)
 80043d2:	f001 fddf 	bl	8005f94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80043d6:	bf00      	nop
 80043d8:	3728      	adds	r7, #40	; 0x28
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40013000 	.word	0x40013000
 80043e4:	40023800 	.word	0x40023800
 80043e8:	40020000 	.word	0x40020000

080043ec <ssd1306_Reset>:
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	bf00      	nop
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <ssd1306_WriteCommand>:
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af04      	add	r7, sp, #16
 8004402:	4603      	mov	r3, r0
 8004404:	71fb      	strb	r3, [r7, #7]
 8004406:	f04f 33ff 	mov.w	r3, #4294967295
 800440a:	9302      	str	r3, [sp, #8]
 800440c:	2301      	movs	r3, #1
 800440e:	9301      	str	r3, [sp, #4]
 8004410:	1dfb      	adds	r3, r7, #7
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	2301      	movs	r3, #1
 8004416:	2200      	movs	r2, #0
 8004418:	2178      	movs	r1, #120	; 0x78
 800441a:	4803      	ldr	r0, [pc, #12]	; (8004428 <ssd1306_WriteCommand+0x2c>)
 800441c:	f002 fc16 	bl	8006c4c <HAL_I2C_Mem_Write>
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	200006cc 	.word	0x200006cc

0800442c <ssd1306_WriteData>:
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af04      	add	r7, sp, #16
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	b29b      	uxth	r3, r3
 800443a:	f04f 32ff 	mov.w	r2, #4294967295
 800443e:	9202      	str	r2, [sp, #8]
 8004440:	9301      	str	r3, [sp, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	2301      	movs	r3, #1
 8004448:	2240      	movs	r2, #64	; 0x40
 800444a:	2178      	movs	r1, #120	; 0x78
 800444c:	4803      	ldr	r0, [pc, #12]	; (800445c <ssd1306_WriteData+0x30>)
 800444e:	f002 fbfd 	bl	8006c4c <HAL_I2C_Mem_Write>
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	200006cc 	.word	0x200006cc

08004460 <ssd1306_Init>:
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
 8004464:	f7ff ffc2 	bl	80043ec <ssd1306_Reset>
 8004468:	2064      	movs	r0, #100	; 0x64
 800446a:	f000 fd0f 	bl	8004e8c <HAL_Delay>
 800446e:	2000      	movs	r0, #0
 8004470:	f000 f9e6 	bl	8004840 <ssd1306_SetDisplayOn>
 8004474:	2020      	movs	r0, #32
 8004476:	f7ff ffc1 	bl	80043fc <ssd1306_WriteCommand>
 800447a:	2000      	movs	r0, #0
 800447c:	f7ff ffbe 	bl	80043fc <ssd1306_WriteCommand>
 8004480:	20b0      	movs	r0, #176	; 0xb0
 8004482:	f7ff ffbb 	bl	80043fc <ssd1306_WriteCommand>
 8004486:	20c8      	movs	r0, #200	; 0xc8
 8004488:	f7ff ffb8 	bl	80043fc <ssd1306_WriteCommand>
 800448c:	2000      	movs	r0, #0
 800448e:	f7ff ffb5 	bl	80043fc <ssd1306_WriteCommand>
 8004492:	2010      	movs	r0, #16
 8004494:	f7ff ffb2 	bl	80043fc <ssd1306_WriteCommand>
 8004498:	2040      	movs	r0, #64	; 0x40
 800449a:	f7ff ffaf 	bl	80043fc <ssd1306_WriteCommand>
 800449e:	20ff      	movs	r0, #255	; 0xff
 80044a0:	f000 f9ba 	bl	8004818 <ssd1306_SetContrast>
 80044a4:	20a1      	movs	r0, #161	; 0xa1
 80044a6:	f7ff ffa9 	bl	80043fc <ssd1306_WriteCommand>
 80044aa:	20a6      	movs	r0, #166	; 0xa6
 80044ac:	f7ff ffa6 	bl	80043fc <ssd1306_WriteCommand>
 80044b0:	20a8      	movs	r0, #168	; 0xa8
 80044b2:	f7ff ffa3 	bl	80043fc <ssd1306_WriteCommand>
 80044b6:	203f      	movs	r0, #63	; 0x3f
 80044b8:	f7ff ffa0 	bl	80043fc <ssd1306_WriteCommand>
 80044bc:	20a4      	movs	r0, #164	; 0xa4
 80044be:	f7ff ff9d 	bl	80043fc <ssd1306_WriteCommand>
 80044c2:	20d3      	movs	r0, #211	; 0xd3
 80044c4:	f7ff ff9a 	bl	80043fc <ssd1306_WriteCommand>
 80044c8:	2000      	movs	r0, #0
 80044ca:	f7ff ff97 	bl	80043fc <ssd1306_WriteCommand>
 80044ce:	20d5      	movs	r0, #213	; 0xd5
 80044d0:	f7ff ff94 	bl	80043fc <ssd1306_WriteCommand>
 80044d4:	20f0      	movs	r0, #240	; 0xf0
 80044d6:	f7ff ff91 	bl	80043fc <ssd1306_WriteCommand>
 80044da:	20d9      	movs	r0, #217	; 0xd9
 80044dc:	f7ff ff8e 	bl	80043fc <ssd1306_WriteCommand>
 80044e0:	2022      	movs	r0, #34	; 0x22
 80044e2:	f7ff ff8b 	bl	80043fc <ssd1306_WriteCommand>
 80044e6:	20da      	movs	r0, #218	; 0xda
 80044e8:	f7ff ff88 	bl	80043fc <ssd1306_WriteCommand>
 80044ec:	2012      	movs	r0, #18
 80044ee:	f7ff ff85 	bl	80043fc <ssd1306_WriteCommand>
 80044f2:	20db      	movs	r0, #219	; 0xdb
 80044f4:	f7ff ff82 	bl	80043fc <ssd1306_WriteCommand>
 80044f8:	2020      	movs	r0, #32
 80044fa:	f7ff ff7f 	bl	80043fc <ssd1306_WriteCommand>
 80044fe:	208d      	movs	r0, #141	; 0x8d
 8004500:	f7ff ff7c 	bl	80043fc <ssd1306_WriteCommand>
 8004504:	2014      	movs	r0, #20
 8004506:	f7ff ff79 	bl	80043fc <ssd1306_WriteCommand>
 800450a:	2001      	movs	r0, #1
 800450c:	f000 f998 	bl	8004840 <ssd1306_SetDisplayOn>
 8004510:	2000      	movs	r0, #0
 8004512:	f000 f80f 	bl	8004534 <ssd1306_Fill>
 8004516:	f000 f831 	bl	800457c <ssd1306_UpdateScreen>
 800451a:	4b05      	ldr	r3, [pc, #20]	; (8004530 <ssd1306_Init+0xd0>)
 800451c:	2200      	movs	r2, #0
 800451e:	801a      	strh	r2, [r3, #0]
 8004520:	4b03      	ldr	r3, [pc, #12]	; (8004530 <ssd1306_Init+0xd0>)
 8004522:	2200      	movs	r2, #0
 8004524:	805a      	strh	r2, [r3, #2]
 8004526:	4b02      	ldr	r3, [pc, #8]	; (8004530 <ssd1306_Init+0xd0>)
 8004528:	2201      	movs	r2, #1
 800452a:	715a      	strb	r2, [r3, #5]
 800452c:	bf00      	nop
 800452e:	bd80      	pop	{r7, pc}
 8004530:	20000c2c 	.word	0x20000c2c

08004534 <ssd1306_Fill>:
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	71fb      	strb	r3, [r7, #7]
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	e00d      	b.n	8004560 <ssd1306_Fill+0x2c>
 8004544:	79fb      	ldrb	r3, [r7, #7]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <ssd1306_Fill+0x1a>
 800454a:	2100      	movs	r1, #0
 800454c:	e000      	b.n	8004550 <ssd1306_Fill+0x1c>
 800454e:	21ff      	movs	r1, #255	; 0xff
 8004550:	4a09      	ldr	r2, [pc, #36]	; (8004578 <ssd1306_Fill+0x44>)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4413      	add	r3, r2
 8004556:	460a      	mov	r2, r1
 8004558:	701a      	strb	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3301      	adds	r3, #1
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004566:	d3ed      	bcc.n	8004544 <ssd1306_Fill+0x10>
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	2000082c 	.word	0x2000082c

0800457c <ssd1306_UpdateScreen>:
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	2300      	movs	r3, #0
 8004584:	71fb      	strb	r3, [r7, #7]
 8004586:	e016      	b.n	80045b6 <ssd1306_UpdateScreen+0x3a>
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	3b50      	subs	r3, #80	; 0x50
 800458c:	b2db      	uxtb	r3, r3
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff ff34 	bl	80043fc <ssd1306_WriteCommand>
 8004594:	2000      	movs	r0, #0
 8004596:	f7ff ff31 	bl	80043fc <ssd1306_WriteCommand>
 800459a:	2010      	movs	r0, #16
 800459c:	f7ff ff2e 	bl	80043fc <ssd1306_WriteCommand>
 80045a0:	79fb      	ldrb	r3, [r7, #7]
 80045a2:	01db      	lsls	r3, r3, #7
 80045a4:	4a08      	ldr	r2, [pc, #32]	; (80045c8 <ssd1306_UpdateScreen+0x4c>)
 80045a6:	4413      	add	r3, r2
 80045a8:	2180      	movs	r1, #128	; 0x80
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff ff3e 	bl	800442c <ssd1306_WriteData>
 80045b0:	79fb      	ldrb	r3, [r7, #7]
 80045b2:	3301      	adds	r3, #1
 80045b4:	71fb      	strb	r3, [r7, #7]
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	2b07      	cmp	r3, #7
 80045ba:	d9e5      	bls.n	8004588 <ssd1306_UpdateScreen+0xc>
 80045bc:	bf00      	nop
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	2000082c 	.word	0x2000082c

080045cc <ssd1306_DrawPixel>:
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	71fb      	strb	r3, [r7, #7]
 80045d6:	460b      	mov	r3, r1
 80045d8:	71bb      	strb	r3, [r7, #6]
 80045da:	4613      	mov	r3, r2
 80045dc:	717b      	strb	r3, [r7, #5]
 80045de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	db48      	blt.n	8004678 <ssd1306_DrawPixel+0xac>
 80045e6:	79bb      	ldrb	r3, [r7, #6]
 80045e8:	2b3f      	cmp	r3, #63	; 0x3f
 80045ea:	d845      	bhi.n	8004678 <ssd1306_DrawPixel+0xac>
 80045ec:	4b25      	ldr	r3, [pc, #148]	; (8004684 <ssd1306_DrawPixel+0xb8>)
 80045ee:	791b      	ldrb	r3, [r3, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d006      	beq.n	8004602 <ssd1306_DrawPixel+0x36>
 80045f4:	797b      	ldrb	r3, [r7, #5]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	bf0c      	ite	eq
 80045fa:	2301      	moveq	r3, #1
 80045fc:	2300      	movne	r3, #0
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	717b      	strb	r3, [r7, #5]
 8004602:	797b      	ldrb	r3, [r7, #5]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d11a      	bne.n	800463e <ssd1306_DrawPixel+0x72>
 8004608:	79fa      	ldrb	r2, [r7, #7]
 800460a:	79bb      	ldrb	r3, [r7, #6]
 800460c:	08db      	lsrs	r3, r3, #3
 800460e:	b2d8      	uxtb	r0, r3
 8004610:	4603      	mov	r3, r0
 8004612:	01db      	lsls	r3, r3, #7
 8004614:	4413      	add	r3, r2
 8004616:	4a1c      	ldr	r2, [pc, #112]	; (8004688 <ssd1306_DrawPixel+0xbc>)
 8004618:	5cd3      	ldrb	r3, [r2, r3]
 800461a:	b25a      	sxtb	r2, r3
 800461c:	79bb      	ldrb	r3, [r7, #6]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	2101      	movs	r1, #1
 8004624:	fa01 f303 	lsl.w	r3, r1, r3
 8004628:	b25b      	sxtb	r3, r3
 800462a:	4313      	orrs	r3, r2
 800462c:	b259      	sxtb	r1, r3
 800462e:	79fa      	ldrb	r2, [r7, #7]
 8004630:	4603      	mov	r3, r0
 8004632:	01db      	lsls	r3, r3, #7
 8004634:	4413      	add	r3, r2
 8004636:	b2c9      	uxtb	r1, r1
 8004638:	4a13      	ldr	r2, [pc, #76]	; (8004688 <ssd1306_DrawPixel+0xbc>)
 800463a:	54d1      	strb	r1, [r2, r3]
 800463c:	e01d      	b.n	800467a <ssd1306_DrawPixel+0xae>
 800463e:	79fa      	ldrb	r2, [r7, #7]
 8004640:	79bb      	ldrb	r3, [r7, #6]
 8004642:	08db      	lsrs	r3, r3, #3
 8004644:	b2d8      	uxtb	r0, r3
 8004646:	4603      	mov	r3, r0
 8004648:	01db      	lsls	r3, r3, #7
 800464a:	4413      	add	r3, r2
 800464c:	4a0e      	ldr	r2, [pc, #56]	; (8004688 <ssd1306_DrawPixel+0xbc>)
 800464e:	5cd3      	ldrb	r3, [r2, r3]
 8004650:	b25a      	sxtb	r2, r3
 8004652:	79bb      	ldrb	r3, [r7, #6]
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	2101      	movs	r1, #1
 800465a:	fa01 f303 	lsl.w	r3, r1, r3
 800465e:	b25b      	sxtb	r3, r3
 8004660:	43db      	mvns	r3, r3
 8004662:	b25b      	sxtb	r3, r3
 8004664:	4013      	ands	r3, r2
 8004666:	b259      	sxtb	r1, r3
 8004668:	79fa      	ldrb	r2, [r7, #7]
 800466a:	4603      	mov	r3, r0
 800466c:	01db      	lsls	r3, r3, #7
 800466e:	4413      	add	r3, r2
 8004670:	b2c9      	uxtb	r1, r1
 8004672:	4a05      	ldr	r2, [pc, #20]	; (8004688 <ssd1306_DrawPixel+0xbc>)
 8004674:	54d1      	strb	r1, [r2, r3]
 8004676:	e000      	b.n	800467a <ssd1306_DrawPixel+0xae>
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	20000c2c 	.word	0x20000c2c
 8004688:	2000082c 	.word	0x2000082c

0800468c <ssd1306_WriteChar>:
 800468c:	b590      	push	{r4, r7, lr}
 800468e:	b089      	sub	sp, #36	; 0x24
 8004690:	af00      	add	r7, sp, #0
 8004692:	4604      	mov	r4, r0
 8004694:	1d38      	adds	r0, r7, #4
 8004696:	e880 0006 	stmia.w	r0, {r1, r2}
 800469a:	461a      	mov	r2, r3
 800469c:	4623      	mov	r3, r4
 800469e:	73fb      	strb	r3, [r7, #15]
 80046a0:	4613      	mov	r3, r2
 80046a2:	73bb      	strb	r3, [r7, #14]
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
 80046a6:	2b1f      	cmp	r3, #31
 80046a8:	d902      	bls.n	80046b0 <ssd1306_WriteChar+0x24>
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	2b7e      	cmp	r3, #126	; 0x7e
 80046ae:	d901      	bls.n	80046b4 <ssd1306_WriteChar+0x28>
 80046b0:	2300      	movs	r3, #0
 80046b2:	e06d      	b.n	8004790 <ssd1306_WriteChar+0x104>
 80046b4:	4b38      	ldr	r3, [pc, #224]	; (8004798 <ssd1306_WriteChar+0x10c>)
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	793b      	ldrb	r3, [r7, #4]
 80046bc:	4413      	add	r3, r2
 80046be:	2b80      	cmp	r3, #128	; 0x80
 80046c0:	dc06      	bgt.n	80046d0 <ssd1306_WriteChar+0x44>
 80046c2:	4b35      	ldr	r3, [pc, #212]	; (8004798 <ssd1306_WriteChar+0x10c>)
 80046c4:	885b      	ldrh	r3, [r3, #2]
 80046c6:	461a      	mov	r2, r3
 80046c8:	797b      	ldrb	r3, [r7, #5]
 80046ca:	4413      	add	r3, r2
 80046cc:	2b40      	cmp	r3, #64	; 0x40
 80046ce:	dd01      	ble.n	80046d4 <ssd1306_WriteChar+0x48>
 80046d0:	2300      	movs	r3, #0
 80046d2:	e05d      	b.n	8004790 <ssd1306_WriteChar+0x104>
 80046d4:	2300      	movs	r3, #0
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	e04c      	b.n	8004774 <ssd1306_WriteChar+0xe8>
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	3b20      	subs	r3, #32
 80046e0:	7979      	ldrb	r1, [r7, #5]
 80046e2:	fb01 f303 	mul.w	r3, r1, r3
 80046e6:	4619      	mov	r1, r3
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	440b      	add	r3, r1
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	4413      	add	r3, r2
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	2300      	movs	r3, #0
 80046f6:	61bb      	str	r3, [r7, #24]
 80046f8:	e034      	b.n	8004764 <ssd1306_WriteChar+0xd8>
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d012      	beq.n	8004730 <ssd1306_WriteChar+0xa4>
 800470a:	4b23      	ldr	r3, [pc, #140]	; (8004798 <ssd1306_WriteChar+0x10c>)
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	b2da      	uxtb	r2, r3
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	4413      	add	r3, r2
 8004716:	b2d8      	uxtb	r0, r3
 8004718:	4b1f      	ldr	r3, [pc, #124]	; (8004798 <ssd1306_WriteChar+0x10c>)
 800471a:	885b      	ldrh	r3, [r3, #2]
 800471c:	b2da      	uxtb	r2, r3
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	4413      	add	r3, r2
 8004724:	b2db      	uxtb	r3, r3
 8004726:	7bba      	ldrb	r2, [r7, #14]
 8004728:	4619      	mov	r1, r3
 800472a:	f7ff ff4f 	bl	80045cc <ssd1306_DrawPixel>
 800472e:	e016      	b.n	800475e <ssd1306_WriteChar+0xd2>
 8004730:	4b19      	ldr	r3, [pc, #100]	; (8004798 <ssd1306_WriteChar+0x10c>)
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	b2da      	uxtb	r2, r3
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	4413      	add	r3, r2
 800473c:	b2d8      	uxtb	r0, r3
 800473e:	4b16      	ldr	r3, [pc, #88]	; (8004798 <ssd1306_WriteChar+0x10c>)
 8004740:	885b      	ldrh	r3, [r3, #2]
 8004742:	b2da      	uxtb	r2, r3
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	4413      	add	r3, r2
 800474a:	b2d9      	uxtb	r1, r3
 800474c:	7bbb      	ldrb	r3, [r7, #14]
 800474e:	2b00      	cmp	r3, #0
 8004750:	bf0c      	ite	eq
 8004752:	2301      	moveq	r3, #1
 8004754:	2300      	movne	r3, #0
 8004756:	b2db      	uxtb	r3, r3
 8004758:	461a      	mov	r2, r3
 800475a:	f7ff ff37 	bl	80045cc <ssd1306_DrawPixel>
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	3301      	adds	r3, #1
 8004762:	61bb      	str	r3, [r7, #24]
 8004764:	793b      	ldrb	r3, [r7, #4]
 8004766:	461a      	mov	r2, r3
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	4293      	cmp	r3, r2
 800476c:	d3c5      	bcc.n	80046fa <ssd1306_WriteChar+0x6e>
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	3301      	adds	r3, #1
 8004772:	61fb      	str	r3, [r7, #28]
 8004774:	797b      	ldrb	r3, [r7, #5]
 8004776:	461a      	mov	r2, r3
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	4293      	cmp	r3, r2
 800477c:	d3ad      	bcc.n	80046da <ssd1306_WriteChar+0x4e>
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <ssd1306_WriteChar+0x10c>)
 8004780:	881a      	ldrh	r2, [r3, #0]
 8004782:	793b      	ldrb	r3, [r7, #4]
 8004784:	b29b      	uxth	r3, r3
 8004786:	4413      	add	r3, r2
 8004788:	b29a      	uxth	r2, r3
 800478a:	4b03      	ldr	r3, [pc, #12]	; (8004798 <ssd1306_WriteChar+0x10c>)
 800478c:	801a      	strh	r2, [r3, #0]
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	4618      	mov	r0, r3
 8004792:	3724      	adds	r7, #36	; 0x24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd90      	pop	{r4, r7, pc}
 8004798:	20000c2c 	.word	0x20000c2c

0800479c <ssd1306_WriteString>:
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	1d38      	adds	r0, r7, #4
 80047a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80047aa:	70fb      	strb	r3, [r7, #3]
 80047ac:	e012      	b.n	80047d4 <ssd1306_WriteString+0x38>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	7818      	ldrb	r0, [r3, #0]
 80047b2:	78fb      	ldrb	r3, [r7, #3]
 80047b4:	1d3a      	adds	r2, r7, #4
 80047b6:	ca06      	ldmia	r2, {r1, r2}
 80047b8:	f7ff ff68 	bl	800468c <ssd1306_WriteChar>
 80047bc:	4603      	mov	r3, r0
 80047be:	461a      	mov	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d002      	beq.n	80047ce <ssd1306_WriteString+0x32>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	e008      	b.n	80047e0 <ssd1306_WriteString+0x44>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3301      	adds	r3, #1
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e8      	bne.n	80047ae <ssd1306_WriteString+0x12>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <ssd1306_SetCursor>:
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	460a      	mov	r2, r1
 80047f2:	71fb      	strb	r3, [r7, #7]
 80047f4:	4613      	mov	r3, r2
 80047f6:	71bb      	strb	r3, [r7, #6]
 80047f8:	79fb      	ldrb	r3, [r7, #7]
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	4b05      	ldr	r3, [pc, #20]	; (8004814 <ssd1306_SetCursor+0x2c>)
 80047fe:	801a      	strh	r2, [r3, #0]
 8004800:	79bb      	ldrb	r3, [r7, #6]
 8004802:	b29a      	uxth	r2, r3
 8004804:	4b03      	ldr	r3, [pc, #12]	; (8004814 <ssd1306_SetCursor+0x2c>)
 8004806:	805a      	strh	r2, [r3, #2]
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	20000c2c 	.word	0x20000c2c

08004818 <ssd1306_SetContrast>:
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	71fb      	strb	r3, [r7, #7]
 8004822:	2381      	movs	r3, #129	; 0x81
 8004824:	73fb      	strb	r3, [r7, #15]
 8004826:	7bfb      	ldrb	r3, [r7, #15]
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff fde7 	bl	80043fc <ssd1306_WriteCommand>
 800482e:	79fb      	ldrb	r3, [r7, #7]
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff fde3 	bl	80043fc <ssd1306_WriteCommand>
 8004836:	bf00      	nop
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <ssd1306_SetDisplayOn>:
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	4603      	mov	r3, r0
 8004848:	71fb      	strb	r3, [r7, #7]
 800484a:	79fb      	ldrb	r3, [r7, #7]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <ssd1306_SetDisplayOn+0x1c>
 8004850:	23af      	movs	r3, #175	; 0xaf
 8004852:	73fb      	strb	r3, [r7, #15]
 8004854:	4b08      	ldr	r3, [pc, #32]	; (8004878 <ssd1306_SetDisplayOn+0x38>)
 8004856:	2201      	movs	r2, #1
 8004858:	719a      	strb	r2, [r3, #6]
 800485a:	e004      	b.n	8004866 <ssd1306_SetDisplayOn+0x26>
 800485c:	23ae      	movs	r3, #174	; 0xae
 800485e:	73fb      	strb	r3, [r7, #15]
 8004860:	4b05      	ldr	r3, [pc, #20]	; (8004878 <ssd1306_SetDisplayOn+0x38>)
 8004862:	2200      	movs	r2, #0
 8004864:	719a      	strb	r2, [r3, #6]
 8004866:	7bfb      	ldrb	r3, [r7, #15]
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff fdc7 	bl	80043fc <ssd1306_WriteCommand>
 800486e:	bf00      	nop
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000c2c 	.word	0x20000c2c

0800487c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004882:	2300      	movs	r3, #0
 8004884:	607b      	str	r3, [r7, #4]
 8004886:	4b12      	ldr	r3, [pc, #72]	; (80048d0 <HAL_MspInit+0x54>)
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	4a11      	ldr	r2, [pc, #68]	; (80048d0 <HAL_MspInit+0x54>)
 800488c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004890:	6453      	str	r3, [r2, #68]	; 0x44
 8004892:	4b0f      	ldr	r3, [pc, #60]	; (80048d0 <HAL_MspInit+0x54>)
 8004894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800489a:	607b      	str	r3, [r7, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800489e:	2300      	movs	r3, #0
 80048a0:	603b      	str	r3, [r7, #0]
 80048a2:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <HAL_MspInit+0x54>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	4a0a      	ldr	r2, [pc, #40]	; (80048d0 <HAL_MspInit+0x54>)
 80048a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ac:	6413      	str	r3, [r2, #64]	; 0x40
 80048ae:	4b08      	ldr	r3, [pc, #32]	; (80048d0 <HAL_MspInit+0x54>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80048ba:	2200      	movs	r2, #0
 80048bc:	210f      	movs	r1, #15
 80048be:	f06f 0001 	mvn.w	r0, #1
 80048c2:	f000 ffc8 	bl	8005856 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048c6:	bf00      	nop
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40023800 	.word	0x40023800

080048d4 <HAL_InitTick>:
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08c      	sub	sp, #48	; 0x30
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	2300      	movs	r3, #0
 80048de:	62bb      	str	r3, [r7, #40]	; 0x28
 80048e0:	2300      	movs	r3, #0
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
 80048e4:	2300      	movs	r3, #0
 80048e6:	60bb      	str	r3, [r7, #8]
 80048e8:	4b2e      	ldr	r3, [pc, #184]	; (80049a4 <HAL_InitTick+0xd0>)
 80048ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ec:	4a2d      	ldr	r2, [pc, #180]	; (80049a4 <HAL_InitTick+0xd0>)
 80048ee:	f043 0301 	orr.w	r3, r3, #1
 80048f2:	6453      	str	r3, [r2, #68]	; 0x44
 80048f4:	4b2b      	ldr	r3, [pc, #172]	; (80049a4 <HAL_InitTick+0xd0>)
 80048f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	60bb      	str	r3, [r7, #8]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f107 020c 	add.w	r2, r7, #12
 8004904:	f107 0310 	add.w	r3, r7, #16
 8004908:	4611      	mov	r1, r2
 800490a:	4618      	mov	r0, r3
 800490c:	f005 f87e 	bl	8009a0c <HAL_RCC_GetClockConfig>
 8004910:	f005 f868 	bl	80099e4 <HAL_RCC_GetPCLK2Freq>
 8004914:	62b8      	str	r0, [r7, #40]	; 0x28
 8004916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004918:	4a23      	ldr	r2, [pc, #140]	; (80049a8 <HAL_InitTick+0xd4>)
 800491a:	fba2 2303 	umull	r2, r3, r2, r3
 800491e:	0c9b      	lsrs	r3, r3, #18
 8004920:	3b01      	subs	r3, #1
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
 8004924:	4b21      	ldr	r3, [pc, #132]	; (80049ac <HAL_InitTick+0xd8>)
 8004926:	4a22      	ldr	r2, [pc, #136]	; (80049b0 <HAL_InitTick+0xdc>)
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	4b20      	ldr	r3, [pc, #128]	; (80049ac <HAL_InitTick+0xd8>)
 800492c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004930:	60da      	str	r2, [r3, #12]
 8004932:	4a1e      	ldr	r2, [pc, #120]	; (80049ac <HAL_InitTick+0xd8>)
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	6053      	str	r3, [r2, #4]
 8004938:	4b1c      	ldr	r3, [pc, #112]	; (80049ac <HAL_InitTick+0xd8>)
 800493a:	2200      	movs	r2, #0
 800493c:	611a      	str	r2, [r3, #16]
 800493e:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <HAL_InitTick+0xd8>)
 8004940:	2200      	movs	r2, #0
 8004942:	609a      	str	r2, [r3, #8]
 8004944:	4b19      	ldr	r3, [pc, #100]	; (80049ac <HAL_InitTick+0xd8>)
 8004946:	2200      	movs	r2, #0
 8004948:	619a      	str	r2, [r3, #24]
 800494a:	4818      	ldr	r0, [pc, #96]	; (80049ac <HAL_InitTick+0xd8>)
 800494c:	f005 f919 	bl	8009b82 <HAL_TIM_Base_Init>
 8004950:	4603      	mov	r3, r0
 8004952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800495a:	2b00      	cmp	r3, #0
 800495c:	d11b      	bne.n	8004996 <HAL_InitTick+0xc2>
 800495e:	4813      	ldr	r0, [pc, #76]	; (80049ac <HAL_InitTick+0xd8>)
 8004960:	f005 f95e 	bl	8009c20 <HAL_TIM_Base_Start_IT>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800496a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800496e:	2b00      	cmp	r3, #0
 8004970:	d111      	bne.n	8004996 <HAL_InitTick+0xc2>
 8004972:	2019      	movs	r0, #25
 8004974:	f000 ff8b 	bl	800588e <HAL_NVIC_EnableIRQ>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b0f      	cmp	r3, #15
 800497c:	d808      	bhi.n	8004990 <HAL_InitTick+0xbc>
 800497e:	2200      	movs	r2, #0
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	2019      	movs	r0, #25
 8004984:	f000 ff67 	bl	8005856 <HAL_NVIC_SetPriority>
 8004988:	4a0a      	ldr	r2, [pc, #40]	; (80049b4 <HAL_InitTick+0xe0>)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6013      	str	r3, [r2, #0]
 800498e:	e002      	b.n	8004996 <HAL_InitTick+0xc2>
 8004990:	2301      	movs	r3, #1
 8004992:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004996:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800499a:	4618      	mov	r0, r3
 800499c:	3730      	adds	r7, #48	; 0x30
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	40023800 	.word	0x40023800
 80049a8:	431bde83 	.word	0x431bde83
 80049ac:	20000c34 	.word	0x20000c34
 80049b0:	40010000 	.word	0x40010000
 80049b4:	20000018 	.word	0x20000018

080049b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049bc:	e7fe      	b.n	80049bc <NMI_Handler+0x4>

080049be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049be:	b480      	push	{r7}
 80049c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049c2:	e7fe      	b.n	80049c2 <HardFault_Handler+0x4>

080049c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049c8:	e7fe      	b.n	80049c8 <MemManage_Handler+0x4>

080049ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049ca:	b480      	push	{r7}
 80049cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049ce:	e7fe      	b.n	80049ce <BusFault_Handler+0x4>

080049d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049d4:	e7fe      	b.n	80049d4 <UsageFault_Handler+0x4>

080049d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049d6:	b480      	push	{r7}
 80049d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049da:	bf00      	nop
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_IN0_Pin);
 80049e8:	2008      	movs	r0, #8
 80049ea:	f001 fca3 	bl	8006334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80049ee:	bf00      	nop
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_IN1_Pin);
 80049f6:	2010      	movs	r0, #16
 80049f8:	f001 fc9c 	bl	8006334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80049fc:	bf00      	nop
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a04:	4802      	ldr	r0, [pc, #8]	; (8004a10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004a06:	f005 fa77 	bl	8009ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004a0a:	bf00      	nop
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000c34 	.word	0x20000c34

08004a14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004a18:	4802      	ldr	r0, [pc, #8]	; (8004a24 <TIM4_IRQHandler+0x10>)
 8004a1a:	f005 fa6d 	bl	8009ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	20000c80 	.word	0x20000c80

08004a28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_OUT_Pin);
 8004a2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004a30:	f001 fc80 	bl	8006334 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_IN_Pin);
 8004a34:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004a38:	f001 fc7c 	bl	8006334 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TEMP_IRQ_Pin);
 8004a3c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004a40:	f001 fc78 	bl	8006334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004a44:	bf00      	nop
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004a4c:	4802      	ldr	r0, [pc, #8]	; (8004a58 <DMA2_Stream0_IRQHandler+0x10>)
 8004a4e:	f001 f837 	bl	8005ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004a52:	bf00      	nop
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20000348 	.word	0x20000348

08004a5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004a60:	4802      	ldr	r0, [pc, #8]	; (8004a6c <OTG_FS_IRQHandler+0x10>)
 8004a62:	f003 fa0e 	bl	8007e82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004a66:	bf00      	nop
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	2000570c 	.word	0x2000570c

08004a70 <_getpid>:
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	2301      	movs	r3, #1
 8004a76:	4618      	mov	r0, r3
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <_kill>:
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
 8004a8a:	f00b fcbf 	bl	801040c <__errno>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2216      	movs	r2, #22
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	f04f 33ff 	mov.w	r3, #4294967295
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <_exit>:
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff ffe7 	bl	8004a80 <_kill>
 8004ab2:	e7fe      	b.n	8004ab2 <_exit+0x12>

08004ab4 <_read>:
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	e00a      	b.n	8004adc <_read+0x28>
 8004ac6:	f3af 8000 	nop.w
 8004aca:	4601      	mov	r1, r0
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	60ba      	str	r2, [r7, #8]
 8004ad2:	b2ca      	uxtb	r2, r1
 8004ad4:	701a      	strb	r2, [r3, #0]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	dbf0      	blt.n	8004ac6 <_read+0x12>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <_close>:
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	f04f 33ff 	mov.w	r3, #4294967295
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <_fstat>:
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b16:	605a      	str	r2, [r3, #4]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <_isatty>:
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	2301      	movs	r3, #1
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <_lseek>:
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
 8004b48:	2300      	movs	r3, #0
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
	...

08004b58 <_sbrk>:
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	4a14      	ldr	r2, [pc, #80]	; (8004bb4 <_sbrk+0x5c>)
 8004b62:	4b15      	ldr	r3, [pc, #84]	; (8004bb8 <_sbrk+0x60>)
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	613b      	str	r3, [r7, #16]
 8004b6c:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <_sbrk+0x64>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d102      	bne.n	8004b7a <_sbrk+0x22>
 8004b74:	4b11      	ldr	r3, [pc, #68]	; (8004bbc <_sbrk+0x64>)
 8004b76:	4a12      	ldr	r2, [pc, #72]	; (8004bc0 <_sbrk+0x68>)
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <_sbrk+0x64>)
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4413      	add	r3, r2
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d207      	bcs.n	8004b98 <_sbrk+0x40>
 8004b88:	f00b fc40 	bl	801040c <__errno>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	220c      	movs	r2, #12
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	f04f 33ff 	mov.w	r3, #4294967295
 8004b96:	e009      	b.n	8004bac <_sbrk+0x54>
 8004b98:	4b08      	ldr	r3, [pc, #32]	; (8004bbc <_sbrk+0x64>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	4b07      	ldr	r3, [pc, #28]	; (8004bbc <_sbrk+0x64>)
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	4a05      	ldr	r2, [pc, #20]	; (8004bbc <_sbrk+0x64>)
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4618      	mov	r0, r3
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20010000 	.word	0x20010000
 8004bb8:	00000400 	.word	0x00000400
 8004bbc:	20000c7c 	.word	0x20000c7c
 8004bc0:	20005e48 	.word	0x20005e48

08004bc4 <SystemInit>:
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <SystemInit+0x20>)
 8004bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bce:	4a05      	ldr	r2, [pc, #20]	; (8004be4 <SystemInit+0x20>)
 8004bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004bd8:	bf00      	nop
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	e000ed00 	.word	0xe000ed00

08004be8 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08e      	sub	sp, #56	; 0x38
 8004bec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig =
 8004bee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	605a      	str	r2, [r3, #4]
 8004bf8:	609a      	str	r2, [r3, #8]
 8004bfa:	60da      	str	r2, [r3, #12]
	{ 0 };
	TIM_MasterConfigTypeDef sMasterConfig =
 8004bfc:	f107 0320 	add.w	r3, r7, #32
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	605a      	str	r2, [r3, #4]
	{ 0 };
	TIM_OC_InitTypeDef sConfigOC =
 8004c06:	1d3b      	adds	r3, r7, #4
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	605a      	str	r2, [r3, #4]
 8004c0e:	609a      	str	r2, [r3, #8]
 8004c10:	60da      	str	r2, [r3, #12]
 8004c12:	611a      	str	r2, [r3, #16]
 8004c14:	615a      	str	r2, [r3, #20]
 8004c16:	619a      	str	r2, [r3, #24]
	{ 0 };

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8004c18:	4b33      	ldr	r3, [pc, #204]	; (8004ce8 <MX_TIM4_Init+0x100>)
 8004c1a:	4a34      	ldr	r2, [pc, #208]	; (8004cec <MX_TIM4_Init+0x104>)
 8004c1c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 840 - 1;
 8004c1e:	4b32      	ldr	r3, [pc, #200]	; (8004ce8 <MX_TIM4_Init+0x100>)
 8004c20:	f240 3247 	movw	r2, #839	; 0x347
 8004c24:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c26:	4b30      	ldr	r3, [pc, #192]	; (8004ce8 <MX_TIM4_Init+0x100>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 100 - 1;
 8004c2c:	4b2e      	ldr	r3, [pc, #184]	; (8004ce8 <MX_TIM4_Init+0x100>)
 8004c2e:	2263      	movs	r2, #99	; 0x63
 8004c30:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c32:	4b2d      	ldr	r3, [pc, #180]	; (8004ce8 <MX_TIM4_Init+0x100>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c38:	4b2b      	ldr	r3, [pc, #172]	; (8004ce8 <MX_TIM4_Init+0x100>)
 8004c3a:	2280      	movs	r2, #128	; 0x80
 8004c3c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004c3e:	482a      	ldr	r0, [pc, #168]	; (8004ce8 <MX_TIM4_Init+0x100>)
 8004c40:	f004 ff9f 	bl	8009b82 <HAL_TIM_Base_Init>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <MX_TIM4_Init+0x66>
	{
		Error_Handler();
 8004c4a:	f7fe f805 	bl	8002c58 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c52:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004c54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4823      	ldr	r0, [pc, #140]	; (8004ce8 <MX_TIM4_Init+0x100>)
 8004c5c:	f005 fb16 	bl	800a28c <HAL_TIM_ConfigClockSource>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <MX_TIM4_Init+0x82>
	{
		Error_Handler();
 8004c66:	f7fd fff7 	bl	8002c58 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004c6a:	481f      	ldr	r0, [pc, #124]	; (8004ce8 <MX_TIM4_Init+0x100>)
 8004c6c:	f005 f83a 	bl	8009ce4 <HAL_TIM_PWM_Init>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <MX_TIM4_Init+0x92>
	{
		Error_Handler();
 8004c76:	f7fd ffef 	bl	8002c58 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004c7a:	2320      	movs	r3, #32
 8004c7c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004c82:	f107 0320 	add.w	r3, r7, #32
 8004c86:	4619      	mov	r1, r3
 8004c88:	4817      	ldr	r0, [pc, #92]	; (8004ce8 <MX_TIM4_Init+0x100>)
 8004c8a:	f005 febb 	bl	800aa04 <HAL_TIMEx_MasterConfigSynchronization>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <MX_TIM4_Init+0xb0>
	{
		Error_Handler();
 8004c94:	f7fd ffe0 	bl	8002c58 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c98:	2360      	movs	r3, #96	; 0x60
 8004c9a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 50;
 8004c9c:	2332      	movs	r3, #50	; 0x32
 8004c9e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004ca8:	1d3b      	adds	r3, r7, #4
 8004caa:	2208      	movs	r2, #8
 8004cac:	4619      	mov	r1, r3
 8004cae:	480e      	ldr	r0, [pc, #56]	; (8004ce8 <MX_TIM4_Init+0x100>)
 8004cb0:	f005 fa2a 	bl	800a108 <HAL_TIM_PWM_ConfigChannel>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <MX_TIM4_Init+0xd6>
	{
		Error_Handler();
 8004cba:	f7fd ffcd 	bl	8002c58 <Error_Handler>
	}
	sConfigOC.Pulse = 25;
 8004cbe:	2319      	movs	r3, #25
 8004cc0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004cc2:	1d3b      	adds	r3, r7, #4
 8004cc4:	220c      	movs	r2, #12
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4807      	ldr	r0, [pc, #28]	; (8004ce8 <MX_TIM4_Init+0x100>)
 8004cca:	f005 fa1d 	bl	800a108 <HAL_TIM_PWM_ConfigChannel>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <MX_TIM4_Init+0xf0>
	{
		Error_Handler();
 8004cd4:	f7fd ffc0 	bl	8002c58 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8004cd8:	4803      	ldr	r0, [pc, #12]	; (8004ce8 <MX_TIM4_Init+0x100>)
 8004cda:	f000 f831 	bl	8004d40 <HAL_TIM_MspPostInit>

}
 8004cde:	bf00      	nop
 8004ce0:	3738      	adds	r7, #56	; 0x38
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000c80 	.word	0x20000c80
 8004cec:	40000800 	.word	0x40000800

08004cf0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *tim_baseHandle)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]

	if (tim_baseHandle->Instance == TIM4)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a0e      	ldr	r2, [pc, #56]	; (8004d38 <HAL_TIM_Base_MspInit+0x48>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d115      	bne.n	8004d2e <HAL_TIM_Base_MspInit+0x3e>
	{
		/* USER CODE BEGIN TIM4_MspInit 0 */

		/* USER CODE END TIM4_MspInit 0 */
		/* TIM4 clock enable */
		__HAL_RCC_TIM4_CLK_ENABLE();
 8004d02:	2300      	movs	r3, #0
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	4b0d      	ldr	r3, [pc, #52]	; (8004d3c <HAL_TIM_Base_MspInit+0x4c>)
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	4a0c      	ldr	r2, [pc, #48]	; (8004d3c <HAL_TIM_Base_MspInit+0x4c>)
 8004d0c:	f043 0304 	orr.w	r3, r3, #4
 8004d10:	6413      	str	r3, [r2, #64]	; 0x40
 8004d12:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <HAL_TIM_Base_MspInit+0x4c>)
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]

		/* TIM4 interrupt Init */
		HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8004d1e:	2200      	movs	r2, #0
 8004d20:	2105      	movs	r1, #5
 8004d22:	201e      	movs	r0, #30
 8004d24:	f000 fd97 	bl	8005856 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004d28:	201e      	movs	r0, #30
 8004d2a:	f000 fdb0 	bl	800588e <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM4_MspInit 1 */

		/* USER CODE END TIM4_MspInit 1 */
	}
}
 8004d2e:	bf00      	nop
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	40000800 	.word	0x40000800
 8004d3c:	40023800 	.word	0x40023800

08004d40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *timHandle)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 8004d48:	f107 030c 	add.w	r3, r7, #12
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	605a      	str	r2, [r3, #4]
 8004d52:	609a      	str	r2, [r3, #8]
 8004d54:	60da      	str	r2, [r3, #12]
 8004d56:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (timHandle->Instance == TIM4)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a12      	ldr	r2, [pc, #72]	; (8004da8 <HAL_TIM_MspPostInit+0x68>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d11e      	bne.n	8004da0 <HAL_TIM_MspPostInit+0x60>
	{
		/* USER CODE BEGIN TIM4_MspPostInit 0 */

		/* USER CODE END TIM4_MspPostInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8004d62:	2300      	movs	r3, #0
 8004d64:	60bb      	str	r3, [r7, #8]
 8004d66:	4b11      	ldr	r3, [pc, #68]	; (8004dac <HAL_TIM_MspPostInit+0x6c>)
 8004d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6a:	4a10      	ldr	r2, [pc, #64]	; (8004dac <HAL_TIM_MspPostInit+0x6c>)
 8004d6c:	f043 0302 	orr.w	r3, r3, #2
 8004d70:	6313      	str	r3, [r2, #48]	; 0x30
 8004d72:	4b0e      	ldr	r3, [pc, #56]	; (8004dac <HAL_TIM_MspPostInit+0x6c>)
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	60bb      	str	r3, [r7, #8]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
		/**TIM4 GPIO Configuration
		 PB8     ------> TIM4_CH3
		 PB9     ------> TIM4_CH4
		 */
		GPIO_InitStruct.Pin = PWM_OUT0_Pin | PWM_OUT1_Pin;
 8004d7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004d82:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d84:	2302      	movs	r3, #2
 8004d86:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004d90:	2302      	movs	r3, #2
 8004d92:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d94:	f107 030c 	add.w	r3, r7, #12
 8004d98:	4619      	mov	r1, r3
 8004d9a:	4805      	ldr	r0, [pc, #20]	; (8004db0 <HAL_TIM_MspPostInit+0x70>)
 8004d9c:	f001 f8fa 	bl	8005f94 <HAL_GPIO_Init>
		/* USER CODE BEGIN TIM4_MspPostInit 1 */

		/* USER CODE END TIM4_MspPostInit 1 */
	}

}
 8004da0:	bf00      	nop
 8004da2:	3720      	adds	r7, #32
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40000800 	.word	0x40000800
 8004dac:	40023800 	.word	0x40023800
 8004db0:	40020400 	.word	0x40020400

08004db4 <Reset_Handler>:
 8004db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004dec <LoopFillZerobss+0x12>
 8004db8:	480d      	ldr	r0, [pc, #52]	; (8004df0 <LoopFillZerobss+0x16>)
 8004dba:	490e      	ldr	r1, [pc, #56]	; (8004df4 <LoopFillZerobss+0x1a>)
 8004dbc:	4a0e      	ldr	r2, [pc, #56]	; (8004df8 <LoopFillZerobss+0x1e>)
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e002      	b.n	8004dc8 <LoopCopyDataInit>

08004dc2 <CopyDataInit>:
 8004dc2:	58d4      	ldr	r4, [r2, r3]
 8004dc4:	50c4      	str	r4, [r0, r3]
 8004dc6:	3304      	adds	r3, #4

08004dc8 <LoopCopyDataInit>:
 8004dc8:	18c4      	adds	r4, r0, r3
 8004dca:	428c      	cmp	r4, r1
 8004dcc:	d3f9      	bcc.n	8004dc2 <CopyDataInit>
 8004dce:	4a0b      	ldr	r2, [pc, #44]	; (8004dfc <LoopFillZerobss+0x22>)
 8004dd0:	4c0b      	ldr	r4, [pc, #44]	; (8004e00 <LoopFillZerobss+0x26>)
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e001      	b.n	8004dda <LoopFillZerobss>

08004dd6 <FillZerobss>:
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	3204      	adds	r2, #4

08004dda <LoopFillZerobss>:
 8004dda:	42a2      	cmp	r2, r4
 8004ddc:	d3fb      	bcc.n	8004dd6 <FillZerobss>
 8004dde:	f7ff fef1 	bl	8004bc4 <SystemInit>
 8004de2:	f00b fc0f 	bl	8010604 <__libc_init_array>
 8004de6:	f7fd fe39 	bl	8002a5c <main>
 8004dea:	4770      	bx	lr
 8004dec:	20010000 	.word	0x20010000
 8004df0:	20000000 	.word	0x20000000
 8004df4:	200002e4 	.word	0x200002e4
 8004df8:	0801513c 	.word	0x0801513c
 8004dfc:	200002e4 	.word	0x200002e4
 8004e00:	20005e48 	.word	0x20005e48

08004e04 <ADC_IRQHandler>:
 8004e04:	e7fe      	b.n	8004e04 <ADC_IRQHandler>
	...

08004e08 <HAL_Init>:
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	4b0e      	ldr	r3, [pc, #56]	; (8004e48 <HAL_Init+0x40>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a0d      	ldr	r2, [pc, #52]	; (8004e48 <HAL_Init+0x40>)
 8004e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <HAL_Init+0x40>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a0a      	ldr	r2, [pc, #40]	; (8004e48 <HAL_Init+0x40>)
 8004e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	4b08      	ldr	r3, [pc, #32]	; (8004e48 <HAL_Init+0x40>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a07      	ldr	r2, [pc, #28]	; (8004e48 <HAL_Init+0x40>)
 8004e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	2003      	movs	r0, #3
 8004e32:	f000 fd05 	bl	8005840 <HAL_NVIC_SetPriorityGrouping>
 8004e36:	200f      	movs	r0, #15
 8004e38:	f7ff fd4c 	bl	80048d4 <HAL_InitTick>
 8004e3c:	f7ff fd1e 	bl	800487c <HAL_MspInit>
 8004e40:	2300      	movs	r3, #0
 8004e42:	4618      	mov	r0, r3
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40023c00 	.word	0x40023c00

08004e4c <HAL_IncTick>:
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <HAL_IncTick+0x20>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	461a      	mov	r2, r3
 8004e56:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <HAL_IncTick+0x24>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	4a04      	ldr	r2, [pc, #16]	; (8004e70 <HAL_IncTick+0x24>)
 8004e5e:	6013      	str	r3, [r2, #0]
 8004e60:	bf00      	nop
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	2000001c 	.word	0x2000001c
 8004e70:	20000cc8 	.word	0x20000cc8

08004e74 <HAL_GetTick>:
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	4b03      	ldr	r3, [pc, #12]	; (8004e88 <HAL_GetTick+0x14>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000cc8 	.word	0x20000cc8

08004e8c <HAL_Delay>:
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	f7ff ffee 	bl	8004e74 <HAL_GetTick>
 8004e98:	60b8      	str	r0, [r7, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea4:	d005      	beq.n	8004eb2 <HAL_Delay+0x26>
 8004ea6:	4b0a      	ldr	r3, [pc, #40]	; (8004ed0 <HAL_Delay+0x44>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4413      	add	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	bf00      	nop
 8004eb4:	f7ff ffde 	bl	8004e74 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d8f7      	bhi.n	8004eb4 <HAL_Delay+0x28>
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	2000001c 	.word	0x2000001c

08004ed4 <HAL_ADC_Init>:
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	2300      	movs	r3, #0
 8004ede:	73fb      	strb	r3, [r7, #15]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_ADC_Init+0x16>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e033      	b.n	8004f52 <HAL_ADC_Init+0x7e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d109      	bne.n	8004f06 <HAL_ADC_Init+0x32>
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7fc f8d2 	bl	800109c <HAL_ADC_MspInit>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	645a      	str	r2, [r3, #68]	; 0x44
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f003 0310 	and.w	r3, r3, #16
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d118      	bne.n	8004f44 <HAL_ADC_Init+0x70>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004f1a:	f023 0302 	bic.w	r3, r3, #2
 8004f1e:	f043 0202 	orr.w	r2, r3, #2
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	641a      	str	r2, [r3, #64]	; 0x40
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 fa48 	bl	80053bc <ADC_Init>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	645a      	str	r2, [r3, #68]	; 0x44
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	f023 0303 	bic.w	r3, r3, #3
 8004f3a:	f043 0201 	orr.w	r2, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	641a      	str	r2, [r3, #64]	; 0x40
 8004f42:	e001      	b.n	8004f48 <HAL_ADC_Init+0x74>
 8004f44:	2301      	movs	r3, #1
 8004f46:	73fb      	strb	r3, [r7, #15]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <HAL_ADC_Start_DMA>:
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	2300      	movs	r3, #0
 8004f6a:	613b      	str	r3, [r7, #16]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_ADC_Start_DMA+0x1e>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e0ce      	b.n	8005118 <HAL_ADC_Start_DMA+0x1bc>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d018      	beq.n	8004fc2 <HAL_ADC_Start_DMA+0x66>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	609a      	str	r2, [r3, #8]
 8004fa0:	4b5f      	ldr	r3, [pc, #380]	; (8005120 <HAL_ADC_Start_DMA+0x1c4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a5f      	ldr	r2, [pc, #380]	; (8005124 <HAL_ADC_Start_DMA+0x1c8>)
 8004fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004faa:	0c9a      	lsrs	r2, r3, #18
 8004fac:	4613      	mov	r3, r2
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	4413      	add	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]
 8004fb4:	e002      	b.n	8004fbc <HAL_ADC_Start_DMA+0x60>
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	613b      	str	r3, [r7, #16]
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f9      	bne.n	8004fb6 <HAL_ADC_Start_DMA+0x5a>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fd0:	d107      	bne.n	8004fe2 <HAL_ADC_Start_DMA+0x86>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fe0:	609a      	str	r2, [r3, #8]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	f040 8086 	bne.w	80050fe <HAL_ADC_Start_DMA+0x1a2>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004ffa:	f023 0301 	bic.w	r3, r3, #1
 8004ffe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	641a      	str	r2, [r3, #64]	; 0x40
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005010:	2b00      	cmp	r3, #0
 8005012:	d007      	beq.n	8005024 <HAL_ADC_Start_DMA+0xc8>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800501c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	641a      	str	r2, [r3, #64]	; 0x40
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800502c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005030:	d106      	bne.n	8005040 <HAL_ADC_Start_DMA+0xe4>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	f023 0206 	bic.w	r2, r3, #6
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	645a      	str	r2, [r3, #68]	; 0x44
 800503e:	e002      	b.n	8005046 <HAL_ADC_Start_DMA+0xea>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	645a      	str	r2, [r3, #68]	; 0x44
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800504e:	4b36      	ldr	r3, [pc, #216]	; (8005128 <HAL_ADC_Start_DMA+0x1cc>)
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	4a35      	ldr	r2, [pc, #212]	; (800512c <HAL_ADC_Start_DMA+0x1d0>)
 8005058:	63da      	str	r2, [r3, #60]	; 0x3c
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	4a34      	ldr	r2, [pc, #208]	; (8005130 <HAL_ADC_Start_DMA+0x1d4>)
 8005060:	641a      	str	r2, [r3, #64]	; 0x40
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	4a33      	ldr	r2, [pc, #204]	; (8005134 <HAL_ADC_Start_DMA+0x1d8>)
 8005068:	64da      	str	r2, [r3, #76]	; 0x4c
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005082:	605a      	str	r2, [r3, #4]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005092:	609a      	str	r2, [r3, #8]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	334c      	adds	r3, #76	; 0x4c
 800509e:	4619      	mov	r1, r3
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f000 fcb4 	bl	8005a10 <HAL_DMA_Start_IT>
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f003 031f 	and.w	r3, r3, #31
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10f      	bne.n	80050d4 <HAL_ADC_Start_DMA+0x178>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d129      	bne.n	8005116 <HAL_ADC_Start_DMA+0x1ba>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80050d0:	609a      	str	r2, [r3, #8]
 80050d2:	e020      	b.n	8005116 <HAL_ADC_Start_DMA+0x1ba>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a17      	ldr	r2, [pc, #92]	; (8005138 <HAL_ADC_Start_DMA+0x1dc>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d11b      	bne.n	8005116 <HAL_ADC_Start_DMA+0x1ba>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d114      	bne.n	8005116 <HAL_ADC_Start_DMA+0x1ba>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689a      	ldr	r2, [r3, #8]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80050fa:	609a      	str	r2, [r3, #8]
 80050fc:	e00b      	b.n	8005116 <HAL_ADC_Start_DMA+0x1ba>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	f043 0210 	orr.w	r2, r3, #16
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	641a      	str	r2, [r3, #64]	; 0x40
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510e:	f043 0201 	orr.w	r2, r3, #1
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	645a      	str	r2, [r3, #68]	; 0x44
 8005116:	2300      	movs	r3, #0
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	20000014 	.word	0x20000014
 8005124:	431bde83 	.word	0x431bde83
 8005128:	40012300 	.word	0x40012300
 800512c:	080055b5 	.word	0x080055b5
 8005130:	0800566f 	.word	0x0800566f
 8005134:	0800568b 	.word	0x0800568b
 8005138:	40012000 	.word	0x40012000

0800513c <HAL_ADC_ConvCpltCallback>:
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_ADC_ConvHalfCpltCallback>:
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_ADC_ErrorCallback>:
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_ADC_ConfigChannel>:
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
 8005182:	2300      	movs	r3, #0
 8005184:	60bb      	str	r3, [r7, #8]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_ADC_ConfigChannel+0x1c>
 8005190:	2302      	movs	r3, #2
 8005192:	e105      	b.n	80053a0 <HAL_ADC_ConfigChannel+0x228>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b09      	cmp	r3, #9
 80051a2:	d925      	bls.n	80051f0 <HAL_ADC_ConfigChannel+0x78>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68d9      	ldr	r1, [r3, #12]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	4613      	mov	r3, r2
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	4413      	add	r3, r2
 80051b8:	3b1e      	subs	r3, #30
 80051ba:	2207      	movs	r2, #7
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	43da      	mvns	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	400a      	ands	r2, r1
 80051c8:	60da      	str	r2, [r3, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68d9      	ldr	r1, [r3, #12]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	4618      	mov	r0, r3
 80051dc:	4603      	mov	r3, r0
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	4403      	add	r3, r0
 80051e2:	3b1e      	subs	r3, #30
 80051e4:	409a      	lsls	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	60da      	str	r2, [r3, #12]
 80051ee:	e022      	b.n	8005236 <HAL_ADC_ConfigChannel+0xbe>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6919      	ldr	r1, [r3, #16]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	461a      	mov	r2, r3
 80051fe:	4613      	mov	r3, r2
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	4413      	add	r3, r2
 8005204:	2207      	movs	r2, #7
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	43da      	mvns	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	400a      	ands	r2, r1
 8005212:	611a      	str	r2, [r3, #16]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6919      	ldr	r1, [r3, #16]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	b29b      	uxth	r3, r3
 8005224:	4618      	mov	r0, r3
 8005226:	4603      	mov	r3, r0
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	4403      	add	r3, r0
 800522c:	409a      	lsls	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	611a      	str	r2, [r3, #16]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2b06      	cmp	r3, #6
 800523c:	d824      	bhi.n	8005288 <HAL_ADC_ConfigChannel+0x110>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	4613      	mov	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	3b05      	subs	r3, #5
 8005250:	221f      	movs	r2, #31
 8005252:	fa02 f303 	lsl.w	r3, r2, r3
 8005256:	43da      	mvns	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	400a      	ands	r2, r1
 800525e:	635a      	str	r2, [r3, #52]	; 0x34
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	b29b      	uxth	r3, r3
 800526c:	4618      	mov	r0, r3
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	4613      	mov	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	3b05      	subs	r3, #5
 800527a:	fa00 f203 	lsl.w	r2, r0, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	635a      	str	r2, [r3, #52]	; 0x34
 8005286:	e04c      	b.n	8005322 <HAL_ADC_ConfigChannel+0x1aa>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2b0c      	cmp	r3, #12
 800528e:	d824      	bhi.n	80052da <HAL_ADC_ConfigChannel+0x162>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	3b23      	subs	r3, #35	; 0x23
 80052a2:	221f      	movs	r2, #31
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	43da      	mvns	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	400a      	ands	r2, r1
 80052b0:	631a      	str	r2, [r3, #48]	; 0x30
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	4618      	mov	r0, r3
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	3b23      	subs	r3, #35	; 0x23
 80052cc:	fa00 f203 	lsl.w	r2, r0, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30
 80052d8:	e023      	b.n	8005322 <HAL_ADC_ConfigChannel+0x1aa>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	4613      	mov	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	3b41      	subs	r3, #65	; 0x41
 80052ec:	221f      	movs	r2, #31
 80052ee:	fa02 f303 	lsl.w	r3, r2, r3
 80052f2:	43da      	mvns	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	400a      	ands	r2, r1
 80052fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	b29b      	uxth	r3, r3
 8005308:	4618      	mov	r0, r3
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	4613      	mov	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	3b41      	subs	r3, #65	; 0x41
 8005316:	fa00 f203 	lsl.w	r2, r0, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	62da      	str	r2, [r3, #44]	; 0x2c
 8005322:	4b22      	ldr	r3, [pc, #136]	; (80053ac <HAL_ADC_ConfigChannel+0x234>)
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a21      	ldr	r2, [pc, #132]	; (80053b0 <HAL_ADC_ConfigChannel+0x238>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d109      	bne.n	8005344 <HAL_ADC_ConfigChannel+0x1cc>
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b12      	cmp	r3, #18
 8005336:	d105      	bne.n	8005344 <HAL_ADC_ConfigChannel+0x1cc>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	605a      	str	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a19      	ldr	r2, [pc, #100]	; (80053b0 <HAL_ADC_ConfigChannel+0x238>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d123      	bne.n	8005396 <HAL_ADC_ConfigChannel+0x21e>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b10      	cmp	r3, #16
 8005354:	d003      	beq.n	800535e <HAL_ADC_ConfigChannel+0x1e6>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b11      	cmp	r3, #17
 800535c:	d11b      	bne.n	8005396 <HAL_ADC_ConfigChannel+0x21e>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	605a      	str	r2, [r3, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b10      	cmp	r3, #16
 8005370:	d111      	bne.n	8005396 <HAL_ADC_ConfigChannel+0x21e>
 8005372:	4b10      	ldr	r3, [pc, #64]	; (80053b4 <HAL_ADC_ConfigChannel+0x23c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a10      	ldr	r2, [pc, #64]	; (80053b8 <HAL_ADC_ConfigChannel+0x240>)
 8005378:	fba2 2303 	umull	r2, r3, r2, r3
 800537c:	0c9a      	lsrs	r2, r3, #18
 800537e:	4613      	mov	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	60bb      	str	r3, [r7, #8]
 8005388:	e002      	b.n	8005390 <HAL_ADC_ConfigChannel+0x218>
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	3b01      	subs	r3, #1
 800538e:	60bb      	str	r3, [r7, #8]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1f9      	bne.n	800538a <HAL_ADC_ConfigChannel+0x212>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800539e:	2300      	movs	r3, #0
 80053a0:	4618      	mov	r0, r3
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	40012300 	.word	0x40012300
 80053b0:	40012000 	.word	0x40012000
 80053b4:	20000014 	.word	0x20000014
 80053b8:	431bde83 	.word	0x431bde83

080053bc <ADC_Init>:
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	4b79      	ldr	r3, [pc, #484]	; (80055ac <ADC_Init+0x1f0>)
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	605a      	str	r2, [r3, #4]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	431a      	orrs	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	605a      	str	r2, [r3, #4]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053f0:	605a      	str	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6859      	ldr	r1, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	021a      	lsls	r2, r3, #8
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	605a      	str	r2, [r3, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005414:	605a      	str	r2, [r3, #4]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6859      	ldr	r1, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	605a      	str	r2, [r3, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005436:	609a      	str	r2, [r3, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6899      	ldr	r1, [r3, #8]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	609a      	str	r2, [r3, #8]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544e:	4a58      	ldr	r2, [pc, #352]	; (80055b0 <ADC_Init+0x1f4>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d022      	beq.n	800549a <ADC_Init+0xde>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005462:	609a      	str	r2, [r3, #8]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6899      	ldr	r1, [r3, #8]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	609a      	str	r2, [r3, #8]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005484:	609a      	str	r2, [r3, #8]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6899      	ldr	r1, [r3, #8]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	609a      	str	r2, [r3, #8]
 8005498:	e00f      	b.n	80054ba <ADC_Init+0xfe>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054a8:	609a      	str	r2, [r3, #8]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80054b8:	609a      	str	r2, [r3, #8]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0202 	bic.w	r2, r2, #2
 80054c8:	609a      	str	r2, [r3, #8]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6899      	ldr	r1, [r3, #8]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	7e1b      	ldrb	r3, [r3, #24]
 80054d4:	005a      	lsls	r2, r3, #1
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	609a      	str	r2, [r3, #8]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d01b      	beq.n	8005520 <ADC_Init+0x164>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054f6:	605a      	str	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005506:	605a      	str	r2, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6859      	ldr	r1, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	3b01      	subs	r3, #1
 8005514:	035a      	lsls	r2, r3, #13
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	605a      	str	r2, [r3, #4]
 800551e:	e007      	b.n	8005530 <ADC_Init+0x174>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800552e:	605a      	str	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800553e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	3b01      	subs	r3, #1
 800554c:	051a      	lsls	r2, r3, #20
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	62da      	str	r2, [r3, #44]	; 0x2c
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005564:	609a      	str	r2, [r3, #8]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6899      	ldr	r1, [r3, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005572:	025a      	lsls	r2, r3, #9
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	609a      	str	r2, [r3, #8]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800558a:	609a      	str	r2, [r3, #8]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6899      	ldr	r1, [r3, #8]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	029a      	lsls	r2, r3, #10
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	609a      	str	r2, [r3, #8]
 80055a0:	bf00      	nop
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	40012300 	.word	0x40012300
 80055b0:	0f000001 	.word	0x0f000001

080055b4 <ADC_DMAConvCplt>:
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d13c      	bne.n	8005648 <ADC_DMAConvCplt+0x94>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	641a      	str	r2, [r3, #64]	; 0x40
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d12b      	bne.n	8005640 <ADC_DMAConvCplt+0x8c>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	7e1b      	ldrb	r3, [r3, #24]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d127      	bne.n	8005640 <ADC_DMAConvCplt+0x8c>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d006      	beq.n	800560c <ADC_DMAConvCplt+0x58>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005608:	2b00      	cmp	r3, #0
 800560a:	d119      	bne.n	8005640 <ADC_DMAConvCplt+0x8c>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0220 	bic.w	r2, r2, #32
 800561a:	605a      	str	r2, [r3, #4]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	641a      	str	r2, [r3, #64]	; 0x40
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d105      	bne.n	8005640 <ADC_DMAConvCplt+0x8c>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005638:	f043 0201 	orr.w	r2, r3, #1
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	641a      	str	r2, [r3, #64]	; 0x40
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f7ff fd7b 	bl	800513c <HAL_ADC_ConvCpltCallback>
 8005646:	e00e      	b.n	8005666 <ADC_DMAConvCplt+0xb2>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564c:	f003 0310 	and.w	r3, r3, #16
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <ADC_DMAConvCplt+0xa8>
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f7ff fd85 	bl	8005164 <HAL_ADC_ErrorCallback>
 800565a:	e004      	b.n	8005666 <ADC_DMAConvCplt+0xb2>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	4798      	blx	r3
 8005666:	bf00      	nop
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <ADC_DMAHalfConvCplt>:
 800566e:	b580      	push	{r7, lr}
 8005670:	b084      	sub	sp, #16
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f7ff fd67 	bl	8005150 <HAL_ADC_ConvHalfCpltCallback>
 8005682:	bf00      	nop
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <ADC_DMAError>:
 800568a:	b580      	push	{r7, lr}
 800568c:	b084      	sub	sp, #16
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2240      	movs	r2, #64	; 0x40
 800569c:	641a      	str	r2, [r3, #64]	; 0x40
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a2:	f043 0204 	orr.w	r2, r3, #4
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	645a      	str	r2, [r3, #68]	; 0x44
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f7ff fd5a 	bl	8005164 <HAL_ADC_ErrorCallback>
 80056b0:	bf00      	nop
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <__NVIC_SetPriorityGrouping>:
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	4b0c      	ldr	r3, [pc, #48]	; (80056fc <__NVIC_SetPriorityGrouping+0x44>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	60bb      	str	r3, [r7, #8]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056d4:	4013      	ands	r3, r2
 80056d6:	60bb      	str	r3, [r7, #8]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	021a      	lsls	r2, r3, #8
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	4313      	orrs	r3, r2
 80056e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056e8:	60bb      	str	r3, [r7, #8]
 80056ea:	4a04      	ldr	r2, [pc, #16]	; (80056fc <__NVIC_SetPriorityGrouping+0x44>)
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	60d3      	str	r3, [r2, #12]
 80056f0:	bf00      	nop
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	e000ed00 	.word	0xe000ed00

08005700 <__NVIC_GetPriorityGrouping>:
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
 8005704:	4b04      	ldr	r3, [pc, #16]	; (8005718 <__NVIC_GetPriorityGrouping+0x18>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	0a1b      	lsrs	r3, r3, #8
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	4618      	mov	r0, r3
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	e000ed00 	.word	0xe000ed00

0800571c <__NVIC_EnableIRQ>:
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	4603      	mov	r3, r0
 8005724:	71fb      	strb	r3, [r7, #7]
 8005726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800572a:	2b00      	cmp	r3, #0
 800572c:	db0b      	blt.n	8005746 <__NVIC_EnableIRQ+0x2a>
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	f003 021f 	and.w	r2, r3, #31
 8005734:	4907      	ldr	r1, [pc, #28]	; (8005754 <__NVIC_EnableIRQ+0x38>)
 8005736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800573a:	095b      	lsrs	r3, r3, #5
 800573c:	2001      	movs	r0, #1
 800573e:	fa00 f202 	lsl.w	r2, r0, r2
 8005742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	e000e100 	.word	0xe000e100

08005758 <__NVIC_SetPriority>:
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	4603      	mov	r3, r0
 8005760:	6039      	str	r1, [r7, #0]
 8005762:	71fb      	strb	r3, [r7, #7]
 8005764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005768:	2b00      	cmp	r3, #0
 800576a:	db0a      	blt.n	8005782 <__NVIC_SetPriority+0x2a>
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	b2da      	uxtb	r2, r3
 8005770:	490c      	ldr	r1, [pc, #48]	; (80057a4 <__NVIC_SetPriority+0x4c>)
 8005772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005776:	0112      	lsls	r2, r2, #4
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	440b      	add	r3, r1
 800577c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8005780:	e00a      	b.n	8005798 <__NVIC_SetPriority+0x40>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	b2da      	uxtb	r2, r3
 8005786:	4908      	ldr	r1, [pc, #32]	; (80057a8 <__NVIC_SetPriority+0x50>)
 8005788:	79fb      	ldrb	r3, [r7, #7]
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	3b04      	subs	r3, #4
 8005790:	0112      	lsls	r2, r2, #4
 8005792:	b2d2      	uxtb	r2, r2
 8005794:	440b      	add	r3, r1
 8005796:	761a      	strb	r2, [r3, #24]
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	e000e100 	.word	0xe000e100
 80057a8:	e000ed00 	.word	0xe000ed00

080057ac <NVIC_EncodePriority>:
 80057ac:	b480      	push	{r7}
 80057ae:	b089      	sub	sp, #36	; 0x24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	61fb      	str	r3, [r7, #28]
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	f1c3 0307 	rsb	r3, r3, #7
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	bf28      	it	cs
 80057ca:	2304      	movcs	r3, #4
 80057cc:	61bb      	str	r3, [r7, #24]
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	3304      	adds	r3, #4
 80057d2:	2b06      	cmp	r3, #6
 80057d4:	d902      	bls.n	80057dc <NVIC_EncodePriority+0x30>
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	3b03      	subs	r3, #3
 80057da:	e000      	b.n	80057de <NVIC_EncodePriority+0x32>
 80057dc:	2300      	movs	r3, #0
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	f04f 32ff 	mov.w	r2, #4294967295
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ea:	43da      	mvns	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	401a      	ands	r2, r3
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	409a      	lsls	r2, r3
 80057f4:	f04f 31ff 	mov.w	r1, #4294967295
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	fa01 f303 	lsl.w	r3, r1, r3
 80057fe:	43d9      	mvns	r1, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	400b      	ands	r3, r1
 8005804:	4313      	orrs	r3, r2
 8005806:	4618      	mov	r0, r3
 8005808:	3724      	adds	r7, #36	; 0x24
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
	...

08005814 <__NVIC_SystemReset>:
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	bf00      	nop
 800581e:	4b06      	ldr	r3, [pc, #24]	; (8005838 <__NVIC_SystemReset+0x24>)
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005826:	4904      	ldr	r1, [pc, #16]	; (8005838 <__NVIC_SystemReset+0x24>)
 8005828:	4b04      	ldr	r3, [pc, #16]	; (800583c <__NVIC_SystemReset+0x28>)
 800582a:	4313      	orrs	r3, r2
 800582c:	60cb      	str	r3, [r1, #12]
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	bf00      	nop
 8005834:	bf00      	nop
 8005836:	e7fd      	b.n	8005834 <__NVIC_SystemReset+0x20>
 8005838:	e000ed00 	.word	0xe000ed00
 800583c:	05fa0004 	.word	0x05fa0004

08005840 <HAL_NVIC_SetPriorityGrouping>:
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7ff ff35 	bl	80056b8 <__NVIC_SetPriorityGrouping>
 800584e:	bf00      	nop
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_NVIC_SetPriority>:
 8005856:	b580      	push	{r7, lr}
 8005858:	b086      	sub	sp, #24
 800585a:	af00      	add	r7, sp, #0
 800585c:	4603      	mov	r3, r0
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	607a      	str	r2, [r7, #4]
 8005862:	73fb      	strb	r3, [r7, #15]
 8005864:	2300      	movs	r3, #0
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	f7ff ff4a 	bl	8005700 <__NVIC_GetPriorityGrouping>
 800586c:	6178      	str	r0, [r7, #20]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	68b9      	ldr	r1, [r7, #8]
 8005872:	6978      	ldr	r0, [r7, #20]
 8005874:	f7ff ff9a 	bl	80057ac <NVIC_EncodePriority>
 8005878:	4602      	mov	r2, r0
 800587a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800587e:	4611      	mov	r1, r2
 8005880:	4618      	mov	r0, r3
 8005882:	f7ff ff69 	bl	8005758 <__NVIC_SetPriority>
 8005886:	bf00      	nop
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_NVIC_EnableIRQ>:
 800588e:	b580      	push	{r7, lr}
 8005890:	b082      	sub	sp, #8
 8005892:	af00      	add	r7, sp, #0
 8005894:	4603      	mov	r3, r0
 8005896:	71fb      	strb	r3, [r7, #7]
 8005898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589c:	4618      	mov	r0, r3
 800589e:	f7ff ff3d 	bl	800571c <__NVIC_EnableIRQ>
 80058a2:	bf00      	nop
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_NVIC_SystemReset>:
 80058aa:	b580      	push	{r7, lr}
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	f7ff ffb1 	bl	8005814 <__NVIC_SystemReset>
	...

080058b4 <HAL_DMA_Init>:
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	2300      	movs	r3, #0
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	f7ff fad8 	bl	8004e74 <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <HAL_DMA_Init+0x1c>
 80058cc:	2301      	movs	r3, #1
 80058ce:	e099      	b.n	8005a04 <HAL_DMA_Init+0x150>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0201 	bic.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	e00f      	b.n	8005912 <HAL_DMA_Init+0x5e>
 80058f2:	f7ff fabf 	bl	8004e74 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b05      	cmp	r3, #5
 80058fe:	d908      	bls.n	8005912 <HAL_DMA_Init+0x5e>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2220      	movs	r2, #32
 8005904:	655a      	str	r2, [r3, #84]	; 0x54
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2203      	movs	r2, #3
 800590a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800590e:	2303      	movs	r3, #3
 8005910:	e078      	b.n	8005a04 <HAL_DMA_Init+0x150>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e8      	bne.n	80058f2 <HAL_DMA_Init+0x3e>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	4b38      	ldr	r3, [pc, #224]	; (8005a0c <HAL_DMA_Init+0x158>)
 800592c:	4013      	ands	r3, r2
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	431a      	orrs	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	431a      	orrs	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	431a      	orrs	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	4313      	orrs	r3, r2
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	4313      	orrs	r3, r2
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	2b04      	cmp	r3, #4
 800596a:	d107      	bne.n	800597c <HAL_DMA_Init+0xc8>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005974:	4313      	orrs	r3, r2
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f023 0307 	bic.w	r3, r3, #7
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d117      	bne.n	80059d6 <HAL_DMA_Init+0x122>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00e      	beq.n	80059d6 <HAL_DMA_Init+0x122>
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fa6f 	bl	8005e9c <DMA_CheckFifoParam>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d008      	beq.n	80059d6 <HAL_DMA_Init+0x122>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2240      	movs	r2, #64	; 0x40
 80059c8:	655a      	str	r2, [r3, #84]	; 0x54
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80059d2:	2301      	movs	r3, #1
 80059d4:	e016      	b.n	8005a04 <HAL_DMA_Init+0x150>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	615a      	str	r2, [r3, #20]
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fa26 	bl	8005e30 <DMA_CalcBaseAndBitshift>
 80059e4:	4603      	mov	r3, r0
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ec:	223f      	movs	r2, #63	; 0x3f
 80059ee:	409a      	lsls	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	609a      	str	r2, [r3, #8]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	655a      	str	r2, [r3, #84]	; 0x54
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005a02:	2300      	movs	r3, #0
 8005a04:	4618      	mov	r0, r3
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	f010803f 	.word	0xf010803f

08005a10 <HAL_DMA_Start_IT>:
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
 8005a1c:	603b      	str	r3, [r7, #0]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	75fb      	strb	r3, [r7, #23]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d101      	bne.n	8005a36 <HAL_DMA_Start_IT+0x26>
 8005a32:	2302      	movs	r3, #2
 8005a34:	e040      	b.n	8005ab8 <HAL_DMA_Start_IT+0xa8>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d12f      	bne.n	8005aaa <HAL_DMA_Start_IT+0x9a>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	655a      	str	r2, [r3, #84]	; 0x54
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	68b9      	ldr	r1, [r7, #8]
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 f9b8 	bl	8005dd4 <DMA_SetConfig>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a68:	223f      	movs	r2, #63	; 0x3f
 8005a6a:	409a      	lsls	r2, r3
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	609a      	str	r2, [r3, #8]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0216 	orr.w	r2, r2, #22
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d007      	beq.n	8005a98 <HAL_DMA_Start_IT+0x88>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0208 	orr.w	r2, r2, #8
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0201 	orr.w	r2, r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	e005      	b.n	8005ab6 <HAL_DMA_Start_IT+0xa6>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	75fb      	strb	r3, [r7, #23]
 8005ab6:	7dfb      	ldrb	r3, [r7, #23]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_DMA_IRQHandler>:
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60bb      	str	r3, [r7, #8]
 8005acc:	4b8e      	ldr	r3, [pc, #568]	; (8005d08 <HAL_DMA_IRQHandler+0x248>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a8e      	ldr	r2, [pc, #568]	; (8005d0c <HAL_DMA_IRQHandler+0x24c>)
 8005ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad6:	0a9b      	lsrs	r3, r3, #10
 8005ad8:	617b      	str	r3, [r7, #20]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aea:	2208      	movs	r2, #8
 8005aec:	409a      	lsls	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4013      	ands	r3, r2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d01a      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x6c>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d013      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x6c>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0204 	bic.w	r2, r2, #4
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b18:	2208      	movs	r2, #8
 8005b1a:	409a      	lsls	r2, r3
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	609a      	str	r2, [r3, #8]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b24:	f043 0201 	orr.w	r2, r3, #1
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	655a      	str	r2, [r3, #84]	; 0x54
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b30:	2201      	movs	r2, #1
 8005b32:	409a      	lsls	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4013      	ands	r3, r2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d012      	beq.n	8005b62 <HAL_DMA_IRQHandler+0xa2>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00b      	beq.n	8005b62 <HAL_DMA_IRQHandler+0xa2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b4e:	2201      	movs	r2, #1
 8005b50:	409a      	lsls	r2, r3
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	609a      	str	r2, [r3, #8]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5a:	f043 0202 	orr.w	r2, r3, #2
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	655a      	str	r2, [r3, #84]	; 0x54
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b66:	2204      	movs	r2, #4
 8005b68:	409a      	lsls	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d012      	beq.n	8005b98 <HAL_DMA_IRQHandler+0xd8>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00b      	beq.n	8005b98 <HAL_DMA_IRQHandler+0xd8>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b84:	2204      	movs	r2, #4
 8005b86:	409a      	lsls	r2, r3
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	609a      	str	r2, [r3, #8]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b90:	f043 0204 	orr.w	r2, r3, #4
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	655a      	str	r2, [r3, #84]	; 0x54
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b9c:	2210      	movs	r2, #16
 8005b9e:	409a      	lsls	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d043      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x170>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d03c      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x170>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bba:	2210      	movs	r2, #16
 8005bbc:	409a      	lsls	r2, r3
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	609a      	str	r2, [r3, #8]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d018      	beq.n	8005c02 <HAL_DMA_IRQHandler+0x142>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d108      	bne.n	8005bf0 <HAL_DMA_IRQHandler+0x130>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d024      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x170>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	4798      	blx	r3
 8005bee:	e01f      	b.n	8005c30 <HAL_DMA_IRQHandler+0x170>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d01b      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x170>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	4798      	blx	r3
 8005c00:	e016      	b.n	8005c30 <HAL_DMA_IRQHandler+0x170>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d107      	bne.n	8005c20 <HAL_DMA_IRQHandler+0x160>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0208 	bic.w	r2, r2, #8
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x170>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	4798      	blx	r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c34:	2220      	movs	r2, #32
 8005c36:	409a      	lsls	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 808f 	beq.w	8005d60 <HAL_DMA_IRQHandler+0x2a0>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0310 	and.w	r3, r3, #16
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 8087 	beq.w	8005d60 <HAL_DMA_IRQHandler+0x2a0>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c56:	2220      	movs	r2, #32
 8005c58:	409a      	lsls	r2, r3
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	609a      	str	r2, [r3, #8]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b05      	cmp	r3, #5
 8005c68:	d136      	bne.n	8005cd8 <HAL_DMA_IRQHandler+0x218>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0216 	bic.w	r2, r2, #22
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	695a      	ldr	r2, [r3, #20]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c88:	615a      	str	r2, [r3, #20]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d103      	bne.n	8005c9a <HAL_DMA_IRQHandler+0x1da>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d007      	beq.n	8005caa <HAL_DMA_IRQHandler+0x1ea>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0208 	bic.w	r2, r2, #8
 8005ca8:	601a      	str	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cae:	223f      	movs	r2, #63	; 0x3f
 8005cb0:	409a      	lsls	r2, r3
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	609a      	str	r2, [r3, #8]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d07e      	beq.n	8005dcc <HAL_DMA_IRQHandler+0x30c>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	4798      	blx	r3
 8005cd6:	e079      	b.n	8005dcc <HAL_DMA_IRQHandler+0x30c>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d01d      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x262>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10d      	bne.n	8005d10 <HAL_DMA_IRQHandler+0x250>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d031      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x2a0>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	4798      	blx	r3
 8005d04:	e02c      	b.n	8005d60 <HAL_DMA_IRQHandler+0x2a0>
 8005d06:	bf00      	nop
 8005d08:	20000014 	.word	0x20000014
 8005d0c:	1b4e81b5 	.word	0x1b4e81b5
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d023      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x2a0>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	4798      	blx	r3
 8005d20:	e01e      	b.n	8005d60 <HAL_DMA_IRQHandler+0x2a0>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10f      	bne.n	8005d50 <HAL_DMA_IRQHandler+0x290>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0210 	bic.w	r2, r2, #16
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x2a0>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	4798      	blx	r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d032      	beq.n	8005dce <HAL_DMA_IRQHandler+0x30e>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d022      	beq.n	8005dba <HAL_DMA_IRQHandler+0x2fa>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2205      	movs	r2, #5
 8005d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 0201 	bic.w	r2, r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	60bb      	str	r3, [r7, #8]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d307      	bcc.n	8005da8 <HAL_DMA_IRQHandler+0x2e8>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1f2      	bne.n	8005d8c <HAL_DMA_IRQHandler+0x2cc>
 8005da6:	e000      	b.n	8005daa <HAL_DMA_IRQHandler+0x2ea>
 8005da8:	bf00      	nop
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d005      	beq.n	8005dce <HAL_DMA_IRQHandler+0x30e>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	4798      	blx	r3
 8005dca:	e000      	b.n	8005dce <HAL_DMA_IRQHandler+0x30e>
 8005dcc:	bf00      	nop
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <DMA_SetConfig>:
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	603b      	str	r3, [r7, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	605a      	str	r2, [r3, #4]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	2b40      	cmp	r3, #64	; 0x40
 8005e00:	d108      	bne.n	8005e14 <DMA_SetConfig+0x40>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	609a      	str	r2, [r3, #8]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	60da      	str	r2, [r3, #12]
 8005e12:	e007      	b.n	8005e24 <DMA_SetConfig+0x50>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	609a      	str	r2, [r3, #8]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	60da      	str	r2, [r3, #12]
 8005e24:	bf00      	nop
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <DMA_CalcBaseAndBitshift>:
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	3b10      	subs	r3, #16
 8005e40:	4a14      	ldr	r2, [pc, #80]	; (8005e94 <DMA_CalcBaseAndBitshift+0x64>)
 8005e42:	fba2 2303 	umull	r2, r3, r2, r3
 8005e46:	091b      	lsrs	r3, r3, #4
 8005e48:	60fb      	str	r3, [r7, #12]
 8005e4a:	4a13      	ldr	r2, [pc, #76]	; (8005e98 <DMA_CalcBaseAndBitshift+0x68>)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4413      	add	r3, r2
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	461a      	mov	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d909      	bls.n	8005e72 <DMA_CalcBaseAndBitshift+0x42>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e66:	f023 0303 	bic.w	r3, r3, #3
 8005e6a:	1d1a      	adds	r2, r3, #4
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	659a      	str	r2, [r3, #88]	; 0x58
 8005e70:	e007      	b.n	8005e82 <DMA_CalcBaseAndBitshift+0x52>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e7a:	f023 0303 	bic.w	r3, r3, #3
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	6593      	str	r3, [r2, #88]	; 0x58
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	aaaaaaab 	.word	0xaaaaaaab
 8005e98:	08014d44 	.word	0x08014d44

08005e9c <DMA_CheckFifoParam>:
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	73fb      	strb	r3, [r7, #15]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eac:	60bb      	str	r3, [r7, #8]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d11f      	bne.n	8005ef6 <DMA_CheckFifoParam+0x5a>
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	d856      	bhi.n	8005f6a <DMA_CheckFifoParam+0xce>
 8005ebc:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <DMA_CheckFifoParam+0x28>)
 8005ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec2:	bf00      	nop
 8005ec4:	08005ed5 	.word	0x08005ed5
 8005ec8:	08005ee7 	.word	0x08005ee7
 8005ecc:	08005ed5 	.word	0x08005ed5
 8005ed0:	08005f6b 	.word	0x08005f6b
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d046      	beq.n	8005f6e <DMA_CheckFifoParam+0xd2>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	73fb      	strb	r3, [r7, #15]
 8005ee4:	e043      	b.n	8005f6e <DMA_CheckFifoParam+0xd2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005eee:	d140      	bne.n	8005f72 <DMA_CheckFifoParam+0xd6>
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	73fb      	strb	r3, [r7, #15]
 8005ef4:	e03d      	b.n	8005f72 <DMA_CheckFifoParam+0xd6>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005efe:	d121      	bne.n	8005f44 <DMA_CheckFifoParam+0xa8>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d837      	bhi.n	8005f76 <DMA_CheckFifoParam+0xda>
 8005f06:	a201      	add	r2, pc, #4	; (adr r2, 8005f0c <DMA_CheckFifoParam+0x70>)
 8005f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0c:	08005f1d 	.word	0x08005f1d
 8005f10:	08005f23 	.word	0x08005f23
 8005f14:	08005f1d 	.word	0x08005f1d
 8005f18:	08005f35 	.word	0x08005f35
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	73fb      	strb	r3, [r7, #15]
 8005f20:	e030      	b.n	8005f84 <DMA_CheckFifoParam+0xe8>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d025      	beq.n	8005f7a <DMA_CheckFifoParam+0xde>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	73fb      	strb	r3, [r7, #15]
 8005f32:	e022      	b.n	8005f7a <DMA_CheckFifoParam+0xde>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f3c:	d11f      	bne.n	8005f7e <DMA_CheckFifoParam+0xe2>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	73fb      	strb	r3, [r7, #15]
 8005f42:	e01c      	b.n	8005f7e <DMA_CheckFifoParam+0xe2>
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d903      	bls.n	8005f52 <DMA_CheckFifoParam+0xb6>
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d003      	beq.n	8005f58 <DMA_CheckFifoParam+0xbc>
 8005f50:	e018      	b.n	8005f84 <DMA_CheckFifoParam+0xe8>
 8005f52:	2301      	movs	r3, #1
 8005f54:	73fb      	strb	r3, [r7, #15]
 8005f56:	e015      	b.n	8005f84 <DMA_CheckFifoParam+0xe8>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00e      	beq.n	8005f82 <DMA_CheckFifoParam+0xe6>
 8005f64:	2301      	movs	r3, #1
 8005f66:	73fb      	strb	r3, [r7, #15]
 8005f68:	e00b      	b.n	8005f82 <DMA_CheckFifoParam+0xe6>
 8005f6a:	bf00      	nop
 8005f6c:	e00a      	b.n	8005f84 <DMA_CheckFifoParam+0xe8>
 8005f6e:	bf00      	nop
 8005f70:	e008      	b.n	8005f84 <DMA_CheckFifoParam+0xe8>
 8005f72:	bf00      	nop
 8005f74:	e006      	b.n	8005f84 <DMA_CheckFifoParam+0xe8>
 8005f76:	bf00      	nop
 8005f78:	e004      	b.n	8005f84 <DMA_CheckFifoParam+0xe8>
 8005f7a:	bf00      	nop
 8005f7c:	e002      	b.n	8005f84 <DMA_CheckFifoParam+0xe8>
 8005f7e:	bf00      	nop
 8005f80:	e000      	b.n	8005f84 <DMA_CheckFifoParam+0xe8>
 8005f82:	bf00      	nop
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop

08005f94 <HAL_GPIO_Init>:
 8005f94:	b480      	push	{r7}
 8005f96:	b089      	sub	sp, #36	; 0x24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	613b      	str	r3, [r7, #16]
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	61bb      	str	r3, [r7, #24]
 8005faa:	2300      	movs	r3, #0
 8005fac:	61fb      	str	r3, [r7, #28]
 8005fae:	e159      	b.n	8006264 <HAL_GPIO_Init+0x2d0>
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	f040 8148 	bne.w	800625e <HAL_GPIO_Init+0x2ca>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d005      	beq.n	8005fe6 <HAL_GPIO_Init+0x52>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d130      	bne.n	8006048 <HAL_GPIO_Init+0xb4>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	61bb      	str	r3, [r7, #24]
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	2203      	movs	r2, #3
 8005ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff6:	43db      	mvns	r3, r3
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	61bb      	str	r3, [r7, #24]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	fa02 f303 	lsl.w	r3, r2, r3
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	4313      	orrs	r3, r2
 800600e:	61bb      	str	r3, [r7, #24]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	609a      	str	r2, [r3, #8]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	61bb      	str	r3, [r7, #24]
 800601c:	2201      	movs	r2, #1
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	fa02 f303 	lsl.w	r3, r2, r3
 8006024:	43db      	mvns	r3, r3
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	4013      	ands	r3, r2
 800602a:	61bb      	str	r3, [r7, #24]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	091b      	lsrs	r3, r3, #4
 8006032:	f003 0201 	and.w	r2, r3, #1
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	fa02 f303 	lsl.w	r3, r2, r3
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	4313      	orrs	r3, r2
 8006040:	61bb      	str	r3, [r7, #24]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	605a      	str	r2, [r3, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f003 0303 	and.w	r3, r3, #3
 8006050:	2b03      	cmp	r3, #3
 8006052:	d017      	beq.n	8006084 <HAL_GPIO_Init+0xf0>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	61bb      	str	r3, [r7, #24]
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	005b      	lsls	r3, r3, #1
 800605e:	2203      	movs	r2, #3
 8006060:	fa02 f303 	lsl.w	r3, r2, r3
 8006064:	43db      	mvns	r3, r3
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	4013      	ands	r3, r2
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	005b      	lsls	r3, r3, #1
 8006074:	fa02 f303 	lsl.w	r3, r2, r3
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	4313      	orrs	r3, r2
 800607c:	61bb      	str	r3, [r7, #24]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	60da      	str	r2, [r3, #12]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f003 0303 	and.w	r3, r3, #3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d123      	bne.n	80060d8 <HAL_GPIO_Init+0x144>
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	08da      	lsrs	r2, r3, #3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3208      	adds	r2, #8
 8006098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800609c:	61bb      	str	r3, [r7, #24]
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	f003 0307 	and.w	r3, r3, #7
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	220f      	movs	r2, #15
 80060a8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ac:	43db      	mvns	r3, r3
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	4013      	ands	r3, r2
 80060b2:	61bb      	str	r3, [r7, #24]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	691a      	ldr	r2, [r3, #16]
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	f003 0307 	and.w	r3, r3, #7
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	fa02 f303 	lsl.w	r3, r2, r3
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	61bb      	str	r3, [r7, #24]
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	08da      	lsrs	r2, r3, #3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3208      	adds	r2, #8
 80060d2:	69b9      	ldr	r1, [r7, #24]
 80060d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	61bb      	str	r3, [r7, #24]
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	2203      	movs	r2, #3
 80060e4:	fa02 f303 	lsl.w	r3, r2, r3
 80060e8:	43db      	mvns	r3, r3
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	4013      	ands	r3, r2
 80060ee:	61bb      	str	r3, [r7, #24]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f003 0203 	and.w	r2, r3, #3
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	005b      	lsls	r3, r3, #1
 80060fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	4313      	orrs	r3, r2
 8006104:	61bb      	str	r3, [r7, #24]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 80a2 	beq.w	800625e <HAL_GPIO_Init+0x2ca>
 800611a:	2300      	movs	r3, #0
 800611c:	60fb      	str	r3, [r7, #12]
 800611e:	4b57      	ldr	r3, [pc, #348]	; (800627c <HAL_GPIO_Init+0x2e8>)
 8006120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006122:	4a56      	ldr	r2, [pc, #344]	; (800627c <HAL_GPIO_Init+0x2e8>)
 8006124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006128:	6453      	str	r3, [r2, #68]	; 0x44
 800612a:	4b54      	ldr	r3, [pc, #336]	; (800627c <HAL_GPIO_Init+0x2e8>)
 800612c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4a52      	ldr	r2, [pc, #328]	; (8006280 <HAL_GPIO_Init+0x2ec>)
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	089b      	lsrs	r3, r3, #2
 800613c:	3302      	adds	r3, #2
 800613e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006142:	61bb      	str	r3, [r7, #24]
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	220f      	movs	r2, #15
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	43db      	mvns	r3, r3
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	4013      	ands	r3, r2
 8006158:	61bb      	str	r3, [r7, #24]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a49      	ldr	r2, [pc, #292]	; (8006284 <HAL_GPIO_Init+0x2f0>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d019      	beq.n	8006196 <HAL_GPIO_Init+0x202>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a48      	ldr	r2, [pc, #288]	; (8006288 <HAL_GPIO_Init+0x2f4>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d013      	beq.n	8006192 <HAL_GPIO_Init+0x1fe>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a47      	ldr	r2, [pc, #284]	; (800628c <HAL_GPIO_Init+0x2f8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d00d      	beq.n	800618e <HAL_GPIO_Init+0x1fa>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a46      	ldr	r2, [pc, #280]	; (8006290 <HAL_GPIO_Init+0x2fc>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d007      	beq.n	800618a <HAL_GPIO_Init+0x1f6>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a45      	ldr	r2, [pc, #276]	; (8006294 <HAL_GPIO_Init+0x300>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d101      	bne.n	8006186 <HAL_GPIO_Init+0x1f2>
 8006182:	2304      	movs	r3, #4
 8006184:	e008      	b.n	8006198 <HAL_GPIO_Init+0x204>
 8006186:	2307      	movs	r3, #7
 8006188:	e006      	b.n	8006198 <HAL_GPIO_Init+0x204>
 800618a:	2303      	movs	r3, #3
 800618c:	e004      	b.n	8006198 <HAL_GPIO_Init+0x204>
 800618e:	2302      	movs	r3, #2
 8006190:	e002      	b.n	8006198 <HAL_GPIO_Init+0x204>
 8006192:	2301      	movs	r3, #1
 8006194:	e000      	b.n	8006198 <HAL_GPIO_Init+0x204>
 8006196:	2300      	movs	r3, #0
 8006198:	69fa      	ldr	r2, [r7, #28]
 800619a:	f002 0203 	and.w	r2, r2, #3
 800619e:	0092      	lsls	r2, r2, #2
 80061a0:	4093      	lsls	r3, r2
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	61bb      	str	r3, [r7, #24]
 80061a8:	4935      	ldr	r1, [pc, #212]	; (8006280 <HAL_GPIO_Init+0x2ec>)
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	089b      	lsrs	r3, r3, #2
 80061ae:	3302      	adds	r3, #2
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80061b6:	4b38      	ldr	r3, [pc, #224]	; (8006298 <HAL_GPIO_Init+0x304>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	61bb      	str	r3, [r7, #24]
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	43db      	mvns	r3, r3
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	4013      	ands	r3, r2
 80061c4:	61bb      	str	r3, [r7, #24]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_GPIO_Init+0x246>
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	61bb      	str	r3, [r7, #24]
 80061da:	4a2f      	ldr	r2, [pc, #188]	; (8006298 <HAL_GPIO_Init+0x304>)
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	6093      	str	r3, [r2, #8]
 80061e0:	4b2d      	ldr	r3, [pc, #180]	; (8006298 <HAL_GPIO_Init+0x304>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	43db      	mvns	r3, r3
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	4013      	ands	r3, r2
 80061ee:	61bb      	str	r3, [r7, #24]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <HAL_GPIO_Init+0x270>
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	4313      	orrs	r3, r2
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	4a24      	ldr	r2, [pc, #144]	; (8006298 <HAL_GPIO_Init+0x304>)
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	60d3      	str	r3, [r2, #12]
 800620a:	4b23      	ldr	r3, [pc, #140]	; (8006298 <HAL_GPIO_Init+0x304>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	61bb      	str	r3, [r7, #24]
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	43db      	mvns	r3, r3
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	4013      	ands	r3, r2
 8006218:	61bb      	str	r3, [r7, #24]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <HAL_GPIO_Init+0x29a>
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	4313      	orrs	r3, r2
 800622c:	61bb      	str	r3, [r7, #24]
 800622e:	4a1a      	ldr	r2, [pc, #104]	; (8006298 <HAL_GPIO_Init+0x304>)
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	6053      	str	r3, [r2, #4]
 8006234:	4b18      	ldr	r3, [pc, #96]	; (8006298 <HAL_GPIO_Init+0x304>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	61bb      	str	r3, [r7, #24]
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	43db      	mvns	r3, r3
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	4013      	ands	r3, r2
 8006242:	61bb      	str	r3, [r7, #24]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <HAL_GPIO_Init+0x2c4>
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	61bb      	str	r3, [r7, #24]
 8006258:	4a0f      	ldr	r2, [pc, #60]	; (8006298 <HAL_GPIO_Init+0x304>)
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	3301      	adds	r3, #1
 8006262:	61fb      	str	r3, [r7, #28]
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	2b0f      	cmp	r3, #15
 8006268:	f67f aea2 	bls.w	8005fb0 <HAL_GPIO_Init+0x1c>
 800626c:	bf00      	nop
 800626e:	bf00      	nop
 8006270:	3724      	adds	r7, #36	; 0x24
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	40023800 	.word	0x40023800
 8006280:	40013800 	.word	0x40013800
 8006284:	40020000 	.word	0x40020000
 8006288:	40020400 	.word	0x40020400
 800628c:	40020800 	.word	0x40020800
 8006290:	40020c00 	.word	0x40020c00
 8006294:	40021000 	.word	0x40021000
 8006298:	40013c00 	.word	0x40013c00

0800629c <HAL_GPIO_ReadPin>:
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	460b      	mov	r3, r1
 80062a6:	807b      	strh	r3, [r7, #2]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691a      	ldr	r2, [r3, #16]
 80062ac:	887b      	ldrh	r3, [r7, #2]
 80062ae:	4013      	ands	r3, r2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <HAL_GPIO_ReadPin+0x1e>
 80062b4:	2301      	movs	r3, #1
 80062b6:	73fb      	strb	r3, [r7, #15]
 80062b8:	e001      	b.n	80062be <HAL_GPIO_ReadPin+0x22>
 80062ba:	2300      	movs	r3, #0
 80062bc:	73fb      	strb	r3, [r7, #15]
 80062be:	7bfb      	ldrb	r3, [r7, #15]
 80062c0:	4618      	mov	r0, r3
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_GPIO_WritePin>:
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	460b      	mov	r3, r1
 80062d6:	807b      	strh	r3, [r7, #2]
 80062d8:	4613      	mov	r3, r2
 80062da:	707b      	strb	r3, [r7, #1]
 80062dc:	787b      	ldrb	r3, [r7, #1]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <HAL_GPIO_WritePin+0x1e>
 80062e2:	887a      	ldrh	r2, [r7, #2]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	619a      	str	r2, [r3, #24]
 80062e8:	e003      	b.n	80062f2 <HAL_GPIO_WritePin+0x26>
 80062ea:	887b      	ldrh	r3, [r7, #2]
 80062ec:	041a      	lsls	r2, r3, #16
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	619a      	str	r2, [r3, #24]
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <HAL_GPIO_TogglePin>:
 80062fe:	b480      	push	{r7}
 8006300:	b085      	sub	sp, #20
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	460b      	mov	r3, r1
 8006308:	807b      	strh	r3, [r7, #2]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	887a      	ldrh	r2, [r7, #2]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4013      	ands	r3, r2
 8006316:	041a      	lsls	r2, r3, #16
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	43d9      	mvns	r1, r3
 800631c:	887b      	ldrh	r3, [r7, #2]
 800631e:	400b      	ands	r3, r1
 8006320:	431a      	orrs	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	619a      	str	r2, [r3, #24]
 8006326:	bf00      	nop
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
	...

08006334 <HAL_GPIO_EXTI_IRQHandler>:
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	4603      	mov	r3, r0
 800633c:	80fb      	strh	r3, [r7, #6]
 800633e:	4b08      	ldr	r3, [pc, #32]	; (8006360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006340:	695a      	ldr	r2, [r3, #20]
 8006342:	88fb      	ldrh	r3, [r7, #6]
 8006344:	4013      	ands	r3, r2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d006      	beq.n	8006358 <HAL_GPIO_EXTI_IRQHandler+0x24>
 800634a:	4a05      	ldr	r2, [pc, #20]	; (8006360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800634c:	88fb      	ldrh	r3, [r7, #6]
 800634e:	6153      	str	r3, [r2, #20]
 8006350:	88fb      	ldrh	r3, [r7, #6]
 8006352:	4618      	mov	r0, r3
 8006354:	f000 f806 	bl	8006364 <HAL_GPIO_EXTI_Callback>
 8006358:	bf00      	nop
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	40013c00 	.word	0x40013c00

08006364 <HAL_GPIO_EXTI_Callback>:
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	4603      	mov	r3, r0
 800636c:	80fb      	strh	r3, [r7, #6]
 800636e:	bf00      	nop
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
	...

0800637c <HAL_I2C_Init>:
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_I2C_Init+0x12>
 800638a:	2301      	movs	r3, #1
 800638c:	e12b      	b.n	80065e6 <HAL_I2C_Init+0x26a>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d106      	bne.n	80063a8 <HAL_I2C_Init+0x2c>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7fb fe1e 	bl	8001fe4 <HAL_I2C_MspInit>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2224      	movs	r2, #36	; 0x24
 80063ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f022 0201 	bic.w	r2, r2, #1
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	f003 faec 	bl	80099bc <HAL_RCC_GetPCLK1Freq>
 80063e4:	60f8      	str	r0, [r7, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	4a81      	ldr	r2, [pc, #516]	; (80065f0 <HAL_I2C_Init+0x274>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d807      	bhi.n	8006400 <HAL_I2C_Init+0x84>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4a80      	ldr	r2, [pc, #512]	; (80065f4 <HAL_I2C_Init+0x278>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	bf94      	ite	ls
 80063f8:	2301      	movls	r3, #1
 80063fa:	2300      	movhi	r3, #0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	e006      	b.n	800640e <HAL_I2C_Init+0x92>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4a7d      	ldr	r2, [pc, #500]	; (80065f8 <HAL_I2C_Init+0x27c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	bf94      	ite	ls
 8006408:	2301      	movls	r3, #1
 800640a:	2300      	movhi	r3, #0
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <HAL_I2C_Init+0x9a>
 8006412:	2301      	movs	r3, #1
 8006414:	e0e7      	b.n	80065e6 <HAL_I2C_Init+0x26a>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4a78      	ldr	r2, [pc, #480]	; (80065fc <HAL_I2C_Init+0x280>)
 800641a:	fba2 2303 	umull	r2, r3, r2, r3
 800641e:	0c9b      	lsrs	r3, r3, #18
 8006420:	60bb      	str	r3, [r7, #8]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	430a      	orrs	r2, r1
 8006434:	605a      	str	r2, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	4a6a      	ldr	r2, [pc, #424]	; (80065f0 <HAL_I2C_Init+0x274>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d802      	bhi.n	8006450 <HAL_I2C_Init+0xd4>
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	3301      	adds	r3, #1
 800644e:	e009      	b.n	8006464 <HAL_I2C_Init+0xe8>
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006456:	fb02 f303 	mul.w	r3, r2, r3
 800645a:	4a69      	ldr	r2, [pc, #420]	; (8006600 <HAL_I2C_Init+0x284>)
 800645c:	fba2 2303 	umull	r2, r3, r2, r3
 8006460:	099b      	lsrs	r3, r3, #6
 8006462:	3301      	adds	r3, #1
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	6812      	ldr	r2, [r2, #0]
 8006468:	430b      	orrs	r3, r1
 800646a:	6213      	str	r3, [r2, #32]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006476:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	495c      	ldr	r1, [pc, #368]	; (80065f0 <HAL_I2C_Init+0x274>)
 8006480:	428b      	cmp	r3, r1
 8006482:	d819      	bhi.n	80064b8 <HAL_I2C_Init+0x13c>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	1e59      	subs	r1, r3, #1
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006492:	1c59      	adds	r1, r3, #1
 8006494:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006498:	400b      	ands	r3, r1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <HAL_I2C_Init+0x138>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	1e59      	subs	r1, r3, #1
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80064ac:	3301      	adds	r3, #1
 80064ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064b2:	e051      	b.n	8006558 <HAL_I2C_Init+0x1dc>
 80064b4:	2304      	movs	r3, #4
 80064b6:	e04f      	b.n	8006558 <HAL_I2C_Init+0x1dc>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d111      	bne.n	80064e4 <HAL_I2C_Init+0x168>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	1e58      	subs	r0, r3, #1
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6859      	ldr	r1, [r3, #4]
 80064c8:	460b      	mov	r3, r1
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	440b      	add	r3, r1
 80064ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80064d2:	3301      	adds	r3, #1
 80064d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064d8:	2b00      	cmp	r3, #0
 80064da:	bf0c      	ite	eq
 80064dc:	2301      	moveq	r3, #1
 80064de:	2300      	movne	r3, #0
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	e012      	b.n	800650a <HAL_I2C_Init+0x18e>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	1e58      	subs	r0, r3, #1
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6859      	ldr	r1, [r3, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	440b      	add	r3, r1
 80064f2:	0099      	lsls	r1, r3, #2
 80064f4:	440b      	add	r3, r1
 80064f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80064fa:	3301      	adds	r3, #1
 80064fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006500:	2b00      	cmp	r3, #0
 8006502:	bf0c      	ite	eq
 8006504:	2301      	moveq	r3, #1
 8006506:	2300      	movne	r3, #0
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <HAL_I2C_Init+0x196>
 800650e:	2301      	movs	r3, #1
 8006510:	e022      	b.n	8006558 <HAL_I2C_Init+0x1dc>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10e      	bne.n	8006538 <HAL_I2C_Init+0x1bc>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	1e58      	subs	r0, r3, #1
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6859      	ldr	r1, [r3, #4]
 8006522:	460b      	mov	r3, r1
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	440b      	add	r3, r1
 8006528:	fbb0 f3f3 	udiv	r3, r0, r3
 800652c:	3301      	adds	r3, #1
 800652e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006536:	e00f      	b.n	8006558 <HAL_I2C_Init+0x1dc>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	1e58      	subs	r0, r3, #1
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6859      	ldr	r1, [r3, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	440b      	add	r3, r1
 8006546:	0099      	lsls	r1, r3, #2
 8006548:	440b      	add	r3, r1
 800654a:	fbb0 f3f3 	udiv	r3, r0, r3
 800654e:	3301      	adds	r3, #1
 8006550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006554:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006558:	6879      	ldr	r1, [r7, #4]
 800655a:	6809      	ldr	r1, [r1, #0]
 800655c:	4313      	orrs	r3, r2
 800655e:	61cb      	str	r3, [r1, #28]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	69da      	ldr	r2, [r3, #28]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006586:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6911      	ldr	r1, [r2, #16]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	68d2      	ldr	r2, [r2, #12]
 8006592:	4311      	orrs	r1, r2
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6812      	ldr	r2, [r2, #0]
 8006598:	430b      	orrs	r3, r1
 800659a:	6093      	str	r3, [r2, #8]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	695a      	ldr	r2, [r3, #20]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	60da      	str	r2, [r3, #12]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f042 0201 	orr.w	r2, r2, #1
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	641a      	str	r2, [r3, #64]	; 0x40
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	631a      	str	r2, [r3, #48]	; 0x30
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065e4:	2300      	movs	r3, #0
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	000186a0 	.word	0x000186a0
 80065f4:	001e847f 	.word	0x001e847f
 80065f8:	003d08ff 	.word	0x003d08ff
 80065fc:	431bde83 	.word	0x431bde83
 8006600:	10624dd3 	.word	0x10624dd3

08006604 <HAL_I2C_Master_Transmit>:
 8006604:	b580      	push	{r7, lr}
 8006606:	b088      	sub	sp, #32
 8006608:	af02      	add	r7, sp, #8
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	607a      	str	r2, [r7, #4]
 800660e:	461a      	mov	r2, r3
 8006610:	460b      	mov	r3, r1
 8006612:	817b      	strh	r3, [r7, #10]
 8006614:	4613      	mov	r3, r2
 8006616:	813b      	strh	r3, [r7, #8]
 8006618:	f7fe fc2c 	bl	8004e74 <HAL_GetTick>
 800661c:	6178      	str	r0, [r7, #20]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b20      	cmp	r3, #32
 8006628:	f040 80e0 	bne.w	80067ec <HAL_I2C_Master_Transmit+0x1e8>
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	2319      	movs	r3, #25
 8006632:	2201      	movs	r2, #1
 8006634:	4970      	ldr	r1, [pc, #448]	; (80067f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f001 f8f6 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <HAL_I2C_Master_Transmit+0x42>
 8006642:	2302      	movs	r3, #2
 8006644:	e0d3      	b.n	80067ee <HAL_I2C_Master_Transmit+0x1ea>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800664c:	2b01      	cmp	r3, #1
 800664e:	d101      	bne.n	8006654 <HAL_I2C_Master_Transmit+0x50>
 8006650:	2302      	movs	r3, #2
 8006652:	e0cc      	b.n	80067ee <HAL_I2C_Master_Transmit+0x1ea>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	2b01      	cmp	r3, #1
 8006668:	d007      	beq.n	800667a <HAL_I2C_Master_Transmit+0x76>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f042 0201 	orr.w	r2, r2, #1
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2221      	movs	r2, #33	; 0x21
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2210      	movs	r2, #16
 8006696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	641a      	str	r2, [r3, #64]	; 0x40
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	625a      	str	r2, [r3, #36]	; 0x24
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	893a      	ldrh	r2, [r7, #8]
 80066aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	851a      	strh	r2, [r3, #40]	; 0x28
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	4a50      	ldr	r2, [pc, #320]	; (80067fc <HAL_I2C_Master_Transmit+0x1f8>)
 80066ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80066bc:	8979      	ldrh	r1, [r7, #10]
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	6a3a      	ldr	r2, [r7, #32]
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 fde2 	bl	800728c <I2C_MasterRequestWrite>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <HAL_I2C_Master_Transmit+0xce>
 80066ce:	2301      	movs	r3, #1
 80066d0:	e08d      	b.n	80067ee <HAL_I2C_Master_Transmit+0x1ea>
 80066d2:	2300      	movs	r3, #0
 80066d4:	613b      	str	r3, [r7, #16]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	613b      	str	r3, [r7, #16]
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	e066      	b.n	80067b8 <HAL_I2C_Master_Transmit+0x1b4>
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	6a39      	ldr	r1, [r7, #32]
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f001 f970 	bl	80079d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00d      	beq.n	8006716 <HAL_I2C_Master_Transmit+0x112>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	2b04      	cmp	r3, #4
 8006700:	d107      	bne.n	8006712 <HAL_I2C_Master_Transmit+0x10e>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	2301      	movs	r3, #1
 8006714:	e06b      	b.n	80067ee <HAL_I2C_Master_Transmit+0x1ea>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	781a      	ldrb	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	611a      	str	r2, [r3, #16]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	625a      	str	r2, [r3, #36]	; 0x24
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006730:	b29b      	uxth	r3, r3
 8006732:	3b01      	subs	r3, #1
 8006734:	b29a      	uxth	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	855a      	strh	r2, [r3, #42]	; 0x2a
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800673e:	3b01      	subs	r3, #1
 8006740:	b29a      	uxth	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	851a      	strh	r2, [r3, #40]	; 0x28
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	f003 0304 	and.w	r3, r3, #4
 8006750:	2b04      	cmp	r3, #4
 8006752:	d11b      	bne.n	800678c <HAL_I2C_Master_Transmit+0x188>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006758:	2b00      	cmp	r3, #0
 800675a:	d017      	beq.n	800678c <HAL_I2C_Master_Transmit+0x188>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	781a      	ldrb	r2, [r3, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	611a      	str	r2, [r3, #16]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	625a      	str	r2, [r3, #36]	; 0x24
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006776:	b29b      	uxth	r3, r3
 8006778:	3b01      	subs	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006784:	3b01      	subs	r3, #1
 8006786:	b29a      	uxth	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	851a      	strh	r2, [r3, #40]	; 0x28
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	6a39      	ldr	r1, [r7, #32]
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f001 f960 	bl	8007a56 <I2C_WaitOnBTFFlagUntilTimeout>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00d      	beq.n	80067b8 <HAL_I2C_Master_Transmit+0x1b4>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a0:	2b04      	cmp	r3, #4
 80067a2:	d107      	bne.n	80067b4 <HAL_I2C_Master_Transmit+0x1b0>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	2301      	movs	r3, #1
 80067b6:	e01a      	b.n	80067ee <HAL_I2C_Master_Transmit+0x1ea>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d194      	bne.n	80066ea <HAL_I2C_Master_Transmit+0xe6>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80067e8:	2300      	movs	r3, #0
 80067ea:	e000      	b.n	80067ee <HAL_I2C_Master_Transmit+0x1ea>
 80067ec:	2302      	movs	r3, #2
 80067ee:	4618      	mov	r0, r3
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	00100002 	.word	0x00100002
 80067fc:	ffff0000 	.word	0xffff0000

08006800 <HAL_I2C_Master_Receive>:
 8006800:	b580      	push	{r7, lr}
 8006802:	b08c      	sub	sp, #48	; 0x30
 8006804:	af02      	add	r7, sp, #8
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	607a      	str	r2, [r7, #4]
 800680a:	461a      	mov	r2, r3
 800680c:	460b      	mov	r3, r1
 800680e:	817b      	strh	r3, [r7, #10]
 8006810:	4613      	mov	r3, r2
 8006812:	813b      	strh	r3, [r7, #8]
 8006814:	f7fe fb2e 	bl	8004e74 <HAL_GetTick>
 8006818:	6278      	str	r0, [r7, #36]	; 0x24
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b20      	cmp	r3, #32
 8006824:	f040 820b 	bne.w	8006c3e <HAL_I2C_Master_Receive+0x43e>
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	2319      	movs	r3, #25
 800682e:	2201      	movs	r2, #1
 8006830:	497c      	ldr	r1, [pc, #496]	; (8006a24 <HAL_I2C_Master_Receive+0x224>)
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 fff8 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <HAL_I2C_Master_Receive+0x42>
 800683e:	2302      	movs	r3, #2
 8006840:	e1fe      	b.n	8006c40 <HAL_I2C_Master_Receive+0x440>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006848:	2b01      	cmp	r3, #1
 800684a:	d101      	bne.n	8006850 <HAL_I2C_Master_Receive+0x50>
 800684c:	2302      	movs	r3, #2
 800684e:	e1f7      	b.n	8006c40 <HAL_I2C_Master_Receive+0x440>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b01      	cmp	r3, #1
 8006864:	d007      	beq.n	8006876 <HAL_I2C_Master_Receive+0x76>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f042 0201 	orr.w	r2, r2, #1
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2222      	movs	r2, #34	; 0x22
 800688a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2210      	movs	r2, #16
 8006892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	641a      	str	r2, [r3, #64]	; 0x40
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	625a      	str	r2, [r3, #36]	; 0x24
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	893a      	ldrh	r2, [r7, #8]
 80068a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	851a      	strh	r2, [r3, #40]	; 0x28
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4a5c      	ldr	r2, [pc, #368]	; (8006a28 <HAL_I2C_Master_Receive+0x228>)
 80068b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80068b8:	8979      	ldrh	r1, [r7, #10]
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f000 fd66 	bl	8007390 <I2C_MasterRequestRead>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <HAL_I2C_Master_Receive+0xce>
 80068ca:	2301      	movs	r3, #1
 80068cc:	e1b8      	b.n	8006c40 <HAL_I2C_Master_Receive+0x440>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d113      	bne.n	80068fe <HAL_I2C_Master_Receive+0xfe>
 80068d6:	2300      	movs	r3, #0
 80068d8:	623b      	str	r3, [r7, #32]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	623b      	str	r3, [r7, #32]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	623b      	str	r3, [r7, #32]
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	e18c      	b.n	8006c18 <HAL_I2C_Master_Receive+0x418>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006902:	2b01      	cmp	r3, #1
 8006904:	d11b      	bne.n	800693e <HAL_I2C_Master_Receive+0x13e>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	2300      	movs	r3, #0
 8006918:	61fb      	str	r3, [r7, #28]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	61fb      	str	r3, [r7, #28]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	61fb      	str	r3, [r7, #28]
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	e16c      	b.n	8006c18 <HAL_I2C_Master_Receive+0x418>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006942:	2b02      	cmp	r3, #2
 8006944:	d11b      	bne.n	800697e <HAL_I2C_Master_Receive+0x17e>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	2300      	movs	r3, #0
 8006968:	61bb      	str	r3, [r7, #24]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	61bb      	str	r3, [r7, #24]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	61bb      	str	r3, [r7, #24]
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	e14c      	b.n	8006c18 <HAL_I2C_Master_Receive+0x418>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	2300      	movs	r3, #0
 8006990:	617b      	str	r3, [r7, #20]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	617b      	str	r3, [r7, #20]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	617b      	str	r3, [r7, #20]
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	e138      	b.n	8006c18 <HAL_I2C_Master_Receive+0x418>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069aa:	2b03      	cmp	r3, #3
 80069ac:	f200 80f1 	bhi.w	8006b92 <HAL_I2C_Master_Receive+0x392>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d123      	bne.n	8006a00 <HAL_I2C_Master_Receive+0x200>
 80069b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f001 f88b 	bl	8007ad8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <HAL_I2C_Master_Receive+0x1cc>
 80069c8:	2301      	movs	r3, #1
 80069ca:	e139      	b.n	8006c40 <HAL_I2C_Master_Receive+0x440>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	691a      	ldr	r2, [r3, #16]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d6:	b2d2      	uxtb	r2, r2
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	625a      	str	r2, [r3, #36]	; 0x24
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e8:	3b01      	subs	r3, #1
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	851a      	strh	r2, [r3, #40]	; 0x28
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	3b01      	subs	r3, #1
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069fe:	e10b      	b.n	8006c18 <HAL_I2C_Master_Receive+0x418>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d14e      	bne.n	8006aa6 <HAL_I2C_Master_Receive+0x2a6>
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	2200      	movs	r2, #0
 8006a10:	4906      	ldr	r1, [pc, #24]	; (8006a2c <HAL_I2C_Master_Receive+0x22c>)
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 ff08 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d008      	beq.n	8006a30 <HAL_I2C_Master_Receive+0x230>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e10e      	b.n	8006c40 <HAL_I2C_Master_Receive+0x440>
 8006a22:	bf00      	nop
 8006a24:	00100002 	.word	0x00100002
 8006a28:	ffff0000 	.word	0xffff0000
 8006a2c:	00010004 	.word	0x00010004
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	691a      	ldr	r2, [r3, #16]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	b2d2      	uxtb	r2, r2
 8006a4c:	701a      	strb	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	1c5a      	adds	r2, r3, #1
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	625a      	str	r2, [r3, #36]	; 0x24
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	851a      	strh	r2, [r3, #40]	; 0x28
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	691a      	ldr	r2, [r3, #16]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	b2d2      	uxtb	r2, r2
 8006a7e:	701a      	strb	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	1c5a      	adds	r2, r3, #1
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	625a      	str	r2, [r3, #36]	; 0x24
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	851a      	strh	r2, [r3, #40]	; 0x28
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006aa4:	e0b8      	b.n	8006c18 <HAL_I2C_Master_Receive+0x418>
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aac:	2200      	movs	r2, #0
 8006aae:	4966      	ldr	r1, [pc, #408]	; (8006c48 <HAL_I2C_Master_Receive+0x448>)
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 feb9 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <HAL_I2C_Master_Receive+0x2c0>
 8006abc:	2301      	movs	r3, #1
 8006abe:	e0bf      	b.n	8006c40 <HAL_I2C_Master_Receive+0x440>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	691a      	ldr	r2, [r3, #16]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	701a      	strb	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	625a      	str	r2, [r3, #36]	; 0x24
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aec:	3b01      	subs	r3, #1
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	851a      	strh	r2, [r3, #40]	; 0x28
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	3b01      	subs	r3, #1
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	2200      	movs	r2, #0
 8006b0a:	494f      	ldr	r1, [pc, #316]	; (8006c48 <HAL_I2C_Master_Receive+0x448>)
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 fe8b 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <HAL_I2C_Master_Receive+0x31c>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e091      	b.n	8006c40 <HAL_I2C_Master_Receive+0x440>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b2a:	601a      	str	r2, [r3, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	691a      	ldr	r2, [r3, #16]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	b2d2      	uxtb	r2, r2
 8006b38:	701a      	strb	r2, [r3, #0]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	625a      	str	r2, [r3, #36]	; 0x24
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	851a      	strh	r2, [r3, #40]	; 0x28
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	3b01      	subs	r3, #1
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	691a      	ldr	r2, [r3, #16]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b68:	b2d2      	uxtb	r2, r2
 8006b6a:	701a      	strb	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	625a      	str	r2, [r3, #36]	; 0x24
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	851a      	strh	r2, [r3, #40]	; 0x28
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b90:	e042      	b.n	8006c18 <HAL_I2C_Master_Receive+0x418>
 8006b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f000 ff9e 	bl	8007ad8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d001      	beq.n	8006ba6 <HAL_I2C_Master_Receive+0x3a6>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e04c      	b.n	8006c40 <HAL_I2C_Master_Receive+0x440>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	691a      	ldr	r2, [r3, #16]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	b2d2      	uxtb	r2, r2
 8006bb2:	701a      	strb	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	625a      	str	r2, [r3, #36]	; 0x24
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	851a      	strh	r2, [r3, #40]	; 0x28
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	f003 0304 	and.w	r3, r3, #4
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	d118      	bne.n	8006c18 <HAL_I2C_Master_Receive+0x418>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	691a      	ldr	r2, [r3, #16]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	b2d2      	uxtb	r2, r2
 8006bf2:	701a      	strb	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf8:	1c5a      	adds	r2, r3, #1
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	625a      	str	r2, [r3, #36]	; 0x24
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c02:	3b01      	subs	r3, #1
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	851a      	strh	r2, [r3, #40]	; 0x28
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f47f aec2 	bne.w	80069a6 <HAL_I2C_Master_Receive+0x1a6>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2220      	movs	r2, #32
 8006c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	e000      	b.n	8006c40 <HAL_I2C_Master_Receive+0x440>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	4618      	mov	r0, r3
 8006c42:	3728      	adds	r7, #40	; 0x28
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	00010004 	.word	0x00010004

08006c4c <HAL_I2C_Mem_Write>:
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af02      	add	r7, sp, #8
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	4608      	mov	r0, r1
 8006c56:	4611      	mov	r1, r2
 8006c58:	461a      	mov	r2, r3
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	817b      	strh	r3, [r7, #10]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	813b      	strh	r3, [r7, #8]
 8006c62:	4613      	mov	r3, r2
 8006c64:	80fb      	strh	r3, [r7, #6]
 8006c66:	f7fe f905 	bl	8004e74 <HAL_GetTick>
 8006c6a:	6178      	str	r0, [r7, #20]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b20      	cmp	r3, #32
 8006c76:	f040 80d9 	bne.w	8006e2c <HAL_I2C_Mem_Write+0x1e0>
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	2319      	movs	r3, #25
 8006c80:	2201      	movs	r2, #1
 8006c82:	496d      	ldr	r1, [pc, #436]	; (8006e38 <HAL_I2C_Mem_Write+0x1ec>)
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 fdcf 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <HAL_I2C_Mem_Write+0x48>
 8006c90:	2302      	movs	r3, #2
 8006c92:	e0cc      	b.n	8006e2e <HAL_I2C_Mem_Write+0x1e2>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d101      	bne.n	8006ca2 <HAL_I2C_Mem_Write+0x56>
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	e0c5      	b.n	8006e2e <HAL_I2C_Mem_Write+0x1e2>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d007      	beq.n	8006cc8 <HAL_I2C_Mem_Write+0x7c>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f042 0201 	orr.w	r2, r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2221      	movs	r2, #33	; 0x21
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2240      	movs	r2, #64	; 0x40
 8006ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	641a      	str	r2, [r3, #64]	; 0x40
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6a3a      	ldr	r2, [r7, #32]
 8006cf2:	625a      	str	r2, [r3, #36]	; 0x24
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	851a      	strh	r2, [r3, #40]	; 0x28
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4a4d      	ldr	r2, [pc, #308]	; (8006e3c <HAL_I2C_Mem_Write+0x1f0>)
 8006d08:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d0a:	88f8      	ldrh	r0, [r7, #6]
 8006d0c:	893a      	ldrh	r2, [r7, #8]
 8006d0e:	8979      	ldrh	r1, [r7, #10]
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	9301      	str	r3, [sp, #4]
 8006d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	4603      	mov	r3, r0
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 fc06 	bl	800752c <I2C_RequestMemoryWrite>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d052      	beq.n	8006dcc <HAL_I2C_Mem_Write+0x180>
 8006d26:	2301      	movs	r3, #1
 8006d28:	e081      	b.n	8006e2e <HAL_I2C_Mem_Write+0x1e2>
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 fe50 	bl	80079d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00d      	beq.n	8006d56 <HAL_I2C_Mem_Write+0x10a>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	2b04      	cmp	r3, #4
 8006d40:	d107      	bne.n	8006d52 <HAL_I2C_Mem_Write+0x106>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	2301      	movs	r3, #1
 8006d54:	e06b      	b.n	8006e2e <HAL_I2C_Mem_Write+0x1e2>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5a:	781a      	ldrb	r2, [r3, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	611a      	str	r2, [r3, #16]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	625a      	str	r2, [r3, #36]	; 0x24
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d70:	3b01      	subs	r3, #1
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	851a      	strh	r2, [r3, #40]	; 0x28
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	f003 0304 	and.w	r3, r3, #4
 8006d90:	2b04      	cmp	r3, #4
 8006d92:	d11b      	bne.n	8006dcc <HAL_I2C_Mem_Write+0x180>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d017      	beq.n	8006dcc <HAL_I2C_Mem_Write+0x180>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da0:	781a      	ldrb	r2, [r3, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	611a      	str	r2, [r3, #16]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	625a      	str	r2, [r3, #36]	; 0x24
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db6:	3b01      	subs	r3, #1
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	851a      	strh	r2, [r3, #40]	; 0x28
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1aa      	bne.n	8006d2a <HAL_I2C_Mem_Write+0xde>
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 fe3c 	bl	8007a56 <I2C_WaitOnBTFFlagUntilTimeout>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00d      	beq.n	8006e00 <HAL_I2C_Mem_Write+0x1b4>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de8:	2b04      	cmp	r3, #4
 8006dea:	d107      	bne.n	8006dfc <HAL_I2C_Mem_Write+0x1b0>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e016      	b.n	8006e2e <HAL_I2C_Mem_Write+0x1e2>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2220      	movs	r2, #32
 8006e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e28:	2300      	movs	r3, #0
 8006e2a:	e000      	b.n	8006e2e <HAL_I2C_Mem_Write+0x1e2>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	00100002 	.word	0x00100002
 8006e3c:	ffff0000 	.word	0xffff0000

08006e40 <HAL_I2C_Mem_Read>:
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08c      	sub	sp, #48	; 0x30
 8006e44:	af02      	add	r7, sp, #8
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	4608      	mov	r0, r1
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	4603      	mov	r3, r0
 8006e50:	817b      	strh	r3, [r7, #10]
 8006e52:	460b      	mov	r3, r1
 8006e54:	813b      	strh	r3, [r7, #8]
 8006e56:	4613      	mov	r3, r2
 8006e58:	80fb      	strh	r3, [r7, #6]
 8006e5a:	f7fe f80b 	bl	8004e74 <HAL_GetTick>
 8006e5e:	6278      	str	r0, [r7, #36]	; 0x24
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b20      	cmp	r3, #32
 8006e6a:	f040 8208 	bne.w	800727e <HAL_I2C_Mem_Read+0x43e>
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	2319      	movs	r3, #25
 8006e74:	2201      	movs	r2, #1
 8006e76:	497b      	ldr	r1, [pc, #492]	; (8007064 <HAL_I2C_Mem_Read+0x224>)
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 fcd5 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d001      	beq.n	8006e88 <HAL_I2C_Mem_Read+0x48>
 8006e84:	2302      	movs	r3, #2
 8006e86:	e1fb      	b.n	8007280 <HAL_I2C_Mem_Read+0x440>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d101      	bne.n	8006e96 <HAL_I2C_Mem_Read+0x56>
 8006e92:	2302      	movs	r3, #2
 8006e94:	e1f4      	b.n	8007280 <HAL_I2C_Mem_Read+0x440>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d007      	beq.n	8006ebc <HAL_I2C_Mem_Read+0x7c>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f042 0201 	orr.w	r2, r2, #1
 8006eba:	601a      	str	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2222      	movs	r2, #34	; 0x22
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2240      	movs	r2, #64	; 0x40
 8006ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	641a      	str	r2, [r3, #64]	; 0x40
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ee6:	625a      	str	r2, [r3, #36]	; 0x24
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006eec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	851a      	strh	r2, [r3, #40]	; 0x28
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	4a5b      	ldr	r2, [pc, #364]	; (8007068 <HAL_I2C_Mem_Read+0x228>)
 8006efc:	62da      	str	r2, [r3, #44]	; 0x2c
 8006efe:	88f8      	ldrh	r0, [r7, #6]
 8006f00:	893a      	ldrh	r2, [r7, #8]
 8006f02:	8979      	ldrh	r1, [r7, #10]
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	9301      	str	r3, [sp, #4]
 8006f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f000 fba2 	bl	8007658 <I2C_RequestMemoryRead>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <HAL_I2C_Mem_Read+0xde>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e1b0      	b.n	8007280 <HAL_I2C_Mem_Read+0x440>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d113      	bne.n	8006f4e <HAL_I2C_Mem_Read+0x10e>
 8006f26:	2300      	movs	r3, #0
 8006f28:	623b      	str	r3, [r7, #32]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	623b      	str	r3, [r7, #32]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	623b      	str	r3, [r7, #32]
 8006f3a:	6a3b      	ldr	r3, [r7, #32]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	e184      	b.n	8007258 <HAL_I2C_Mem_Read+0x418>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d11b      	bne.n	8006f8e <HAL_I2C_Mem_Read+0x14e>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	2300      	movs	r3, #0
 8006f68:	61fb      	str	r3, [r7, #28]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	61fb      	str	r3, [r7, #28]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	61fb      	str	r3, [r7, #28]
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	e164      	b.n	8007258 <HAL_I2C_Mem_Read+0x418>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d11b      	bne.n	8006fce <HAL_I2C_Mem_Read+0x18e>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fa4:	601a      	str	r2, [r3, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	61bb      	str	r3, [r7, #24]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	61bb      	str	r3, [r7, #24]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	61bb      	str	r3, [r7, #24]
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	e144      	b.n	8007258 <HAL_I2C_Mem_Read+0x418>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	617b      	str	r3, [r7, #20]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	617b      	str	r3, [r7, #20]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	617b      	str	r3, [r7, #20]
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	e138      	b.n	8007258 <HAL_I2C_Mem_Read+0x418>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	f200 80f1 	bhi.w	80071d2 <HAL_I2C_Mem_Read+0x392>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d123      	bne.n	8007040 <HAL_I2C_Mem_Read+0x200>
 8006ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ffa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 fd6b 	bl	8007ad8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <HAL_I2C_Mem_Read+0x1cc>
 8007008:	2301      	movs	r3, #1
 800700a:	e139      	b.n	8007280 <HAL_I2C_Mem_Read+0x440>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	691a      	ldr	r2, [r3, #16]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	b2d2      	uxtb	r2, r2
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	1c5a      	adds	r2, r3, #1
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	625a      	str	r2, [r3, #36]	; 0x24
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007028:	3b01      	subs	r3, #1
 800702a:	b29a      	uxth	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007034:	b29b      	uxth	r3, r3
 8007036:	3b01      	subs	r3, #1
 8007038:	b29a      	uxth	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800703e:	e10b      	b.n	8007258 <HAL_I2C_Mem_Read+0x418>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007044:	2b02      	cmp	r3, #2
 8007046:	d14e      	bne.n	80070e6 <HAL_I2C_Mem_Read+0x2a6>
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704e:	2200      	movs	r2, #0
 8007050:	4906      	ldr	r1, [pc, #24]	; (800706c <HAL_I2C_Mem_Read+0x22c>)
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 fbe8 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d008      	beq.n	8007070 <HAL_I2C_Mem_Read+0x230>
 800705e:	2301      	movs	r3, #1
 8007060:	e10e      	b.n	8007280 <HAL_I2C_Mem_Read+0x440>
 8007062:	bf00      	nop
 8007064:	00100002 	.word	0x00100002
 8007068:	ffff0000 	.word	0xffff0000
 800706c:	00010004 	.word	0x00010004
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	691a      	ldr	r2, [r3, #16]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708a:	b2d2      	uxtb	r2, r2
 800708c:	701a      	strb	r2, [r3, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	625a      	str	r2, [r3, #36]	; 0x24
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800709c:	3b01      	subs	r3, #1
 800709e:	b29a      	uxth	r2, r3
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	851a      	strh	r2, [r3, #40]	; 0x28
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	3b01      	subs	r3, #1
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	691a      	ldr	r2, [r3, #16]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	b2d2      	uxtb	r2, r2
 80070be:	701a      	strb	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	625a      	str	r2, [r3, #36]	; 0x24
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ce:	3b01      	subs	r3, #1
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	851a      	strh	r2, [r3, #40]	; 0x28
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070da:	b29b      	uxth	r3, r3
 80070dc:	3b01      	subs	r3, #1
 80070de:	b29a      	uxth	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070e4:	e0b8      	b.n	8007258 <HAL_I2C_Mem_Read+0x418>
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ec:	2200      	movs	r2, #0
 80070ee:	4966      	ldr	r1, [pc, #408]	; (8007288 <HAL_I2C_Mem_Read+0x448>)
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 fb99 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <HAL_I2C_Mem_Read+0x2c0>
 80070fc:	2301      	movs	r3, #1
 80070fe:	e0bf      	b.n	8007280 <HAL_I2C_Mem_Read+0x440>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800710e:	601a      	str	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	691a      	ldr	r2, [r3, #16]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	b2d2      	uxtb	r2, r2
 800711c:	701a      	strb	r2, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	1c5a      	adds	r2, r3, #1
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	625a      	str	r2, [r3, #36]	; 0x24
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800712c:	3b01      	subs	r3, #1
 800712e:	b29a      	uxth	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	851a      	strh	r2, [r3, #40]	; 0x28
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007138:	b29b      	uxth	r3, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	b29a      	uxth	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007148:	2200      	movs	r2, #0
 800714a:	494f      	ldr	r1, [pc, #316]	; (8007288 <HAL_I2C_Mem_Read+0x448>)
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 fb6b 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d001      	beq.n	800715c <HAL_I2C_Mem_Read+0x31c>
 8007158:	2301      	movs	r3, #1
 800715a:	e091      	b.n	8007280 <HAL_I2C_Mem_Read+0x440>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	691a      	ldr	r2, [r3, #16]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007176:	b2d2      	uxtb	r2, r2
 8007178:	701a      	strb	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717e:	1c5a      	adds	r2, r3, #1
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	625a      	str	r2, [r3, #36]	; 0x24
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007188:	3b01      	subs	r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007194:	b29b      	uxth	r3, r3
 8007196:	3b01      	subs	r3, #1
 8007198:	b29a      	uxth	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	691a      	ldr	r2, [r3, #16]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a8:	b2d2      	uxtb	r2, r2
 80071aa:	701a      	strb	r2, [r3, #0]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b0:	1c5a      	adds	r2, r3, #1
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	625a      	str	r2, [r3, #36]	; 0x24
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071ba:	3b01      	subs	r3, #1
 80071bc:	b29a      	uxth	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	851a      	strh	r2, [r3, #40]	; 0x28
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	3b01      	subs	r3, #1
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80071d0:	e042      	b.n	8007258 <HAL_I2C_Mem_Read+0x418>
 80071d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f000 fc7e 	bl	8007ad8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <HAL_I2C_Mem_Read+0x3a6>
 80071e2:	2301      	movs	r3, #1
 80071e4:	e04c      	b.n	8007280 <HAL_I2C_Mem_Read+0x440>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	691a      	ldr	r2, [r3, #16]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f0:	b2d2      	uxtb	r2, r2
 80071f2:	701a      	strb	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	625a      	str	r2, [r3, #36]	; 0x24
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007202:	3b01      	subs	r3, #1
 8007204:	b29a      	uxth	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	851a      	strh	r2, [r3, #40]	; 0x28
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800720e:	b29b      	uxth	r3, r3
 8007210:	3b01      	subs	r3, #1
 8007212:	b29a      	uxth	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	f003 0304 	and.w	r3, r3, #4
 8007222:	2b04      	cmp	r3, #4
 8007224:	d118      	bne.n	8007258 <HAL_I2C_Mem_Read+0x418>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	691a      	ldr	r2, [r3, #16]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007230:	b2d2      	uxtb	r2, r2
 8007232:	701a      	strb	r2, [r3, #0]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	625a      	str	r2, [r3, #36]	; 0x24
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007242:	3b01      	subs	r3, #1
 8007244:	b29a      	uxth	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	851a      	strh	r2, [r3, #40]	; 0x28
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800724e:	b29b      	uxth	r3, r3
 8007250:	3b01      	subs	r3, #1
 8007252:	b29a      	uxth	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800725c:	2b00      	cmp	r3, #0
 800725e:	f47f aec2 	bne.w	8006fe6 <HAL_I2C_Mem_Read+0x1a6>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2220      	movs	r2, #32
 8007266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800727a:	2300      	movs	r3, #0
 800727c:	e000      	b.n	8007280 <HAL_I2C_Mem_Read+0x440>
 800727e:	2302      	movs	r3, #2
 8007280:	4618      	mov	r0, r3
 8007282:	3728      	adds	r7, #40	; 0x28
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	00010004 	.word	0x00010004

0800728c <I2C_MasterRequestWrite>:
 800728c:	b580      	push	{r7, lr}
 800728e:	b088      	sub	sp, #32
 8007290:	af02      	add	r7, sp, #8
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	607a      	str	r2, [r7, #4]
 8007296:	603b      	str	r3, [r7, #0]
 8007298:	460b      	mov	r3, r1
 800729a:	817b      	strh	r3, [r7, #10]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a0:	617b      	str	r3, [r7, #20]
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2b08      	cmp	r3, #8
 80072a6:	d006      	beq.n	80072b6 <I2C_MasterRequestWrite+0x2a>
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d003      	beq.n	80072b6 <I2C_MasterRequestWrite+0x2a>
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80072b4:	d108      	bne.n	80072c8 <I2C_MasterRequestWrite+0x3c>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	e00b      	b.n	80072e0 <I2C_MasterRequestWrite+0x54>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072cc:	2b12      	cmp	r3, #18
 80072ce:	d107      	bne.n	80072e0 <I2C_MasterRequestWrite+0x54>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 fa9b 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00d      	beq.n	8007314 <I2C_MasterRequestWrite+0x88>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007306:	d103      	bne.n	8007310 <I2C_MasterRequestWrite+0x84>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800730e:	641a      	str	r2, [r3, #64]	; 0x40
 8007310:	2303      	movs	r3, #3
 8007312:	e035      	b.n	8007380 <I2C_MasterRequestWrite+0xf4>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800731c:	d108      	bne.n	8007330 <I2C_MasterRequestWrite+0xa4>
 800731e:	897b      	ldrh	r3, [r7, #10]
 8007320:	b2db      	uxtb	r3, r3
 8007322:	461a      	mov	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800732c:	611a      	str	r2, [r3, #16]
 800732e:	e01b      	b.n	8007368 <I2C_MasterRequestWrite+0xdc>
 8007330:	897b      	ldrh	r3, [r7, #10]
 8007332:	11db      	asrs	r3, r3, #7
 8007334:	b2db      	uxtb	r3, r3
 8007336:	f003 0306 	and.w	r3, r3, #6
 800733a:	b2db      	uxtb	r3, r3
 800733c:	f063 030f 	orn	r3, r3, #15
 8007340:	b2da      	uxtb	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	611a      	str	r2, [r3, #16]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	490e      	ldr	r1, [pc, #56]	; (8007388 <I2C_MasterRequestWrite+0xfc>)
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 fac1 	bl	80078d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <I2C_MasterRequestWrite+0xd2>
 800735a:	2301      	movs	r3, #1
 800735c:	e010      	b.n	8007380 <I2C_MasterRequestWrite+0xf4>
 800735e:	897b      	ldrh	r3, [r7, #10]
 8007360:	b2da      	uxtb	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	611a      	str	r2, [r3, #16]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	4907      	ldr	r1, [pc, #28]	; (800738c <I2C_MasterRequestWrite+0x100>)
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f000 fab1 	bl	80078d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <I2C_MasterRequestWrite+0xf2>
 800737a:	2301      	movs	r3, #1
 800737c:	e000      	b.n	8007380 <I2C_MasterRequestWrite+0xf4>
 800737e:	2300      	movs	r3, #0
 8007380:	4618      	mov	r0, r3
 8007382:	3718      	adds	r7, #24
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	00010008 	.word	0x00010008
 800738c:	00010002 	.word	0x00010002

08007390 <I2C_MasterRequestRead>:
 8007390:	b580      	push	{r7, lr}
 8007392:	b088      	sub	sp, #32
 8007394:	af02      	add	r7, sp, #8
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	607a      	str	r2, [r7, #4]
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	460b      	mov	r3, r1
 800739e:	817b      	strh	r3, [r7, #10]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b08      	cmp	r3, #8
 80073ba:	d006      	beq.n	80073ca <I2C_MasterRequestRead+0x3a>
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d003      	beq.n	80073ca <I2C_MasterRequestRead+0x3a>
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80073c8:	d108      	bne.n	80073dc <I2C_MasterRequestRead+0x4c>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073d8:	601a      	str	r2, [r3, #0]
 80073da:	e00b      	b.n	80073f4 <I2C_MasterRequestRead+0x64>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e0:	2b11      	cmp	r3, #17
 80073e2:	d107      	bne.n	80073f4 <I2C_MasterRequestRead+0x64>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 fa11 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00d      	beq.n	8007428 <I2C_MasterRequestRead+0x98>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800741a:	d103      	bne.n	8007424 <I2C_MasterRequestRead+0x94>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007422:	641a      	str	r2, [r3, #64]	; 0x40
 8007424:	2303      	movs	r3, #3
 8007426:	e079      	b.n	800751c <I2C_MasterRequestRead+0x18c>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007430:	d108      	bne.n	8007444 <I2C_MasterRequestRead+0xb4>
 8007432:	897b      	ldrh	r3, [r7, #10]
 8007434:	b2db      	uxtb	r3, r3
 8007436:	f043 0301 	orr.w	r3, r3, #1
 800743a:	b2da      	uxtb	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	611a      	str	r2, [r3, #16]
 8007442:	e05f      	b.n	8007504 <I2C_MasterRequestRead+0x174>
 8007444:	897b      	ldrh	r3, [r7, #10]
 8007446:	11db      	asrs	r3, r3, #7
 8007448:	b2db      	uxtb	r3, r3
 800744a:	f003 0306 	and.w	r3, r3, #6
 800744e:	b2db      	uxtb	r3, r3
 8007450:	f063 030f 	orn	r3, r3, #15
 8007454:	b2da      	uxtb	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	611a      	str	r2, [r3, #16]
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	4930      	ldr	r1, [pc, #192]	; (8007524 <I2C_MasterRequestRead+0x194>)
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 fa37 	bl	80078d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <I2C_MasterRequestRead+0xe2>
 800746e:	2301      	movs	r3, #1
 8007470:	e054      	b.n	800751c <I2C_MasterRequestRead+0x18c>
 8007472:	897b      	ldrh	r3, [r7, #10]
 8007474:	b2da      	uxtb	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	611a      	str	r2, [r3, #16]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	4929      	ldr	r1, [pc, #164]	; (8007528 <I2C_MasterRequestRead+0x198>)
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f000 fa27 	bl	80078d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d001      	beq.n	8007492 <I2C_MasterRequestRead+0x102>
 800748e:	2301      	movs	r3, #1
 8007490:	e044      	b.n	800751c <I2C_MasterRequestRead+0x18c>
 8007492:	2300      	movs	r3, #0
 8007494:	613b      	str	r3, [r7, #16]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	613b      	str	r3, [r7, #16]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	613b      	str	r3, [r7, #16]
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 f9af 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00d      	beq.n	80074ec <I2C_MasterRequestRead+0x15c>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074de:	d103      	bne.n	80074e8 <I2C_MasterRequestRead+0x158>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074e6:	641a      	str	r2, [r3, #64]	; 0x40
 80074e8:	2303      	movs	r3, #3
 80074ea:	e017      	b.n	800751c <I2C_MasterRequestRead+0x18c>
 80074ec:	897b      	ldrh	r3, [r7, #10]
 80074ee:	11db      	asrs	r3, r3, #7
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	f003 0306 	and.w	r3, r3, #6
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	f063 030e 	orn	r3, r3, #14
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	611a      	str	r2, [r3, #16]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	4907      	ldr	r1, [pc, #28]	; (8007528 <I2C_MasterRequestRead+0x198>)
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 f9e3 	bl	80078d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <I2C_MasterRequestRead+0x18a>
 8007516:	2301      	movs	r3, #1
 8007518:	e000      	b.n	800751c <I2C_MasterRequestRead+0x18c>
 800751a:	2300      	movs	r3, #0
 800751c:	4618      	mov	r0, r3
 800751e:	3718      	adds	r7, #24
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	00010008 	.word	0x00010008
 8007528:	00010002 	.word	0x00010002

0800752c <I2C_RequestMemoryWrite>:
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af02      	add	r7, sp, #8
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	4608      	mov	r0, r1
 8007536:	4611      	mov	r1, r2
 8007538:	461a      	mov	r2, r3
 800753a:	4603      	mov	r3, r0
 800753c:	817b      	strh	r3, [r7, #10]
 800753e:	460b      	mov	r3, r1
 8007540:	813b      	strh	r3, [r7, #8]
 8007542:	4613      	mov	r3, r2
 8007544:	80fb      	strh	r3, [r7, #6]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007554:	601a      	str	r2, [r3, #0]
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	2200      	movs	r2, #0
 800755e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 f960 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00d      	beq.n	800758a <I2C_RequestMemoryWrite+0x5e>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800757c:	d103      	bne.n	8007586 <I2C_RequestMemoryWrite+0x5a>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007584:	641a      	str	r2, [r3, #64]	; 0x40
 8007586:	2303      	movs	r3, #3
 8007588:	e05f      	b.n	800764a <I2C_RequestMemoryWrite+0x11e>
 800758a:	897b      	ldrh	r3, [r7, #10]
 800758c:	b2db      	uxtb	r3, r3
 800758e:	461a      	mov	r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007598:	611a      	str	r2, [r3, #16]
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	6a3a      	ldr	r2, [r7, #32]
 800759e:	492d      	ldr	r1, [pc, #180]	; (8007654 <I2C_RequestMemoryWrite+0x128>)
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f000 f998 	bl	80078d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d001      	beq.n	80075b0 <I2C_RequestMemoryWrite+0x84>
 80075ac:	2301      	movs	r3, #1
 80075ae:	e04c      	b.n	800764a <I2C_RequestMemoryWrite+0x11e>
 80075b0:	2300      	movs	r3, #0
 80075b2:	617b      	str	r3, [r7, #20]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	617b      	str	r3, [r7, #20]
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075c8:	6a39      	ldr	r1, [r7, #32]
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f000 fa02 	bl	80079d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00d      	beq.n	80075f2 <I2C_RequestMemoryWrite+0xc6>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	2b04      	cmp	r3, #4
 80075dc:	d107      	bne.n	80075ee <I2C_RequestMemoryWrite+0xc2>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	2301      	movs	r3, #1
 80075f0:	e02b      	b.n	800764a <I2C_RequestMemoryWrite+0x11e>
 80075f2:	88fb      	ldrh	r3, [r7, #6]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d105      	bne.n	8007604 <I2C_RequestMemoryWrite+0xd8>
 80075f8:	893b      	ldrh	r3, [r7, #8]
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	611a      	str	r2, [r3, #16]
 8007602:	e021      	b.n	8007648 <I2C_RequestMemoryWrite+0x11c>
 8007604:	893b      	ldrh	r3, [r7, #8]
 8007606:	0a1b      	lsrs	r3, r3, #8
 8007608:	b29b      	uxth	r3, r3
 800760a:	b2da      	uxtb	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	611a      	str	r2, [r3, #16]
 8007612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007614:	6a39      	ldr	r1, [r7, #32]
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 f9dc 	bl	80079d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00d      	beq.n	800763e <I2C_RequestMemoryWrite+0x112>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007626:	2b04      	cmp	r3, #4
 8007628:	d107      	bne.n	800763a <I2C_RequestMemoryWrite+0x10e>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007638:	601a      	str	r2, [r3, #0]
 800763a:	2301      	movs	r3, #1
 800763c:	e005      	b.n	800764a <I2C_RequestMemoryWrite+0x11e>
 800763e:	893b      	ldrh	r3, [r7, #8]
 8007640:	b2da      	uxtb	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	611a      	str	r2, [r3, #16]
 8007648:	2300      	movs	r3, #0
 800764a:	4618      	mov	r0, r3
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	00010002 	.word	0x00010002

08007658 <I2C_RequestMemoryRead>:
 8007658:	b580      	push	{r7, lr}
 800765a:	b088      	sub	sp, #32
 800765c:	af02      	add	r7, sp, #8
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	4608      	mov	r0, r1
 8007662:	4611      	mov	r1, r2
 8007664:	461a      	mov	r2, r3
 8007666:	4603      	mov	r3, r0
 8007668:	817b      	strh	r3, [r7, #10]
 800766a:	460b      	mov	r3, r1
 800766c:	813b      	strh	r3, [r7, #8]
 800766e:	4613      	mov	r3, r2
 8007670:	80fb      	strh	r3, [r7, #6]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007680:	601a      	str	r2, [r3, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	2200      	movs	r2, #0
 800769a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 f8c2 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00d      	beq.n	80076c6 <I2C_RequestMemoryRead+0x6e>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b8:	d103      	bne.n	80076c2 <I2C_RequestMemoryRead+0x6a>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076c0:	641a      	str	r2, [r3, #64]	; 0x40
 80076c2:	2303      	movs	r3, #3
 80076c4:	e0aa      	b.n	800781c <I2C_RequestMemoryRead+0x1c4>
 80076c6:	897b      	ldrh	r3, [r7, #10]
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	461a      	mov	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80076d4:	611a      	str	r2, [r3, #16]
 80076d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d8:	6a3a      	ldr	r2, [r7, #32]
 80076da:	4952      	ldr	r1, [pc, #328]	; (8007824 <I2C_RequestMemoryRead+0x1cc>)
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 f8fa 	bl	80078d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d001      	beq.n	80076ec <I2C_RequestMemoryRead+0x94>
 80076e8:	2301      	movs	r3, #1
 80076ea:	e097      	b.n	800781c <I2C_RequestMemoryRead+0x1c4>
 80076ec:	2300      	movs	r3, #0
 80076ee:	617b      	str	r3, [r7, #20]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	617b      	str	r3, [r7, #20]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	617b      	str	r3, [r7, #20]
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007704:	6a39      	ldr	r1, [r7, #32]
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f000 f964 	bl	80079d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00d      	beq.n	800772e <I2C_RequestMemoryRead+0xd6>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007716:	2b04      	cmp	r3, #4
 8007718:	d107      	bne.n	800772a <I2C_RequestMemoryRead+0xd2>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	2301      	movs	r3, #1
 800772c:	e076      	b.n	800781c <I2C_RequestMemoryRead+0x1c4>
 800772e:	88fb      	ldrh	r3, [r7, #6]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d105      	bne.n	8007740 <I2C_RequestMemoryRead+0xe8>
 8007734:	893b      	ldrh	r3, [r7, #8]
 8007736:	b2da      	uxtb	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	611a      	str	r2, [r3, #16]
 800773e:	e021      	b.n	8007784 <I2C_RequestMemoryRead+0x12c>
 8007740:	893b      	ldrh	r3, [r7, #8]
 8007742:	0a1b      	lsrs	r3, r3, #8
 8007744:	b29b      	uxth	r3, r3
 8007746:	b2da      	uxtb	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	611a      	str	r2, [r3, #16]
 800774e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007750:	6a39      	ldr	r1, [r7, #32]
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f000 f93e 	bl	80079d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00d      	beq.n	800777a <I2C_RequestMemoryRead+0x122>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	2b04      	cmp	r3, #4
 8007764:	d107      	bne.n	8007776 <I2C_RequestMemoryRead+0x11e>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007774:	601a      	str	r2, [r3, #0]
 8007776:	2301      	movs	r3, #1
 8007778:	e050      	b.n	800781c <I2C_RequestMemoryRead+0x1c4>
 800777a:	893b      	ldrh	r3, [r7, #8]
 800777c:	b2da      	uxtb	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	611a      	str	r2, [r3, #16]
 8007784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007786:	6a39      	ldr	r1, [r7, #32]
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f000 f923 	bl	80079d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00d      	beq.n	80077b0 <I2C_RequestMemoryRead+0x158>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007798:	2b04      	cmp	r3, #4
 800779a:	d107      	bne.n	80077ac <I2C_RequestMemoryRead+0x154>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	2301      	movs	r3, #1
 80077ae:	e035      	b.n	800781c <I2C_RequestMemoryRead+0x1c4>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	6a3b      	ldr	r3, [r7, #32]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 f82b 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00d      	beq.n	80077f4 <I2C_RequestMemoryRead+0x19c>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077e6:	d103      	bne.n	80077f0 <I2C_RequestMemoryRead+0x198>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077ee:	641a      	str	r2, [r3, #64]	; 0x40
 80077f0:	2303      	movs	r3, #3
 80077f2:	e013      	b.n	800781c <I2C_RequestMemoryRead+0x1c4>
 80077f4:	897b      	ldrh	r3, [r7, #10]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	f043 0301 	orr.w	r3, r3, #1
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	611a      	str	r2, [r3, #16]
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	6a3a      	ldr	r2, [r7, #32]
 8007808:	4906      	ldr	r1, [pc, #24]	; (8007824 <I2C_RequestMemoryRead+0x1cc>)
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f000 f863 	bl	80078d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d001      	beq.n	800781a <I2C_RequestMemoryRead+0x1c2>
 8007816:	2301      	movs	r3, #1
 8007818:	e000      	b.n	800781c <I2C_RequestMemoryRead+0x1c4>
 800781a:	2300      	movs	r3, #0
 800781c:	4618      	mov	r0, r3
 800781e:	3718      	adds	r7, #24
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	00010002 	.word	0x00010002

08007828 <I2C_WaitOnFlagUntilTimeout>:
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	603b      	str	r3, [r7, #0]
 8007834:	4613      	mov	r3, r2
 8007836:	71fb      	strb	r3, [r7, #7]
 8007838:	e025      	b.n	8007886 <I2C_WaitOnFlagUntilTimeout+0x5e>
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007840:	d021      	beq.n	8007886 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8007842:	f7fd fb17 	bl	8004e74 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	429a      	cmp	r2, r3
 8007850:	d302      	bcc.n	8007858 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d116      	bne.n	8007886 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	631a      	str	r2, [r3, #48]	; 0x30
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2220      	movs	r2, #32
 8007862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	f043 0220 	orr.w	r2, r3, #32
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	641a      	str	r2, [r3, #64]	; 0x40
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007882:	2301      	movs	r3, #1
 8007884:	e023      	b.n	80078ce <I2C_WaitOnFlagUntilTimeout+0xa6>
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	0c1b      	lsrs	r3, r3, #16
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b01      	cmp	r3, #1
 800788e:	d10d      	bne.n	80078ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	43da      	mvns	r2, r3
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	4013      	ands	r3, r2
 800789c:	b29b      	uxth	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	bf0c      	ite	eq
 80078a2:	2301      	moveq	r3, #1
 80078a4:	2300      	movne	r3, #0
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	461a      	mov	r2, r3
 80078aa:	e00c      	b.n	80078c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	43da      	mvns	r2, r3
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	4013      	ands	r3, r2
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	bf0c      	ite	eq
 80078be:	2301      	moveq	r3, #1
 80078c0:	2300      	movne	r3, #0
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	461a      	mov	r2, r3
 80078c6:	79fb      	ldrb	r3, [r7, #7]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d0b6      	beq.n	800783a <I2C_WaitOnFlagUntilTimeout+0x12>
 80078cc:	2300      	movs	r3, #0
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	af00      	add	r7, sp, #0
 80078dc:	60f8      	str	r0, [r7, #12]
 80078de:	60b9      	str	r1, [r7, #8]
 80078e0:	607a      	str	r2, [r7, #4]
 80078e2:	603b      	str	r3, [r7, #0]
 80078e4:	e051      	b.n	800798a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078f4:	d123      	bne.n	800793e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007904:	601a      	str	r2, [r3, #0]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800790e:	615a      	str	r2, [r3, #20]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	631a      	str	r2, [r3, #48]	; 0x30
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2220      	movs	r2, #32
 800791a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792a:	f043 0204 	orr.w	r2, r3, #4
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	641a      	str	r2, [r3, #64]	; 0x40
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800793a:	2301      	movs	r3, #1
 800793c:	e046      	b.n	80079cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007944:	d021      	beq.n	800798a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8007946:	f7fd fa95 	bl	8004e74 <HAL_GetTick>
 800794a:	4602      	mov	r2, r0
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	1ad3      	subs	r3, r2, r3
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	429a      	cmp	r2, r3
 8007954:	d302      	bcc.n	800795c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d116      	bne.n	800798a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	631a      	str	r2, [r3, #48]	; 0x30
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2220      	movs	r2, #32
 8007966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007976:	f043 0220 	orr.w	r2, r3, #32
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	641a      	str	r2, [r3, #64]	; 0x40
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007986:	2301      	movs	r3, #1
 8007988:	e020      	b.n	80079cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	0c1b      	lsrs	r3, r3, #16
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b01      	cmp	r3, #1
 8007992:	d10c      	bne.n	80079ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	43da      	mvns	r2, r3
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	4013      	ands	r3, r2
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	bf14      	ite	ne
 80079a6:	2301      	movne	r3, #1
 80079a8:	2300      	moveq	r3, #0
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	e00b      	b.n	80079c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	43da      	mvns	r2, r3
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	4013      	ands	r3, r2
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	2b00      	cmp	r3, #0
 80079be:	bf14      	ite	ne
 80079c0:	2301      	movne	r3, #1
 80079c2:	2300      	moveq	r3, #0
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d18d      	bne.n	80078e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80079ca:	2300      	movs	r3, #0
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <I2C_WaitOnTXEFlagUntilTimeout>:
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
 80079e0:	e02d      	b.n	8007a3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f000 f8ce 	bl	8007b84 <I2C_IsAcknowledgeFailed>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d001      	beq.n	80079f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 80079ee:	2301      	movs	r3, #1
 80079f0:	e02d      	b.n	8007a4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f8:	d021      	beq.n	8007a3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80079fa:	f7fd fa3b 	bl	8004e74 <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	68ba      	ldr	r2, [r7, #8]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d302      	bcc.n	8007a10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d116      	bne.n	8007a3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	631a      	str	r2, [r3, #48]	; 0x30
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2a:	f043 0220 	orr.w	r2, r3, #32
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	641a      	str	r2, [r3, #64]	; 0x40
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e007      	b.n	8007a4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a48:	2b80      	cmp	r3, #128	; 0x80
 8007a4a:	d1ca      	bne.n	80079e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <I2C_WaitOnBTFFlagUntilTimeout>:
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b084      	sub	sp, #16
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	60f8      	str	r0, [r7, #12]
 8007a5e:	60b9      	str	r1, [r7, #8]
 8007a60:	607a      	str	r2, [r7, #4]
 8007a62:	e02d      	b.n	8007ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 f88d 	bl	8007b84 <I2C_IsAcknowledgeFailed>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8007a70:	2301      	movs	r3, #1
 8007a72:	e02d      	b.n	8007ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7a:	d021      	beq.n	8007ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8007a7c:	f7fd f9fa 	bl	8004e74 <HAL_GetTick>
 8007a80:	4602      	mov	r2, r0
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d302      	bcc.n	8007a92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d116      	bne.n	8007ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	631a      	str	r2, [r3, #48]	; 0x30
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aac:	f043 0220 	orr.w	r2, r3, #32
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	641a      	str	r2, [r3, #64]	; 0x40
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007abc:	2301      	movs	r3, #1
 8007abe:	e007      	b.n	8007ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	f003 0304 	and.w	r3, r3, #4
 8007aca:	2b04      	cmp	r3, #4
 8007acc:	d1ca      	bne.n	8007a64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
 8007ae4:	e042      	b.n	8007b6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	695b      	ldr	r3, [r3, #20]
 8007aec:	f003 0310 	and.w	r3, r3, #16
 8007af0:	2b10      	cmp	r3, #16
 8007af2:	d119      	bne.n	8007b28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f06f 0210 	mvn.w	r2, #16
 8007afc:	615a      	str	r2, [r3, #20]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	631a      	str	r2, [r3, #48]	; 0x30
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2220      	movs	r2, #32
 8007b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	641a      	str	r2, [r3, #64]	; 0x40
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007b24:	2301      	movs	r3, #1
 8007b26:	e029      	b.n	8007b7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8007b28:	f7fd f9a4 	bl	8004e74 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d302      	bcc.n	8007b3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d116      	bne.n	8007b6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	631a      	str	r2, [r3, #48]	; 0x30
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2220      	movs	r2, #32
 8007b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b58:	f043 0220 	orr.w	r2, r3, #32
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	641a      	str	r2, [r3, #64]	; 0x40
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e007      	b.n	8007b7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b76:	2b40      	cmp	r3, #64	; 0x40
 8007b78:	d1b5      	bne.n	8007ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <I2C_IsAcknowledgeFailed>:
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b9a:	d11b      	bne.n	8007bd4 <I2C_IsAcknowledgeFailed+0x50>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ba4:	615a      	str	r2, [r3, #20]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	631a      	str	r2, [r3, #48]	; 0x30
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc0:	f043 0204 	orr.w	r2, r3, #4
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	641a      	str	r2, [r3, #64]	; 0x40
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e000      	b.n	8007bd6 <I2C_IsAcknowledgeFailed+0x52>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <HAL_PCD_Init>:
 8007be2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007be4:	b08f      	sub	sp, #60	; 0x3c
 8007be6:	af0a      	add	r7, sp, #40	; 0x28
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <HAL_PCD_Init+0x12>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e10f      	b.n	8007e14 <HAL_PCD_Init+0x232>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	60bb      	str	r3, [r7, #8]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d106      	bne.n	8007c14 <HAL_PCD_Init+0x32>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f008 f8f2 	bl	800fdf8 <HAL_PCD_MspInit>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2203      	movs	r2, #3
 8007c18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d102      	bne.n	8007c2e <HAL_PCD_Init+0x4c>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	611a      	str	r2, [r3, #16]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f003 f87d 	bl	800ad32 <USB_DisableGlobalInt>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	603b      	str	r3, [r7, #0]
 8007c3e:	687e      	ldr	r6, [r7, #4]
 8007c40:	466d      	mov	r5, sp
 8007c42:	f106 0410 	add.w	r4, r6, #16
 8007c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007c52:	e885 0003 	stmia.w	r5, {r0, r1}
 8007c56:	1d33      	adds	r3, r6, #4
 8007c58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c5a:	6838      	ldr	r0, [r7, #0]
 8007c5c:	f002 ff54 	bl	800ab08 <USB_CoreInit>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d005      	beq.n	8007c72 <HAL_PCD_Init+0x90>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2202      	movs	r2, #2
 8007c6a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e0d0      	b.n	8007e14 <HAL_PCD_Init+0x232>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2100      	movs	r1, #0
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f003 f86b 	bl	800ad54 <USB_SetCurrentMode>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	73fb      	strb	r3, [r7, #15]
 8007c82:	e04a      	b.n	8007d1a <HAL_PCD_Init+0x138>
 8007c84:	7bfa      	ldrb	r2, [r7, #15]
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	00db      	lsls	r3, r3, #3
 8007c8c:	4413      	add	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	440b      	add	r3, r1
 8007c92:	333d      	adds	r3, #61	; 0x3d
 8007c94:	2201      	movs	r2, #1
 8007c96:	701a      	strb	r2, [r3, #0]
 8007c98:	7bfa      	ldrb	r2, [r7, #15]
 8007c9a:	6879      	ldr	r1, [r7, #4]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	00db      	lsls	r3, r3, #3
 8007ca0:	4413      	add	r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	440b      	add	r3, r1
 8007ca6:	333c      	adds	r3, #60	; 0x3c
 8007ca8:	7bfa      	ldrb	r2, [r7, #15]
 8007caa:	701a      	strb	r2, [r3, #0]
 8007cac:	7bfa      	ldrb	r2, [r7, #15]
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	b298      	uxth	r0, r3
 8007cb2:	6879      	ldr	r1, [r7, #4]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	00db      	lsls	r3, r3, #3
 8007cb8:	4413      	add	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	440b      	add	r3, r1
 8007cbe:	3344      	adds	r3, #68	; 0x44
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	801a      	strh	r2, [r3, #0]
 8007cc4:	7bfa      	ldrb	r2, [r7, #15]
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	00db      	lsls	r3, r3, #3
 8007ccc:	4413      	add	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	440b      	add	r3, r1
 8007cd2:	3340      	adds	r3, #64	; 0x40
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	701a      	strb	r2, [r3, #0]
 8007cd8:	7bfa      	ldrb	r2, [r7, #15]
 8007cda:	6879      	ldr	r1, [r7, #4]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	4413      	add	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	440b      	add	r3, r1
 8007ce6:	3348      	adds	r3, #72	; 0x48
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	7bfa      	ldrb	r2, [r7, #15]
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	00db      	lsls	r3, r3, #3
 8007cf4:	4413      	add	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	440b      	add	r3, r1
 8007cfa:	334c      	adds	r3, #76	; 0x4c
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	7bfa      	ldrb	r2, [r7, #15]
 8007d02:	6879      	ldr	r1, [r7, #4]
 8007d04:	4613      	mov	r3, r2
 8007d06:	00db      	lsls	r3, r3, #3
 8007d08:	4413      	add	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	440b      	add	r3, r1
 8007d0e:	3354      	adds	r3, #84	; 0x54
 8007d10:	2200      	movs	r2, #0
 8007d12:	601a      	str	r2, [r3, #0]
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	3301      	adds	r3, #1
 8007d18:	73fb      	strb	r3, [r7, #15]
 8007d1a:	7bfa      	ldrb	r2, [r7, #15]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d3af      	bcc.n	8007c84 <HAL_PCD_Init+0xa2>
 8007d24:	2300      	movs	r3, #0
 8007d26:	73fb      	strb	r3, [r7, #15]
 8007d28:	e044      	b.n	8007db4 <HAL_PCD_Init+0x1d2>
 8007d2a:	7bfa      	ldrb	r2, [r7, #15]
 8007d2c:	6879      	ldr	r1, [r7, #4]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	00db      	lsls	r3, r3, #3
 8007d32:	4413      	add	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	440b      	add	r3, r1
 8007d38:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	701a      	strb	r2, [r3, #0]
 8007d40:	7bfa      	ldrb	r2, [r7, #15]
 8007d42:	6879      	ldr	r1, [r7, #4]
 8007d44:	4613      	mov	r3, r2
 8007d46:	00db      	lsls	r3, r3, #3
 8007d48:	4413      	add	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	440b      	add	r3, r1
 8007d4e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007d52:	7bfa      	ldrb	r2, [r7, #15]
 8007d54:	701a      	strb	r2, [r3, #0]
 8007d56:	7bfa      	ldrb	r2, [r7, #15]
 8007d58:	6879      	ldr	r1, [r7, #4]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	00db      	lsls	r3, r3, #3
 8007d5e:	4413      	add	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	440b      	add	r3, r1
 8007d64:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007d68:	2200      	movs	r2, #0
 8007d6a:	701a      	strb	r2, [r3, #0]
 8007d6c:	7bfa      	ldrb	r2, [r7, #15]
 8007d6e:	6879      	ldr	r1, [r7, #4]
 8007d70:	4613      	mov	r3, r2
 8007d72:	00db      	lsls	r3, r3, #3
 8007d74:	4413      	add	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	440b      	add	r3, r1
 8007d7a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007d7e:	2200      	movs	r2, #0
 8007d80:	601a      	str	r2, [r3, #0]
 8007d82:	7bfa      	ldrb	r2, [r7, #15]
 8007d84:	6879      	ldr	r1, [r7, #4]
 8007d86:	4613      	mov	r3, r2
 8007d88:	00db      	lsls	r3, r3, #3
 8007d8a:	4413      	add	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	440b      	add	r3, r1
 8007d90:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007d94:	2200      	movs	r2, #0
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	7bfa      	ldrb	r2, [r7, #15]
 8007d9a:	6879      	ldr	r1, [r7, #4]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	4413      	add	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	440b      	add	r3, r1
 8007da6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007daa:	2200      	movs	r2, #0
 8007dac:	601a      	str	r2, [r3, #0]
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
 8007db0:	3301      	adds	r3, #1
 8007db2:	73fb      	strb	r3, [r7, #15]
 8007db4:	7bfa      	ldrb	r2, [r7, #15]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d3b5      	bcc.n	8007d2a <HAL_PCD_Init+0x148>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	603b      	str	r3, [r7, #0]
 8007dc4:	687e      	ldr	r6, [r7, #4]
 8007dc6:	466d      	mov	r5, sp
 8007dc8:	f106 0410 	add.w	r4, r6, #16
 8007dcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007dce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007dd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007dd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007dd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007dd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8007ddc:	1d33      	adds	r3, r6, #4
 8007dde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007de0:	6838      	ldr	r0, [r7, #0]
 8007de2:	f003 f803 	bl	800adec <USB_DevInit>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d005      	beq.n	8007df8 <HAL_PCD_Init+0x216>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2202      	movs	r2, #2
 8007df0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8007df4:	2301      	movs	r3, #1
 8007df6:	e00d      	b.n	8007e14 <HAL_PCD_Init+0x232>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f004 f952 	bl	800c0b6 <USB_DevDisconnect>
 8007e12:	2300      	movs	r3, #0
 8007e14:	4618      	mov	r0, r3
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e1c <HAL_PCD_Start>:
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	60fb      	str	r3, [r7, #12]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d101      	bne.n	8007e38 <HAL_PCD_Start+0x1c>
 8007e34:	2302      	movs	r3, #2
 8007e36:	e020      	b.n	8007e7a <HAL_PCD_Start+0x5e>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d109      	bne.n	8007e5c <HAL_PCD_Start+0x40>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d005      	beq.n	8007e5c <HAL_PCD_Start+0x40>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	639a      	str	r2, [r3, #56]	; 0x38
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f002 ff55 	bl	800ad10 <USB_EnableGlobalInt>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f004 f902 	bl	800c074 <USB_DevConnect>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8007e78:	2300      	movs	r3, #0
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <HAL_PCD_IRQHandler>:
 8007e82:	b590      	push	{r4, r7, lr}
 8007e84:	b08d      	sub	sp, #52	; 0x34
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	623b      	str	r3, [r7, #32]
 8007e90:	6a3b      	ldr	r3, [r7, #32]
 8007e92:	61fb      	str	r3, [r7, #28]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f004 f9c0 	bl	800c21e <USB_GetMode>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f040 848a 	bne.w	80087ba <HAL_PCD_IRQHandler+0x938>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f004 f924 	bl	800c0f8 <USB_ReadInterrupts>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f000 8480 	beq.w	80087b8 <HAL_PCD_IRQHandler+0x936>
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	0a1b      	lsrs	r3, r3, #8
 8007ec2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f004 f911 	bl	800c0f8 <USB_ReadInterrupts>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	f003 0302 	and.w	r3, r3, #2
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d107      	bne.n	8007ef0 <HAL_PCD_IRQHandler+0x6e>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	695a      	ldr	r2, [r3, #20]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f002 0202 	and.w	r2, r2, #2
 8007eee:	615a      	str	r2, [r3, #20]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f004 f8ff 	bl	800c0f8 <USB_ReadInterrupts>
 8007efa:	4603      	mov	r3, r0
 8007efc:	f003 0310 	and.w	r3, r3, #16
 8007f00:	2b10      	cmp	r3, #16
 8007f02:	d161      	bne.n	8007fc8 <HAL_PCD_IRQHandler+0x146>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	699a      	ldr	r2, [r3, #24]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f022 0210 	bic.w	r2, r2, #16
 8007f12:	619a      	str	r2, [r3, #24]
 8007f14:	6a3b      	ldr	r3, [r7, #32]
 8007f16:	6a1b      	ldr	r3, [r3, #32]
 8007f18:	61bb      	str	r3, [r7, #24]
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	f003 020f 	and.w	r2, r3, #15
 8007f20:	4613      	mov	r3, r2
 8007f22:	00db      	lsls	r3, r3, #3
 8007f24:	4413      	add	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	4413      	add	r3, r2
 8007f30:	3304      	adds	r3, #4
 8007f32:	617b      	str	r3, [r7, #20]
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	0c5b      	lsrs	r3, r3, #17
 8007f38:	f003 030f 	and.w	r3, r3, #15
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d124      	bne.n	8007f8a <HAL_PCD_IRQHandler+0x108>
 8007f40:	69ba      	ldr	r2, [r7, #24]
 8007f42:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007f46:	4013      	ands	r3, r2
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d035      	beq.n	8007fb8 <HAL_PCD_IRQHandler+0x136>
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	6919      	ldr	r1, [r3, #16]
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	091b      	lsrs	r3, r3, #4
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	6a38      	ldr	r0, [r7, #32]
 8007f60:	f003 ff36 	bl	800bdd0 <USB_ReadPacket>
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	691a      	ldr	r2, [r3, #16]
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	091b      	lsrs	r3, r3, #4
 8007f6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f70:	441a      	add	r2, r3
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	611a      	str	r2, [r3, #16]
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	6a1a      	ldr	r2, [r3, #32]
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	091b      	lsrs	r3, r3, #4
 8007f7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f82:	441a      	add	r2, r3
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	621a      	str	r2, [r3, #32]
 8007f88:	e016      	b.n	8007fb8 <HAL_PCD_IRQHandler+0x136>
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	0c5b      	lsrs	r3, r3, #17
 8007f8e:	f003 030f 	and.w	r3, r3, #15
 8007f92:	2b06      	cmp	r3, #6
 8007f94:	d110      	bne.n	8007fb8 <HAL_PCD_IRQHandler+0x136>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007f9c:	2208      	movs	r2, #8
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6a38      	ldr	r0, [r7, #32]
 8007fa2:	f003 ff15 	bl	800bdd0 <USB_ReadPacket>
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	6a1a      	ldr	r2, [r3, #32]
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	091b      	lsrs	r3, r3, #4
 8007fae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fb2:	441a      	add	r2, r3
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	621a      	str	r2, [r3, #32]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	699a      	ldr	r2, [r3, #24]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f042 0210 	orr.w	r2, r2, #16
 8007fc6:	619a      	str	r2, [r3, #24]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f004 f893 	bl	800c0f8 <USB_ReadInterrupts>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fd8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007fdc:	f040 80a7 	bne.w	800812e <HAL_PCD_IRQHandler+0x2ac>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f004 f898 	bl	800c11e <USB_ReadDevAllOutEpInterrupt>
 8007fee:	62b8      	str	r0, [r7, #40]	; 0x28
 8007ff0:	e099      	b.n	8008126 <HAL_PCD_IRQHandler+0x2a4>
 8007ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f000 808e 	beq.w	800811a <HAL_PCD_IRQHandler+0x298>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008004:	b2d2      	uxtb	r2, r2
 8008006:	4611      	mov	r1, r2
 8008008:	4618      	mov	r0, r3
 800800a:	f004 f8bc 	bl	800c186 <USB_ReadDevOutEPInterrupt>
 800800e:	6138      	str	r0, [r7, #16]
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00c      	beq.n	8008034 <HAL_PCD_IRQHandler+0x1b2>
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	4413      	add	r3, r2
 8008022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008026:	461a      	mov	r2, r3
 8008028:	2301      	movs	r3, #1
 800802a:	6093      	str	r3, [r2, #8]
 800802c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fec2 	bl	8008db8 <PCD_EP_OutXfrComplete_int>
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	f003 0308 	and.w	r3, r3, #8
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00c      	beq.n	8008058 <HAL_PCD_IRQHandler+0x1d6>
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	4413      	add	r3, r2
 8008046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800804a:	461a      	mov	r2, r3
 800804c:	2308      	movs	r3, #8
 800804e:	6093      	str	r3, [r2, #8]
 8008050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 ff98 	bl	8008f88 <PCD_EP_OutSetupPacket_int>
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	f003 0310 	and.w	r3, r3, #16
 800805e:	2b00      	cmp	r3, #0
 8008060:	d008      	beq.n	8008074 <HAL_PCD_IRQHandler+0x1f2>
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008064:	015a      	lsls	r2, r3, #5
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	4413      	add	r3, r2
 800806a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800806e:	461a      	mov	r2, r3
 8008070:	2310      	movs	r3, #16
 8008072:	6093      	str	r3, [r2, #8]
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	f003 0302 	and.w	r3, r3, #2
 800807a:	2b00      	cmp	r3, #0
 800807c:	d030      	beq.n	80080e0 <HAL_PCD_IRQHandler+0x25e>
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	695b      	ldr	r3, [r3, #20]
 8008082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008086:	2b80      	cmp	r3, #128	; 0x80
 8008088:	d109      	bne.n	800809e <HAL_PCD_IRQHandler+0x21c>
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	69fa      	ldr	r2, [r7, #28]
 8008094:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008098:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800809c:	6053      	str	r3, [r2, #4]
 800809e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080a0:	4613      	mov	r3, r2
 80080a2:	00db      	lsls	r3, r3, #3
 80080a4:	4413      	add	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	4413      	add	r3, r2
 80080b0:	3304      	adds	r3, #4
 80080b2:	617b      	str	r3, [r7, #20]
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	78db      	ldrb	r3, [r3, #3]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d108      	bne.n	80080ce <HAL_PCD_IRQHandler+0x24c>
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	2200      	movs	r2, #0
 80080c0:	70da      	strb	r2, [r3, #3]
 80080c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f007 ff91 	bl	800fff0 <HAL_PCD_ISOOUTIncompleteCallback>
 80080ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d0:	015a      	lsls	r2, r3, #5
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	4413      	add	r3, r2
 80080d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080da:	461a      	mov	r2, r3
 80080dc:	2302      	movs	r3, #2
 80080de:	6093      	str	r3, [r2, #8]
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	f003 0320 	and.w	r3, r3, #32
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d008      	beq.n	80080fc <HAL_PCD_IRQHandler+0x27a>
 80080ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ec:	015a      	lsls	r2, r3, #5
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	4413      	add	r3, r2
 80080f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f6:	461a      	mov	r2, r3
 80080f8:	2320      	movs	r3, #32
 80080fa:	6093      	str	r3, [r2, #8]
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d009      	beq.n	800811a <HAL_PCD_IRQHandler+0x298>
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008108:	015a      	lsls	r2, r3, #5
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	4413      	add	r3, r2
 800810e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008112:	461a      	mov	r2, r3
 8008114:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008118:	6093      	str	r3, [r2, #8]
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	3301      	adds	r3, #1
 800811e:	627b      	str	r3, [r7, #36]	; 0x24
 8008120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008122:	085b      	lsrs	r3, r3, #1
 8008124:	62bb      	str	r3, [r7, #40]	; 0x28
 8008126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008128:	2b00      	cmp	r3, #0
 800812a:	f47f af62 	bne.w	8007ff2 <HAL_PCD_IRQHandler+0x170>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4618      	mov	r0, r3
 8008134:	f003 ffe0 	bl	800c0f8 <USB_ReadInterrupts>
 8008138:	4603      	mov	r3, r0
 800813a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800813e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008142:	f040 80db 	bne.w	80082fc <HAL_PCD_IRQHandler+0x47a>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4618      	mov	r0, r3
 800814c:	f004 f801 	bl	800c152 <USB_ReadDevAllInEpInterrupt>
 8008150:	62b8      	str	r0, [r7, #40]	; 0x28
 8008152:	2300      	movs	r3, #0
 8008154:	627b      	str	r3, [r7, #36]	; 0x24
 8008156:	e0cd      	b.n	80082f4 <HAL_PCD_IRQHandler+0x472>
 8008158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b00      	cmp	r3, #0
 8008160:	f000 80c2 	beq.w	80082e8 <HAL_PCD_IRQHandler+0x466>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800816a:	b2d2      	uxtb	r2, r2
 800816c:	4611      	mov	r1, r2
 800816e:	4618      	mov	r0, r3
 8008170:	f004 f827 	bl	800c1c2 <USB_ReadDevInEPInterrupt>
 8008174:	6138      	str	r0, [r7, #16]
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b00      	cmp	r3, #0
 800817e:	d057      	beq.n	8008230 <HAL_PCD_IRQHandler+0x3ae>
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	f003 030f 	and.w	r3, r3, #15
 8008186:	2201      	movs	r2, #1
 8008188:	fa02 f303 	lsl.w	r3, r2, r3
 800818c:	60fb      	str	r3, [r7, #12]
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	43db      	mvns	r3, r3
 800819a:	69f9      	ldr	r1, [r7, #28]
 800819c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081a0:	4013      	ands	r3, r2
 80081a2:	634b      	str	r3, [r1, #52]	; 0x34
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b0:	461a      	mov	r2, r3
 80081b2:	2301      	movs	r3, #1
 80081b4:	6093      	str	r3, [r2, #8]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d132      	bne.n	8008224 <HAL_PCD_IRQHandler+0x3a2>
 80081be:	6879      	ldr	r1, [r7, #4]
 80081c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081c2:	4613      	mov	r3, r2
 80081c4:	00db      	lsls	r3, r3, #3
 80081c6:	4413      	add	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	440b      	add	r3, r1
 80081cc:	334c      	adds	r3, #76	; 0x4c
 80081ce:	6819      	ldr	r1, [r3, #0]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d4:	4613      	mov	r3, r2
 80081d6:	00db      	lsls	r3, r3, #3
 80081d8:	4413      	add	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4403      	add	r3, r0
 80081de:	3348      	adds	r3, #72	; 0x48
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4419      	add	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e8:	4613      	mov	r3, r2
 80081ea:	00db      	lsls	r3, r3, #3
 80081ec:	4413      	add	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4403      	add	r3, r0
 80081f2:	334c      	adds	r3, #76	; 0x4c
 80081f4:	6019      	str	r1, [r3, #0]
 80081f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d113      	bne.n	8008224 <HAL_PCD_IRQHandler+0x3a2>
 80081fc:	6879      	ldr	r1, [r7, #4]
 80081fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008200:	4613      	mov	r3, r2
 8008202:	00db      	lsls	r3, r3, #3
 8008204:	4413      	add	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	440b      	add	r3, r1
 800820a:	3354      	adds	r3, #84	; 0x54
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d108      	bne.n	8008224 <HAL_PCD_IRQHandler+0x3a2>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6818      	ldr	r0, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800821c:	461a      	mov	r2, r3
 800821e:	2101      	movs	r1, #1
 8008220:	f004 f82e 	bl	800c280 <USB_EP0_OutStart>
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	b2db      	uxtb	r3, r3
 8008228:	4619      	mov	r1, r3
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f007 fe65 	bl	800fefa <HAL_PCD_DataInStageCallback>
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	f003 0308 	and.w	r3, r3, #8
 8008236:	2b00      	cmp	r3, #0
 8008238:	d008      	beq.n	800824c <HAL_PCD_IRQHandler+0x3ca>
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	4413      	add	r3, r2
 8008242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008246:	461a      	mov	r2, r3
 8008248:	2308      	movs	r3, #8
 800824a:	6093      	str	r3, [r2, #8]
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	f003 0310 	and.w	r3, r3, #16
 8008252:	2b00      	cmp	r3, #0
 8008254:	d008      	beq.n	8008268 <HAL_PCD_IRQHandler+0x3e6>
 8008256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	4413      	add	r3, r2
 800825e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008262:	461a      	mov	r2, r3
 8008264:	2310      	movs	r3, #16
 8008266:	6093      	str	r3, [r2, #8]
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800826e:	2b00      	cmp	r3, #0
 8008270:	d008      	beq.n	8008284 <HAL_PCD_IRQHandler+0x402>
 8008272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008274:	015a      	lsls	r2, r3, #5
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	4413      	add	r3, r2
 800827a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800827e:	461a      	mov	r2, r3
 8008280:	2340      	movs	r3, #64	; 0x40
 8008282:	6093      	str	r3, [r2, #8]
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d023      	beq.n	80082d6 <HAL_PCD_IRQHandler+0x454>
 800828e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008290:	6a38      	ldr	r0, [r7, #32]
 8008292:	f002 ff0f 	bl	800b0b4 <USB_FlushTxFifo>
 8008296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008298:	4613      	mov	r3, r2
 800829a:	00db      	lsls	r3, r3, #3
 800829c:	4413      	add	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	3338      	adds	r3, #56	; 0x38
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	4413      	add	r3, r2
 80082a6:	3304      	adds	r3, #4
 80082a8:	617b      	str	r3, [r7, #20]
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	78db      	ldrb	r3, [r3, #3]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d108      	bne.n	80082c4 <HAL_PCD_IRQHandler+0x442>
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2200      	movs	r2, #0
 80082b6:	70da      	strb	r2, [r3, #3]
 80082b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	4619      	mov	r1, r3
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f007 fea8 	bl	8010014 <HAL_PCD_ISOINIncompleteCallback>
 80082c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d0:	461a      	mov	r2, r3
 80082d2:	2302      	movs	r3, #2
 80082d4:	6093      	str	r3, [r2, #8]
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d003      	beq.n	80082e8 <HAL_PCD_IRQHandler+0x466>
 80082e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fcdb 	bl	8008c9e <PCD_WriteEmptyTxFifo>
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	3301      	adds	r3, #1
 80082ec:	627b      	str	r3, [r7, #36]	; 0x24
 80082ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f0:	085b      	lsrs	r3, r3, #1
 80082f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80082f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f47f af2e 	bne.w	8008158 <HAL_PCD_IRQHandler+0x2d6>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4618      	mov	r0, r3
 8008302:	f003 fef9 	bl	800c0f8 <USB_ReadInterrupts>
 8008306:	4603      	mov	r3, r0
 8008308:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800830c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008310:	d122      	bne.n	8008358 <HAL_PCD_IRQHandler+0x4d6>
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	69fa      	ldr	r2, [r7, #28]
 800831c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008320:	f023 0301 	bic.w	r3, r3, #1
 8008324:	6053      	str	r3, [r2, #4]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800832c:	2b01      	cmp	r3, #1
 800832e:	d108      	bne.n	8008342 <HAL_PCD_IRQHandler+0x4c0>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8008338:	2100      	movs	r1, #0
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fec2 	bl	80090c4 <HAL_PCDEx_LPM_Callback>
 8008340:	e002      	b.n	8008348 <HAL_PCD_IRQHandler+0x4c6>
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f007 fe46 	bl	800ffd4 <HAL_PCD_ResumeCallback>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	695a      	ldr	r2, [r3, #20]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008356:	615a      	str	r2, [r3, #20]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4618      	mov	r0, r3
 800835e:	f003 fecb 	bl	800c0f8 <USB_ReadInterrupts>
 8008362:	4603      	mov	r3, r0
 8008364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800836c:	d112      	bne.n	8008394 <HAL_PCD_IRQHandler+0x512>
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	2b01      	cmp	r3, #1
 800837c:	d102      	bne.n	8008384 <HAL_PCD_IRQHandler+0x502>
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f007 fe02 	bl	800ff88 <HAL_PCD_SuspendCallback>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	695a      	ldr	r2, [r3, #20]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008392:	615a      	str	r2, [r3, #20]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4618      	mov	r0, r3
 800839a:	f003 fead 	bl	800c0f8 <USB_ReadInterrupts>
 800839e:	4603      	mov	r3, r0
 80083a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083a8:	f040 80b7 	bne.w	800851a <HAL_PCD_IRQHandler+0x698>
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	69fa      	ldr	r2, [r7, #28]
 80083b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083ba:	f023 0301 	bic.w	r3, r3, #1
 80083be:	6053      	str	r3, [r2, #4]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2110      	movs	r1, #16
 80083c6:	4618      	mov	r0, r3
 80083c8:	f002 fe74 	bl	800b0b4 <USB_FlushTxFifo>
 80083cc:	2300      	movs	r3, #0
 80083ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083d0:	e046      	b.n	8008460 <HAL_PCD_IRQHandler+0x5de>
 80083d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d4:	015a      	lsls	r2, r3, #5
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	4413      	add	r3, r2
 80083da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083de:	461a      	mov	r2, r3
 80083e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80083e4:	6093      	str	r3, [r2, #8]
 80083e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e8:	015a      	lsls	r2, r3, #5
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083f6:	0151      	lsls	r1, r2, #5
 80083f8:	69fa      	ldr	r2, [r7, #28]
 80083fa:	440a      	add	r2, r1
 80083fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008400:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008404:	6013      	str	r3, [r2, #0]
 8008406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	4413      	add	r3, r2
 800840e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008412:	461a      	mov	r2, r3
 8008414:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008418:	6093      	str	r3, [r2, #8]
 800841a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841c:	015a      	lsls	r2, r3, #5
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	4413      	add	r3, r2
 8008422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800842a:	0151      	lsls	r1, r2, #5
 800842c:	69fa      	ldr	r2, [r7, #28]
 800842e:	440a      	add	r2, r1
 8008430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008434:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008438:	6013      	str	r3, [r2, #0]
 800843a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	4413      	add	r3, r2
 8008442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800844a:	0151      	lsls	r1, r2, #5
 800844c:	69fa      	ldr	r2, [r7, #28]
 800844e:	440a      	add	r2, r1
 8008450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008454:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008458:	6013      	str	r3, [r2, #0]
 800845a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845c:	3301      	adds	r3, #1
 800845e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008466:	429a      	cmp	r2, r3
 8008468:	d3b3      	bcc.n	80083d2 <HAL_PCD_IRQHandler+0x550>
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008470:	69db      	ldr	r3, [r3, #28]
 8008472:	69fa      	ldr	r2, [r7, #28]
 8008474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008478:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800847c:	61d3      	str	r3, [r2, #28]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008482:	2b00      	cmp	r3, #0
 8008484:	d016      	beq.n	80084b4 <HAL_PCD_IRQHandler+0x632>
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008490:	69fa      	ldr	r2, [r7, #28]
 8008492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008496:	f043 030b 	orr.w	r3, r3, #11
 800849a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a6:	69fa      	ldr	r2, [r7, #28]
 80084a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084ac:	f043 030b 	orr.w	r3, r3, #11
 80084b0:	6453      	str	r3, [r2, #68]	; 0x44
 80084b2:	e015      	b.n	80084e0 <HAL_PCD_IRQHandler+0x65e>
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ba:	695b      	ldr	r3, [r3, #20]
 80084bc:	69fa      	ldr	r2, [r7, #28]
 80084be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80084c6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80084ca:	6153      	str	r3, [r2, #20]
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	69fa      	ldr	r2, [r7, #28]
 80084d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084da:	f043 030b 	orr.w	r3, r3, #11
 80084de:	6113      	str	r3, [r2, #16]
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	69fa      	ldr	r2, [r7, #28]
 80084ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80084f2:	6013      	str	r3, [r2, #0]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6818      	ldr	r0, [r3, #0]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	b2d9      	uxtb	r1, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008504:	461a      	mov	r2, r3
 8008506:	f003 febb 	bl	800c280 <USB_EP0_OutStart>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	695a      	ldr	r2, [r3, #20]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008518:	615a      	str	r2, [r3, #20]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4618      	mov	r0, r3
 8008520:	f003 fdea 	bl	800c0f8 <USB_ReadInterrupts>
 8008524:	4603      	mov	r3, r0
 8008526:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800852a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800852e:	d124      	bne.n	800857a <HAL_PCD_IRQHandler+0x6f8>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4618      	mov	r0, r3
 8008536:	f003 fe80 	bl	800c23a <USB_ActivateSetup>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4618      	mov	r0, r3
 8008540:	f002 fe35 	bl	800b1ae <USB_GetDevSpeed>
 8008544:	4603      	mov	r3, r0
 8008546:	461a      	mov	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	60da      	str	r2, [r3, #12]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681c      	ldr	r4, [r3, #0]
 8008550:	f001 fa28 	bl	80099a4 <HAL_RCC_GetHCLKFreq>
 8008554:	4601      	mov	r1, r0
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	b2db      	uxtb	r3, r3
 800855c:	461a      	mov	r2, r3
 800855e:	4620      	mov	r0, r4
 8008560:	f002 fb34 	bl	800abcc <USB_SetTurnaroundTime>
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f007 fcf0 	bl	800ff4a <HAL_PCD_ResetCallback>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	695a      	ldr	r2, [r3, #20]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008578:	615a      	str	r2, [r3, #20]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4618      	mov	r0, r3
 8008580:	f003 fdba 	bl	800c0f8 <USB_ReadInterrupts>
 8008584:	4603      	mov	r3, r0
 8008586:	f003 0308 	and.w	r3, r3, #8
 800858a:	2b08      	cmp	r3, #8
 800858c:	d10a      	bne.n	80085a4 <HAL_PCD_IRQHandler+0x722>
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f007 fccd 	bl	800ff2e <HAL_PCD_SOFCallback>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	695a      	ldr	r2, [r3, #20]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f002 0208 	and.w	r2, r2, #8
 80085a2:	615a      	str	r2, [r3, #20]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f003 fda5 	bl	800c0f8 <USB_ReadInterrupts>
 80085ae:	4603      	mov	r3, r0
 80085b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085b4:	2b80      	cmp	r3, #128	; 0x80
 80085b6:	d122      	bne.n	80085fe <HAL_PCD_IRQHandler+0x77c>
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085c0:	6a3b      	ldr	r3, [r7, #32]
 80085c2:	619a      	str	r2, [r3, #24]
 80085c4:	2301      	movs	r3, #1
 80085c6:	627b      	str	r3, [r7, #36]	; 0x24
 80085c8:	e014      	b.n	80085f4 <HAL_PCD_IRQHandler+0x772>
 80085ca:	6879      	ldr	r1, [r7, #4]
 80085cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ce:	4613      	mov	r3, r2
 80085d0:	00db      	lsls	r3, r3, #3
 80085d2:	4413      	add	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	440b      	add	r3, r1
 80085d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d105      	bne.n	80085ee <HAL_PCD_IRQHandler+0x76c>
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	4619      	mov	r1, r3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fb27 	bl	8008c3c <HAL_PCD_EP_Abort>
 80085ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f0:	3301      	adds	r3, #1
 80085f2:	627b      	str	r3, [r7, #36]	; 0x24
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d3e5      	bcc.n	80085ca <HAL_PCD_IRQHandler+0x748>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4618      	mov	r0, r3
 8008604:	f003 fd78 	bl	800c0f8 <USB_ReadInterrupts>
 8008608:	4603      	mov	r3, r0
 800860a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800860e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008612:	d13b      	bne.n	800868c <HAL_PCD_IRQHandler+0x80a>
 8008614:	2301      	movs	r3, #1
 8008616:	627b      	str	r3, [r7, #36]	; 0x24
 8008618:	e02b      	b.n	8008672 <HAL_PCD_IRQHandler+0x7f0>
 800861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861c:	015a      	lsls	r2, r3, #5
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	4413      	add	r3, r2
 8008622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	61bb      	str	r3, [r7, #24]
 800862a:	6879      	ldr	r1, [r7, #4]
 800862c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800862e:	4613      	mov	r3, r2
 8008630:	00db      	lsls	r3, r3, #3
 8008632:	4413      	add	r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	440b      	add	r3, r1
 8008638:	3340      	adds	r3, #64	; 0x40
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d115      	bne.n	800866c <HAL_PCD_IRQHandler+0x7ea>
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	2b00      	cmp	r3, #0
 8008644:	da12      	bge.n	800866c <HAL_PCD_IRQHandler+0x7ea>
 8008646:	6879      	ldr	r1, [r7, #4]
 8008648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800864a:	4613      	mov	r3, r2
 800864c:	00db      	lsls	r3, r3, #3
 800864e:	4413      	add	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	440b      	add	r3, r1
 8008654:	333f      	adds	r3, #63	; 0x3f
 8008656:	2201      	movs	r2, #1
 8008658:	701a      	strb	r2, [r3, #0]
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	b2db      	uxtb	r3, r3
 800865e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008662:	b2db      	uxtb	r3, r3
 8008664:	4619      	mov	r1, r3
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fae8 	bl	8008c3c <HAL_PCD_EP_Abort>
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	3301      	adds	r3, #1
 8008670:	627b      	str	r3, [r7, #36]	; 0x24
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008678:	429a      	cmp	r2, r3
 800867a:	d3ce      	bcc.n	800861a <HAL_PCD_IRQHandler+0x798>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	695a      	ldr	r2, [r3, #20]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800868a:	615a      	str	r2, [r3, #20]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4618      	mov	r0, r3
 8008692:	f003 fd31 	bl	800c0f8 <USB_ReadInterrupts>
 8008696:	4603      	mov	r3, r0
 8008698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800869c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086a0:	d155      	bne.n	800874e <HAL_PCD_IRQHandler+0x8cc>
 80086a2:	2301      	movs	r3, #1
 80086a4:	627b      	str	r3, [r7, #36]	; 0x24
 80086a6:	e045      	b.n	8008734 <HAL_PCD_IRQHandler+0x8b2>
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	61bb      	str	r3, [r7, #24]
 80086b8:	6879      	ldr	r1, [r7, #4]
 80086ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086bc:	4613      	mov	r3, r2
 80086be:	00db      	lsls	r3, r3, #3
 80086c0:	4413      	add	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	440b      	add	r3, r1
 80086c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d12e      	bne.n	800872e <HAL_PCD_IRQHandler+0x8ac>
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	da2b      	bge.n	800872e <HAL_PCD_IRQHandler+0x8ac>
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d121      	bne.n	800872e <HAL_PCD_IRQHandler+0x8ac>
 80086ea:	6879      	ldr	r1, [r7, #4]
 80086ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ee:	4613      	mov	r3, r2
 80086f0:	00db      	lsls	r3, r3, #3
 80086f2:	4413      	add	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	440b      	add	r3, r1
 80086f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80086fc:	2201      	movs	r2, #1
 80086fe:	701a      	strb	r2, [r3, #0]
 8008700:	6a3b      	ldr	r3, [r7, #32]
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008708:	6a3b      	ldr	r3, [r7, #32]
 800870a:	619a      	str	r2, [r3, #24]
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	695b      	ldr	r3, [r3, #20]
 8008710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008714:	2b00      	cmp	r3, #0
 8008716:	d10a      	bne.n	800872e <HAL_PCD_IRQHandler+0x8ac>
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	69fa      	ldr	r2, [r7, #28]
 8008722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008726:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800872a:	6053      	str	r3, [r2, #4]
 800872c:	e007      	b.n	800873e <HAL_PCD_IRQHandler+0x8bc>
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	3301      	adds	r3, #1
 8008732:	627b      	str	r3, [r7, #36]	; 0x24
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873a:	429a      	cmp	r2, r3
 800873c:	d3b4      	bcc.n	80086a8 <HAL_PCD_IRQHandler+0x826>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	695a      	ldr	r2, [r3, #20]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800874c:	615a      	str	r2, [r3, #20]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4618      	mov	r0, r3
 8008754:	f003 fcd0 	bl	800c0f8 <USB_ReadInterrupts>
 8008758:	4603      	mov	r3, r0
 800875a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800875e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008762:	d10a      	bne.n	800877a <HAL_PCD_IRQHandler+0x8f8>
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f007 fc67 	bl	8010038 <HAL_PCD_ConnectCallback>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	695a      	ldr	r2, [r3, #20]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008778:	615a      	str	r2, [r3, #20]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4618      	mov	r0, r3
 8008780:	f003 fcba 	bl	800c0f8 <USB_ReadInterrupts>
 8008784:	4603      	mov	r3, r0
 8008786:	f003 0304 	and.w	r3, r3, #4
 800878a:	2b04      	cmp	r3, #4
 800878c:	d115      	bne.n	80087ba <HAL_PCD_IRQHandler+0x938>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	61bb      	str	r3, [r7, #24]
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	f003 0304 	and.w	r3, r3, #4
 800879c:	2b00      	cmp	r3, #0
 800879e:	d002      	beq.n	80087a6 <HAL_PCD_IRQHandler+0x924>
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f007 fc57 	bl	8010054 <HAL_PCD_DisconnectCallback>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	6859      	ldr	r1, [r3, #4]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	69ba      	ldr	r2, [r7, #24]
 80087b2:	430a      	orrs	r2, r1
 80087b4:	605a      	str	r2, [r3, #4]
 80087b6:	e000      	b.n	80087ba <HAL_PCD_IRQHandler+0x938>
 80087b8:	bf00      	nop
 80087ba:	3734      	adds	r7, #52	; 0x34
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd90      	pop	{r4, r7, pc}

080087c0 <HAL_PCD_SetAddress>:
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	460b      	mov	r3, r1
 80087ca:	70fb      	strb	r3, [r7, #3]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d101      	bne.n	80087da <HAL_PCD_SetAddress+0x1a>
 80087d6:	2302      	movs	r3, #2
 80087d8:	e013      	b.n	8008802 <HAL_PCD_SetAddress+0x42>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	78fa      	ldrb	r2, [r7, #3]
 80087e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	78fa      	ldrb	r2, [r7, #3]
 80087f0:	4611      	mov	r1, r2
 80087f2:	4618      	mov	r0, r3
 80087f4:	f003 fc18 	bl	800c028 <USB_SetDevAddress>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008800:	2300      	movs	r3, #0
 8008802:	4618      	mov	r0, r3
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <HAL_PCD_EP_Open>:
 800880a:	b580      	push	{r7, lr}
 800880c:	b084      	sub	sp, #16
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	4608      	mov	r0, r1
 8008814:	4611      	mov	r1, r2
 8008816:	461a      	mov	r2, r3
 8008818:	4603      	mov	r3, r0
 800881a:	70fb      	strb	r3, [r7, #3]
 800881c:	460b      	mov	r3, r1
 800881e:	803b      	strh	r3, [r7, #0]
 8008820:	4613      	mov	r3, r2
 8008822:	70bb      	strb	r3, [r7, #2]
 8008824:	2300      	movs	r3, #0
 8008826:	72fb      	strb	r3, [r7, #11]
 8008828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800882c:	2b00      	cmp	r3, #0
 800882e:	da0f      	bge.n	8008850 <HAL_PCD_EP_Open+0x46>
 8008830:	78fb      	ldrb	r3, [r7, #3]
 8008832:	f003 020f 	and.w	r2, r3, #15
 8008836:	4613      	mov	r3, r2
 8008838:	00db      	lsls	r3, r3, #3
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	3338      	adds	r3, #56	; 0x38
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	4413      	add	r3, r2
 8008844:	3304      	adds	r3, #4
 8008846:	60fb      	str	r3, [r7, #12]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2201      	movs	r2, #1
 800884c:	705a      	strb	r2, [r3, #1]
 800884e:	e00f      	b.n	8008870 <HAL_PCD_EP_Open+0x66>
 8008850:	78fb      	ldrb	r3, [r7, #3]
 8008852:	f003 020f 	and.w	r2, r3, #15
 8008856:	4613      	mov	r3, r2
 8008858:	00db      	lsls	r3, r3, #3
 800885a:	4413      	add	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	4413      	add	r3, r2
 8008866:	3304      	adds	r3, #4
 8008868:	60fb      	str	r3, [r7, #12]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	705a      	strb	r2, [r3, #1]
 8008870:	78fb      	ldrb	r3, [r7, #3]
 8008872:	f003 030f 	and.w	r3, r3, #15
 8008876:	b2da      	uxtb	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	701a      	strb	r2, [r3, #0]
 800887c:	883a      	ldrh	r2, [r7, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	60da      	str	r2, [r3, #12]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	78ba      	ldrb	r2, [r7, #2]
 8008886:	711a      	strb	r2, [r3, #4]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	785b      	ldrb	r3, [r3, #1]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d004      	beq.n	800889a <HAL_PCD_EP_Open+0x90>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	b29a      	uxth	r2, r3
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	811a      	strh	r2, [r3, #8]
 800889a:	78bb      	ldrb	r3, [r7, #2]
 800889c:	2b02      	cmp	r3, #2
 800889e:	d102      	bne.n	80088a6 <HAL_PCD_EP_Open+0x9c>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	715a      	strb	r2, [r3, #5]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d101      	bne.n	80088b4 <HAL_PCD_EP_Open+0xaa>
 80088b0:	2302      	movs	r3, #2
 80088b2:	e00e      	b.n	80088d2 <HAL_PCD_EP_Open+0xc8>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68f9      	ldr	r1, [r7, #12]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f002 fc98 	bl	800b1f8 <USB_ActivateEndpoint>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80088d0:	7afb      	ldrb	r3, [r7, #11]
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <HAL_PCD_EP_Close>:
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	460b      	mov	r3, r1
 80088e4:	70fb      	strb	r3, [r7, #3]
 80088e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	da0f      	bge.n	800890e <HAL_PCD_EP_Close+0x34>
 80088ee:	78fb      	ldrb	r3, [r7, #3]
 80088f0:	f003 020f 	and.w	r2, r3, #15
 80088f4:	4613      	mov	r3, r2
 80088f6:	00db      	lsls	r3, r3, #3
 80088f8:	4413      	add	r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	3338      	adds	r3, #56	; 0x38
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	4413      	add	r3, r2
 8008902:	3304      	adds	r3, #4
 8008904:	60fb      	str	r3, [r7, #12]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2201      	movs	r2, #1
 800890a:	705a      	strb	r2, [r3, #1]
 800890c:	e00f      	b.n	800892e <HAL_PCD_EP_Close+0x54>
 800890e:	78fb      	ldrb	r3, [r7, #3]
 8008910:	f003 020f 	and.w	r2, r3, #15
 8008914:	4613      	mov	r3, r2
 8008916:	00db      	lsls	r3, r3, #3
 8008918:	4413      	add	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	4413      	add	r3, r2
 8008924:	3304      	adds	r3, #4
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	705a      	strb	r2, [r3, #1]
 800892e:	78fb      	ldrb	r3, [r7, #3]
 8008930:	f003 030f 	and.w	r3, r3, #15
 8008934:	b2da      	uxtb	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	701a      	strb	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008940:	2b01      	cmp	r3, #1
 8008942:	d101      	bne.n	8008948 <HAL_PCD_EP_Close+0x6e>
 8008944:	2302      	movs	r3, #2
 8008946:	e00e      	b.n	8008966 <HAL_PCD_EP_Close+0x8c>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68f9      	ldr	r1, [r7, #12]
 8008956:	4618      	mov	r0, r3
 8008958:	f002 fcd6 	bl	800b308 <USB_DeactivateEndpoint>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008964:	2300      	movs	r3, #0
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <HAL_PCD_EP_Receive>:
 800896e:	b580      	push	{r7, lr}
 8008970:	b086      	sub	sp, #24
 8008972:	af00      	add	r7, sp, #0
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	603b      	str	r3, [r7, #0]
 800897a:	460b      	mov	r3, r1
 800897c:	72fb      	strb	r3, [r7, #11]
 800897e:	7afb      	ldrb	r3, [r7, #11]
 8008980:	f003 020f 	and.w	r2, r3, #15
 8008984:	4613      	mov	r3, r2
 8008986:	00db      	lsls	r3, r3, #3
 8008988:	4413      	add	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	4413      	add	r3, r2
 8008994:	3304      	adds	r3, #4
 8008996:	617b      	str	r3, [r7, #20]
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	611a      	str	r2, [r3, #16]
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	619a      	str	r2, [r3, #24]
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	2200      	movs	r2, #0
 80089a8:	621a      	str	r2, [r3, #32]
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	2200      	movs	r2, #0
 80089ae:	705a      	strb	r2, [r3, #1]
 80089b0:	7afb      	ldrb	r3, [r7, #11]
 80089b2:	f003 030f 	and.w	r3, r3, #15
 80089b6:	b2da      	uxtb	r2, r3
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	701a      	strb	r2, [r3, #0]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d102      	bne.n	80089ca <HAL_PCD_EP_Receive+0x5c>
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	615a      	str	r2, [r3, #20]
 80089ca:	7afb      	ldrb	r3, [r7, #11]
 80089cc:	f003 030f 	and.w	r3, r3, #15
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d109      	bne.n	80089e8 <HAL_PCD_EP_Receive+0x7a>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6818      	ldr	r0, [r3, #0]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	461a      	mov	r2, r3
 80089e0:	6979      	ldr	r1, [r7, #20]
 80089e2:	f002 ffb5 	bl	800b950 <USB_EP0StartXfer>
 80089e6:	e008      	b.n	80089fa <HAL_PCD_EP_Receive+0x8c>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6818      	ldr	r0, [r3, #0]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	461a      	mov	r2, r3
 80089f4:	6979      	ldr	r1, [r7, #20]
 80089f6:	f002 fd63 	bl	800b4c0 <USB_EPStartXfer>
 80089fa:	2300      	movs	r3, #0
 80089fc:	4618      	mov	r0, r3
 80089fe:	3718      	adds	r7, #24
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <HAL_PCD_EP_GetRxCount>:
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	70fb      	strb	r3, [r7, #3]
 8008a10:	78fb      	ldrb	r3, [r7, #3]
 8008a12:	f003 020f 	and.w	r2, r3, #15
 8008a16:	6879      	ldr	r1, [r7, #4]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	00db      	lsls	r3, r3, #3
 8008a1c:	4413      	add	r3, r2
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	440b      	add	r3, r1
 8008a22:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <HAL_PCD_EP_Transmit>:
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	607a      	str	r2, [r7, #4]
 8008a3e:	603b      	str	r3, [r7, #0]
 8008a40:	460b      	mov	r3, r1
 8008a42:	72fb      	strb	r3, [r7, #11]
 8008a44:	7afb      	ldrb	r3, [r7, #11]
 8008a46:	f003 020f 	and.w	r2, r3, #15
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	00db      	lsls	r3, r3, #3
 8008a4e:	4413      	add	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	3338      	adds	r3, #56	; 0x38
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	4413      	add	r3, r2
 8008a58:	3304      	adds	r3, #4
 8008a5a:	617b      	str	r3, [r7, #20]
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	611a      	str	r2, [r3, #16]
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	683a      	ldr	r2, [r7, #0]
 8008a66:	619a      	str	r2, [r3, #24]
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	621a      	str	r2, [r3, #32]
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	2201      	movs	r2, #1
 8008a72:	705a      	strb	r2, [r3, #1]
 8008a74:	7afb      	ldrb	r3, [r7, #11]
 8008a76:	f003 030f 	and.w	r3, r3, #15
 8008a7a:	b2da      	uxtb	r2, r3
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	701a      	strb	r2, [r3, #0]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d102      	bne.n	8008a8e <HAL_PCD_EP_Transmit+0x5a>
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	615a      	str	r2, [r3, #20]
 8008a8e:	7afb      	ldrb	r3, [r7, #11]
 8008a90:	f003 030f 	and.w	r3, r3, #15
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d109      	bne.n	8008aac <HAL_PCD_EP_Transmit+0x78>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6818      	ldr	r0, [r3, #0]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	6979      	ldr	r1, [r7, #20]
 8008aa6:	f002 ff53 	bl	800b950 <USB_EP0StartXfer>
 8008aaa:	e008      	b.n	8008abe <HAL_PCD_EP_Transmit+0x8a>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6818      	ldr	r0, [r3, #0]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	6979      	ldr	r1, [r7, #20]
 8008aba:	f002 fd01 	bl	800b4c0 <USB_EPStartXfer>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3718      	adds	r7, #24
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <HAL_PCD_EP_SetStall>:
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	70fb      	strb	r3, [r7, #3]
 8008ad4:	78fb      	ldrb	r3, [r7, #3]
 8008ad6:	f003 020f 	and.w	r2, r3, #15
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d901      	bls.n	8008ae6 <HAL_PCD_EP_SetStall+0x1e>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e050      	b.n	8008b88 <HAL_PCD_EP_SetStall+0xc0>
 8008ae6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	da0f      	bge.n	8008b0e <HAL_PCD_EP_SetStall+0x46>
 8008aee:	78fb      	ldrb	r3, [r7, #3]
 8008af0:	f003 020f 	and.w	r2, r3, #15
 8008af4:	4613      	mov	r3, r2
 8008af6:	00db      	lsls	r3, r3, #3
 8008af8:	4413      	add	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	3338      	adds	r3, #56	; 0x38
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	4413      	add	r3, r2
 8008b02:	3304      	adds	r3, #4
 8008b04:	60fb      	str	r3, [r7, #12]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	705a      	strb	r2, [r3, #1]
 8008b0c:	e00d      	b.n	8008b2a <HAL_PCD_EP_SetStall+0x62>
 8008b0e:	78fa      	ldrb	r2, [r7, #3]
 8008b10:	4613      	mov	r3, r2
 8008b12:	00db      	lsls	r3, r3, #3
 8008b14:	4413      	add	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	4413      	add	r3, r2
 8008b20:	3304      	adds	r3, #4
 8008b22:	60fb      	str	r3, [r7, #12]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2200      	movs	r2, #0
 8008b28:	705a      	strb	r2, [r3, #1]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	709a      	strb	r2, [r3, #2]
 8008b30:	78fb      	ldrb	r3, [r7, #3]
 8008b32:	f003 030f 	and.w	r3, r3, #15
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	701a      	strb	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d101      	bne.n	8008b4a <HAL_PCD_EP_SetStall+0x82>
 8008b46:	2302      	movs	r3, #2
 8008b48:	e01e      	b.n	8008b88 <HAL_PCD_EP_SetStall+0xc0>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	68f9      	ldr	r1, [r7, #12]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f003 f991 	bl	800be80 <USB_EPSetStall>
 8008b5e:	78fb      	ldrb	r3, [r7, #3]
 8008b60:	f003 030f 	and.w	r3, r3, #15
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10a      	bne.n	8008b7e <HAL_PCD_EP_SetStall+0xb6>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6818      	ldr	r0, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	b2d9      	uxtb	r1, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008b78:	461a      	mov	r2, r3
 8008b7a:	f003 fb81 	bl	800c280 <USB_EP0_OutStart>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008b86:	2300      	movs	r3, #0
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <HAL_PCD_EP_ClrStall>:
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	460b      	mov	r3, r1
 8008b9a:	70fb      	strb	r3, [r7, #3]
 8008b9c:	78fb      	ldrb	r3, [r7, #3]
 8008b9e:	f003 020f 	and.w	r2, r3, #15
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d901      	bls.n	8008bae <HAL_PCD_EP_ClrStall+0x1e>
 8008baa:	2301      	movs	r3, #1
 8008bac:	e042      	b.n	8008c34 <HAL_PCD_EP_ClrStall+0xa4>
 8008bae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	da0f      	bge.n	8008bd6 <HAL_PCD_EP_ClrStall+0x46>
 8008bb6:	78fb      	ldrb	r3, [r7, #3]
 8008bb8:	f003 020f 	and.w	r2, r3, #15
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	00db      	lsls	r3, r3, #3
 8008bc0:	4413      	add	r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	3338      	adds	r3, #56	; 0x38
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	4413      	add	r3, r2
 8008bca:	3304      	adds	r3, #4
 8008bcc:	60fb      	str	r3, [r7, #12]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	705a      	strb	r2, [r3, #1]
 8008bd4:	e00f      	b.n	8008bf6 <HAL_PCD_EP_ClrStall+0x66>
 8008bd6:	78fb      	ldrb	r3, [r7, #3]
 8008bd8:	f003 020f 	and.w	r2, r3, #15
 8008bdc:	4613      	mov	r3, r2
 8008bde:	00db      	lsls	r3, r3, #3
 8008be0:	4413      	add	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	4413      	add	r3, r2
 8008bec:	3304      	adds	r3, #4
 8008bee:	60fb      	str	r3, [r7, #12]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	705a      	strb	r2, [r3, #1]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	709a      	strb	r2, [r3, #2]
 8008bfc:	78fb      	ldrb	r3, [r7, #3]
 8008bfe:	f003 030f 	and.w	r3, r3, #15
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	701a      	strb	r2, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d101      	bne.n	8008c16 <HAL_PCD_EP_ClrStall+0x86>
 8008c12:	2302      	movs	r3, #2
 8008c14:	e00e      	b.n	8008c34 <HAL_PCD_EP_ClrStall+0xa4>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68f9      	ldr	r1, [r7, #12]
 8008c24:	4618      	mov	r0, r3
 8008c26:	f003 f999 	bl	800bf5c <USB_EPClearStall>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008c32:	2300      	movs	r3, #0
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <HAL_PCD_EP_Abort>:
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	460b      	mov	r3, r1
 8008c46:	70fb      	strb	r3, [r7, #3]
 8008c48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	da0c      	bge.n	8008c6a <HAL_PCD_EP_Abort+0x2e>
 8008c50:	78fb      	ldrb	r3, [r7, #3]
 8008c52:	f003 020f 	and.w	r2, r3, #15
 8008c56:	4613      	mov	r3, r2
 8008c58:	00db      	lsls	r3, r3, #3
 8008c5a:	4413      	add	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	3338      	adds	r3, #56	; 0x38
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	4413      	add	r3, r2
 8008c64:	3304      	adds	r3, #4
 8008c66:	60fb      	str	r3, [r7, #12]
 8008c68:	e00c      	b.n	8008c84 <HAL_PCD_EP_Abort+0x48>
 8008c6a:	78fb      	ldrb	r3, [r7, #3]
 8008c6c:	f003 020f 	and.w	r2, r3, #15
 8008c70:	4613      	mov	r3, r2
 8008c72:	00db      	lsls	r3, r3, #3
 8008c74:	4413      	add	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	4413      	add	r3, r2
 8008c80:	3304      	adds	r3, #4
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68f9      	ldr	r1, [r7, #12]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f002 ffb8 	bl	800bc00 <USB_EPStopXfer>
 8008c90:	4603      	mov	r3, r0
 8008c92:	72fb      	strb	r3, [r7, #11]
 8008c94:	7afb      	ldrb	r3, [r7, #11]
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <PCD_WriteEmptyTxFifo>:
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b08a      	sub	sp, #40	; 0x28
 8008ca2:	af02      	add	r7, sp, #8
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	6039      	str	r1, [r7, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	617b      	str	r3, [r7, #20]
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	613b      	str	r3, [r7, #16]
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	00db      	lsls	r3, r3, #3
 8008cb8:	4413      	add	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	3338      	adds	r3, #56	; 0x38
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	3304      	adds	r3, #4
 8008cc4:	60fb      	str	r3, [r7, #12]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6a1a      	ldr	r2, [r3, #32]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d901      	bls.n	8008cd6 <PCD_WriteEmptyTxFifo+0x38>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e06c      	b.n	8008db0 <PCD_WriteEmptyTxFifo+0x112>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	699a      	ldr	r2, [r3, #24]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	61fb      	str	r3, [r7, #28]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	69fa      	ldr	r2, [r7, #28]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d902      	bls.n	8008cf2 <PCD_WriteEmptyTxFifo+0x54>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	61fb      	str	r3, [r7, #28]
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	3303      	adds	r3, #3
 8008cf6:	089b      	lsrs	r3, r3, #2
 8008cf8:	61bb      	str	r3, [r7, #24]
 8008cfa:	e02b      	b.n	8008d54 <PCD_WriteEmptyTxFifo+0xb6>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	699a      	ldr	r2, [r3, #24]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6a1b      	ldr	r3, [r3, #32]
 8008d04:	1ad3      	subs	r3, r2, r3
 8008d06:	61fb      	str	r3, [r7, #28]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	69fa      	ldr	r2, [r7, #28]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d902      	bls.n	8008d18 <PCD_WriteEmptyTxFifo+0x7a>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	61fb      	str	r3, [r7, #28]
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	3303      	adds	r3, #3
 8008d1c:	089b      	lsrs	r3, r3, #2
 8008d1e:	61bb      	str	r3, [r7, #24]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6919      	ldr	r1, [r3, #16]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	b2da      	uxtb	r2, r3
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	b298      	uxth	r0, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	4603      	mov	r3, r0
 8008d36:	6978      	ldr	r0, [r7, #20]
 8008d38:	f003 f80c 	bl	800bd54 <USB_WritePacket>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	691a      	ldr	r2, [r3, #16]
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	441a      	add	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	611a      	str	r2, [r3, #16]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6a1a      	ldr	r2, [r3, #32]
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	441a      	add	r2, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	621a      	str	r2, [r3, #32]
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	015a      	lsls	r2, r3, #5
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d60:	699b      	ldr	r3, [r3, #24]
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	69ba      	ldr	r2, [r7, #24]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d809      	bhi.n	8008d7e <PCD_WriteEmptyTxFifo+0xe0>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6a1a      	ldr	r2, [r3, #32]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d203      	bcs.n	8008d7e <PCD_WriteEmptyTxFifo+0xe0>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1be      	bne.n	8008cfc <PCD_WriteEmptyTxFifo+0x5e>
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	699a      	ldr	r2, [r3, #24]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6a1b      	ldr	r3, [r3, #32]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d811      	bhi.n	8008dae <PCD_WriteEmptyTxFifo+0x110>
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	f003 030f 	and.w	r3, r3, #15
 8008d90:	2201      	movs	r2, #1
 8008d92:	fa02 f303 	lsl.w	r3, r2, r3
 8008d96:	60bb      	str	r3, [r7, #8]
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	43db      	mvns	r3, r3
 8008da4:	6939      	ldr	r1, [r7, #16]
 8008da6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008daa:	4013      	ands	r3, r2
 8008dac:	634b      	str	r3, [r1, #52]	; 0x34
 8008dae:	2300      	movs	r3, #0
 8008db0:	4618      	mov	r0, r3
 8008db2:	3720      	adds	r7, #32
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <PCD_EP_OutXfrComplete_int>:
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b088      	sub	sp, #32
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	61fb      	str	r3, [r7, #28]
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	61bb      	str	r3, [r7, #24]
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	333c      	adds	r3, #60	; 0x3c
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	617b      	str	r3, [r7, #20]
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	015a      	lsls	r2, r3, #5
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	613b      	str	r3, [r7, #16]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d17b      	bne.n	8008ee6 <PCD_EP_OutXfrComplete_int+0x12e>
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	f003 0308 	and.w	r3, r3, #8
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d015      	beq.n	8008e24 <PCD_EP_OutXfrComplete_int+0x6c>
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	4a61      	ldr	r2, [pc, #388]	; (8008f80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	f240 80b9 	bls.w	8008f74 <PCD_EP_OutXfrComplete_int+0x1bc>
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 80b3 	beq.w	8008f74 <PCD_EP_OutXfrComplete_int+0x1bc>
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	015a      	lsls	r2, r3, #5
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	4413      	add	r3, r2
 8008e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e20:	6093      	str	r3, [r2, #8]
 8008e22:	e0a7      	b.n	8008f74 <PCD_EP_OutXfrComplete_int+0x1bc>
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	f003 0320 	and.w	r3, r3, #32
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d009      	beq.n	8008e42 <PCD_EP_OutXfrComplete_int+0x8a>
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	015a      	lsls	r2, r3, #5
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	4413      	add	r3, r2
 8008e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	2320      	movs	r3, #32
 8008e3e:	6093      	str	r3, [r2, #8]
 8008e40:	e098      	b.n	8008f74 <PCD_EP_OutXfrComplete_int+0x1bc>
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f040 8093 	bne.w	8008f74 <PCD_EP_OutXfrComplete_int+0x1bc>
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	4a4b      	ldr	r2, [pc, #300]	; (8008f80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d90f      	bls.n	8008e76 <PCD_EP_OutXfrComplete_int+0xbe>
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00a      	beq.n	8008e76 <PCD_EP_OutXfrComplete_int+0xbe>
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	015a      	lsls	r2, r3, #5
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e72:	6093      	str	r3, [r2, #8]
 8008e74:	e07e      	b.n	8008f74 <PCD_EP_OutXfrComplete_int+0x1bc>
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	00db      	lsls	r3, r3, #3
 8008e7c:	4413      	add	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	4413      	add	r3, r2
 8008e88:	3304      	adds	r3, #4
 8008e8a:	60fb      	str	r3, [r7, #12]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	69da      	ldr	r2, [r3, #28]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	0159      	lsls	r1, r3, #5
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	440b      	add	r3, r1
 8008e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ea2:	1ad2      	subs	r2, r2, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	621a      	str	r2, [r3, #32]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d114      	bne.n	8008ed8 <PCD_EP_OutXfrComplete_int+0x120>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d109      	bne.n	8008eca <PCD_EP_OutXfrComplete_int+0x112>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6818      	ldr	r0, [r3, #0]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	2101      	movs	r1, #1
 8008ec4:	f003 f9dc 	bl	800c280 <USB_EP0_OutStart>
 8008ec8:	e006      	b.n	8008ed8 <PCD_EP_OutXfrComplete_int+0x120>
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	691a      	ldr	r2, [r3, #16]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6a1b      	ldr	r3, [r3, #32]
 8008ed2:	441a      	add	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	611a      	str	r2, [r3, #16]
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	4619      	mov	r1, r3
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f006 fff0 	bl	800fec4 <HAL_PCD_DataOutStageCallback>
 8008ee4:	e046      	b.n	8008f74 <PCD_EP_OutXfrComplete_int+0x1bc>
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	4a26      	ldr	r2, [pc, #152]	; (8008f84 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d124      	bne.n	8008f38 <PCD_EP_OutXfrComplete_int+0x180>
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00a      	beq.n	8008f0e <PCD_EP_OutXfrComplete_int+0x156>
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	015a      	lsls	r2, r3, #5
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	4413      	add	r3, r2
 8008f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f04:	461a      	mov	r2, r3
 8008f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f0a:	6093      	str	r3, [r2, #8]
 8008f0c:	e032      	b.n	8008f74 <PCD_EP_OutXfrComplete_int+0x1bc>
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	f003 0320 	and.w	r3, r3, #32
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d008      	beq.n	8008f2a <PCD_EP_OutXfrComplete_int+0x172>
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f24:	461a      	mov	r2, r3
 8008f26:	2320      	movs	r3, #32
 8008f28:	6093      	str	r3, [r2, #8]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	4619      	mov	r1, r3
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f006 ffc7 	bl	800fec4 <HAL_PCD_DataOutStageCallback>
 8008f36:	e01d      	b.n	8008f74 <PCD_EP_OutXfrComplete_int+0x1bc>
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d114      	bne.n	8008f68 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008f3e:	6879      	ldr	r1, [r7, #4]
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	4613      	mov	r3, r2
 8008f44:	00db      	lsls	r3, r3, #3
 8008f46:	4413      	add	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	440b      	add	r3, r1
 8008f4c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d108      	bne.n	8008f68 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008f60:	461a      	mov	r2, r3
 8008f62:	2100      	movs	r1, #0
 8008f64:	f003 f98c 	bl	800c280 <USB_EP0_OutStart>
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f006 ffa8 	bl	800fec4 <HAL_PCD_DataOutStageCallback>
 8008f74:	2300      	movs	r3, #0
 8008f76:	4618      	mov	r0, r3
 8008f78:	3720      	adds	r7, #32
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	4f54300a 	.word	0x4f54300a
 8008f84:	4f54310a 	.word	0x4f54310a

08008f88 <PCD_EP_OutSetupPacket_int>:
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	617b      	str	r3, [r7, #20]
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	613b      	str	r3, [r7, #16]
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	333c      	adds	r3, #60	; 0x3c
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	60fb      	str	r3, [r7, #12]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	015a      	lsls	r2, r3, #5
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	4413      	add	r3, r2
 8008fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	60bb      	str	r3, [r7, #8]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	4a15      	ldr	r2, [pc, #84]	; (8009010 <PCD_EP_OutSetupPacket_int+0x88>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d90e      	bls.n	8008fdc <PCD_EP_OutSetupPacket_int+0x54>
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d009      	beq.n	8008fdc <PCD_EP_OutSetupPacket_int+0x54>
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fda:	6093      	str	r3, [r2, #8]
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f006 ff5f 	bl	800fea0 <HAL_PCD_SetupStageCallback>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	4a0a      	ldr	r2, [pc, #40]	; (8009010 <PCD_EP_OutSetupPacket_int+0x88>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d90c      	bls.n	8009004 <PCD_EP_OutSetupPacket_int+0x7c>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d108      	bne.n	8009004 <PCD_EP_OutSetupPacket_int+0x7c>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6818      	ldr	r0, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	2101      	movs	r1, #1
 8009000:	f003 f93e 	bl	800c280 <USB_EP0_OutStart>
 8009004:	2300      	movs	r3, #0
 8009006:	4618      	mov	r0, r3
 8009008:	3718      	adds	r7, #24
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	4f54300a 	.word	0x4f54300a

08009014 <HAL_PCDEx_SetTxFiFo>:
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	460b      	mov	r3, r1
 800901e:	70fb      	strb	r3, [r7, #3]
 8009020:	4613      	mov	r3, r2
 8009022:	803b      	strh	r3, [r7, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902a:	60bb      	str	r3, [r7, #8]
 800902c:	78fb      	ldrb	r3, [r7, #3]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d107      	bne.n	8009042 <HAL_PCDEx_SetTxFiFo+0x2e>
 8009032:	883b      	ldrh	r3, [r7, #0]
 8009034:	0419      	lsls	r1, r3, #16
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	430a      	orrs	r2, r1
 800903e:	629a      	str	r2, [r3, #40]	; 0x28
 8009040:	e028      	b.n	8009094 <HAL_PCDEx_SetTxFiFo+0x80>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009048:	0c1b      	lsrs	r3, r3, #16
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	4413      	add	r3, r2
 800904e:	60bb      	str	r3, [r7, #8]
 8009050:	2300      	movs	r3, #0
 8009052:	73fb      	strb	r3, [r7, #15]
 8009054:	e00d      	b.n	8009072 <HAL_PCDEx_SetTxFiFo+0x5e>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	7bfb      	ldrb	r3, [r7, #15]
 800905c:	3340      	adds	r3, #64	; 0x40
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4413      	add	r3, r2
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	0c1b      	lsrs	r3, r3, #16
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	4413      	add	r3, r2
 800906a:	60bb      	str	r3, [r7, #8]
 800906c:	7bfb      	ldrb	r3, [r7, #15]
 800906e:	3301      	adds	r3, #1
 8009070:	73fb      	strb	r3, [r7, #15]
 8009072:	7bfa      	ldrb	r2, [r7, #15]
 8009074:	78fb      	ldrb	r3, [r7, #3]
 8009076:	3b01      	subs	r3, #1
 8009078:	429a      	cmp	r2, r3
 800907a:	d3ec      	bcc.n	8009056 <HAL_PCDEx_SetTxFiFo+0x42>
 800907c:	883b      	ldrh	r3, [r7, #0]
 800907e:	0418      	lsls	r0, r3, #16
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6819      	ldr	r1, [r3, #0]
 8009084:	78fb      	ldrb	r3, [r7, #3]
 8009086:	3b01      	subs	r3, #1
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	4302      	orrs	r2, r0
 800908c:	3340      	adds	r3, #64	; 0x40
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	440b      	add	r3, r1
 8009092:	605a      	str	r2, [r3, #4]
 8009094:	2300      	movs	r3, #0
 8009096:	4618      	mov	r0, r3
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <HAL_PCDEx_SetRxFiFo>:
 80090a2:	b480      	push	{r7}
 80090a4:	b083      	sub	sp, #12
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	460b      	mov	r3, r1
 80090ac:	807b      	strh	r3, [r7, #2]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	887a      	ldrh	r2, [r7, #2]
 80090b4:	625a      	str	r2, [r3, #36]	; 0x24
 80090b6:	2300      	movs	r3, #0
 80090b8:	4618      	mov	r0, r3
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <HAL_PCDEx_LPM_Callback>:
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
 80090d0:	bf00      	nop
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <HAL_RCC_OscConfig>:
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d101      	bne.n	80090ee <HAL_RCC_OscConfig+0x12>
 80090ea:	2301      	movs	r3, #1
 80090ec:	e267      	b.n	80095be <HAL_RCC_OscConfig+0x4e2>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f003 0301 	and.w	r3, r3, #1
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d075      	beq.n	80091e6 <HAL_RCC_OscConfig+0x10a>
 80090fa:	4b88      	ldr	r3, [pc, #544]	; (800931c <HAL_RCC_OscConfig+0x240>)
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	f003 030c 	and.w	r3, r3, #12
 8009102:	2b04      	cmp	r3, #4
 8009104:	d00c      	beq.n	8009120 <HAL_RCC_OscConfig+0x44>
 8009106:	4b85      	ldr	r3, [pc, #532]	; (800931c <HAL_RCC_OscConfig+0x240>)
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f003 030c 	and.w	r3, r3, #12
 800910e:	2b08      	cmp	r3, #8
 8009110:	d112      	bne.n	8009138 <HAL_RCC_OscConfig+0x5c>
 8009112:	4b82      	ldr	r3, [pc, #520]	; (800931c <HAL_RCC_OscConfig+0x240>)
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800911a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800911e:	d10b      	bne.n	8009138 <HAL_RCC_OscConfig+0x5c>
 8009120:	4b7e      	ldr	r3, [pc, #504]	; (800931c <HAL_RCC_OscConfig+0x240>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d05b      	beq.n	80091e4 <HAL_RCC_OscConfig+0x108>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d157      	bne.n	80091e4 <HAL_RCC_OscConfig+0x108>
 8009134:	2301      	movs	r3, #1
 8009136:	e242      	b.n	80095be <HAL_RCC_OscConfig+0x4e2>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009140:	d106      	bne.n	8009150 <HAL_RCC_OscConfig+0x74>
 8009142:	4b76      	ldr	r3, [pc, #472]	; (800931c <HAL_RCC_OscConfig+0x240>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a75      	ldr	r2, [pc, #468]	; (800931c <HAL_RCC_OscConfig+0x240>)
 8009148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800914c:	6013      	str	r3, [r2, #0]
 800914e:	e01d      	b.n	800918c <HAL_RCC_OscConfig+0xb0>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009158:	d10c      	bne.n	8009174 <HAL_RCC_OscConfig+0x98>
 800915a:	4b70      	ldr	r3, [pc, #448]	; (800931c <HAL_RCC_OscConfig+0x240>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a6f      	ldr	r2, [pc, #444]	; (800931c <HAL_RCC_OscConfig+0x240>)
 8009160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009164:	6013      	str	r3, [r2, #0]
 8009166:	4b6d      	ldr	r3, [pc, #436]	; (800931c <HAL_RCC_OscConfig+0x240>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a6c      	ldr	r2, [pc, #432]	; (800931c <HAL_RCC_OscConfig+0x240>)
 800916c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009170:	6013      	str	r3, [r2, #0]
 8009172:	e00b      	b.n	800918c <HAL_RCC_OscConfig+0xb0>
 8009174:	4b69      	ldr	r3, [pc, #420]	; (800931c <HAL_RCC_OscConfig+0x240>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a68      	ldr	r2, [pc, #416]	; (800931c <HAL_RCC_OscConfig+0x240>)
 800917a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800917e:	6013      	str	r3, [r2, #0]
 8009180:	4b66      	ldr	r3, [pc, #408]	; (800931c <HAL_RCC_OscConfig+0x240>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a65      	ldr	r2, [pc, #404]	; (800931c <HAL_RCC_OscConfig+0x240>)
 8009186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800918a:	6013      	str	r3, [r2, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d013      	beq.n	80091bc <HAL_RCC_OscConfig+0xe0>
 8009194:	f7fb fe6e 	bl	8004e74 <HAL_GetTick>
 8009198:	6138      	str	r0, [r7, #16]
 800919a:	e008      	b.n	80091ae <HAL_RCC_OscConfig+0xd2>
 800919c:	f7fb fe6a 	bl	8004e74 <HAL_GetTick>
 80091a0:	4602      	mov	r2, r0
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	2b64      	cmp	r3, #100	; 0x64
 80091a8:	d901      	bls.n	80091ae <HAL_RCC_OscConfig+0xd2>
 80091aa:	2303      	movs	r3, #3
 80091ac:	e207      	b.n	80095be <HAL_RCC_OscConfig+0x4e2>
 80091ae:	4b5b      	ldr	r3, [pc, #364]	; (800931c <HAL_RCC_OscConfig+0x240>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d0f0      	beq.n	800919c <HAL_RCC_OscConfig+0xc0>
 80091ba:	e014      	b.n	80091e6 <HAL_RCC_OscConfig+0x10a>
 80091bc:	f7fb fe5a 	bl	8004e74 <HAL_GetTick>
 80091c0:	6138      	str	r0, [r7, #16]
 80091c2:	e008      	b.n	80091d6 <HAL_RCC_OscConfig+0xfa>
 80091c4:	f7fb fe56 	bl	8004e74 <HAL_GetTick>
 80091c8:	4602      	mov	r2, r0
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	2b64      	cmp	r3, #100	; 0x64
 80091d0:	d901      	bls.n	80091d6 <HAL_RCC_OscConfig+0xfa>
 80091d2:	2303      	movs	r3, #3
 80091d4:	e1f3      	b.n	80095be <HAL_RCC_OscConfig+0x4e2>
 80091d6:	4b51      	ldr	r3, [pc, #324]	; (800931c <HAL_RCC_OscConfig+0x240>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1f0      	bne.n	80091c4 <HAL_RCC_OscConfig+0xe8>
 80091e2:	e000      	b.n	80091e6 <HAL_RCC_OscConfig+0x10a>
 80091e4:	bf00      	nop
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 0302 	and.w	r3, r3, #2
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d063      	beq.n	80092ba <HAL_RCC_OscConfig+0x1de>
 80091f2:	4b4a      	ldr	r3, [pc, #296]	; (800931c <HAL_RCC_OscConfig+0x240>)
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	f003 030c 	and.w	r3, r3, #12
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00b      	beq.n	8009216 <HAL_RCC_OscConfig+0x13a>
 80091fe:	4b47      	ldr	r3, [pc, #284]	; (800931c <HAL_RCC_OscConfig+0x240>)
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	f003 030c 	and.w	r3, r3, #12
 8009206:	2b08      	cmp	r3, #8
 8009208:	d11c      	bne.n	8009244 <HAL_RCC_OscConfig+0x168>
 800920a:	4b44      	ldr	r3, [pc, #272]	; (800931c <HAL_RCC_OscConfig+0x240>)
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009212:	2b00      	cmp	r3, #0
 8009214:	d116      	bne.n	8009244 <HAL_RCC_OscConfig+0x168>
 8009216:	4b41      	ldr	r3, [pc, #260]	; (800931c <HAL_RCC_OscConfig+0x240>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 0302 	and.w	r3, r3, #2
 800921e:	2b00      	cmp	r3, #0
 8009220:	d005      	beq.n	800922e <HAL_RCC_OscConfig+0x152>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	2b01      	cmp	r3, #1
 8009228:	d001      	beq.n	800922e <HAL_RCC_OscConfig+0x152>
 800922a:	2301      	movs	r3, #1
 800922c:	e1c7      	b.n	80095be <HAL_RCC_OscConfig+0x4e2>
 800922e:	4b3b      	ldr	r3, [pc, #236]	; (800931c <HAL_RCC_OscConfig+0x240>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	00db      	lsls	r3, r3, #3
 800923c:	4937      	ldr	r1, [pc, #220]	; (800931c <HAL_RCC_OscConfig+0x240>)
 800923e:	4313      	orrs	r3, r2
 8009240:	600b      	str	r3, [r1, #0]
 8009242:	e03a      	b.n	80092ba <HAL_RCC_OscConfig+0x1de>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d020      	beq.n	800928e <HAL_RCC_OscConfig+0x1b2>
 800924c:	4b34      	ldr	r3, [pc, #208]	; (8009320 <HAL_RCC_OscConfig+0x244>)
 800924e:	2201      	movs	r2, #1
 8009250:	601a      	str	r2, [r3, #0]
 8009252:	f7fb fe0f 	bl	8004e74 <HAL_GetTick>
 8009256:	6138      	str	r0, [r7, #16]
 8009258:	e008      	b.n	800926c <HAL_RCC_OscConfig+0x190>
 800925a:	f7fb fe0b 	bl	8004e74 <HAL_GetTick>
 800925e:	4602      	mov	r2, r0
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	2b02      	cmp	r3, #2
 8009266:	d901      	bls.n	800926c <HAL_RCC_OscConfig+0x190>
 8009268:	2303      	movs	r3, #3
 800926a:	e1a8      	b.n	80095be <HAL_RCC_OscConfig+0x4e2>
 800926c:	4b2b      	ldr	r3, [pc, #172]	; (800931c <HAL_RCC_OscConfig+0x240>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 0302 	and.w	r3, r3, #2
 8009274:	2b00      	cmp	r3, #0
 8009276:	d0f0      	beq.n	800925a <HAL_RCC_OscConfig+0x17e>
 8009278:	4b28      	ldr	r3, [pc, #160]	; (800931c <HAL_RCC_OscConfig+0x240>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	00db      	lsls	r3, r3, #3
 8009286:	4925      	ldr	r1, [pc, #148]	; (800931c <HAL_RCC_OscConfig+0x240>)
 8009288:	4313      	orrs	r3, r2
 800928a:	600b      	str	r3, [r1, #0]
 800928c:	e015      	b.n	80092ba <HAL_RCC_OscConfig+0x1de>
 800928e:	4b24      	ldr	r3, [pc, #144]	; (8009320 <HAL_RCC_OscConfig+0x244>)
 8009290:	2200      	movs	r2, #0
 8009292:	601a      	str	r2, [r3, #0]
 8009294:	f7fb fdee 	bl	8004e74 <HAL_GetTick>
 8009298:	6138      	str	r0, [r7, #16]
 800929a:	e008      	b.n	80092ae <HAL_RCC_OscConfig+0x1d2>
 800929c:	f7fb fdea 	bl	8004e74 <HAL_GetTick>
 80092a0:	4602      	mov	r2, r0
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d901      	bls.n	80092ae <HAL_RCC_OscConfig+0x1d2>
 80092aa:	2303      	movs	r3, #3
 80092ac:	e187      	b.n	80095be <HAL_RCC_OscConfig+0x4e2>
 80092ae:	4b1b      	ldr	r3, [pc, #108]	; (800931c <HAL_RCC_OscConfig+0x240>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 0302 	and.w	r3, r3, #2
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1f0      	bne.n	800929c <HAL_RCC_OscConfig+0x1c0>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f003 0308 	and.w	r3, r3, #8
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d036      	beq.n	8009334 <HAL_RCC_OscConfig+0x258>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d016      	beq.n	80092fc <HAL_RCC_OscConfig+0x220>
 80092ce:	4b15      	ldr	r3, [pc, #84]	; (8009324 <HAL_RCC_OscConfig+0x248>)
 80092d0:	2201      	movs	r2, #1
 80092d2:	601a      	str	r2, [r3, #0]
 80092d4:	f7fb fdce 	bl	8004e74 <HAL_GetTick>
 80092d8:	6138      	str	r0, [r7, #16]
 80092da:	e008      	b.n	80092ee <HAL_RCC_OscConfig+0x212>
 80092dc:	f7fb fdca 	bl	8004e74 <HAL_GetTick>
 80092e0:	4602      	mov	r2, r0
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d901      	bls.n	80092ee <HAL_RCC_OscConfig+0x212>
 80092ea:	2303      	movs	r3, #3
 80092ec:	e167      	b.n	80095be <HAL_RCC_OscConfig+0x4e2>
 80092ee:	4b0b      	ldr	r3, [pc, #44]	; (800931c <HAL_RCC_OscConfig+0x240>)
 80092f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092f2:	f003 0302 	and.w	r3, r3, #2
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d0f0      	beq.n	80092dc <HAL_RCC_OscConfig+0x200>
 80092fa:	e01b      	b.n	8009334 <HAL_RCC_OscConfig+0x258>
 80092fc:	4b09      	ldr	r3, [pc, #36]	; (8009324 <HAL_RCC_OscConfig+0x248>)
 80092fe:	2200      	movs	r2, #0
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	f7fb fdb7 	bl	8004e74 <HAL_GetTick>
 8009306:	6138      	str	r0, [r7, #16]
 8009308:	e00e      	b.n	8009328 <HAL_RCC_OscConfig+0x24c>
 800930a:	f7fb fdb3 	bl	8004e74 <HAL_GetTick>
 800930e:	4602      	mov	r2, r0
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	1ad3      	subs	r3, r2, r3
 8009314:	2b02      	cmp	r3, #2
 8009316:	d907      	bls.n	8009328 <HAL_RCC_OscConfig+0x24c>
 8009318:	2303      	movs	r3, #3
 800931a:	e150      	b.n	80095be <HAL_RCC_OscConfig+0x4e2>
 800931c:	40023800 	.word	0x40023800
 8009320:	42470000 	.word	0x42470000
 8009324:	42470e80 	.word	0x42470e80
 8009328:	4b88      	ldr	r3, [pc, #544]	; (800954c <HAL_RCC_OscConfig+0x470>)
 800932a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800932c:	f003 0302 	and.w	r3, r3, #2
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1ea      	bne.n	800930a <HAL_RCC_OscConfig+0x22e>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f003 0304 	and.w	r3, r3, #4
 800933c:	2b00      	cmp	r3, #0
 800933e:	f000 8097 	beq.w	8009470 <HAL_RCC_OscConfig+0x394>
 8009342:	2300      	movs	r3, #0
 8009344:	75fb      	strb	r3, [r7, #23]
 8009346:	4b81      	ldr	r3, [pc, #516]	; (800954c <HAL_RCC_OscConfig+0x470>)
 8009348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800934e:	2b00      	cmp	r3, #0
 8009350:	d10f      	bne.n	8009372 <HAL_RCC_OscConfig+0x296>
 8009352:	2300      	movs	r3, #0
 8009354:	60bb      	str	r3, [r7, #8]
 8009356:	4b7d      	ldr	r3, [pc, #500]	; (800954c <HAL_RCC_OscConfig+0x470>)
 8009358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935a:	4a7c      	ldr	r2, [pc, #496]	; (800954c <HAL_RCC_OscConfig+0x470>)
 800935c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009360:	6413      	str	r3, [r2, #64]	; 0x40
 8009362:	4b7a      	ldr	r3, [pc, #488]	; (800954c <HAL_RCC_OscConfig+0x470>)
 8009364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800936a:	60bb      	str	r3, [r7, #8]
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2301      	movs	r3, #1
 8009370:	75fb      	strb	r3, [r7, #23]
 8009372:	4b77      	ldr	r3, [pc, #476]	; (8009550 <HAL_RCC_OscConfig+0x474>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800937a:	2b00      	cmp	r3, #0
 800937c:	d118      	bne.n	80093b0 <HAL_RCC_OscConfig+0x2d4>
 800937e:	4b74      	ldr	r3, [pc, #464]	; (8009550 <HAL_RCC_OscConfig+0x474>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a73      	ldr	r2, [pc, #460]	; (8009550 <HAL_RCC_OscConfig+0x474>)
 8009384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009388:	6013      	str	r3, [r2, #0]
 800938a:	f7fb fd73 	bl	8004e74 <HAL_GetTick>
 800938e:	6138      	str	r0, [r7, #16]
 8009390:	e008      	b.n	80093a4 <HAL_RCC_OscConfig+0x2c8>
 8009392:	f7fb fd6f 	bl	8004e74 <HAL_GetTick>
 8009396:	4602      	mov	r2, r0
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	2b02      	cmp	r3, #2
 800939e:	d901      	bls.n	80093a4 <HAL_RCC_OscConfig+0x2c8>
 80093a0:	2303      	movs	r3, #3
 80093a2:	e10c      	b.n	80095be <HAL_RCC_OscConfig+0x4e2>
 80093a4:	4b6a      	ldr	r3, [pc, #424]	; (8009550 <HAL_RCC_OscConfig+0x474>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d0f0      	beq.n	8009392 <HAL_RCC_OscConfig+0x2b6>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d106      	bne.n	80093c6 <HAL_RCC_OscConfig+0x2ea>
 80093b8:	4b64      	ldr	r3, [pc, #400]	; (800954c <HAL_RCC_OscConfig+0x470>)
 80093ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093bc:	4a63      	ldr	r2, [pc, #396]	; (800954c <HAL_RCC_OscConfig+0x470>)
 80093be:	f043 0301 	orr.w	r3, r3, #1
 80093c2:	6713      	str	r3, [r2, #112]	; 0x70
 80093c4:	e01c      	b.n	8009400 <HAL_RCC_OscConfig+0x324>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	2b05      	cmp	r3, #5
 80093cc:	d10c      	bne.n	80093e8 <HAL_RCC_OscConfig+0x30c>
 80093ce:	4b5f      	ldr	r3, [pc, #380]	; (800954c <HAL_RCC_OscConfig+0x470>)
 80093d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d2:	4a5e      	ldr	r2, [pc, #376]	; (800954c <HAL_RCC_OscConfig+0x470>)
 80093d4:	f043 0304 	orr.w	r3, r3, #4
 80093d8:	6713      	str	r3, [r2, #112]	; 0x70
 80093da:	4b5c      	ldr	r3, [pc, #368]	; (800954c <HAL_RCC_OscConfig+0x470>)
 80093dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093de:	4a5b      	ldr	r2, [pc, #364]	; (800954c <HAL_RCC_OscConfig+0x470>)
 80093e0:	f043 0301 	orr.w	r3, r3, #1
 80093e4:	6713      	str	r3, [r2, #112]	; 0x70
 80093e6:	e00b      	b.n	8009400 <HAL_RCC_OscConfig+0x324>
 80093e8:	4b58      	ldr	r3, [pc, #352]	; (800954c <HAL_RCC_OscConfig+0x470>)
 80093ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ec:	4a57      	ldr	r2, [pc, #348]	; (800954c <HAL_RCC_OscConfig+0x470>)
 80093ee:	f023 0301 	bic.w	r3, r3, #1
 80093f2:	6713      	str	r3, [r2, #112]	; 0x70
 80093f4:	4b55      	ldr	r3, [pc, #340]	; (800954c <HAL_RCC_OscConfig+0x470>)
 80093f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f8:	4a54      	ldr	r2, [pc, #336]	; (800954c <HAL_RCC_OscConfig+0x470>)
 80093fa:	f023 0304 	bic.w	r3, r3, #4
 80093fe:	6713      	str	r3, [r2, #112]	; 0x70
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d015      	beq.n	8009434 <HAL_RCC_OscConfig+0x358>
 8009408:	f7fb fd34 	bl	8004e74 <HAL_GetTick>
 800940c:	6138      	str	r0, [r7, #16]
 800940e:	e00a      	b.n	8009426 <HAL_RCC_OscConfig+0x34a>
 8009410:	f7fb fd30 	bl	8004e74 <HAL_GetTick>
 8009414:	4602      	mov	r2, r0
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	f241 3288 	movw	r2, #5000	; 0x1388
 800941e:	4293      	cmp	r3, r2
 8009420:	d901      	bls.n	8009426 <HAL_RCC_OscConfig+0x34a>
 8009422:	2303      	movs	r3, #3
 8009424:	e0cb      	b.n	80095be <HAL_RCC_OscConfig+0x4e2>
 8009426:	4b49      	ldr	r3, [pc, #292]	; (800954c <HAL_RCC_OscConfig+0x470>)
 8009428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800942a:	f003 0302 	and.w	r3, r3, #2
 800942e:	2b00      	cmp	r3, #0
 8009430:	d0ee      	beq.n	8009410 <HAL_RCC_OscConfig+0x334>
 8009432:	e014      	b.n	800945e <HAL_RCC_OscConfig+0x382>
 8009434:	f7fb fd1e 	bl	8004e74 <HAL_GetTick>
 8009438:	6138      	str	r0, [r7, #16]
 800943a:	e00a      	b.n	8009452 <HAL_RCC_OscConfig+0x376>
 800943c:	f7fb fd1a 	bl	8004e74 <HAL_GetTick>
 8009440:	4602      	mov	r2, r0
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	f241 3288 	movw	r2, #5000	; 0x1388
 800944a:	4293      	cmp	r3, r2
 800944c:	d901      	bls.n	8009452 <HAL_RCC_OscConfig+0x376>
 800944e:	2303      	movs	r3, #3
 8009450:	e0b5      	b.n	80095be <HAL_RCC_OscConfig+0x4e2>
 8009452:	4b3e      	ldr	r3, [pc, #248]	; (800954c <HAL_RCC_OscConfig+0x470>)
 8009454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009456:	f003 0302 	and.w	r3, r3, #2
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1ee      	bne.n	800943c <HAL_RCC_OscConfig+0x360>
 800945e:	7dfb      	ldrb	r3, [r7, #23]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d105      	bne.n	8009470 <HAL_RCC_OscConfig+0x394>
 8009464:	4b39      	ldr	r3, [pc, #228]	; (800954c <HAL_RCC_OscConfig+0x470>)
 8009466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009468:	4a38      	ldr	r2, [pc, #224]	; (800954c <HAL_RCC_OscConfig+0x470>)
 800946a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800946e:	6413      	str	r3, [r2, #64]	; 0x40
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	2b00      	cmp	r3, #0
 8009476:	f000 80a1 	beq.w	80095bc <HAL_RCC_OscConfig+0x4e0>
 800947a:	4b34      	ldr	r3, [pc, #208]	; (800954c <HAL_RCC_OscConfig+0x470>)
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	f003 030c 	and.w	r3, r3, #12
 8009482:	2b08      	cmp	r3, #8
 8009484:	d05c      	beq.n	8009540 <HAL_RCC_OscConfig+0x464>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	2b02      	cmp	r3, #2
 800948c:	d141      	bne.n	8009512 <HAL_RCC_OscConfig+0x436>
 800948e:	4b31      	ldr	r3, [pc, #196]	; (8009554 <HAL_RCC_OscConfig+0x478>)
 8009490:	2200      	movs	r2, #0
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	f7fb fcee 	bl	8004e74 <HAL_GetTick>
 8009498:	6138      	str	r0, [r7, #16]
 800949a:	e008      	b.n	80094ae <HAL_RCC_OscConfig+0x3d2>
 800949c:	f7fb fcea 	bl	8004e74 <HAL_GetTick>
 80094a0:	4602      	mov	r2, r0
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d901      	bls.n	80094ae <HAL_RCC_OscConfig+0x3d2>
 80094aa:	2303      	movs	r3, #3
 80094ac:	e087      	b.n	80095be <HAL_RCC_OscConfig+0x4e2>
 80094ae:	4b27      	ldr	r3, [pc, #156]	; (800954c <HAL_RCC_OscConfig+0x470>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1f0      	bne.n	800949c <HAL_RCC_OscConfig+0x3c0>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	69da      	ldr	r2, [r3, #28]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	431a      	orrs	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c8:	019b      	lsls	r3, r3, #6
 80094ca:	431a      	orrs	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d0:	085b      	lsrs	r3, r3, #1
 80094d2:	3b01      	subs	r3, #1
 80094d4:	041b      	lsls	r3, r3, #16
 80094d6:	431a      	orrs	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094dc:	061b      	lsls	r3, r3, #24
 80094de:	491b      	ldr	r1, [pc, #108]	; (800954c <HAL_RCC_OscConfig+0x470>)
 80094e0:	4313      	orrs	r3, r2
 80094e2:	604b      	str	r3, [r1, #4]
 80094e4:	4b1b      	ldr	r3, [pc, #108]	; (8009554 <HAL_RCC_OscConfig+0x478>)
 80094e6:	2201      	movs	r2, #1
 80094e8:	601a      	str	r2, [r3, #0]
 80094ea:	f7fb fcc3 	bl	8004e74 <HAL_GetTick>
 80094ee:	6138      	str	r0, [r7, #16]
 80094f0:	e008      	b.n	8009504 <HAL_RCC_OscConfig+0x428>
 80094f2:	f7fb fcbf 	bl	8004e74 <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d901      	bls.n	8009504 <HAL_RCC_OscConfig+0x428>
 8009500:	2303      	movs	r3, #3
 8009502:	e05c      	b.n	80095be <HAL_RCC_OscConfig+0x4e2>
 8009504:	4b11      	ldr	r3, [pc, #68]	; (800954c <HAL_RCC_OscConfig+0x470>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800950c:	2b00      	cmp	r3, #0
 800950e:	d0f0      	beq.n	80094f2 <HAL_RCC_OscConfig+0x416>
 8009510:	e054      	b.n	80095bc <HAL_RCC_OscConfig+0x4e0>
 8009512:	4b10      	ldr	r3, [pc, #64]	; (8009554 <HAL_RCC_OscConfig+0x478>)
 8009514:	2200      	movs	r2, #0
 8009516:	601a      	str	r2, [r3, #0]
 8009518:	f7fb fcac 	bl	8004e74 <HAL_GetTick>
 800951c:	6138      	str	r0, [r7, #16]
 800951e:	e008      	b.n	8009532 <HAL_RCC_OscConfig+0x456>
 8009520:	f7fb fca8 	bl	8004e74 <HAL_GetTick>
 8009524:	4602      	mov	r2, r0
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	2b02      	cmp	r3, #2
 800952c:	d901      	bls.n	8009532 <HAL_RCC_OscConfig+0x456>
 800952e:	2303      	movs	r3, #3
 8009530:	e045      	b.n	80095be <HAL_RCC_OscConfig+0x4e2>
 8009532:	4b06      	ldr	r3, [pc, #24]	; (800954c <HAL_RCC_OscConfig+0x470>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1f0      	bne.n	8009520 <HAL_RCC_OscConfig+0x444>
 800953e:	e03d      	b.n	80095bc <HAL_RCC_OscConfig+0x4e0>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	699b      	ldr	r3, [r3, #24]
 8009544:	2b01      	cmp	r3, #1
 8009546:	d107      	bne.n	8009558 <HAL_RCC_OscConfig+0x47c>
 8009548:	2301      	movs	r3, #1
 800954a:	e038      	b.n	80095be <HAL_RCC_OscConfig+0x4e2>
 800954c:	40023800 	.word	0x40023800
 8009550:	40007000 	.word	0x40007000
 8009554:	42470060 	.word	0x42470060
 8009558:	4b1b      	ldr	r3, [pc, #108]	; (80095c8 <HAL_RCC_OscConfig+0x4ec>)
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	2b01      	cmp	r3, #1
 8009564:	d028      	beq.n	80095b8 <HAL_RCC_OscConfig+0x4dc>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	69db      	ldr	r3, [r3, #28]
 8009570:	429a      	cmp	r2, r3
 8009572:	d121      	bne.n	80095b8 <HAL_RCC_OscConfig+0x4dc>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a1b      	ldr	r3, [r3, #32]
 800957e:	429a      	cmp	r2, r3
 8009580:	d11a      	bne.n	80095b8 <HAL_RCC_OscConfig+0x4dc>
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009588:	4013      	ands	r3, r2
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800958e:	0192      	lsls	r2, r2, #6
 8009590:	4293      	cmp	r3, r2
 8009592:	d111      	bne.n	80095b8 <HAL_RCC_OscConfig+0x4dc>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800959e:	085b      	lsrs	r3, r3, #1
 80095a0:	3b01      	subs	r3, #1
 80095a2:	041b      	lsls	r3, r3, #16
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d107      	bne.n	80095b8 <HAL_RCC_OscConfig+0x4dc>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b2:	061b      	lsls	r3, r3, #24
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d001      	beq.n	80095bc <HAL_RCC_OscConfig+0x4e0>
 80095b8:	2301      	movs	r3, #1
 80095ba:	e000      	b.n	80095be <HAL_RCC_OscConfig+0x4e2>
 80095bc:	2300      	movs	r3, #0
 80095be:	4618      	mov	r0, r3
 80095c0:	3718      	adds	r7, #24
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	40023800 	.word	0x40023800

080095cc <HAL_RCC_ClockConfig>:
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d101      	bne.n	80095e0 <HAL_RCC_ClockConfig+0x14>
 80095dc:	2301      	movs	r3, #1
 80095de:	e0cc      	b.n	800977a <HAL_RCC_ClockConfig+0x1ae>
 80095e0:	4b68      	ldr	r3, [pc, #416]	; (8009784 <HAL_RCC_ClockConfig+0x1b8>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 0307 	and.w	r3, r3, #7
 80095e8:	683a      	ldr	r2, [r7, #0]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d90c      	bls.n	8009608 <HAL_RCC_ClockConfig+0x3c>
 80095ee:	4b65      	ldr	r3, [pc, #404]	; (8009784 <HAL_RCC_ClockConfig+0x1b8>)
 80095f0:	683a      	ldr	r2, [r7, #0]
 80095f2:	b2d2      	uxtb	r2, r2
 80095f4:	701a      	strb	r2, [r3, #0]
 80095f6:	4b63      	ldr	r3, [pc, #396]	; (8009784 <HAL_RCC_ClockConfig+0x1b8>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f003 0307 	and.w	r3, r3, #7
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	429a      	cmp	r2, r3
 8009602:	d001      	beq.n	8009608 <HAL_RCC_ClockConfig+0x3c>
 8009604:	2301      	movs	r3, #1
 8009606:	e0b8      	b.n	800977a <HAL_RCC_ClockConfig+0x1ae>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 0302 	and.w	r3, r3, #2
 8009610:	2b00      	cmp	r3, #0
 8009612:	d020      	beq.n	8009656 <HAL_RCC_ClockConfig+0x8a>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0304 	and.w	r3, r3, #4
 800961c:	2b00      	cmp	r3, #0
 800961e:	d005      	beq.n	800962c <HAL_RCC_ClockConfig+0x60>
 8009620:	4b59      	ldr	r3, [pc, #356]	; (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	4a58      	ldr	r2, [pc, #352]	; (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 8009626:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800962a:	6093      	str	r3, [r2, #8]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0308 	and.w	r3, r3, #8
 8009634:	2b00      	cmp	r3, #0
 8009636:	d005      	beq.n	8009644 <HAL_RCC_ClockConfig+0x78>
 8009638:	4b53      	ldr	r3, [pc, #332]	; (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	4a52      	ldr	r2, [pc, #328]	; (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 800963e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009642:	6093      	str	r3, [r2, #8]
 8009644:	4b50      	ldr	r3, [pc, #320]	; (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	494d      	ldr	r1, [pc, #308]	; (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 8009652:	4313      	orrs	r3, r2
 8009654:	608b      	str	r3, [r1, #8]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f003 0301 	and.w	r3, r3, #1
 800965e:	2b00      	cmp	r3, #0
 8009660:	d044      	beq.n	80096ec <HAL_RCC_ClockConfig+0x120>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	2b01      	cmp	r3, #1
 8009668:	d107      	bne.n	800967a <HAL_RCC_ClockConfig+0xae>
 800966a:	4b47      	ldr	r3, [pc, #284]	; (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009672:	2b00      	cmp	r3, #0
 8009674:	d119      	bne.n	80096aa <HAL_RCC_ClockConfig+0xde>
 8009676:	2301      	movs	r3, #1
 8009678:	e07f      	b.n	800977a <HAL_RCC_ClockConfig+0x1ae>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	2b02      	cmp	r3, #2
 8009680:	d003      	beq.n	800968a <HAL_RCC_ClockConfig+0xbe>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	2b03      	cmp	r3, #3
 8009688:	d107      	bne.n	800969a <HAL_RCC_ClockConfig+0xce>
 800968a:	4b3f      	ldr	r3, [pc, #252]	; (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009692:	2b00      	cmp	r3, #0
 8009694:	d109      	bne.n	80096aa <HAL_RCC_ClockConfig+0xde>
 8009696:	2301      	movs	r3, #1
 8009698:	e06f      	b.n	800977a <HAL_RCC_ClockConfig+0x1ae>
 800969a:	4b3b      	ldr	r3, [pc, #236]	; (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 0302 	and.w	r3, r3, #2
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d101      	bne.n	80096aa <HAL_RCC_ClockConfig+0xde>
 80096a6:	2301      	movs	r3, #1
 80096a8:	e067      	b.n	800977a <HAL_RCC_ClockConfig+0x1ae>
 80096aa:	4b37      	ldr	r3, [pc, #220]	; (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	f023 0203 	bic.w	r2, r3, #3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	4934      	ldr	r1, [pc, #208]	; (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 80096b8:	4313      	orrs	r3, r2
 80096ba:	608b      	str	r3, [r1, #8]
 80096bc:	f7fb fbda 	bl	8004e74 <HAL_GetTick>
 80096c0:	60f8      	str	r0, [r7, #12]
 80096c2:	e00a      	b.n	80096da <HAL_RCC_ClockConfig+0x10e>
 80096c4:	f7fb fbd6 	bl	8004e74 <HAL_GetTick>
 80096c8:	4602      	mov	r2, r0
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	1ad3      	subs	r3, r2, r3
 80096ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d901      	bls.n	80096da <HAL_RCC_ClockConfig+0x10e>
 80096d6:	2303      	movs	r3, #3
 80096d8:	e04f      	b.n	800977a <HAL_RCC_ClockConfig+0x1ae>
 80096da:	4b2b      	ldr	r3, [pc, #172]	; (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	f003 020c 	and.w	r2, r3, #12
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d1eb      	bne.n	80096c4 <HAL_RCC_ClockConfig+0xf8>
 80096ec:	4b25      	ldr	r3, [pc, #148]	; (8009784 <HAL_RCC_ClockConfig+0x1b8>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0307 	and.w	r3, r3, #7
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d20c      	bcs.n	8009714 <HAL_RCC_ClockConfig+0x148>
 80096fa:	4b22      	ldr	r3, [pc, #136]	; (8009784 <HAL_RCC_ClockConfig+0x1b8>)
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	b2d2      	uxtb	r2, r2
 8009700:	701a      	strb	r2, [r3, #0]
 8009702:	4b20      	ldr	r3, [pc, #128]	; (8009784 <HAL_RCC_ClockConfig+0x1b8>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f003 0307 	and.w	r3, r3, #7
 800970a:	683a      	ldr	r2, [r7, #0]
 800970c:	429a      	cmp	r2, r3
 800970e:	d001      	beq.n	8009714 <HAL_RCC_ClockConfig+0x148>
 8009710:	2301      	movs	r3, #1
 8009712:	e032      	b.n	800977a <HAL_RCC_ClockConfig+0x1ae>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f003 0304 	and.w	r3, r3, #4
 800971c:	2b00      	cmp	r3, #0
 800971e:	d008      	beq.n	8009732 <HAL_RCC_ClockConfig+0x166>
 8009720:	4b19      	ldr	r3, [pc, #100]	; (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	4916      	ldr	r1, [pc, #88]	; (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 800972e:	4313      	orrs	r3, r2
 8009730:	608b      	str	r3, [r1, #8]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 0308 	and.w	r3, r3, #8
 800973a:	2b00      	cmp	r3, #0
 800973c:	d009      	beq.n	8009752 <HAL_RCC_ClockConfig+0x186>
 800973e:	4b12      	ldr	r3, [pc, #72]	; (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	00db      	lsls	r3, r3, #3
 800974c:	490e      	ldr	r1, [pc, #56]	; (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 800974e:	4313      	orrs	r3, r2
 8009750:	608b      	str	r3, [r1, #8]
 8009752:	f000 f821 	bl	8009798 <HAL_RCC_GetSysClockFreq>
 8009756:	4602      	mov	r2, r0
 8009758:	4b0b      	ldr	r3, [pc, #44]	; (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	091b      	lsrs	r3, r3, #4
 800975e:	f003 030f 	and.w	r3, r3, #15
 8009762:	490a      	ldr	r1, [pc, #40]	; (800978c <HAL_RCC_ClockConfig+0x1c0>)
 8009764:	5ccb      	ldrb	r3, [r1, r3]
 8009766:	fa22 f303 	lsr.w	r3, r2, r3
 800976a:	4a09      	ldr	r2, [pc, #36]	; (8009790 <HAL_RCC_ClockConfig+0x1c4>)
 800976c:	6013      	str	r3, [r2, #0]
 800976e:	4b09      	ldr	r3, [pc, #36]	; (8009794 <HAL_RCC_ClockConfig+0x1c8>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4618      	mov	r0, r3
 8009774:	f7fb f8ae 	bl	80048d4 <HAL_InitTick>
 8009778:	2300      	movs	r3, #0
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	40023c00 	.word	0x40023c00
 8009788:	40023800 	.word	0x40023800
 800978c:	08014d2c 	.word	0x08014d2c
 8009790:	20000014 	.word	0x20000014
 8009794:	20000018 	.word	0x20000018

08009798 <HAL_RCC_GetSysClockFreq>:
 8009798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800979c:	b094      	sub	sp, #80	; 0x50
 800979e:	af00      	add	r7, sp, #0
 80097a0:	2300      	movs	r3, #0
 80097a2:	647b      	str	r3, [r7, #68]	; 0x44
 80097a4:	2300      	movs	r3, #0
 80097a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097a8:	2300      	movs	r3, #0
 80097aa:	643b      	str	r3, [r7, #64]	; 0x40
 80097ac:	2300      	movs	r3, #0
 80097ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80097b0:	4b79      	ldr	r3, [pc, #484]	; (8009998 <HAL_RCC_GetSysClockFreq+0x200>)
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	f003 030c 	and.w	r3, r3, #12
 80097b8:	2b08      	cmp	r3, #8
 80097ba:	d00d      	beq.n	80097d8 <HAL_RCC_GetSysClockFreq+0x40>
 80097bc:	2b08      	cmp	r3, #8
 80097be:	f200 80e1 	bhi.w	8009984 <HAL_RCC_GetSysClockFreq+0x1ec>
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d002      	beq.n	80097cc <HAL_RCC_GetSysClockFreq+0x34>
 80097c6:	2b04      	cmp	r3, #4
 80097c8:	d003      	beq.n	80097d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80097ca:	e0db      	b.n	8009984 <HAL_RCC_GetSysClockFreq+0x1ec>
 80097cc:	4b73      	ldr	r3, [pc, #460]	; (800999c <HAL_RCC_GetSysClockFreq+0x204>)
 80097ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80097d0:	e0db      	b.n	800998a <HAL_RCC_GetSysClockFreq+0x1f2>
 80097d2:	4b73      	ldr	r3, [pc, #460]	; (80099a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80097d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80097d6:	e0d8      	b.n	800998a <HAL_RCC_GetSysClockFreq+0x1f2>
 80097d8:	4b6f      	ldr	r3, [pc, #444]	; (8009998 <HAL_RCC_GetSysClockFreq+0x200>)
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097e0:	647b      	str	r3, [r7, #68]	; 0x44
 80097e2:	4b6d      	ldr	r3, [pc, #436]	; (8009998 <HAL_RCC_GetSysClockFreq+0x200>)
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d063      	beq.n	80098b6 <HAL_RCC_GetSysClockFreq+0x11e>
 80097ee:	4b6a      	ldr	r3, [pc, #424]	; (8009998 <HAL_RCC_GetSysClockFreq+0x200>)
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	099b      	lsrs	r3, r3, #6
 80097f4:	2200      	movs	r2, #0
 80097f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80097f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80097fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009800:	633b      	str	r3, [r7, #48]	; 0x30
 8009802:	2300      	movs	r3, #0
 8009804:	637b      	str	r3, [r7, #52]	; 0x34
 8009806:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800980a:	4622      	mov	r2, r4
 800980c:	462b      	mov	r3, r5
 800980e:	f04f 0000 	mov.w	r0, #0
 8009812:	f04f 0100 	mov.w	r1, #0
 8009816:	0159      	lsls	r1, r3, #5
 8009818:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800981c:	0150      	lsls	r0, r2, #5
 800981e:	4602      	mov	r2, r0
 8009820:	460b      	mov	r3, r1
 8009822:	4621      	mov	r1, r4
 8009824:	1a51      	subs	r1, r2, r1
 8009826:	6139      	str	r1, [r7, #16]
 8009828:	4629      	mov	r1, r5
 800982a:	eb63 0301 	sbc.w	r3, r3, r1
 800982e:	617b      	str	r3, [r7, #20]
 8009830:	f04f 0200 	mov.w	r2, #0
 8009834:	f04f 0300 	mov.w	r3, #0
 8009838:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800983c:	4659      	mov	r1, fp
 800983e:	018b      	lsls	r3, r1, #6
 8009840:	4651      	mov	r1, sl
 8009842:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009846:	4651      	mov	r1, sl
 8009848:	018a      	lsls	r2, r1, #6
 800984a:	4651      	mov	r1, sl
 800984c:	ebb2 0801 	subs.w	r8, r2, r1
 8009850:	4659      	mov	r1, fp
 8009852:	eb63 0901 	sbc.w	r9, r3, r1
 8009856:	f04f 0200 	mov.w	r2, #0
 800985a:	f04f 0300 	mov.w	r3, #0
 800985e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009862:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009866:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800986a:	4690      	mov	r8, r2
 800986c:	4699      	mov	r9, r3
 800986e:	4623      	mov	r3, r4
 8009870:	eb18 0303 	adds.w	r3, r8, r3
 8009874:	60bb      	str	r3, [r7, #8]
 8009876:	462b      	mov	r3, r5
 8009878:	eb49 0303 	adc.w	r3, r9, r3
 800987c:	60fb      	str	r3, [r7, #12]
 800987e:	f04f 0200 	mov.w	r2, #0
 8009882:	f04f 0300 	mov.w	r3, #0
 8009886:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800988a:	4629      	mov	r1, r5
 800988c:	024b      	lsls	r3, r1, #9
 800988e:	4621      	mov	r1, r4
 8009890:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009894:	4621      	mov	r1, r4
 8009896:	024a      	lsls	r2, r1, #9
 8009898:	4610      	mov	r0, r2
 800989a:	4619      	mov	r1, r3
 800989c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800989e:	2200      	movs	r2, #0
 80098a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80098a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80098a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098a8:	f7f7 f9f6 	bl	8000c98 <__aeabi_uldivmod>
 80098ac:	4602      	mov	r2, r0
 80098ae:	460b      	mov	r3, r1
 80098b0:	4613      	mov	r3, r2
 80098b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098b4:	e058      	b.n	8009968 <HAL_RCC_GetSysClockFreq+0x1d0>
 80098b6:	4b38      	ldr	r3, [pc, #224]	; (8009998 <HAL_RCC_GetSysClockFreq+0x200>)
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	099b      	lsrs	r3, r3, #6
 80098bc:	2200      	movs	r2, #0
 80098be:	4618      	mov	r0, r3
 80098c0:	4611      	mov	r1, r2
 80098c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80098c6:	623b      	str	r3, [r7, #32]
 80098c8:	2300      	movs	r3, #0
 80098ca:	627b      	str	r3, [r7, #36]	; 0x24
 80098cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80098d0:	4642      	mov	r2, r8
 80098d2:	464b      	mov	r3, r9
 80098d4:	f04f 0000 	mov.w	r0, #0
 80098d8:	f04f 0100 	mov.w	r1, #0
 80098dc:	0159      	lsls	r1, r3, #5
 80098de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80098e2:	0150      	lsls	r0, r2, #5
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	4641      	mov	r1, r8
 80098ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80098ee:	4649      	mov	r1, r9
 80098f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80098f4:	f04f 0200 	mov.w	r2, #0
 80098f8:	f04f 0300 	mov.w	r3, #0
 80098fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009900:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009904:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009908:	ebb2 040a 	subs.w	r4, r2, sl
 800990c:	eb63 050b 	sbc.w	r5, r3, fp
 8009910:	f04f 0200 	mov.w	r2, #0
 8009914:	f04f 0300 	mov.w	r3, #0
 8009918:	00eb      	lsls	r3, r5, #3
 800991a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800991e:	00e2      	lsls	r2, r4, #3
 8009920:	4614      	mov	r4, r2
 8009922:	461d      	mov	r5, r3
 8009924:	4643      	mov	r3, r8
 8009926:	18e3      	adds	r3, r4, r3
 8009928:	603b      	str	r3, [r7, #0]
 800992a:	464b      	mov	r3, r9
 800992c:	eb45 0303 	adc.w	r3, r5, r3
 8009930:	607b      	str	r3, [r7, #4]
 8009932:	f04f 0200 	mov.w	r2, #0
 8009936:	f04f 0300 	mov.w	r3, #0
 800993a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800993e:	4629      	mov	r1, r5
 8009940:	028b      	lsls	r3, r1, #10
 8009942:	4621      	mov	r1, r4
 8009944:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009948:	4621      	mov	r1, r4
 800994a:	028a      	lsls	r2, r1, #10
 800994c:	4610      	mov	r0, r2
 800994e:	4619      	mov	r1, r3
 8009950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009952:	2200      	movs	r2, #0
 8009954:	61bb      	str	r3, [r7, #24]
 8009956:	61fa      	str	r2, [r7, #28]
 8009958:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800995c:	f7f7 f99c 	bl	8000c98 <__aeabi_uldivmod>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4613      	mov	r3, r2
 8009966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009968:	4b0b      	ldr	r3, [pc, #44]	; (8009998 <HAL_RCC_GetSysClockFreq+0x200>)
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	0c1b      	lsrs	r3, r3, #16
 800996e:	f003 0303 	and.w	r3, r3, #3
 8009972:	3301      	adds	r3, #1
 8009974:	005b      	lsls	r3, r3, #1
 8009976:	643b      	str	r3, [r7, #64]	; 0x40
 8009978:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800997a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800997c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009980:	64bb      	str	r3, [r7, #72]	; 0x48
 8009982:	e002      	b.n	800998a <HAL_RCC_GetSysClockFreq+0x1f2>
 8009984:	4b05      	ldr	r3, [pc, #20]	; (800999c <HAL_RCC_GetSysClockFreq+0x204>)
 8009986:	64bb      	str	r3, [r7, #72]	; 0x48
 8009988:	bf00      	nop
 800998a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800998c:	4618      	mov	r0, r3
 800998e:	3750      	adds	r7, #80	; 0x50
 8009990:	46bd      	mov	sp, r7
 8009992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009996:	bf00      	nop
 8009998:	40023800 	.word	0x40023800
 800999c:	00f42400 	.word	0x00f42400
 80099a0:	007a1200 	.word	0x007a1200

080099a4 <HAL_RCC_GetHCLKFreq>:
 80099a4:	b480      	push	{r7}
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	4b03      	ldr	r3, [pc, #12]	; (80099b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4618      	mov	r0, r3
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	20000014 	.word	0x20000014

080099bc <HAL_RCC_GetPCLK1Freq>:
 80099bc:	b580      	push	{r7, lr}
 80099be:	af00      	add	r7, sp, #0
 80099c0:	f7ff fff0 	bl	80099a4 <HAL_RCC_GetHCLKFreq>
 80099c4:	4602      	mov	r2, r0
 80099c6:	4b05      	ldr	r3, [pc, #20]	; (80099dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	0a9b      	lsrs	r3, r3, #10
 80099cc:	f003 0307 	and.w	r3, r3, #7
 80099d0:	4903      	ldr	r1, [pc, #12]	; (80099e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80099d2:	5ccb      	ldrb	r3, [r1, r3]
 80099d4:	fa22 f303 	lsr.w	r3, r2, r3
 80099d8:	4618      	mov	r0, r3
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	40023800 	.word	0x40023800
 80099e0:	08014d3c 	.word	0x08014d3c

080099e4 <HAL_RCC_GetPCLK2Freq>:
 80099e4:	b580      	push	{r7, lr}
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	f7ff ffdc 	bl	80099a4 <HAL_RCC_GetHCLKFreq>
 80099ec:	4602      	mov	r2, r0
 80099ee:	4b05      	ldr	r3, [pc, #20]	; (8009a04 <HAL_RCC_GetPCLK2Freq+0x20>)
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	0b5b      	lsrs	r3, r3, #13
 80099f4:	f003 0307 	and.w	r3, r3, #7
 80099f8:	4903      	ldr	r1, [pc, #12]	; (8009a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80099fa:	5ccb      	ldrb	r3, [r1, r3]
 80099fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009a00:	4618      	mov	r0, r3
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	40023800 	.word	0x40023800
 8009a08:	08014d3c 	.word	0x08014d3c

08009a0c <HAL_RCC_GetClockConfig>:
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	220f      	movs	r2, #15
 8009a1a:	601a      	str	r2, [r3, #0]
 8009a1c:	4b12      	ldr	r3, [pc, #72]	; (8009a68 <HAL_RCC_GetClockConfig+0x5c>)
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	f003 0203 	and.w	r2, r3, #3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	605a      	str	r2, [r3, #4]
 8009a28:	4b0f      	ldr	r3, [pc, #60]	; (8009a68 <HAL_RCC_GetClockConfig+0x5c>)
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	609a      	str	r2, [r3, #8]
 8009a34:	4b0c      	ldr	r3, [pc, #48]	; (8009a68 <HAL_RCC_GetClockConfig+0x5c>)
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	60da      	str	r2, [r3, #12]
 8009a40:	4b09      	ldr	r3, [pc, #36]	; (8009a68 <HAL_RCC_GetClockConfig+0x5c>)
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	08db      	lsrs	r3, r3, #3
 8009a46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	611a      	str	r2, [r3, #16]
 8009a4e:	4b07      	ldr	r3, [pc, #28]	; (8009a6c <HAL_RCC_GetClockConfig+0x60>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 0207 	and.w	r2, r3, #7
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	601a      	str	r2, [r3, #0]
 8009a5a:	bf00      	nop
 8009a5c:	370c      	adds	r7, #12
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	40023800 	.word	0x40023800
 8009a6c:	40023c00 	.word	0x40023c00

08009a70 <HAL_SPI_Init>:
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d101      	bne.n	8009a82 <HAL_SPI_Init+0x12>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e07b      	b.n	8009b7a <HAL_SPI_Init+0x10a>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d108      	bne.n	8009a9c <HAL_SPI_Init+0x2c>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a92:	d009      	beq.n	8009aa8 <HAL_SPI_Init+0x38>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	61da      	str	r2, [r3, #28]
 8009a9a:	e005      	b.n	8009aa8 <HAL_SPI_Init+0x38>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	611a      	str	r2, [r3, #16]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	615a      	str	r2, [r3, #20]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	629a      	str	r2, [r3, #40]	; 0x28
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d106      	bne.n	8009ac8 <HAL_SPI_Init+0x58>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7fa fc4a 	bl	800435c <HAL_SPI_MspInit>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2202      	movs	r2, #2
 8009acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ade:	601a      	str	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009af0:	431a      	orrs	r2, r3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009afa:	431a      	orrs	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	f003 0302 	and.w	r3, r3, #2
 8009b04:	431a      	orrs	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	695b      	ldr	r3, [r3, #20]
 8009b0a:	f003 0301 	and.w	r3, r3, #1
 8009b0e:	431a      	orrs	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	699b      	ldr	r3, [r3, #24]
 8009b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b18:	431a      	orrs	r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	69db      	ldr	r3, [r3, #28]
 8009b1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b22:	431a      	orrs	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6a1b      	ldr	r3, [r3, #32]
 8009b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b2c:	ea42 0103 	orr.w	r1, r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	430a      	orrs	r2, r1
 8009b3e:	601a      	str	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	699b      	ldr	r3, [r3, #24]
 8009b44:	0c1b      	lsrs	r3, r3, #16
 8009b46:	f003 0104 	and.w	r1, r3, #4
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4e:	f003 0210 	and.w	r2, r3, #16
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	430a      	orrs	r2, r1
 8009b58:	605a      	str	r2, [r3, #4]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	69da      	ldr	r2, [r3, #28]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b68:	61da      	str	r2, [r3, #28]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	655a      	str	r2, [r3, #84]	; 0x54
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009b78:	2300      	movs	r3, #0
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <HAL_TIM_Base_Init>:
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b082      	sub	sp, #8
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d101      	bne.n	8009b94 <HAL_TIM_Base_Init+0x12>
 8009b90:	2301      	movs	r3, #1
 8009b92:	e041      	b.n	8009c18 <HAL_TIM_Base_Init+0x96>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d106      	bne.n	8009bae <HAL_TIM_Base_Init+0x2c>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f7fb f8a1 	bl	8004cf0 <HAL_TIM_Base_MspInit>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	3304      	adds	r3, #4
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	4610      	mov	r0, r2
 8009bc2:	f000 fc53 	bl	800a46c <TIM_Base_SetConfig>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2201      	movs	r2, #1
 8009be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2201      	movs	r2, #1
 8009bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2201      	movs	r2, #1
 8009c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009c16:	2300      	movs	r3, #0
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3708      	adds	r7, #8
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <HAL_TIM_Base_Start_IT>:
 8009c20:	b480      	push	{r7}
 8009c22:	b085      	sub	sp, #20
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d001      	beq.n	8009c38 <HAL_TIM_Base_Start_IT+0x18>
 8009c34:	2301      	movs	r3, #1
 8009c36:	e044      	b.n	8009cc2 <HAL_TIM_Base_Start_IT+0xa2>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68da      	ldr	r2, [r3, #12]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f042 0201 	orr.w	r2, r2, #1
 8009c4e:	60da      	str	r2, [r3, #12]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a1e      	ldr	r2, [pc, #120]	; (8009cd0 <HAL_TIM_Base_Start_IT+0xb0>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d018      	beq.n	8009c8c <HAL_TIM_Base_Start_IT+0x6c>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c62:	d013      	beq.n	8009c8c <HAL_TIM_Base_Start_IT+0x6c>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a1a      	ldr	r2, [pc, #104]	; (8009cd4 <HAL_TIM_Base_Start_IT+0xb4>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d00e      	beq.n	8009c8c <HAL_TIM_Base_Start_IT+0x6c>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a19      	ldr	r2, [pc, #100]	; (8009cd8 <HAL_TIM_Base_Start_IT+0xb8>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d009      	beq.n	8009c8c <HAL_TIM_Base_Start_IT+0x6c>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a17      	ldr	r2, [pc, #92]	; (8009cdc <HAL_TIM_Base_Start_IT+0xbc>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d004      	beq.n	8009c8c <HAL_TIM_Base_Start_IT+0x6c>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a16      	ldr	r2, [pc, #88]	; (8009ce0 <HAL_TIM_Base_Start_IT+0xc0>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d111      	bne.n	8009cb0 <HAL_TIM_Base_Start_IT+0x90>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	f003 0307 	and.w	r3, r3, #7
 8009c96:	60fb      	str	r3, [r7, #12]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2b06      	cmp	r3, #6
 8009c9c:	d010      	beq.n	8009cc0 <HAL_TIM_Base_Start_IT+0xa0>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f042 0201 	orr.w	r2, r2, #1
 8009cac:	601a      	str	r2, [r3, #0]
 8009cae:	e007      	b.n	8009cc0 <HAL_TIM_Base_Start_IT+0xa0>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f042 0201 	orr.w	r2, r2, #1
 8009cbe:	601a      	str	r2, [r3, #0]
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3714      	adds	r7, #20
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	40010000 	.word	0x40010000
 8009cd4:	40000400 	.word	0x40000400
 8009cd8:	40000800 	.word	0x40000800
 8009cdc:	40000c00 	.word	0x40000c00
 8009ce0:	40014000 	.word	0x40014000

08009ce4 <HAL_TIM_PWM_Init>:
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <HAL_TIM_PWM_Init+0x12>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e041      	b.n	8009d7a <HAL_TIM_PWM_Init+0x96>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d106      	bne.n	8009d10 <HAL_TIM_PWM_Init+0x2c>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 f839 	bl	8009d82 <HAL_TIM_PWM_MspInit>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2202      	movs	r2, #2
 8009d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	3304      	adds	r3, #4
 8009d20:	4619      	mov	r1, r3
 8009d22:	4610      	mov	r0, r2
 8009d24:	f000 fba2 	bl	800a46c <TIM_Base_SetConfig>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2201      	movs	r2, #1
 8009d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2201      	movs	r2, #1
 8009d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009d78:	2300      	movs	r3, #0
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3708      	adds	r7, #8
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <HAL_TIM_PWM_MspInit>:
 8009d82:	b480      	push	{r7}
 8009d84:	b083      	sub	sp, #12
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
 8009d8a:	bf00      	nop
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
	...

08009d98 <HAL_TIM_PWM_Start>:
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d109      	bne.n	8009dbc <HAL_TIM_PWM_Start+0x24>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	bf14      	ite	ne
 8009db4:	2301      	movne	r3, #1
 8009db6:	2300      	moveq	r3, #0
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	e022      	b.n	8009e02 <HAL_TIM_PWM_Start+0x6a>
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	2b04      	cmp	r3, #4
 8009dc0:	d109      	bne.n	8009dd6 <HAL_TIM_PWM_Start+0x3e>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	bf14      	ite	ne
 8009dce:	2301      	movne	r3, #1
 8009dd0:	2300      	moveq	r3, #0
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	e015      	b.n	8009e02 <HAL_TIM_PWM_Start+0x6a>
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	2b08      	cmp	r3, #8
 8009dda:	d109      	bne.n	8009df0 <HAL_TIM_PWM_Start+0x58>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	bf14      	ite	ne
 8009de8:	2301      	movne	r3, #1
 8009dea:	2300      	moveq	r3, #0
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	e008      	b.n	8009e02 <HAL_TIM_PWM_Start+0x6a>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	bf14      	ite	ne
 8009dfc:	2301      	movne	r3, #1
 8009dfe:	2300      	moveq	r3, #0
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d001      	beq.n	8009e0a <HAL_TIM_PWM_Start+0x72>
 8009e06:	2301      	movs	r3, #1
 8009e08:	e068      	b.n	8009edc <HAL_TIM_PWM_Start+0x144>
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d104      	bne.n	8009e1a <HAL_TIM_PWM_Start+0x82>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2202      	movs	r2, #2
 8009e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e18:	e013      	b.n	8009e42 <HAL_TIM_PWM_Start+0xaa>
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	2b04      	cmp	r3, #4
 8009e1e:	d104      	bne.n	8009e2a <HAL_TIM_PWM_Start+0x92>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2202      	movs	r2, #2
 8009e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e28:	e00b      	b.n	8009e42 <HAL_TIM_PWM_Start+0xaa>
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	2b08      	cmp	r3, #8
 8009e2e:	d104      	bne.n	8009e3a <HAL_TIM_PWM_Start+0xa2>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2202      	movs	r2, #2
 8009e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e38:	e003      	b.n	8009e42 <HAL_TIM_PWM_Start+0xaa>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2202      	movs	r2, #2
 8009e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2201      	movs	r2, #1
 8009e48:	6839      	ldr	r1, [r7, #0]
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f000 fdb4 	bl	800a9b8 <TIM_CCxChannelCmd>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a23      	ldr	r2, [pc, #140]	; (8009ee4 <HAL_TIM_PWM_Start+0x14c>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d107      	bne.n	8009e6a <HAL_TIM_PWM_Start+0xd2>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e68:	645a      	str	r2, [r3, #68]	; 0x44
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a1d      	ldr	r2, [pc, #116]	; (8009ee4 <HAL_TIM_PWM_Start+0x14c>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d018      	beq.n	8009ea6 <HAL_TIM_PWM_Start+0x10e>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e7c:	d013      	beq.n	8009ea6 <HAL_TIM_PWM_Start+0x10e>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a19      	ldr	r2, [pc, #100]	; (8009ee8 <HAL_TIM_PWM_Start+0x150>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d00e      	beq.n	8009ea6 <HAL_TIM_PWM_Start+0x10e>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a17      	ldr	r2, [pc, #92]	; (8009eec <HAL_TIM_PWM_Start+0x154>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d009      	beq.n	8009ea6 <HAL_TIM_PWM_Start+0x10e>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a16      	ldr	r2, [pc, #88]	; (8009ef0 <HAL_TIM_PWM_Start+0x158>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d004      	beq.n	8009ea6 <HAL_TIM_PWM_Start+0x10e>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a14      	ldr	r2, [pc, #80]	; (8009ef4 <HAL_TIM_PWM_Start+0x15c>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d111      	bne.n	8009eca <HAL_TIM_PWM_Start+0x132>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	f003 0307 	and.w	r3, r3, #7
 8009eb0:	60fb      	str	r3, [r7, #12]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2b06      	cmp	r3, #6
 8009eb6:	d010      	beq.n	8009eda <HAL_TIM_PWM_Start+0x142>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f042 0201 	orr.w	r2, r2, #1
 8009ec6:	601a      	str	r2, [r3, #0]
 8009ec8:	e007      	b.n	8009eda <HAL_TIM_PWM_Start+0x142>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f042 0201 	orr.w	r2, r2, #1
 8009ed8:	601a      	str	r2, [r3, #0]
 8009eda:	2300      	movs	r3, #0
 8009edc:	4618      	mov	r0, r3
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	40010000 	.word	0x40010000
 8009ee8:	40000400 	.word	0x40000400
 8009eec:	40000800 	.word	0x40000800
 8009ef0:	40000c00 	.word	0x40000c00
 8009ef4:	40014000 	.word	0x40014000

08009ef8 <HAL_TIM_IRQHandler>:
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	f003 0302 	and.w	r3, r3, #2
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d122      	bne.n	8009f54 <HAL_TIM_IRQHandler+0x5c>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	f003 0302 	and.w	r3, r3, #2
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d11b      	bne.n	8009f54 <HAL_TIM_IRQHandler+0x5c>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f06f 0202 	mvn.w	r2, #2
 8009f24:	611a      	str	r2, [r3, #16]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	771a      	strb	r2, [r3, #28]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	699b      	ldr	r3, [r3, #24]
 8009f32:	f003 0303 	and.w	r3, r3, #3
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d003      	beq.n	8009f42 <HAL_TIM_IRQHandler+0x4a>
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fa77 	bl	800a42e <HAL_TIM_IC_CaptureCallback>
 8009f40:	e005      	b.n	8009f4e <HAL_TIM_IRQHandler+0x56>
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fa69 	bl	800a41a <HAL_TIM_OC_DelayElapsedCallback>
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 fa7a 	bl	800a442 <HAL_TIM_PWM_PulseFinishedCallback>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	771a      	strb	r2, [r3, #28]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	f003 0304 	and.w	r3, r3, #4
 8009f5e:	2b04      	cmp	r3, #4
 8009f60:	d122      	bne.n	8009fa8 <HAL_TIM_IRQHandler+0xb0>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	f003 0304 	and.w	r3, r3, #4
 8009f6c:	2b04      	cmp	r3, #4
 8009f6e:	d11b      	bne.n	8009fa8 <HAL_TIM_IRQHandler+0xb0>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f06f 0204 	mvn.w	r2, #4
 8009f78:	611a      	str	r2, [r3, #16]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2202      	movs	r2, #2
 8009f7e:	771a      	strb	r2, [r3, #28]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	699b      	ldr	r3, [r3, #24]
 8009f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d003      	beq.n	8009f96 <HAL_TIM_IRQHandler+0x9e>
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fa4d 	bl	800a42e <HAL_TIM_IC_CaptureCallback>
 8009f94:	e005      	b.n	8009fa2 <HAL_TIM_IRQHandler+0xaa>
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fa3f 	bl	800a41a <HAL_TIM_OC_DelayElapsedCallback>
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fa50 	bl	800a442 <HAL_TIM_PWM_PulseFinishedCallback>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	771a      	strb	r2, [r3, #28]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	f003 0308 	and.w	r3, r3, #8
 8009fb2:	2b08      	cmp	r3, #8
 8009fb4:	d122      	bne.n	8009ffc <HAL_TIM_IRQHandler+0x104>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	f003 0308 	and.w	r3, r3, #8
 8009fc0:	2b08      	cmp	r3, #8
 8009fc2:	d11b      	bne.n	8009ffc <HAL_TIM_IRQHandler+0x104>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f06f 0208 	mvn.w	r2, #8
 8009fcc:	611a      	str	r2, [r3, #16]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2204      	movs	r2, #4
 8009fd2:	771a      	strb	r2, [r3, #28]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	69db      	ldr	r3, [r3, #28]
 8009fda:	f003 0303 	and.w	r3, r3, #3
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d003      	beq.n	8009fea <HAL_TIM_IRQHandler+0xf2>
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 fa23 	bl	800a42e <HAL_TIM_IC_CaptureCallback>
 8009fe8:	e005      	b.n	8009ff6 <HAL_TIM_IRQHandler+0xfe>
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 fa15 	bl	800a41a <HAL_TIM_OC_DelayElapsedCallback>
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 fa26 	bl	800a442 <HAL_TIM_PWM_PulseFinishedCallback>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	771a      	strb	r2, [r3, #28]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	f003 0310 	and.w	r3, r3, #16
 800a006:	2b10      	cmp	r3, #16
 800a008:	d122      	bne.n	800a050 <HAL_TIM_IRQHandler+0x158>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	f003 0310 	and.w	r3, r3, #16
 800a014:	2b10      	cmp	r3, #16
 800a016:	d11b      	bne.n	800a050 <HAL_TIM_IRQHandler+0x158>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f06f 0210 	mvn.w	r2, #16
 800a020:	611a      	str	r2, [r3, #16]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2208      	movs	r2, #8
 800a026:	771a      	strb	r2, [r3, #28]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	69db      	ldr	r3, [r3, #28]
 800a02e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a032:	2b00      	cmp	r3, #0
 800a034:	d003      	beq.n	800a03e <HAL_TIM_IRQHandler+0x146>
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f9f9 	bl	800a42e <HAL_TIM_IC_CaptureCallback>
 800a03c:	e005      	b.n	800a04a <HAL_TIM_IRQHandler+0x152>
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f9eb 	bl	800a41a <HAL_TIM_OC_DelayElapsedCallback>
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 f9fc 	bl	800a442 <HAL_TIM_PWM_PulseFinishedCallback>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	771a      	strb	r2, [r3, #28]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	691b      	ldr	r3, [r3, #16]
 800a056:	f003 0301 	and.w	r3, r3, #1
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d10e      	bne.n	800a07c <HAL_TIM_IRQHandler+0x184>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	f003 0301 	and.w	r3, r3, #1
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d107      	bne.n	800a07c <HAL_TIM_IRQHandler+0x184>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f06f 0201 	mvn.w	r2, #1
 800a074:	611a      	str	r2, [r3, #16]
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f7f8 fddc 	bl	8002c34 <HAL_TIM_PeriodElapsedCallback>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a086:	2b80      	cmp	r3, #128	; 0x80
 800a088:	d10e      	bne.n	800a0a8 <HAL_TIM_IRQHandler+0x1b0>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a094:	2b80      	cmp	r3, #128	; 0x80
 800a096:	d107      	bne.n	800a0a8 <HAL_TIM_IRQHandler+0x1b0>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a0a0:	611a      	str	r2, [r3, #16]
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fd26 	bl	800aaf4 <HAL_TIMEx_BreakCallback>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0b2:	2b40      	cmp	r3, #64	; 0x40
 800a0b4:	d10e      	bne.n	800a0d4 <HAL_TIM_IRQHandler+0x1dc>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0c0:	2b40      	cmp	r3, #64	; 0x40
 800a0c2:	d107      	bne.n	800a0d4 <HAL_TIM_IRQHandler+0x1dc>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a0cc:	611a      	str	r2, [r3, #16]
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 f9c1 	bl	800a456 <HAL_TIM_TriggerCallback>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	f003 0320 	and.w	r3, r3, #32
 800a0de:	2b20      	cmp	r3, #32
 800a0e0:	d10e      	bne.n	800a100 <HAL_TIM_IRQHandler+0x208>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	f003 0320 	and.w	r3, r3, #32
 800a0ec:	2b20      	cmp	r3, #32
 800a0ee:	d107      	bne.n	800a100 <HAL_TIM_IRQHandler+0x208>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f06f 0220 	mvn.w	r2, #32
 800a0f8:	611a      	str	r2, [r3, #16]
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fcf0 	bl	800aae0 <HAL_TIMEx_CommutCallback>
 800a100:	bf00      	nop
 800a102:	3708      	adds	r7, #8
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <HAL_TIM_PWM_ConfigChannel>:
 800a108:	b580      	push	{r7, lr}
 800a10a:	b086      	sub	sp, #24
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
 800a114:	2300      	movs	r3, #0
 800a116:	75fb      	strb	r3, [r7, #23]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d101      	bne.n	800a126 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a122:	2302      	movs	r3, #2
 800a124:	e0ae      	b.n	800a284 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2b0c      	cmp	r3, #12
 800a132:	f200 809f 	bhi.w	800a274 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a136:	a201      	add	r2, pc, #4	; (adr r2, 800a13c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a13c:	0800a171 	.word	0x0800a171
 800a140:	0800a275 	.word	0x0800a275
 800a144:	0800a275 	.word	0x0800a275
 800a148:	0800a275 	.word	0x0800a275
 800a14c:	0800a1b1 	.word	0x0800a1b1
 800a150:	0800a275 	.word	0x0800a275
 800a154:	0800a275 	.word	0x0800a275
 800a158:	0800a275 	.word	0x0800a275
 800a15c:	0800a1f3 	.word	0x0800a1f3
 800a160:	0800a275 	.word	0x0800a275
 800a164:	0800a275 	.word	0x0800a275
 800a168:	0800a275 	.word	0x0800a275
 800a16c:	0800a233 	.word	0x0800a233
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	68b9      	ldr	r1, [r7, #8]
 800a176:	4618      	mov	r0, r3
 800a178:	f000 f9f8 	bl	800a56c <TIM_OC1_SetConfig>
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	699a      	ldr	r2, [r3, #24]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f042 0208 	orr.w	r2, r2, #8
 800a18a:	619a      	str	r2, [r3, #24]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	699a      	ldr	r2, [r3, #24]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f022 0204 	bic.w	r2, r2, #4
 800a19a:	619a      	str	r2, [r3, #24]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	6999      	ldr	r1, [r3, #24]
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	691a      	ldr	r2, [r3, #16]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	430a      	orrs	r2, r1
 800a1ac:	619a      	str	r2, [r3, #24]
 800a1ae:	e064      	b.n	800a27a <HAL_TIM_PWM_ConfigChannel+0x172>
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	68b9      	ldr	r1, [r7, #8]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 fa3e 	bl	800a638 <TIM_OC2_SetConfig>
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	699a      	ldr	r2, [r3, #24]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a1ca:	619a      	str	r2, [r3, #24]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	699a      	ldr	r2, [r3, #24]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1da:	619a      	str	r2, [r3, #24]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	6999      	ldr	r1, [r3, #24]
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	021a      	lsls	r2, r3, #8
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	430a      	orrs	r2, r1
 800a1ee:	619a      	str	r2, [r3, #24]
 800a1f0:	e043      	b.n	800a27a <HAL_TIM_PWM_ConfigChannel+0x172>
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	68b9      	ldr	r1, [r7, #8]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f000 fa89 	bl	800a710 <TIM_OC3_SetConfig>
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	69da      	ldr	r2, [r3, #28]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f042 0208 	orr.w	r2, r2, #8
 800a20c:	61da      	str	r2, [r3, #28]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	69da      	ldr	r2, [r3, #28]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f022 0204 	bic.w	r2, r2, #4
 800a21c:	61da      	str	r2, [r3, #28]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	69d9      	ldr	r1, [r3, #28]
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	691a      	ldr	r2, [r3, #16]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	430a      	orrs	r2, r1
 800a22e:	61da      	str	r2, [r3, #28]
 800a230:	e023      	b.n	800a27a <HAL_TIM_PWM_ConfigChannel+0x172>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68b9      	ldr	r1, [r7, #8]
 800a238:	4618      	mov	r0, r3
 800a23a:	f000 fad3 	bl	800a7e4 <TIM_OC4_SetConfig>
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	69da      	ldr	r2, [r3, #28]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a24c:	61da      	str	r2, [r3, #28]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	69da      	ldr	r2, [r3, #28]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a25c:	61da      	str	r2, [r3, #28]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	69d9      	ldr	r1, [r3, #28]
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	691b      	ldr	r3, [r3, #16]
 800a268:	021a      	lsls	r2, r3, #8
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	430a      	orrs	r2, r1
 800a270:	61da      	str	r2, [r3, #28]
 800a272:	e002      	b.n	800a27a <HAL_TIM_PWM_ConfigChannel+0x172>
 800a274:	2301      	movs	r3, #1
 800a276:	75fb      	strb	r3, [r7, #23]
 800a278:	bf00      	nop
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a282:	7dfb      	ldrb	r3, [r7, #23]
 800a284:	4618      	mov	r0, r3
 800a286:	3718      	adds	r7, #24
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <HAL_TIM_ConfigClockSource>:
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
 800a296:	2300      	movs	r3, #0
 800a298:	73fb      	strb	r3, [r7, #15]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d101      	bne.n	800a2a8 <HAL_TIM_ConfigClockSource+0x1c>
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	e0b4      	b.n	800a412 <HAL_TIM_ConfigClockSource+0x186>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	60bb      	str	r3, [r7, #8]
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a2c6:	60bb      	str	r3, [r7, #8]
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a2ce:	60bb      	str	r3, [r7, #8]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	68ba      	ldr	r2, [r7, #8]
 800a2d6:	609a      	str	r2, [r3, #8]
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2e0:	d03e      	beq.n	800a360 <HAL_TIM_ConfigClockSource+0xd4>
 800a2e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2e6:	f200 8087 	bhi.w	800a3f8 <HAL_TIM_ConfigClockSource+0x16c>
 800a2ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2ee:	f000 8086 	beq.w	800a3fe <HAL_TIM_ConfigClockSource+0x172>
 800a2f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2f6:	d87f      	bhi.n	800a3f8 <HAL_TIM_ConfigClockSource+0x16c>
 800a2f8:	2b70      	cmp	r3, #112	; 0x70
 800a2fa:	d01a      	beq.n	800a332 <HAL_TIM_ConfigClockSource+0xa6>
 800a2fc:	2b70      	cmp	r3, #112	; 0x70
 800a2fe:	d87b      	bhi.n	800a3f8 <HAL_TIM_ConfigClockSource+0x16c>
 800a300:	2b60      	cmp	r3, #96	; 0x60
 800a302:	d050      	beq.n	800a3a6 <HAL_TIM_ConfigClockSource+0x11a>
 800a304:	2b60      	cmp	r3, #96	; 0x60
 800a306:	d877      	bhi.n	800a3f8 <HAL_TIM_ConfigClockSource+0x16c>
 800a308:	2b50      	cmp	r3, #80	; 0x50
 800a30a:	d03c      	beq.n	800a386 <HAL_TIM_ConfigClockSource+0xfa>
 800a30c:	2b50      	cmp	r3, #80	; 0x50
 800a30e:	d873      	bhi.n	800a3f8 <HAL_TIM_ConfigClockSource+0x16c>
 800a310:	2b40      	cmp	r3, #64	; 0x40
 800a312:	d058      	beq.n	800a3c6 <HAL_TIM_ConfigClockSource+0x13a>
 800a314:	2b40      	cmp	r3, #64	; 0x40
 800a316:	d86f      	bhi.n	800a3f8 <HAL_TIM_ConfigClockSource+0x16c>
 800a318:	2b30      	cmp	r3, #48	; 0x30
 800a31a:	d064      	beq.n	800a3e6 <HAL_TIM_ConfigClockSource+0x15a>
 800a31c:	2b30      	cmp	r3, #48	; 0x30
 800a31e:	d86b      	bhi.n	800a3f8 <HAL_TIM_ConfigClockSource+0x16c>
 800a320:	2b20      	cmp	r3, #32
 800a322:	d060      	beq.n	800a3e6 <HAL_TIM_ConfigClockSource+0x15a>
 800a324:	2b20      	cmp	r3, #32
 800a326:	d867      	bhi.n	800a3f8 <HAL_TIM_ConfigClockSource+0x16c>
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d05c      	beq.n	800a3e6 <HAL_TIM_ConfigClockSource+0x15a>
 800a32c:	2b10      	cmp	r3, #16
 800a32e:	d05a      	beq.n	800a3e6 <HAL_TIM_ConfigClockSource+0x15a>
 800a330:	e062      	b.n	800a3f8 <HAL_TIM_ConfigClockSource+0x16c>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6818      	ldr	r0, [r3, #0]
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	6899      	ldr	r1, [r3, #8]
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	685a      	ldr	r2, [r3, #4]
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	68db      	ldr	r3, [r3, #12]
 800a342:	f000 fb19 	bl	800a978 <TIM_ETR_SetConfig>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	60bb      	str	r3, [r7, #8]
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a354:	60bb      	str	r3, [r7, #8]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	609a      	str	r2, [r3, #8]
 800a35e:	e04f      	b.n	800a400 <HAL_TIM_ConfigClockSource+0x174>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6818      	ldr	r0, [r3, #0]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	6899      	ldr	r1, [r3, #8]
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	685a      	ldr	r2, [r3, #4]
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	f000 fb02 	bl	800a978 <TIM_ETR_SetConfig>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	689a      	ldr	r2, [r3, #8]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a382:	609a      	str	r2, [r3, #8]
 800a384:	e03c      	b.n	800a400 <HAL_TIM_ConfigClockSource+0x174>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6818      	ldr	r0, [r3, #0]
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	6859      	ldr	r1, [r3, #4]
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	461a      	mov	r2, r3
 800a394:	f000 fa76 	bl	800a884 <TIM_TI1_ConfigInputStage>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2150      	movs	r1, #80	; 0x50
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f000 facf 	bl	800a942 <TIM_ITRx_SetConfig>
 800a3a4:	e02c      	b.n	800a400 <HAL_TIM_ConfigClockSource+0x174>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6818      	ldr	r0, [r3, #0]
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	6859      	ldr	r1, [r3, #4]
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	f000 fa95 	bl	800a8e2 <TIM_TI2_ConfigInputStage>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2160      	movs	r1, #96	; 0x60
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f000 fabf 	bl	800a942 <TIM_ITRx_SetConfig>
 800a3c4:	e01c      	b.n	800a400 <HAL_TIM_ConfigClockSource+0x174>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6818      	ldr	r0, [r3, #0]
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	6859      	ldr	r1, [r3, #4]
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	f000 fa56 	bl	800a884 <TIM_TI1_ConfigInputStage>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2140      	movs	r1, #64	; 0x40
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f000 faaf 	bl	800a942 <TIM_ITRx_SetConfig>
 800a3e4:	e00c      	b.n	800a400 <HAL_TIM_ConfigClockSource+0x174>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	4610      	mov	r0, r2
 800a3f2:	f000 faa6 	bl	800a942 <TIM_ITRx_SetConfig>
 800a3f6:	e003      	b.n	800a400 <HAL_TIM_ConfigClockSource+0x174>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	73fb      	strb	r3, [r7, #15]
 800a3fc:	e000      	b.n	800a400 <HAL_TIM_ConfigClockSource+0x174>
 800a3fe:	bf00      	nop
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a410:	7bfb      	ldrb	r3, [r7, #15]
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <HAL_TIM_OC_DelayElapsedCallback>:
 800a41a:	b480      	push	{r7}
 800a41c:	b083      	sub	sp, #12
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	bf00      	nop
 800a424:	370c      	adds	r7, #12
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr

0800a42e <HAL_TIM_IC_CaptureCallback>:
 800a42e:	b480      	push	{r7}
 800a430:	b083      	sub	sp, #12
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
 800a436:	bf00      	nop
 800a438:	370c      	adds	r7, #12
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr

0800a442 <HAL_TIM_PWM_PulseFinishedCallback>:
 800a442:	b480      	push	{r7}
 800a444:	b083      	sub	sp, #12
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
 800a44a:	bf00      	nop
 800a44c:	370c      	adds	r7, #12
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr

0800a456 <HAL_TIM_TriggerCallback>:
 800a456:	b480      	push	{r7}
 800a458:	b083      	sub	sp, #12
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
 800a45e:	bf00      	nop
 800a460:	370c      	adds	r7, #12
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
	...

0800a46c <TIM_Base_SetConfig>:
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	60fb      	str	r3, [r7, #12]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	4a34      	ldr	r2, [pc, #208]	; (800a550 <TIM_Base_SetConfig+0xe4>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d00f      	beq.n	800a4a4 <TIM_Base_SetConfig+0x38>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a48a:	d00b      	beq.n	800a4a4 <TIM_Base_SetConfig+0x38>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a31      	ldr	r2, [pc, #196]	; (800a554 <TIM_Base_SetConfig+0xe8>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d007      	beq.n	800a4a4 <TIM_Base_SetConfig+0x38>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a30      	ldr	r2, [pc, #192]	; (800a558 <TIM_Base_SetConfig+0xec>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d003      	beq.n	800a4a4 <TIM_Base_SetConfig+0x38>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a2f      	ldr	r2, [pc, #188]	; (800a55c <TIM_Base_SetConfig+0xf0>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d108      	bne.n	800a4b6 <TIM_Base_SetConfig+0x4a>
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4aa:	60fb      	str	r3, [r7, #12]
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	60fb      	str	r3, [r7, #12]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4a25      	ldr	r2, [pc, #148]	; (800a550 <TIM_Base_SetConfig+0xe4>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d01b      	beq.n	800a4f6 <TIM_Base_SetConfig+0x8a>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4c4:	d017      	beq.n	800a4f6 <TIM_Base_SetConfig+0x8a>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	4a22      	ldr	r2, [pc, #136]	; (800a554 <TIM_Base_SetConfig+0xe8>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d013      	beq.n	800a4f6 <TIM_Base_SetConfig+0x8a>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4a21      	ldr	r2, [pc, #132]	; (800a558 <TIM_Base_SetConfig+0xec>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d00f      	beq.n	800a4f6 <TIM_Base_SetConfig+0x8a>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4a20      	ldr	r2, [pc, #128]	; (800a55c <TIM_Base_SetConfig+0xf0>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d00b      	beq.n	800a4f6 <TIM_Base_SetConfig+0x8a>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	4a1f      	ldr	r2, [pc, #124]	; (800a560 <TIM_Base_SetConfig+0xf4>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d007      	beq.n	800a4f6 <TIM_Base_SetConfig+0x8a>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a1e      	ldr	r2, [pc, #120]	; (800a564 <TIM_Base_SetConfig+0xf8>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d003      	beq.n	800a4f6 <TIM_Base_SetConfig+0x8a>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a1d      	ldr	r2, [pc, #116]	; (800a568 <TIM_Base_SetConfig+0xfc>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d108      	bne.n	800a508 <TIM_Base_SetConfig+0x9c>
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4fc:	60fb      	str	r3, [r7, #12]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	4313      	orrs	r3, r2
 800a506:	60fb      	str	r3, [r7, #12]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	695b      	ldr	r3, [r3, #20]
 800a512:	4313      	orrs	r3, r2
 800a514:	60fb      	str	r3, [r7, #12]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	601a      	str	r2, [r3, #0]
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	689a      	ldr	r2, [r3, #8]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	62da      	str	r2, [r3, #44]	; 0x2c
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	629a      	str	r2, [r3, #40]	; 0x28
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4a08      	ldr	r2, [pc, #32]	; (800a550 <TIM_Base_SetConfig+0xe4>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d103      	bne.n	800a53c <TIM_Base_SetConfig+0xd0>
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	691a      	ldr	r2, [r3, #16]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	631a      	str	r2, [r3, #48]	; 0x30
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2201      	movs	r2, #1
 800a540:	615a      	str	r2, [r3, #20]
 800a542:	bf00      	nop
 800a544:	3714      	adds	r7, #20
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	40010000 	.word	0x40010000
 800a554:	40000400 	.word	0x40000400
 800a558:	40000800 	.word	0x40000800
 800a55c:	40000c00 	.word	0x40000c00
 800a560:	40014000 	.word	0x40014000
 800a564:	40014400 	.word	0x40014400
 800a568:	40014800 	.word	0x40014800

0800a56c <TIM_OC1_SetConfig>:
 800a56c:	b480      	push	{r7}
 800a56e:	b087      	sub	sp, #28
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a1b      	ldr	r3, [r3, #32]
 800a57a:	f023 0201 	bic.w	r2, r3, #1
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	621a      	str	r2, [r3, #32]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a1b      	ldr	r3, [r3, #32]
 800a586:	617b      	str	r3, [r7, #20]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	613b      	str	r3, [r7, #16]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	60fb      	str	r3, [r7, #12]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a59a:	60fb      	str	r3, [r7, #12]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f023 0303 	bic.w	r3, r3, #3
 800a5a2:	60fb      	str	r3, [r7, #12]
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	60fb      	str	r3, [r7, #12]
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	f023 0302 	bic.w	r3, r3, #2
 800a5b4:	617b      	str	r3, [r7, #20]
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	697a      	ldr	r2, [r7, #20]
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	617b      	str	r3, [r7, #20]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4a1c      	ldr	r2, [pc, #112]	; (800a634 <TIM_OC1_SetConfig+0xc8>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d10c      	bne.n	800a5e2 <TIM_OC1_SetConfig+0x76>
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	f023 0308 	bic.w	r3, r3, #8
 800a5ce:	617b      	str	r3, [r7, #20]
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	697a      	ldr	r2, [r7, #20]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	617b      	str	r3, [r7, #20]
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	f023 0304 	bic.w	r3, r3, #4
 800a5e0:	617b      	str	r3, [r7, #20]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4a13      	ldr	r2, [pc, #76]	; (800a634 <TIM_OC1_SetConfig+0xc8>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d111      	bne.n	800a60e <TIM_OC1_SetConfig+0xa2>
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5f0:	613b      	str	r3, [r7, #16]
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a5f8:	613b      	str	r3, [r7, #16]
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	695b      	ldr	r3, [r3, #20]
 800a5fe:	693a      	ldr	r2, [r7, #16]
 800a600:	4313      	orrs	r3, r2
 800a602:	613b      	str	r3, [r7, #16]
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	699b      	ldr	r3, [r3, #24]
 800a608:	693a      	ldr	r2, [r7, #16]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	613b      	str	r3, [r7, #16]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	693a      	ldr	r2, [r7, #16]
 800a612:	605a      	str	r2, [r3, #4]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	619a      	str	r2, [r3, #24]
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	685a      	ldr	r2, [r3, #4]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	635a      	str	r2, [r3, #52]	; 0x34
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	697a      	ldr	r2, [r7, #20]
 800a626:	621a      	str	r2, [r3, #32]
 800a628:	bf00      	nop
 800a62a:	371c      	adds	r7, #28
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr
 800a634:	40010000 	.word	0x40010000

0800a638 <TIM_OC2_SetConfig>:
 800a638:	b480      	push	{r7}
 800a63a:	b087      	sub	sp, #28
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a1b      	ldr	r3, [r3, #32]
 800a646:	f023 0210 	bic.w	r2, r3, #16
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	621a      	str	r2, [r3, #32]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6a1b      	ldr	r3, [r3, #32]
 800a652:	617b      	str	r3, [r7, #20]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	613b      	str	r3, [r7, #16]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	60fb      	str	r3, [r7, #12]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a666:	60fb      	str	r3, [r7, #12]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a66e:	60fb      	str	r3, [r7, #12]
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	021b      	lsls	r3, r3, #8
 800a676:	68fa      	ldr	r2, [r7, #12]
 800a678:	4313      	orrs	r3, r2
 800a67a:	60fb      	str	r3, [r7, #12]
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	f023 0320 	bic.w	r3, r3, #32
 800a682:	617b      	str	r3, [r7, #20]
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	011b      	lsls	r3, r3, #4
 800a68a:	697a      	ldr	r2, [r7, #20]
 800a68c:	4313      	orrs	r3, r2
 800a68e:	617b      	str	r3, [r7, #20]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	4a1e      	ldr	r2, [pc, #120]	; (800a70c <TIM_OC2_SetConfig+0xd4>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d10d      	bne.n	800a6b4 <TIM_OC2_SetConfig+0x7c>
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a69e:	617b      	str	r3, [r7, #20]
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	011b      	lsls	r3, r3, #4
 800a6a6:	697a      	ldr	r2, [r7, #20]
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	617b      	str	r3, [r7, #20]
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6b2:	617b      	str	r3, [r7, #20]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4a15      	ldr	r2, [pc, #84]	; (800a70c <TIM_OC2_SetConfig+0xd4>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d113      	bne.n	800a6e4 <TIM_OC2_SetConfig+0xac>
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a6c2:	613b      	str	r3, [r7, #16]
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a6ca:	613b      	str	r3, [r7, #16]
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	695b      	ldr	r3, [r3, #20]
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	693a      	ldr	r2, [r7, #16]
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	613b      	str	r3, [r7, #16]
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	699b      	ldr	r3, [r3, #24]
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	693a      	ldr	r2, [r7, #16]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	613b      	str	r3, [r7, #16]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	693a      	ldr	r2, [r7, #16]
 800a6e8:	605a      	str	r2, [r3, #4]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	619a      	str	r2, [r3, #24]
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	685a      	ldr	r2, [r3, #4]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	639a      	str	r2, [r3, #56]	; 0x38
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	697a      	ldr	r2, [r7, #20]
 800a6fc:	621a      	str	r2, [r3, #32]
 800a6fe:	bf00      	nop
 800a700:	371c      	adds	r7, #28
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	40010000 	.word	0x40010000

0800a710 <TIM_OC3_SetConfig>:
 800a710:	b480      	push	{r7}
 800a712:	b087      	sub	sp, #28
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6a1b      	ldr	r3, [r3, #32]
 800a71e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	621a      	str	r2, [r3, #32]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6a1b      	ldr	r3, [r3, #32]
 800a72a:	617b      	str	r3, [r7, #20]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	613b      	str	r3, [r7, #16]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	69db      	ldr	r3, [r3, #28]
 800a736:	60fb      	str	r3, [r7, #12]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a73e:	60fb      	str	r3, [r7, #12]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f023 0303 	bic.w	r3, r3, #3
 800a746:	60fb      	str	r3, [r7, #12]
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	4313      	orrs	r3, r2
 800a750:	60fb      	str	r3, [r7, #12]
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a758:	617b      	str	r3, [r7, #20]
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	021b      	lsls	r3, r3, #8
 800a760:	697a      	ldr	r2, [r7, #20]
 800a762:	4313      	orrs	r3, r2
 800a764:	617b      	str	r3, [r7, #20]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4a1d      	ldr	r2, [pc, #116]	; (800a7e0 <TIM_OC3_SetConfig+0xd0>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d10d      	bne.n	800a78a <TIM_OC3_SetConfig+0x7a>
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a774:	617b      	str	r3, [r7, #20]
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	021b      	lsls	r3, r3, #8
 800a77c:	697a      	ldr	r2, [r7, #20]
 800a77e:	4313      	orrs	r3, r2
 800a780:	617b      	str	r3, [r7, #20]
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a788:	617b      	str	r3, [r7, #20]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a14      	ldr	r2, [pc, #80]	; (800a7e0 <TIM_OC3_SetConfig+0xd0>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d113      	bne.n	800a7ba <TIM_OC3_SetConfig+0xaa>
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a798:	613b      	str	r3, [r7, #16]
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a7a0:	613b      	str	r3, [r7, #16]
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	695b      	ldr	r3, [r3, #20]
 800a7a6:	011b      	lsls	r3, r3, #4
 800a7a8:	693a      	ldr	r2, [r7, #16]
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	613b      	str	r3, [r7, #16]
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	699b      	ldr	r3, [r3, #24]
 800a7b2:	011b      	lsls	r3, r3, #4
 800a7b4:	693a      	ldr	r2, [r7, #16]
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	613b      	str	r3, [r7, #16]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	693a      	ldr	r2, [r7, #16]
 800a7be:	605a      	str	r2, [r3, #4]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	61da      	str	r2, [r3, #28]
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	685a      	ldr	r2, [r3, #4]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	63da      	str	r2, [r3, #60]	; 0x3c
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	697a      	ldr	r2, [r7, #20]
 800a7d2:	621a      	str	r2, [r3, #32]
 800a7d4:	bf00      	nop
 800a7d6:	371c      	adds	r7, #28
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	40010000 	.word	0x40010000

0800a7e4 <TIM_OC4_SetConfig>:
 800a7e4:	b480      	push	{r7}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a1b      	ldr	r3, [r3, #32]
 800a7f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	621a      	str	r2, [r3, #32]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a1b      	ldr	r3, [r3, #32]
 800a7fe:	613b      	str	r3, [r7, #16]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	617b      	str	r3, [r7, #20]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	69db      	ldr	r3, [r3, #28]
 800a80a:	60fb      	str	r3, [r7, #12]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a812:	60fb      	str	r3, [r7, #12]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a81a:	60fb      	str	r3, [r7, #12]
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	021b      	lsls	r3, r3, #8
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	4313      	orrs	r3, r2
 800a826:	60fb      	str	r3, [r7, #12]
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a82e:	613b      	str	r3, [r7, #16]
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	031b      	lsls	r3, r3, #12
 800a836:	693a      	ldr	r2, [r7, #16]
 800a838:	4313      	orrs	r3, r2
 800a83a:	613b      	str	r3, [r7, #16]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a10      	ldr	r2, [pc, #64]	; (800a880 <TIM_OC4_SetConfig+0x9c>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d109      	bne.n	800a858 <TIM_OC4_SetConfig+0x74>
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a84a:	617b      	str	r3, [r7, #20]
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	695b      	ldr	r3, [r3, #20]
 800a850:	019b      	lsls	r3, r3, #6
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	4313      	orrs	r3, r2
 800a856:	617b      	str	r3, [r7, #20]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	697a      	ldr	r2, [r7, #20]
 800a85c:	605a      	str	r2, [r3, #4]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	68fa      	ldr	r2, [r7, #12]
 800a862:	61da      	str	r2, [r3, #28]
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	641a      	str	r2, [r3, #64]	; 0x40
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	693a      	ldr	r2, [r7, #16]
 800a870:	621a      	str	r2, [r3, #32]
 800a872:	bf00      	nop
 800a874:	371c      	adds	r7, #28
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	40010000 	.word	0x40010000

0800a884 <TIM_TI1_ConfigInputStage>:
 800a884:	b480      	push	{r7}
 800a886:	b087      	sub	sp, #28
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	60b9      	str	r1, [r7, #8]
 800a88e:	607a      	str	r2, [r7, #4]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6a1b      	ldr	r3, [r3, #32]
 800a894:	617b      	str	r3, [r7, #20]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6a1b      	ldr	r3, [r3, #32]
 800a89a:	f023 0201 	bic.w	r2, r3, #1
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	621a      	str	r2, [r3, #32]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	613b      	str	r3, [r7, #16]
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a8ae:	613b      	str	r3, [r7, #16]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	011b      	lsls	r3, r3, #4
 800a8b4:	693a      	ldr	r2, [r7, #16]
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	613b      	str	r3, [r7, #16]
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	f023 030a 	bic.w	r3, r3, #10
 800a8c0:	617b      	str	r3, [r7, #20]
 800a8c2:	697a      	ldr	r2, [r7, #20]
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	617b      	str	r3, [r7, #20]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	693a      	ldr	r2, [r7, #16]
 800a8ce:	619a      	str	r2, [r3, #24]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	697a      	ldr	r2, [r7, #20]
 800a8d4:	621a      	str	r2, [r3, #32]
 800a8d6:	bf00      	nop
 800a8d8:	371c      	adds	r7, #28
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr

0800a8e2 <TIM_TI2_ConfigInputStage>:
 800a8e2:	b480      	push	{r7}
 800a8e4:	b087      	sub	sp, #28
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	60f8      	str	r0, [r7, #12]
 800a8ea:	60b9      	str	r1, [r7, #8]
 800a8ec:	607a      	str	r2, [r7, #4]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6a1b      	ldr	r3, [r3, #32]
 800a8f2:	f023 0210 	bic.w	r2, r3, #16
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	621a      	str	r2, [r3, #32]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	699b      	ldr	r3, [r3, #24]
 800a8fe:	617b      	str	r3, [r7, #20]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6a1b      	ldr	r3, [r3, #32]
 800a904:	613b      	str	r3, [r7, #16]
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a90c:	617b      	str	r3, [r7, #20]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	031b      	lsls	r3, r3, #12
 800a912:	697a      	ldr	r2, [r7, #20]
 800a914:	4313      	orrs	r3, r2
 800a916:	617b      	str	r3, [r7, #20]
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a91e:	613b      	str	r3, [r7, #16]
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	011b      	lsls	r3, r3, #4
 800a924:	693a      	ldr	r2, [r7, #16]
 800a926:	4313      	orrs	r3, r2
 800a928:	613b      	str	r3, [r7, #16]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	697a      	ldr	r2, [r7, #20]
 800a92e:	619a      	str	r2, [r3, #24]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	693a      	ldr	r2, [r7, #16]
 800a934:	621a      	str	r2, [r3, #32]
 800a936:	bf00      	nop
 800a938:	371c      	adds	r7, #28
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr

0800a942 <TIM_ITRx_SetConfig>:
 800a942:	b480      	push	{r7}
 800a944:	b085      	sub	sp, #20
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	6039      	str	r1, [r7, #0]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	60fb      	str	r3, [r7, #12]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a958:	60fb      	str	r3, [r7, #12]
 800a95a:	683a      	ldr	r2, [r7, #0]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	4313      	orrs	r3, r2
 800a960:	f043 0307 	orr.w	r3, r3, #7
 800a964:	60fb      	str	r3, [r7, #12]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	609a      	str	r2, [r3, #8]
 800a96c:	bf00      	nop
 800a96e:	3714      	adds	r7, #20
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <TIM_ETR_SetConfig>:
 800a978:	b480      	push	{r7}
 800a97a:	b087      	sub	sp, #28
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	607a      	str	r2, [r7, #4]
 800a984:	603b      	str	r3, [r7, #0]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	617b      	str	r3, [r7, #20]
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a992:	617b      	str	r3, [r7, #20]
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	021a      	lsls	r2, r3, #8
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	431a      	orrs	r2, r3
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	697a      	ldr	r2, [r7, #20]
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	617b      	str	r3, [r7, #20]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	697a      	ldr	r2, [r7, #20]
 800a9aa:	609a      	str	r2, [r3, #8]
 800a9ac:	bf00      	nop
 800a9ae:	371c      	adds	r7, #28
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <TIM_CCxChannelCmd>:
 800a9b8:	b480      	push	{r7}
 800a9ba:	b087      	sub	sp, #28
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	607a      	str	r2, [r7, #4]
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	f003 031f 	and.w	r3, r3, #31
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d0:	617b      	str	r3, [r7, #20]
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6a1a      	ldr	r2, [r3, #32]
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	43db      	mvns	r3, r3
 800a9da:	401a      	ands	r2, r3
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	621a      	str	r2, [r3, #32]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	6a1a      	ldr	r2, [r3, #32]
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	f003 031f 	and.w	r3, r3, #31
 800a9ea:	6879      	ldr	r1, [r7, #4]
 800a9ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a9f0:	431a      	orrs	r2, r3
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	621a      	str	r2, [r3, #32]
 800a9f6:	bf00      	nop
 800a9f8:	371c      	adds	r7, #28
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
	...

0800aa04 <HAL_TIMEx_MasterConfigSynchronization>:
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d101      	bne.n	800aa1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa18:	2302      	movs	r3, #2
 800aa1a:	e050      	b.n	800aabe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2202      	movs	r2, #2
 800aa28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	60fb      	str	r3, [r7, #12]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	60bb      	str	r3, [r7, #8]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa42:	60fb      	str	r3, [r7, #12]
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	60fb      	str	r3, [r7, #12]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	605a      	str	r2, [r3, #4]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a1c      	ldr	r2, [pc, #112]	; (800aacc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d018      	beq.n	800aa92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa68:	d013      	beq.n	800aa92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a18      	ldr	r2, [pc, #96]	; (800aad0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d00e      	beq.n	800aa92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a16      	ldr	r2, [pc, #88]	; (800aad4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d009      	beq.n	800aa92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a15      	ldr	r2, [pc, #84]	; (800aad8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d004      	beq.n	800aa92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a13      	ldr	r2, [pc, #76]	; (800aadc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d10c      	bne.n	800aaac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa98:	60bb      	str	r3, [r7, #8]
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	68ba      	ldr	r2, [r7, #8]
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	60bb      	str	r3, [r7, #8]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	68ba      	ldr	r2, [r7, #8]
 800aaaa:	609a      	str	r2, [r3, #8]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2201      	movs	r2, #1
 800aab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800aabc:	2300      	movs	r3, #0
 800aabe:	4618      	mov	r0, r3
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	40010000 	.word	0x40010000
 800aad0:	40000400 	.word	0x40000400
 800aad4:	40000800 	.word	0x40000800
 800aad8:	40000c00 	.word	0x40000c00
 800aadc:	40014000 	.word	0x40014000

0800aae0 <HAL_TIMEx_CommutCallback>:
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	bf00      	nop
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <HAL_TIMEx_BreakCallback>:
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	bf00      	nop
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <USB_CoreInit>:
 800ab08:	b084      	sub	sp, #16
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b084      	sub	sp, #16
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
 800ab12:	f107 001c 	add.w	r0, r7, #28
 800ab16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d122      	bne.n	800ab66 <USB_CoreInit+0x5e>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	639a      	str	r2, [r3, #56]	; 0x38
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ab34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	60d3      	str	r3, [r2, #12]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	60da      	str	r2, [r3, #12]
 800ab48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d105      	bne.n	800ab5a <USB_CoreInit+0x52>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	60da      	str	r2, [r3, #12]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f001 fbee 	bl	800c33c <USB_CoreReset>
 800ab60:	4603      	mov	r3, r0
 800ab62:	73fb      	strb	r3, [r7, #15]
 800ab64:	e01a      	b.n	800ab9c <USB_CoreInit+0x94>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	60da      	str	r2, [r3, #12]
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f001 fbe2 	bl	800c33c <USB_CoreReset>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	73fb      	strb	r3, [r7, #15]
 800ab7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d106      	bne.n	800ab90 <USB_CoreInit+0x88>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	639a      	str	r2, [r3, #56]	; 0x38
 800ab8e:	e005      	b.n	800ab9c <USB_CoreInit+0x94>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	639a      	str	r2, [r3, #56]	; 0x38
 800ab9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d10b      	bne.n	800abba <USB_CoreInit+0xb2>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	f043 0206 	orr.w	r2, r3, #6
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	609a      	str	r2, [r3, #8]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	f043 0220 	orr.w	r2, r3, #32
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	609a      	str	r2, [r3, #8]
 800abba:	7bfb      	ldrb	r3, [r7, #15]
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800abc6:	b004      	add	sp, #16
 800abc8:	4770      	bx	lr
	...

0800abcc <USB_SetTurnaroundTime>:
 800abcc:	b480      	push	{r7}
 800abce:	b087      	sub	sp, #28
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	4613      	mov	r3, r2
 800abd8:	71fb      	strb	r3, [r7, #7]
 800abda:	79fb      	ldrb	r3, [r7, #7]
 800abdc:	2b02      	cmp	r3, #2
 800abde:	d165      	bne.n	800acac <USB_SetTurnaroundTime+0xe0>
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	4a41      	ldr	r2, [pc, #260]	; (800ace8 <USB_SetTurnaroundTime+0x11c>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d906      	bls.n	800abf6 <USB_SetTurnaroundTime+0x2a>
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	4a40      	ldr	r2, [pc, #256]	; (800acec <USB_SetTurnaroundTime+0x120>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d202      	bcs.n	800abf6 <USB_SetTurnaroundTime+0x2a>
 800abf0:	230f      	movs	r3, #15
 800abf2:	617b      	str	r3, [r7, #20]
 800abf4:	e062      	b.n	800acbc <USB_SetTurnaroundTime+0xf0>
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	4a3c      	ldr	r2, [pc, #240]	; (800acec <USB_SetTurnaroundTime+0x120>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d306      	bcc.n	800ac0c <USB_SetTurnaroundTime+0x40>
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	4a3b      	ldr	r2, [pc, #236]	; (800acf0 <USB_SetTurnaroundTime+0x124>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d202      	bcs.n	800ac0c <USB_SetTurnaroundTime+0x40>
 800ac06:	230e      	movs	r3, #14
 800ac08:	617b      	str	r3, [r7, #20]
 800ac0a:	e057      	b.n	800acbc <USB_SetTurnaroundTime+0xf0>
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	4a38      	ldr	r2, [pc, #224]	; (800acf0 <USB_SetTurnaroundTime+0x124>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d306      	bcc.n	800ac22 <USB_SetTurnaroundTime+0x56>
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	4a37      	ldr	r2, [pc, #220]	; (800acf4 <USB_SetTurnaroundTime+0x128>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d202      	bcs.n	800ac22 <USB_SetTurnaroundTime+0x56>
 800ac1c:	230d      	movs	r3, #13
 800ac1e:	617b      	str	r3, [r7, #20]
 800ac20:	e04c      	b.n	800acbc <USB_SetTurnaroundTime+0xf0>
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	4a33      	ldr	r2, [pc, #204]	; (800acf4 <USB_SetTurnaroundTime+0x128>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d306      	bcc.n	800ac38 <USB_SetTurnaroundTime+0x6c>
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	4a32      	ldr	r2, [pc, #200]	; (800acf8 <USB_SetTurnaroundTime+0x12c>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d802      	bhi.n	800ac38 <USB_SetTurnaroundTime+0x6c>
 800ac32:	230c      	movs	r3, #12
 800ac34:	617b      	str	r3, [r7, #20]
 800ac36:	e041      	b.n	800acbc <USB_SetTurnaroundTime+0xf0>
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	4a2f      	ldr	r2, [pc, #188]	; (800acf8 <USB_SetTurnaroundTime+0x12c>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d906      	bls.n	800ac4e <USB_SetTurnaroundTime+0x82>
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	4a2e      	ldr	r2, [pc, #184]	; (800acfc <USB_SetTurnaroundTime+0x130>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d802      	bhi.n	800ac4e <USB_SetTurnaroundTime+0x82>
 800ac48:	230b      	movs	r3, #11
 800ac4a:	617b      	str	r3, [r7, #20]
 800ac4c:	e036      	b.n	800acbc <USB_SetTurnaroundTime+0xf0>
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	4a2a      	ldr	r2, [pc, #168]	; (800acfc <USB_SetTurnaroundTime+0x130>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d906      	bls.n	800ac64 <USB_SetTurnaroundTime+0x98>
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	4a29      	ldr	r2, [pc, #164]	; (800ad00 <USB_SetTurnaroundTime+0x134>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d802      	bhi.n	800ac64 <USB_SetTurnaroundTime+0x98>
 800ac5e:	230a      	movs	r3, #10
 800ac60:	617b      	str	r3, [r7, #20]
 800ac62:	e02b      	b.n	800acbc <USB_SetTurnaroundTime+0xf0>
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	4a26      	ldr	r2, [pc, #152]	; (800ad00 <USB_SetTurnaroundTime+0x134>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d906      	bls.n	800ac7a <USB_SetTurnaroundTime+0xae>
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	4a25      	ldr	r2, [pc, #148]	; (800ad04 <USB_SetTurnaroundTime+0x138>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d202      	bcs.n	800ac7a <USB_SetTurnaroundTime+0xae>
 800ac74:	2309      	movs	r3, #9
 800ac76:	617b      	str	r3, [r7, #20]
 800ac78:	e020      	b.n	800acbc <USB_SetTurnaroundTime+0xf0>
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	4a21      	ldr	r2, [pc, #132]	; (800ad04 <USB_SetTurnaroundTime+0x138>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d306      	bcc.n	800ac90 <USB_SetTurnaroundTime+0xc4>
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	4a20      	ldr	r2, [pc, #128]	; (800ad08 <USB_SetTurnaroundTime+0x13c>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d802      	bhi.n	800ac90 <USB_SetTurnaroundTime+0xc4>
 800ac8a:	2308      	movs	r3, #8
 800ac8c:	617b      	str	r3, [r7, #20]
 800ac8e:	e015      	b.n	800acbc <USB_SetTurnaroundTime+0xf0>
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	4a1d      	ldr	r2, [pc, #116]	; (800ad08 <USB_SetTurnaroundTime+0x13c>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d906      	bls.n	800aca6 <USB_SetTurnaroundTime+0xda>
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	4a1c      	ldr	r2, [pc, #112]	; (800ad0c <USB_SetTurnaroundTime+0x140>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d202      	bcs.n	800aca6 <USB_SetTurnaroundTime+0xda>
 800aca0:	2307      	movs	r3, #7
 800aca2:	617b      	str	r3, [r7, #20]
 800aca4:	e00a      	b.n	800acbc <USB_SetTurnaroundTime+0xf0>
 800aca6:	2306      	movs	r3, #6
 800aca8:	617b      	str	r3, [r7, #20]
 800acaa:	e007      	b.n	800acbc <USB_SetTurnaroundTime+0xf0>
 800acac:	79fb      	ldrb	r3, [r7, #7]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d102      	bne.n	800acb8 <USB_SetTurnaroundTime+0xec>
 800acb2:	2309      	movs	r3, #9
 800acb4:	617b      	str	r3, [r7, #20]
 800acb6:	e001      	b.n	800acbc <USB_SetTurnaroundTime+0xf0>
 800acb8:	2309      	movs	r3, #9
 800acba:	617b      	str	r3, [r7, #20]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	60da      	str	r2, [r3, #12]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	68da      	ldr	r2, [r3, #12]
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	029b      	lsls	r3, r3, #10
 800acd0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800acd4:	431a      	orrs	r2, r3
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	60da      	str	r2, [r3, #12]
 800acda:	2300      	movs	r3, #0
 800acdc:	4618      	mov	r0, r3
 800acde:	371c      	adds	r7, #28
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr
 800ace8:	00d8acbf 	.word	0x00d8acbf
 800acec:	00e4e1c0 	.word	0x00e4e1c0
 800acf0:	00f42400 	.word	0x00f42400
 800acf4:	01067380 	.word	0x01067380
 800acf8:	011a499f 	.word	0x011a499f
 800acfc:	01312cff 	.word	0x01312cff
 800ad00:	014ca43f 	.word	0x014ca43f
 800ad04:	016e3600 	.word	0x016e3600
 800ad08:	01a6ab1f 	.word	0x01a6ab1f
 800ad0c:	01e84800 	.word	0x01e84800

0800ad10 <USB_EnableGlobalInt>:
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	f043 0201 	orr.w	r2, r3, #1
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	609a      	str	r2, [r3, #8]
 800ad24:	2300      	movs	r3, #0
 800ad26:	4618      	mov	r0, r3
 800ad28:	370c      	adds	r7, #12
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr

0800ad32 <USB_DisableGlobalInt>:
 800ad32:	b480      	push	{r7}
 800ad34:	b083      	sub	sp, #12
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	f023 0201 	bic.w	r2, r3, #1
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	609a      	str	r2, [r3, #8]
 800ad46:	2300      	movs	r3, #0
 800ad48:	4618      	mov	r0, r3
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <USB_SetCurrentMode>:
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	70fb      	strb	r3, [r7, #3]
 800ad60:	2300      	movs	r3, #0
 800ad62:	60fb      	str	r3, [r7, #12]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	60da      	str	r2, [r3, #12]
 800ad70:	78fb      	ldrb	r3, [r7, #3]
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d115      	bne.n	800ada2 <USB_SetCurrentMode+0x4e>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	60da      	str	r2, [r3, #12]
 800ad82:	2001      	movs	r0, #1
 800ad84:	f7fa f882 	bl	8004e8c <HAL_Delay>
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	60fb      	str	r3, [r7, #12]
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f001 fa45 	bl	800c21e <USB_GetMode>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d01e      	beq.n	800add8 <USB_SetCurrentMode+0x84>
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2b31      	cmp	r3, #49	; 0x31
 800ad9e:	d9f0      	bls.n	800ad82 <USB_SetCurrentMode+0x2e>
 800ada0:	e01a      	b.n	800add8 <USB_SetCurrentMode+0x84>
 800ada2:	78fb      	ldrb	r3, [r7, #3]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d115      	bne.n	800add4 <USB_SetCurrentMode+0x80>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	68db      	ldr	r3, [r3, #12]
 800adac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	60da      	str	r2, [r3, #12]
 800adb4:	2001      	movs	r0, #1
 800adb6:	f7fa f869 	bl	8004e8c <HAL_Delay>
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	3301      	adds	r3, #1
 800adbe:	60fb      	str	r3, [r7, #12]
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f001 fa2c 	bl	800c21e <USB_GetMode>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d005      	beq.n	800add8 <USB_SetCurrentMode+0x84>
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2b31      	cmp	r3, #49	; 0x31
 800add0:	d9f0      	bls.n	800adb4 <USB_SetCurrentMode+0x60>
 800add2:	e001      	b.n	800add8 <USB_SetCurrentMode+0x84>
 800add4:	2301      	movs	r3, #1
 800add6:	e005      	b.n	800ade4 <USB_SetCurrentMode+0x90>
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2b32      	cmp	r3, #50	; 0x32
 800addc:	d101      	bne.n	800ade2 <USB_SetCurrentMode+0x8e>
 800adde:	2301      	movs	r3, #1
 800ade0:	e000      	b.n	800ade4 <USB_SetCurrentMode+0x90>
 800ade2:	2300      	movs	r3, #0
 800ade4:	4618      	mov	r0, r3
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <USB_DevInit>:
 800adec:	b084      	sub	sp, #16
 800adee:	b580      	push	{r7, lr}
 800adf0:	b086      	sub	sp, #24
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
 800adf6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800adfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800adfe:	2300      	movs	r3, #0
 800ae00:	75fb      	strb	r3, [r7, #23]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	60fb      	str	r3, [r7, #12]
 800ae06:	2300      	movs	r3, #0
 800ae08:	613b      	str	r3, [r7, #16]
 800ae0a:	e009      	b.n	800ae20 <USB_DevInit+0x34>
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	3340      	adds	r3, #64	; 0x40
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	4413      	add	r3, r2
 800ae16:	2200      	movs	r2, #0
 800ae18:	605a      	str	r2, [r3, #4]
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	613b      	str	r3, [r7, #16]
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	2b0e      	cmp	r3, #14
 800ae24:	d9f2      	bls.n	800ae0c <USB_DevInit+0x20>
 800ae26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d11c      	bne.n	800ae66 <USB_DevInit+0x7a>
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae3a:	f043 0302 	orr.w	r3, r3, #2
 800ae3e:	6053      	str	r3, [r2, #4]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	639a      	str	r2, [r3, #56]	; 0x38
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae50:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	639a      	str	r2, [r3, #56]	; 0x38
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae5c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	639a      	str	r2, [r3, #56]	; 0x38
 800ae64:	e00b      	b.n	800ae7e <USB_DevInit+0x92>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae6a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	639a      	str	r2, [r3, #56]	; 0x38
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae76:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	639a      	str	r2, [r3, #56]	; 0x38
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae84:	461a      	mov	r2, r3
 800ae86:	2300      	movs	r3, #0
 800ae88:	6013      	str	r3, [r2, #0]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae90:	4619      	mov	r1, r3
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae98:	461a      	mov	r2, r3
 800ae9a:	680b      	ldr	r3, [r1, #0]
 800ae9c:	6013      	str	r3, [r2, #0]
 800ae9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d10c      	bne.n	800aebe <USB_DevInit+0xd2>
 800aea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d104      	bne.n	800aeb4 <USB_DevInit+0xc8>
 800aeaa:	2100      	movs	r1, #0
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f965 	bl	800b17c <USB_SetDevSpeed>
 800aeb2:	e008      	b.n	800aec6 <USB_DevInit+0xda>
 800aeb4:	2101      	movs	r1, #1
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 f960 	bl	800b17c <USB_SetDevSpeed>
 800aebc:	e003      	b.n	800aec6 <USB_DevInit+0xda>
 800aebe:	2103      	movs	r1, #3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 f95b 	bl	800b17c <USB_SetDevSpeed>
 800aec6:	2110      	movs	r1, #16
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 f8f3 	bl	800b0b4 <USB_FlushTxFifo>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d001      	beq.n	800aed8 <USB_DevInit+0xec>
 800aed4:	2301      	movs	r3, #1
 800aed6:	75fb      	strb	r3, [r7, #23]
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 f91f 	bl	800b11c <USB_FlushRxFifo>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d001      	beq.n	800aee8 <USB_DevInit+0xfc>
 800aee4:	2301      	movs	r3, #1
 800aee6:	75fb      	strb	r3, [r7, #23]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeee:	461a      	mov	r2, r3
 800aef0:	2300      	movs	r3, #0
 800aef2:	6113      	str	r3, [r2, #16]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aefa:	461a      	mov	r2, r3
 800aefc:	2300      	movs	r3, #0
 800aefe:	6153      	str	r3, [r2, #20]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af06:	461a      	mov	r2, r3
 800af08:	2300      	movs	r3, #0
 800af0a:	61d3      	str	r3, [r2, #28]
 800af0c:	2300      	movs	r3, #0
 800af0e:	613b      	str	r3, [r7, #16]
 800af10:	e043      	b.n	800af9a <USB_DevInit+0x1ae>
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	015a      	lsls	r2, r3, #5
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	4413      	add	r3, r2
 800af1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af28:	d118      	bne.n	800af5c <USB_DevInit+0x170>
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d10a      	bne.n	800af46 <USB_DevInit+0x15a>
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	015a      	lsls	r2, r3, #5
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	4413      	add	r3, r2
 800af38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af3c:	461a      	mov	r2, r3
 800af3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800af42:	6013      	str	r3, [r2, #0]
 800af44:	e013      	b.n	800af6e <USB_DevInit+0x182>
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	015a      	lsls	r2, r3, #5
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	4413      	add	r3, r2
 800af4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af52:	461a      	mov	r2, r3
 800af54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800af58:	6013      	str	r3, [r2, #0]
 800af5a:	e008      	b.n	800af6e <USB_DevInit+0x182>
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	015a      	lsls	r2, r3, #5
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	4413      	add	r3, r2
 800af64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af68:	461a      	mov	r2, r3
 800af6a:	2300      	movs	r3, #0
 800af6c:	6013      	str	r3, [r2, #0]
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	015a      	lsls	r2, r3, #5
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	4413      	add	r3, r2
 800af76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af7a:	461a      	mov	r2, r3
 800af7c:	2300      	movs	r3, #0
 800af7e:	6113      	str	r3, [r2, #16]
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	015a      	lsls	r2, r3, #5
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	4413      	add	r3, r2
 800af88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af8c:	461a      	mov	r2, r3
 800af8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800af92:	6093      	str	r3, [r2, #8]
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	3301      	adds	r3, #1
 800af98:	613b      	str	r3, [r7, #16]
 800af9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9c:	693a      	ldr	r2, [r7, #16]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d3b7      	bcc.n	800af12 <USB_DevInit+0x126>
 800afa2:	2300      	movs	r3, #0
 800afa4:	613b      	str	r3, [r7, #16]
 800afa6:	e043      	b.n	800b030 <USB_DevInit+0x244>
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	015a      	lsls	r2, r3, #5
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	4413      	add	r3, r2
 800afb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800afba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800afbe:	d118      	bne.n	800aff2 <USB_DevInit+0x206>
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d10a      	bne.n	800afdc <USB_DevInit+0x1f0>
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	015a      	lsls	r2, r3, #5
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	4413      	add	r3, r2
 800afce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afd2:	461a      	mov	r2, r3
 800afd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800afd8:	6013      	str	r3, [r2, #0]
 800afda:	e013      	b.n	800b004 <USB_DevInit+0x218>
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	015a      	lsls	r2, r3, #5
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	4413      	add	r3, r2
 800afe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afe8:	461a      	mov	r2, r3
 800afea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800afee:	6013      	str	r3, [r2, #0]
 800aff0:	e008      	b.n	800b004 <USB_DevInit+0x218>
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	015a      	lsls	r2, r3, #5
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	4413      	add	r3, r2
 800affa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800affe:	461a      	mov	r2, r3
 800b000:	2300      	movs	r3, #0
 800b002:	6013      	str	r3, [r2, #0]
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	015a      	lsls	r2, r3, #5
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	4413      	add	r3, r2
 800b00c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b010:	461a      	mov	r2, r3
 800b012:	2300      	movs	r3, #0
 800b014:	6113      	str	r3, [r2, #16]
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	015a      	lsls	r2, r3, #5
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	4413      	add	r3, r2
 800b01e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b022:	461a      	mov	r2, r3
 800b024:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b028:	6093      	str	r3, [r2, #8]
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	3301      	adds	r3, #1
 800b02e:	613b      	str	r3, [r7, #16]
 800b030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b032:	693a      	ldr	r2, [r7, #16]
 800b034:	429a      	cmp	r2, r3
 800b036:	d3b7      	bcc.n	800afa8 <USB_DevInit+0x1bc>
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b03e:	691b      	ldr	r3, [r3, #16]
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b046:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b04a:	6113      	str	r3, [r2, #16]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	619a      	str	r2, [r3, #24]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b058:	615a      	str	r2, [r3, #20]
 800b05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d105      	bne.n	800b06c <USB_DevInit+0x280>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	699b      	ldr	r3, [r3, #24]
 800b064:	f043 0210 	orr.w	r2, r3, #16
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	619a      	str	r2, [r3, #24]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	699a      	ldr	r2, [r3, #24]
 800b070:	4b0f      	ldr	r3, [pc, #60]	; (800b0b0 <USB_DevInit+0x2c4>)
 800b072:	4313      	orrs	r3, r2
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	6193      	str	r3, [r2, #24]
 800b078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d005      	beq.n	800b08a <USB_DevInit+0x29e>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	f043 0208 	orr.w	r2, r3, #8
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	619a      	str	r2, [r3, #24]
 800b08a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d107      	bne.n	800b0a0 <USB_DevInit+0x2b4>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	699b      	ldr	r3, [r3, #24]
 800b094:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b098:	f043 0304 	orr.w	r3, r3, #4
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	6193      	str	r3, [r2, #24]
 800b0a0:	7dfb      	ldrb	r3, [r7, #23]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3718      	adds	r7, #24
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b0ac:	b004      	add	sp, #16
 800b0ae:	4770      	bx	lr
 800b0b0:	803c3800 	.word	0x803c3800

0800b0b4 <USB_FlushTxFifo>:
 800b0b4:	b480      	push	{r7}
 800b0b6:	b085      	sub	sp, #20
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
 800b0be:	2300      	movs	r3, #0
 800b0c0:	60fb      	str	r3, [r7, #12]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	60fb      	str	r3, [r7, #12]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	4a13      	ldr	r2, [pc, #76]	; (800b118 <USB_FlushTxFifo+0x64>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d901      	bls.n	800b0d4 <USB_FlushTxFifo+0x20>
 800b0d0:	2303      	movs	r3, #3
 800b0d2:	e01b      	b.n	800b10c <USB_FlushTxFifo+0x58>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	daf2      	bge.n	800b0c2 <USB_FlushTxFifo+0xe>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	60fb      	str	r3, [r7, #12]
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	019b      	lsls	r3, r3, #6
 800b0e4:	f043 0220 	orr.w	r2, r3, #32
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	611a      	str	r2, [r3, #16]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	60fb      	str	r3, [r7, #12]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	4a08      	ldr	r2, [pc, #32]	; (800b118 <USB_FlushTxFifo+0x64>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d901      	bls.n	800b0fe <USB_FlushTxFifo+0x4a>
 800b0fa:	2303      	movs	r3, #3
 800b0fc:	e006      	b.n	800b10c <USB_FlushTxFifo+0x58>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	f003 0320 	and.w	r3, r3, #32
 800b106:	2b20      	cmp	r3, #32
 800b108:	d0f0      	beq.n	800b0ec <USB_FlushTxFifo+0x38>
 800b10a:	2300      	movs	r3, #0
 800b10c:	4618      	mov	r0, r3
 800b10e:	3714      	adds	r7, #20
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr
 800b118:	00030d40 	.word	0x00030d40

0800b11c <USB_FlushRxFifo>:
 800b11c:	b480      	push	{r7}
 800b11e:	b085      	sub	sp, #20
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	2300      	movs	r3, #0
 800b126:	60fb      	str	r3, [r7, #12]
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	3301      	adds	r3, #1
 800b12c:	60fb      	str	r3, [r7, #12]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	4a11      	ldr	r2, [pc, #68]	; (800b178 <USB_FlushRxFifo+0x5c>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d901      	bls.n	800b13a <USB_FlushRxFifo+0x1e>
 800b136:	2303      	movs	r3, #3
 800b138:	e018      	b.n	800b16c <USB_FlushRxFifo+0x50>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	691b      	ldr	r3, [r3, #16]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	daf2      	bge.n	800b128 <USB_FlushRxFifo+0xc>
 800b142:	2300      	movs	r3, #0
 800b144:	60fb      	str	r3, [r7, #12]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2210      	movs	r2, #16
 800b14a:	611a      	str	r2, [r3, #16]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	3301      	adds	r3, #1
 800b150:	60fb      	str	r3, [r7, #12]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	4a08      	ldr	r2, [pc, #32]	; (800b178 <USB_FlushRxFifo+0x5c>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d901      	bls.n	800b15e <USB_FlushRxFifo+0x42>
 800b15a:	2303      	movs	r3, #3
 800b15c:	e006      	b.n	800b16c <USB_FlushRxFifo+0x50>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	691b      	ldr	r3, [r3, #16]
 800b162:	f003 0310 	and.w	r3, r3, #16
 800b166:	2b10      	cmp	r3, #16
 800b168:	d0f0      	beq.n	800b14c <USB_FlushRxFifo+0x30>
 800b16a:	2300      	movs	r3, #0
 800b16c:	4618      	mov	r0, r3
 800b16e:	3714      	adds	r7, #20
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr
 800b178:	00030d40 	.word	0x00030d40

0800b17c <USB_SetDevSpeed>:
 800b17c:	b480      	push	{r7}
 800b17e:	b085      	sub	sp, #20
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	460b      	mov	r3, r1
 800b186:	70fb      	strb	r3, [r7, #3]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	60fb      	str	r3, [r7, #12]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	78fb      	ldrb	r3, [r7, #3]
 800b196:	68f9      	ldr	r1, [r7, #12]
 800b198:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b19c:	4313      	orrs	r3, r2
 800b19e:	600b      	str	r3, [r1, #0]
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3714      	adds	r7, #20
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr

0800b1ae <USB_GetDevSpeed>:
 800b1ae:	b480      	push	{r7}
 800b1b0:	b087      	sub	sp, #28
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	613b      	str	r3, [r7, #16]
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	f003 0306 	and.w	r3, r3, #6
 800b1c6:	60fb      	str	r3, [r7, #12]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d102      	bne.n	800b1d4 <USB_GetDevSpeed+0x26>
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	75fb      	strb	r3, [r7, #23]
 800b1d2:	e00a      	b.n	800b1ea <USB_GetDevSpeed+0x3c>
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2b02      	cmp	r3, #2
 800b1d8:	d002      	beq.n	800b1e0 <USB_GetDevSpeed+0x32>
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2b06      	cmp	r3, #6
 800b1de:	d102      	bne.n	800b1e6 <USB_GetDevSpeed+0x38>
 800b1e0:	2302      	movs	r3, #2
 800b1e2:	75fb      	strb	r3, [r7, #23]
 800b1e4:	e001      	b.n	800b1ea <USB_GetDevSpeed+0x3c>
 800b1e6:	230f      	movs	r3, #15
 800b1e8:	75fb      	strb	r3, [r7, #23]
 800b1ea:	7dfb      	ldrb	r3, [r7, #23]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	371c      	adds	r7, #28
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <USB_ActivateEndpoint>:
 800b1f8:	b480      	push	{r7}
 800b1fa:	b085      	sub	sp, #20
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	60fb      	str	r3, [r7, #12]
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	60bb      	str	r3, [r7, #8]
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	785b      	ldrb	r3, [r3, #1]
 800b210:	2b01      	cmp	r3, #1
 800b212:	d13a      	bne.n	800b28a <USB_ActivateEndpoint+0x92>
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b21a:	69da      	ldr	r2, [r3, #28]
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	f003 030f 	and.w	r3, r3, #15
 800b224:	2101      	movs	r1, #1
 800b226:	fa01 f303 	lsl.w	r3, r1, r3
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	68f9      	ldr	r1, [r7, #12]
 800b22e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b232:	4313      	orrs	r3, r2
 800b234:	61cb      	str	r3, [r1, #28]
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	015a      	lsls	r2, r3, #5
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	4413      	add	r3, r2
 800b23e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d155      	bne.n	800b2f8 <USB_ActivateEndpoint+0x100>
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	015a      	lsls	r2, r3, #5
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	4413      	add	r3, r2
 800b254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	f3c3 010a 	ubfx	r1, r3, #0, #11
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	791b      	ldrb	r3, [r3, #4]
 800b266:	049b      	lsls	r3, r3, #18
 800b268:	4319      	orrs	r1, r3
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	059b      	lsls	r3, r3, #22
 800b26e:	430b      	orrs	r3, r1
 800b270:	4313      	orrs	r3, r2
 800b272:	68ba      	ldr	r2, [r7, #8]
 800b274:	0151      	lsls	r1, r2, #5
 800b276:	68fa      	ldr	r2, [r7, #12]
 800b278:	440a      	add	r2, r1
 800b27a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b27e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b286:	6013      	str	r3, [r2, #0]
 800b288:	e036      	b.n	800b2f8 <USB_ActivateEndpoint+0x100>
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b290:	69da      	ldr	r2, [r3, #28]
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	f003 030f 	and.w	r3, r3, #15
 800b29a:	2101      	movs	r1, #1
 800b29c:	fa01 f303 	lsl.w	r3, r1, r3
 800b2a0:	041b      	lsls	r3, r3, #16
 800b2a2:	68f9      	ldr	r1, [r7, #12]
 800b2a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	61cb      	str	r3, [r1, #28]
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	015a      	lsls	r2, r3, #5
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d11a      	bne.n	800b2f8 <USB_ActivateEndpoint+0x100>
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	015a      	lsls	r2, r3, #5
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	791b      	ldrb	r3, [r3, #4]
 800b2dc:	049b      	lsls	r3, r3, #18
 800b2de:	430b      	orrs	r3, r1
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	68ba      	ldr	r2, [r7, #8]
 800b2e4:	0151      	lsls	r1, r2, #5
 800b2e6:	68fa      	ldr	r2, [r7, #12]
 800b2e8:	440a      	add	r2, r1
 800b2ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2f6:	6013      	str	r3, [r2, #0]
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3714      	adds	r7, #20
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr
	...

0800b308 <USB_DeactivateEndpoint>:
 800b308:	b480      	push	{r7}
 800b30a:	b085      	sub	sp, #20
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	60fb      	str	r3, [r7, #12]
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	60bb      	str	r3, [r7, #8]
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	785b      	ldrb	r3, [r3, #1]
 800b320:	2b01      	cmp	r3, #1
 800b322:	d161      	bne.n	800b3e8 <USB_DeactivateEndpoint+0xe0>
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	015a      	lsls	r2, r3, #5
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	4413      	add	r3, r2
 800b32c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b336:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b33a:	d11f      	bne.n	800b37c <USB_DeactivateEndpoint+0x74>
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	015a      	lsls	r2, r3, #5
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	4413      	add	r3, r2
 800b344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68ba      	ldr	r2, [r7, #8]
 800b34c:	0151      	lsls	r1, r2, #5
 800b34e:	68fa      	ldr	r2, [r7, #12]
 800b350:	440a      	add	r2, r1
 800b352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b356:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b35a:	6013      	str	r3, [r2, #0]
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	015a      	lsls	r2, r3, #5
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	4413      	add	r3, r2
 800b364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	68ba      	ldr	r2, [r7, #8]
 800b36c:	0151      	lsls	r1, r2, #5
 800b36e:	68fa      	ldr	r2, [r7, #12]
 800b370:	440a      	add	r2, r1
 800b372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b376:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b37a:	6013      	str	r3, [r2, #0]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	f003 030f 	and.w	r3, r3, #15
 800b38c:	2101      	movs	r1, #1
 800b38e:	fa01 f303 	lsl.w	r3, r1, r3
 800b392:	b29b      	uxth	r3, r3
 800b394:	43db      	mvns	r3, r3
 800b396:	68f9      	ldr	r1, [r7, #12]
 800b398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b39c:	4013      	ands	r3, r2
 800b39e:	63cb      	str	r3, [r1, #60]	; 0x3c
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3a6:	69da      	ldr	r2, [r3, #28]
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	f003 030f 	and.w	r3, r3, #15
 800b3b0:	2101      	movs	r1, #1
 800b3b2:	fa01 f303 	lsl.w	r3, r1, r3
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	43db      	mvns	r3, r3
 800b3ba:	68f9      	ldr	r1, [r7, #12]
 800b3bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b3c0:	4013      	ands	r3, r2
 800b3c2:	61cb      	str	r3, [r1, #28]
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	015a      	lsls	r2, r3, #5
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	4413      	add	r3, r2
 800b3cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	0159      	lsls	r1, r3, #5
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	440b      	add	r3, r1
 800b3da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3de:	4619      	mov	r1, r3
 800b3e0:	4b35      	ldr	r3, [pc, #212]	; (800b4b8 <USB_DeactivateEndpoint+0x1b0>)
 800b3e2:	4013      	ands	r3, r2
 800b3e4:	600b      	str	r3, [r1, #0]
 800b3e6:	e060      	b.n	800b4aa <USB_DeactivateEndpoint+0x1a2>
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	015a      	lsls	r2, r3, #5
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3fe:	d11f      	bne.n	800b440 <USB_DeactivateEndpoint+0x138>
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	015a      	lsls	r2, r3, #5
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	4413      	add	r3, r2
 800b408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	68ba      	ldr	r2, [r7, #8]
 800b410:	0151      	lsls	r1, r2, #5
 800b412:	68fa      	ldr	r2, [r7, #12]
 800b414:	440a      	add	r2, r1
 800b416:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b41a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b41e:	6013      	str	r3, [r2, #0]
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	015a      	lsls	r2, r3, #5
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	4413      	add	r3, r2
 800b428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	68ba      	ldr	r2, [r7, #8]
 800b430:	0151      	lsls	r1, r2, #5
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	440a      	add	r2, r1
 800b436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b43a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b43e:	6013      	str	r3, [r2, #0]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	f003 030f 	and.w	r3, r3, #15
 800b450:	2101      	movs	r1, #1
 800b452:	fa01 f303 	lsl.w	r3, r1, r3
 800b456:	041b      	lsls	r3, r3, #16
 800b458:	43db      	mvns	r3, r3
 800b45a:	68f9      	ldr	r1, [r7, #12]
 800b45c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b460:	4013      	ands	r3, r2
 800b462:	63cb      	str	r3, [r1, #60]	; 0x3c
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b46a:	69da      	ldr	r2, [r3, #28]
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	f003 030f 	and.w	r3, r3, #15
 800b474:	2101      	movs	r1, #1
 800b476:	fa01 f303 	lsl.w	r3, r1, r3
 800b47a:	041b      	lsls	r3, r3, #16
 800b47c:	43db      	mvns	r3, r3
 800b47e:	68f9      	ldr	r1, [r7, #12]
 800b480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b484:	4013      	ands	r3, r2
 800b486:	61cb      	str	r3, [r1, #28]
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	015a      	lsls	r2, r3, #5
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	4413      	add	r3, r2
 800b490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	0159      	lsls	r1, r3, #5
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	440b      	add	r3, r1
 800b49e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	4b05      	ldr	r3, [pc, #20]	; (800b4bc <USB_DeactivateEndpoint+0x1b4>)
 800b4a6:	4013      	ands	r3, r2
 800b4a8:	600b      	str	r3, [r1, #0]
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3714      	adds	r7, #20
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr
 800b4b8:	ec337800 	.word	0xec337800
 800b4bc:	eff37800 	.word	0xeff37800

0800b4c0 <USB_EPStartXfer>:
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b08a      	sub	sp, #40	; 0x28
 800b4c4:	af02      	add	r7, sp, #8
 800b4c6:	60f8      	str	r0, [r7, #12]
 800b4c8:	60b9      	str	r1, [r7, #8]
 800b4ca:	4613      	mov	r3, r2
 800b4cc:	71fb      	strb	r3, [r7, #7]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	61fb      	str	r3, [r7, #28]
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	61bb      	str	r3, [r7, #24]
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	785b      	ldrb	r3, [r3, #1]
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	f040 815c 	bne.w	800b79a <USB_EPStartXfer+0x2da>
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	699b      	ldr	r3, [r3, #24]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d132      	bne.n	800b550 <USB_EPStartXfer+0x90>
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	015a      	lsls	r2, r3, #5
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4f6:	691b      	ldr	r3, [r3, #16]
 800b4f8:	69ba      	ldr	r2, [r7, #24]
 800b4fa:	0151      	lsls	r1, r2, #5
 800b4fc:	69fa      	ldr	r2, [r7, #28]
 800b4fe:	440a      	add	r2, r1
 800b500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b504:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b508:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b50c:	6113      	str	r3, [r2, #16]
 800b50e:	69bb      	ldr	r3, [r7, #24]
 800b510:	015a      	lsls	r2, r3, #5
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	4413      	add	r3, r2
 800b516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b51a:	691b      	ldr	r3, [r3, #16]
 800b51c:	69ba      	ldr	r2, [r7, #24]
 800b51e:	0151      	lsls	r1, r2, #5
 800b520:	69fa      	ldr	r2, [r7, #28]
 800b522:	440a      	add	r2, r1
 800b524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b528:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b52c:	6113      	str	r3, [r2, #16]
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	015a      	lsls	r2, r3, #5
 800b532:	69fb      	ldr	r3, [r7, #28]
 800b534:	4413      	add	r3, r2
 800b536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b53a:	691b      	ldr	r3, [r3, #16]
 800b53c:	69ba      	ldr	r2, [r7, #24]
 800b53e:	0151      	lsls	r1, r2, #5
 800b540:	69fa      	ldr	r2, [r7, #28]
 800b542:	440a      	add	r2, r1
 800b544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b548:	0cdb      	lsrs	r3, r3, #19
 800b54a:	04db      	lsls	r3, r3, #19
 800b54c:	6113      	str	r3, [r2, #16]
 800b54e:	e074      	b.n	800b63a <USB_EPStartXfer+0x17a>
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	015a      	lsls	r2, r3, #5
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	4413      	add	r3, r2
 800b558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b55c:	691b      	ldr	r3, [r3, #16]
 800b55e:	69ba      	ldr	r2, [r7, #24]
 800b560:	0151      	lsls	r1, r2, #5
 800b562:	69fa      	ldr	r2, [r7, #28]
 800b564:	440a      	add	r2, r1
 800b566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b56a:	0cdb      	lsrs	r3, r3, #19
 800b56c:	04db      	lsls	r3, r3, #19
 800b56e:	6113      	str	r3, [r2, #16]
 800b570:	69bb      	ldr	r3, [r7, #24]
 800b572:	015a      	lsls	r2, r3, #5
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	4413      	add	r3, r2
 800b578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b57c:	691b      	ldr	r3, [r3, #16]
 800b57e:	69ba      	ldr	r2, [r7, #24]
 800b580:	0151      	lsls	r1, r2, #5
 800b582:	69fa      	ldr	r2, [r7, #28]
 800b584:	440a      	add	r2, r1
 800b586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b58a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b58e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b592:	6113      	str	r3, [r2, #16]
 800b594:	69bb      	ldr	r3, [r7, #24]
 800b596:	015a      	lsls	r2, r3, #5
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	4413      	add	r3, r2
 800b59c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5a0:	691a      	ldr	r2, [r3, #16]
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	6999      	ldr	r1, [r3, #24]
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	440b      	add	r3, r1
 800b5ac:	1e59      	subs	r1, r3, #1
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	fbb1 f3f3 	udiv	r3, r1, r3
 800b5b6:	04d9      	lsls	r1, r3, #19
 800b5b8:	4b9d      	ldr	r3, [pc, #628]	; (800b830 <USB_EPStartXfer+0x370>)
 800b5ba:	400b      	ands	r3, r1
 800b5bc:	69b9      	ldr	r1, [r7, #24]
 800b5be:	0148      	lsls	r0, r1, #5
 800b5c0:	69f9      	ldr	r1, [r7, #28]
 800b5c2:	4401      	add	r1, r0
 800b5c4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	610b      	str	r3, [r1, #16]
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	015a      	lsls	r2, r3, #5
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	4413      	add	r3, r2
 800b5d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5d8:	691a      	ldr	r2, [r3, #16]
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	699b      	ldr	r3, [r3, #24]
 800b5de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b5e2:	69b9      	ldr	r1, [r7, #24]
 800b5e4:	0148      	lsls	r0, r1, #5
 800b5e6:	69f9      	ldr	r1, [r7, #28]
 800b5e8:	4401      	add	r1, r0
 800b5ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	610b      	str	r3, [r1, #16]
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	791b      	ldrb	r3, [r3, #4]
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d11f      	bne.n	800b63a <USB_EPStartXfer+0x17a>
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	015a      	lsls	r2, r3, #5
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	4413      	add	r3, r2
 800b602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b606:	691b      	ldr	r3, [r3, #16]
 800b608:	69ba      	ldr	r2, [r7, #24]
 800b60a:	0151      	lsls	r1, r2, #5
 800b60c:	69fa      	ldr	r2, [r7, #28]
 800b60e:	440a      	add	r2, r1
 800b610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b614:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b618:	6113      	str	r3, [r2, #16]
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	015a      	lsls	r2, r3, #5
 800b61e:	69fb      	ldr	r3, [r7, #28]
 800b620:	4413      	add	r3, r2
 800b622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b626:	691b      	ldr	r3, [r3, #16]
 800b628:	69ba      	ldr	r2, [r7, #24]
 800b62a:	0151      	lsls	r1, r2, #5
 800b62c:	69fa      	ldr	r2, [r7, #28]
 800b62e:	440a      	add	r2, r1
 800b630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b634:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b638:	6113      	str	r3, [r2, #16]
 800b63a:	79fb      	ldrb	r3, [r7, #7]
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d14b      	bne.n	800b6d8 <USB_EPStartXfer+0x218>
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	695b      	ldr	r3, [r3, #20]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d009      	beq.n	800b65c <USB_EPStartXfer+0x19c>
 800b648:	69bb      	ldr	r3, [r7, #24]
 800b64a:	015a      	lsls	r2, r3, #5
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	4413      	add	r3, r2
 800b650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b654:	461a      	mov	r2, r3
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	695b      	ldr	r3, [r3, #20]
 800b65a:	6153      	str	r3, [r2, #20]
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	791b      	ldrb	r3, [r3, #4]
 800b660:	2b01      	cmp	r3, #1
 800b662:	d128      	bne.n	800b6b6 <USB_EPStartXfer+0x1f6>
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b670:	2b00      	cmp	r3, #0
 800b672:	d110      	bne.n	800b696 <USB_EPStartXfer+0x1d6>
 800b674:	69bb      	ldr	r3, [r7, #24]
 800b676:	015a      	lsls	r2, r3, #5
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	4413      	add	r3, r2
 800b67c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	69ba      	ldr	r2, [r7, #24]
 800b684:	0151      	lsls	r1, r2, #5
 800b686:	69fa      	ldr	r2, [r7, #28]
 800b688:	440a      	add	r2, r1
 800b68a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b68e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b692:	6013      	str	r3, [r2, #0]
 800b694:	e00f      	b.n	800b6b6 <USB_EPStartXfer+0x1f6>
 800b696:	69bb      	ldr	r3, [r7, #24]
 800b698:	015a      	lsls	r2, r3, #5
 800b69a:	69fb      	ldr	r3, [r7, #28]
 800b69c:	4413      	add	r3, r2
 800b69e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	69ba      	ldr	r2, [r7, #24]
 800b6a6:	0151      	lsls	r1, r2, #5
 800b6a8:	69fa      	ldr	r2, [r7, #28]
 800b6aa:	440a      	add	r2, r1
 800b6ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6b4:	6013      	str	r3, [r2, #0]
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	015a      	lsls	r2, r3, #5
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	4413      	add	r3, r2
 800b6be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	69ba      	ldr	r2, [r7, #24]
 800b6c6:	0151      	lsls	r1, r2, #5
 800b6c8:	69fa      	ldr	r2, [r7, #28]
 800b6ca:	440a      	add	r2, r1
 800b6cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b6d4:	6013      	str	r3, [r2, #0]
 800b6d6:	e133      	b.n	800b940 <USB_EPStartXfer+0x480>
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	015a      	lsls	r2, r3, #5
 800b6dc:	69fb      	ldr	r3, [r7, #28]
 800b6de:	4413      	add	r3, r2
 800b6e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	69ba      	ldr	r2, [r7, #24]
 800b6e8:	0151      	lsls	r1, r2, #5
 800b6ea:	69fa      	ldr	r2, [r7, #28]
 800b6ec:	440a      	add	r2, r1
 800b6ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b6f6:	6013      	str	r3, [r2, #0]
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	791b      	ldrb	r3, [r3, #4]
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d015      	beq.n	800b72c <USB_EPStartXfer+0x26c>
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	699b      	ldr	r3, [r3, #24]
 800b704:	2b00      	cmp	r3, #0
 800b706:	f000 811b 	beq.w	800b940 <USB_EPStartXfer+0x480>
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	f003 030f 	and.w	r3, r3, #15
 800b71a:	2101      	movs	r1, #1
 800b71c:	fa01 f303 	lsl.w	r3, r1, r3
 800b720:	69f9      	ldr	r1, [r7, #28]
 800b722:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b726:	4313      	orrs	r3, r2
 800b728:	634b      	str	r3, [r1, #52]	; 0x34
 800b72a:	e109      	b.n	800b940 <USB_EPStartXfer+0x480>
 800b72c:	69fb      	ldr	r3, [r7, #28]
 800b72e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b732:	689b      	ldr	r3, [r3, #8]
 800b734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d110      	bne.n	800b75e <USB_EPStartXfer+0x29e>
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	015a      	lsls	r2, r3, #5
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	4413      	add	r3, r2
 800b744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	69ba      	ldr	r2, [r7, #24]
 800b74c:	0151      	lsls	r1, r2, #5
 800b74e:	69fa      	ldr	r2, [r7, #28]
 800b750:	440a      	add	r2, r1
 800b752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b756:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b75a:	6013      	str	r3, [r2, #0]
 800b75c:	e00f      	b.n	800b77e <USB_EPStartXfer+0x2be>
 800b75e:	69bb      	ldr	r3, [r7, #24]
 800b760:	015a      	lsls	r2, r3, #5
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	4413      	add	r3, r2
 800b766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	69ba      	ldr	r2, [r7, #24]
 800b76e:	0151      	lsls	r1, r2, #5
 800b770:	69fa      	ldr	r2, [r7, #28]
 800b772:	440a      	add	r2, r1
 800b774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b77c:	6013      	str	r3, [r2, #0]
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	6919      	ldr	r1, [r3, #16]
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	781a      	ldrb	r2, [r3, #0]
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	699b      	ldr	r3, [r3, #24]
 800b78a:	b298      	uxth	r0, r3
 800b78c:	79fb      	ldrb	r3, [r7, #7]
 800b78e:	9300      	str	r3, [sp, #0]
 800b790:	4603      	mov	r3, r0
 800b792:	68f8      	ldr	r0, [r7, #12]
 800b794:	f000 fade 	bl	800bd54 <USB_WritePacket>
 800b798:	e0d2      	b.n	800b940 <USB_EPStartXfer+0x480>
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	015a      	lsls	r2, r3, #5
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a6:	691b      	ldr	r3, [r3, #16]
 800b7a8:	69ba      	ldr	r2, [r7, #24]
 800b7aa:	0151      	lsls	r1, r2, #5
 800b7ac:	69fa      	ldr	r2, [r7, #28]
 800b7ae:	440a      	add	r2, r1
 800b7b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7b4:	0cdb      	lsrs	r3, r3, #19
 800b7b6:	04db      	lsls	r3, r3, #19
 800b7b8:	6113      	str	r3, [r2, #16]
 800b7ba:	69bb      	ldr	r3, [r7, #24]
 800b7bc:	015a      	lsls	r2, r3, #5
 800b7be:	69fb      	ldr	r3, [r7, #28]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7c6:	691b      	ldr	r3, [r3, #16]
 800b7c8:	69ba      	ldr	r2, [r7, #24]
 800b7ca:	0151      	lsls	r1, r2, #5
 800b7cc:	69fa      	ldr	r2, [r7, #28]
 800b7ce:	440a      	add	r2, r1
 800b7d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b7d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b7dc:	6113      	str	r3, [r2, #16]
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	699b      	ldr	r3, [r3, #24]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d126      	bne.n	800b834 <USB_EPStartXfer+0x374>
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	015a      	lsls	r2, r3, #5
 800b7ea:	69fb      	ldr	r3, [r7, #28]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7f2:	691a      	ldr	r2, [r3, #16]
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7fc:	69b9      	ldr	r1, [r7, #24]
 800b7fe:	0148      	lsls	r0, r1, #5
 800b800:	69f9      	ldr	r1, [r7, #28]
 800b802:	4401      	add	r1, r0
 800b804:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b808:	4313      	orrs	r3, r2
 800b80a:	610b      	str	r3, [r1, #16]
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	015a      	lsls	r2, r3, #5
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	4413      	add	r3, r2
 800b814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b818:	691b      	ldr	r3, [r3, #16]
 800b81a:	69ba      	ldr	r2, [r7, #24]
 800b81c:	0151      	lsls	r1, r2, #5
 800b81e:	69fa      	ldr	r2, [r7, #28]
 800b820:	440a      	add	r2, r1
 800b822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b826:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b82a:	6113      	str	r3, [r2, #16]
 800b82c:	e03a      	b.n	800b8a4 <USB_EPStartXfer+0x3e4>
 800b82e:	bf00      	nop
 800b830:	1ff80000 	.word	0x1ff80000
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	699a      	ldr	r2, [r3, #24]
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	4413      	add	r3, r2
 800b83e:	1e5a      	subs	r2, r3, #1
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	fbb2 f3f3 	udiv	r3, r2, r3
 800b848:	82fb      	strh	r3, [r7, #22]
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	8afa      	ldrh	r2, [r7, #22]
 800b850:	fb03 f202 	mul.w	r2, r3, r2
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	61da      	str	r2, [r3, #28]
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	015a      	lsls	r2, r3, #5
 800b85c:	69fb      	ldr	r3, [r7, #28]
 800b85e:	4413      	add	r3, r2
 800b860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b864:	691a      	ldr	r2, [r3, #16]
 800b866:	8afb      	ldrh	r3, [r7, #22]
 800b868:	04d9      	lsls	r1, r3, #19
 800b86a:	4b38      	ldr	r3, [pc, #224]	; (800b94c <USB_EPStartXfer+0x48c>)
 800b86c:	400b      	ands	r3, r1
 800b86e:	69b9      	ldr	r1, [r7, #24]
 800b870:	0148      	lsls	r0, r1, #5
 800b872:	69f9      	ldr	r1, [r7, #28]
 800b874:	4401      	add	r1, r0
 800b876:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b87a:	4313      	orrs	r3, r2
 800b87c:	610b      	str	r3, [r1, #16]
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	015a      	lsls	r2, r3, #5
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	4413      	add	r3, r2
 800b886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b88a:	691a      	ldr	r2, [r3, #16]
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	69db      	ldr	r3, [r3, #28]
 800b890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b894:	69b9      	ldr	r1, [r7, #24]
 800b896:	0148      	lsls	r0, r1, #5
 800b898:	69f9      	ldr	r1, [r7, #28]
 800b89a:	4401      	add	r1, r0
 800b89c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	610b      	str	r3, [r1, #16]
 800b8a4:	79fb      	ldrb	r3, [r7, #7]
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d10d      	bne.n	800b8c6 <USB_EPStartXfer+0x406>
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	691b      	ldr	r3, [r3, #16]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d009      	beq.n	800b8c6 <USB_EPStartXfer+0x406>
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	6919      	ldr	r1, [r3, #16]
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	015a      	lsls	r2, r3, #5
 800b8ba:	69fb      	ldr	r3, [r7, #28]
 800b8bc:	4413      	add	r3, r2
 800b8be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8c2:	460a      	mov	r2, r1
 800b8c4:	615a      	str	r2, [r3, #20]
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	791b      	ldrb	r3, [r3, #4]
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d128      	bne.n	800b920 <USB_EPStartXfer+0x460>
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d110      	bne.n	800b900 <USB_EPStartXfer+0x440>
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	015a      	lsls	r2, r3, #5
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	69ba      	ldr	r2, [r7, #24]
 800b8ee:	0151      	lsls	r1, r2, #5
 800b8f0:	69fa      	ldr	r2, [r7, #28]
 800b8f2:	440a      	add	r2, r1
 800b8f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b8fc:	6013      	str	r3, [r2, #0]
 800b8fe:	e00f      	b.n	800b920 <USB_EPStartXfer+0x460>
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	015a      	lsls	r2, r3, #5
 800b904:	69fb      	ldr	r3, [r7, #28]
 800b906:	4413      	add	r3, r2
 800b908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	69ba      	ldr	r2, [r7, #24]
 800b910:	0151      	lsls	r1, r2, #5
 800b912:	69fa      	ldr	r2, [r7, #28]
 800b914:	440a      	add	r2, r1
 800b916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b91a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b91e:	6013      	str	r3, [r2, #0]
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	015a      	lsls	r2, r3, #5
 800b924:	69fb      	ldr	r3, [r7, #28]
 800b926:	4413      	add	r3, r2
 800b928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	69ba      	ldr	r2, [r7, #24]
 800b930:	0151      	lsls	r1, r2, #5
 800b932:	69fa      	ldr	r2, [r7, #28]
 800b934:	440a      	add	r2, r1
 800b936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b93a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b93e:	6013      	str	r3, [r2, #0]
 800b940:	2300      	movs	r3, #0
 800b942:	4618      	mov	r0, r3
 800b944:	3720      	adds	r7, #32
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	1ff80000 	.word	0x1ff80000

0800b950 <USB_EP0StartXfer>:
 800b950:	b480      	push	{r7}
 800b952:	b087      	sub	sp, #28
 800b954:	af00      	add	r7, sp, #0
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	60b9      	str	r1, [r7, #8]
 800b95a:	4613      	mov	r3, r2
 800b95c:	71fb      	strb	r3, [r7, #7]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	617b      	str	r3, [r7, #20]
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	613b      	str	r3, [r7, #16]
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	785b      	ldrb	r3, [r3, #1]
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	f040 80ce 	bne.w	800bb0e <USB_EP0StartXfer+0x1be>
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	699b      	ldr	r3, [r3, #24]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d132      	bne.n	800b9e0 <USB_EP0StartXfer+0x90>
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	015a      	lsls	r2, r3, #5
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	4413      	add	r3, r2
 800b982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b986:	691b      	ldr	r3, [r3, #16]
 800b988:	693a      	ldr	r2, [r7, #16]
 800b98a:	0151      	lsls	r1, r2, #5
 800b98c:	697a      	ldr	r2, [r7, #20]
 800b98e:	440a      	add	r2, r1
 800b990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b994:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b998:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b99c:	6113      	str	r3, [r2, #16]
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	015a      	lsls	r2, r3, #5
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	4413      	add	r3, r2
 800b9a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9aa:	691b      	ldr	r3, [r3, #16]
 800b9ac:	693a      	ldr	r2, [r7, #16]
 800b9ae:	0151      	lsls	r1, r2, #5
 800b9b0:	697a      	ldr	r2, [r7, #20]
 800b9b2:	440a      	add	r2, r1
 800b9b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b9bc:	6113      	str	r3, [r2, #16]
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	015a      	lsls	r2, r3, #5
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	4413      	add	r3, r2
 800b9c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9ca:	691b      	ldr	r3, [r3, #16]
 800b9cc:	693a      	ldr	r2, [r7, #16]
 800b9ce:	0151      	lsls	r1, r2, #5
 800b9d0:	697a      	ldr	r2, [r7, #20]
 800b9d2:	440a      	add	r2, r1
 800b9d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9d8:	0cdb      	lsrs	r3, r3, #19
 800b9da:	04db      	lsls	r3, r3, #19
 800b9dc:	6113      	str	r3, [r2, #16]
 800b9de:	e04e      	b.n	800ba7e <USB_EP0StartXfer+0x12e>
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	015a      	lsls	r2, r3, #5
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	693a      	ldr	r2, [r7, #16]
 800b9f0:	0151      	lsls	r1, r2, #5
 800b9f2:	697a      	ldr	r2, [r7, #20]
 800b9f4:	440a      	add	r2, r1
 800b9f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9fa:	0cdb      	lsrs	r3, r3, #19
 800b9fc:	04db      	lsls	r3, r3, #19
 800b9fe:	6113      	str	r3, [r2, #16]
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	015a      	lsls	r2, r3, #5
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	4413      	add	r3, r2
 800ba08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba0c:	691b      	ldr	r3, [r3, #16]
 800ba0e:	693a      	ldr	r2, [r7, #16]
 800ba10:	0151      	lsls	r1, r2, #5
 800ba12:	697a      	ldr	r2, [r7, #20]
 800ba14:	440a      	add	r2, r1
 800ba16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ba1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ba22:	6113      	str	r3, [r2, #16]
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	699a      	ldr	r2, [r3, #24]
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	68db      	ldr	r3, [r3, #12]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d903      	bls.n	800ba38 <USB_EP0StartXfer+0xe8>
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	68da      	ldr	r2, [r3, #12]
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	619a      	str	r2, [r3, #24]
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	015a      	lsls	r2, r3, #5
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	4413      	add	r3, r2
 800ba40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba44:	691b      	ldr	r3, [r3, #16]
 800ba46:	693a      	ldr	r2, [r7, #16]
 800ba48:	0151      	lsls	r1, r2, #5
 800ba4a:	697a      	ldr	r2, [r7, #20]
 800ba4c:	440a      	add	r2, r1
 800ba4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba56:	6113      	str	r3, [r2, #16]
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	015a      	lsls	r2, r3, #5
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	4413      	add	r3, r2
 800ba60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba64:	691a      	ldr	r2, [r3, #16]
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	699b      	ldr	r3, [r3, #24]
 800ba6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba6e:	6939      	ldr	r1, [r7, #16]
 800ba70:	0148      	lsls	r0, r1, #5
 800ba72:	6979      	ldr	r1, [r7, #20]
 800ba74:	4401      	add	r1, r0
 800ba76:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	610b      	str	r3, [r1, #16]
 800ba7e:	79fb      	ldrb	r3, [r7, #7]
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d11e      	bne.n	800bac2 <USB_EP0StartXfer+0x172>
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	695b      	ldr	r3, [r3, #20]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d009      	beq.n	800baa0 <USB_EP0StartXfer+0x150>
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	015a      	lsls	r2, r3, #5
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	4413      	add	r3, r2
 800ba94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba98:	461a      	mov	r2, r3
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	695b      	ldr	r3, [r3, #20]
 800ba9e:	6153      	str	r3, [r2, #20]
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	015a      	lsls	r2, r3, #5
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	4413      	add	r3, r2
 800baa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	693a      	ldr	r2, [r7, #16]
 800bab0:	0151      	lsls	r1, r2, #5
 800bab2:	697a      	ldr	r2, [r7, #20]
 800bab4:	440a      	add	r2, r1
 800bab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800baba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800babe:	6013      	str	r3, [r2, #0]
 800bac0:	e097      	b.n	800bbf2 <USB_EP0StartXfer+0x2a2>
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	015a      	lsls	r2, r3, #5
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	4413      	add	r3, r2
 800baca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	693a      	ldr	r2, [r7, #16]
 800bad2:	0151      	lsls	r1, r2, #5
 800bad4:	697a      	ldr	r2, [r7, #20]
 800bad6:	440a      	add	r2, r1
 800bad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800badc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bae0:	6013      	str	r3, [r2, #0]
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	699b      	ldr	r3, [r3, #24]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	f000 8083 	beq.w	800bbf2 <USB_EP0StartXfer+0x2a2>
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	f003 030f 	and.w	r3, r3, #15
 800bafc:	2101      	movs	r1, #1
 800bafe:	fa01 f303 	lsl.w	r3, r1, r3
 800bb02:	6979      	ldr	r1, [r7, #20]
 800bb04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	634b      	str	r3, [r1, #52]	; 0x34
 800bb0c:	e071      	b.n	800bbf2 <USB_EP0StartXfer+0x2a2>
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	015a      	lsls	r2, r3, #5
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	4413      	add	r3, r2
 800bb16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb1a:	691b      	ldr	r3, [r3, #16]
 800bb1c:	693a      	ldr	r2, [r7, #16]
 800bb1e:	0151      	lsls	r1, r2, #5
 800bb20:	697a      	ldr	r2, [r7, #20]
 800bb22:	440a      	add	r2, r1
 800bb24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb28:	0cdb      	lsrs	r3, r3, #19
 800bb2a:	04db      	lsls	r3, r3, #19
 800bb2c:	6113      	str	r3, [r2, #16]
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	015a      	lsls	r2, r3, #5
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	4413      	add	r3, r2
 800bb36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb3a:	691b      	ldr	r3, [r3, #16]
 800bb3c:	693a      	ldr	r2, [r7, #16]
 800bb3e:	0151      	lsls	r1, r2, #5
 800bb40:	697a      	ldr	r2, [r7, #20]
 800bb42:	440a      	add	r2, r1
 800bb44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bb4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bb50:	6113      	str	r3, [r2, #16]
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	699b      	ldr	r3, [r3, #24]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d003      	beq.n	800bb62 <USB_EP0StartXfer+0x212>
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	68da      	ldr	r2, [r3, #12]
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	619a      	str	r2, [r3, #24]
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	68da      	ldr	r2, [r3, #12]
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	61da      	str	r2, [r3, #28]
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	015a      	lsls	r2, r3, #5
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	4413      	add	r3, r2
 800bb72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb76:	691b      	ldr	r3, [r3, #16]
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	0151      	lsls	r1, r2, #5
 800bb7c:	697a      	ldr	r2, [r7, #20]
 800bb7e:	440a      	add	r2, r1
 800bb80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb88:	6113      	str	r3, [r2, #16]
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	015a      	lsls	r2, r3, #5
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	4413      	add	r3, r2
 800bb92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb96:	691a      	ldr	r2, [r3, #16]
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	69db      	ldr	r3, [r3, #28]
 800bb9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bba0:	6939      	ldr	r1, [r7, #16]
 800bba2:	0148      	lsls	r0, r1, #5
 800bba4:	6979      	ldr	r1, [r7, #20]
 800bba6:	4401      	add	r1, r0
 800bba8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bbac:	4313      	orrs	r3, r2
 800bbae:	610b      	str	r3, [r1, #16]
 800bbb0:	79fb      	ldrb	r3, [r7, #7]
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	d10d      	bne.n	800bbd2 <USB_EP0StartXfer+0x282>
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	691b      	ldr	r3, [r3, #16]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d009      	beq.n	800bbd2 <USB_EP0StartXfer+0x282>
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	6919      	ldr	r1, [r3, #16]
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	015a      	lsls	r2, r3, #5
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	4413      	add	r3, r2
 800bbca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbce:	460a      	mov	r2, r1
 800bbd0:	615a      	str	r2, [r3, #20]
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	015a      	lsls	r2, r3, #5
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	4413      	add	r3, r2
 800bbda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	693a      	ldr	r2, [r7, #16]
 800bbe2:	0151      	lsls	r1, r2, #5
 800bbe4:	697a      	ldr	r2, [r7, #20]
 800bbe6:	440a      	add	r2, r1
 800bbe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bbf0:	6013      	str	r3, [r2, #0]
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	371c      	adds	r7, #28
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <USB_EPStopXfer>:
 800bc00:	b480      	push	{r7}
 800bc02:	b087      	sub	sp, #28
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	6039      	str	r1, [r7, #0]
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	60fb      	str	r3, [r7, #12]
 800bc0e:	2300      	movs	r3, #0
 800bc10:	75fb      	strb	r3, [r7, #23]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	613b      	str	r3, [r7, #16]
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	785b      	ldrb	r3, [r3, #1]
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d14a      	bne.n	800bcb4 <USB_EPStopXfer+0xb4>
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	015a      	lsls	r2, r3, #5
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	4413      	add	r3, r2
 800bc28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc36:	f040 8086 	bne.w	800bd46 <USB_EPStopXfer+0x146>
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	015a      	lsls	r2, r3, #5
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	4413      	add	r3, r2
 800bc44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	683a      	ldr	r2, [r7, #0]
 800bc4c:	7812      	ldrb	r2, [r2, #0]
 800bc4e:	0151      	lsls	r1, r2, #5
 800bc50:	693a      	ldr	r2, [r7, #16]
 800bc52:	440a      	add	r2, r1
 800bc54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bc5c:	6013      	str	r3, [r2, #0]
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	015a      	lsls	r2, r3, #5
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	4413      	add	r3, r2
 800bc68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	683a      	ldr	r2, [r7, #0]
 800bc70:	7812      	ldrb	r2, [r2, #0]
 800bc72:	0151      	lsls	r1, r2, #5
 800bc74:	693a      	ldr	r2, [r7, #16]
 800bc76:	440a      	add	r2, r1
 800bc78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc80:	6013      	str	r3, [r2, #0]
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	3301      	adds	r3, #1
 800bc86:	60fb      	str	r3, [r7, #12]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f242 7210 	movw	r2, #10000	; 0x2710
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d902      	bls.n	800bc98 <USB_EPStopXfer+0x98>
 800bc92:	2301      	movs	r3, #1
 800bc94:	75fb      	strb	r3, [r7, #23]
 800bc96:	e056      	b.n	800bd46 <USB_EPStopXfer+0x146>
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	015a      	lsls	r2, r3, #5
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	4413      	add	r3, r2
 800bca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcb0:	d0e7      	beq.n	800bc82 <USB_EPStopXfer+0x82>
 800bcb2:	e048      	b.n	800bd46 <USB_EPStopXfer+0x146>
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	015a      	lsls	r2, r3, #5
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bccc:	d13b      	bne.n	800bd46 <USB_EPStopXfer+0x146>
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	015a      	lsls	r2, r3, #5
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	683a      	ldr	r2, [r7, #0]
 800bce0:	7812      	ldrb	r2, [r2, #0]
 800bce2:	0151      	lsls	r1, r2, #5
 800bce4:	693a      	ldr	r2, [r7, #16]
 800bce6:	440a      	add	r2, r1
 800bce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bcf0:	6013      	str	r3, [r2, #0]
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	015a      	lsls	r2, r3, #5
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	4413      	add	r3, r2
 800bcfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	7812      	ldrb	r2, [r2, #0]
 800bd06:	0151      	lsls	r1, r2, #5
 800bd08:	693a      	ldr	r2, [r7, #16]
 800bd0a:	440a      	add	r2, r1
 800bd0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd14:	6013      	str	r3, [r2, #0]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	60fb      	str	r3, [r7, #12]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f242 7210 	movw	r2, #10000	; 0x2710
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d902      	bls.n	800bd2c <USB_EPStopXfer+0x12c>
 800bd26:	2301      	movs	r3, #1
 800bd28:	75fb      	strb	r3, [r7, #23]
 800bd2a:	e00c      	b.n	800bd46 <USB_EPStopXfer+0x146>
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	015a      	lsls	r2, r3, #5
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	4413      	add	r3, r2
 800bd36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd44:	d0e7      	beq.n	800bd16 <USB_EPStopXfer+0x116>
 800bd46:	7dfb      	ldrb	r3, [r7, #23]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	371c      	adds	r7, #28
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <USB_WritePacket>:
 800bd54:	b480      	push	{r7}
 800bd56:	b089      	sub	sp, #36	; 0x24
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	4611      	mov	r1, r2
 800bd60:	461a      	mov	r2, r3
 800bd62:	460b      	mov	r3, r1
 800bd64:	71fb      	strb	r3, [r7, #7]
 800bd66:	4613      	mov	r3, r2
 800bd68:	80bb      	strh	r3, [r7, #4]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	617b      	str	r3, [r7, #20]
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	61fb      	str	r3, [r7, #28]
 800bd72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d123      	bne.n	800bdc2 <USB_WritePacket+0x6e>
 800bd7a:	88bb      	ldrh	r3, [r7, #4]
 800bd7c:	3303      	adds	r3, #3
 800bd7e:	089b      	lsrs	r3, r3, #2
 800bd80:	613b      	str	r3, [r7, #16]
 800bd82:	2300      	movs	r3, #0
 800bd84:	61bb      	str	r3, [r7, #24]
 800bd86:	e018      	b.n	800bdba <USB_WritePacket+0x66>
 800bd88:	79fb      	ldrb	r3, [r7, #7]
 800bd8a:	031a      	lsls	r2, r3, #12
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	4413      	add	r3, r2
 800bd90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd94:	461a      	mov	r2, r3
 800bd96:	69fb      	ldr	r3, [r7, #28]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	6013      	str	r3, [r2, #0]
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	61fb      	str	r3, [r7, #28]
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	3301      	adds	r3, #1
 800bda6:	61fb      	str	r3, [r7, #28]
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	61fb      	str	r3, [r7, #28]
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	61fb      	str	r3, [r7, #28]
 800bdb4:	69bb      	ldr	r3, [r7, #24]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	61bb      	str	r3, [r7, #24]
 800bdba:	69ba      	ldr	r2, [r7, #24]
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d3e2      	bcc.n	800bd88 <USB_WritePacket+0x34>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3724      	adds	r7, #36	; 0x24
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <USB_ReadPacket>:
 800bdd0:	b480      	push	{r7}
 800bdd2:	b08b      	sub	sp, #44	; 0x2c
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	4613      	mov	r3, r2
 800bddc:	80fb      	strh	r3, [r7, #6]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	61bb      	str	r3, [r7, #24]
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	627b      	str	r3, [r7, #36]	; 0x24
 800bde6:	88fb      	ldrh	r3, [r7, #6]
 800bde8:	089b      	lsrs	r3, r3, #2
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	617b      	str	r3, [r7, #20]
 800bdee:	88fb      	ldrh	r3, [r7, #6]
 800bdf0:	f003 0303 	and.w	r3, r3, #3
 800bdf4:	83fb      	strh	r3, [r7, #30]
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	623b      	str	r3, [r7, #32]
 800bdfa:	e014      	b.n	800be26 <USB_ReadPacket+0x56>
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be06:	601a      	str	r2, [r3, #0]
 800be08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0a:	3301      	adds	r3, #1
 800be0c:	627b      	str	r3, [r7, #36]	; 0x24
 800be0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be10:	3301      	adds	r3, #1
 800be12:	627b      	str	r3, [r7, #36]	; 0x24
 800be14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be16:	3301      	adds	r3, #1
 800be18:	627b      	str	r3, [r7, #36]	; 0x24
 800be1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1c:	3301      	adds	r3, #1
 800be1e:	627b      	str	r3, [r7, #36]	; 0x24
 800be20:	6a3b      	ldr	r3, [r7, #32]
 800be22:	3301      	adds	r3, #1
 800be24:	623b      	str	r3, [r7, #32]
 800be26:	6a3a      	ldr	r2, [r7, #32]
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d3e6      	bcc.n	800bdfc <USB_ReadPacket+0x2c>
 800be2e:	8bfb      	ldrh	r3, [r7, #30]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d01e      	beq.n	800be72 <USB_ReadPacket+0xa2>
 800be34:	2300      	movs	r3, #0
 800be36:	623b      	str	r3, [r7, #32]
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be3e:	461a      	mov	r2, r3
 800be40:	f107 0310 	add.w	r3, r7, #16
 800be44:	6812      	ldr	r2, [r2, #0]
 800be46:	601a      	str	r2, [r3, #0]
 800be48:	693a      	ldr	r2, [r7, #16]
 800be4a:	6a3b      	ldr	r3, [r7, #32]
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	00db      	lsls	r3, r3, #3
 800be50:	fa22 f303 	lsr.w	r3, r2, r3
 800be54:	b2da      	uxtb	r2, r3
 800be56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be58:	701a      	strb	r2, [r3, #0]
 800be5a:	6a3b      	ldr	r3, [r7, #32]
 800be5c:	3301      	adds	r3, #1
 800be5e:	623b      	str	r3, [r7, #32]
 800be60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be62:	3301      	adds	r3, #1
 800be64:	627b      	str	r3, [r7, #36]	; 0x24
 800be66:	8bfb      	ldrh	r3, [r7, #30]
 800be68:	3b01      	subs	r3, #1
 800be6a:	83fb      	strh	r3, [r7, #30]
 800be6c:	8bfb      	ldrh	r3, [r7, #30]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d1ea      	bne.n	800be48 <USB_ReadPacket+0x78>
 800be72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be74:	4618      	mov	r0, r3
 800be76:	372c      	adds	r7, #44	; 0x2c
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <USB_EPSetStall>:
 800be80:	b480      	push	{r7}
 800be82:	b085      	sub	sp, #20
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	60fb      	str	r3, [r7, #12]
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	60bb      	str	r3, [r7, #8]
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	785b      	ldrb	r3, [r3, #1]
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d12c      	bne.n	800bef6 <USB_EPSetStall+0x76>
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	015a      	lsls	r2, r3, #5
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	4413      	add	r3, r2
 800bea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	db12      	blt.n	800bed4 <USB_EPSetStall+0x54>
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00f      	beq.n	800bed4 <USB_EPSetStall+0x54>
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	015a      	lsls	r2, r3, #5
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	4413      	add	r3, r2
 800bebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	68ba      	ldr	r2, [r7, #8]
 800bec4:	0151      	lsls	r1, r2, #5
 800bec6:	68fa      	ldr	r2, [r7, #12]
 800bec8:	440a      	add	r2, r1
 800beca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bece:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bed2:	6013      	str	r3, [r2, #0]
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	015a      	lsls	r2, r3, #5
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	4413      	add	r3, r2
 800bedc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	68ba      	ldr	r2, [r7, #8]
 800bee4:	0151      	lsls	r1, r2, #5
 800bee6:	68fa      	ldr	r2, [r7, #12]
 800bee8:	440a      	add	r2, r1
 800beea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800beee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bef2:	6013      	str	r3, [r2, #0]
 800bef4:	e02b      	b.n	800bf4e <USB_EPSetStall+0xce>
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	015a      	lsls	r2, r3, #5
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	4413      	add	r3, r2
 800befe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	db12      	blt.n	800bf2e <USB_EPSetStall+0xae>
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00f      	beq.n	800bf2e <USB_EPSetStall+0xae>
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	015a      	lsls	r2, r3, #5
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	4413      	add	r3, r2
 800bf16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	0151      	lsls	r1, r2, #5
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	440a      	add	r2, r1
 800bf24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bf2c:	6013      	str	r3, [r2, #0]
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	015a      	lsls	r2, r3, #5
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	4413      	add	r3, r2
 800bf36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	68ba      	ldr	r2, [r7, #8]
 800bf3e:	0151      	lsls	r1, r2, #5
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	440a      	add	r2, r1
 800bf44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bf4c:	6013      	str	r3, [r2, #0]
 800bf4e:	2300      	movs	r3, #0
 800bf50:	4618      	mov	r0, r3
 800bf52:	3714      	adds	r7, #20
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <USB_EPClearStall>:
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	60fb      	str	r3, [r7, #12]
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	60bb      	str	r3, [r7, #8]
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	785b      	ldrb	r3, [r3, #1]
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d128      	bne.n	800bfca <USB_EPClearStall+0x6e>
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	015a      	lsls	r2, r3, #5
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	4413      	add	r3, r2
 800bf80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	68ba      	ldr	r2, [r7, #8]
 800bf88:	0151      	lsls	r1, r2, #5
 800bf8a:	68fa      	ldr	r2, [r7, #12]
 800bf8c:	440a      	add	r2, r1
 800bf8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bf96:	6013      	str	r3, [r2, #0]
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	791b      	ldrb	r3, [r3, #4]
 800bf9c:	2b03      	cmp	r3, #3
 800bf9e:	d003      	beq.n	800bfa8 <USB_EPClearStall+0x4c>
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	791b      	ldrb	r3, [r3, #4]
 800bfa4:	2b02      	cmp	r3, #2
 800bfa6:	d138      	bne.n	800c01a <USB_EPClearStall+0xbe>
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	015a      	lsls	r2, r3, #5
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	4413      	add	r3, r2
 800bfb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	68ba      	ldr	r2, [r7, #8]
 800bfb8:	0151      	lsls	r1, r2, #5
 800bfba:	68fa      	ldr	r2, [r7, #12]
 800bfbc:	440a      	add	r2, r1
 800bfbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bfc6:	6013      	str	r3, [r2, #0]
 800bfc8:	e027      	b.n	800c01a <USB_EPClearStall+0xbe>
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	015a      	lsls	r2, r3, #5
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	0151      	lsls	r1, r2, #5
 800bfdc:	68fa      	ldr	r2, [r7, #12]
 800bfde:	440a      	add	r2, r1
 800bfe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfe4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bfe8:	6013      	str	r3, [r2, #0]
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	791b      	ldrb	r3, [r3, #4]
 800bfee:	2b03      	cmp	r3, #3
 800bff0:	d003      	beq.n	800bffa <USB_EPClearStall+0x9e>
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	791b      	ldrb	r3, [r3, #4]
 800bff6:	2b02      	cmp	r3, #2
 800bff8:	d10f      	bne.n	800c01a <USB_EPClearStall+0xbe>
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	015a      	lsls	r2, r3, #5
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	4413      	add	r3, r2
 800c002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	68ba      	ldr	r2, [r7, #8]
 800c00a:	0151      	lsls	r1, r2, #5
 800c00c:	68fa      	ldr	r2, [r7, #12]
 800c00e:	440a      	add	r2, r1
 800c010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c018:	6013      	str	r3, [r2, #0]
 800c01a:	2300      	movs	r3, #0
 800c01c:	4618      	mov	r0, r3
 800c01e:	3714      	adds	r7, #20
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr

0800c028 <USB_SetDevAddress>:
 800c028:	b480      	push	{r7}
 800c02a:	b085      	sub	sp, #20
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	460b      	mov	r3, r1
 800c032:	70fb      	strb	r3, [r7, #3]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	60fb      	str	r3, [r7, #12]
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	68fa      	ldr	r2, [r7, #12]
 800c042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c046:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c04a:	6013      	str	r3, [r2, #0]
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	78fb      	ldrb	r3, [r7, #3]
 800c056:	011b      	lsls	r3, r3, #4
 800c058:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c05c:	68f9      	ldr	r1, [r7, #12]
 800c05e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c062:	4313      	orrs	r3, r2
 800c064:	600b      	str	r3, [r1, #0]
 800c066:	2300      	movs	r3, #0
 800c068:	4618      	mov	r0, r3
 800c06a:	3714      	adds	r7, #20
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <USB_DevConnect>:
 800c074:	b480      	push	{r7}
 800c076:	b085      	sub	sp, #20
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	60fb      	str	r3, [r7, #12]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c08e:	f023 0303 	bic.w	r3, r3, #3
 800c092:	6013      	str	r3, [r2, #0]
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	68fa      	ldr	r2, [r7, #12]
 800c09e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c0a2:	f023 0302 	bic.w	r3, r3, #2
 800c0a6:	6053      	str	r3, [r2, #4]
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3714      	adds	r7, #20
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr

0800c0b6 <USB_DevDisconnect>:
 800c0b6:	b480      	push	{r7}
 800c0b8:	b085      	sub	sp, #20
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	60fb      	str	r3, [r7, #12]
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	68fa      	ldr	r2, [r7, #12]
 800c0cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c0d0:	f023 0303 	bic.w	r3, r3, #3
 800c0d4:	6013      	str	r3, [r2, #0]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	68fa      	ldr	r2, [r7, #12]
 800c0e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c0e4:	f043 0302 	orr.w	r3, r3, #2
 800c0e8:	6053      	str	r3, [r2, #4]
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3714      	adds	r7, #20
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <USB_ReadInterrupts>:
 800c0f8:	b480      	push	{r7}
 800c0fa:	b085      	sub	sp, #20
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	695b      	ldr	r3, [r3, #20]
 800c104:	60fb      	str	r3, [r7, #12]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	699b      	ldr	r3, [r3, #24]
 800c10a:	68fa      	ldr	r2, [r7, #12]
 800c10c:	4013      	ands	r3, r2
 800c10e:	60fb      	str	r3, [r7, #12]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	4618      	mov	r0, r3
 800c114:	3714      	adds	r7, #20
 800c116:	46bd      	mov	sp, r7
 800c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11c:	4770      	bx	lr

0800c11e <USB_ReadDevAllOutEpInterrupt>:
 800c11e:	b480      	push	{r7}
 800c120:	b085      	sub	sp, #20
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	60fb      	str	r3, [r7, #12]
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c130:	699b      	ldr	r3, [r3, #24]
 800c132:	60bb      	str	r3, [r7, #8]
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c13a:	69db      	ldr	r3, [r3, #28]
 800c13c:	68ba      	ldr	r2, [r7, #8]
 800c13e:	4013      	ands	r3, r2
 800c140:	60bb      	str	r3, [r7, #8]
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	0c1b      	lsrs	r3, r3, #16
 800c146:	4618      	mov	r0, r3
 800c148:	3714      	adds	r7, #20
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr

0800c152 <USB_ReadDevAllInEpInterrupt>:
 800c152:	b480      	push	{r7}
 800c154:	b085      	sub	sp, #20
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	60fb      	str	r3, [r7, #12]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c164:	699b      	ldr	r3, [r3, #24]
 800c166:	60bb      	str	r3, [r7, #8]
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c16e:	69db      	ldr	r3, [r3, #28]
 800c170:	68ba      	ldr	r2, [r7, #8]
 800c172:	4013      	ands	r3, r2
 800c174:	60bb      	str	r3, [r7, #8]
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	b29b      	uxth	r3, r3
 800c17a:	4618      	mov	r0, r3
 800c17c:	3714      	adds	r7, #20
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr

0800c186 <USB_ReadDevOutEPInterrupt>:
 800c186:	b480      	push	{r7}
 800c188:	b085      	sub	sp, #20
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
 800c18e:	460b      	mov	r3, r1
 800c190:	70fb      	strb	r3, [r7, #3]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	60fb      	str	r3, [r7, #12]
 800c196:	78fb      	ldrb	r3, [r7, #3]
 800c198:	015a      	lsls	r2, r3, #5
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	4413      	add	r3, r2
 800c19e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	60bb      	str	r3, [r7, #8]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1ac:	695b      	ldr	r3, [r3, #20]
 800c1ae:	68ba      	ldr	r2, [r7, #8]
 800c1b0:	4013      	ands	r3, r2
 800c1b2:	60bb      	str	r3, [r7, #8]
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3714      	adds	r7, #20
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr

0800c1c2 <USB_ReadDevInEPInterrupt>:
 800c1c2:	b480      	push	{r7}
 800c1c4:	b087      	sub	sp, #28
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	70fb      	strb	r3, [r7, #3]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	617b      	str	r3, [r7, #20]
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1d8:	691b      	ldr	r3, [r3, #16]
 800c1da:	613b      	str	r3, [r7, #16]
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1e4:	60fb      	str	r3, [r7, #12]
 800c1e6:	78fb      	ldrb	r3, [r7, #3]
 800c1e8:	f003 030f 	and.w	r3, r3, #15
 800c1ec:	68fa      	ldr	r2, [r7, #12]
 800c1ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c1f2:	01db      	lsls	r3, r3, #7
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	693a      	ldr	r2, [r7, #16]
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	613b      	str	r3, [r7, #16]
 800c1fc:	78fb      	ldrb	r3, [r7, #3]
 800c1fe:	015a      	lsls	r2, r3, #5
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	4413      	add	r3, r2
 800c204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	693a      	ldr	r2, [r7, #16]
 800c20c:	4013      	ands	r3, r2
 800c20e:	60bb      	str	r3, [r7, #8]
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	4618      	mov	r0, r3
 800c214:	371c      	adds	r7, #28
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr

0800c21e <USB_GetMode>:
 800c21e:	b480      	push	{r7}
 800c220:	b083      	sub	sp, #12
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	695b      	ldr	r3, [r3, #20]
 800c22a:	f003 0301 	and.w	r3, r3, #1
 800c22e:	4618      	mov	r0, r3
 800c230:	370c      	adds	r7, #12
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr

0800c23a <USB_ActivateSetup>:
 800c23a:	b480      	push	{r7}
 800c23c:	b085      	sub	sp, #20
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	60fb      	str	r3, [r7, #12]
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c254:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c258:	f023 0307 	bic.w	r3, r3, #7
 800c25c:	6013      	str	r3, [r2, #0]
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	68fa      	ldr	r2, [r7, #12]
 800c268:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c26c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c270:	6053      	str	r3, [r2, #4]
 800c272:	2300      	movs	r3, #0
 800c274:	4618      	mov	r0, r3
 800c276:	3714      	adds	r7, #20
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <USB_EP0_OutStart>:
 800c280:	b480      	push	{r7}
 800c282:	b087      	sub	sp, #28
 800c284:	af00      	add	r7, sp, #0
 800c286:	60f8      	str	r0, [r7, #12]
 800c288:	460b      	mov	r3, r1
 800c28a:	607a      	str	r2, [r7, #4]
 800c28c:	72fb      	strb	r3, [r7, #11]
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	617b      	str	r3, [r7, #20]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	333c      	adds	r3, #60	; 0x3c
 800c296:	3304      	adds	r3, #4
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	613b      	str	r3, [r7, #16]
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	4a26      	ldr	r2, [pc, #152]	; (800c338 <USB_EP0_OutStart+0xb8>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d90a      	bls.n	800c2ba <USB_EP0_OutStart+0x3a>
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c2b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c2b4:	d101      	bne.n	800c2ba <USB_EP0_OutStart+0x3a>
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	e037      	b.n	800c32a <USB_EP0_OutStart+0xaa>
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	6113      	str	r3, [r2, #16]
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2cc:	691b      	ldr	r3, [r3, #16]
 800c2ce:	697a      	ldr	r2, [r7, #20]
 800c2d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2d8:	6113      	str	r3, [r2, #16]
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2e0:	691b      	ldr	r3, [r3, #16]
 800c2e2:	697a      	ldr	r2, [r7, #20]
 800c2e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2e8:	f043 0318 	orr.w	r3, r3, #24
 800c2ec:	6113      	str	r3, [r2, #16]
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2f4:	691b      	ldr	r3, [r3, #16]
 800c2f6:	697a      	ldr	r2, [r7, #20]
 800c2f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2fc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c300:	6113      	str	r3, [r2, #16]
 800c302:	7afb      	ldrb	r3, [r7, #11]
 800c304:	2b01      	cmp	r3, #1
 800c306:	d10f      	bne.n	800c328 <USB_EP0_OutStart+0xa8>
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c30e:	461a      	mov	r2, r3
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6153      	str	r3, [r2, #20]
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	697a      	ldr	r2, [r7, #20]
 800c31e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c322:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c326:	6013      	str	r3, [r2, #0]
 800c328:	2300      	movs	r3, #0
 800c32a:	4618      	mov	r0, r3
 800c32c:	371c      	adds	r7, #28
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr
 800c336:	bf00      	nop
 800c338:	4f54300a 	.word	0x4f54300a

0800c33c <USB_CoreReset>:
 800c33c:	b480      	push	{r7}
 800c33e:	b085      	sub	sp, #20
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	2300      	movs	r3, #0
 800c346:	60fb      	str	r3, [r7, #12]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	3301      	adds	r3, #1
 800c34c:	60fb      	str	r3, [r7, #12]
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	4a13      	ldr	r2, [pc, #76]	; (800c3a0 <USB_CoreReset+0x64>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d901      	bls.n	800c35a <USB_CoreReset+0x1e>
 800c356:	2303      	movs	r3, #3
 800c358:	e01b      	b.n	800c392 <USB_CoreReset+0x56>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	691b      	ldr	r3, [r3, #16]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	daf2      	bge.n	800c348 <USB_CoreReset+0xc>
 800c362:	2300      	movs	r3, #0
 800c364:	60fb      	str	r3, [r7, #12]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	691b      	ldr	r3, [r3, #16]
 800c36a:	f043 0201 	orr.w	r2, r3, #1
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	611a      	str	r2, [r3, #16]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	3301      	adds	r3, #1
 800c376:	60fb      	str	r3, [r7, #12]
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	4a09      	ldr	r2, [pc, #36]	; (800c3a0 <USB_CoreReset+0x64>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d901      	bls.n	800c384 <USB_CoreReset+0x48>
 800c380:	2303      	movs	r3, #3
 800c382:	e006      	b.n	800c392 <USB_CoreReset+0x56>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	691b      	ldr	r3, [r3, #16]
 800c388:	f003 0301 	and.w	r3, r3, #1
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d0f0      	beq.n	800c372 <USB_CoreReset+0x36>
 800c390:	2300      	movs	r3, #0
 800c392:	4618      	mov	r0, r3
 800c394:	3714      	adds	r7, #20
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr
 800c39e:	bf00      	nop
 800c3a0:	00030d40 	.word	0x00030d40

0800c3a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c3b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c3b4:	f003 ffe6 	bl	8010384 <USBD_static_malloc>
 800c3b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d109      	bne.n	800c3d4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	32b0      	adds	r2, #176	; 0xb0
 800c3ca:	2100      	movs	r1, #0
 800c3cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c3d0:	2302      	movs	r3, #2
 800c3d2:	e0d4      	b.n	800c57e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c3d4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c3d8:	2100      	movs	r1, #0
 800c3da:	68f8      	ldr	r0, [r7, #12]
 800c3dc:	f004 f961 	bl	80106a2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	32b0      	adds	r2, #176	; 0xb0
 800c3ea:	68f9      	ldr	r1, [r7, #12]
 800c3ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	32b0      	adds	r2, #176	; 0xb0
 800c3fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	7c1b      	ldrb	r3, [r3, #16]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d138      	bne.n	800c47e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c40c:	4b5e      	ldr	r3, [pc, #376]	; (800c588 <USBD_CDC_Init+0x1e4>)
 800c40e:	7819      	ldrb	r1, [r3, #0]
 800c410:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c414:	2202      	movs	r2, #2
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f003 fe91 	bl	801013e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c41c:	4b5a      	ldr	r3, [pc, #360]	; (800c588 <USBD_CDC_Init+0x1e4>)
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	f003 020f 	and.w	r2, r3, #15
 800c424:	6879      	ldr	r1, [r7, #4]
 800c426:	4613      	mov	r3, r2
 800c428:	009b      	lsls	r3, r3, #2
 800c42a:	4413      	add	r3, r2
 800c42c:	009b      	lsls	r3, r3, #2
 800c42e:	440b      	add	r3, r1
 800c430:	3324      	adds	r3, #36	; 0x24
 800c432:	2201      	movs	r2, #1
 800c434:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c436:	4b55      	ldr	r3, [pc, #340]	; (800c58c <USBD_CDC_Init+0x1e8>)
 800c438:	7819      	ldrb	r1, [r3, #0]
 800c43a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c43e:	2202      	movs	r2, #2
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f003 fe7c 	bl	801013e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c446:	4b51      	ldr	r3, [pc, #324]	; (800c58c <USBD_CDC_Init+0x1e8>)
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	f003 020f 	and.w	r2, r3, #15
 800c44e:	6879      	ldr	r1, [r7, #4]
 800c450:	4613      	mov	r3, r2
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	4413      	add	r3, r2
 800c456:	009b      	lsls	r3, r3, #2
 800c458:	440b      	add	r3, r1
 800c45a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c45e:	2201      	movs	r2, #1
 800c460:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c462:	4b4b      	ldr	r3, [pc, #300]	; (800c590 <USBD_CDC_Init+0x1ec>)
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	f003 020f 	and.w	r2, r3, #15
 800c46a:	6879      	ldr	r1, [r7, #4]
 800c46c:	4613      	mov	r3, r2
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	4413      	add	r3, r2
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	440b      	add	r3, r1
 800c476:	3326      	adds	r3, #38	; 0x26
 800c478:	2210      	movs	r2, #16
 800c47a:	801a      	strh	r2, [r3, #0]
 800c47c:	e035      	b.n	800c4ea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c47e:	4b42      	ldr	r3, [pc, #264]	; (800c588 <USBD_CDC_Init+0x1e4>)
 800c480:	7819      	ldrb	r1, [r3, #0]
 800c482:	2340      	movs	r3, #64	; 0x40
 800c484:	2202      	movs	r2, #2
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f003 fe59 	bl	801013e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c48c:	4b3e      	ldr	r3, [pc, #248]	; (800c588 <USBD_CDC_Init+0x1e4>)
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	f003 020f 	and.w	r2, r3, #15
 800c494:	6879      	ldr	r1, [r7, #4]
 800c496:	4613      	mov	r3, r2
 800c498:	009b      	lsls	r3, r3, #2
 800c49a:	4413      	add	r3, r2
 800c49c:	009b      	lsls	r3, r3, #2
 800c49e:	440b      	add	r3, r1
 800c4a0:	3324      	adds	r3, #36	; 0x24
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c4a6:	4b39      	ldr	r3, [pc, #228]	; (800c58c <USBD_CDC_Init+0x1e8>)
 800c4a8:	7819      	ldrb	r1, [r3, #0]
 800c4aa:	2340      	movs	r3, #64	; 0x40
 800c4ac:	2202      	movs	r2, #2
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f003 fe45 	bl	801013e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c4b4:	4b35      	ldr	r3, [pc, #212]	; (800c58c <USBD_CDC_Init+0x1e8>)
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	f003 020f 	and.w	r2, r3, #15
 800c4bc:	6879      	ldr	r1, [r7, #4]
 800c4be:	4613      	mov	r3, r2
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	4413      	add	r3, r2
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	440b      	add	r3, r1
 800c4c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c4d0:	4b2f      	ldr	r3, [pc, #188]	; (800c590 <USBD_CDC_Init+0x1ec>)
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	f003 020f 	and.w	r2, r3, #15
 800c4d8:	6879      	ldr	r1, [r7, #4]
 800c4da:	4613      	mov	r3, r2
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	4413      	add	r3, r2
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	440b      	add	r3, r1
 800c4e4:	3326      	adds	r3, #38	; 0x26
 800c4e6:	2210      	movs	r2, #16
 800c4e8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c4ea:	4b29      	ldr	r3, [pc, #164]	; (800c590 <USBD_CDC_Init+0x1ec>)
 800c4ec:	7819      	ldrb	r1, [r3, #0]
 800c4ee:	2308      	movs	r3, #8
 800c4f0:	2203      	movs	r2, #3
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f003 fe23 	bl	801013e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c4f8:	4b25      	ldr	r3, [pc, #148]	; (800c590 <USBD_CDC_Init+0x1ec>)
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	f003 020f 	and.w	r2, r3, #15
 800c500:	6879      	ldr	r1, [r7, #4]
 800c502:	4613      	mov	r3, r2
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	4413      	add	r3, r2
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	440b      	add	r3, r1
 800c50c:	3324      	adds	r3, #36	; 0x24
 800c50e:	2201      	movs	r2, #1
 800c510:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2200      	movs	r2, #0
 800c516:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	33b0      	adds	r3, #176	; 0xb0
 800c524:	009b      	lsls	r3, r3, #2
 800c526:	4413      	add	r3, r2
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2200      	movs	r2, #0
 800c532:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2200      	movs	r2, #0
 800c53a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c544:	2b00      	cmp	r3, #0
 800c546:	d101      	bne.n	800c54c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c548:	2302      	movs	r3, #2
 800c54a:	e018      	b.n	800c57e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	7c1b      	ldrb	r3, [r3, #16]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d10a      	bne.n	800c56a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c554:	4b0d      	ldr	r3, [pc, #52]	; (800c58c <USBD_CDC_Init+0x1e8>)
 800c556:	7819      	ldrb	r1, [r3, #0]
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c55e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f003 feda 	bl	801031c <USBD_LL_PrepareReceive>
 800c568:	e008      	b.n	800c57c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c56a:	4b08      	ldr	r3, [pc, #32]	; (800c58c <USBD_CDC_Init+0x1e8>)
 800c56c:	7819      	ldrb	r1, [r3, #0]
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c574:	2340      	movs	r3, #64	; 0x40
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f003 fed0 	bl	801031c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c57c:	2300      	movs	r3, #0
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
 800c586:	bf00      	nop
 800c588:	200000a7 	.word	0x200000a7
 800c58c:	200000a8 	.word	0x200000a8
 800c590:	200000a9 	.word	0x200000a9

0800c594 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	460b      	mov	r3, r1
 800c59e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c5a0:	4b3a      	ldr	r3, [pc, #232]	; (800c68c <USBD_CDC_DeInit+0xf8>)
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f003 fdef 	bl	801018a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c5ac:	4b37      	ldr	r3, [pc, #220]	; (800c68c <USBD_CDC_DeInit+0xf8>)
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	f003 020f 	and.w	r2, r3, #15
 800c5b4:	6879      	ldr	r1, [r7, #4]
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	4413      	add	r3, r2
 800c5bc:	009b      	lsls	r3, r3, #2
 800c5be:	440b      	add	r3, r1
 800c5c0:	3324      	adds	r3, #36	; 0x24
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c5c6:	4b32      	ldr	r3, [pc, #200]	; (800c690 <USBD_CDC_DeInit+0xfc>)
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f003 fddc 	bl	801018a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c5d2:	4b2f      	ldr	r3, [pc, #188]	; (800c690 <USBD_CDC_DeInit+0xfc>)
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	f003 020f 	and.w	r2, r3, #15
 800c5da:	6879      	ldr	r1, [r7, #4]
 800c5dc:	4613      	mov	r3, r2
 800c5de:	009b      	lsls	r3, r3, #2
 800c5e0:	4413      	add	r3, r2
 800c5e2:	009b      	lsls	r3, r3, #2
 800c5e4:	440b      	add	r3, r1
 800c5e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c5ee:	4b29      	ldr	r3, [pc, #164]	; (800c694 <USBD_CDC_DeInit+0x100>)
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f003 fdc8 	bl	801018a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c5fa:	4b26      	ldr	r3, [pc, #152]	; (800c694 <USBD_CDC_DeInit+0x100>)
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	f003 020f 	and.w	r2, r3, #15
 800c602:	6879      	ldr	r1, [r7, #4]
 800c604:	4613      	mov	r3, r2
 800c606:	009b      	lsls	r3, r3, #2
 800c608:	4413      	add	r3, r2
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	440b      	add	r3, r1
 800c60e:	3324      	adds	r3, #36	; 0x24
 800c610:	2200      	movs	r2, #0
 800c612:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c614:	4b1f      	ldr	r3, [pc, #124]	; (800c694 <USBD_CDC_DeInit+0x100>)
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	f003 020f 	and.w	r2, r3, #15
 800c61c:	6879      	ldr	r1, [r7, #4]
 800c61e:	4613      	mov	r3, r2
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	4413      	add	r3, r2
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	440b      	add	r3, r1
 800c628:	3326      	adds	r3, #38	; 0x26
 800c62a:	2200      	movs	r2, #0
 800c62c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	32b0      	adds	r2, #176	; 0xb0
 800c638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d01f      	beq.n	800c680 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	33b0      	adds	r3, #176	; 0xb0
 800c64a:	009b      	lsls	r3, r3, #2
 800c64c:	4413      	add	r3, r2
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	32b0      	adds	r2, #176	; 0xb0
 800c65e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c662:	4618      	mov	r0, r3
 800c664:	f003 fe9c 	bl	80103a0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	32b0      	adds	r2, #176	; 0xb0
 800c672:	2100      	movs	r1, #0
 800c674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c680:	2300      	movs	r3, #0
}
 800c682:	4618      	mov	r0, r3
 800c684:	3708      	adds	r7, #8
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	200000a7 	.word	0x200000a7
 800c690:	200000a8 	.word	0x200000a8
 800c694:	200000a9 	.word	0x200000a9

0800c698 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b086      	sub	sp, #24
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	32b0      	adds	r2, #176	; 0xb0
 800c6ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d101      	bne.n	800c6c8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c6c4:	2303      	movs	r3, #3
 800c6c6:	e0bf      	b.n	800c848 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d050      	beq.n	800c776 <USBD_CDC_Setup+0xde>
 800c6d4:	2b20      	cmp	r3, #32
 800c6d6:	f040 80af 	bne.w	800c838 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	88db      	ldrh	r3, [r3, #6]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d03a      	beq.n	800c758 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	b25b      	sxtb	r3, r3
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	da1b      	bge.n	800c724 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	33b0      	adds	r3, #176	; 0xb0
 800c6f6:	009b      	lsls	r3, r3, #2
 800c6f8:	4413      	add	r3, r2
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	683a      	ldr	r2, [r7, #0]
 800c700:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c702:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c704:	683a      	ldr	r2, [r7, #0]
 800c706:	88d2      	ldrh	r2, [r2, #6]
 800c708:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	88db      	ldrh	r3, [r3, #6]
 800c70e:	2b07      	cmp	r3, #7
 800c710:	bf28      	it	cs
 800c712:	2307      	movcs	r3, #7
 800c714:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	89fa      	ldrh	r2, [r7, #14]
 800c71a:	4619      	mov	r1, r3
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f001 fd89 	bl	800e234 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c722:	e090      	b.n	800c846 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	785a      	ldrb	r2, [r3, #1]
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	88db      	ldrh	r3, [r3, #6]
 800c732:	2b3f      	cmp	r3, #63	; 0x3f
 800c734:	d803      	bhi.n	800c73e <USBD_CDC_Setup+0xa6>
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	88db      	ldrh	r3, [r3, #6]
 800c73a:	b2da      	uxtb	r2, r3
 800c73c:	e000      	b.n	800c740 <USBD_CDC_Setup+0xa8>
 800c73e:	2240      	movs	r2, #64	; 0x40
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c746:	6939      	ldr	r1, [r7, #16]
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c74e:	461a      	mov	r2, r3
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f001 fd9b 	bl	800e28c <USBD_CtlPrepareRx>
      break;
 800c756:	e076      	b.n	800c846 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	33b0      	adds	r3, #176	; 0xb0
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	4413      	add	r3, r2
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	689b      	ldr	r3, [r3, #8]
 800c76a:	683a      	ldr	r2, [r7, #0]
 800c76c:	7850      	ldrb	r0, [r2, #1]
 800c76e:	2200      	movs	r2, #0
 800c770:	6839      	ldr	r1, [r7, #0]
 800c772:	4798      	blx	r3
      break;
 800c774:	e067      	b.n	800c846 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	785b      	ldrb	r3, [r3, #1]
 800c77a:	2b0b      	cmp	r3, #11
 800c77c:	d851      	bhi.n	800c822 <USBD_CDC_Setup+0x18a>
 800c77e:	a201      	add	r2, pc, #4	; (adr r2, 800c784 <USBD_CDC_Setup+0xec>)
 800c780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c784:	0800c7b5 	.word	0x0800c7b5
 800c788:	0800c831 	.word	0x0800c831
 800c78c:	0800c823 	.word	0x0800c823
 800c790:	0800c823 	.word	0x0800c823
 800c794:	0800c823 	.word	0x0800c823
 800c798:	0800c823 	.word	0x0800c823
 800c79c:	0800c823 	.word	0x0800c823
 800c7a0:	0800c823 	.word	0x0800c823
 800c7a4:	0800c823 	.word	0x0800c823
 800c7a8:	0800c823 	.word	0x0800c823
 800c7ac:	0800c7df 	.word	0x0800c7df
 800c7b0:	0800c809 	.word	0x0800c809
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	2b03      	cmp	r3, #3
 800c7be:	d107      	bne.n	800c7d0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c7c0:	f107 030a 	add.w	r3, r7, #10
 800c7c4:	2202      	movs	r2, #2
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f001 fd33 	bl	800e234 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c7ce:	e032      	b.n	800c836 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c7d0:	6839      	ldr	r1, [r7, #0]
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f001 fcbd 	bl	800e152 <USBD_CtlError>
            ret = USBD_FAIL;
 800c7d8:	2303      	movs	r3, #3
 800c7da:	75fb      	strb	r3, [r7, #23]
          break;
 800c7dc:	e02b      	b.n	800c836 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7e4:	b2db      	uxtb	r3, r3
 800c7e6:	2b03      	cmp	r3, #3
 800c7e8:	d107      	bne.n	800c7fa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c7ea:	f107 030d 	add.w	r3, r7, #13
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f001 fd1e 	bl	800e234 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c7f8:	e01d      	b.n	800c836 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c7fa:	6839      	ldr	r1, [r7, #0]
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f001 fca8 	bl	800e152 <USBD_CtlError>
            ret = USBD_FAIL;
 800c802:	2303      	movs	r3, #3
 800c804:	75fb      	strb	r3, [r7, #23]
          break;
 800c806:	e016      	b.n	800c836 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	2b03      	cmp	r3, #3
 800c812:	d00f      	beq.n	800c834 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c814:	6839      	ldr	r1, [r7, #0]
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f001 fc9b 	bl	800e152 <USBD_CtlError>
            ret = USBD_FAIL;
 800c81c:	2303      	movs	r3, #3
 800c81e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c820:	e008      	b.n	800c834 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c822:	6839      	ldr	r1, [r7, #0]
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f001 fc94 	bl	800e152 <USBD_CtlError>
          ret = USBD_FAIL;
 800c82a:	2303      	movs	r3, #3
 800c82c:	75fb      	strb	r3, [r7, #23]
          break;
 800c82e:	e002      	b.n	800c836 <USBD_CDC_Setup+0x19e>
          break;
 800c830:	bf00      	nop
 800c832:	e008      	b.n	800c846 <USBD_CDC_Setup+0x1ae>
          break;
 800c834:	bf00      	nop
      }
      break;
 800c836:	e006      	b.n	800c846 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c838:	6839      	ldr	r1, [r7, #0]
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f001 fc89 	bl	800e152 <USBD_CtlError>
      ret = USBD_FAIL;
 800c840:	2303      	movs	r3, #3
 800c842:	75fb      	strb	r3, [r7, #23]
      break;
 800c844:	bf00      	nop
  }

  return (uint8_t)ret;
 800c846:	7dfb      	ldrb	r3, [r7, #23]
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3718      	adds	r7, #24
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	460b      	mov	r3, r1
 800c85a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c862:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	32b0      	adds	r2, #176	; 0xb0
 800c86e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d101      	bne.n	800c87a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c876:	2303      	movs	r3, #3
 800c878:	e065      	b.n	800c946 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	32b0      	adds	r2, #176	; 0xb0
 800c884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c888:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c88a:	78fb      	ldrb	r3, [r7, #3]
 800c88c:	f003 020f 	and.w	r2, r3, #15
 800c890:	6879      	ldr	r1, [r7, #4]
 800c892:	4613      	mov	r3, r2
 800c894:	009b      	lsls	r3, r3, #2
 800c896:	4413      	add	r3, r2
 800c898:	009b      	lsls	r3, r3, #2
 800c89a:	440b      	add	r3, r1
 800c89c:	3318      	adds	r3, #24
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d02f      	beq.n	800c904 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c8a4:	78fb      	ldrb	r3, [r7, #3]
 800c8a6:	f003 020f 	and.w	r2, r3, #15
 800c8aa:	6879      	ldr	r1, [r7, #4]
 800c8ac:	4613      	mov	r3, r2
 800c8ae:	009b      	lsls	r3, r3, #2
 800c8b0:	4413      	add	r3, r2
 800c8b2:	009b      	lsls	r3, r3, #2
 800c8b4:	440b      	add	r3, r1
 800c8b6:	3318      	adds	r3, #24
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	78fb      	ldrb	r3, [r7, #3]
 800c8bc:	f003 010f 	and.w	r1, r3, #15
 800c8c0:	68f8      	ldr	r0, [r7, #12]
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	00db      	lsls	r3, r3, #3
 800c8c6:	440b      	add	r3, r1
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	4403      	add	r3, r0
 800c8cc:	3348      	adds	r3, #72	; 0x48
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	fbb2 f1f3 	udiv	r1, r2, r3
 800c8d4:	fb01 f303 	mul.w	r3, r1, r3
 800c8d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d112      	bne.n	800c904 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c8de:	78fb      	ldrb	r3, [r7, #3]
 800c8e0:	f003 020f 	and.w	r2, r3, #15
 800c8e4:	6879      	ldr	r1, [r7, #4]
 800c8e6:	4613      	mov	r3, r2
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	4413      	add	r3, r2
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	440b      	add	r3, r1
 800c8f0:	3318      	adds	r3, #24
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c8f6:	78f9      	ldrb	r1, [r7, #3]
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f003 fcec 	bl	80102da <USBD_LL_Transmit>
 800c902:	e01f      	b.n	800c944 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	2200      	movs	r2, #0
 800c908:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	33b0      	adds	r3, #176	; 0xb0
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	4413      	add	r3, r2
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	691b      	ldr	r3, [r3, #16]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d010      	beq.n	800c944 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	33b0      	adds	r3, #176	; 0xb0
 800c92c:	009b      	lsls	r3, r3, #2
 800c92e:	4413      	add	r3, r2
 800c930:	685b      	ldr	r3, [r3, #4]
 800c932:	691b      	ldr	r3, [r3, #16]
 800c934:	68ba      	ldr	r2, [r7, #8]
 800c936:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c93a:	68ba      	ldr	r2, [r7, #8]
 800c93c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c940:	78fa      	ldrb	r2, [r7, #3]
 800c942:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c944:	2300      	movs	r3, #0
}
 800c946:	4618      	mov	r0, r3
 800c948:	3710      	adds	r7, #16
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b084      	sub	sp, #16
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
 800c956:	460b      	mov	r3, r1
 800c958:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	32b0      	adds	r2, #176	; 0xb0
 800c964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c968:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	32b0      	adds	r2, #176	; 0xb0
 800c974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d101      	bne.n	800c980 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c97c:	2303      	movs	r3, #3
 800c97e:	e01a      	b.n	800c9b6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c980:	78fb      	ldrb	r3, [r7, #3]
 800c982:	4619      	mov	r1, r3
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f003 fcea 	bl	801035e <USBD_LL_GetRxDataSize>
 800c98a:	4602      	mov	r2, r0
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	33b0      	adds	r3, #176	; 0xb0
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	4413      	add	r3, r2
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	68fa      	ldr	r2, [r7, #12]
 800c9a6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c9aa:	68fa      	ldr	r2, [r7, #12]
 800c9ac:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c9b0:	4611      	mov	r1, r2
 800c9b2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c9b4:	2300      	movs	r3, #0
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3710      	adds	r7, #16
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}

0800c9be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c9be:	b580      	push	{r7, lr}
 800c9c0:	b084      	sub	sp, #16
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	32b0      	adds	r2, #176	; 0xb0
 800c9d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d101      	bne.n	800c9e0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c9dc:	2303      	movs	r3, #3
 800c9de:	e025      	b.n	800ca2c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c9e6:	687a      	ldr	r2, [r7, #4]
 800c9e8:	33b0      	adds	r3, #176	; 0xb0
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	4413      	add	r3, r2
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d01a      	beq.n	800ca2a <USBD_CDC_EP0_RxReady+0x6c>
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c9fa:	2bff      	cmp	r3, #255	; 0xff
 800c9fc:	d015      	beq.n	800ca2a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	33b0      	adds	r3, #176	; 0xb0
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	4413      	add	r3, r2
 800ca0c:	685b      	ldr	r3, [r3, #4]
 800ca0e:	689b      	ldr	r3, [r3, #8]
 800ca10:	68fa      	ldr	r2, [r7, #12]
 800ca12:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ca16:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ca1e:	b292      	uxth	r2, r2
 800ca20:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	22ff      	movs	r2, #255	; 0xff
 800ca26:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ca2a:	2300      	movs	r3, #0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3710      	adds	r7, #16
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b086      	sub	sp, #24
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ca3c:	2182      	movs	r1, #130	; 0x82
 800ca3e:	4818      	ldr	r0, [pc, #96]	; (800caa0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ca40:	f000 fd4f 	bl	800d4e2 <USBD_GetEpDesc>
 800ca44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ca46:	2101      	movs	r1, #1
 800ca48:	4815      	ldr	r0, [pc, #84]	; (800caa0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ca4a:	f000 fd4a 	bl	800d4e2 <USBD_GetEpDesc>
 800ca4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ca50:	2181      	movs	r1, #129	; 0x81
 800ca52:	4813      	ldr	r0, [pc, #76]	; (800caa0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ca54:	f000 fd45 	bl	800d4e2 <USBD_GetEpDesc>
 800ca58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d002      	beq.n	800ca66 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	2210      	movs	r2, #16
 800ca64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d006      	beq.n	800ca7a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca74:	711a      	strb	r2, [r3, #4]
 800ca76:	2200      	movs	r2, #0
 800ca78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d006      	beq.n	800ca8e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2200      	movs	r2, #0
 800ca84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca88:	711a      	strb	r2, [r3, #4]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2243      	movs	r2, #67	; 0x43
 800ca92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ca94:	4b02      	ldr	r3, [pc, #8]	; (800caa0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3718      	adds	r7, #24
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	20000064 	.word	0x20000064

0800caa4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b086      	sub	sp, #24
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800caac:	2182      	movs	r1, #130	; 0x82
 800caae:	4818      	ldr	r0, [pc, #96]	; (800cb10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cab0:	f000 fd17 	bl	800d4e2 <USBD_GetEpDesc>
 800cab4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cab6:	2101      	movs	r1, #1
 800cab8:	4815      	ldr	r0, [pc, #84]	; (800cb10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800caba:	f000 fd12 	bl	800d4e2 <USBD_GetEpDesc>
 800cabe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cac0:	2181      	movs	r1, #129	; 0x81
 800cac2:	4813      	ldr	r0, [pc, #76]	; (800cb10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cac4:	f000 fd0d 	bl	800d4e2 <USBD_GetEpDesc>
 800cac8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d002      	beq.n	800cad6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	2210      	movs	r2, #16
 800cad4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d006      	beq.n	800caea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	2200      	movs	r2, #0
 800cae0:	711a      	strb	r2, [r3, #4]
 800cae2:	2200      	movs	r2, #0
 800cae4:	f042 0202 	orr.w	r2, r2, #2
 800cae8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d006      	beq.n	800cafe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2200      	movs	r2, #0
 800caf4:	711a      	strb	r2, [r3, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	f042 0202 	orr.w	r2, r2, #2
 800cafc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2243      	movs	r2, #67	; 0x43
 800cb02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cb04:	4b02      	ldr	r3, [pc, #8]	; (800cb10 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3718      	adds	r7, #24
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	20000064 	.word	0x20000064

0800cb14 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b086      	sub	sp, #24
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cb1c:	2182      	movs	r1, #130	; 0x82
 800cb1e:	4818      	ldr	r0, [pc, #96]	; (800cb80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cb20:	f000 fcdf 	bl	800d4e2 <USBD_GetEpDesc>
 800cb24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cb26:	2101      	movs	r1, #1
 800cb28:	4815      	ldr	r0, [pc, #84]	; (800cb80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cb2a:	f000 fcda 	bl	800d4e2 <USBD_GetEpDesc>
 800cb2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cb30:	2181      	movs	r1, #129	; 0x81
 800cb32:	4813      	ldr	r0, [pc, #76]	; (800cb80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cb34:	f000 fcd5 	bl	800d4e2 <USBD_GetEpDesc>
 800cb38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d002      	beq.n	800cb46 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	2210      	movs	r2, #16
 800cb44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d006      	beq.n	800cb5a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb54:	711a      	strb	r2, [r3, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d006      	beq.n	800cb6e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2200      	movs	r2, #0
 800cb64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb68:	711a      	strb	r2, [r3, #4]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2243      	movs	r2, #67	; 0x43
 800cb72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cb74:	4b02      	ldr	r3, [pc, #8]	; (800cb80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3718      	adds	r7, #24
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	20000064 	.word	0x20000064

0800cb84 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	220a      	movs	r2, #10
 800cb90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cb92:	4b03      	ldr	r3, [pc, #12]	; (800cba0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr
 800cba0:	20000020 	.word	0x20000020

0800cba4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b083      	sub	sp, #12
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d101      	bne.n	800cbb8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cbb4:	2303      	movs	r3, #3
 800cbb6:	e009      	b.n	800cbcc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	33b0      	adds	r3, #176	; 0xb0
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	4413      	add	r3, r2
 800cbc6:	683a      	ldr	r2, [r7, #0]
 800cbc8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cbca:	2300      	movs	r3, #0
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	370c      	adds	r7, #12
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr

0800cbd8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b087      	sub	sp, #28
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	32b0      	adds	r2, #176	; 0xb0
 800cbee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbf2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d101      	bne.n	800cbfe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cbfa:	2303      	movs	r3, #3
 800cbfc:	e008      	b.n	800cc10 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	68ba      	ldr	r2, [r7, #8]
 800cc02:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	687a      	ldr	r2, [r7, #4]
 800cc0a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cc0e:	2300      	movs	r3, #0
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	371c      	adds	r7, #28
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr

0800cc1c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b085      	sub	sp, #20
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	32b0      	adds	r2, #176	; 0xb0
 800cc30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc34:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d101      	bne.n	800cc40 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800cc3c:	2303      	movs	r3, #3
 800cc3e:	e004      	b.n	800cc4a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	683a      	ldr	r2, [r7, #0]
 800cc44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cc48:	2300      	movs	r3, #0
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3714      	adds	r7, #20
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr
	...

0800cc58 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	32b0      	adds	r2, #176	; 0xb0
 800cc6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc6e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800cc70:	2301      	movs	r3, #1
 800cc72:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	32b0      	adds	r2, #176	; 0xb0
 800cc7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d101      	bne.n	800cc8a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cc86:	2303      	movs	r3, #3
 800cc88:	e025      	b.n	800ccd6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d11f      	bne.n	800ccd4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	2201      	movs	r2, #1
 800cc98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800cc9c:	4b10      	ldr	r3, [pc, #64]	; (800cce0 <USBD_CDC_TransmitPacket+0x88>)
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	f003 020f 	and.w	r2, r3, #15
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	4613      	mov	r3, r2
 800ccae:	009b      	lsls	r3, r3, #2
 800ccb0:	4413      	add	r3, r2
 800ccb2:	009b      	lsls	r3, r3, #2
 800ccb4:	4403      	add	r3, r0
 800ccb6:	3318      	adds	r3, #24
 800ccb8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ccba:	4b09      	ldr	r3, [pc, #36]	; (800cce0 <USBD_CDC_TransmitPacket+0x88>)
 800ccbc:	7819      	ldrb	r1, [r3, #0]
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f003 fb05 	bl	80102da <USBD_LL_Transmit>

    ret = USBD_OK;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ccd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3710      	adds	r7, #16
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	200000a7 	.word	0x200000a7

0800cce4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	32b0      	adds	r2, #176	; 0xb0
 800ccf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccfa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	32b0      	adds	r2, #176	; 0xb0
 800cd06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d101      	bne.n	800cd12 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800cd0e:	2303      	movs	r3, #3
 800cd10:	e018      	b.n	800cd44 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	7c1b      	ldrb	r3, [r3, #16]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d10a      	bne.n	800cd30 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cd1a:	4b0c      	ldr	r3, [pc, #48]	; (800cd4c <USBD_CDC_ReceivePacket+0x68>)
 800cd1c:	7819      	ldrb	r1, [r3, #0]
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cd24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f003 faf7 	bl	801031c <USBD_LL_PrepareReceive>
 800cd2e:	e008      	b.n	800cd42 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cd30:	4b06      	ldr	r3, [pc, #24]	; (800cd4c <USBD_CDC_ReceivePacket+0x68>)
 800cd32:	7819      	ldrb	r1, [r3, #0]
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cd3a:	2340      	movs	r3, #64	; 0x40
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f003 faed 	bl	801031c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cd42:	2300      	movs	r3, #0
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3710      	adds	r7, #16
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	200000a8 	.word	0x200000a8

0800cd50 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b086      	sub	sp, #24
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d101      	bne.n	800cd68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cd64:	2303      	movs	r3, #3
 800cd66:	e01f      	b.n	800cda8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2200      	movs	r2, #0
 800cd74:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d003      	beq.n	800cd8e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	68ba      	ldr	r2, [r7, #8]
 800cd8a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2201      	movs	r2, #1
 800cd92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	79fa      	ldrb	r2, [r7, #7]
 800cd9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cd9c:	68f8      	ldr	r0, [r7, #12]
 800cd9e:	f003 f967 	bl	8010070 <USBD_LL_Init>
 800cda2:	4603      	mov	r3, r0
 800cda4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cda6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3718      	adds	r7, #24
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d101      	bne.n	800cdc8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cdc4:	2303      	movs	r3, #3
 800cdc6:	e025      	b.n	800ce14 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	683a      	ldr	r2, [r7, #0]
 800cdcc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	32ae      	adds	r2, #174	; 0xae
 800cdda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d00f      	beq.n	800ce04 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	32ae      	adds	r2, #174	; 0xae
 800cdee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf4:	f107 020e 	add.w	r2, r7, #14
 800cdf8:	4610      	mov	r0, r2
 800cdfa:	4798      	blx	r3
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ce0a:	1c5a      	adds	r2, r3, #1
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ce12:	2300      	movs	r3, #0
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3710      	adds	r7, #16
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f003 f96f 	bl	8010108 <USBD_LL_Start>
 800ce2a:	4603      	mov	r3, r0
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3708      	adds	r7, #8
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}

0800ce34 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ce3c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	370c      	adds	r7, #12
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr

0800ce4a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce4a:	b580      	push	{r7, lr}
 800ce4c:	b084      	sub	sp, #16
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
 800ce52:	460b      	mov	r3, r1
 800ce54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce56:	2300      	movs	r3, #0
 800ce58:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d009      	beq.n	800ce78 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	78fa      	ldrb	r2, [r7, #3]
 800ce6e:	4611      	mov	r1, r2
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	4798      	blx	r3
 800ce74:	4603      	mov	r3, r0
 800ce76:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ce78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3710      	adds	r7, #16
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce82:	b580      	push	{r7, lr}
 800ce84:	b084      	sub	sp, #16
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	78fa      	ldrb	r2, [r7, #3]
 800ce9c:	4611      	mov	r1, r2
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	4798      	blx	r3
 800cea2:	4603      	mov	r3, r0
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d001      	beq.n	800ceac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800cea8:	2303      	movs	r3, #3
 800ceaa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ceac:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3710      	adds	r7, #16
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}

0800ceb6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ceb6:	b580      	push	{r7, lr}
 800ceb8:	b084      	sub	sp, #16
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
 800cebe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cec6:	6839      	ldr	r1, [r7, #0]
 800cec8:	4618      	mov	r0, r3
 800ceca:	f001 f908 	bl	800e0de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2201      	movs	r2, #1
 800ced2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cedc:	461a      	mov	r2, r3
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ceea:	f003 031f 	and.w	r3, r3, #31
 800ceee:	2b02      	cmp	r3, #2
 800cef0:	d01a      	beq.n	800cf28 <USBD_LL_SetupStage+0x72>
 800cef2:	2b02      	cmp	r3, #2
 800cef4:	d822      	bhi.n	800cf3c <USBD_LL_SetupStage+0x86>
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d002      	beq.n	800cf00 <USBD_LL_SetupStage+0x4a>
 800cefa:	2b01      	cmp	r3, #1
 800cefc:	d00a      	beq.n	800cf14 <USBD_LL_SetupStage+0x5e>
 800cefe:	e01d      	b.n	800cf3c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf06:	4619      	mov	r1, r3
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 fb5f 	bl	800d5cc <USBD_StdDevReq>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	73fb      	strb	r3, [r7, #15]
      break;
 800cf12:	e020      	b.n	800cf56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf1a:	4619      	mov	r1, r3
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f000 fbc7 	bl	800d6b0 <USBD_StdItfReq>
 800cf22:	4603      	mov	r3, r0
 800cf24:	73fb      	strb	r3, [r7, #15]
      break;
 800cf26:	e016      	b.n	800cf56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf2e:	4619      	mov	r1, r3
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f000 fc29 	bl	800d788 <USBD_StdEPReq>
 800cf36:	4603      	mov	r3, r0
 800cf38:	73fb      	strb	r3, [r7, #15]
      break;
 800cf3a:	e00c      	b.n	800cf56 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cf42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cf46:	b2db      	uxtb	r3, r3
 800cf48:	4619      	mov	r1, r3
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f003 f93c 	bl	80101c8 <USBD_LL_StallEP>
 800cf50:	4603      	mov	r3, r0
 800cf52:	73fb      	strb	r3, [r7, #15]
      break;
 800cf54:	bf00      	nop
  }

  return ret;
 800cf56:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3710      	adds	r7, #16
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b086      	sub	sp, #24
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	460b      	mov	r3, r1
 800cf6a:	607a      	str	r2, [r7, #4]
 800cf6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800cf72:	7afb      	ldrb	r3, [r7, #11]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d16e      	bne.n	800d056 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cf7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cf86:	2b03      	cmp	r3, #3
 800cf88:	f040 8098 	bne.w	800d0bc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	689a      	ldr	r2, [r3, #8]
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d913      	bls.n	800cfc0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	689a      	ldr	r2, [r3, #8]
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	68db      	ldr	r3, [r3, #12]
 800cfa0:	1ad2      	subs	r2, r2, r3
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	68da      	ldr	r2, [r3, #12]
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	689b      	ldr	r3, [r3, #8]
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	bf28      	it	cs
 800cfb2:	4613      	movcs	r3, r2
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	6879      	ldr	r1, [r7, #4]
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f001 f984 	bl	800e2c6 <USBD_CtlContinueRx>
 800cfbe:	e07d      	b.n	800d0bc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cfc6:	f003 031f 	and.w	r3, r3, #31
 800cfca:	2b02      	cmp	r3, #2
 800cfcc:	d014      	beq.n	800cff8 <USBD_LL_DataOutStage+0x98>
 800cfce:	2b02      	cmp	r3, #2
 800cfd0:	d81d      	bhi.n	800d00e <USBD_LL_DataOutStage+0xae>
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d002      	beq.n	800cfdc <USBD_LL_DataOutStage+0x7c>
 800cfd6:	2b01      	cmp	r3, #1
 800cfd8:	d003      	beq.n	800cfe2 <USBD_LL_DataOutStage+0x82>
 800cfda:	e018      	b.n	800d00e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	75bb      	strb	r3, [r7, #22]
            break;
 800cfe0:	e018      	b.n	800d014 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	4619      	mov	r1, r3
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f000 fa5e 	bl	800d4ae <USBD_CoreFindIF>
 800cff2:	4603      	mov	r3, r0
 800cff4:	75bb      	strb	r3, [r7, #22]
            break;
 800cff6:	e00d      	b.n	800d014 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	4619      	mov	r1, r3
 800d002:	68f8      	ldr	r0, [r7, #12]
 800d004:	f000 fa60 	bl	800d4c8 <USBD_CoreFindEP>
 800d008:	4603      	mov	r3, r0
 800d00a:	75bb      	strb	r3, [r7, #22]
            break;
 800d00c:	e002      	b.n	800d014 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d00e:	2300      	movs	r3, #0
 800d010:	75bb      	strb	r3, [r7, #22]
            break;
 800d012:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d014:	7dbb      	ldrb	r3, [r7, #22]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d119      	bne.n	800d04e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d020:	b2db      	uxtb	r3, r3
 800d022:	2b03      	cmp	r3, #3
 800d024:	d113      	bne.n	800d04e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d026:	7dba      	ldrb	r2, [r7, #22]
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	32ae      	adds	r2, #174	; 0xae
 800d02c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d030:	691b      	ldr	r3, [r3, #16]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d00b      	beq.n	800d04e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d036:	7dba      	ldrb	r2, [r7, #22]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d03e:	7dba      	ldrb	r2, [r7, #22]
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	32ae      	adds	r2, #174	; 0xae
 800d044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d048:	691b      	ldr	r3, [r3, #16]
 800d04a:	68f8      	ldr	r0, [r7, #12]
 800d04c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d04e:	68f8      	ldr	r0, [r7, #12]
 800d050:	f001 f94a 	bl	800e2e8 <USBD_CtlSendStatus>
 800d054:	e032      	b.n	800d0bc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d056:	7afb      	ldrb	r3, [r7, #11]
 800d058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	4619      	mov	r1, r3
 800d060:	68f8      	ldr	r0, [r7, #12]
 800d062:	f000 fa31 	bl	800d4c8 <USBD_CoreFindEP>
 800d066:	4603      	mov	r3, r0
 800d068:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d06a:	7dbb      	ldrb	r3, [r7, #22]
 800d06c:	2bff      	cmp	r3, #255	; 0xff
 800d06e:	d025      	beq.n	800d0bc <USBD_LL_DataOutStage+0x15c>
 800d070:	7dbb      	ldrb	r3, [r7, #22]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d122      	bne.n	800d0bc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	2b03      	cmp	r3, #3
 800d080:	d117      	bne.n	800d0b2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d082:	7dba      	ldrb	r2, [r7, #22]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	32ae      	adds	r2, #174	; 0xae
 800d088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d08c:	699b      	ldr	r3, [r3, #24]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d00f      	beq.n	800d0b2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d092:	7dba      	ldrb	r2, [r7, #22]
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d09a:	7dba      	ldrb	r2, [r7, #22]
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	32ae      	adds	r2, #174	; 0xae
 800d0a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0a4:	699b      	ldr	r3, [r3, #24]
 800d0a6:	7afa      	ldrb	r2, [r7, #11]
 800d0a8:	4611      	mov	r1, r2
 800d0aa:	68f8      	ldr	r0, [r7, #12]
 800d0ac:	4798      	blx	r3
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d0b2:	7dfb      	ldrb	r3, [r7, #23]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d001      	beq.n	800d0bc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d0b8:	7dfb      	ldrb	r3, [r7, #23]
 800d0ba:	e000      	b.n	800d0be <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d0bc:	2300      	movs	r3, #0
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3718      	adds	r7, #24
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}

0800d0c6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d0c6:	b580      	push	{r7, lr}
 800d0c8:	b086      	sub	sp, #24
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	60f8      	str	r0, [r7, #12]
 800d0ce:	460b      	mov	r3, r1
 800d0d0:	607a      	str	r2, [r7, #4]
 800d0d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d0d4:	7afb      	ldrb	r3, [r7, #11]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d16f      	bne.n	800d1ba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	3314      	adds	r3, #20
 800d0de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d0e6:	2b02      	cmp	r3, #2
 800d0e8:	d15a      	bne.n	800d1a0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	689a      	ldr	r2, [r3, #8]
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	68db      	ldr	r3, [r3, #12]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d914      	bls.n	800d120 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	689a      	ldr	r2, [r3, #8]
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	1ad2      	subs	r2, r2, r3
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	689b      	ldr	r3, [r3, #8]
 800d108:	461a      	mov	r2, r3
 800d10a:	6879      	ldr	r1, [r7, #4]
 800d10c:	68f8      	ldr	r0, [r7, #12]
 800d10e:	f001 f8ac 	bl	800e26a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d112:	2300      	movs	r3, #0
 800d114:	2200      	movs	r2, #0
 800d116:	2100      	movs	r1, #0
 800d118:	68f8      	ldr	r0, [r7, #12]
 800d11a:	f003 f8ff 	bl	801031c <USBD_LL_PrepareReceive>
 800d11e:	e03f      	b.n	800d1a0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	68da      	ldr	r2, [r3, #12]
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	689b      	ldr	r3, [r3, #8]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d11c      	bne.n	800d166 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	685a      	ldr	r2, [r3, #4]
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d134:	429a      	cmp	r2, r3
 800d136:	d316      	bcc.n	800d166 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	685a      	ldr	r2, [r3, #4]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d142:	429a      	cmp	r2, r3
 800d144:	d20f      	bcs.n	800d166 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d146:	2200      	movs	r2, #0
 800d148:	2100      	movs	r1, #0
 800d14a:	68f8      	ldr	r0, [r7, #12]
 800d14c:	f001 f88d 	bl	800e26a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2200      	movs	r2, #0
 800d154:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d158:	2300      	movs	r3, #0
 800d15a:	2200      	movs	r2, #0
 800d15c:	2100      	movs	r1, #0
 800d15e:	68f8      	ldr	r0, [r7, #12]
 800d160:	f003 f8dc 	bl	801031c <USBD_LL_PrepareReceive>
 800d164:	e01c      	b.n	800d1a0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	2b03      	cmp	r3, #3
 800d170:	d10f      	bne.n	800d192 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d178:	68db      	ldr	r3, [r3, #12]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d009      	beq.n	800d192 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2200      	movs	r2, #0
 800d182:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d18c:	68db      	ldr	r3, [r3, #12]
 800d18e:	68f8      	ldr	r0, [r7, #12]
 800d190:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d192:	2180      	movs	r1, #128	; 0x80
 800d194:	68f8      	ldr	r0, [r7, #12]
 800d196:	f003 f817 	bl	80101c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d19a:	68f8      	ldr	r0, [r7, #12]
 800d19c:	f001 f8b7 	bl	800e30e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d03a      	beq.n	800d220 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d1aa:	68f8      	ldr	r0, [r7, #12]
 800d1ac:	f7ff fe42 	bl	800ce34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d1b8:	e032      	b.n	800d220 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d1ba:	7afb      	ldrb	r3, [r7, #11]
 800d1bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	4619      	mov	r1, r3
 800d1c4:	68f8      	ldr	r0, [r7, #12]
 800d1c6:	f000 f97f 	bl	800d4c8 <USBD_CoreFindEP>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d1ce:	7dfb      	ldrb	r3, [r7, #23]
 800d1d0:	2bff      	cmp	r3, #255	; 0xff
 800d1d2:	d025      	beq.n	800d220 <USBD_LL_DataInStage+0x15a>
 800d1d4:	7dfb      	ldrb	r3, [r7, #23]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d122      	bne.n	800d220 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	2b03      	cmp	r3, #3
 800d1e4:	d11c      	bne.n	800d220 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d1e6:	7dfa      	ldrb	r2, [r7, #23]
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	32ae      	adds	r2, #174	; 0xae
 800d1ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1f0:	695b      	ldr	r3, [r3, #20]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d014      	beq.n	800d220 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d1f6:	7dfa      	ldrb	r2, [r7, #23]
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d1fe:	7dfa      	ldrb	r2, [r7, #23]
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	32ae      	adds	r2, #174	; 0xae
 800d204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d208:	695b      	ldr	r3, [r3, #20]
 800d20a:	7afa      	ldrb	r2, [r7, #11]
 800d20c:	4611      	mov	r1, r2
 800d20e:	68f8      	ldr	r0, [r7, #12]
 800d210:	4798      	blx	r3
 800d212:	4603      	mov	r3, r0
 800d214:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d216:	7dbb      	ldrb	r3, [r7, #22]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d001      	beq.n	800d220 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d21c:	7dbb      	ldrb	r3, [r7, #22]
 800d21e:	e000      	b.n	800d222 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d220:	2300      	movs	r3, #0
}
 800d222:	4618      	mov	r0, r3
 800d224:	3718      	adds	r7, #24
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}

0800d22a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d22a:	b580      	push	{r7, lr}
 800d22c:	b084      	sub	sp, #16
 800d22e:	af00      	add	r7, sp, #0
 800d230:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d232:	2300      	movs	r3, #0
 800d234:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2201      	movs	r2, #1
 800d23a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2200      	movs	r2, #0
 800d242:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2200      	movs	r2, #0
 800d24a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2200      	movs	r2, #0
 800d250:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d262:	2b00      	cmp	r3, #0
 800d264:	d014      	beq.n	800d290 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d00e      	beq.n	800d290 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	6852      	ldr	r2, [r2, #4]
 800d27e:	b2d2      	uxtb	r2, r2
 800d280:	4611      	mov	r1, r2
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	4798      	blx	r3
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d001      	beq.n	800d290 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d28c:	2303      	movs	r3, #3
 800d28e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d290:	2340      	movs	r3, #64	; 0x40
 800d292:	2200      	movs	r2, #0
 800d294:	2100      	movs	r1, #0
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f002 ff51 	bl	801013e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2201      	movs	r2, #1
 800d2a0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2240      	movs	r2, #64	; 0x40
 800d2a8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d2ac:	2340      	movs	r3, #64	; 0x40
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	2180      	movs	r1, #128	; 0x80
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f002 ff43 	bl	801013e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2240      	movs	r2, #64	; 0x40
 800d2c2:	621a      	str	r2, [r3, #32]

  return ret;
 800d2c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3710      	adds	r7, #16
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}

0800d2ce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d2ce:	b480      	push	{r7}
 800d2d0:	b083      	sub	sp, #12
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
 800d2d6:	460b      	mov	r3, r1
 800d2d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	78fa      	ldrb	r2, [r7, #3]
 800d2de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d2e0:	2300      	movs	r3, #0
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	370c      	adds	r7, #12
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr

0800d2ee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d2ee:	b480      	push	{r7}
 800d2f0:	b083      	sub	sp, #12
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2fc:	b2da      	uxtb	r2, r3
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2204      	movs	r2, #4
 800d308:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d30c:	2300      	movs	r3, #0
}
 800d30e:	4618      	mov	r0, r3
 800d310:	370c      	adds	r7, #12
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr

0800d31a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d31a:	b480      	push	{r7}
 800d31c:	b083      	sub	sp, #12
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d328:	b2db      	uxtb	r3, r3
 800d32a:	2b04      	cmp	r3, #4
 800d32c:	d106      	bne.n	800d33c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d334:	b2da      	uxtb	r2, r3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d33c:	2300      	movs	r3, #0
}
 800d33e:	4618      	mov	r0, r3
 800d340:	370c      	adds	r7, #12
 800d342:	46bd      	mov	sp, r7
 800d344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d348:	4770      	bx	lr

0800d34a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d34a:	b580      	push	{r7, lr}
 800d34c:	b082      	sub	sp, #8
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d358:	b2db      	uxtb	r3, r3
 800d35a:	2b03      	cmp	r3, #3
 800d35c:	d110      	bne.n	800d380 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d364:	2b00      	cmp	r3, #0
 800d366:	d00b      	beq.n	800d380 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d36e:	69db      	ldr	r3, [r3, #28]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d005      	beq.n	800d380 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d37a:	69db      	ldr	r3, [r3, #28]
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d380:	2300      	movs	r3, #0
}
 800d382:	4618      	mov	r0, r3
 800d384:	3708      	adds	r7, #8
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}

0800d38a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d38a:	b580      	push	{r7, lr}
 800d38c:	b082      	sub	sp, #8
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
 800d392:	460b      	mov	r3, r1
 800d394:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	32ae      	adds	r2, #174	; 0xae
 800d3a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d101      	bne.n	800d3ac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d3a8:	2303      	movs	r3, #3
 800d3aa:	e01c      	b.n	800d3e6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	2b03      	cmp	r3, #3
 800d3b6:	d115      	bne.n	800d3e4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	32ae      	adds	r2, #174	; 0xae
 800d3c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3c6:	6a1b      	ldr	r3, [r3, #32]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d00b      	beq.n	800d3e4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	32ae      	adds	r2, #174	; 0xae
 800d3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3da:	6a1b      	ldr	r3, [r3, #32]
 800d3dc:	78fa      	ldrb	r2, [r7, #3]
 800d3de:	4611      	mov	r1, r2
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d3e4:	2300      	movs	r3, #0
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3708      	adds	r7, #8
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}

0800d3ee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d3ee:	b580      	push	{r7, lr}
 800d3f0:	b082      	sub	sp, #8
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	6078      	str	r0, [r7, #4]
 800d3f6:	460b      	mov	r3, r1
 800d3f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	32ae      	adds	r2, #174	; 0xae
 800d404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d101      	bne.n	800d410 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d40c:	2303      	movs	r3, #3
 800d40e:	e01c      	b.n	800d44a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d416:	b2db      	uxtb	r3, r3
 800d418:	2b03      	cmp	r3, #3
 800d41a:	d115      	bne.n	800d448 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	32ae      	adds	r2, #174	; 0xae
 800d426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d00b      	beq.n	800d448 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	32ae      	adds	r2, #174	; 0xae
 800d43a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d440:	78fa      	ldrb	r2, [r7, #3]
 800d442:	4611      	mov	r1, r2
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d448:	2300      	movs	r3, #0
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3708      	adds	r7, #8
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}

0800d452 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d452:	b480      	push	{r7}
 800d454:	b083      	sub	sp, #12
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d45a:	2300      	movs	r3, #0
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	370c      	adds	r7, #12
 800d460:	46bd      	mov	sp, r7
 800d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d466:	4770      	bx	lr

0800d468 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d470:	2300      	movs	r3, #0
 800d472:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2201      	movs	r2, #1
 800d478:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d482:	2b00      	cmp	r3, #0
 800d484:	d00e      	beq.n	800d4a4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d48c:	685b      	ldr	r3, [r3, #4]
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	6852      	ldr	r2, [r2, #4]
 800d492:	b2d2      	uxtb	r2, r2
 800d494:	4611      	mov	r1, r2
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	4798      	blx	r3
 800d49a:	4603      	mov	r3, r0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d001      	beq.n	800d4a4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d4a0:	2303      	movs	r3, #3
 800d4a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3710      	adds	r7, #16
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}

0800d4ae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d4ae:	b480      	push	{r7}
 800d4b0:	b083      	sub	sp, #12
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d4ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	370c      	adds	r7, #12
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr

0800d4c8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	460b      	mov	r3, r1
 800d4d2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d4d4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	370c      	adds	r7, #12
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr

0800d4e2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d4e2:	b580      	push	{r7, lr}
 800d4e4:	b086      	sub	sp, #24
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
 800d4ea:	460b      	mov	r3, r1
 800d4ec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	885b      	ldrh	r3, [r3, #2]
 800d4fe:	b29a      	uxth	r2, r3
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	b29b      	uxth	r3, r3
 800d506:	429a      	cmp	r2, r3
 800d508:	d920      	bls.n	800d54c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	b29b      	uxth	r3, r3
 800d510:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d512:	e013      	b.n	800d53c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d514:	f107 030a 	add.w	r3, r7, #10
 800d518:	4619      	mov	r1, r3
 800d51a:	6978      	ldr	r0, [r7, #20]
 800d51c:	f000 f81b 	bl	800d556 <USBD_GetNextDesc>
 800d520:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	785b      	ldrb	r3, [r3, #1]
 800d526:	2b05      	cmp	r3, #5
 800d528:	d108      	bne.n	800d53c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	789b      	ldrb	r3, [r3, #2]
 800d532:	78fa      	ldrb	r2, [r7, #3]
 800d534:	429a      	cmp	r2, r3
 800d536:	d008      	beq.n	800d54a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d538:	2300      	movs	r3, #0
 800d53a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	885b      	ldrh	r3, [r3, #2]
 800d540:	b29a      	uxth	r2, r3
 800d542:	897b      	ldrh	r3, [r7, #10]
 800d544:	429a      	cmp	r2, r3
 800d546:	d8e5      	bhi.n	800d514 <USBD_GetEpDesc+0x32>
 800d548:	e000      	b.n	800d54c <USBD_GetEpDesc+0x6a>
          break;
 800d54a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d54c:	693b      	ldr	r3, [r7, #16]
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3718      	adds	r7, #24
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}

0800d556 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d556:	b480      	push	{r7}
 800d558:	b085      	sub	sp, #20
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6078      	str	r0, [r7, #4]
 800d55e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	881a      	ldrh	r2, [r3, #0]
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	b29b      	uxth	r3, r3
 800d56e:	4413      	add	r3, r2
 800d570:	b29a      	uxth	r2, r3
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	781b      	ldrb	r3, [r3, #0]
 800d57a:	461a      	mov	r2, r3
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	4413      	add	r3, r2
 800d580:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d582:	68fb      	ldr	r3, [r7, #12]
}
 800d584:	4618      	mov	r0, r3
 800d586:	3714      	adds	r7, #20
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d590:	b480      	push	{r7}
 800d592:	b087      	sub	sp, #28
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d5ae:	8a3b      	ldrh	r3, [r7, #16]
 800d5b0:	021b      	lsls	r3, r3, #8
 800d5b2:	b21a      	sxth	r2, r3
 800d5b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d5b8:	4313      	orrs	r3, r2
 800d5ba:	b21b      	sxth	r3, r3
 800d5bc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d5be:	89fb      	ldrh	r3, [r7, #14]
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	371c      	adds	r7, #28
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d5e2:	2b40      	cmp	r3, #64	; 0x40
 800d5e4:	d005      	beq.n	800d5f2 <USBD_StdDevReq+0x26>
 800d5e6:	2b40      	cmp	r3, #64	; 0x40
 800d5e8:	d857      	bhi.n	800d69a <USBD_StdDevReq+0xce>
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d00f      	beq.n	800d60e <USBD_StdDevReq+0x42>
 800d5ee:	2b20      	cmp	r3, #32
 800d5f0:	d153      	bne.n	800d69a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	32ae      	adds	r2, #174	; 0xae
 800d5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d600:	689b      	ldr	r3, [r3, #8]
 800d602:	6839      	ldr	r1, [r7, #0]
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	4798      	blx	r3
 800d608:	4603      	mov	r3, r0
 800d60a:	73fb      	strb	r3, [r7, #15]
      break;
 800d60c:	e04a      	b.n	800d6a4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	785b      	ldrb	r3, [r3, #1]
 800d612:	2b09      	cmp	r3, #9
 800d614:	d83b      	bhi.n	800d68e <USBD_StdDevReq+0xc2>
 800d616:	a201      	add	r2, pc, #4	; (adr r2, 800d61c <USBD_StdDevReq+0x50>)
 800d618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d61c:	0800d671 	.word	0x0800d671
 800d620:	0800d685 	.word	0x0800d685
 800d624:	0800d68f 	.word	0x0800d68f
 800d628:	0800d67b 	.word	0x0800d67b
 800d62c:	0800d68f 	.word	0x0800d68f
 800d630:	0800d64f 	.word	0x0800d64f
 800d634:	0800d645 	.word	0x0800d645
 800d638:	0800d68f 	.word	0x0800d68f
 800d63c:	0800d667 	.word	0x0800d667
 800d640:	0800d659 	.word	0x0800d659
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d644:	6839      	ldr	r1, [r7, #0]
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 fa3c 	bl	800dac4 <USBD_GetDescriptor>
          break;
 800d64c:	e024      	b.n	800d698 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d64e:	6839      	ldr	r1, [r7, #0]
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 fba1 	bl	800dd98 <USBD_SetAddress>
          break;
 800d656:	e01f      	b.n	800d698 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d658:	6839      	ldr	r1, [r7, #0]
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 fbe0 	bl	800de20 <USBD_SetConfig>
 800d660:	4603      	mov	r3, r0
 800d662:	73fb      	strb	r3, [r7, #15]
          break;
 800d664:	e018      	b.n	800d698 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d666:	6839      	ldr	r1, [r7, #0]
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f000 fc83 	bl	800df74 <USBD_GetConfig>
          break;
 800d66e:	e013      	b.n	800d698 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d670:	6839      	ldr	r1, [r7, #0]
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 fcb4 	bl	800dfe0 <USBD_GetStatus>
          break;
 800d678:	e00e      	b.n	800d698 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d67a:	6839      	ldr	r1, [r7, #0]
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 fce3 	bl	800e048 <USBD_SetFeature>
          break;
 800d682:	e009      	b.n	800d698 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d684:	6839      	ldr	r1, [r7, #0]
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 fd07 	bl	800e09a <USBD_ClrFeature>
          break;
 800d68c:	e004      	b.n	800d698 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d68e:	6839      	ldr	r1, [r7, #0]
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f000 fd5e 	bl	800e152 <USBD_CtlError>
          break;
 800d696:	bf00      	nop
      }
      break;
 800d698:	e004      	b.n	800d6a4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d69a:	6839      	ldr	r1, [r7, #0]
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f000 fd58 	bl	800e152 <USBD_CtlError>
      break;
 800d6a2:	bf00      	nop
  }

  return ret;
 800d6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3710      	adds	r7, #16
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
 800d6ae:	bf00      	nop

0800d6b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b084      	sub	sp, #16
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d6c6:	2b40      	cmp	r3, #64	; 0x40
 800d6c8:	d005      	beq.n	800d6d6 <USBD_StdItfReq+0x26>
 800d6ca:	2b40      	cmp	r3, #64	; 0x40
 800d6cc:	d852      	bhi.n	800d774 <USBD_StdItfReq+0xc4>
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d001      	beq.n	800d6d6 <USBD_StdItfReq+0x26>
 800d6d2:	2b20      	cmp	r3, #32
 800d6d4:	d14e      	bne.n	800d774 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	3b01      	subs	r3, #1
 800d6e0:	2b02      	cmp	r3, #2
 800d6e2:	d840      	bhi.n	800d766 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	889b      	ldrh	r3, [r3, #4]
 800d6e8:	b2db      	uxtb	r3, r3
 800d6ea:	2b01      	cmp	r3, #1
 800d6ec:	d836      	bhi.n	800d75c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	889b      	ldrh	r3, [r3, #4]
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f7ff fed9 	bl	800d4ae <USBD_CoreFindIF>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d700:	7bbb      	ldrb	r3, [r7, #14]
 800d702:	2bff      	cmp	r3, #255	; 0xff
 800d704:	d01d      	beq.n	800d742 <USBD_StdItfReq+0x92>
 800d706:	7bbb      	ldrb	r3, [r7, #14]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d11a      	bne.n	800d742 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d70c:	7bba      	ldrb	r2, [r7, #14]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	32ae      	adds	r2, #174	; 0xae
 800d712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d00f      	beq.n	800d73c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d71c:	7bba      	ldrb	r2, [r7, #14]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d724:	7bba      	ldrb	r2, [r7, #14]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	32ae      	adds	r2, #174	; 0xae
 800d72a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d72e:	689b      	ldr	r3, [r3, #8]
 800d730:	6839      	ldr	r1, [r7, #0]
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	4798      	blx	r3
 800d736:	4603      	mov	r3, r0
 800d738:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d73a:	e004      	b.n	800d746 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d73c:	2303      	movs	r3, #3
 800d73e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d740:	e001      	b.n	800d746 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d742:	2303      	movs	r3, #3
 800d744:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	88db      	ldrh	r3, [r3, #6]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d110      	bne.n	800d770 <USBD_StdItfReq+0xc0>
 800d74e:	7bfb      	ldrb	r3, [r7, #15]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d10d      	bne.n	800d770 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f000 fdc7 	bl	800e2e8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d75a:	e009      	b.n	800d770 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d75c:	6839      	ldr	r1, [r7, #0]
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 fcf7 	bl	800e152 <USBD_CtlError>
          break;
 800d764:	e004      	b.n	800d770 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d766:	6839      	ldr	r1, [r7, #0]
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f000 fcf2 	bl	800e152 <USBD_CtlError>
          break;
 800d76e:	e000      	b.n	800d772 <USBD_StdItfReq+0xc2>
          break;
 800d770:	bf00      	nop
      }
      break;
 800d772:	e004      	b.n	800d77e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d774:	6839      	ldr	r1, [r7, #0]
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f000 fceb 	bl	800e152 <USBD_CtlError>
      break;
 800d77c:	bf00      	nop
  }

  return ret;
 800d77e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d780:	4618      	mov	r0, r3
 800d782:	3710      	adds	r7, #16
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d792:	2300      	movs	r3, #0
 800d794:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	889b      	ldrh	r3, [r3, #4]
 800d79a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d7a4:	2b40      	cmp	r3, #64	; 0x40
 800d7a6:	d007      	beq.n	800d7b8 <USBD_StdEPReq+0x30>
 800d7a8:	2b40      	cmp	r3, #64	; 0x40
 800d7aa:	f200 817f 	bhi.w	800daac <USBD_StdEPReq+0x324>
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d02a      	beq.n	800d808 <USBD_StdEPReq+0x80>
 800d7b2:	2b20      	cmp	r3, #32
 800d7b4:	f040 817a 	bne.w	800daac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d7b8:	7bbb      	ldrb	r3, [r7, #14]
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f7ff fe83 	bl	800d4c8 <USBD_CoreFindEP>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d7c6:	7b7b      	ldrb	r3, [r7, #13]
 800d7c8:	2bff      	cmp	r3, #255	; 0xff
 800d7ca:	f000 8174 	beq.w	800dab6 <USBD_StdEPReq+0x32e>
 800d7ce:	7b7b      	ldrb	r3, [r7, #13]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	f040 8170 	bne.w	800dab6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d7d6:	7b7a      	ldrb	r2, [r7, #13]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d7de:	7b7a      	ldrb	r2, [r7, #13]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	32ae      	adds	r2, #174	; 0xae
 800d7e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7e8:	689b      	ldr	r3, [r3, #8]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	f000 8163 	beq.w	800dab6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d7f0:	7b7a      	ldrb	r2, [r7, #13]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	32ae      	adds	r2, #174	; 0xae
 800d7f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7fa:	689b      	ldr	r3, [r3, #8]
 800d7fc:	6839      	ldr	r1, [r7, #0]
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	4798      	blx	r3
 800d802:	4603      	mov	r3, r0
 800d804:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d806:	e156      	b.n	800dab6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	785b      	ldrb	r3, [r3, #1]
 800d80c:	2b03      	cmp	r3, #3
 800d80e:	d008      	beq.n	800d822 <USBD_StdEPReq+0x9a>
 800d810:	2b03      	cmp	r3, #3
 800d812:	f300 8145 	bgt.w	800daa0 <USBD_StdEPReq+0x318>
 800d816:	2b00      	cmp	r3, #0
 800d818:	f000 809b 	beq.w	800d952 <USBD_StdEPReq+0x1ca>
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	d03c      	beq.n	800d89a <USBD_StdEPReq+0x112>
 800d820:	e13e      	b.n	800daa0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	2b02      	cmp	r3, #2
 800d82c:	d002      	beq.n	800d834 <USBD_StdEPReq+0xac>
 800d82e:	2b03      	cmp	r3, #3
 800d830:	d016      	beq.n	800d860 <USBD_StdEPReq+0xd8>
 800d832:	e02c      	b.n	800d88e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d834:	7bbb      	ldrb	r3, [r7, #14]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d00d      	beq.n	800d856 <USBD_StdEPReq+0xce>
 800d83a:	7bbb      	ldrb	r3, [r7, #14]
 800d83c:	2b80      	cmp	r3, #128	; 0x80
 800d83e:	d00a      	beq.n	800d856 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d840:	7bbb      	ldrb	r3, [r7, #14]
 800d842:	4619      	mov	r1, r3
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f002 fcbf 	bl	80101c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d84a:	2180      	movs	r1, #128	; 0x80
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f002 fcbb 	bl	80101c8 <USBD_LL_StallEP>
 800d852:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d854:	e020      	b.n	800d898 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d856:	6839      	ldr	r1, [r7, #0]
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f000 fc7a 	bl	800e152 <USBD_CtlError>
              break;
 800d85e:	e01b      	b.n	800d898 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	885b      	ldrh	r3, [r3, #2]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d10e      	bne.n	800d886 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d868:	7bbb      	ldrb	r3, [r7, #14]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d00b      	beq.n	800d886 <USBD_StdEPReq+0xfe>
 800d86e:	7bbb      	ldrb	r3, [r7, #14]
 800d870:	2b80      	cmp	r3, #128	; 0x80
 800d872:	d008      	beq.n	800d886 <USBD_StdEPReq+0xfe>
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	88db      	ldrh	r3, [r3, #6]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d104      	bne.n	800d886 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d87c:	7bbb      	ldrb	r3, [r7, #14]
 800d87e:	4619      	mov	r1, r3
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f002 fca1 	bl	80101c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f000 fd2e 	bl	800e2e8 <USBD_CtlSendStatus>

              break;
 800d88c:	e004      	b.n	800d898 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d88e:	6839      	ldr	r1, [r7, #0]
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f000 fc5e 	bl	800e152 <USBD_CtlError>
              break;
 800d896:	bf00      	nop
          }
          break;
 800d898:	e107      	b.n	800daaa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	2b02      	cmp	r3, #2
 800d8a4:	d002      	beq.n	800d8ac <USBD_StdEPReq+0x124>
 800d8a6:	2b03      	cmp	r3, #3
 800d8a8:	d016      	beq.n	800d8d8 <USBD_StdEPReq+0x150>
 800d8aa:	e04b      	b.n	800d944 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d8ac:	7bbb      	ldrb	r3, [r7, #14]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d00d      	beq.n	800d8ce <USBD_StdEPReq+0x146>
 800d8b2:	7bbb      	ldrb	r3, [r7, #14]
 800d8b4:	2b80      	cmp	r3, #128	; 0x80
 800d8b6:	d00a      	beq.n	800d8ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d8b8:	7bbb      	ldrb	r3, [r7, #14]
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f002 fc83 	bl	80101c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d8c2:	2180      	movs	r1, #128	; 0x80
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f002 fc7f 	bl	80101c8 <USBD_LL_StallEP>
 800d8ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d8cc:	e040      	b.n	800d950 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d8ce:	6839      	ldr	r1, [r7, #0]
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f000 fc3e 	bl	800e152 <USBD_CtlError>
              break;
 800d8d6:	e03b      	b.n	800d950 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	885b      	ldrh	r3, [r3, #2]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d136      	bne.n	800d94e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d8e0:	7bbb      	ldrb	r3, [r7, #14]
 800d8e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d004      	beq.n	800d8f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d8ea:	7bbb      	ldrb	r3, [r7, #14]
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f002 fc89 	bl	8010206 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f000 fcf7 	bl	800e2e8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d8fa:	7bbb      	ldrb	r3, [r7, #14]
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f7ff fde2 	bl	800d4c8 <USBD_CoreFindEP>
 800d904:	4603      	mov	r3, r0
 800d906:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d908:	7b7b      	ldrb	r3, [r7, #13]
 800d90a:	2bff      	cmp	r3, #255	; 0xff
 800d90c:	d01f      	beq.n	800d94e <USBD_StdEPReq+0x1c6>
 800d90e:	7b7b      	ldrb	r3, [r7, #13]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d11c      	bne.n	800d94e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d914:	7b7a      	ldrb	r2, [r7, #13]
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d91c:	7b7a      	ldrb	r2, [r7, #13]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	32ae      	adds	r2, #174	; 0xae
 800d922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d926:	689b      	ldr	r3, [r3, #8]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d010      	beq.n	800d94e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d92c:	7b7a      	ldrb	r2, [r7, #13]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	32ae      	adds	r2, #174	; 0xae
 800d932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d936:	689b      	ldr	r3, [r3, #8]
 800d938:	6839      	ldr	r1, [r7, #0]
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	4798      	blx	r3
 800d93e:	4603      	mov	r3, r0
 800d940:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d942:	e004      	b.n	800d94e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d944:	6839      	ldr	r1, [r7, #0]
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f000 fc03 	bl	800e152 <USBD_CtlError>
              break;
 800d94c:	e000      	b.n	800d950 <USBD_StdEPReq+0x1c8>
              break;
 800d94e:	bf00      	nop
          }
          break;
 800d950:	e0ab      	b.n	800daaa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d958:	b2db      	uxtb	r3, r3
 800d95a:	2b02      	cmp	r3, #2
 800d95c:	d002      	beq.n	800d964 <USBD_StdEPReq+0x1dc>
 800d95e:	2b03      	cmp	r3, #3
 800d960:	d032      	beq.n	800d9c8 <USBD_StdEPReq+0x240>
 800d962:	e097      	b.n	800da94 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d964:	7bbb      	ldrb	r3, [r7, #14]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d007      	beq.n	800d97a <USBD_StdEPReq+0x1f2>
 800d96a:	7bbb      	ldrb	r3, [r7, #14]
 800d96c:	2b80      	cmp	r3, #128	; 0x80
 800d96e:	d004      	beq.n	800d97a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d970:	6839      	ldr	r1, [r7, #0]
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f000 fbed 	bl	800e152 <USBD_CtlError>
                break;
 800d978:	e091      	b.n	800da9e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d97a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	da0b      	bge.n	800d99a <USBD_StdEPReq+0x212>
 800d982:	7bbb      	ldrb	r3, [r7, #14]
 800d984:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d988:	4613      	mov	r3, r2
 800d98a:	009b      	lsls	r3, r3, #2
 800d98c:	4413      	add	r3, r2
 800d98e:	009b      	lsls	r3, r3, #2
 800d990:	3310      	adds	r3, #16
 800d992:	687a      	ldr	r2, [r7, #4]
 800d994:	4413      	add	r3, r2
 800d996:	3304      	adds	r3, #4
 800d998:	e00b      	b.n	800d9b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d99a:	7bbb      	ldrb	r3, [r7, #14]
 800d99c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d9a0:	4613      	mov	r3, r2
 800d9a2:	009b      	lsls	r3, r3, #2
 800d9a4:	4413      	add	r3, r2
 800d9a6:	009b      	lsls	r3, r3, #2
 800d9a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d9ac:	687a      	ldr	r2, [r7, #4]
 800d9ae:	4413      	add	r3, r2
 800d9b0:	3304      	adds	r3, #4
 800d9b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	2202      	movs	r2, #2
 800d9be:	4619      	mov	r1, r3
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f000 fc37 	bl	800e234 <USBD_CtlSendData>
              break;
 800d9c6:	e06a      	b.n	800da9e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d9c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	da11      	bge.n	800d9f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d9d0:	7bbb      	ldrb	r3, [r7, #14]
 800d9d2:	f003 020f 	and.w	r2, r3, #15
 800d9d6:	6879      	ldr	r1, [r7, #4]
 800d9d8:	4613      	mov	r3, r2
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	4413      	add	r3, r2
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	440b      	add	r3, r1
 800d9e2:	3324      	adds	r3, #36	; 0x24
 800d9e4:	881b      	ldrh	r3, [r3, #0]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d117      	bne.n	800da1a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d9ea:	6839      	ldr	r1, [r7, #0]
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f000 fbb0 	bl	800e152 <USBD_CtlError>
                  break;
 800d9f2:	e054      	b.n	800da9e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d9f4:	7bbb      	ldrb	r3, [r7, #14]
 800d9f6:	f003 020f 	and.w	r2, r3, #15
 800d9fa:	6879      	ldr	r1, [r7, #4]
 800d9fc:	4613      	mov	r3, r2
 800d9fe:	009b      	lsls	r3, r3, #2
 800da00:	4413      	add	r3, r2
 800da02:	009b      	lsls	r3, r3, #2
 800da04:	440b      	add	r3, r1
 800da06:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800da0a:	881b      	ldrh	r3, [r3, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d104      	bne.n	800da1a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800da10:	6839      	ldr	r1, [r7, #0]
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f000 fb9d 	bl	800e152 <USBD_CtlError>
                  break;
 800da18:	e041      	b.n	800da9e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800da1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	da0b      	bge.n	800da3a <USBD_StdEPReq+0x2b2>
 800da22:	7bbb      	ldrb	r3, [r7, #14]
 800da24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800da28:	4613      	mov	r3, r2
 800da2a:	009b      	lsls	r3, r3, #2
 800da2c:	4413      	add	r3, r2
 800da2e:	009b      	lsls	r3, r3, #2
 800da30:	3310      	adds	r3, #16
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	4413      	add	r3, r2
 800da36:	3304      	adds	r3, #4
 800da38:	e00b      	b.n	800da52 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800da3a:	7bbb      	ldrb	r3, [r7, #14]
 800da3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800da40:	4613      	mov	r3, r2
 800da42:	009b      	lsls	r3, r3, #2
 800da44:	4413      	add	r3, r2
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	4413      	add	r3, r2
 800da50:	3304      	adds	r3, #4
 800da52:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800da54:	7bbb      	ldrb	r3, [r7, #14]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d002      	beq.n	800da60 <USBD_StdEPReq+0x2d8>
 800da5a:	7bbb      	ldrb	r3, [r7, #14]
 800da5c:	2b80      	cmp	r3, #128	; 0x80
 800da5e:	d103      	bne.n	800da68 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	2200      	movs	r2, #0
 800da64:	601a      	str	r2, [r3, #0]
 800da66:	e00e      	b.n	800da86 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800da68:	7bbb      	ldrb	r3, [r7, #14]
 800da6a:	4619      	mov	r1, r3
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f002 fbe9 	bl	8010244 <USBD_LL_IsStallEP>
 800da72:	4603      	mov	r3, r0
 800da74:	2b00      	cmp	r3, #0
 800da76:	d003      	beq.n	800da80 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	2201      	movs	r2, #1
 800da7c:	601a      	str	r2, [r3, #0]
 800da7e:	e002      	b.n	800da86 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	2200      	movs	r2, #0
 800da84:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	2202      	movs	r2, #2
 800da8a:	4619      	mov	r1, r3
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f000 fbd1 	bl	800e234 <USBD_CtlSendData>
              break;
 800da92:	e004      	b.n	800da9e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800da94:	6839      	ldr	r1, [r7, #0]
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f000 fb5b 	bl	800e152 <USBD_CtlError>
              break;
 800da9c:	bf00      	nop
          }
          break;
 800da9e:	e004      	b.n	800daaa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800daa0:	6839      	ldr	r1, [r7, #0]
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f000 fb55 	bl	800e152 <USBD_CtlError>
          break;
 800daa8:	bf00      	nop
      }
      break;
 800daaa:	e005      	b.n	800dab8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800daac:	6839      	ldr	r1, [r7, #0]
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f000 fb4f 	bl	800e152 <USBD_CtlError>
      break;
 800dab4:	e000      	b.n	800dab8 <USBD_StdEPReq+0x330>
      break;
 800dab6:	bf00      	nop
  }

  return ret;
 800dab8:	7bfb      	ldrb	r3, [r7, #15]
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3710      	adds	r7, #16
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}
	...

0800dac4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dace:	2300      	movs	r3, #0
 800dad0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dad2:	2300      	movs	r3, #0
 800dad4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dad6:	2300      	movs	r3, #0
 800dad8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	885b      	ldrh	r3, [r3, #2]
 800dade:	0a1b      	lsrs	r3, r3, #8
 800dae0:	b29b      	uxth	r3, r3
 800dae2:	3b01      	subs	r3, #1
 800dae4:	2b06      	cmp	r3, #6
 800dae6:	f200 8128 	bhi.w	800dd3a <USBD_GetDescriptor+0x276>
 800daea:	a201      	add	r2, pc, #4	; (adr r2, 800daf0 <USBD_GetDescriptor+0x2c>)
 800daec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daf0:	0800db0d 	.word	0x0800db0d
 800daf4:	0800db25 	.word	0x0800db25
 800daf8:	0800db65 	.word	0x0800db65
 800dafc:	0800dd3b 	.word	0x0800dd3b
 800db00:	0800dd3b 	.word	0x0800dd3b
 800db04:	0800dcdb 	.word	0x0800dcdb
 800db08:	0800dd07 	.word	0x0800dd07
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	687a      	ldr	r2, [r7, #4]
 800db16:	7c12      	ldrb	r2, [r2, #16]
 800db18:	f107 0108 	add.w	r1, r7, #8
 800db1c:	4610      	mov	r0, r2
 800db1e:	4798      	blx	r3
 800db20:	60f8      	str	r0, [r7, #12]
      break;
 800db22:	e112      	b.n	800dd4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	7c1b      	ldrb	r3, [r3, #16]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d10d      	bne.n	800db48 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db34:	f107 0208 	add.w	r2, r7, #8
 800db38:	4610      	mov	r0, r2
 800db3a:	4798      	blx	r3
 800db3c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	3301      	adds	r3, #1
 800db42:	2202      	movs	r2, #2
 800db44:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800db46:	e100      	b.n	800dd4a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db50:	f107 0208 	add.w	r2, r7, #8
 800db54:	4610      	mov	r0, r2
 800db56:	4798      	blx	r3
 800db58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	3301      	adds	r3, #1
 800db5e:	2202      	movs	r2, #2
 800db60:	701a      	strb	r2, [r3, #0]
      break;
 800db62:	e0f2      	b.n	800dd4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	885b      	ldrh	r3, [r3, #2]
 800db68:	b2db      	uxtb	r3, r3
 800db6a:	2b05      	cmp	r3, #5
 800db6c:	f200 80ac 	bhi.w	800dcc8 <USBD_GetDescriptor+0x204>
 800db70:	a201      	add	r2, pc, #4	; (adr r2, 800db78 <USBD_GetDescriptor+0xb4>)
 800db72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db76:	bf00      	nop
 800db78:	0800db91 	.word	0x0800db91
 800db7c:	0800dbc5 	.word	0x0800dbc5
 800db80:	0800dbf9 	.word	0x0800dbf9
 800db84:	0800dc2d 	.word	0x0800dc2d
 800db88:	0800dc61 	.word	0x0800dc61
 800db8c:	0800dc95 	.word	0x0800dc95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d00b      	beq.n	800dbb4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	687a      	ldr	r2, [r7, #4]
 800dba6:	7c12      	ldrb	r2, [r2, #16]
 800dba8:	f107 0108 	add.w	r1, r7, #8
 800dbac:	4610      	mov	r0, r2
 800dbae:	4798      	blx	r3
 800dbb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbb2:	e091      	b.n	800dcd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dbb4:	6839      	ldr	r1, [r7, #0]
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f000 facb 	bl	800e152 <USBD_CtlError>
            err++;
 800dbbc:	7afb      	ldrb	r3, [r7, #11]
 800dbbe:	3301      	adds	r3, #1
 800dbc0:	72fb      	strb	r3, [r7, #11]
          break;
 800dbc2:	e089      	b.n	800dcd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbca:	689b      	ldr	r3, [r3, #8]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d00b      	beq.n	800dbe8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	7c12      	ldrb	r2, [r2, #16]
 800dbdc:	f107 0108 	add.w	r1, r7, #8
 800dbe0:	4610      	mov	r0, r2
 800dbe2:	4798      	blx	r3
 800dbe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbe6:	e077      	b.n	800dcd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dbe8:	6839      	ldr	r1, [r7, #0]
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f000 fab1 	bl	800e152 <USBD_CtlError>
            err++;
 800dbf0:	7afb      	ldrb	r3, [r7, #11]
 800dbf2:	3301      	adds	r3, #1
 800dbf4:	72fb      	strb	r3, [r7, #11]
          break;
 800dbf6:	e06f      	b.n	800dcd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbfe:	68db      	ldr	r3, [r3, #12]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d00b      	beq.n	800dc1c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc0a:	68db      	ldr	r3, [r3, #12]
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	7c12      	ldrb	r2, [r2, #16]
 800dc10:	f107 0108 	add.w	r1, r7, #8
 800dc14:	4610      	mov	r0, r2
 800dc16:	4798      	blx	r3
 800dc18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc1a:	e05d      	b.n	800dcd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dc1c:	6839      	ldr	r1, [r7, #0]
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f000 fa97 	bl	800e152 <USBD_CtlError>
            err++;
 800dc24:	7afb      	ldrb	r3, [r7, #11]
 800dc26:	3301      	adds	r3, #1
 800dc28:	72fb      	strb	r3, [r7, #11]
          break;
 800dc2a:	e055      	b.n	800dcd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc32:	691b      	ldr	r3, [r3, #16]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d00b      	beq.n	800dc50 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc3e:	691b      	ldr	r3, [r3, #16]
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	7c12      	ldrb	r2, [r2, #16]
 800dc44:	f107 0108 	add.w	r1, r7, #8
 800dc48:	4610      	mov	r0, r2
 800dc4a:	4798      	blx	r3
 800dc4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc4e:	e043      	b.n	800dcd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dc50:	6839      	ldr	r1, [r7, #0]
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f000 fa7d 	bl	800e152 <USBD_CtlError>
            err++;
 800dc58:	7afb      	ldrb	r3, [r7, #11]
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	72fb      	strb	r3, [r7, #11]
          break;
 800dc5e:	e03b      	b.n	800dcd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc66:	695b      	ldr	r3, [r3, #20]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d00b      	beq.n	800dc84 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc72:	695b      	ldr	r3, [r3, #20]
 800dc74:	687a      	ldr	r2, [r7, #4]
 800dc76:	7c12      	ldrb	r2, [r2, #16]
 800dc78:	f107 0108 	add.w	r1, r7, #8
 800dc7c:	4610      	mov	r0, r2
 800dc7e:	4798      	blx	r3
 800dc80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc82:	e029      	b.n	800dcd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dc84:	6839      	ldr	r1, [r7, #0]
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f000 fa63 	bl	800e152 <USBD_CtlError>
            err++;
 800dc8c:	7afb      	ldrb	r3, [r7, #11]
 800dc8e:	3301      	adds	r3, #1
 800dc90:	72fb      	strb	r3, [r7, #11]
          break;
 800dc92:	e021      	b.n	800dcd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc9a:	699b      	ldr	r3, [r3, #24]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d00b      	beq.n	800dcb8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dca6:	699b      	ldr	r3, [r3, #24]
 800dca8:	687a      	ldr	r2, [r7, #4]
 800dcaa:	7c12      	ldrb	r2, [r2, #16]
 800dcac:	f107 0108 	add.w	r1, r7, #8
 800dcb0:	4610      	mov	r0, r2
 800dcb2:	4798      	blx	r3
 800dcb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcb6:	e00f      	b.n	800dcd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dcb8:	6839      	ldr	r1, [r7, #0]
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f000 fa49 	bl	800e152 <USBD_CtlError>
            err++;
 800dcc0:	7afb      	ldrb	r3, [r7, #11]
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	72fb      	strb	r3, [r7, #11]
          break;
 800dcc6:	e007      	b.n	800dcd8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dcc8:	6839      	ldr	r1, [r7, #0]
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f000 fa41 	bl	800e152 <USBD_CtlError>
          err++;
 800dcd0:	7afb      	ldrb	r3, [r7, #11]
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800dcd6:	bf00      	nop
      }
      break;
 800dcd8:	e037      	b.n	800dd4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	7c1b      	ldrb	r3, [r3, #16]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d109      	bne.n	800dcf6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcea:	f107 0208 	add.w	r2, r7, #8
 800dcee:	4610      	mov	r0, r2
 800dcf0:	4798      	blx	r3
 800dcf2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dcf4:	e029      	b.n	800dd4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dcf6:	6839      	ldr	r1, [r7, #0]
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f000 fa2a 	bl	800e152 <USBD_CtlError>
        err++;
 800dcfe:	7afb      	ldrb	r3, [r7, #11]
 800dd00:	3301      	adds	r3, #1
 800dd02:	72fb      	strb	r3, [r7, #11]
      break;
 800dd04:	e021      	b.n	800dd4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	7c1b      	ldrb	r3, [r3, #16]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d10d      	bne.n	800dd2a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd16:	f107 0208 	add.w	r2, r7, #8
 800dd1a:	4610      	mov	r0, r2
 800dd1c:	4798      	blx	r3
 800dd1e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	3301      	adds	r3, #1
 800dd24:	2207      	movs	r2, #7
 800dd26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dd28:	e00f      	b.n	800dd4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dd2a:	6839      	ldr	r1, [r7, #0]
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f000 fa10 	bl	800e152 <USBD_CtlError>
        err++;
 800dd32:	7afb      	ldrb	r3, [r7, #11]
 800dd34:	3301      	adds	r3, #1
 800dd36:	72fb      	strb	r3, [r7, #11]
      break;
 800dd38:	e007      	b.n	800dd4a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800dd3a:	6839      	ldr	r1, [r7, #0]
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f000 fa08 	bl	800e152 <USBD_CtlError>
      err++;
 800dd42:	7afb      	ldrb	r3, [r7, #11]
 800dd44:	3301      	adds	r3, #1
 800dd46:	72fb      	strb	r3, [r7, #11]
      break;
 800dd48:	bf00      	nop
  }

  if (err != 0U)
 800dd4a:	7afb      	ldrb	r3, [r7, #11]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d11e      	bne.n	800dd8e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	88db      	ldrh	r3, [r3, #6]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d016      	beq.n	800dd86 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800dd58:	893b      	ldrh	r3, [r7, #8]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d00e      	beq.n	800dd7c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	88da      	ldrh	r2, [r3, #6]
 800dd62:	893b      	ldrh	r3, [r7, #8]
 800dd64:	4293      	cmp	r3, r2
 800dd66:	bf28      	it	cs
 800dd68:	4613      	movcs	r3, r2
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dd6e:	893b      	ldrh	r3, [r7, #8]
 800dd70:	461a      	mov	r2, r3
 800dd72:	68f9      	ldr	r1, [r7, #12]
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f000 fa5d 	bl	800e234 <USBD_CtlSendData>
 800dd7a:	e009      	b.n	800dd90 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dd7c:	6839      	ldr	r1, [r7, #0]
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f000 f9e7 	bl	800e152 <USBD_CtlError>
 800dd84:	e004      	b.n	800dd90 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 faae 	bl	800e2e8 <USBD_CtlSendStatus>
 800dd8c:	e000      	b.n	800dd90 <USBD_GetDescriptor+0x2cc>
    return;
 800dd8e:	bf00      	nop
  }
}
 800dd90:	3710      	adds	r7, #16
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop

0800dd98 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b084      	sub	sp, #16
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	889b      	ldrh	r3, [r3, #4]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d131      	bne.n	800de0e <USBD_SetAddress+0x76>
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	88db      	ldrh	r3, [r3, #6]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d12d      	bne.n	800de0e <USBD_SetAddress+0x76>
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	885b      	ldrh	r3, [r3, #2]
 800ddb6:	2b7f      	cmp	r3, #127	; 0x7f
 800ddb8:	d829      	bhi.n	800de0e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	885b      	ldrh	r3, [r3, #2]
 800ddbe:	b2db      	uxtb	r3, r3
 800ddc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddc4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	2b03      	cmp	r3, #3
 800ddd0:	d104      	bne.n	800dddc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ddd2:	6839      	ldr	r1, [r7, #0]
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 f9bc 	bl	800e152 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddda:	e01d      	b.n	800de18 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	7bfa      	ldrb	r2, [r7, #15]
 800dde0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dde4:	7bfb      	ldrb	r3, [r7, #15]
 800dde6:	4619      	mov	r1, r3
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f002 fa57 	bl	801029c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 fa7a 	bl	800e2e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ddf4:	7bfb      	ldrb	r3, [r7, #15]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d004      	beq.n	800de04 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2202      	movs	r2, #2
 800ddfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de02:	e009      	b.n	800de18 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2201      	movs	r2, #1
 800de08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de0c:	e004      	b.n	800de18 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800de0e:	6839      	ldr	r1, [r7, #0]
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f000 f99e 	bl	800e152 <USBD_CtlError>
  }
}
 800de16:	bf00      	nop
 800de18:	bf00      	nop
 800de1a:	3710      	adds	r7, #16
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b084      	sub	sp, #16
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de2a:	2300      	movs	r3, #0
 800de2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	885b      	ldrh	r3, [r3, #2]
 800de32:	b2da      	uxtb	r2, r3
 800de34:	4b4e      	ldr	r3, [pc, #312]	; (800df70 <USBD_SetConfig+0x150>)
 800de36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800de38:	4b4d      	ldr	r3, [pc, #308]	; (800df70 <USBD_SetConfig+0x150>)
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	2b01      	cmp	r3, #1
 800de3e:	d905      	bls.n	800de4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800de40:	6839      	ldr	r1, [r7, #0]
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 f985 	bl	800e152 <USBD_CtlError>
    return USBD_FAIL;
 800de48:	2303      	movs	r3, #3
 800de4a:	e08c      	b.n	800df66 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de52:	b2db      	uxtb	r3, r3
 800de54:	2b02      	cmp	r3, #2
 800de56:	d002      	beq.n	800de5e <USBD_SetConfig+0x3e>
 800de58:	2b03      	cmp	r3, #3
 800de5a:	d029      	beq.n	800deb0 <USBD_SetConfig+0x90>
 800de5c:	e075      	b.n	800df4a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800de5e:	4b44      	ldr	r3, [pc, #272]	; (800df70 <USBD_SetConfig+0x150>)
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d020      	beq.n	800dea8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800de66:	4b42      	ldr	r3, [pc, #264]	; (800df70 <USBD_SetConfig+0x150>)
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	461a      	mov	r2, r3
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800de70:	4b3f      	ldr	r3, [pc, #252]	; (800df70 <USBD_SetConfig+0x150>)
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	4619      	mov	r1, r3
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f7fe ffe7 	bl	800ce4a <USBD_SetClassConfig>
 800de7c:	4603      	mov	r3, r0
 800de7e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800de80:	7bfb      	ldrb	r3, [r7, #15]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d008      	beq.n	800de98 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800de86:	6839      	ldr	r1, [r7, #0]
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f000 f962 	bl	800e152 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2202      	movs	r2, #2
 800de92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800de96:	e065      	b.n	800df64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f000 fa25 	bl	800e2e8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2203      	movs	r2, #3
 800dea2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dea6:	e05d      	b.n	800df64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f000 fa1d 	bl	800e2e8 <USBD_CtlSendStatus>
      break;
 800deae:	e059      	b.n	800df64 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800deb0:	4b2f      	ldr	r3, [pc, #188]	; (800df70 <USBD_SetConfig+0x150>)
 800deb2:	781b      	ldrb	r3, [r3, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d112      	bne.n	800dede <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2202      	movs	r2, #2
 800debc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800dec0:	4b2b      	ldr	r3, [pc, #172]	; (800df70 <USBD_SetConfig+0x150>)
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	461a      	mov	r2, r3
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800deca:	4b29      	ldr	r3, [pc, #164]	; (800df70 <USBD_SetConfig+0x150>)
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	4619      	mov	r1, r3
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f7fe ffd6 	bl	800ce82 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f000 fa06 	bl	800e2e8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dedc:	e042      	b.n	800df64 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800dede:	4b24      	ldr	r3, [pc, #144]	; (800df70 <USBD_SetConfig+0x150>)
 800dee0:	781b      	ldrb	r3, [r3, #0]
 800dee2:	461a      	mov	r2, r3
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	685b      	ldr	r3, [r3, #4]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d02a      	beq.n	800df42 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	b2db      	uxtb	r3, r3
 800def2:	4619      	mov	r1, r3
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f7fe ffc4 	bl	800ce82 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800defa:	4b1d      	ldr	r3, [pc, #116]	; (800df70 <USBD_SetConfig+0x150>)
 800defc:	781b      	ldrb	r3, [r3, #0]
 800defe:	461a      	mov	r2, r3
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800df04:	4b1a      	ldr	r3, [pc, #104]	; (800df70 <USBD_SetConfig+0x150>)
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	4619      	mov	r1, r3
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f7fe ff9d 	bl	800ce4a <USBD_SetClassConfig>
 800df10:	4603      	mov	r3, r0
 800df12:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800df14:	7bfb      	ldrb	r3, [r7, #15]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d00f      	beq.n	800df3a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800df1a:	6839      	ldr	r1, [r7, #0]
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f000 f918 	bl	800e152 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	b2db      	uxtb	r3, r3
 800df28:	4619      	mov	r1, r3
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f7fe ffa9 	bl	800ce82 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2202      	movs	r2, #2
 800df34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800df38:	e014      	b.n	800df64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f000 f9d4 	bl	800e2e8 <USBD_CtlSendStatus>
      break;
 800df40:	e010      	b.n	800df64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 f9d0 	bl	800e2e8 <USBD_CtlSendStatus>
      break;
 800df48:	e00c      	b.n	800df64 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800df4a:	6839      	ldr	r1, [r7, #0]
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f000 f900 	bl	800e152 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800df52:	4b07      	ldr	r3, [pc, #28]	; (800df70 <USBD_SetConfig+0x150>)
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	4619      	mov	r1, r3
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f7fe ff92 	bl	800ce82 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800df5e:	2303      	movs	r3, #3
 800df60:	73fb      	strb	r3, [r7, #15]
      break;
 800df62:	bf00      	nop
  }

  return ret;
 800df64:	7bfb      	ldrb	r3, [r7, #15]
}
 800df66:	4618      	mov	r0, r3
 800df68:	3710      	adds	r7, #16
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}
 800df6e:	bf00      	nop
 800df70:	20000ccc 	.word	0x20000ccc

0800df74 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	88db      	ldrh	r3, [r3, #6]
 800df82:	2b01      	cmp	r3, #1
 800df84:	d004      	beq.n	800df90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800df86:	6839      	ldr	r1, [r7, #0]
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f000 f8e2 	bl	800e152 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800df8e:	e023      	b.n	800dfd8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df96:	b2db      	uxtb	r3, r3
 800df98:	2b02      	cmp	r3, #2
 800df9a:	dc02      	bgt.n	800dfa2 <USBD_GetConfig+0x2e>
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	dc03      	bgt.n	800dfa8 <USBD_GetConfig+0x34>
 800dfa0:	e015      	b.n	800dfce <USBD_GetConfig+0x5a>
 800dfa2:	2b03      	cmp	r3, #3
 800dfa4:	d00b      	beq.n	800dfbe <USBD_GetConfig+0x4a>
 800dfa6:	e012      	b.n	800dfce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	3308      	adds	r3, #8
 800dfb2:	2201      	movs	r2, #1
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f000 f93c 	bl	800e234 <USBD_CtlSendData>
        break;
 800dfbc:	e00c      	b.n	800dfd8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	3304      	adds	r3, #4
 800dfc2:	2201      	movs	r2, #1
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 f934 	bl	800e234 <USBD_CtlSendData>
        break;
 800dfcc:	e004      	b.n	800dfd8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dfce:	6839      	ldr	r1, [r7, #0]
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f000 f8be 	bl	800e152 <USBD_CtlError>
        break;
 800dfd6:	bf00      	nop
}
 800dfd8:	bf00      	nop
 800dfda:	3708      	adds	r7, #8
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dff0:	b2db      	uxtb	r3, r3
 800dff2:	3b01      	subs	r3, #1
 800dff4:	2b02      	cmp	r3, #2
 800dff6:	d81e      	bhi.n	800e036 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	88db      	ldrh	r3, [r3, #6]
 800dffc:	2b02      	cmp	r3, #2
 800dffe:	d004      	beq.n	800e00a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e000:	6839      	ldr	r1, [r7, #0]
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 f8a5 	bl	800e152 <USBD_CtlError>
        break;
 800e008:	e01a      	b.n	800e040 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2201      	movs	r2, #1
 800e00e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e016:	2b00      	cmp	r3, #0
 800e018:	d005      	beq.n	800e026 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	f043 0202 	orr.w	r2, r3, #2
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	330c      	adds	r3, #12
 800e02a:	2202      	movs	r2, #2
 800e02c:	4619      	mov	r1, r3
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f000 f900 	bl	800e234 <USBD_CtlSendData>
      break;
 800e034:	e004      	b.n	800e040 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e036:	6839      	ldr	r1, [r7, #0]
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f000 f88a 	bl	800e152 <USBD_CtlError>
      break;
 800e03e:	bf00      	nop
  }
}
 800e040:	bf00      	nop
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}

0800e048 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	885b      	ldrh	r3, [r3, #2]
 800e056:	2b01      	cmp	r3, #1
 800e058:	d107      	bne.n	800e06a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2201      	movs	r2, #1
 800e05e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f000 f940 	bl	800e2e8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e068:	e013      	b.n	800e092 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	885b      	ldrh	r3, [r3, #2]
 800e06e:	2b02      	cmp	r3, #2
 800e070:	d10b      	bne.n	800e08a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	889b      	ldrh	r3, [r3, #4]
 800e076:	0a1b      	lsrs	r3, r3, #8
 800e078:	b29b      	uxth	r3, r3
 800e07a:	b2da      	uxtb	r2, r3
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f000 f930 	bl	800e2e8 <USBD_CtlSendStatus>
}
 800e088:	e003      	b.n	800e092 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e08a:	6839      	ldr	r1, [r7, #0]
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f000 f860 	bl	800e152 <USBD_CtlError>
}
 800e092:	bf00      	nop
 800e094:	3708      	adds	r7, #8
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}

0800e09a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e09a:	b580      	push	{r7, lr}
 800e09c:	b082      	sub	sp, #8
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]
 800e0a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	3b01      	subs	r3, #1
 800e0ae:	2b02      	cmp	r3, #2
 800e0b0:	d80b      	bhi.n	800e0ca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	885b      	ldrh	r3, [r3, #2]
 800e0b6:	2b01      	cmp	r3, #1
 800e0b8:	d10c      	bne.n	800e0d4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2200      	movs	r2, #0
 800e0be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 f910 	bl	800e2e8 <USBD_CtlSendStatus>
      }
      break;
 800e0c8:	e004      	b.n	800e0d4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e0ca:	6839      	ldr	r1, [r7, #0]
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f000 f840 	bl	800e152 <USBD_CtlError>
      break;
 800e0d2:	e000      	b.n	800e0d6 <USBD_ClrFeature+0x3c>
      break;
 800e0d4:	bf00      	nop
  }
}
 800e0d6:	bf00      	nop
 800e0d8:	3708      	adds	r7, #8
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}

0800e0de <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e0de:	b580      	push	{r7, lr}
 800e0e0:	b084      	sub	sp, #16
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6078      	str	r0, [r7, #4]
 800e0e6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	781a      	ldrb	r2, [r3, #0]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	3301      	adds	r3, #1
 800e0f8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	781a      	ldrb	r2, [r3, #0]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	3301      	adds	r3, #1
 800e106:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e108:	68f8      	ldr	r0, [r7, #12]
 800e10a:	f7ff fa41 	bl	800d590 <SWAPBYTE>
 800e10e:	4603      	mov	r3, r0
 800e110:	461a      	mov	r2, r3
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	3301      	adds	r3, #1
 800e11a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	3301      	adds	r3, #1
 800e120:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e122:	68f8      	ldr	r0, [r7, #12]
 800e124:	f7ff fa34 	bl	800d590 <SWAPBYTE>
 800e128:	4603      	mov	r3, r0
 800e12a:	461a      	mov	r2, r3
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	3301      	adds	r3, #1
 800e134:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	3301      	adds	r3, #1
 800e13a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e13c:	68f8      	ldr	r0, [r7, #12]
 800e13e:	f7ff fa27 	bl	800d590 <SWAPBYTE>
 800e142:	4603      	mov	r3, r0
 800e144:	461a      	mov	r2, r3
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	80da      	strh	r2, [r3, #6]
}
 800e14a:	bf00      	nop
 800e14c:	3710      	adds	r7, #16
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}

0800e152 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e152:	b580      	push	{r7, lr}
 800e154:	b082      	sub	sp, #8
 800e156:	af00      	add	r7, sp, #0
 800e158:	6078      	str	r0, [r7, #4]
 800e15a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e15c:	2180      	movs	r1, #128	; 0x80
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f002 f832 	bl	80101c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e164:	2100      	movs	r1, #0
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f002 f82e 	bl	80101c8 <USBD_LL_StallEP>
}
 800e16c:	bf00      	nop
 800e16e:	3708      	adds	r7, #8
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}

0800e174 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b086      	sub	sp, #24
 800e178:	af00      	add	r7, sp, #0
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	60b9      	str	r1, [r7, #8]
 800e17e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e180:	2300      	movs	r3, #0
 800e182:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d036      	beq.n	800e1f8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e18e:	6938      	ldr	r0, [r7, #16]
 800e190:	f000 f836 	bl	800e200 <USBD_GetLen>
 800e194:	4603      	mov	r3, r0
 800e196:	3301      	adds	r3, #1
 800e198:	b29b      	uxth	r3, r3
 800e19a:	005b      	lsls	r3, r3, #1
 800e19c:	b29a      	uxth	r2, r3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e1a2:	7dfb      	ldrb	r3, [r7, #23]
 800e1a4:	68ba      	ldr	r2, [r7, #8]
 800e1a6:	4413      	add	r3, r2
 800e1a8:	687a      	ldr	r2, [r7, #4]
 800e1aa:	7812      	ldrb	r2, [r2, #0]
 800e1ac:	701a      	strb	r2, [r3, #0]
  idx++;
 800e1ae:	7dfb      	ldrb	r3, [r7, #23]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e1b4:	7dfb      	ldrb	r3, [r7, #23]
 800e1b6:	68ba      	ldr	r2, [r7, #8]
 800e1b8:	4413      	add	r3, r2
 800e1ba:	2203      	movs	r2, #3
 800e1bc:	701a      	strb	r2, [r3, #0]
  idx++;
 800e1be:	7dfb      	ldrb	r3, [r7, #23]
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e1c4:	e013      	b.n	800e1ee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e1c6:	7dfb      	ldrb	r3, [r7, #23]
 800e1c8:	68ba      	ldr	r2, [r7, #8]
 800e1ca:	4413      	add	r3, r2
 800e1cc:	693a      	ldr	r2, [r7, #16]
 800e1ce:	7812      	ldrb	r2, [r2, #0]
 800e1d0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	613b      	str	r3, [r7, #16]
    idx++;
 800e1d8:	7dfb      	ldrb	r3, [r7, #23]
 800e1da:	3301      	adds	r3, #1
 800e1dc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e1de:	7dfb      	ldrb	r3, [r7, #23]
 800e1e0:	68ba      	ldr	r2, [r7, #8]
 800e1e2:	4413      	add	r3, r2
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	701a      	strb	r2, [r3, #0]
    idx++;
 800e1e8:	7dfb      	ldrb	r3, [r7, #23]
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	781b      	ldrb	r3, [r3, #0]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d1e7      	bne.n	800e1c6 <USBD_GetString+0x52>
 800e1f6:	e000      	b.n	800e1fa <USBD_GetString+0x86>
    return;
 800e1f8:	bf00      	nop
  }
}
 800e1fa:	3718      	adds	r7, #24
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e200:	b480      	push	{r7}
 800e202:	b085      	sub	sp, #20
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e208:	2300      	movs	r3, #0
 800e20a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e210:	e005      	b.n	800e21e <USBD_GetLen+0x1e>
  {
    len++;
 800e212:	7bfb      	ldrb	r3, [r7, #15]
 800e214:	3301      	adds	r3, #1
 800e216:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	3301      	adds	r3, #1
 800e21c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	781b      	ldrb	r3, [r3, #0]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d1f5      	bne.n	800e212 <USBD_GetLen+0x12>
  }

  return len;
 800e226:	7bfb      	ldrb	r3, [r7, #15]
}
 800e228:	4618      	mov	r0, r3
 800e22a:	3714      	adds	r7, #20
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr

0800e234 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b084      	sub	sp, #16
 800e238:	af00      	add	r7, sp, #0
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	60b9      	str	r1, [r7, #8]
 800e23e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2202      	movs	r2, #2
 800e244:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	687a      	ldr	r2, [r7, #4]
 800e24c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	68ba      	ldr	r2, [r7, #8]
 800e258:	2100      	movs	r1, #0
 800e25a:	68f8      	ldr	r0, [r7, #12]
 800e25c:	f002 f83d 	bl	80102da <USBD_LL_Transmit>

  return USBD_OK;
 800e260:	2300      	movs	r3, #0
}
 800e262:	4618      	mov	r0, r3
 800e264:	3710      	adds	r7, #16
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}

0800e26a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e26a:	b580      	push	{r7, lr}
 800e26c:	b084      	sub	sp, #16
 800e26e:	af00      	add	r7, sp, #0
 800e270:	60f8      	str	r0, [r7, #12]
 800e272:	60b9      	str	r1, [r7, #8]
 800e274:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	68ba      	ldr	r2, [r7, #8]
 800e27a:	2100      	movs	r1, #0
 800e27c:	68f8      	ldr	r0, [r7, #12]
 800e27e:	f002 f82c 	bl	80102da <USBD_LL_Transmit>

  return USBD_OK;
 800e282:	2300      	movs	r3, #0
}
 800e284:	4618      	mov	r0, r3
 800e286:	3710      	adds	r7, #16
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}

0800e28c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b084      	sub	sp, #16
 800e290:	af00      	add	r7, sp, #0
 800e292:	60f8      	str	r0, [r7, #12]
 800e294:	60b9      	str	r1, [r7, #8]
 800e296:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	2203      	movs	r2, #3
 800e29c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	687a      	ldr	r2, [r7, #4]
 800e2a4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	687a      	ldr	r2, [r7, #4]
 800e2ac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	68ba      	ldr	r2, [r7, #8]
 800e2b4:	2100      	movs	r1, #0
 800e2b6:	68f8      	ldr	r0, [r7, #12]
 800e2b8:	f002 f830 	bl	801031c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e2bc:	2300      	movs	r3, #0
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3710      	adds	r7, #16
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}

0800e2c6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e2c6:	b580      	push	{r7, lr}
 800e2c8:	b084      	sub	sp, #16
 800e2ca:	af00      	add	r7, sp, #0
 800e2cc:	60f8      	str	r0, [r7, #12]
 800e2ce:	60b9      	str	r1, [r7, #8]
 800e2d0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	68ba      	ldr	r2, [r7, #8]
 800e2d6:	2100      	movs	r1, #0
 800e2d8:	68f8      	ldr	r0, [r7, #12]
 800e2da:	f002 f81f 	bl	801031c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e2de:	2300      	movs	r3, #0
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3710      	adds	r7, #16
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2204      	movs	r2, #4
 800e2f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	2100      	movs	r1, #0
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f001 ffeb 	bl	80102da <USBD_LL_Transmit>

  return USBD_OK;
 800e304:	2300      	movs	r3, #0
}
 800e306:	4618      	mov	r0, r3
 800e308:	3708      	adds	r7, #8
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}

0800e30e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e30e:	b580      	push	{r7, lr}
 800e310:	b082      	sub	sp, #8
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2205      	movs	r2, #5
 800e31a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e31e:	2300      	movs	r3, #0
 800e320:	2200      	movs	r2, #0
 800e322:	2100      	movs	r1, #0
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f001 fff9 	bl	801031c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e32a:	2300      	movs	r3, #0
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3708      	adds	r7, #8
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <makeFreeRtosPriority>:
 800e334:	b480      	push	{r7}
 800e336:	b085      	sub	sp, #20
 800e338:	af00      	add	r7, sp, #0
 800e33a:	4603      	mov	r3, r0
 800e33c:	80fb      	strh	r3, [r7, #6]
 800e33e:	2300      	movs	r3, #0
 800e340:	60fb      	str	r3, [r7, #12]
 800e342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e346:	2b84      	cmp	r3, #132	; 0x84
 800e348:	d005      	beq.n	800e356 <makeFreeRtosPriority+0x22>
 800e34a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	4413      	add	r3, r2
 800e352:	3303      	adds	r3, #3
 800e354:	60fb      	str	r3, [r7, #12]
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	4618      	mov	r0, r3
 800e35a:	3714      	adds	r7, #20
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr

0800e364 <osKernelStart>:
 800e364:	b580      	push	{r7, lr}
 800e366:	af00      	add	r7, sp, #0
 800e368:	f000 fafe 	bl	800e968 <vTaskStartScheduler>
 800e36c:	2300      	movs	r3, #0
 800e36e:	4618      	mov	r0, r3
 800e370:	bd80      	pop	{r7, pc}

0800e372 <osThreadCreate>:
 800e372:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e374:	b089      	sub	sp, #36	; 0x24
 800e376:	af04      	add	r7, sp, #16
 800e378:	6078      	str	r0, [r7, #4]
 800e37a:	6039      	str	r1, [r7, #0]
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	695b      	ldr	r3, [r3, #20]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d020      	beq.n	800e3c6 <osThreadCreate+0x54>
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	699b      	ldr	r3, [r3, #24]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d01c      	beq.n	800e3c6 <osThreadCreate+0x54>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	685c      	ldr	r4, [r3, #4]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681d      	ldr	r5, [r3, #0]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	691e      	ldr	r6, [r3, #16]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7ff ffc8 	bl	800e334 <makeFreeRtosPriority>
 800e3a4:	4601      	mov	r1, r0
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	695b      	ldr	r3, [r3, #20]
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	6992      	ldr	r2, [r2, #24]
 800e3ae:	9202      	str	r2, [sp, #8]
 800e3b0:	9301      	str	r3, [sp, #4]
 800e3b2:	9100      	str	r1, [sp, #0]
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	4632      	mov	r2, r6
 800e3b8:	4629      	mov	r1, r5
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	f000 f8ed 	bl	800e59a <xTaskCreateStatic>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	60fb      	str	r3, [r7, #12]
 800e3c4:	e01c      	b.n	800e400 <osThreadCreate+0x8e>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	685c      	ldr	r4, [r3, #4]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681d      	ldr	r5, [r3, #0]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	691b      	ldr	r3, [r3, #16]
 800e3d2:	b29e      	uxth	r6, r3
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7ff ffaa 	bl	800e334 <makeFreeRtosPriority>
 800e3e0:	4602      	mov	r2, r0
 800e3e2:	f107 030c 	add.w	r3, r7, #12
 800e3e6:	9301      	str	r3, [sp, #4]
 800e3e8:	9200      	str	r2, [sp, #0]
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	4632      	mov	r2, r6
 800e3ee:	4629      	mov	r1, r5
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	f000 f92f 	bl	800e654 <xTaskCreate>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d001      	beq.n	800e400 <osThreadCreate+0x8e>
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	e000      	b.n	800e402 <osThreadCreate+0x90>
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	4618      	mov	r0, r3
 800e404:	3714      	adds	r7, #20
 800e406:	46bd      	mov	sp, r7
 800e408:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e40a <osDelay>:
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b084      	sub	sp, #16
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	60fb      	str	r3, [r7, #12]
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d001      	beq.n	800e420 <osDelay+0x16>
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	e000      	b.n	800e422 <osDelay+0x18>
 800e420:	2301      	movs	r3, #1
 800e422:	4618      	mov	r0, r3
 800e424:	f000 fa6c 	bl	800e900 <vTaskDelay>
 800e428:	2300      	movs	r3, #0
 800e42a:	4618      	mov	r0, r3
 800e42c:	3710      	adds	r7, #16
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}

0800e432 <vListInitialise>:
 800e432:	b480      	push	{r7}
 800e434:	b083      	sub	sp, #12
 800e436:	af00      	add	r7, sp, #0
 800e438:	6078      	str	r0, [r7, #4]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f103 0208 	add.w	r2, r3, #8
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	605a      	str	r2, [r3, #4]
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f04f 32ff 	mov.w	r2, #4294967295
 800e44a:	609a      	str	r2, [r3, #8]
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f103 0208 	add.w	r2, r3, #8
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	60da      	str	r2, [r3, #12]
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f103 0208 	add.w	r2, r3, #8
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	611a      	str	r2, [r3, #16]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2200      	movs	r2, #0
 800e464:	601a      	str	r2, [r3, #0]
 800e466:	bf00      	nop
 800e468:	370c      	adds	r7, #12
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr

0800e472 <vListInitialiseItem>:
 800e472:	b480      	push	{r7}
 800e474:	b083      	sub	sp, #12
 800e476:	af00      	add	r7, sp, #0
 800e478:	6078      	str	r0, [r7, #4]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2200      	movs	r2, #0
 800e47e:	611a      	str	r2, [r3, #16]
 800e480:	bf00      	nop
 800e482:	370c      	adds	r7, #12
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr

0800e48c <vListInsertEnd>:
 800e48c:	b480      	push	{r7}
 800e48e:	b085      	sub	sp, #20
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	6039      	str	r1, [r7, #0]
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	685b      	ldr	r3, [r3, #4]
 800e49a:	60fb      	str	r3, [r7, #12]
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	68fa      	ldr	r2, [r7, #12]
 800e4a0:	605a      	str	r2, [r3, #4]
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	689a      	ldr	r2, [r3, #8]
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	609a      	str	r2, [r3, #8]
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	689b      	ldr	r3, [r3, #8]
 800e4ae:	683a      	ldr	r2, [r7, #0]
 800e4b0:	605a      	str	r2, [r3, #4]
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	683a      	ldr	r2, [r7, #0]
 800e4b6:	609a      	str	r2, [r3, #8]
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	687a      	ldr	r2, [r7, #4]
 800e4bc:	611a      	str	r2, [r3, #16]
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	1c5a      	adds	r2, r3, #1
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	601a      	str	r2, [r3, #0]
 800e4c8:	bf00      	nop
 800e4ca:	3714      	adds	r7, #20
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr

0800e4d4 <vListInsert>:
 800e4d4:	b480      	push	{r7}
 800e4d6:	b085      	sub	sp, #20
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
 800e4dc:	6039      	str	r1, [r7, #0]
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	60bb      	str	r3, [r7, #8]
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ea:	d103      	bne.n	800e4f4 <vListInsert+0x20>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	691b      	ldr	r3, [r3, #16]
 800e4f0:	60fb      	str	r3, [r7, #12]
 800e4f2:	e00c      	b.n	800e50e <vListInsert+0x3a>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	3308      	adds	r3, #8
 800e4f8:	60fb      	str	r3, [r7, #12]
 800e4fa:	e002      	b.n	800e502 <vListInsert+0x2e>
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	685b      	ldr	r3, [r3, #4]
 800e500:	60fb      	str	r3, [r7, #12]
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	685b      	ldr	r3, [r3, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	68ba      	ldr	r2, [r7, #8]
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d2f6      	bcs.n	800e4fc <vListInsert+0x28>
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	685a      	ldr	r2, [r3, #4]
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	605a      	str	r2, [r3, #4]
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	685b      	ldr	r3, [r3, #4]
 800e51a:	683a      	ldr	r2, [r7, #0]
 800e51c:	609a      	str	r2, [r3, #8]
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	68fa      	ldr	r2, [r7, #12]
 800e522:	609a      	str	r2, [r3, #8]
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	683a      	ldr	r2, [r7, #0]
 800e528:	605a      	str	r2, [r3, #4]
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	687a      	ldr	r2, [r7, #4]
 800e52e:	611a      	str	r2, [r3, #16]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	1c5a      	adds	r2, r3, #1
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	601a      	str	r2, [r3, #0]
 800e53a:	bf00      	nop
 800e53c:	3714      	adds	r7, #20
 800e53e:	46bd      	mov	sp, r7
 800e540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e544:	4770      	bx	lr

0800e546 <uxListRemove>:
 800e546:	b480      	push	{r7}
 800e548:	b085      	sub	sp, #20
 800e54a:	af00      	add	r7, sp, #0
 800e54c:	6078      	str	r0, [r7, #4]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	691b      	ldr	r3, [r3, #16]
 800e552:	60fb      	str	r3, [r7, #12]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	685b      	ldr	r3, [r3, #4]
 800e558:	687a      	ldr	r2, [r7, #4]
 800e55a:	6892      	ldr	r2, [r2, #8]
 800e55c:	609a      	str	r2, [r3, #8]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	689b      	ldr	r3, [r3, #8]
 800e562:	687a      	ldr	r2, [r7, #4]
 800e564:	6852      	ldr	r2, [r2, #4]
 800e566:	605a      	str	r2, [r3, #4]
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	685b      	ldr	r3, [r3, #4]
 800e56c:	687a      	ldr	r2, [r7, #4]
 800e56e:	429a      	cmp	r2, r3
 800e570:	d103      	bne.n	800e57a <uxListRemove+0x34>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	689a      	ldr	r2, [r3, #8]
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	605a      	str	r2, [r3, #4]
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2200      	movs	r2, #0
 800e57e:	611a      	str	r2, [r3, #16]
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	1e5a      	subs	r2, r3, #1
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	601a      	str	r2, [r3, #0]
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	4618      	mov	r0, r3
 800e590:	3714      	adds	r7, #20
 800e592:	46bd      	mov	sp, r7
 800e594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e598:	4770      	bx	lr

0800e59a <xTaskCreateStatic>:
 800e59a:	b580      	push	{r7, lr}
 800e59c:	b08e      	sub	sp, #56	; 0x38
 800e59e:	af04      	add	r7, sp, #16
 800e5a0:	60f8      	str	r0, [r7, #12]
 800e5a2:	60b9      	str	r1, [r7, #8]
 800e5a4:	607a      	str	r2, [r7, #4]
 800e5a6:	603b      	str	r3, [r7, #0]
 800e5a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d10a      	bne.n	800e5c4 <xTaskCreateStatic+0x2a>
 800e5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b2:	f383 8811 	msr	BASEPRI, r3
 800e5b6:	f3bf 8f6f 	isb	sy
 800e5ba:	f3bf 8f4f 	dsb	sy
 800e5be:	623b      	str	r3, [r7, #32]
 800e5c0:	bf00      	nop
 800e5c2:	e7fe      	b.n	800e5c2 <xTaskCreateStatic+0x28>
 800e5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d10a      	bne.n	800e5e0 <xTaskCreateStatic+0x46>
 800e5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ce:	f383 8811 	msr	BASEPRI, r3
 800e5d2:	f3bf 8f6f 	isb	sy
 800e5d6:	f3bf 8f4f 	dsb	sy
 800e5da:	61fb      	str	r3, [r7, #28]
 800e5dc:	bf00      	nop
 800e5de:	e7fe      	b.n	800e5de <xTaskCreateStatic+0x44>
 800e5e0:	23b8      	movs	r3, #184	; 0xb8
 800e5e2:	613b      	str	r3, [r7, #16]
 800e5e4:	693b      	ldr	r3, [r7, #16]
 800e5e6:	2bb8      	cmp	r3, #184	; 0xb8
 800e5e8:	d00a      	beq.n	800e600 <xTaskCreateStatic+0x66>
 800e5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ee:	f383 8811 	msr	BASEPRI, r3
 800e5f2:	f3bf 8f6f 	isb	sy
 800e5f6:	f3bf 8f4f 	dsb	sy
 800e5fa:	61bb      	str	r3, [r7, #24]
 800e5fc:	bf00      	nop
 800e5fe:	e7fe      	b.n	800e5fe <xTaskCreateStatic+0x64>
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e604:	2b00      	cmp	r3, #0
 800e606:	d01e      	beq.n	800e646 <xTaskCreateStatic+0xac>
 800e608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d01b      	beq.n	800e646 <xTaskCreateStatic+0xac>
 800e60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e610:	627b      	str	r3, [r7, #36]	; 0x24
 800e612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e616:	631a      	str	r2, [r3, #48]	; 0x30
 800e618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61a:	2202      	movs	r2, #2
 800e61c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 800e620:	2300      	movs	r3, #0
 800e622:	9303      	str	r3, [sp, #12]
 800e624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e626:	9302      	str	r3, [sp, #8]
 800e628:	f107 0314 	add.w	r3, r7, #20
 800e62c:	9301      	str	r3, [sp, #4]
 800e62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e630:	9300      	str	r3, [sp, #0]
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	687a      	ldr	r2, [r7, #4]
 800e636:	68b9      	ldr	r1, [r7, #8]
 800e638:	68f8      	ldr	r0, [r7, #12]
 800e63a:	f000 f851 	bl	800e6e0 <prvInitialiseNewTask>
 800e63e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e640:	f000 f8f4 	bl	800e82c <prvAddNewTaskToReadyList>
 800e644:	e001      	b.n	800e64a <xTaskCreateStatic+0xb0>
 800e646:	2300      	movs	r3, #0
 800e648:	617b      	str	r3, [r7, #20]
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	4618      	mov	r0, r3
 800e64e:	3728      	adds	r7, #40	; 0x28
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}

0800e654 <xTaskCreate>:
 800e654:	b580      	push	{r7, lr}
 800e656:	b08c      	sub	sp, #48	; 0x30
 800e658:	af04      	add	r7, sp, #16
 800e65a:	60f8      	str	r0, [r7, #12]
 800e65c:	60b9      	str	r1, [r7, #8]
 800e65e:	603b      	str	r3, [r7, #0]
 800e660:	4613      	mov	r3, r2
 800e662:	80fb      	strh	r3, [r7, #6]
 800e664:	88fb      	ldrh	r3, [r7, #6]
 800e666:	009b      	lsls	r3, r3, #2
 800e668:	4618      	mov	r0, r3
 800e66a:	f000 ff2d 	bl	800f4c8 <pvPortMalloc>
 800e66e:	6178      	str	r0, [r7, #20]
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d00e      	beq.n	800e694 <xTaskCreate+0x40>
 800e676:	20b8      	movs	r0, #184	; 0xb8
 800e678:	f000 ff26 	bl	800f4c8 <pvPortMalloc>
 800e67c:	61f8      	str	r0, [r7, #28]
 800e67e:	69fb      	ldr	r3, [r7, #28]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d003      	beq.n	800e68c <xTaskCreate+0x38>
 800e684:	69fb      	ldr	r3, [r7, #28]
 800e686:	697a      	ldr	r2, [r7, #20]
 800e688:	631a      	str	r2, [r3, #48]	; 0x30
 800e68a:	e005      	b.n	800e698 <xTaskCreate+0x44>
 800e68c:	6978      	ldr	r0, [r7, #20]
 800e68e:	f000 ffeb 	bl	800f668 <vPortFree>
 800e692:	e001      	b.n	800e698 <xTaskCreate+0x44>
 800e694:	2300      	movs	r3, #0
 800e696:	61fb      	str	r3, [r7, #28]
 800e698:	69fb      	ldr	r3, [r7, #28]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d017      	beq.n	800e6ce <xTaskCreate+0x7a>
 800e69e:	69fb      	ldr	r3, [r7, #28]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 800e6a6:	88fa      	ldrh	r2, [r7, #6]
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	9303      	str	r3, [sp, #12]
 800e6ac:	69fb      	ldr	r3, [r7, #28]
 800e6ae:	9302      	str	r3, [sp, #8]
 800e6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b2:	9301      	str	r3, [sp, #4]
 800e6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b6:	9300      	str	r3, [sp, #0]
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	68b9      	ldr	r1, [r7, #8]
 800e6bc:	68f8      	ldr	r0, [r7, #12]
 800e6be:	f000 f80f 	bl	800e6e0 <prvInitialiseNewTask>
 800e6c2:	69f8      	ldr	r0, [r7, #28]
 800e6c4:	f000 f8b2 	bl	800e82c <prvAddNewTaskToReadyList>
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	61bb      	str	r3, [r7, #24]
 800e6cc:	e002      	b.n	800e6d4 <xTaskCreate+0x80>
 800e6ce:	f04f 33ff 	mov.w	r3, #4294967295
 800e6d2:	61bb      	str	r3, [r7, #24]
 800e6d4:	69bb      	ldr	r3, [r7, #24]
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3720      	adds	r7, #32
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
	...

0800e6e0 <prvInitialiseNewTask>:
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b088      	sub	sp, #32
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	60f8      	str	r0, [r7, #12]
 800e6e8:	60b9      	str	r1, [r7, #8]
 800e6ea:	607a      	str	r2, [r7, #4]
 800e6ec:	603b      	str	r3, [r7, #0]
 800e6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	21a5      	movs	r1, #165	; 0xa5
 800e6fa:	f001 ffd2 	bl	80106a2 <memset>
 800e6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e708:	3b01      	subs	r3, #1
 800e70a:	009b      	lsls	r3, r3, #2
 800e70c:	4413      	add	r3, r2
 800e70e:	61bb      	str	r3, [r7, #24]
 800e710:	69bb      	ldr	r3, [r7, #24]
 800e712:	f023 0307 	bic.w	r3, r3, #7
 800e716:	61bb      	str	r3, [r7, #24]
 800e718:	69bb      	ldr	r3, [r7, #24]
 800e71a:	f003 0307 	and.w	r3, r3, #7
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d00a      	beq.n	800e738 <prvInitialiseNewTask+0x58>
 800e722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e726:	f383 8811 	msr	BASEPRI, r3
 800e72a:	f3bf 8f6f 	isb	sy
 800e72e:	f3bf 8f4f 	dsb	sy
 800e732:	617b      	str	r3, [r7, #20]
 800e734:	bf00      	nop
 800e736:	e7fe      	b.n	800e736 <prvInitialiseNewTask+0x56>
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d01f      	beq.n	800e77e <prvInitialiseNewTask+0x9e>
 800e73e:	2300      	movs	r3, #0
 800e740:	61fb      	str	r3, [r7, #28]
 800e742:	e012      	b.n	800e76a <prvInitialiseNewTask+0x8a>
 800e744:	68ba      	ldr	r2, [r7, #8]
 800e746:	69fb      	ldr	r3, [r7, #28]
 800e748:	4413      	add	r3, r2
 800e74a:	7819      	ldrb	r1, [r3, #0]
 800e74c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	4413      	add	r3, r2
 800e752:	3334      	adds	r3, #52	; 0x34
 800e754:	460a      	mov	r2, r1
 800e756:	701a      	strb	r2, [r3, #0]
 800e758:	68ba      	ldr	r2, [r7, #8]
 800e75a:	69fb      	ldr	r3, [r7, #28]
 800e75c:	4413      	add	r3, r2
 800e75e:	781b      	ldrb	r3, [r3, #0]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d006      	beq.n	800e772 <prvInitialiseNewTask+0x92>
 800e764:	69fb      	ldr	r3, [r7, #28]
 800e766:	3301      	adds	r3, #1
 800e768:	61fb      	str	r3, [r7, #28]
 800e76a:	69fb      	ldr	r3, [r7, #28]
 800e76c:	2b13      	cmp	r3, #19
 800e76e:	d9e9      	bls.n	800e744 <prvInitialiseNewTask+0x64>
 800e770:	e000      	b.n	800e774 <prvInitialiseNewTask+0x94>
 800e772:	bf00      	nop
 800e774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e776:	2200      	movs	r2, #0
 800e778:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800e77c:	e003      	b.n	800e786 <prvInitialiseNewTask+0xa6>
 800e77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e780:	2200      	movs	r2, #0
 800e782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800e786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e788:	2b06      	cmp	r3, #6
 800e78a:	d901      	bls.n	800e790 <prvInitialiseNewTask+0xb0>
 800e78c:	2306      	movs	r3, #6
 800e78e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e794:	62da      	str	r2, [r3, #44]	; 0x2c
 800e796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e79a:	649a      	str	r2, [r3, #72]	; 0x48
 800e79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79e:	2200      	movs	r2, #0
 800e7a0:	64da      	str	r2, [r3, #76]	; 0x4c
 800e7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a4:	3304      	adds	r3, #4
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7ff fe63 	bl	800e472 <vListInitialiseItem>
 800e7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ae:	3318      	adds	r3, #24
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7ff fe5e 	bl	800e472 <vListInitialiseItem>
 800e7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7ba:	611a      	str	r2, [r3, #16]
 800e7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7be:	f1c3 0207 	rsb	r2, r3, #7
 800e7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c4:	619a      	str	r2, [r3, #24]
 800e7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7ca:	625a      	str	r2, [r3, #36]	; 0x24
 800e7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800e7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 800e7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7de:	3350      	adds	r3, #80	; 0x50
 800e7e0:	2260      	movs	r2, #96	; 0x60
 800e7e2:	2100      	movs	r1, #0
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f001 ff5c 	bl	80106a2 <memset>
 800e7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ec:	4a0c      	ldr	r2, [pc, #48]	; (800e820 <prvInitialiseNewTask+0x140>)
 800e7ee:	655a      	str	r2, [r3, #84]	; 0x54
 800e7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f2:	4a0c      	ldr	r2, [pc, #48]	; (800e824 <prvInitialiseNewTask+0x144>)
 800e7f4:	659a      	str	r2, [r3, #88]	; 0x58
 800e7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f8:	4a0b      	ldr	r2, [pc, #44]	; (800e828 <prvInitialiseNewTask+0x148>)
 800e7fa:	65da      	str	r2, [r3, #92]	; 0x5c
 800e7fc:	683a      	ldr	r2, [r7, #0]
 800e7fe:	68f9      	ldr	r1, [r7, #12]
 800e800:	69b8      	ldr	r0, [r7, #24]
 800e802:	f000 fc4f 	bl	800f0a4 <pxPortInitialiseStack>
 800e806:	4602      	mov	r2, r0
 800e808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80a:	601a      	str	r2, [r3, #0]
 800e80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d002      	beq.n	800e818 <prvInitialiseNewTask+0x138>
 800e812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e816:	601a      	str	r2, [r3, #0]
 800e818:	bf00      	nop
 800e81a:	3720      	adds	r7, #32
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}
 800e820:	08014d6c 	.word	0x08014d6c
 800e824:	08014d8c 	.word	0x08014d8c
 800e828:	08014d4c 	.word	0x08014d4c

0800e82c <prvAddNewTaskToReadyList>:
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	f000 fd66 	bl	800f304 <vPortEnterCritical>
 800e838:	4b2a      	ldr	r3, [pc, #168]	; (800e8e4 <prvAddNewTaskToReadyList+0xb8>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	3301      	adds	r3, #1
 800e83e:	4a29      	ldr	r2, [pc, #164]	; (800e8e4 <prvAddNewTaskToReadyList+0xb8>)
 800e840:	6013      	str	r3, [r2, #0]
 800e842:	4b29      	ldr	r3, [pc, #164]	; (800e8e8 <prvAddNewTaskToReadyList+0xbc>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d109      	bne.n	800e85e <prvAddNewTaskToReadyList+0x32>
 800e84a:	4a27      	ldr	r2, [pc, #156]	; (800e8e8 <prvAddNewTaskToReadyList+0xbc>)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6013      	str	r3, [r2, #0]
 800e850:	4b24      	ldr	r3, [pc, #144]	; (800e8e4 <prvAddNewTaskToReadyList+0xb8>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	2b01      	cmp	r3, #1
 800e856:	d110      	bne.n	800e87a <prvAddNewTaskToReadyList+0x4e>
 800e858:	f000 fafc 	bl	800ee54 <prvInitialiseTaskLists>
 800e85c:	e00d      	b.n	800e87a <prvAddNewTaskToReadyList+0x4e>
 800e85e:	4b23      	ldr	r3, [pc, #140]	; (800e8ec <prvAddNewTaskToReadyList+0xc0>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d109      	bne.n	800e87a <prvAddNewTaskToReadyList+0x4e>
 800e866:	4b20      	ldr	r3, [pc, #128]	; (800e8e8 <prvAddNewTaskToReadyList+0xbc>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e870:	429a      	cmp	r2, r3
 800e872:	d802      	bhi.n	800e87a <prvAddNewTaskToReadyList+0x4e>
 800e874:	4a1c      	ldr	r2, [pc, #112]	; (800e8e8 <prvAddNewTaskToReadyList+0xbc>)
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6013      	str	r3, [r2, #0]
 800e87a:	4b1d      	ldr	r3, [pc, #116]	; (800e8f0 <prvAddNewTaskToReadyList+0xc4>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	3301      	adds	r3, #1
 800e880:	4a1b      	ldr	r2, [pc, #108]	; (800e8f0 <prvAddNewTaskToReadyList+0xc4>)
 800e882:	6013      	str	r3, [r2, #0]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e888:	2201      	movs	r2, #1
 800e88a:	409a      	lsls	r2, r3
 800e88c:	4b19      	ldr	r3, [pc, #100]	; (800e8f4 <prvAddNewTaskToReadyList+0xc8>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4313      	orrs	r3, r2
 800e892:	4a18      	ldr	r2, [pc, #96]	; (800e8f4 <prvAddNewTaskToReadyList+0xc8>)
 800e894:	6013      	str	r3, [r2, #0]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e89a:	4613      	mov	r3, r2
 800e89c:	009b      	lsls	r3, r3, #2
 800e89e:	4413      	add	r3, r2
 800e8a0:	009b      	lsls	r3, r3, #2
 800e8a2:	4a15      	ldr	r2, [pc, #84]	; (800e8f8 <prvAddNewTaskToReadyList+0xcc>)
 800e8a4:	441a      	add	r2, r3
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	3304      	adds	r3, #4
 800e8aa:	4619      	mov	r1, r3
 800e8ac:	4610      	mov	r0, r2
 800e8ae:	f7ff fded 	bl	800e48c <vListInsertEnd>
 800e8b2:	f000 fd57 	bl	800f364 <vPortExitCritical>
 800e8b6:	4b0d      	ldr	r3, [pc, #52]	; (800e8ec <prvAddNewTaskToReadyList+0xc0>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d00e      	beq.n	800e8dc <prvAddNewTaskToReadyList+0xb0>
 800e8be:	4b0a      	ldr	r3, [pc, #40]	; (800e8e8 <prvAddNewTaskToReadyList+0xbc>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d207      	bcs.n	800e8dc <prvAddNewTaskToReadyList+0xb0>
 800e8cc:	4b0b      	ldr	r3, [pc, #44]	; (800e8fc <prvAddNewTaskToReadyList+0xd0>)
 800e8ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8d2:	601a      	str	r2, [r3, #0]
 800e8d4:	f3bf 8f4f 	dsb	sy
 800e8d8:	f3bf 8f6f 	isb	sy
 800e8dc:	bf00      	nop
 800e8de:	3708      	adds	r7, #8
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	20000dd0 	.word	0x20000dd0
 800e8e8:	20000cd0 	.word	0x20000cd0
 800e8ec:	20000ddc 	.word	0x20000ddc
 800e8f0:	20000dec 	.word	0x20000dec
 800e8f4:	20000dd8 	.word	0x20000dd8
 800e8f8:	20000cd4 	.word	0x20000cd4
 800e8fc:	e000ed04 	.word	0xe000ed04

0800e900 <vTaskDelay>:
 800e900:	b580      	push	{r7, lr}
 800e902:	b084      	sub	sp, #16
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	2300      	movs	r3, #0
 800e90a:	60fb      	str	r3, [r7, #12]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d017      	beq.n	800e942 <vTaskDelay+0x42>
 800e912:	4b13      	ldr	r3, [pc, #76]	; (800e960 <vTaskDelay+0x60>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d00a      	beq.n	800e930 <vTaskDelay+0x30>
 800e91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e91e:	f383 8811 	msr	BASEPRI, r3
 800e922:	f3bf 8f6f 	isb	sy
 800e926:	f3bf 8f4f 	dsb	sy
 800e92a:	60bb      	str	r3, [r7, #8]
 800e92c:	bf00      	nop
 800e92e:	e7fe      	b.n	800e92e <vTaskDelay+0x2e>
 800e930:	f000 f884 	bl	800ea3c <vTaskSuspendAll>
 800e934:	2100      	movs	r1, #0
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f000 fb4e 	bl	800efd8 <prvAddCurrentTaskToDelayedList>
 800e93c:	f000 f88c 	bl	800ea58 <xTaskResumeAll>
 800e940:	60f8      	str	r0, [r7, #12]
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d107      	bne.n	800e958 <vTaskDelay+0x58>
 800e948:	4b06      	ldr	r3, [pc, #24]	; (800e964 <vTaskDelay+0x64>)
 800e94a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e94e:	601a      	str	r2, [r3, #0]
 800e950:	f3bf 8f4f 	dsb	sy
 800e954:	f3bf 8f6f 	isb	sy
 800e958:	bf00      	nop
 800e95a:	3710      	adds	r7, #16
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}
 800e960:	20000df8 	.word	0x20000df8
 800e964:	e000ed04 	.word	0xe000ed04

0800e968 <vTaskStartScheduler>:
 800e968:	b580      	push	{r7, lr}
 800e96a:	b08a      	sub	sp, #40	; 0x28
 800e96c:	af04      	add	r7, sp, #16
 800e96e:	2300      	movs	r3, #0
 800e970:	60bb      	str	r3, [r7, #8]
 800e972:	2300      	movs	r3, #0
 800e974:	607b      	str	r3, [r7, #4]
 800e976:	463a      	mov	r2, r7
 800e978:	1d39      	adds	r1, r7, #4
 800e97a:	f107 0308 	add.w	r3, r7, #8
 800e97e:	4618      	mov	r0, r3
 800e980:	f7f2 fcc2 	bl	8001308 <vApplicationGetIdleTaskMemory>
 800e984:	6839      	ldr	r1, [r7, #0]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	68ba      	ldr	r2, [r7, #8]
 800e98a:	9202      	str	r2, [sp, #8]
 800e98c:	9301      	str	r3, [sp, #4]
 800e98e:	2300      	movs	r3, #0
 800e990:	9300      	str	r3, [sp, #0]
 800e992:	2300      	movs	r3, #0
 800e994:	460a      	mov	r2, r1
 800e996:	4921      	ldr	r1, [pc, #132]	; (800ea1c <vTaskStartScheduler+0xb4>)
 800e998:	4821      	ldr	r0, [pc, #132]	; (800ea20 <vTaskStartScheduler+0xb8>)
 800e99a:	f7ff fdfe 	bl	800e59a <xTaskCreateStatic>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	4a20      	ldr	r2, [pc, #128]	; (800ea24 <vTaskStartScheduler+0xbc>)
 800e9a2:	6013      	str	r3, [r2, #0]
 800e9a4:	4b1f      	ldr	r3, [pc, #124]	; (800ea24 <vTaskStartScheduler+0xbc>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d002      	beq.n	800e9b2 <vTaskStartScheduler+0x4a>
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	617b      	str	r3, [r7, #20]
 800e9b0:	e001      	b.n	800e9b6 <vTaskStartScheduler+0x4e>
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	617b      	str	r3, [r7, #20]
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d11b      	bne.n	800e9f4 <vTaskStartScheduler+0x8c>
 800e9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c0:	f383 8811 	msr	BASEPRI, r3
 800e9c4:	f3bf 8f6f 	isb	sy
 800e9c8:	f3bf 8f4f 	dsb	sy
 800e9cc:	613b      	str	r3, [r7, #16]
 800e9ce:	bf00      	nop
 800e9d0:	4b15      	ldr	r3, [pc, #84]	; (800ea28 <vTaskStartScheduler+0xc0>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	3350      	adds	r3, #80	; 0x50
 800e9d6:	4a15      	ldr	r2, [pc, #84]	; (800ea2c <vTaskStartScheduler+0xc4>)
 800e9d8:	6013      	str	r3, [r2, #0]
 800e9da:	4b15      	ldr	r3, [pc, #84]	; (800ea30 <vTaskStartScheduler+0xc8>)
 800e9dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e9e0:	601a      	str	r2, [r3, #0]
 800e9e2:	4b14      	ldr	r3, [pc, #80]	; (800ea34 <vTaskStartScheduler+0xcc>)
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	601a      	str	r2, [r3, #0]
 800e9e8:	4b13      	ldr	r3, [pc, #76]	; (800ea38 <vTaskStartScheduler+0xd0>)
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	601a      	str	r2, [r3, #0]
 800e9ee:	f000 fbe7 	bl	800f1c0 <xPortStartScheduler>
 800e9f2:	e00e      	b.n	800ea12 <vTaskStartScheduler+0xaa>
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9fa:	d10a      	bne.n	800ea12 <vTaskStartScheduler+0xaa>
 800e9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea00:	f383 8811 	msr	BASEPRI, r3
 800ea04:	f3bf 8f6f 	isb	sy
 800ea08:	f3bf 8f4f 	dsb	sy
 800ea0c:	60fb      	str	r3, [r7, #12]
 800ea0e:	bf00      	nop
 800ea10:	e7fe      	b.n	800ea10 <vTaskStartScheduler+0xa8>
 800ea12:	bf00      	nop
 800ea14:	3718      	adds	r7, #24
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
 800ea1a:	bf00      	nop
 800ea1c:	0801380c 	.word	0x0801380c
 800ea20:	0800ee21 	.word	0x0800ee21
 800ea24:	20000df4 	.word	0x20000df4
 800ea28:	20000cd0 	.word	0x20000cd0
 800ea2c:	20000114 	.word	0x20000114
 800ea30:	20000df0 	.word	0x20000df0
 800ea34:	20000ddc 	.word	0x20000ddc
 800ea38:	20000dd4 	.word	0x20000dd4

0800ea3c <vTaskSuspendAll>:
 800ea3c:	b480      	push	{r7}
 800ea3e:	af00      	add	r7, sp, #0
 800ea40:	4b04      	ldr	r3, [pc, #16]	; (800ea54 <vTaskSuspendAll+0x18>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	3301      	adds	r3, #1
 800ea46:	4a03      	ldr	r2, [pc, #12]	; (800ea54 <vTaskSuspendAll+0x18>)
 800ea48:	6013      	str	r3, [r2, #0]
 800ea4a:	bf00      	nop
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea52:	4770      	bx	lr
 800ea54:	20000df8 	.word	0x20000df8

0800ea58 <xTaskResumeAll>:
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b084      	sub	sp, #16
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	2300      	movs	r3, #0
 800ea60:	60fb      	str	r3, [r7, #12]
 800ea62:	2300      	movs	r3, #0
 800ea64:	60bb      	str	r3, [r7, #8]
 800ea66:	4b41      	ldr	r3, [pc, #260]	; (800eb6c <xTaskResumeAll+0x114>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d10a      	bne.n	800ea84 <xTaskResumeAll+0x2c>
 800ea6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea72:	f383 8811 	msr	BASEPRI, r3
 800ea76:	f3bf 8f6f 	isb	sy
 800ea7a:	f3bf 8f4f 	dsb	sy
 800ea7e:	603b      	str	r3, [r7, #0]
 800ea80:	bf00      	nop
 800ea82:	e7fe      	b.n	800ea82 <xTaskResumeAll+0x2a>
 800ea84:	f000 fc3e 	bl	800f304 <vPortEnterCritical>
 800ea88:	4b38      	ldr	r3, [pc, #224]	; (800eb6c <xTaskResumeAll+0x114>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	3b01      	subs	r3, #1
 800ea8e:	4a37      	ldr	r2, [pc, #220]	; (800eb6c <xTaskResumeAll+0x114>)
 800ea90:	6013      	str	r3, [r2, #0]
 800ea92:	4b36      	ldr	r3, [pc, #216]	; (800eb6c <xTaskResumeAll+0x114>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d161      	bne.n	800eb5e <xTaskResumeAll+0x106>
 800ea9a:	4b35      	ldr	r3, [pc, #212]	; (800eb70 <xTaskResumeAll+0x118>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d05d      	beq.n	800eb5e <xTaskResumeAll+0x106>
 800eaa2:	e02e      	b.n	800eb02 <xTaskResumeAll+0xaa>
 800eaa4:	4b33      	ldr	r3, [pc, #204]	; (800eb74 <xTaskResumeAll+0x11c>)
 800eaa6:	68db      	ldr	r3, [r3, #12]
 800eaa8:	68db      	ldr	r3, [r3, #12]
 800eaaa:	60fb      	str	r3, [r7, #12]
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	3318      	adds	r3, #24
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7ff fd48 	bl	800e546 <uxListRemove>
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	3304      	adds	r3, #4
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7ff fd43 	bl	800e546 <uxListRemove>
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eac4:	2201      	movs	r2, #1
 800eac6:	409a      	lsls	r2, r3
 800eac8:	4b2b      	ldr	r3, [pc, #172]	; (800eb78 <xTaskResumeAll+0x120>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4313      	orrs	r3, r2
 800eace:	4a2a      	ldr	r2, [pc, #168]	; (800eb78 <xTaskResumeAll+0x120>)
 800ead0:	6013      	str	r3, [r2, #0]
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ead6:	4613      	mov	r3, r2
 800ead8:	009b      	lsls	r3, r3, #2
 800eada:	4413      	add	r3, r2
 800eadc:	009b      	lsls	r3, r3, #2
 800eade:	4a27      	ldr	r2, [pc, #156]	; (800eb7c <xTaskResumeAll+0x124>)
 800eae0:	441a      	add	r2, r3
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	3304      	adds	r3, #4
 800eae6:	4619      	mov	r1, r3
 800eae8:	4610      	mov	r0, r2
 800eaea:	f7ff fccf 	bl	800e48c <vListInsertEnd>
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaf2:	4b23      	ldr	r3, [pc, #140]	; (800eb80 <xTaskResumeAll+0x128>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d302      	bcc.n	800eb02 <xTaskResumeAll+0xaa>
 800eafc:	4b21      	ldr	r3, [pc, #132]	; (800eb84 <xTaskResumeAll+0x12c>)
 800eafe:	2201      	movs	r2, #1
 800eb00:	601a      	str	r2, [r3, #0]
 800eb02:	4b1c      	ldr	r3, [pc, #112]	; (800eb74 <xTaskResumeAll+0x11c>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d1cc      	bne.n	800eaa4 <xTaskResumeAll+0x4c>
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d001      	beq.n	800eb14 <xTaskResumeAll+0xbc>
 800eb10:	f000 fa42 	bl	800ef98 <prvResetNextTaskUnblockTime>
 800eb14:	4b1c      	ldr	r3, [pc, #112]	; (800eb88 <xTaskResumeAll+0x130>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	607b      	str	r3, [r7, #4]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d010      	beq.n	800eb42 <xTaskResumeAll+0xea>
 800eb20:	f000 f836 	bl	800eb90 <xTaskIncrementTick>
 800eb24:	4603      	mov	r3, r0
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d002      	beq.n	800eb30 <xTaskResumeAll+0xd8>
 800eb2a:	4b16      	ldr	r3, [pc, #88]	; (800eb84 <xTaskResumeAll+0x12c>)
 800eb2c:	2201      	movs	r2, #1
 800eb2e:	601a      	str	r2, [r3, #0]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	3b01      	subs	r3, #1
 800eb34:	607b      	str	r3, [r7, #4]
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d1f1      	bne.n	800eb20 <xTaskResumeAll+0xc8>
 800eb3c:	4b12      	ldr	r3, [pc, #72]	; (800eb88 <xTaskResumeAll+0x130>)
 800eb3e:	2200      	movs	r2, #0
 800eb40:	601a      	str	r2, [r3, #0]
 800eb42:	4b10      	ldr	r3, [pc, #64]	; (800eb84 <xTaskResumeAll+0x12c>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d009      	beq.n	800eb5e <xTaskResumeAll+0x106>
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	60bb      	str	r3, [r7, #8]
 800eb4e:	4b0f      	ldr	r3, [pc, #60]	; (800eb8c <xTaskResumeAll+0x134>)
 800eb50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb54:	601a      	str	r2, [r3, #0]
 800eb56:	f3bf 8f4f 	dsb	sy
 800eb5a:	f3bf 8f6f 	isb	sy
 800eb5e:	f000 fc01 	bl	800f364 <vPortExitCritical>
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	4618      	mov	r0, r3
 800eb66:	3710      	adds	r7, #16
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}
 800eb6c:	20000df8 	.word	0x20000df8
 800eb70:	20000dd0 	.word	0x20000dd0
 800eb74:	20000d90 	.word	0x20000d90
 800eb78:	20000dd8 	.word	0x20000dd8
 800eb7c:	20000cd4 	.word	0x20000cd4
 800eb80:	20000cd0 	.word	0x20000cd0
 800eb84:	20000de4 	.word	0x20000de4
 800eb88:	20000de0 	.word	0x20000de0
 800eb8c:	e000ed04 	.word	0xe000ed04

0800eb90 <xTaskIncrementTick>:
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b086      	sub	sp, #24
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	2300      	movs	r3, #0
 800eb98:	617b      	str	r3, [r7, #20]
 800eb9a:	4b52      	ldr	r3, [pc, #328]	; (800ece4 <xTaskIncrementTick+0x154>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	f040 8094 	bne.w	800eccc <xTaskIncrementTick+0x13c>
 800eba4:	4b50      	ldr	r3, [pc, #320]	; (800ece8 <xTaskIncrementTick+0x158>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	3301      	adds	r3, #1
 800ebaa:	613b      	str	r3, [r7, #16]
 800ebac:	4a4e      	ldr	r2, [pc, #312]	; (800ece8 <xTaskIncrementTick+0x158>)
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	6013      	str	r3, [r2, #0]
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d120      	bne.n	800ebfa <xTaskIncrementTick+0x6a>
 800ebb8:	4b4c      	ldr	r3, [pc, #304]	; (800ecec <xTaskIncrementTick+0x15c>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d00a      	beq.n	800ebd8 <xTaskIncrementTick+0x48>
 800ebc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc6:	f383 8811 	msr	BASEPRI, r3
 800ebca:	f3bf 8f6f 	isb	sy
 800ebce:	f3bf 8f4f 	dsb	sy
 800ebd2:	603b      	str	r3, [r7, #0]
 800ebd4:	bf00      	nop
 800ebd6:	e7fe      	b.n	800ebd6 <xTaskIncrementTick+0x46>
 800ebd8:	4b44      	ldr	r3, [pc, #272]	; (800ecec <xTaskIncrementTick+0x15c>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	60fb      	str	r3, [r7, #12]
 800ebde:	4b44      	ldr	r3, [pc, #272]	; (800ecf0 <xTaskIncrementTick+0x160>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	4a42      	ldr	r2, [pc, #264]	; (800ecec <xTaskIncrementTick+0x15c>)
 800ebe4:	6013      	str	r3, [r2, #0]
 800ebe6:	4a42      	ldr	r2, [pc, #264]	; (800ecf0 <xTaskIncrementTick+0x160>)
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	6013      	str	r3, [r2, #0]
 800ebec:	4b41      	ldr	r3, [pc, #260]	; (800ecf4 <xTaskIncrementTick+0x164>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	4a40      	ldr	r2, [pc, #256]	; (800ecf4 <xTaskIncrementTick+0x164>)
 800ebf4:	6013      	str	r3, [r2, #0]
 800ebf6:	f000 f9cf 	bl	800ef98 <prvResetNextTaskUnblockTime>
 800ebfa:	4b3f      	ldr	r3, [pc, #252]	; (800ecf8 <xTaskIncrementTick+0x168>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	693a      	ldr	r2, [r7, #16]
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d348      	bcc.n	800ec96 <xTaskIncrementTick+0x106>
 800ec04:	4b39      	ldr	r3, [pc, #228]	; (800ecec <xTaskIncrementTick+0x15c>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d104      	bne.n	800ec18 <xTaskIncrementTick+0x88>
 800ec0e:	4b3a      	ldr	r3, [pc, #232]	; (800ecf8 <xTaskIncrementTick+0x168>)
 800ec10:	f04f 32ff 	mov.w	r2, #4294967295
 800ec14:	601a      	str	r2, [r3, #0]
 800ec16:	e03e      	b.n	800ec96 <xTaskIncrementTick+0x106>
 800ec18:	4b34      	ldr	r3, [pc, #208]	; (800ecec <xTaskIncrementTick+0x15c>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	68db      	ldr	r3, [r3, #12]
 800ec1e:	68db      	ldr	r3, [r3, #12]
 800ec20:	60bb      	str	r3, [r7, #8]
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	607b      	str	r3, [r7, #4]
 800ec28:	693a      	ldr	r2, [r7, #16]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d203      	bcs.n	800ec38 <xTaskIncrementTick+0xa8>
 800ec30:	4a31      	ldr	r2, [pc, #196]	; (800ecf8 <xTaskIncrementTick+0x168>)
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6013      	str	r3, [r2, #0]
 800ec36:	e02e      	b.n	800ec96 <xTaskIncrementTick+0x106>
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	3304      	adds	r3, #4
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7ff fc82 	bl	800e546 <uxListRemove>
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d004      	beq.n	800ec54 <xTaskIncrementTick+0xc4>
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	3318      	adds	r3, #24
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7ff fc79 	bl	800e546 <uxListRemove>
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec58:	2201      	movs	r2, #1
 800ec5a:	409a      	lsls	r2, r3
 800ec5c:	4b27      	ldr	r3, [pc, #156]	; (800ecfc <xTaskIncrementTick+0x16c>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	4313      	orrs	r3, r2
 800ec62:	4a26      	ldr	r2, [pc, #152]	; (800ecfc <xTaskIncrementTick+0x16c>)
 800ec64:	6013      	str	r3, [r2, #0]
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec6a:	4613      	mov	r3, r2
 800ec6c:	009b      	lsls	r3, r3, #2
 800ec6e:	4413      	add	r3, r2
 800ec70:	009b      	lsls	r3, r3, #2
 800ec72:	4a23      	ldr	r2, [pc, #140]	; (800ed00 <xTaskIncrementTick+0x170>)
 800ec74:	441a      	add	r2, r3
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	3304      	adds	r3, #4
 800ec7a:	4619      	mov	r1, r3
 800ec7c:	4610      	mov	r0, r2
 800ec7e:	f7ff fc05 	bl	800e48c <vListInsertEnd>
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec86:	4b1f      	ldr	r3, [pc, #124]	; (800ed04 <xTaskIncrementTick+0x174>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	d3b9      	bcc.n	800ec04 <xTaskIncrementTick+0x74>
 800ec90:	2301      	movs	r3, #1
 800ec92:	617b      	str	r3, [r7, #20]
 800ec94:	e7b6      	b.n	800ec04 <xTaskIncrementTick+0x74>
 800ec96:	4b1b      	ldr	r3, [pc, #108]	; (800ed04 <xTaskIncrementTick+0x174>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec9c:	4918      	ldr	r1, [pc, #96]	; (800ed00 <xTaskIncrementTick+0x170>)
 800ec9e:	4613      	mov	r3, r2
 800eca0:	009b      	lsls	r3, r3, #2
 800eca2:	4413      	add	r3, r2
 800eca4:	009b      	lsls	r3, r3, #2
 800eca6:	440b      	add	r3, r1
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	2b01      	cmp	r3, #1
 800ecac:	d901      	bls.n	800ecb2 <xTaskIncrementTick+0x122>
 800ecae:	2301      	movs	r3, #1
 800ecb0:	617b      	str	r3, [r7, #20]
 800ecb2:	4b15      	ldr	r3, [pc, #84]	; (800ed08 <xTaskIncrementTick+0x178>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d101      	bne.n	800ecbe <xTaskIncrementTick+0x12e>
 800ecba:	f7f2 fb0c 	bl	80012d6 <vApplicationTickHook>
 800ecbe:	4b13      	ldr	r3, [pc, #76]	; (800ed0c <xTaskIncrementTick+0x17c>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d009      	beq.n	800ecda <xTaskIncrementTick+0x14a>
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	617b      	str	r3, [r7, #20]
 800ecca:	e006      	b.n	800ecda <xTaskIncrementTick+0x14a>
 800eccc:	4b0e      	ldr	r3, [pc, #56]	; (800ed08 <xTaskIncrementTick+0x178>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	3301      	adds	r3, #1
 800ecd2:	4a0d      	ldr	r2, [pc, #52]	; (800ed08 <xTaskIncrementTick+0x178>)
 800ecd4:	6013      	str	r3, [r2, #0]
 800ecd6:	f7f2 fafe 	bl	80012d6 <vApplicationTickHook>
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3718      	adds	r7, #24
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}
 800ece4:	20000df8 	.word	0x20000df8
 800ece8:	20000dd4 	.word	0x20000dd4
 800ecec:	20000d88 	.word	0x20000d88
 800ecf0:	20000d8c 	.word	0x20000d8c
 800ecf4:	20000de8 	.word	0x20000de8
 800ecf8:	20000df0 	.word	0x20000df0
 800ecfc:	20000dd8 	.word	0x20000dd8
 800ed00:	20000cd4 	.word	0x20000cd4
 800ed04:	20000cd0 	.word	0x20000cd0
 800ed08:	20000de0 	.word	0x20000de0
 800ed0c:	20000de4 	.word	0x20000de4

0800ed10 <vTaskSwitchContext>:
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b088      	sub	sp, #32
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	4b3c      	ldr	r3, [pc, #240]	; (800ee08 <vTaskSwitchContext+0xf8>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d003      	beq.n	800ed26 <vTaskSwitchContext+0x16>
 800ed1e:	4b3b      	ldr	r3, [pc, #236]	; (800ee0c <vTaskSwitchContext+0xfc>)
 800ed20:	2201      	movs	r2, #1
 800ed22:	601a      	str	r2, [r3, #0]
 800ed24:	e06b      	b.n	800edfe <vTaskSwitchContext+0xee>
 800ed26:	4b39      	ldr	r3, [pc, #228]	; (800ee0c <vTaskSwitchContext+0xfc>)
 800ed28:	2200      	movs	r2, #0
 800ed2a:	601a      	str	r2, [r3, #0]
 800ed2c:	4b38      	ldr	r3, [pc, #224]	; (800ee10 <vTaskSwitchContext+0x100>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed32:	61fb      	str	r3, [r7, #28]
 800ed34:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800ed38:	61bb      	str	r3, [r7, #24]
 800ed3a:	69fb      	ldr	r3, [r7, #28]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	69ba      	ldr	r2, [r7, #24]
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d111      	bne.n	800ed68 <vTaskSwitchContext+0x58>
 800ed44:	69fb      	ldr	r3, [r7, #28]
 800ed46:	3304      	adds	r3, #4
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	69ba      	ldr	r2, [r7, #24]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d10b      	bne.n	800ed68 <vTaskSwitchContext+0x58>
 800ed50:	69fb      	ldr	r3, [r7, #28]
 800ed52:	3308      	adds	r3, #8
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	69ba      	ldr	r2, [r7, #24]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d105      	bne.n	800ed68 <vTaskSwitchContext+0x58>
 800ed5c:	69fb      	ldr	r3, [r7, #28]
 800ed5e:	330c      	adds	r3, #12
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	69ba      	ldr	r2, [r7, #24]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d008      	beq.n	800ed7a <vTaskSwitchContext+0x6a>
 800ed68:	4b29      	ldr	r3, [pc, #164]	; (800ee10 <vTaskSwitchContext+0x100>)
 800ed6a:	681a      	ldr	r2, [r3, #0]
 800ed6c:	4b28      	ldr	r3, [pc, #160]	; (800ee10 <vTaskSwitchContext+0x100>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	3334      	adds	r3, #52	; 0x34
 800ed72:	4619      	mov	r1, r3
 800ed74:	4610      	mov	r0, r2
 800ed76:	f7f2 fab5 	bl	80012e4 <vApplicationStackOverflowHook>
 800ed7a:	4b26      	ldr	r3, [pc, #152]	; (800ee14 <vTaskSwitchContext+0x104>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	60fb      	str	r3, [r7, #12]
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	fab3 f383 	clz	r3, r3
 800ed86:	72fb      	strb	r3, [r7, #11]
 800ed88:	7afb      	ldrb	r3, [r7, #11]
 800ed8a:	f1c3 031f 	rsb	r3, r3, #31
 800ed8e:	617b      	str	r3, [r7, #20]
 800ed90:	4921      	ldr	r1, [pc, #132]	; (800ee18 <vTaskSwitchContext+0x108>)
 800ed92:	697a      	ldr	r2, [r7, #20]
 800ed94:	4613      	mov	r3, r2
 800ed96:	009b      	lsls	r3, r3, #2
 800ed98:	4413      	add	r3, r2
 800ed9a:	009b      	lsls	r3, r3, #2
 800ed9c:	440b      	add	r3, r1
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d10a      	bne.n	800edba <vTaskSwitchContext+0xaa>
 800eda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda8:	f383 8811 	msr	BASEPRI, r3
 800edac:	f3bf 8f6f 	isb	sy
 800edb0:	f3bf 8f4f 	dsb	sy
 800edb4:	607b      	str	r3, [r7, #4]
 800edb6:	bf00      	nop
 800edb8:	e7fe      	b.n	800edb8 <vTaskSwitchContext+0xa8>
 800edba:	697a      	ldr	r2, [r7, #20]
 800edbc:	4613      	mov	r3, r2
 800edbe:	009b      	lsls	r3, r3, #2
 800edc0:	4413      	add	r3, r2
 800edc2:	009b      	lsls	r3, r3, #2
 800edc4:	4a14      	ldr	r2, [pc, #80]	; (800ee18 <vTaskSwitchContext+0x108>)
 800edc6:	4413      	add	r3, r2
 800edc8:	613b      	str	r3, [r7, #16]
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	685b      	ldr	r3, [r3, #4]
 800edce:	685a      	ldr	r2, [r3, #4]
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	605a      	str	r2, [r3, #4]
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	685a      	ldr	r2, [r3, #4]
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	3308      	adds	r3, #8
 800eddc:	429a      	cmp	r2, r3
 800edde:	d104      	bne.n	800edea <vTaskSwitchContext+0xda>
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	685b      	ldr	r3, [r3, #4]
 800ede4:	685a      	ldr	r2, [r3, #4]
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	605a      	str	r2, [r3, #4]
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	685b      	ldr	r3, [r3, #4]
 800edee:	68db      	ldr	r3, [r3, #12]
 800edf0:	4a07      	ldr	r2, [pc, #28]	; (800ee10 <vTaskSwitchContext+0x100>)
 800edf2:	6013      	str	r3, [r2, #0]
 800edf4:	4b06      	ldr	r3, [pc, #24]	; (800ee10 <vTaskSwitchContext+0x100>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	3350      	adds	r3, #80	; 0x50
 800edfa:	4a08      	ldr	r2, [pc, #32]	; (800ee1c <vTaskSwitchContext+0x10c>)
 800edfc:	6013      	str	r3, [r2, #0]
 800edfe:	bf00      	nop
 800ee00:	3720      	adds	r7, #32
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	20000df8 	.word	0x20000df8
 800ee0c:	20000de4 	.word	0x20000de4
 800ee10:	20000cd0 	.word	0x20000cd0
 800ee14:	20000dd8 	.word	0x20000dd8
 800ee18:	20000cd4 	.word	0x20000cd4
 800ee1c:	20000114 	.word	0x20000114

0800ee20 <prvIdleTask>:
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	f000 f854 	bl	800eed4 <prvCheckTasksWaitingTermination>
 800ee2c:	4b07      	ldr	r3, [pc, #28]	; (800ee4c <prvIdleTask+0x2c>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d907      	bls.n	800ee44 <prvIdleTask+0x24>
 800ee34:	4b06      	ldr	r3, [pc, #24]	; (800ee50 <prvIdleTask+0x30>)
 800ee36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee3a:	601a      	str	r2, [r3, #0]
 800ee3c:	f3bf 8f4f 	dsb	sy
 800ee40:	f3bf 8f6f 	isb	sy
 800ee44:	f7f2 fa40 	bl	80012c8 <vApplicationIdleHook>
 800ee48:	e7ee      	b.n	800ee28 <prvIdleTask+0x8>
 800ee4a:	bf00      	nop
 800ee4c:	20000cd4 	.word	0x20000cd4
 800ee50:	e000ed04 	.word	0xe000ed04

0800ee54 <prvInitialiseTaskLists>:
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b082      	sub	sp, #8
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	607b      	str	r3, [r7, #4]
 800ee5e:	e00c      	b.n	800ee7a <prvInitialiseTaskLists+0x26>
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	4613      	mov	r3, r2
 800ee64:	009b      	lsls	r3, r3, #2
 800ee66:	4413      	add	r3, r2
 800ee68:	009b      	lsls	r3, r3, #2
 800ee6a:	4a12      	ldr	r2, [pc, #72]	; (800eeb4 <prvInitialiseTaskLists+0x60>)
 800ee6c:	4413      	add	r3, r2
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7ff fadf 	bl	800e432 <vListInitialise>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	3301      	adds	r3, #1
 800ee78:	607b      	str	r3, [r7, #4]
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2b06      	cmp	r3, #6
 800ee7e:	d9ef      	bls.n	800ee60 <prvInitialiseTaskLists+0xc>
 800ee80:	480d      	ldr	r0, [pc, #52]	; (800eeb8 <prvInitialiseTaskLists+0x64>)
 800ee82:	f7ff fad6 	bl	800e432 <vListInitialise>
 800ee86:	480d      	ldr	r0, [pc, #52]	; (800eebc <prvInitialiseTaskLists+0x68>)
 800ee88:	f7ff fad3 	bl	800e432 <vListInitialise>
 800ee8c:	480c      	ldr	r0, [pc, #48]	; (800eec0 <prvInitialiseTaskLists+0x6c>)
 800ee8e:	f7ff fad0 	bl	800e432 <vListInitialise>
 800ee92:	480c      	ldr	r0, [pc, #48]	; (800eec4 <prvInitialiseTaskLists+0x70>)
 800ee94:	f7ff facd 	bl	800e432 <vListInitialise>
 800ee98:	480b      	ldr	r0, [pc, #44]	; (800eec8 <prvInitialiseTaskLists+0x74>)
 800ee9a:	f7ff faca 	bl	800e432 <vListInitialise>
 800ee9e:	4b0b      	ldr	r3, [pc, #44]	; (800eecc <prvInitialiseTaskLists+0x78>)
 800eea0:	4a05      	ldr	r2, [pc, #20]	; (800eeb8 <prvInitialiseTaskLists+0x64>)
 800eea2:	601a      	str	r2, [r3, #0]
 800eea4:	4b0a      	ldr	r3, [pc, #40]	; (800eed0 <prvInitialiseTaskLists+0x7c>)
 800eea6:	4a05      	ldr	r2, [pc, #20]	; (800eebc <prvInitialiseTaskLists+0x68>)
 800eea8:	601a      	str	r2, [r3, #0]
 800eeaa:	bf00      	nop
 800eeac:	3708      	adds	r7, #8
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	20000cd4 	.word	0x20000cd4
 800eeb8:	20000d60 	.word	0x20000d60
 800eebc:	20000d74 	.word	0x20000d74
 800eec0:	20000d90 	.word	0x20000d90
 800eec4:	20000da4 	.word	0x20000da4
 800eec8:	20000dbc 	.word	0x20000dbc
 800eecc:	20000d88 	.word	0x20000d88
 800eed0:	20000d8c 	.word	0x20000d8c

0800eed4 <prvCheckTasksWaitingTermination>:
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	e019      	b.n	800ef10 <prvCheckTasksWaitingTermination+0x3c>
 800eedc:	f000 fa12 	bl	800f304 <vPortEnterCritical>
 800eee0:	4b10      	ldr	r3, [pc, #64]	; (800ef24 <prvCheckTasksWaitingTermination+0x50>)
 800eee2:	68db      	ldr	r3, [r3, #12]
 800eee4:	68db      	ldr	r3, [r3, #12]
 800eee6:	607b      	str	r3, [r7, #4]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	3304      	adds	r3, #4
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7ff fb2a 	bl	800e546 <uxListRemove>
 800eef2:	4b0d      	ldr	r3, [pc, #52]	; (800ef28 <prvCheckTasksWaitingTermination+0x54>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	3b01      	subs	r3, #1
 800eef8:	4a0b      	ldr	r2, [pc, #44]	; (800ef28 <prvCheckTasksWaitingTermination+0x54>)
 800eefa:	6013      	str	r3, [r2, #0]
 800eefc:	4b0b      	ldr	r3, [pc, #44]	; (800ef2c <prvCheckTasksWaitingTermination+0x58>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	3b01      	subs	r3, #1
 800ef02:	4a0a      	ldr	r2, [pc, #40]	; (800ef2c <prvCheckTasksWaitingTermination+0x58>)
 800ef04:	6013      	str	r3, [r2, #0]
 800ef06:	f000 fa2d 	bl	800f364 <vPortExitCritical>
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 f810 	bl	800ef30 <prvDeleteTCB>
 800ef10:	4b06      	ldr	r3, [pc, #24]	; (800ef2c <prvCheckTasksWaitingTermination+0x58>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d1e1      	bne.n	800eedc <prvCheckTasksWaitingTermination+0x8>
 800ef18:	bf00      	nop
 800ef1a:	bf00      	nop
 800ef1c:	3708      	adds	r7, #8
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}
 800ef22:	bf00      	nop
 800ef24:	20000da4 	.word	0x20000da4
 800ef28:	20000dd0 	.word	0x20000dd0
 800ef2c:	20000db8 	.word	0x20000db8

0800ef30 <prvDeleteTCB>:
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b084      	sub	sp, #16
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	3350      	adds	r3, #80	; 0x50
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f002 f953 	bl	80111e8 <_reclaim_reent>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d108      	bne.n	800ef5e <prvDeleteTCB+0x2e>
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef50:	4618      	mov	r0, r3
 800ef52:	f000 fb89 	bl	800f668 <vPortFree>
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f000 fb86 	bl	800f668 <vPortFree>
 800ef5c:	e018      	b.n	800ef90 <prvDeleteTCB+0x60>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	d103      	bne.n	800ef70 <prvDeleteTCB+0x40>
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f000 fb7d 	bl	800f668 <vPortFree>
 800ef6e:	e00f      	b.n	800ef90 <prvDeleteTCB+0x60>
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800ef76:	2b02      	cmp	r3, #2
 800ef78:	d00a      	beq.n	800ef90 <prvDeleteTCB+0x60>
 800ef7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef7e:	f383 8811 	msr	BASEPRI, r3
 800ef82:	f3bf 8f6f 	isb	sy
 800ef86:	f3bf 8f4f 	dsb	sy
 800ef8a:	60fb      	str	r3, [r7, #12]
 800ef8c:	bf00      	nop
 800ef8e:	e7fe      	b.n	800ef8e <prvDeleteTCB+0x5e>
 800ef90:	bf00      	nop
 800ef92:	3710      	adds	r7, #16
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}

0800ef98 <prvResetNextTaskUnblockTime>:
 800ef98:	b480      	push	{r7}
 800ef9a:	b083      	sub	sp, #12
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	4b0c      	ldr	r3, [pc, #48]	; (800efd0 <prvResetNextTaskUnblockTime+0x38>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d104      	bne.n	800efb2 <prvResetNextTaskUnblockTime+0x1a>
 800efa8:	4b0a      	ldr	r3, [pc, #40]	; (800efd4 <prvResetNextTaskUnblockTime+0x3c>)
 800efaa:	f04f 32ff 	mov.w	r2, #4294967295
 800efae:	601a      	str	r2, [r3, #0]
 800efb0:	e008      	b.n	800efc4 <prvResetNextTaskUnblockTime+0x2c>
 800efb2:	4b07      	ldr	r3, [pc, #28]	; (800efd0 <prvResetNextTaskUnblockTime+0x38>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	68db      	ldr	r3, [r3, #12]
 800efb8:	68db      	ldr	r3, [r3, #12]
 800efba:	607b      	str	r3, [r7, #4]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	685b      	ldr	r3, [r3, #4]
 800efc0:	4a04      	ldr	r2, [pc, #16]	; (800efd4 <prvResetNextTaskUnblockTime+0x3c>)
 800efc2:	6013      	str	r3, [r2, #0]
 800efc4:	bf00      	nop
 800efc6:	370c      	adds	r7, #12
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr
 800efd0:	20000d88 	.word	0x20000d88
 800efd4:	20000df0 	.word	0x20000df0

0800efd8 <prvAddCurrentTaskToDelayedList>:
 800efd8:	b580      	push	{r7, lr}
 800efda:	b084      	sub	sp, #16
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	6039      	str	r1, [r7, #0]
 800efe2:	4b29      	ldr	r3, [pc, #164]	; (800f088 <prvAddCurrentTaskToDelayedList+0xb0>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	60fb      	str	r3, [r7, #12]
 800efe8:	4b28      	ldr	r3, [pc, #160]	; (800f08c <prvAddCurrentTaskToDelayedList+0xb4>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	3304      	adds	r3, #4
 800efee:	4618      	mov	r0, r3
 800eff0:	f7ff faa9 	bl	800e546 <uxListRemove>
 800eff4:	4603      	mov	r3, r0
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d10b      	bne.n	800f012 <prvAddCurrentTaskToDelayedList+0x3a>
 800effa:	4b24      	ldr	r3, [pc, #144]	; (800f08c <prvAddCurrentTaskToDelayedList+0xb4>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f000:	2201      	movs	r2, #1
 800f002:	fa02 f303 	lsl.w	r3, r2, r3
 800f006:	43da      	mvns	r2, r3
 800f008:	4b21      	ldr	r3, [pc, #132]	; (800f090 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	4013      	ands	r3, r2
 800f00e:	4a20      	ldr	r2, [pc, #128]	; (800f090 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f010:	6013      	str	r3, [r2, #0]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f018:	d10a      	bne.n	800f030 <prvAddCurrentTaskToDelayedList+0x58>
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d007      	beq.n	800f030 <prvAddCurrentTaskToDelayedList+0x58>
 800f020:	4b1a      	ldr	r3, [pc, #104]	; (800f08c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	3304      	adds	r3, #4
 800f026:	4619      	mov	r1, r3
 800f028:	481a      	ldr	r0, [pc, #104]	; (800f094 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f02a:	f7ff fa2f 	bl	800e48c <vListInsertEnd>
 800f02e:	e026      	b.n	800f07e <prvAddCurrentTaskToDelayedList+0xa6>
 800f030:	68fa      	ldr	r2, [r7, #12]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	4413      	add	r3, r2
 800f036:	60bb      	str	r3, [r7, #8]
 800f038:	4b14      	ldr	r3, [pc, #80]	; (800f08c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	68ba      	ldr	r2, [r7, #8]
 800f03e:	605a      	str	r2, [r3, #4]
 800f040:	68ba      	ldr	r2, [r7, #8]
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	429a      	cmp	r2, r3
 800f046:	d209      	bcs.n	800f05c <prvAddCurrentTaskToDelayedList+0x84>
 800f048:	4b13      	ldr	r3, [pc, #76]	; (800f098 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f04a:	681a      	ldr	r2, [r3, #0]
 800f04c:	4b0f      	ldr	r3, [pc, #60]	; (800f08c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	3304      	adds	r3, #4
 800f052:	4619      	mov	r1, r3
 800f054:	4610      	mov	r0, r2
 800f056:	f7ff fa3d 	bl	800e4d4 <vListInsert>
 800f05a:	e010      	b.n	800f07e <prvAddCurrentTaskToDelayedList+0xa6>
 800f05c:	4b0f      	ldr	r3, [pc, #60]	; (800f09c <prvAddCurrentTaskToDelayedList+0xc4>)
 800f05e:	681a      	ldr	r2, [r3, #0]
 800f060:	4b0a      	ldr	r3, [pc, #40]	; (800f08c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	3304      	adds	r3, #4
 800f066:	4619      	mov	r1, r3
 800f068:	4610      	mov	r0, r2
 800f06a:	f7ff fa33 	bl	800e4d4 <vListInsert>
 800f06e:	4b0c      	ldr	r3, [pc, #48]	; (800f0a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	68ba      	ldr	r2, [r7, #8]
 800f074:	429a      	cmp	r2, r3
 800f076:	d202      	bcs.n	800f07e <prvAddCurrentTaskToDelayedList+0xa6>
 800f078:	4a09      	ldr	r2, [pc, #36]	; (800f0a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	6013      	str	r3, [r2, #0]
 800f07e:	bf00      	nop
 800f080:	3710      	adds	r7, #16
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}
 800f086:	bf00      	nop
 800f088:	20000dd4 	.word	0x20000dd4
 800f08c:	20000cd0 	.word	0x20000cd0
 800f090:	20000dd8 	.word	0x20000dd8
 800f094:	20000dbc 	.word	0x20000dbc
 800f098:	20000d8c 	.word	0x20000d8c
 800f09c:	20000d88 	.word	0x20000d88
 800f0a0:	20000df0 	.word	0x20000df0

0800f0a4 <pxPortInitialiseStack>:
 800f0a4:	b480      	push	{r7}
 800f0a6:	b085      	sub	sp, #20
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	60f8      	str	r0, [r7, #12]
 800f0ac:	60b9      	str	r1, [r7, #8]
 800f0ae:	607a      	str	r2, [r7, #4]
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	3b04      	subs	r3, #4
 800f0b4:	60fb      	str	r3, [r7, #12]
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f0bc:	601a      	str	r2, [r3, #0]
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	3b04      	subs	r3, #4
 800f0c2:	60fb      	str	r3, [r7, #12]
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	f023 0201 	bic.w	r2, r3, #1
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	601a      	str	r2, [r3, #0]
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	3b04      	subs	r3, #4
 800f0d2:	60fb      	str	r3, [r7, #12]
 800f0d4:	4a0c      	ldr	r2, [pc, #48]	; (800f108 <pxPortInitialiseStack+0x64>)
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	601a      	str	r2, [r3, #0]
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	3b14      	subs	r3, #20
 800f0de:	60fb      	str	r3, [r7, #12]
 800f0e0:	687a      	ldr	r2, [r7, #4]
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	601a      	str	r2, [r3, #0]
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	3b04      	subs	r3, #4
 800f0ea:	60fb      	str	r3, [r7, #12]
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	f06f 0202 	mvn.w	r2, #2
 800f0f2:	601a      	str	r2, [r3, #0]
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	3b20      	subs	r3, #32
 800f0f8:	60fb      	str	r3, [r7, #12]
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3714      	adds	r7, #20
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr
 800f108:	0800f10d 	.word	0x0800f10d

0800f10c <prvTaskExitError>:
 800f10c:	b480      	push	{r7}
 800f10e:	b085      	sub	sp, #20
 800f110:	af00      	add	r7, sp, #0
 800f112:	2300      	movs	r3, #0
 800f114:	607b      	str	r3, [r7, #4]
 800f116:	4b12      	ldr	r3, [pc, #72]	; (800f160 <prvTaskExitError+0x54>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f11e:	d00a      	beq.n	800f136 <prvTaskExitError+0x2a>
 800f120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f124:	f383 8811 	msr	BASEPRI, r3
 800f128:	f3bf 8f6f 	isb	sy
 800f12c:	f3bf 8f4f 	dsb	sy
 800f130:	60fb      	str	r3, [r7, #12]
 800f132:	bf00      	nop
 800f134:	e7fe      	b.n	800f134 <prvTaskExitError+0x28>
 800f136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f13a:	f383 8811 	msr	BASEPRI, r3
 800f13e:	f3bf 8f6f 	isb	sy
 800f142:	f3bf 8f4f 	dsb	sy
 800f146:	60bb      	str	r3, [r7, #8]
 800f148:	bf00      	nop
 800f14a:	bf00      	nop
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d0fc      	beq.n	800f14c <prvTaskExitError+0x40>
 800f152:	bf00      	nop
 800f154:	bf00      	nop
 800f156:	3714      	adds	r7, #20
 800f158:	46bd      	mov	sp, r7
 800f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15e:	4770      	bx	lr
 800f160:	200000ac 	.word	0x200000ac
	...

0800f170 <SVC_Handler>:
 800f170:	4b07      	ldr	r3, [pc, #28]	; (800f190 <pxCurrentTCBConst2>)
 800f172:	6819      	ldr	r1, [r3, #0]
 800f174:	6808      	ldr	r0, [r1, #0]
 800f176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f17a:	f380 8809 	msr	PSP, r0
 800f17e:	f3bf 8f6f 	isb	sy
 800f182:	f04f 0000 	mov.w	r0, #0
 800f186:	f380 8811 	msr	BASEPRI, r0
 800f18a:	4770      	bx	lr
 800f18c:	f3af 8000 	nop.w

0800f190 <pxCurrentTCBConst2>:
 800f190:	20000cd0 	.word	0x20000cd0
 800f194:	bf00      	nop
 800f196:	bf00      	nop

0800f198 <prvPortStartFirstTask>:
 800f198:	4808      	ldr	r0, [pc, #32]	; (800f1bc <prvPortStartFirstTask+0x24>)
 800f19a:	6800      	ldr	r0, [r0, #0]
 800f19c:	6800      	ldr	r0, [r0, #0]
 800f19e:	f380 8808 	msr	MSP, r0
 800f1a2:	f04f 0000 	mov.w	r0, #0
 800f1a6:	f380 8814 	msr	CONTROL, r0
 800f1aa:	b662      	cpsie	i
 800f1ac:	b661      	cpsie	f
 800f1ae:	f3bf 8f4f 	dsb	sy
 800f1b2:	f3bf 8f6f 	isb	sy
 800f1b6:	df00      	svc	0
 800f1b8:	bf00      	nop
 800f1ba:	bf00      	nop
 800f1bc:	e000ed08 	.word	0xe000ed08

0800f1c0 <xPortStartScheduler>:
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b086      	sub	sp, #24
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	4b46      	ldr	r3, [pc, #280]	; (800f2e0 <xPortStartScheduler+0x120>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	4a46      	ldr	r2, [pc, #280]	; (800f2e4 <xPortStartScheduler+0x124>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d10a      	bne.n	800f1e6 <xPortStartScheduler+0x26>
 800f1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1d4:	f383 8811 	msr	BASEPRI, r3
 800f1d8:	f3bf 8f6f 	isb	sy
 800f1dc:	f3bf 8f4f 	dsb	sy
 800f1e0:	613b      	str	r3, [r7, #16]
 800f1e2:	bf00      	nop
 800f1e4:	e7fe      	b.n	800f1e4 <xPortStartScheduler+0x24>
 800f1e6:	4b3e      	ldr	r3, [pc, #248]	; (800f2e0 <xPortStartScheduler+0x120>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	4a3f      	ldr	r2, [pc, #252]	; (800f2e8 <xPortStartScheduler+0x128>)
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	d10a      	bne.n	800f206 <xPortStartScheduler+0x46>
 800f1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f4:	f383 8811 	msr	BASEPRI, r3
 800f1f8:	f3bf 8f6f 	isb	sy
 800f1fc:	f3bf 8f4f 	dsb	sy
 800f200:	60fb      	str	r3, [r7, #12]
 800f202:	bf00      	nop
 800f204:	e7fe      	b.n	800f204 <xPortStartScheduler+0x44>
 800f206:	4b39      	ldr	r3, [pc, #228]	; (800f2ec <xPortStartScheduler+0x12c>)
 800f208:	617b      	str	r3, [r7, #20]
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	781b      	ldrb	r3, [r3, #0]
 800f20e:	b2db      	uxtb	r3, r3
 800f210:	607b      	str	r3, [r7, #4]
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	22ff      	movs	r2, #255	; 0xff
 800f216:	701a      	strb	r2, [r3, #0]
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	b2db      	uxtb	r3, r3
 800f21e:	70fb      	strb	r3, [r7, #3]
 800f220:	78fb      	ldrb	r3, [r7, #3]
 800f222:	b2db      	uxtb	r3, r3
 800f224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f228:	b2da      	uxtb	r2, r3
 800f22a:	4b31      	ldr	r3, [pc, #196]	; (800f2f0 <xPortStartScheduler+0x130>)
 800f22c:	701a      	strb	r2, [r3, #0]
 800f22e:	4b31      	ldr	r3, [pc, #196]	; (800f2f4 <xPortStartScheduler+0x134>)
 800f230:	2207      	movs	r2, #7
 800f232:	601a      	str	r2, [r3, #0]
 800f234:	e009      	b.n	800f24a <xPortStartScheduler+0x8a>
 800f236:	4b2f      	ldr	r3, [pc, #188]	; (800f2f4 <xPortStartScheduler+0x134>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	3b01      	subs	r3, #1
 800f23c:	4a2d      	ldr	r2, [pc, #180]	; (800f2f4 <xPortStartScheduler+0x134>)
 800f23e:	6013      	str	r3, [r2, #0]
 800f240:	78fb      	ldrb	r3, [r7, #3]
 800f242:	b2db      	uxtb	r3, r3
 800f244:	005b      	lsls	r3, r3, #1
 800f246:	b2db      	uxtb	r3, r3
 800f248:	70fb      	strb	r3, [r7, #3]
 800f24a:	78fb      	ldrb	r3, [r7, #3]
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f252:	2b80      	cmp	r3, #128	; 0x80
 800f254:	d0ef      	beq.n	800f236 <xPortStartScheduler+0x76>
 800f256:	4b27      	ldr	r3, [pc, #156]	; (800f2f4 <xPortStartScheduler+0x134>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	f1c3 0307 	rsb	r3, r3, #7
 800f25e:	2b04      	cmp	r3, #4
 800f260:	d00a      	beq.n	800f278 <xPortStartScheduler+0xb8>
 800f262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f266:	f383 8811 	msr	BASEPRI, r3
 800f26a:	f3bf 8f6f 	isb	sy
 800f26e:	f3bf 8f4f 	dsb	sy
 800f272:	60bb      	str	r3, [r7, #8]
 800f274:	bf00      	nop
 800f276:	e7fe      	b.n	800f276 <xPortStartScheduler+0xb6>
 800f278:	4b1e      	ldr	r3, [pc, #120]	; (800f2f4 <xPortStartScheduler+0x134>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	021b      	lsls	r3, r3, #8
 800f27e:	4a1d      	ldr	r2, [pc, #116]	; (800f2f4 <xPortStartScheduler+0x134>)
 800f280:	6013      	str	r3, [r2, #0]
 800f282:	4b1c      	ldr	r3, [pc, #112]	; (800f2f4 <xPortStartScheduler+0x134>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f28a:	4a1a      	ldr	r2, [pc, #104]	; (800f2f4 <xPortStartScheduler+0x134>)
 800f28c:	6013      	str	r3, [r2, #0]
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	b2da      	uxtb	r2, r3
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	701a      	strb	r2, [r3, #0]
 800f296:	4b18      	ldr	r3, [pc, #96]	; (800f2f8 <xPortStartScheduler+0x138>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	4a17      	ldr	r2, [pc, #92]	; (800f2f8 <xPortStartScheduler+0x138>)
 800f29c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f2a0:	6013      	str	r3, [r2, #0]
 800f2a2:	4b15      	ldr	r3, [pc, #84]	; (800f2f8 <xPortStartScheduler+0x138>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	4a14      	ldr	r2, [pc, #80]	; (800f2f8 <xPortStartScheduler+0x138>)
 800f2a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f2ac:	6013      	str	r3, [r2, #0]
 800f2ae:	f000 f8dd 	bl	800f46c <vPortSetupTimerInterrupt>
 800f2b2:	4b12      	ldr	r3, [pc, #72]	; (800f2fc <xPortStartScheduler+0x13c>)
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	601a      	str	r2, [r3, #0]
 800f2b8:	f000 f8fc 	bl	800f4b4 <vPortEnableVFP>
 800f2bc:	4b10      	ldr	r3, [pc, #64]	; (800f300 <xPortStartScheduler+0x140>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	4a0f      	ldr	r2, [pc, #60]	; (800f300 <xPortStartScheduler+0x140>)
 800f2c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f2c6:	6013      	str	r3, [r2, #0]
 800f2c8:	f7ff ff66 	bl	800f198 <prvPortStartFirstTask>
 800f2cc:	f7ff fd20 	bl	800ed10 <vTaskSwitchContext>
 800f2d0:	f7ff ff1c 	bl	800f10c <prvTaskExitError>
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3718      	adds	r7, #24
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}
 800f2de:	bf00      	nop
 800f2e0:	e000ed00 	.word	0xe000ed00
 800f2e4:	410fc271 	.word	0x410fc271
 800f2e8:	410fc270 	.word	0x410fc270
 800f2ec:	e000e400 	.word	0xe000e400
 800f2f0:	20000dfc 	.word	0x20000dfc
 800f2f4:	20000e00 	.word	0x20000e00
 800f2f8:	e000ed20 	.word	0xe000ed20
 800f2fc:	200000ac 	.word	0x200000ac
 800f300:	e000ef34 	.word	0xe000ef34

0800f304 <vPortEnterCritical>:
 800f304:	b480      	push	{r7}
 800f306:	b083      	sub	sp, #12
 800f308:	af00      	add	r7, sp, #0
 800f30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f30e:	f383 8811 	msr	BASEPRI, r3
 800f312:	f3bf 8f6f 	isb	sy
 800f316:	f3bf 8f4f 	dsb	sy
 800f31a:	607b      	str	r3, [r7, #4]
 800f31c:	bf00      	nop
 800f31e:	4b0f      	ldr	r3, [pc, #60]	; (800f35c <vPortEnterCritical+0x58>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	3301      	adds	r3, #1
 800f324:	4a0d      	ldr	r2, [pc, #52]	; (800f35c <vPortEnterCritical+0x58>)
 800f326:	6013      	str	r3, [r2, #0]
 800f328:	4b0c      	ldr	r3, [pc, #48]	; (800f35c <vPortEnterCritical+0x58>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	2b01      	cmp	r3, #1
 800f32e:	d10f      	bne.n	800f350 <vPortEnterCritical+0x4c>
 800f330:	4b0b      	ldr	r3, [pc, #44]	; (800f360 <vPortEnterCritical+0x5c>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	b2db      	uxtb	r3, r3
 800f336:	2b00      	cmp	r3, #0
 800f338:	d00a      	beq.n	800f350 <vPortEnterCritical+0x4c>
 800f33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f33e:	f383 8811 	msr	BASEPRI, r3
 800f342:	f3bf 8f6f 	isb	sy
 800f346:	f3bf 8f4f 	dsb	sy
 800f34a:	603b      	str	r3, [r7, #0]
 800f34c:	bf00      	nop
 800f34e:	e7fe      	b.n	800f34e <vPortEnterCritical+0x4a>
 800f350:	bf00      	nop
 800f352:	370c      	adds	r7, #12
 800f354:	46bd      	mov	sp, r7
 800f356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35a:	4770      	bx	lr
 800f35c:	200000ac 	.word	0x200000ac
 800f360:	e000ed04 	.word	0xe000ed04

0800f364 <vPortExitCritical>:
 800f364:	b480      	push	{r7}
 800f366:	b083      	sub	sp, #12
 800f368:	af00      	add	r7, sp, #0
 800f36a:	4b12      	ldr	r3, [pc, #72]	; (800f3b4 <vPortExitCritical+0x50>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d10a      	bne.n	800f388 <vPortExitCritical+0x24>
 800f372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f376:	f383 8811 	msr	BASEPRI, r3
 800f37a:	f3bf 8f6f 	isb	sy
 800f37e:	f3bf 8f4f 	dsb	sy
 800f382:	607b      	str	r3, [r7, #4]
 800f384:	bf00      	nop
 800f386:	e7fe      	b.n	800f386 <vPortExitCritical+0x22>
 800f388:	4b0a      	ldr	r3, [pc, #40]	; (800f3b4 <vPortExitCritical+0x50>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	3b01      	subs	r3, #1
 800f38e:	4a09      	ldr	r2, [pc, #36]	; (800f3b4 <vPortExitCritical+0x50>)
 800f390:	6013      	str	r3, [r2, #0]
 800f392:	4b08      	ldr	r3, [pc, #32]	; (800f3b4 <vPortExitCritical+0x50>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d105      	bne.n	800f3a6 <vPortExitCritical+0x42>
 800f39a:	2300      	movs	r3, #0
 800f39c:	603b      	str	r3, [r7, #0]
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	f383 8811 	msr	BASEPRI, r3
 800f3a4:	bf00      	nop
 800f3a6:	bf00      	nop
 800f3a8:	370c      	adds	r7, #12
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b0:	4770      	bx	lr
 800f3b2:	bf00      	nop
 800f3b4:	200000ac 	.word	0x200000ac
	...

0800f3c0 <PendSV_Handler>:
 800f3c0:	f3ef 8009 	mrs	r0, PSP
 800f3c4:	f3bf 8f6f 	isb	sy
 800f3c8:	4b15      	ldr	r3, [pc, #84]	; (800f420 <pxCurrentTCBConst>)
 800f3ca:	681a      	ldr	r2, [r3, #0]
 800f3cc:	f01e 0f10 	tst.w	lr, #16
 800f3d0:	bf08      	it	eq
 800f3d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f3d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3da:	6010      	str	r0, [r2, #0]
 800f3dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f3e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f3e4:	f380 8811 	msr	BASEPRI, r0
 800f3e8:	f3bf 8f4f 	dsb	sy
 800f3ec:	f3bf 8f6f 	isb	sy
 800f3f0:	f7ff fc8e 	bl	800ed10 <vTaskSwitchContext>
 800f3f4:	f04f 0000 	mov.w	r0, #0
 800f3f8:	f380 8811 	msr	BASEPRI, r0
 800f3fc:	bc09      	pop	{r0, r3}
 800f3fe:	6819      	ldr	r1, [r3, #0]
 800f400:	6808      	ldr	r0, [r1, #0]
 800f402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f406:	f01e 0f10 	tst.w	lr, #16
 800f40a:	bf08      	it	eq
 800f40c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f410:	f380 8809 	msr	PSP, r0
 800f414:	f3bf 8f6f 	isb	sy
 800f418:	4770      	bx	lr
 800f41a:	bf00      	nop
 800f41c:	f3af 8000 	nop.w

0800f420 <pxCurrentTCBConst>:
 800f420:	20000cd0 	.word	0x20000cd0
 800f424:	bf00      	nop
 800f426:	bf00      	nop

0800f428 <SysTick_Handler>:
 800f428:	b580      	push	{r7, lr}
 800f42a:	b082      	sub	sp, #8
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f432:	f383 8811 	msr	BASEPRI, r3
 800f436:	f3bf 8f6f 	isb	sy
 800f43a:	f3bf 8f4f 	dsb	sy
 800f43e:	607b      	str	r3, [r7, #4]
 800f440:	bf00      	nop
 800f442:	f7ff fba5 	bl	800eb90 <xTaskIncrementTick>
 800f446:	4603      	mov	r3, r0
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d003      	beq.n	800f454 <SysTick_Handler+0x2c>
 800f44c:	4b06      	ldr	r3, [pc, #24]	; (800f468 <SysTick_Handler+0x40>)
 800f44e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f452:	601a      	str	r2, [r3, #0]
 800f454:	2300      	movs	r3, #0
 800f456:	603b      	str	r3, [r7, #0]
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	f383 8811 	msr	BASEPRI, r3
 800f45e:	bf00      	nop
 800f460:	bf00      	nop
 800f462:	3708      	adds	r7, #8
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}
 800f468:	e000ed04 	.word	0xe000ed04

0800f46c <vPortSetupTimerInterrupt>:
 800f46c:	b480      	push	{r7}
 800f46e:	af00      	add	r7, sp, #0
 800f470:	4b0b      	ldr	r3, [pc, #44]	; (800f4a0 <vPortSetupTimerInterrupt+0x34>)
 800f472:	2200      	movs	r2, #0
 800f474:	601a      	str	r2, [r3, #0]
 800f476:	4b0b      	ldr	r3, [pc, #44]	; (800f4a4 <vPortSetupTimerInterrupt+0x38>)
 800f478:	2200      	movs	r2, #0
 800f47a:	601a      	str	r2, [r3, #0]
 800f47c:	4b0a      	ldr	r3, [pc, #40]	; (800f4a8 <vPortSetupTimerInterrupt+0x3c>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	4a0a      	ldr	r2, [pc, #40]	; (800f4ac <vPortSetupTimerInterrupt+0x40>)
 800f482:	fba2 2303 	umull	r2, r3, r2, r3
 800f486:	099b      	lsrs	r3, r3, #6
 800f488:	4a09      	ldr	r2, [pc, #36]	; (800f4b0 <vPortSetupTimerInterrupt+0x44>)
 800f48a:	3b01      	subs	r3, #1
 800f48c:	6013      	str	r3, [r2, #0]
 800f48e:	4b04      	ldr	r3, [pc, #16]	; (800f4a0 <vPortSetupTimerInterrupt+0x34>)
 800f490:	2207      	movs	r2, #7
 800f492:	601a      	str	r2, [r3, #0]
 800f494:	bf00      	nop
 800f496:	46bd      	mov	sp, r7
 800f498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49c:	4770      	bx	lr
 800f49e:	bf00      	nop
 800f4a0:	e000e010 	.word	0xe000e010
 800f4a4:	e000e018 	.word	0xe000e018
 800f4a8:	20000014 	.word	0x20000014
 800f4ac:	10624dd3 	.word	0x10624dd3
 800f4b0:	e000e014 	.word	0xe000e014

0800f4b4 <vPortEnableVFP>:
 800f4b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f4c4 <vPortEnableVFP+0x10>
 800f4b8:	6801      	ldr	r1, [r0, #0]
 800f4ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f4be:	6001      	str	r1, [r0, #0]
 800f4c0:	4770      	bx	lr
 800f4c2:	bf00      	nop
 800f4c4:	e000ed88 	.word	0xe000ed88

0800f4c8 <pvPortMalloc>:
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b08a      	sub	sp, #40	; 0x28
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	61fb      	str	r3, [r7, #28]
 800f4d4:	f7ff fab2 	bl	800ea3c <vTaskSuspendAll>
 800f4d8:	4b5d      	ldr	r3, [pc, #372]	; (800f650 <pvPortMalloc+0x188>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d101      	bne.n	800f4e4 <pvPortMalloc+0x1c>
 800f4e0:	f000 f924 	bl	800f72c <prvHeapInit>
 800f4e4:	4b5b      	ldr	r3, [pc, #364]	; (800f654 <pvPortMalloc+0x18c>)
 800f4e6:	681a      	ldr	r2, [r3, #0]
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	4013      	ands	r3, r2
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	f040 8093 	bne.w	800f618 <pvPortMalloc+0x150>
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d01d      	beq.n	800f534 <pvPortMalloc+0x6c>
 800f4f8:	2208      	movs	r2, #8
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4413      	add	r3, r2
 800f4fe:	607b      	str	r3, [r7, #4]
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f003 0307 	and.w	r3, r3, #7
 800f506:	2b00      	cmp	r3, #0
 800f508:	d014      	beq.n	800f534 <pvPortMalloc+0x6c>
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f023 0307 	bic.w	r3, r3, #7
 800f510:	3308      	adds	r3, #8
 800f512:	607b      	str	r3, [r7, #4]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f003 0307 	and.w	r3, r3, #7
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d00a      	beq.n	800f534 <pvPortMalloc+0x6c>
 800f51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f522:	f383 8811 	msr	BASEPRI, r3
 800f526:	f3bf 8f6f 	isb	sy
 800f52a:	f3bf 8f4f 	dsb	sy
 800f52e:	617b      	str	r3, [r7, #20]
 800f530:	bf00      	nop
 800f532:	e7fe      	b.n	800f532 <pvPortMalloc+0x6a>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d06e      	beq.n	800f618 <pvPortMalloc+0x150>
 800f53a:	4b47      	ldr	r3, [pc, #284]	; (800f658 <pvPortMalloc+0x190>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	687a      	ldr	r2, [r7, #4]
 800f540:	429a      	cmp	r2, r3
 800f542:	d869      	bhi.n	800f618 <pvPortMalloc+0x150>
 800f544:	4b45      	ldr	r3, [pc, #276]	; (800f65c <pvPortMalloc+0x194>)
 800f546:	623b      	str	r3, [r7, #32]
 800f548:	4b44      	ldr	r3, [pc, #272]	; (800f65c <pvPortMalloc+0x194>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	627b      	str	r3, [r7, #36]	; 0x24
 800f54e:	e004      	b.n	800f55a <pvPortMalloc+0x92>
 800f550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f552:	623b      	str	r3, [r7, #32]
 800f554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	627b      	str	r3, [r7, #36]	; 0x24
 800f55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55c:	685b      	ldr	r3, [r3, #4]
 800f55e:	687a      	ldr	r2, [r7, #4]
 800f560:	429a      	cmp	r2, r3
 800f562:	d903      	bls.n	800f56c <pvPortMalloc+0xa4>
 800f564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d1f1      	bne.n	800f550 <pvPortMalloc+0x88>
 800f56c:	4b38      	ldr	r3, [pc, #224]	; (800f650 <pvPortMalloc+0x188>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f572:	429a      	cmp	r2, r3
 800f574:	d050      	beq.n	800f618 <pvPortMalloc+0x150>
 800f576:	6a3b      	ldr	r3, [r7, #32]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	2208      	movs	r2, #8
 800f57c:	4413      	add	r3, r2
 800f57e:	61fb      	str	r3, [r7, #28]
 800f580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	6a3b      	ldr	r3, [r7, #32]
 800f586:	601a      	str	r2, [r3, #0]
 800f588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f58a:	685a      	ldr	r2, [r3, #4]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	1ad2      	subs	r2, r2, r3
 800f590:	2308      	movs	r3, #8
 800f592:	005b      	lsls	r3, r3, #1
 800f594:	429a      	cmp	r2, r3
 800f596:	d91f      	bls.n	800f5d8 <pvPortMalloc+0x110>
 800f598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	4413      	add	r3, r2
 800f59e:	61bb      	str	r3, [r7, #24]
 800f5a0:	69bb      	ldr	r3, [r7, #24]
 800f5a2:	f003 0307 	and.w	r3, r3, #7
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d00a      	beq.n	800f5c0 <pvPortMalloc+0xf8>
 800f5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ae:	f383 8811 	msr	BASEPRI, r3
 800f5b2:	f3bf 8f6f 	isb	sy
 800f5b6:	f3bf 8f4f 	dsb	sy
 800f5ba:	613b      	str	r3, [r7, #16]
 800f5bc:	bf00      	nop
 800f5be:	e7fe      	b.n	800f5be <pvPortMalloc+0xf6>
 800f5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c2:	685a      	ldr	r2, [r3, #4]
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	1ad2      	subs	r2, r2, r3
 800f5c8:	69bb      	ldr	r3, [r7, #24]
 800f5ca:	605a      	str	r2, [r3, #4]
 800f5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ce:	687a      	ldr	r2, [r7, #4]
 800f5d0:	605a      	str	r2, [r3, #4]
 800f5d2:	69b8      	ldr	r0, [r7, #24]
 800f5d4:	f000 f90c 	bl	800f7f0 <prvInsertBlockIntoFreeList>
 800f5d8:	4b1f      	ldr	r3, [pc, #124]	; (800f658 <pvPortMalloc+0x190>)
 800f5da:	681a      	ldr	r2, [r3, #0]
 800f5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5de:	685b      	ldr	r3, [r3, #4]
 800f5e0:	1ad3      	subs	r3, r2, r3
 800f5e2:	4a1d      	ldr	r2, [pc, #116]	; (800f658 <pvPortMalloc+0x190>)
 800f5e4:	6013      	str	r3, [r2, #0]
 800f5e6:	4b1c      	ldr	r3, [pc, #112]	; (800f658 <pvPortMalloc+0x190>)
 800f5e8:	681a      	ldr	r2, [r3, #0]
 800f5ea:	4b1d      	ldr	r3, [pc, #116]	; (800f660 <pvPortMalloc+0x198>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d203      	bcs.n	800f5fa <pvPortMalloc+0x132>
 800f5f2:	4b19      	ldr	r3, [pc, #100]	; (800f658 <pvPortMalloc+0x190>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	4a1a      	ldr	r2, [pc, #104]	; (800f660 <pvPortMalloc+0x198>)
 800f5f8:	6013      	str	r3, [r2, #0]
 800f5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fc:	685a      	ldr	r2, [r3, #4]
 800f5fe:	4b15      	ldr	r3, [pc, #84]	; (800f654 <pvPortMalloc+0x18c>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	431a      	orrs	r2, r3
 800f604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f606:	605a      	str	r2, [r3, #4]
 800f608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60a:	2200      	movs	r2, #0
 800f60c:	601a      	str	r2, [r3, #0]
 800f60e:	4b15      	ldr	r3, [pc, #84]	; (800f664 <pvPortMalloc+0x19c>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	3301      	adds	r3, #1
 800f614:	4a13      	ldr	r2, [pc, #76]	; (800f664 <pvPortMalloc+0x19c>)
 800f616:	6013      	str	r3, [r2, #0]
 800f618:	f7ff fa1e 	bl	800ea58 <xTaskResumeAll>
 800f61c:	69fb      	ldr	r3, [r7, #28]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d101      	bne.n	800f626 <pvPortMalloc+0x15e>
 800f622:	f7f1 fe6a 	bl	80012fa <vApplicationMallocFailedHook>
 800f626:	69fb      	ldr	r3, [r7, #28]
 800f628:	f003 0307 	and.w	r3, r3, #7
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d00a      	beq.n	800f646 <pvPortMalloc+0x17e>
 800f630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f634:	f383 8811 	msr	BASEPRI, r3
 800f638:	f3bf 8f6f 	isb	sy
 800f63c:	f3bf 8f4f 	dsb	sy
 800f640:	60fb      	str	r3, [r7, #12]
 800f642:	bf00      	nop
 800f644:	e7fe      	b.n	800f644 <pvPortMalloc+0x17c>
 800f646:	69fb      	ldr	r3, [r7, #28]
 800f648:	4618      	mov	r0, r3
 800f64a:	3728      	adds	r7, #40	; 0x28
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}
 800f650:	20004a0c 	.word	0x20004a0c
 800f654:	20004a20 	.word	0x20004a20
 800f658:	20004a10 	.word	0x20004a10
 800f65c:	20004a04 	.word	0x20004a04
 800f660:	20004a14 	.word	0x20004a14
 800f664:	20004a18 	.word	0x20004a18

0800f668 <vPortFree>:
 800f668:	b580      	push	{r7, lr}
 800f66a:	b086      	sub	sp, #24
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	617b      	str	r3, [r7, #20]
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d04d      	beq.n	800f716 <vPortFree+0xae>
 800f67a:	2308      	movs	r3, #8
 800f67c:	425b      	negs	r3, r3
 800f67e:	697a      	ldr	r2, [r7, #20]
 800f680:	4413      	add	r3, r2
 800f682:	617b      	str	r3, [r7, #20]
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	613b      	str	r3, [r7, #16]
 800f688:	693b      	ldr	r3, [r7, #16]
 800f68a:	685a      	ldr	r2, [r3, #4]
 800f68c:	4b24      	ldr	r3, [pc, #144]	; (800f720 <vPortFree+0xb8>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	4013      	ands	r3, r2
 800f692:	2b00      	cmp	r3, #0
 800f694:	d10a      	bne.n	800f6ac <vPortFree+0x44>
 800f696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f69a:	f383 8811 	msr	BASEPRI, r3
 800f69e:	f3bf 8f6f 	isb	sy
 800f6a2:	f3bf 8f4f 	dsb	sy
 800f6a6:	60fb      	str	r3, [r7, #12]
 800f6a8:	bf00      	nop
 800f6aa:	e7fe      	b.n	800f6aa <vPortFree+0x42>
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d00a      	beq.n	800f6ca <vPortFree+0x62>
 800f6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b8:	f383 8811 	msr	BASEPRI, r3
 800f6bc:	f3bf 8f6f 	isb	sy
 800f6c0:	f3bf 8f4f 	dsb	sy
 800f6c4:	60bb      	str	r3, [r7, #8]
 800f6c6:	bf00      	nop
 800f6c8:	e7fe      	b.n	800f6c8 <vPortFree+0x60>
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	685a      	ldr	r2, [r3, #4]
 800f6ce:	4b14      	ldr	r3, [pc, #80]	; (800f720 <vPortFree+0xb8>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	4013      	ands	r3, r2
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d01e      	beq.n	800f716 <vPortFree+0xae>
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d11a      	bne.n	800f716 <vPortFree+0xae>
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	685a      	ldr	r2, [r3, #4]
 800f6e4:	4b0e      	ldr	r3, [pc, #56]	; (800f720 <vPortFree+0xb8>)
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	43db      	mvns	r3, r3
 800f6ea:	401a      	ands	r2, r3
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	605a      	str	r2, [r3, #4]
 800f6f0:	f7ff f9a4 	bl	800ea3c <vTaskSuspendAll>
 800f6f4:	693b      	ldr	r3, [r7, #16]
 800f6f6:	685a      	ldr	r2, [r3, #4]
 800f6f8:	4b0a      	ldr	r3, [pc, #40]	; (800f724 <vPortFree+0xbc>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	4413      	add	r3, r2
 800f6fe:	4a09      	ldr	r2, [pc, #36]	; (800f724 <vPortFree+0xbc>)
 800f700:	6013      	str	r3, [r2, #0]
 800f702:	6938      	ldr	r0, [r7, #16]
 800f704:	f000 f874 	bl	800f7f0 <prvInsertBlockIntoFreeList>
 800f708:	4b07      	ldr	r3, [pc, #28]	; (800f728 <vPortFree+0xc0>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	3301      	adds	r3, #1
 800f70e:	4a06      	ldr	r2, [pc, #24]	; (800f728 <vPortFree+0xc0>)
 800f710:	6013      	str	r3, [r2, #0]
 800f712:	f7ff f9a1 	bl	800ea58 <xTaskResumeAll>
 800f716:	bf00      	nop
 800f718:	3718      	adds	r7, #24
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}
 800f71e:	bf00      	nop
 800f720:	20004a20 	.word	0x20004a20
 800f724:	20004a10 	.word	0x20004a10
 800f728:	20004a1c 	.word	0x20004a1c

0800f72c <prvHeapInit>:
 800f72c:	b480      	push	{r7}
 800f72e:	b085      	sub	sp, #20
 800f730:	af00      	add	r7, sp, #0
 800f732:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f736:	60bb      	str	r3, [r7, #8]
 800f738:	4b27      	ldr	r3, [pc, #156]	; (800f7d8 <prvHeapInit+0xac>)
 800f73a:	60fb      	str	r3, [r7, #12]
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	f003 0307 	and.w	r3, r3, #7
 800f742:	2b00      	cmp	r3, #0
 800f744:	d00c      	beq.n	800f760 <prvHeapInit+0x34>
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	3307      	adds	r3, #7
 800f74a:	60fb      	str	r3, [r7, #12]
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	f023 0307 	bic.w	r3, r3, #7
 800f752:	60fb      	str	r3, [r7, #12]
 800f754:	68ba      	ldr	r2, [r7, #8]
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	1ad3      	subs	r3, r2, r3
 800f75a:	4a1f      	ldr	r2, [pc, #124]	; (800f7d8 <prvHeapInit+0xac>)
 800f75c:	4413      	add	r3, r2
 800f75e:	60bb      	str	r3, [r7, #8]
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	607b      	str	r3, [r7, #4]
 800f764:	4a1d      	ldr	r2, [pc, #116]	; (800f7dc <prvHeapInit+0xb0>)
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6013      	str	r3, [r2, #0]
 800f76a:	4b1c      	ldr	r3, [pc, #112]	; (800f7dc <prvHeapInit+0xb0>)
 800f76c:	2200      	movs	r2, #0
 800f76e:	605a      	str	r2, [r3, #4]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	68ba      	ldr	r2, [r7, #8]
 800f774:	4413      	add	r3, r2
 800f776:	60fb      	str	r3, [r7, #12]
 800f778:	2208      	movs	r2, #8
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	1a9b      	subs	r3, r3, r2
 800f77e:	60fb      	str	r3, [r7, #12]
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	f023 0307 	bic.w	r3, r3, #7
 800f786:	60fb      	str	r3, [r7, #12]
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	4a15      	ldr	r2, [pc, #84]	; (800f7e0 <prvHeapInit+0xb4>)
 800f78c:	6013      	str	r3, [r2, #0]
 800f78e:	4b14      	ldr	r3, [pc, #80]	; (800f7e0 <prvHeapInit+0xb4>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	2200      	movs	r2, #0
 800f794:	605a      	str	r2, [r3, #4]
 800f796:	4b12      	ldr	r3, [pc, #72]	; (800f7e0 <prvHeapInit+0xb4>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	2200      	movs	r2, #0
 800f79c:	601a      	str	r2, [r3, #0]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	603b      	str	r3, [r7, #0]
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	68fa      	ldr	r2, [r7, #12]
 800f7a6:	1ad2      	subs	r2, r2, r3
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	605a      	str	r2, [r3, #4]
 800f7ac:	4b0c      	ldr	r3, [pc, #48]	; (800f7e0 <prvHeapInit+0xb4>)
 800f7ae:	681a      	ldr	r2, [r3, #0]
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	601a      	str	r2, [r3, #0]
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	4a0a      	ldr	r2, [pc, #40]	; (800f7e4 <prvHeapInit+0xb8>)
 800f7ba:	6013      	str	r3, [r2, #0]
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	4a09      	ldr	r2, [pc, #36]	; (800f7e8 <prvHeapInit+0xbc>)
 800f7c2:	6013      	str	r3, [r2, #0]
 800f7c4:	4b09      	ldr	r3, [pc, #36]	; (800f7ec <prvHeapInit+0xc0>)
 800f7c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f7ca:	601a      	str	r2, [r3, #0]
 800f7cc:	bf00      	nop
 800f7ce:	3714      	adds	r7, #20
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d6:	4770      	bx	lr
 800f7d8:	20000e04 	.word	0x20000e04
 800f7dc:	20004a04 	.word	0x20004a04
 800f7e0:	20004a0c 	.word	0x20004a0c
 800f7e4:	20004a14 	.word	0x20004a14
 800f7e8:	20004a10 	.word	0x20004a10
 800f7ec:	20004a20 	.word	0x20004a20

0800f7f0 <prvInsertBlockIntoFreeList>:
 800f7f0:	b480      	push	{r7}
 800f7f2:	b085      	sub	sp, #20
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
 800f7f8:	4b28      	ldr	r3, [pc, #160]	; (800f89c <prvInsertBlockIntoFreeList+0xac>)
 800f7fa:	60fb      	str	r3, [r7, #12]
 800f7fc:	e002      	b.n	800f804 <prvInsertBlockIntoFreeList+0x14>
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	60fb      	str	r3, [r7, #12]
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	687a      	ldr	r2, [r7, #4]
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d8f7      	bhi.n	800f7fe <prvInsertBlockIntoFreeList+0xe>
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	60bb      	str	r3, [r7, #8]
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	685b      	ldr	r3, [r3, #4]
 800f816:	68ba      	ldr	r2, [r7, #8]
 800f818:	4413      	add	r3, r2
 800f81a:	687a      	ldr	r2, [r7, #4]
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d108      	bne.n	800f832 <prvInsertBlockIntoFreeList+0x42>
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	685a      	ldr	r2, [r3, #4]
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	685b      	ldr	r3, [r3, #4]
 800f828:	441a      	add	r2, r3
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	605a      	str	r2, [r3, #4]
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	607b      	str	r3, [r7, #4]
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	60bb      	str	r3, [r7, #8]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	685b      	ldr	r3, [r3, #4]
 800f83a:	68ba      	ldr	r2, [r7, #8]
 800f83c:	441a      	add	r2, r3
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	429a      	cmp	r2, r3
 800f844:	d118      	bne.n	800f878 <prvInsertBlockIntoFreeList+0x88>
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	4b15      	ldr	r3, [pc, #84]	; (800f8a0 <prvInsertBlockIntoFreeList+0xb0>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	429a      	cmp	r2, r3
 800f850:	d00d      	beq.n	800f86e <prvInsertBlockIntoFreeList+0x7e>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	685a      	ldr	r2, [r3, #4]
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	685b      	ldr	r3, [r3, #4]
 800f85c:	441a      	add	r2, r3
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	605a      	str	r2, [r3, #4]
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	681a      	ldr	r2, [r3, #0]
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	601a      	str	r2, [r3, #0]
 800f86c:	e008      	b.n	800f880 <prvInsertBlockIntoFreeList+0x90>
 800f86e:	4b0c      	ldr	r3, [pc, #48]	; (800f8a0 <prvInsertBlockIntoFreeList+0xb0>)
 800f870:	681a      	ldr	r2, [r3, #0]
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	601a      	str	r2, [r3, #0]
 800f876:	e003      	b.n	800f880 <prvInsertBlockIntoFreeList+0x90>
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	681a      	ldr	r2, [r3, #0]
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	601a      	str	r2, [r3, #0]
 800f880:	68fa      	ldr	r2, [r7, #12]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	429a      	cmp	r2, r3
 800f886:	d002      	beq.n	800f88e <prvInsertBlockIntoFreeList+0x9e>
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	687a      	ldr	r2, [r7, #4]
 800f88c:	601a      	str	r2, [r3, #0]
 800f88e:	bf00      	nop
 800f890:	3714      	adds	r7, #20
 800f892:	46bd      	mov	sp, r7
 800f894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f898:	4770      	bx	lr
 800f89a:	bf00      	nop
 800f89c:	20004a04 	.word	0x20004a04
 800f8a0:	20004a0c 	.word	0x20004a0c

0800f8a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	4912      	ldr	r1, [pc, #72]	; (800f8f4 <MX_USB_DEVICE_Init+0x50>)
 800f8ac:	4812      	ldr	r0, [pc, #72]	; (800f8f8 <MX_USB_DEVICE_Init+0x54>)
 800f8ae:	f7fd fa4f 	bl	800cd50 <USBD_Init>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d001      	beq.n	800f8bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f8b8:	f7f3 f9ce 	bl	8002c58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f8bc:	490f      	ldr	r1, [pc, #60]	; (800f8fc <MX_USB_DEVICE_Init+0x58>)
 800f8be:	480e      	ldr	r0, [pc, #56]	; (800f8f8 <MX_USB_DEVICE_Init+0x54>)
 800f8c0:	f7fd fa76 	bl	800cdb0 <USBD_RegisterClass>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d001      	beq.n	800f8ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f8ca:	f7f3 f9c5 	bl	8002c58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f8ce:	490c      	ldr	r1, [pc, #48]	; (800f900 <MX_USB_DEVICE_Init+0x5c>)
 800f8d0:	4809      	ldr	r0, [pc, #36]	; (800f8f8 <MX_USB_DEVICE_Init+0x54>)
 800f8d2:	f7fd f967 	bl	800cba4 <USBD_CDC_RegisterInterface>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d001      	beq.n	800f8e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f8dc:	f7f3 f9bc 	bl	8002c58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f8e0:	4805      	ldr	r0, [pc, #20]	; (800f8f8 <MX_USB_DEVICE_Init+0x54>)
 800f8e2:	f7fd fa9b 	bl	800ce1c <USBD_Start>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d001      	beq.n	800f8f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f8ec:	f7f3 f9b4 	bl	8002c58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f8f0:	bf00      	nop
 800f8f2:	bd80      	pop	{r7, pc}
 800f8f4:	200000c4 	.word	0x200000c4
 800f8f8:	20004a24 	.word	0x20004a24
 800f8fc:	2000002c 	.word	0x2000002c
 800f900:	200000b0 	.word	0x200000b0

0800f904 <CDC_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f908:	2200      	movs	r2, #0
 800f90a:	4905      	ldr	r1, [pc, #20]	; (800f920 <CDC_Init_FS+0x1c>)
 800f90c:	4805      	ldr	r0, [pc, #20]	; (800f924 <CDC_Init_FS+0x20>)
 800f90e:	f7fd f963 	bl	800cbd8 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f912:	4905      	ldr	r1, [pc, #20]	; (800f928 <CDC_Init_FS+0x24>)
 800f914:	4803      	ldr	r0, [pc, #12]	; (800f924 <CDC_Init_FS+0x20>)
 800f916:	f7fd f981 	bl	800cc1c <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800f91a:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	bd80      	pop	{r7, pc}
 800f920:	20005104 	.word	0x20005104
 800f924:	20004a24 	.word	0x20004a24
 800f928:	20004d04 	.word	0x20004d04

0800f92c <CDC_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void)
{
 800f92c:	b480      	push	{r7}
 800f92e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 800f930:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 800f932:	4618      	mov	r0, r3
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr

0800f93c <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
 800f942:	4603      	mov	r3, r0
 800f944:	6039      	str	r1, [r7, #0]
 800f946:	71fb      	strb	r3, [r7, #7]
 800f948:	4613      	mov	r3, r2
 800f94a:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd)
 800f94c:	79fb      	ldrb	r3, [r7, #7]
 800f94e:	2b23      	cmp	r3, #35	; 0x23
 800f950:	f200 808c 	bhi.w	800fa6c <CDC_Control_FS+0x130>
 800f954:	a201      	add	r2, pc, #4	; (adr r2, 800f95c <CDC_Control_FS+0x20>)
 800f956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f95a:	bf00      	nop
 800f95c:	0800fa6d 	.word	0x0800fa6d
 800f960:	0800fa6d 	.word	0x0800fa6d
 800f964:	0800fa6d 	.word	0x0800fa6d
 800f968:	0800fa6d 	.word	0x0800fa6d
 800f96c:	0800fa6d 	.word	0x0800fa6d
 800f970:	0800fa6d 	.word	0x0800fa6d
 800f974:	0800fa6d 	.word	0x0800fa6d
 800f978:	0800fa6d 	.word	0x0800fa6d
 800f97c:	0800fa6d 	.word	0x0800fa6d
 800f980:	0800fa6d 	.word	0x0800fa6d
 800f984:	0800fa6d 	.word	0x0800fa6d
 800f988:	0800fa6d 	.word	0x0800fa6d
 800f98c:	0800fa6d 	.word	0x0800fa6d
 800f990:	0800fa6d 	.word	0x0800fa6d
 800f994:	0800fa6d 	.word	0x0800fa6d
 800f998:	0800fa6d 	.word	0x0800fa6d
 800f99c:	0800fa6d 	.word	0x0800fa6d
 800f9a0:	0800fa6d 	.word	0x0800fa6d
 800f9a4:	0800fa6d 	.word	0x0800fa6d
 800f9a8:	0800fa6d 	.word	0x0800fa6d
 800f9ac:	0800fa6d 	.word	0x0800fa6d
 800f9b0:	0800fa6d 	.word	0x0800fa6d
 800f9b4:	0800fa6d 	.word	0x0800fa6d
 800f9b8:	0800fa6d 	.word	0x0800fa6d
 800f9bc:	0800fa6d 	.word	0x0800fa6d
 800f9c0:	0800fa6d 	.word	0x0800fa6d
 800f9c4:	0800fa6d 	.word	0x0800fa6d
 800f9c8:	0800fa6d 	.word	0x0800fa6d
 800f9cc:	0800fa6d 	.word	0x0800fa6d
 800f9d0:	0800fa6d 	.word	0x0800fa6d
 800f9d4:	0800fa6d 	.word	0x0800fa6d
 800f9d8:	0800fa6d 	.word	0x0800fa6d
 800f9dc:	0800f9ed 	.word	0x0800f9ed
 800f9e0:	0800fa27 	.word	0x0800fa27
 800f9e4:	0800fa6d 	.word	0x0800fa6d
 800f9e8:	0800fa6d 	.word	0x0800fa6d
			/*                                        3 - Mark                             */
			/*                                        4 - Space                            */
			/* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
			/*******************************************************************************/
		case CDC_SET_LINE_CODING:
			tempBuffer[0] = pbuf[0];
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	781a      	ldrb	r2, [r3, #0]
 800f9f0:	4b22      	ldr	r3, [pc, #136]	; (800fa7c <CDC_Control_FS+0x140>)
 800f9f2:	701a      	strb	r2, [r3, #0]
			tempBuffer[1] = pbuf[1];
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	785a      	ldrb	r2, [r3, #1]
 800f9f8:	4b20      	ldr	r3, [pc, #128]	; (800fa7c <CDC_Control_FS+0x140>)
 800f9fa:	705a      	strb	r2, [r3, #1]
			tempBuffer[2] = pbuf[2];
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	789a      	ldrb	r2, [r3, #2]
 800fa00:	4b1e      	ldr	r3, [pc, #120]	; (800fa7c <CDC_Control_FS+0x140>)
 800fa02:	709a      	strb	r2, [r3, #2]
			tempBuffer[3] = pbuf[3];
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	78da      	ldrb	r2, [r3, #3]
 800fa08:	4b1c      	ldr	r3, [pc, #112]	; (800fa7c <CDC_Control_FS+0x140>)
 800fa0a:	70da      	strb	r2, [r3, #3]
			tempBuffer[4] = pbuf[4];
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	791a      	ldrb	r2, [r3, #4]
 800fa10:	4b1a      	ldr	r3, [pc, #104]	; (800fa7c <CDC_Control_FS+0x140>)
 800fa12:	711a      	strb	r2, [r3, #4]
			tempBuffer[5] = pbuf[5];
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	795a      	ldrb	r2, [r3, #5]
 800fa18:	4b18      	ldr	r3, [pc, #96]	; (800fa7c <CDC_Control_FS+0x140>)
 800fa1a:	715a      	strb	r2, [r3, #5]
			tempBuffer[6] = pbuf[6];
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	799a      	ldrb	r2, [r3, #6]
 800fa20:	4b16      	ldr	r3, [pc, #88]	; (800fa7c <CDC_Control_FS+0x140>)
 800fa22:	719a      	strb	r2, [r3, #6]
			break;
 800fa24:	e023      	b.n	800fa6e <CDC_Control_FS+0x132>

		case CDC_GET_LINE_CODING:
			pbuf[0] = tempBuffer[0];
 800fa26:	4b15      	ldr	r3, [pc, #84]	; (800fa7c <CDC_Control_FS+0x140>)
 800fa28:	781a      	ldrb	r2, [r3, #0]
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	701a      	strb	r2, [r3, #0]
			pbuf[1] = tempBuffer[1];
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	3301      	adds	r3, #1
 800fa32:	4a12      	ldr	r2, [pc, #72]	; (800fa7c <CDC_Control_FS+0x140>)
 800fa34:	7852      	ldrb	r2, [r2, #1]
 800fa36:	701a      	strb	r2, [r3, #0]
			pbuf[2] = tempBuffer[2];
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	3302      	adds	r3, #2
 800fa3c:	4a0f      	ldr	r2, [pc, #60]	; (800fa7c <CDC_Control_FS+0x140>)
 800fa3e:	7892      	ldrb	r2, [r2, #2]
 800fa40:	701a      	strb	r2, [r3, #0]
			pbuf[3] = tempBuffer[3];
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	3303      	adds	r3, #3
 800fa46:	4a0d      	ldr	r2, [pc, #52]	; (800fa7c <CDC_Control_FS+0x140>)
 800fa48:	78d2      	ldrb	r2, [r2, #3]
 800fa4a:	701a      	strb	r2, [r3, #0]
			pbuf[4] = tempBuffer[4];
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	3304      	adds	r3, #4
 800fa50:	4a0a      	ldr	r2, [pc, #40]	; (800fa7c <CDC_Control_FS+0x140>)
 800fa52:	7912      	ldrb	r2, [r2, #4]
 800fa54:	701a      	strb	r2, [r3, #0]
			pbuf[5] = tempBuffer[5];
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	3305      	adds	r3, #5
 800fa5a:	4a08      	ldr	r2, [pc, #32]	; (800fa7c <CDC_Control_FS+0x140>)
 800fa5c:	7952      	ldrb	r2, [r2, #5]
 800fa5e:	701a      	strb	r2, [r3, #0]
			pbuf[6] = tempBuffer[6];
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	3306      	adds	r3, #6
 800fa64:	4a05      	ldr	r2, [pc, #20]	; (800fa7c <CDC_Control_FS+0x140>)
 800fa66:	7992      	ldrb	r2, [r2, #6]
 800fa68:	701a      	strb	r2, [r3, #0]
			break;
 800fa6a:	e000      	b.n	800fa6e <CDC_Control_FS+0x132>
		case CDC_SEND_BREAK:

			break;

		default:
			break;
 800fa6c:	bf00      	nop
	}

	return (USBD_OK);
 800fa6e:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 800fa70:	4618      	mov	r0, r3
 800fa72:	370c      	adds	r7, #12
 800fa74:	46bd      	mov	sp, r7
 800fa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7a:	4770      	bx	lr
 800fa7c:	20005504 	.word	0x20005504

0800fa80 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b082      	sub	sp, #8
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fa8a:	6879      	ldr	r1, [r7, #4]
 800fa8c:	4809      	ldr	r0, [pc, #36]	; (800fab4 <CDC_Receive_FS+0x34>)
 800fa8e:	f7fd f8c5 	bl	800cc1c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fa92:	4808      	ldr	r0, [pc, #32]	; (800fab4 <CDC_Receive_FS+0x34>)
 800fa94:	f7fd f926 	bl	800cce4 <USBD_CDC_ReceivePacket>
	UserRxBufferFS[APP_RX_DATA_SIZE] = 0;
 800fa98:	4b07      	ldr	r3, [pc, #28]	; (800fab8 <CDC_Receive_FS+0x38>)
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	USBReceiveHandler(UserRxBufferFS, Len);
 800faa0:	6839      	ldr	r1, [r7, #0]
 800faa2:	4805      	ldr	r0, [pc, #20]	; (800fab8 <CDC_Receive_FS+0x38>)
 800faa4:	f000 f842 	bl	800fb2c <USBReceiveHandler>
	return (USBD_OK);
 800faa8:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 800faaa:	4618      	mov	r0, r3
 800faac:	3708      	adds	r7, #8
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd80      	pop	{r7, pc}
 800fab2:	bf00      	nop
 800fab4:	20004a24 	.word	0x20004a24
 800fab8:	20004d04 	.word	0x20004d04

0800fabc <CDC_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	460b      	mov	r3, r1
 800fac6:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 800fac8:	2300      	movs	r3, #0
 800faca:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 800facc:	4b0d      	ldr	r3, [pc, #52]	; (800fb04 <CDC_Transmit_FS+0x48>)
 800face:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fad2:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0)
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d001      	beq.n	800fae2 <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 800fade:	2301      	movs	r3, #1
 800fae0:	e00b      	b.n	800fafa <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fae2:	887b      	ldrh	r3, [r7, #2]
 800fae4:	461a      	mov	r2, r3
 800fae6:	6879      	ldr	r1, [r7, #4]
 800fae8:	4806      	ldr	r0, [pc, #24]	; (800fb04 <CDC_Transmit_FS+0x48>)
 800faea:	f7fd f875 	bl	800cbd8 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800faee:	4805      	ldr	r0, [pc, #20]	; (800fb04 <CDC_Transmit_FS+0x48>)
 800faf0:	f7fd f8b2 	bl	800cc58 <USBD_CDC_TransmitPacket>
 800faf4:	4603      	mov	r3, r0
 800faf6:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 800faf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	3710      	adds	r7, #16
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}
 800fb02:	bf00      	nop
 800fb04:	20004a24 	.word	0x20004a24

0800fb08 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b087      	sub	sp, #28
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	60f8      	str	r0, [r7, #12]
 800fb10:	60b9      	str	r1, [r7, #8]
 800fb12:	4613      	mov	r3, r2
 800fb14:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 800fb16:	2300      	movs	r3, #0
 800fb18:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 800fb1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb1e:	4618      	mov	r0, r3
 800fb20:	371c      	adds	r7, #28
 800fb22:	46bd      	mov	sp, r7
 800fb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb28:	4770      	bx	lr
	...

0800fb2c <USBReceiveHandler>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void USBReceiveHandler(uint8_t *buf, uint32_t *len)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b082      	sub	sp, #8
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	6039      	str	r1, [r7, #0]
	USBRXDataBuffer = buf;
 800fb36:	4a19      	ldr	r2, [pc, #100]	; (800fb9c <USBReceiveHandler+0x70>)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6013      	str	r3, [r2, #0]
	USBRXDataLength = *len;
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	b2da      	uxtb	r2, r3
 800fb42:	4b17      	ldr	r3, [pc, #92]	; (800fba0 <USBReceiveHandler+0x74>)
 800fb44:	701a      	strb	r2, [r3, #0]
	USBRXDataReady = 1;
 800fb46:	4b17      	ldr	r3, [pc, #92]	; (800fba4 <USBReceiveHandler+0x78>)
 800fb48:	2201      	movs	r2, #1
 800fb4a:	701a      	strb	r2, [r3, #0]
//	printf("test=%s\r\n", USBRXDataBuffer);
//	sprintf("%0.1fC", *USBRXDataBuffer);
//	CDC_Transmit_FS((uint8_t*) (USBRXDataBuffer), USBRXDataLength);
	switch (USB_State)
 800fb4c:	4b16      	ldr	r3, [pc, #88]	; (800fba8 <USBReceiveHandler+0x7c>)
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d002      	beq.n	800fb5a <USBReceiveHandler+0x2e>
 800fb54:	2b01      	cmp	r3, #1
 800fb56:	d016      	beq.n	800fb86 <USBReceiveHandler+0x5a>
		case USB_APP:
			g_regMapUpdateFlag = 1;
			USB_State = USB_START;
			break;
	}
}
 800fb58:	e01c      	b.n	800fb94 <USBReceiveHandler+0x68>
			if (USBRXDataBuffer[0] == '*' && USBRXDataBuffer[2] == '#')
 800fb5a:	4b10      	ldr	r3, [pc, #64]	; (800fb9c <USBReceiveHandler+0x70>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	781b      	ldrb	r3, [r3, #0]
 800fb60:	2b2a      	cmp	r3, #42	; 0x2a
 800fb62:	d10c      	bne.n	800fb7e <USBReceiveHandler+0x52>
 800fb64:	4b0d      	ldr	r3, [pc, #52]	; (800fb9c <USBReceiveHandler+0x70>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	3302      	adds	r3, #2
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	2b23      	cmp	r3, #35	; 0x23
 800fb6e:	d106      	bne.n	800fb7e <USBReceiveHandler+0x52>
				USB_State = USB_APP;
 800fb70:	4b0d      	ldr	r3, [pc, #52]	; (800fba8 <USBReceiveHandler+0x7c>)
 800fb72:	2201      	movs	r2, #1
 800fb74:	701a      	strb	r2, [r3, #0]
				printf("ACK\r\n");
 800fb76:	480d      	ldr	r0, [pc, #52]	; (800fbac <USBReceiveHandler+0x80>)
 800fb78:	f001 fb20 	bl	80111bc <puts>
			break;
 800fb7c:	e00a      	b.n	800fb94 <USBReceiveHandler+0x68>
				USB_State = USB_START;
 800fb7e:	4b0a      	ldr	r3, [pc, #40]	; (800fba8 <USBReceiveHandler+0x7c>)
 800fb80:	2200      	movs	r2, #0
 800fb82:	701a      	strb	r2, [r3, #0]
			break;
 800fb84:	e006      	b.n	800fb94 <USBReceiveHandler+0x68>
			g_regMapUpdateFlag = 1;
 800fb86:	4b0a      	ldr	r3, [pc, #40]	; (800fbb0 <USBReceiveHandler+0x84>)
 800fb88:	2201      	movs	r2, #1
 800fb8a:	701a      	strb	r2, [r3, #0]
			USB_State = USB_START;
 800fb8c:	4b06      	ldr	r3, [pc, #24]	; (800fba8 <USBReceiveHandler+0x7c>)
 800fb8e:	2200      	movs	r2, #0
 800fb90:	701a      	strb	r2, [r3, #0]
			break;
 800fb92:	bf00      	nop
}
 800fb94:	bf00      	nop
 800fb96:	3708      	adds	r7, #8
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}
 800fb9c:	2000069c 	.word	0x2000069c
 800fba0:	20000699 	.word	0x20000699
 800fba4:	20000698 	.word	0x20000698
 800fba8:	20004d00 	.word	0x20004d00
 800fbac:	08013814 	.word	0x08013814
 800fbb0:	200006a0 	.word	0x200006a0

0800fbb4 <_write>:

int _write(int file, char *ptr, int len)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b084      	sub	sp, #16
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	60f8      	str	r0, [r7, #12]
 800fbbc:	60b9      	str	r1, [r7, #8]
 800fbbe:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	b29b      	uxth	r3, r3
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	68b8      	ldr	r0, [r7, #8]
 800fbc8:	f7ff ff78 	bl	800fabc <CDC_Transmit_FS>
	return len;
 800fbcc:	687b      	ldr	r3, [r7, #4]
}
 800fbce:	4618      	mov	r0, r3
 800fbd0:	3710      	adds	r7, #16
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}
	...

0800fbd8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fbd8:	b480      	push	{r7}
 800fbda:	b083      	sub	sp, #12
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	4603      	mov	r3, r0
 800fbe0:	6039      	str	r1, [r7, #0]
 800fbe2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	2212      	movs	r2, #18
 800fbe8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fbea:	4b03      	ldr	r3, [pc, #12]	; (800fbf8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	370c      	adds	r7, #12
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf6:	4770      	bx	lr
 800fbf8:	200000e0 	.word	0x200000e0

0800fbfc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b083      	sub	sp, #12
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	4603      	mov	r3, r0
 800fc04:	6039      	str	r1, [r7, #0]
 800fc06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	2204      	movs	r2, #4
 800fc0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fc0e:	4b03      	ldr	r3, [pc, #12]	; (800fc1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	370c      	adds	r7, #12
 800fc14:	46bd      	mov	sp, r7
 800fc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1a:	4770      	bx	lr
 800fc1c:	200000f4 	.word	0x200000f4

0800fc20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b082      	sub	sp, #8
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	4603      	mov	r3, r0
 800fc28:	6039      	str	r1, [r7, #0]
 800fc2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fc2c:	79fb      	ldrb	r3, [r7, #7]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d105      	bne.n	800fc3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fc32:	683a      	ldr	r2, [r7, #0]
 800fc34:	4907      	ldr	r1, [pc, #28]	; (800fc54 <USBD_FS_ProductStrDescriptor+0x34>)
 800fc36:	4808      	ldr	r0, [pc, #32]	; (800fc58 <USBD_FS_ProductStrDescriptor+0x38>)
 800fc38:	f7fe fa9c 	bl	800e174 <USBD_GetString>
 800fc3c:	e004      	b.n	800fc48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fc3e:	683a      	ldr	r2, [r7, #0]
 800fc40:	4904      	ldr	r1, [pc, #16]	; (800fc54 <USBD_FS_ProductStrDescriptor+0x34>)
 800fc42:	4805      	ldr	r0, [pc, #20]	; (800fc58 <USBD_FS_ProductStrDescriptor+0x38>)
 800fc44:	f7fe fa96 	bl	800e174 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fc48:	4b02      	ldr	r3, [pc, #8]	; (800fc54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	3708      	adds	r7, #8
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}
 800fc52:	bf00      	nop
 800fc54:	2000550c 	.word	0x2000550c
 800fc58:	0801381c 	.word	0x0801381c

0800fc5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	4603      	mov	r3, r0
 800fc64:	6039      	str	r1, [r7, #0]
 800fc66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fc68:	683a      	ldr	r2, [r7, #0]
 800fc6a:	4904      	ldr	r1, [pc, #16]	; (800fc7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fc6c:	4804      	ldr	r0, [pc, #16]	; (800fc80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fc6e:	f7fe fa81 	bl	800e174 <USBD_GetString>
  return USBD_StrDesc;
 800fc72:	4b02      	ldr	r3, [pc, #8]	; (800fc7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	3708      	adds	r7, #8
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}
 800fc7c:	2000550c 	.word	0x2000550c
 800fc80:	08013834 	.word	0x08013834

0800fc84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	6039      	str	r1, [r7, #0]
 800fc8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	221a      	movs	r2, #26
 800fc94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fc96:	f000 f843 	bl	800fd20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fc9a:	4b02      	ldr	r3, [pc, #8]	; (800fca4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	3708      	adds	r7, #8
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}
 800fca4:	200000f8 	.word	0x200000f8

0800fca8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b082      	sub	sp, #8
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	4603      	mov	r3, r0
 800fcb0:	6039      	str	r1, [r7, #0]
 800fcb2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fcb4:	79fb      	ldrb	r3, [r7, #7]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d105      	bne.n	800fcc6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fcba:	683a      	ldr	r2, [r7, #0]
 800fcbc:	4907      	ldr	r1, [pc, #28]	; (800fcdc <USBD_FS_ConfigStrDescriptor+0x34>)
 800fcbe:	4808      	ldr	r0, [pc, #32]	; (800fce0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fcc0:	f7fe fa58 	bl	800e174 <USBD_GetString>
 800fcc4:	e004      	b.n	800fcd0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fcc6:	683a      	ldr	r2, [r7, #0]
 800fcc8:	4904      	ldr	r1, [pc, #16]	; (800fcdc <USBD_FS_ConfigStrDescriptor+0x34>)
 800fcca:	4805      	ldr	r0, [pc, #20]	; (800fce0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fccc:	f7fe fa52 	bl	800e174 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fcd0:	4b02      	ldr	r3, [pc, #8]	; (800fcdc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	3708      	adds	r7, #8
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}
 800fcda:	bf00      	nop
 800fcdc:	2000550c 	.word	0x2000550c
 800fce0:	08013848 	.word	0x08013848

0800fce4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b082      	sub	sp, #8
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	4603      	mov	r3, r0
 800fcec:	6039      	str	r1, [r7, #0]
 800fcee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fcf0:	79fb      	ldrb	r3, [r7, #7]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d105      	bne.n	800fd02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fcf6:	683a      	ldr	r2, [r7, #0]
 800fcf8:	4907      	ldr	r1, [pc, #28]	; (800fd18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fcfa:	4808      	ldr	r0, [pc, #32]	; (800fd1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fcfc:	f7fe fa3a 	bl	800e174 <USBD_GetString>
 800fd00:	e004      	b.n	800fd0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fd02:	683a      	ldr	r2, [r7, #0]
 800fd04:	4904      	ldr	r1, [pc, #16]	; (800fd18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fd06:	4805      	ldr	r0, [pc, #20]	; (800fd1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fd08:	f7fe fa34 	bl	800e174 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fd0c:	4b02      	ldr	r3, [pc, #8]	; (800fd18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fd0e:	4618      	mov	r0, r3
 800fd10:	3708      	adds	r7, #8
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}
 800fd16:	bf00      	nop
 800fd18:	2000550c 	.word	0x2000550c
 800fd1c:	08013854 	.word	0x08013854

0800fd20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b084      	sub	sp, #16
 800fd24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fd26:	4b0f      	ldr	r3, [pc, #60]	; (800fd64 <Get_SerialNum+0x44>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fd2c:	4b0e      	ldr	r3, [pc, #56]	; (800fd68 <Get_SerialNum+0x48>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fd32:	4b0e      	ldr	r3, [pc, #56]	; (800fd6c <Get_SerialNum+0x4c>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fd38:	68fa      	ldr	r2, [r7, #12]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	4413      	add	r3, r2
 800fd3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d009      	beq.n	800fd5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fd46:	2208      	movs	r2, #8
 800fd48:	4909      	ldr	r1, [pc, #36]	; (800fd70 <Get_SerialNum+0x50>)
 800fd4a:	68f8      	ldr	r0, [r7, #12]
 800fd4c:	f000 f814 	bl	800fd78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fd50:	2204      	movs	r2, #4
 800fd52:	4908      	ldr	r1, [pc, #32]	; (800fd74 <Get_SerialNum+0x54>)
 800fd54:	68b8      	ldr	r0, [r7, #8]
 800fd56:	f000 f80f 	bl	800fd78 <IntToUnicode>
  }
}
 800fd5a:	bf00      	nop
 800fd5c:	3710      	adds	r7, #16
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}
 800fd62:	bf00      	nop
 800fd64:	1fff7a10 	.word	0x1fff7a10
 800fd68:	1fff7a14 	.word	0x1fff7a14
 800fd6c:	1fff7a18 	.word	0x1fff7a18
 800fd70:	200000fa 	.word	0x200000fa
 800fd74:	2000010a 	.word	0x2000010a

0800fd78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fd78:	b480      	push	{r7}
 800fd7a:	b087      	sub	sp, #28
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	60f8      	str	r0, [r7, #12]
 800fd80:	60b9      	str	r1, [r7, #8]
 800fd82:	4613      	mov	r3, r2
 800fd84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fd86:	2300      	movs	r3, #0
 800fd88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	75fb      	strb	r3, [r7, #23]
 800fd8e:	e027      	b.n	800fde0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	0f1b      	lsrs	r3, r3, #28
 800fd94:	2b09      	cmp	r3, #9
 800fd96:	d80b      	bhi.n	800fdb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	0f1b      	lsrs	r3, r3, #28
 800fd9c:	b2da      	uxtb	r2, r3
 800fd9e:	7dfb      	ldrb	r3, [r7, #23]
 800fda0:	005b      	lsls	r3, r3, #1
 800fda2:	4619      	mov	r1, r3
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	440b      	add	r3, r1
 800fda8:	3230      	adds	r2, #48	; 0x30
 800fdaa:	b2d2      	uxtb	r2, r2
 800fdac:	701a      	strb	r2, [r3, #0]
 800fdae:	e00a      	b.n	800fdc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	0f1b      	lsrs	r3, r3, #28
 800fdb4:	b2da      	uxtb	r2, r3
 800fdb6:	7dfb      	ldrb	r3, [r7, #23]
 800fdb8:	005b      	lsls	r3, r3, #1
 800fdba:	4619      	mov	r1, r3
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	440b      	add	r3, r1
 800fdc0:	3237      	adds	r2, #55	; 0x37
 800fdc2:	b2d2      	uxtb	r2, r2
 800fdc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	011b      	lsls	r3, r3, #4
 800fdca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fdcc:	7dfb      	ldrb	r3, [r7, #23]
 800fdce:	005b      	lsls	r3, r3, #1
 800fdd0:	3301      	adds	r3, #1
 800fdd2:	68ba      	ldr	r2, [r7, #8]
 800fdd4:	4413      	add	r3, r2
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fdda:	7dfb      	ldrb	r3, [r7, #23]
 800fddc:	3301      	adds	r3, #1
 800fdde:	75fb      	strb	r3, [r7, #23]
 800fde0:	7dfa      	ldrb	r2, [r7, #23]
 800fde2:	79fb      	ldrb	r3, [r7, #7]
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d3d3      	bcc.n	800fd90 <IntToUnicode+0x18>
  }
}
 800fde8:	bf00      	nop
 800fdea:	bf00      	nop
 800fdec:	371c      	adds	r7, #28
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf4:	4770      	bx	lr
	...

0800fdf8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b08a      	sub	sp, #40	; 0x28
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fe00:	f107 0314 	add.w	r3, r7, #20
 800fe04:	2200      	movs	r2, #0
 800fe06:	601a      	str	r2, [r3, #0]
 800fe08:	605a      	str	r2, [r3, #4]
 800fe0a:	609a      	str	r2, [r3, #8]
 800fe0c:	60da      	str	r2, [r3, #12]
 800fe0e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fe18:	d13a      	bne.n	800fe90 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	613b      	str	r3, [r7, #16]
 800fe1e:	4b1e      	ldr	r3, [pc, #120]	; (800fe98 <HAL_PCD_MspInit+0xa0>)
 800fe20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe22:	4a1d      	ldr	r2, [pc, #116]	; (800fe98 <HAL_PCD_MspInit+0xa0>)
 800fe24:	f043 0301 	orr.w	r3, r3, #1
 800fe28:	6313      	str	r3, [r2, #48]	; 0x30
 800fe2a:	4b1b      	ldr	r3, [pc, #108]	; (800fe98 <HAL_PCD_MspInit+0xa0>)
 800fe2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe2e:	f003 0301 	and.w	r3, r3, #1
 800fe32:	613b      	str	r3, [r7, #16]
 800fe34:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fe36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fe3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe3c:	2302      	movs	r3, #2
 800fe3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe40:	2300      	movs	r3, #0
 800fe42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fe44:	2303      	movs	r3, #3
 800fe46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fe48:	230a      	movs	r3, #10
 800fe4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fe4c:	f107 0314 	add.w	r3, r7, #20
 800fe50:	4619      	mov	r1, r3
 800fe52:	4812      	ldr	r0, [pc, #72]	; (800fe9c <HAL_PCD_MspInit+0xa4>)
 800fe54:	f7f6 f89e 	bl	8005f94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fe58:	4b0f      	ldr	r3, [pc, #60]	; (800fe98 <HAL_PCD_MspInit+0xa0>)
 800fe5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe5c:	4a0e      	ldr	r2, [pc, #56]	; (800fe98 <HAL_PCD_MspInit+0xa0>)
 800fe5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe62:	6353      	str	r3, [r2, #52]	; 0x34
 800fe64:	2300      	movs	r3, #0
 800fe66:	60fb      	str	r3, [r7, #12]
 800fe68:	4b0b      	ldr	r3, [pc, #44]	; (800fe98 <HAL_PCD_MspInit+0xa0>)
 800fe6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe6c:	4a0a      	ldr	r2, [pc, #40]	; (800fe98 <HAL_PCD_MspInit+0xa0>)
 800fe6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fe72:	6453      	str	r3, [r2, #68]	; 0x44
 800fe74:	4b08      	ldr	r3, [pc, #32]	; (800fe98 <HAL_PCD_MspInit+0xa0>)
 800fe76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fe7c:	60fb      	str	r3, [r7, #12]
 800fe7e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800fe80:	2200      	movs	r2, #0
 800fe82:	2105      	movs	r1, #5
 800fe84:	2043      	movs	r0, #67	; 0x43
 800fe86:	f7f5 fce6 	bl	8005856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fe8a:	2043      	movs	r0, #67	; 0x43
 800fe8c:	f7f5 fcff 	bl	800588e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fe90:	bf00      	nop
 800fe92:	3728      	adds	r7, #40	; 0x28
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}
 800fe98:	40023800 	.word	0x40023800
 800fe9c:	40020000 	.word	0x40020000

0800fea0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b082      	sub	sp, #8
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800feb4:	4619      	mov	r1, r3
 800feb6:	4610      	mov	r0, r2
 800feb8:	f7fc fffd 	bl	800ceb6 <USBD_LL_SetupStage>
}
 800febc:	bf00      	nop
 800febe:	3708      	adds	r7, #8
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b082      	sub	sp, #8
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	460b      	mov	r3, r1
 800fece:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800fed6:	78fa      	ldrb	r2, [r7, #3]
 800fed8:	6879      	ldr	r1, [r7, #4]
 800feda:	4613      	mov	r3, r2
 800fedc:	00db      	lsls	r3, r3, #3
 800fede:	4413      	add	r3, r2
 800fee0:	009b      	lsls	r3, r3, #2
 800fee2:	440b      	add	r3, r1
 800fee4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800fee8:	681a      	ldr	r2, [r3, #0]
 800feea:	78fb      	ldrb	r3, [r7, #3]
 800feec:	4619      	mov	r1, r3
 800feee:	f7fd f837 	bl	800cf60 <USBD_LL_DataOutStage>
}
 800fef2:	bf00      	nop
 800fef4:	3708      	adds	r7, #8
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}

0800fefa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fefa:	b580      	push	{r7, lr}
 800fefc:	b082      	sub	sp, #8
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	6078      	str	r0, [r7, #4]
 800ff02:	460b      	mov	r3, r1
 800ff04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ff0c:	78fa      	ldrb	r2, [r7, #3]
 800ff0e:	6879      	ldr	r1, [r7, #4]
 800ff10:	4613      	mov	r3, r2
 800ff12:	00db      	lsls	r3, r3, #3
 800ff14:	4413      	add	r3, r2
 800ff16:	009b      	lsls	r3, r3, #2
 800ff18:	440b      	add	r3, r1
 800ff1a:	334c      	adds	r3, #76	; 0x4c
 800ff1c:	681a      	ldr	r2, [r3, #0]
 800ff1e:	78fb      	ldrb	r3, [r7, #3]
 800ff20:	4619      	mov	r1, r3
 800ff22:	f7fd f8d0 	bl	800d0c6 <USBD_LL_DataInStage>
}
 800ff26:	bf00      	nop
 800ff28:	3708      	adds	r7, #8
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}

0800ff2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff2e:	b580      	push	{r7, lr}
 800ff30:	b082      	sub	sp, #8
 800ff32:	af00      	add	r7, sp, #0
 800ff34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7fd fa04 	bl	800d34a <USBD_LL_SOF>
}
 800ff42:	bf00      	nop
 800ff44:	3708      	adds	r7, #8
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}

0800ff4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff4a:	b580      	push	{r7, lr}
 800ff4c:	b084      	sub	sp, #16
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ff52:	2301      	movs	r3, #1
 800ff54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	68db      	ldr	r3, [r3, #12]
 800ff5a:	2b02      	cmp	r3, #2
 800ff5c:	d001      	beq.n	800ff62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ff5e:	f7f2 fe7b 	bl	8002c58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ff68:	7bfa      	ldrb	r2, [r7, #15]
 800ff6a:	4611      	mov	r1, r2
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7fd f9ae 	bl	800d2ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f7fd f956 	bl	800d22a <USBD_LL_Reset>
}
 800ff7e:	bf00      	nop
 800ff80:	3710      	adds	r7, #16
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}
	...

0800ff88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7fd f9a9 	bl	800d2ee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	687a      	ldr	r2, [r7, #4]
 800ffa8:	6812      	ldr	r2, [r2, #0]
 800ffaa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ffae:	f043 0301 	orr.w	r3, r3, #1
 800ffb2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6a1b      	ldr	r3, [r3, #32]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d005      	beq.n	800ffc8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ffbc:	4b04      	ldr	r3, [pc, #16]	; (800ffd0 <HAL_PCD_SuspendCallback+0x48>)
 800ffbe:	691b      	ldr	r3, [r3, #16]
 800ffc0:	4a03      	ldr	r2, [pc, #12]	; (800ffd0 <HAL_PCD_SuspendCallback+0x48>)
 800ffc2:	f043 0306 	orr.w	r3, r3, #6
 800ffc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ffc8:	bf00      	nop
 800ffca:	3708      	adds	r7, #8
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}
 800ffd0:	e000ed00 	.word	0xe000ed00

0800ffd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b082      	sub	sp, #8
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f7fd f999 	bl	800d31a <USBD_LL_Resume>
}
 800ffe8:	bf00      	nop
 800ffea:	3708      	adds	r7, #8
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}

0800fff0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b082      	sub	sp, #8
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	460b      	mov	r3, r1
 800fffa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010002:	78fa      	ldrb	r2, [r7, #3]
 8010004:	4611      	mov	r1, r2
 8010006:	4618      	mov	r0, r3
 8010008:	f7fd f9f1 	bl	800d3ee <USBD_LL_IsoOUTIncomplete>
}
 801000c:	bf00      	nop
 801000e:	3708      	adds	r7, #8
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}

08010014 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b082      	sub	sp, #8
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	460b      	mov	r3, r1
 801001e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010026:	78fa      	ldrb	r2, [r7, #3]
 8010028:	4611      	mov	r1, r2
 801002a:	4618      	mov	r0, r3
 801002c:	f7fd f9ad 	bl	800d38a <USBD_LL_IsoINIncomplete>
}
 8010030:	bf00      	nop
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}

08010038 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b082      	sub	sp, #8
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010046:	4618      	mov	r0, r3
 8010048:	f7fd fa03 	bl	800d452 <USBD_LL_DevConnected>
}
 801004c:	bf00      	nop
 801004e:	3708      	adds	r7, #8
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b082      	sub	sp, #8
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010062:	4618      	mov	r0, r3
 8010064:	f7fd fa00 	bl	800d468 <USBD_LL_DevDisconnected>
}
 8010068:	bf00      	nop
 801006a:	3708      	adds	r7, #8
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}

08010070 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	781b      	ldrb	r3, [r3, #0]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d13c      	bne.n	80100fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010080:	4a20      	ldr	r2, [pc, #128]	; (8010104 <USBD_LL_Init+0x94>)
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	4a1e      	ldr	r2, [pc, #120]	; (8010104 <USBD_LL_Init+0x94>)
 801008c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010090:	4b1c      	ldr	r3, [pc, #112]	; (8010104 <USBD_LL_Init+0x94>)
 8010092:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010096:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010098:	4b1a      	ldr	r3, [pc, #104]	; (8010104 <USBD_LL_Init+0x94>)
 801009a:	2204      	movs	r2, #4
 801009c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801009e:	4b19      	ldr	r3, [pc, #100]	; (8010104 <USBD_LL_Init+0x94>)
 80100a0:	2202      	movs	r2, #2
 80100a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80100a4:	4b17      	ldr	r3, [pc, #92]	; (8010104 <USBD_LL_Init+0x94>)
 80100a6:	2200      	movs	r2, #0
 80100a8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80100aa:	4b16      	ldr	r3, [pc, #88]	; (8010104 <USBD_LL_Init+0x94>)
 80100ac:	2202      	movs	r2, #2
 80100ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80100b0:	4b14      	ldr	r3, [pc, #80]	; (8010104 <USBD_LL_Init+0x94>)
 80100b2:	2200      	movs	r2, #0
 80100b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80100b6:	4b13      	ldr	r3, [pc, #76]	; (8010104 <USBD_LL_Init+0x94>)
 80100b8:	2200      	movs	r2, #0
 80100ba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80100bc:	4b11      	ldr	r3, [pc, #68]	; (8010104 <USBD_LL_Init+0x94>)
 80100be:	2200      	movs	r2, #0
 80100c0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80100c2:	4b10      	ldr	r3, [pc, #64]	; (8010104 <USBD_LL_Init+0x94>)
 80100c4:	2200      	movs	r2, #0
 80100c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80100c8:	4b0e      	ldr	r3, [pc, #56]	; (8010104 <USBD_LL_Init+0x94>)
 80100ca:	2200      	movs	r2, #0
 80100cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80100ce:	480d      	ldr	r0, [pc, #52]	; (8010104 <USBD_LL_Init+0x94>)
 80100d0:	f7f7 fd87 	bl	8007be2 <HAL_PCD_Init>
 80100d4:	4603      	mov	r3, r0
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d001      	beq.n	80100de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80100da:	f7f2 fdbd 	bl	8002c58 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80100de:	2180      	movs	r1, #128	; 0x80
 80100e0:	4808      	ldr	r0, [pc, #32]	; (8010104 <USBD_LL_Init+0x94>)
 80100e2:	f7f8 ffde 	bl	80090a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80100e6:	2240      	movs	r2, #64	; 0x40
 80100e8:	2100      	movs	r1, #0
 80100ea:	4806      	ldr	r0, [pc, #24]	; (8010104 <USBD_LL_Init+0x94>)
 80100ec:	f7f8 ff92 	bl	8009014 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80100f0:	2280      	movs	r2, #128	; 0x80
 80100f2:	2101      	movs	r1, #1
 80100f4:	4803      	ldr	r0, [pc, #12]	; (8010104 <USBD_LL_Init+0x94>)
 80100f6:	f7f8 ff8d 	bl	8009014 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80100fa:	2300      	movs	r3, #0
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3708      	adds	r7, #8
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	2000570c 	.word	0x2000570c

08010108 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b084      	sub	sp, #16
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010110:	2300      	movs	r3, #0
 8010112:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010114:	2300      	movs	r3, #0
 8010116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801011e:	4618      	mov	r0, r3
 8010120:	f7f7 fe7c 	bl	8007e1c <HAL_PCD_Start>
 8010124:	4603      	mov	r3, r0
 8010126:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010128:	7bfb      	ldrb	r3, [r7, #15]
 801012a:	4618      	mov	r0, r3
 801012c:	f000 f942 	bl	80103b4 <USBD_Get_USB_Status>
 8010130:	4603      	mov	r3, r0
 8010132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010134:	7bbb      	ldrb	r3, [r7, #14]
}
 8010136:	4618      	mov	r0, r3
 8010138:	3710      	adds	r7, #16
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}

0801013e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801013e:	b580      	push	{r7, lr}
 8010140:	b084      	sub	sp, #16
 8010142:	af00      	add	r7, sp, #0
 8010144:	6078      	str	r0, [r7, #4]
 8010146:	4608      	mov	r0, r1
 8010148:	4611      	mov	r1, r2
 801014a:	461a      	mov	r2, r3
 801014c:	4603      	mov	r3, r0
 801014e:	70fb      	strb	r3, [r7, #3]
 8010150:	460b      	mov	r3, r1
 8010152:	70bb      	strb	r3, [r7, #2]
 8010154:	4613      	mov	r3, r2
 8010156:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010158:	2300      	movs	r3, #0
 801015a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801015c:	2300      	movs	r3, #0
 801015e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010166:	78bb      	ldrb	r3, [r7, #2]
 8010168:	883a      	ldrh	r2, [r7, #0]
 801016a:	78f9      	ldrb	r1, [r7, #3]
 801016c:	f7f8 fb4d 	bl	800880a <HAL_PCD_EP_Open>
 8010170:	4603      	mov	r3, r0
 8010172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010174:	7bfb      	ldrb	r3, [r7, #15]
 8010176:	4618      	mov	r0, r3
 8010178:	f000 f91c 	bl	80103b4 <USBD_Get_USB_Status>
 801017c:	4603      	mov	r3, r0
 801017e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010180:	7bbb      	ldrb	r3, [r7, #14]
}
 8010182:	4618      	mov	r0, r3
 8010184:	3710      	adds	r7, #16
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}

0801018a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801018a:	b580      	push	{r7, lr}
 801018c:	b084      	sub	sp, #16
 801018e:	af00      	add	r7, sp, #0
 8010190:	6078      	str	r0, [r7, #4]
 8010192:	460b      	mov	r3, r1
 8010194:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010196:	2300      	movs	r3, #0
 8010198:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801019a:	2300      	movs	r3, #0
 801019c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80101a4:	78fa      	ldrb	r2, [r7, #3]
 80101a6:	4611      	mov	r1, r2
 80101a8:	4618      	mov	r0, r3
 80101aa:	f7f8 fb96 	bl	80088da <HAL_PCD_EP_Close>
 80101ae:	4603      	mov	r3, r0
 80101b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101b2:	7bfb      	ldrb	r3, [r7, #15]
 80101b4:	4618      	mov	r0, r3
 80101b6:	f000 f8fd 	bl	80103b4 <USBD_Get_USB_Status>
 80101ba:	4603      	mov	r3, r0
 80101bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101be:	7bbb      	ldrb	r3, [r7, #14]
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	3710      	adds	r7, #16
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}

080101c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b084      	sub	sp, #16
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	460b      	mov	r3, r1
 80101d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101d4:	2300      	movs	r3, #0
 80101d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101d8:	2300      	movs	r3, #0
 80101da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80101e2:	78fa      	ldrb	r2, [r7, #3]
 80101e4:	4611      	mov	r1, r2
 80101e6:	4618      	mov	r0, r3
 80101e8:	f7f8 fc6e 	bl	8008ac8 <HAL_PCD_EP_SetStall>
 80101ec:	4603      	mov	r3, r0
 80101ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101f0:	7bfb      	ldrb	r3, [r7, #15]
 80101f2:	4618      	mov	r0, r3
 80101f4:	f000 f8de 	bl	80103b4 <USBD_Get_USB_Status>
 80101f8:	4603      	mov	r3, r0
 80101fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3710      	adds	r7, #16
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}

08010206 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010206:	b580      	push	{r7, lr}
 8010208:	b084      	sub	sp, #16
 801020a:	af00      	add	r7, sp, #0
 801020c:	6078      	str	r0, [r7, #4]
 801020e:	460b      	mov	r3, r1
 8010210:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010212:	2300      	movs	r3, #0
 8010214:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010216:	2300      	movs	r3, #0
 8010218:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010220:	78fa      	ldrb	r2, [r7, #3]
 8010222:	4611      	mov	r1, r2
 8010224:	4618      	mov	r0, r3
 8010226:	f7f8 fcb3 	bl	8008b90 <HAL_PCD_EP_ClrStall>
 801022a:	4603      	mov	r3, r0
 801022c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801022e:	7bfb      	ldrb	r3, [r7, #15]
 8010230:	4618      	mov	r0, r3
 8010232:	f000 f8bf 	bl	80103b4 <USBD_Get_USB_Status>
 8010236:	4603      	mov	r3, r0
 8010238:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801023a:	7bbb      	ldrb	r3, [r7, #14]
}
 801023c:	4618      	mov	r0, r3
 801023e:	3710      	adds	r7, #16
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}

08010244 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010244:	b480      	push	{r7}
 8010246:	b085      	sub	sp, #20
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
 801024c:	460b      	mov	r3, r1
 801024e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010256:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801025c:	2b00      	cmp	r3, #0
 801025e:	da0b      	bge.n	8010278 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010260:	78fb      	ldrb	r3, [r7, #3]
 8010262:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010266:	68f9      	ldr	r1, [r7, #12]
 8010268:	4613      	mov	r3, r2
 801026a:	00db      	lsls	r3, r3, #3
 801026c:	4413      	add	r3, r2
 801026e:	009b      	lsls	r3, r3, #2
 8010270:	440b      	add	r3, r1
 8010272:	333e      	adds	r3, #62	; 0x3e
 8010274:	781b      	ldrb	r3, [r3, #0]
 8010276:	e00b      	b.n	8010290 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010278:	78fb      	ldrb	r3, [r7, #3]
 801027a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801027e:	68f9      	ldr	r1, [r7, #12]
 8010280:	4613      	mov	r3, r2
 8010282:	00db      	lsls	r3, r3, #3
 8010284:	4413      	add	r3, r2
 8010286:	009b      	lsls	r3, r3, #2
 8010288:	440b      	add	r3, r1
 801028a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801028e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010290:	4618      	mov	r0, r3
 8010292:	3714      	adds	r7, #20
 8010294:	46bd      	mov	sp, r7
 8010296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029a:	4770      	bx	lr

0801029c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b084      	sub	sp, #16
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
 80102a4:	460b      	mov	r3, r1
 80102a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102a8:	2300      	movs	r3, #0
 80102aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102ac:	2300      	movs	r3, #0
 80102ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80102b6:	78fa      	ldrb	r2, [r7, #3]
 80102b8:	4611      	mov	r1, r2
 80102ba:	4618      	mov	r0, r3
 80102bc:	f7f8 fa80 	bl	80087c0 <HAL_PCD_SetAddress>
 80102c0:	4603      	mov	r3, r0
 80102c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80102c4:	7bfb      	ldrb	r3, [r7, #15]
 80102c6:	4618      	mov	r0, r3
 80102c8:	f000 f874 	bl	80103b4 <USBD_Get_USB_Status>
 80102cc:	4603      	mov	r3, r0
 80102ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80102d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	3710      	adds	r7, #16
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}

080102da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80102da:	b580      	push	{r7, lr}
 80102dc:	b086      	sub	sp, #24
 80102de:	af00      	add	r7, sp, #0
 80102e0:	60f8      	str	r0, [r7, #12]
 80102e2:	607a      	str	r2, [r7, #4]
 80102e4:	603b      	str	r3, [r7, #0]
 80102e6:	460b      	mov	r3, r1
 80102e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102ea:	2300      	movs	r3, #0
 80102ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102ee:	2300      	movs	r3, #0
 80102f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80102f8:	7af9      	ldrb	r1, [r7, #11]
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	687a      	ldr	r2, [r7, #4]
 80102fe:	f7f8 fb99 	bl	8008a34 <HAL_PCD_EP_Transmit>
 8010302:	4603      	mov	r3, r0
 8010304:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010306:	7dfb      	ldrb	r3, [r7, #23]
 8010308:	4618      	mov	r0, r3
 801030a:	f000 f853 	bl	80103b4 <USBD_Get_USB_Status>
 801030e:	4603      	mov	r3, r0
 8010310:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010312:	7dbb      	ldrb	r3, [r7, #22]
}
 8010314:	4618      	mov	r0, r3
 8010316:	3718      	adds	r7, #24
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}

0801031c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b086      	sub	sp, #24
 8010320:	af00      	add	r7, sp, #0
 8010322:	60f8      	str	r0, [r7, #12]
 8010324:	607a      	str	r2, [r7, #4]
 8010326:	603b      	str	r3, [r7, #0]
 8010328:	460b      	mov	r3, r1
 801032a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801032c:	2300      	movs	r3, #0
 801032e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010330:	2300      	movs	r3, #0
 8010332:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801033a:	7af9      	ldrb	r1, [r7, #11]
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	687a      	ldr	r2, [r7, #4]
 8010340:	f7f8 fb15 	bl	800896e <HAL_PCD_EP_Receive>
 8010344:	4603      	mov	r3, r0
 8010346:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010348:	7dfb      	ldrb	r3, [r7, #23]
 801034a:	4618      	mov	r0, r3
 801034c:	f000 f832 	bl	80103b4 <USBD_Get_USB_Status>
 8010350:	4603      	mov	r3, r0
 8010352:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010354:	7dbb      	ldrb	r3, [r7, #22]
}
 8010356:	4618      	mov	r0, r3
 8010358:	3718      	adds	r7, #24
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}

0801035e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801035e:	b580      	push	{r7, lr}
 8010360:	b082      	sub	sp, #8
 8010362:	af00      	add	r7, sp, #0
 8010364:	6078      	str	r0, [r7, #4]
 8010366:	460b      	mov	r3, r1
 8010368:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010370:	78fa      	ldrb	r2, [r7, #3]
 8010372:	4611      	mov	r1, r2
 8010374:	4618      	mov	r0, r3
 8010376:	f7f8 fb45 	bl	8008a04 <HAL_PCD_EP_GetRxCount>
 801037a:	4603      	mov	r3, r0
}
 801037c:	4618      	mov	r0, r3
 801037e:	3708      	adds	r7, #8
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}

08010384 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010384:	b480      	push	{r7}
 8010386:	b083      	sub	sp, #12
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801038c:	4b03      	ldr	r3, [pc, #12]	; (801039c <USBD_static_malloc+0x18>)
}
 801038e:	4618      	mov	r0, r3
 8010390:	370c      	adds	r7, #12
 8010392:	46bd      	mov	sp, r7
 8010394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010398:	4770      	bx	lr
 801039a:	bf00      	nop
 801039c:	20005c18 	.word	0x20005c18

080103a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80103a0:	b480      	push	{r7}
 80103a2:	b083      	sub	sp, #12
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]

}
 80103a8:	bf00      	nop
 80103aa:	370c      	adds	r7, #12
 80103ac:	46bd      	mov	sp, r7
 80103ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b2:	4770      	bx	lr

080103b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80103b4:	b480      	push	{r7}
 80103b6:	b085      	sub	sp, #20
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	4603      	mov	r3, r0
 80103bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103be:	2300      	movs	r3, #0
 80103c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80103c2:	79fb      	ldrb	r3, [r7, #7]
 80103c4:	2b03      	cmp	r3, #3
 80103c6:	d817      	bhi.n	80103f8 <USBD_Get_USB_Status+0x44>
 80103c8:	a201      	add	r2, pc, #4	; (adr r2, 80103d0 <USBD_Get_USB_Status+0x1c>)
 80103ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103ce:	bf00      	nop
 80103d0:	080103e1 	.word	0x080103e1
 80103d4:	080103e7 	.word	0x080103e7
 80103d8:	080103ed 	.word	0x080103ed
 80103dc:	080103f3 	.word	0x080103f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80103e0:	2300      	movs	r3, #0
 80103e2:	73fb      	strb	r3, [r7, #15]
    break;
 80103e4:	e00b      	b.n	80103fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80103e6:	2303      	movs	r3, #3
 80103e8:	73fb      	strb	r3, [r7, #15]
    break;
 80103ea:	e008      	b.n	80103fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80103ec:	2301      	movs	r3, #1
 80103ee:	73fb      	strb	r3, [r7, #15]
    break;
 80103f0:	e005      	b.n	80103fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80103f2:	2303      	movs	r3, #3
 80103f4:	73fb      	strb	r3, [r7, #15]
    break;
 80103f6:	e002      	b.n	80103fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80103f8:	2303      	movs	r3, #3
 80103fa:	73fb      	strb	r3, [r7, #15]
    break;
 80103fc:	bf00      	nop
  }
  return usb_status;
 80103fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010400:	4618      	mov	r0, r3
 8010402:	3714      	adds	r7, #20
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr

0801040c <__errno>:
 801040c:	4b01      	ldr	r3, [pc, #4]	; (8010414 <__errno+0x8>)
 801040e:	6818      	ldr	r0, [r3, #0]
 8010410:	4770      	bx	lr
 8010412:	bf00      	nop
 8010414:	20000114 	.word	0x20000114

08010418 <std>:
 8010418:	2300      	movs	r3, #0
 801041a:	b510      	push	{r4, lr}
 801041c:	4604      	mov	r4, r0
 801041e:	e9c0 3300 	strd	r3, r3, [r0]
 8010422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010426:	6083      	str	r3, [r0, #8]
 8010428:	8181      	strh	r1, [r0, #12]
 801042a:	6643      	str	r3, [r0, #100]	; 0x64
 801042c:	81c2      	strh	r2, [r0, #14]
 801042e:	6183      	str	r3, [r0, #24]
 8010430:	4619      	mov	r1, r3
 8010432:	2208      	movs	r2, #8
 8010434:	305c      	adds	r0, #92	; 0x5c
 8010436:	f000 f934 	bl	80106a2 <memset>
 801043a:	4b05      	ldr	r3, [pc, #20]	; (8010450 <std+0x38>)
 801043c:	6263      	str	r3, [r4, #36]	; 0x24
 801043e:	4b05      	ldr	r3, [pc, #20]	; (8010454 <std+0x3c>)
 8010440:	62a3      	str	r3, [r4, #40]	; 0x28
 8010442:	4b05      	ldr	r3, [pc, #20]	; (8010458 <std+0x40>)
 8010444:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010446:	4b05      	ldr	r3, [pc, #20]	; (801045c <std+0x44>)
 8010448:	6224      	str	r4, [r4, #32]
 801044a:	6323      	str	r3, [r4, #48]	; 0x30
 801044c:	bd10      	pop	{r4, pc}
 801044e:	bf00      	nop
 8010450:	08011301 	.word	0x08011301
 8010454:	08011323 	.word	0x08011323
 8010458:	0801135b 	.word	0x0801135b
 801045c:	0801137f 	.word	0x0801137f

08010460 <_cleanup_r>:
 8010460:	4901      	ldr	r1, [pc, #4]	; (8010468 <_cleanup_r+0x8>)
 8010462:	f000 b8af 	b.w	80105c4 <_fwalk_reent>
 8010466:	bf00      	nop
 8010468:	08012469 	.word	0x08012469

0801046c <__sfmoreglue>:
 801046c:	b570      	push	{r4, r5, r6, lr}
 801046e:	2268      	movs	r2, #104	; 0x68
 8010470:	1e4d      	subs	r5, r1, #1
 8010472:	4355      	muls	r5, r2
 8010474:	460e      	mov	r6, r1
 8010476:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801047a:	f000 f93b 	bl	80106f4 <_malloc_r>
 801047e:	4604      	mov	r4, r0
 8010480:	b140      	cbz	r0, 8010494 <__sfmoreglue+0x28>
 8010482:	2100      	movs	r1, #0
 8010484:	e9c0 1600 	strd	r1, r6, [r0]
 8010488:	300c      	adds	r0, #12
 801048a:	60a0      	str	r0, [r4, #8]
 801048c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010490:	f000 f907 	bl	80106a2 <memset>
 8010494:	4620      	mov	r0, r4
 8010496:	bd70      	pop	{r4, r5, r6, pc}

08010498 <__sfp_lock_acquire>:
 8010498:	4801      	ldr	r0, [pc, #4]	; (80104a0 <__sfp_lock_acquire+0x8>)
 801049a:	f000 b8d8 	b.w	801064e <__retarget_lock_acquire_recursive>
 801049e:	bf00      	nop
 80104a0:	20005e39 	.word	0x20005e39

080104a4 <__sfp_lock_release>:
 80104a4:	4801      	ldr	r0, [pc, #4]	; (80104ac <__sfp_lock_release+0x8>)
 80104a6:	f000 b8d3 	b.w	8010650 <__retarget_lock_release_recursive>
 80104aa:	bf00      	nop
 80104ac:	20005e39 	.word	0x20005e39

080104b0 <__sinit_lock_acquire>:
 80104b0:	4801      	ldr	r0, [pc, #4]	; (80104b8 <__sinit_lock_acquire+0x8>)
 80104b2:	f000 b8cc 	b.w	801064e <__retarget_lock_acquire_recursive>
 80104b6:	bf00      	nop
 80104b8:	20005e3a 	.word	0x20005e3a

080104bc <__sinit_lock_release>:
 80104bc:	4801      	ldr	r0, [pc, #4]	; (80104c4 <__sinit_lock_release+0x8>)
 80104be:	f000 b8c7 	b.w	8010650 <__retarget_lock_release_recursive>
 80104c2:	bf00      	nop
 80104c4:	20005e3a 	.word	0x20005e3a

080104c8 <__sinit>:
 80104c8:	b510      	push	{r4, lr}
 80104ca:	4604      	mov	r4, r0
 80104cc:	f7ff fff0 	bl	80104b0 <__sinit_lock_acquire>
 80104d0:	69a3      	ldr	r3, [r4, #24]
 80104d2:	b11b      	cbz	r3, 80104dc <__sinit+0x14>
 80104d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104d8:	f7ff bff0 	b.w	80104bc <__sinit_lock_release>
 80104dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80104e0:	6523      	str	r3, [r4, #80]	; 0x50
 80104e2:	4b13      	ldr	r3, [pc, #76]	; (8010530 <__sinit+0x68>)
 80104e4:	4a13      	ldr	r2, [pc, #76]	; (8010534 <__sinit+0x6c>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80104ea:	42a3      	cmp	r3, r4
 80104ec:	bf04      	itt	eq
 80104ee:	2301      	moveq	r3, #1
 80104f0:	61a3      	streq	r3, [r4, #24]
 80104f2:	4620      	mov	r0, r4
 80104f4:	f000 f820 	bl	8010538 <__sfp>
 80104f8:	6060      	str	r0, [r4, #4]
 80104fa:	4620      	mov	r0, r4
 80104fc:	f000 f81c 	bl	8010538 <__sfp>
 8010500:	60a0      	str	r0, [r4, #8]
 8010502:	4620      	mov	r0, r4
 8010504:	f000 f818 	bl	8010538 <__sfp>
 8010508:	2200      	movs	r2, #0
 801050a:	60e0      	str	r0, [r4, #12]
 801050c:	2104      	movs	r1, #4
 801050e:	6860      	ldr	r0, [r4, #4]
 8010510:	f7ff ff82 	bl	8010418 <std>
 8010514:	68a0      	ldr	r0, [r4, #8]
 8010516:	2201      	movs	r2, #1
 8010518:	2109      	movs	r1, #9
 801051a:	f7ff ff7d 	bl	8010418 <std>
 801051e:	68e0      	ldr	r0, [r4, #12]
 8010520:	2202      	movs	r2, #2
 8010522:	2112      	movs	r1, #18
 8010524:	f7ff ff78 	bl	8010418 <std>
 8010528:	2301      	movs	r3, #1
 801052a:	61a3      	str	r3, [r4, #24]
 801052c:	e7d2      	b.n	80104d4 <__sinit+0xc>
 801052e:	bf00      	nop
 8010530:	08014dac 	.word	0x08014dac
 8010534:	08010461 	.word	0x08010461

08010538 <__sfp>:
 8010538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801053a:	4607      	mov	r7, r0
 801053c:	f7ff ffac 	bl	8010498 <__sfp_lock_acquire>
 8010540:	4b1e      	ldr	r3, [pc, #120]	; (80105bc <__sfp+0x84>)
 8010542:	681e      	ldr	r6, [r3, #0]
 8010544:	69b3      	ldr	r3, [r6, #24]
 8010546:	b913      	cbnz	r3, 801054e <__sfp+0x16>
 8010548:	4630      	mov	r0, r6
 801054a:	f7ff ffbd 	bl	80104c8 <__sinit>
 801054e:	3648      	adds	r6, #72	; 0x48
 8010550:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010554:	3b01      	subs	r3, #1
 8010556:	d503      	bpl.n	8010560 <__sfp+0x28>
 8010558:	6833      	ldr	r3, [r6, #0]
 801055a:	b30b      	cbz	r3, 80105a0 <__sfp+0x68>
 801055c:	6836      	ldr	r6, [r6, #0]
 801055e:	e7f7      	b.n	8010550 <__sfp+0x18>
 8010560:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010564:	b9d5      	cbnz	r5, 801059c <__sfp+0x64>
 8010566:	4b16      	ldr	r3, [pc, #88]	; (80105c0 <__sfp+0x88>)
 8010568:	60e3      	str	r3, [r4, #12]
 801056a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801056e:	6665      	str	r5, [r4, #100]	; 0x64
 8010570:	f000 f86c 	bl	801064c <__retarget_lock_init_recursive>
 8010574:	f7ff ff96 	bl	80104a4 <__sfp_lock_release>
 8010578:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801057c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010580:	6025      	str	r5, [r4, #0]
 8010582:	61a5      	str	r5, [r4, #24]
 8010584:	2208      	movs	r2, #8
 8010586:	4629      	mov	r1, r5
 8010588:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801058c:	f000 f889 	bl	80106a2 <memset>
 8010590:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010594:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010598:	4620      	mov	r0, r4
 801059a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801059c:	3468      	adds	r4, #104	; 0x68
 801059e:	e7d9      	b.n	8010554 <__sfp+0x1c>
 80105a0:	2104      	movs	r1, #4
 80105a2:	4638      	mov	r0, r7
 80105a4:	f7ff ff62 	bl	801046c <__sfmoreglue>
 80105a8:	4604      	mov	r4, r0
 80105aa:	6030      	str	r0, [r6, #0]
 80105ac:	2800      	cmp	r0, #0
 80105ae:	d1d5      	bne.n	801055c <__sfp+0x24>
 80105b0:	f7ff ff78 	bl	80104a4 <__sfp_lock_release>
 80105b4:	230c      	movs	r3, #12
 80105b6:	603b      	str	r3, [r7, #0]
 80105b8:	e7ee      	b.n	8010598 <__sfp+0x60>
 80105ba:	bf00      	nop
 80105bc:	08014dac 	.word	0x08014dac
 80105c0:	ffff0001 	.word	0xffff0001

080105c4 <_fwalk_reent>:
 80105c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105c8:	4606      	mov	r6, r0
 80105ca:	4688      	mov	r8, r1
 80105cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80105d0:	2700      	movs	r7, #0
 80105d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80105d6:	f1b9 0901 	subs.w	r9, r9, #1
 80105da:	d505      	bpl.n	80105e8 <_fwalk_reent+0x24>
 80105dc:	6824      	ldr	r4, [r4, #0]
 80105de:	2c00      	cmp	r4, #0
 80105e0:	d1f7      	bne.n	80105d2 <_fwalk_reent+0xe>
 80105e2:	4638      	mov	r0, r7
 80105e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105e8:	89ab      	ldrh	r3, [r5, #12]
 80105ea:	2b01      	cmp	r3, #1
 80105ec:	d907      	bls.n	80105fe <_fwalk_reent+0x3a>
 80105ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80105f2:	3301      	adds	r3, #1
 80105f4:	d003      	beq.n	80105fe <_fwalk_reent+0x3a>
 80105f6:	4629      	mov	r1, r5
 80105f8:	4630      	mov	r0, r6
 80105fa:	47c0      	blx	r8
 80105fc:	4307      	orrs	r7, r0
 80105fe:	3568      	adds	r5, #104	; 0x68
 8010600:	e7e9      	b.n	80105d6 <_fwalk_reent+0x12>
	...

08010604 <__libc_init_array>:
 8010604:	b570      	push	{r4, r5, r6, lr}
 8010606:	4d0d      	ldr	r5, [pc, #52]	; (801063c <__libc_init_array+0x38>)
 8010608:	4c0d      	ldr	r4, [pc, #52]	; (8010640 <__libc_init_array+0x3c>)
 801060a:	1b64      	subs	r4, r4, r5
 801060c:	10a4      	asrs	r4, r4, #2
 801060e:	2600      	movs	r6, #0
 8010610:	42a6      	cmp	r6, r4
 8010612:	d109      	bne.n	8010628 <__libc_init_array+0x24>
 8010614:	4d0b      	ldr	r5, [pc, #44]	; (8010644 <__libc_init_array+0x40>)
 8010616:	4c0c      	ldr	r4, [pc, #48]	; (8010648 <__libc_init_array+0x44>)
 8010618:	f002 ff94 	bl	8013544 <_init>
 801061c:	1b64      	subs	r4, r4, r5
 801061e:	10a4      	asrs	r4, r4, #2
 8010620:	2600      	movs	r6, #0
 8010622:	42a6      	cmp	r6, r4
 8010624:	d105      	bne.n	8010632 <__libc_init_array+0x2e>
 8010626:	bd70      	pop	{r4, r5, r6, pc}
 8010628:	f855 3b04 	ldr.w	r3, [r5], #4
 801062c:	4798      	blx	r3
 801062e:	3601      	adds	r6, #1
 8010630:	e7ee      	b.n	8010610 <__libc_init_array+0xc>
 8010632:	f855 3b04 	ldr.w	r3, [r5], #4
 8010636:	4798      	blx	r3
 8010638:	3601      	adds	r6, #1
 801063a:	e7f2      	b.n	8010622 <__libc_init_array+0x1e>
 801063c:	08015134 	.word	0x08015134
 8010640:	08015134 	.word	0x08015134
 8010644:	08015134 	.word	0x08015134
 8010648:	08015138 	.word	0x08015138

0801064c <__retarget_lock_init_recursive>:
 801064c:	4770      	bx	lr

0801064e <__retarget_lock_acquire_recursive>:
 801064e:	4770      	bx	lr

08010650 <__retarget_lock_release_recursive>:
 8010650:	4770      	bx	lr

08010652 <memcpy>:
 8010652:	440a      	add	r2, r1
 8010654:	4291      	cmp	r1, r2
 8010656:	f100 33ff 	add.w	r3, r0, #4294967295
 801065a:	d100      	bne.n	801065e <memcpy+0xc>
 801065c:	4770      	bx	lr
 801065e:	b510      	push	{r4, lr}
 8010660:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010664:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010668:	4291      	cmp	r1, r2
 801066a:	d1f9      	bne.n	8010660 <memcpy+0xe>
 801066c:	bd10      	pop	{r4, pc}

0801066e <memmove>:
 801066e:	4288      	cmp	r0, r1
 8010670:	b510      	push	{r4, lr}
 8010672:	eb01 0402 	add.w	r4, r1, r2
 8010676:	d902      	bls.n	801067e <memmove+0x10>
 8010678:	4284      	cmp	r4, r0
 801067a:	4623      	mov	r3, r4
 801067c:	d807      	bhi.n	801068e <memmove+0x20>
 801067e:	1e43      	subs	r3, r0, #1
 8010680:	42a1      	cmp	r1, r4
 8010682:	d008      	beq.n	8010696 <memmove+0x28>
 8010684:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010688:	f803 2f01 	strb.w	r2, [r3, #1]!
 801068c:	e7f8      	b.n	8010680 <memmove+0x12>
 801068e:	4402      	add	r2, r0
 8010690:	4601      	mov	r1, r0
 8010692:	428a      	cmp	r2, r1
 8010694:	d100      	bne.n	8010698 <memmove+0x2a>
 8010696:	bd10      	pop	{r4, pc}
 8010698:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801069c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80106a0:	e7f7      	b.n	8010692 <memmove+0x24>

080106a2 <memset>:
 80106a2:	4402      	add	r2, r0
 80106a4:	4603      	mov	r3, r0
 80106a6:	4293      	cmp	r3, r2
 80106a8:	d100      	bne.n	80106ac <memset+0xa>
 80106aa:	4770      	bx	lr
 80106ac:	f803 1b01 	strb.w	r1, [r3], #1
 80106b0:	e7f9      	b.n	80106a6 <memset+0x4>
	...

080106b4 <sbrk_aligned>:
 80106b4:	b570      	push	{r4, r5, r6, lr}
 80106b6:	4e0e      	ldr	r6, [pc, #56]	; (80106f0 <sbrk_aligned+0x3c>)
 80106b8:	460c      	mov	r4, r1
 80106ba:	6831      	ldr	r1, [r6, #0]
 80106bc:	4605      	mov	r5, r0
 80106be:	b911      	cbnz	r1, 80106c6 <sbrk_aligned+0x12>
 80106c0:	f000 fdee 	bl	80112a0 <_sbrk_r>
 80106c4:	6030      	str	r0, [r6, #0]
 80106c6:	4621      	mov	r1, r4
 80106c8:	4628      	mov	r0, r5
 80106ca:	f000 fde9 	bl	80112a0 <_sbrk_r>
 80106ce:	1c43      	adds	r3, r0, #1
 80106d0:	d00a      	beq.n	80106e8 <sbrk_aligned+0x34>
 80106d2:	1cc4      	adds	r4, r0, #3
 80106d4:	f024 0403 	bic.w	r4, r4, #3
 80106d8:	42a0      	cmp	r0, r4
 80106da:	d007      	beq.n	80106ec <sbrk_aligned+0x38>
 80106dc:	1a21      	subs	r1, r4, r0
 80106de:	4628      	mov	r0, r5
 80106e0:	f000 fdde 	bl	80112a0 <_sbrk_r>
 80106e4:	3001      	adds	r0, #1
 80106e6:	d101      	bne.n	80106ec <sbrk_aligned+0x38>
 80106e8:	f04f 34ff 	mov.w	r4, #4294967295
 80106ec:	4620      	mov	r0, r4
 80106ee:	bd70      	pop	{r4, r5, r6, pc}
 80106f0:	20005e40 	.word	0x20005e40

080106f4 <_malloc_r>:
 80106f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106f8:	1ccd      	adds	r5, r1, #3
 80106fa:	f025 0503 	bic.w	r5, r5, #3
 80106fe:	3508      	adds	r5, #8
 8010700:	2d0c      	cmp	r5, #12
 8010702:	bf38      	it	cc
 8010704:	250c      	movcc	r5, #12
 8010706:	2d00      	cmp	r5, #0
 8010708:	4607      	mov	r7, r0
 801070a:	db01      	blt.n	8010710 <_malloc_r+0x1c>
 801070c:	42a9      	cmp	r1, r5
 801070e:	d905      	bls.n	801071c <_malloc_r+0x28>
 8010710:	230c      	movs	r3, #12
 8010712:	603b      	str	r3, [r7, #0]
 8010714:	2600      	movs	r6, #0
 8010716:	4630      	mov	r0, r6
 8010718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801071c:	4e2e      	ldr	r6, [pc, #184]	; (80107d8 <_malloc_r+0xe4>)
 801071e:	f001 ff63 	bl	80125e8 <__malloc_lock>
 8010722:	6833      	ldr	r3, [r6, #0]
 8010724:	461c      	mov	r4, r3
 8010726:	bb34      	cbnz	r4, 8010776 <_malloc_r+0x82>
 8010728:	4629      	mov	r1, r5
 801072a:	4638      	mov	r0, r7
 801072c:	f7ff ffc2 	bl	80106b4 <sbrk_aligned>
 8010730:	1c43      	adds	r3, r0, #1
 8010732:	4604      	mov	r4, r0
 8010734:	d14d      	bne.n	80107d2 <_malloc_r+0xde>
 8010736:	6834      	ldr	r4, [r6, #0]
 8010738:	4626      	mov	r6, r4
 801073a:	2e00      	cmp	r6, #0
 801073c:	d140      	bne.n	80107c0 <_malloc_r+0xcc>
 801073e:	6823      	ldr	r3, [r4, #0]
 8010740:	4631      	mov	r1, r6
 8010742:	4638      	mov	r0, r7
 8010744:	eb04 0803 	add.w	r8, r4, r3
 8010748:	f000 fdaa 	bl	80112a0 <_sbrk_r>
 801074c:	4580      	cmp	r8, r0
 801074e:	d13a      	bne.n	80107c6 <_malloc_r+0xd2>
 8010750:	6821      	ldr	r1, [r4, #0]
 8010752:	3503      	adds	r5, #3
 8010754:	1a6d      	subs	r5, r5, r1
 8010756:	f025 0503 	bic.w	r5, r5, #3
 801075a:	3508      	adds	r5, #8
 801075c:	2d0c      	cmp	r5, #12
 801075e:	bf38      	it	cc
 8010760:	250c      	movcc	r5, #12
 8010762:	4629      	mov	r1, r5
 8010764:	4638      	mov	r0, r7
 8010766:	f7ff ffa5 	bl	80106b4 <sbrk_aligned>
 801076a:	3001      	adds	r0, #1
 801076c:	d02b      	beq.n	80107c6 <_malloc_r+0xd2>
 801076e:	6823      	ldr	r3, [r4, #0]
 8010770:	442b      	add	r3, r5
 8010772:	6023      	str	r3, [r4, #0]
 8010774:	e00e      	b.n	8010794 <_malloc_r+0xa0>
 8010776:	6822      	ldr	r2, [r4, #0]
 8010778:	1b52      	subs	r2, r2, r5
 801077a:	d41e      	bmi.n	80107ba <_malloc_r+0xc6>
 801077c:	2a0b      	cmp	r2, #11
 801077e:	d916      	bls.n	80107ae <_malloc_r+0xba>
 8010780:	1961      	adds	r1, r4, r5
 8010782:	42a3      	cmp	r3, r4
 8010784:	6025      	str	r5, [r4, #0]
 8010786:	bf18      	it	ne
 8010788:	6059      	strne	r1, [r3, #4]
 801078a:	6863      	ldr	r3, [r4, #4]
 801078c:	bf08      	it	eq
 801078e:	6031      	streq	r1, [r6, #0]
 8010790:	5162      	str	r2, [r4, r5]
 8010792:	604b      	str	r3, [r1, #4]
 8010794:	4638      	mov	r0, r7
 8010796:	f104 060b 	add.w	r6, r4, #11
 801079a:	f001 ff2b 	bl	80125f4 <__malloc_unlock>
 801079e:	f026 0607 	bic.w	r6, r6, #7
 80107a2:	1d23      	adds	r3, r4, #4
 80107a4:	1af2      	subs	r2, r6, r3
 80107a6:	d0b6      	beq.n	8010716 <_malloc_r+0x22>
 80107a8:	1b9b      	subs	r3, r3, r6
 80107aa:	50a3      	str	r3, [r4, r2]
 80107ac:	e7b3      	b.n	8010716 <_malloc_r+0x22>
 80107ae:	6862      	ldr	r2, [r4, #4]
 80107b0:	42a3      	cmp	r3, r4
 80107b2:	bf0c      	ite	eq
 80107b4:	6032      	streq	r2, [r6, #0]
 80107b6:	605a      	strne	r2, [r3, #4]
 80107b8:	e7ec      	b.n	8010794 <_malloc_r+0xa0>
 80107ba:	4623      	mov	r3, r4
 80107bc:	6864      	ldr	r4, [r4, #4]
 80107be:	e7b2      	b.n	8010726 <_malloc_r+0x32>
 80107c0:	4634      	mov	r4, r6
 80107c2:	6876      	ldr	r6, [r6, #4]
 80107c4:	e7b9      	b.n	801073a <_malloc_r+0x46>
 80107c6:	230c      	movs	r3, #12
 80107c8:	603b      	str	r3, [r7, #0]
 80107ca:	4638      	mov	r0, r7
 80107cc:	f001 ff12 	bl	80125f4 <__malloc_unlock>
 80107d0:	e7a1      	b.n	8010716 <_malloc_r+0x22>
 80107d2:	6025      	str	r5, [r4, #0]
 80107d4:	e7de      	b.n	8010794 <_malloc_r+0xa0>
 80107d6:	bf00      	nop
 80107d8:	20005e3c 	.word	0x20005e3c

080107dc <__cvt>:
 80107dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80107e0:	ec55 4b10 	vmov	r4, r5, d0
 80107e4:	2d00      	cmp	r5, #0
 80107e6:	460e      	mov	r6, r1
 80107e8:	4619      	mov	r1, r3
 80107ea:	462b      	mov	r3, r5
 80107ec:	bfbb      	ittet	lt
 80107ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80107f2:	461d      	movlt	r5, r3
 80107f4:	2300      	movge	r3, #0
 80107f6:	232d      	movlt	r3, #45	; 0x2d
 80107f8:	700b      	strb	r3, [r1, #0]
 80107fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80107fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010800:	4691      	mov	r9, r2
 8010802:	f023 0820 	bic.w	r8, r3, #32
 8010806:	bfbc      	itt	lt
 8010808:	4622      	movlt	r2, r4
 801080a:	4614      	movlt	r4, r2
 801080c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010810:	d005      	beq.n	801081e <__cvt+0x42>
 8010812:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010816:	d100      	bne.n	801081a <__cvt+0x3e>
 8010818:	3601      	adds	r6, #1
 801081a:	2102      	movs	r1, #2
 801081c:	e000      	b.n	8010820 <__cvt+0x44>
 801081e:	2103      	movs	r1, #3
 8010820:	ab03      	add	r3, sp, #12
 8010822:	9301      	str	r3, [sp, #4]
 8010824:	ab02      	add	r3, sp, #8
 8010826:	9300      	str	r3, [sp, #0]
 8010828:	ec45 4b10 	vmov	d0, r4, r5
 801082c:	4653      	mov	r3, sl
 801082e:	4632      	mov	r2, r6
 8010830:	f000 ffa6 	bl	8011780 <_dtoa_r>
 8010834:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010838:	4607      	mov	r7, r0
 801083a:	d102      	bne.n	8010842 <__cvt+0x66>
 801083c:	f019 0f01 	tst.w	r9, #1
 8010840:	d022      	beq.n	8010888 <__cvt+0xac>
 8010842:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010846:	eb07 0906 	add.w	r9, r7, r6
 801084a:	d110      	bne.n	801086e <__cvt+0x92>
 801084c:	783b      	ldrb	r3, [r7, #0]
 801084e:	2b30      	cmp	r3, #48	; 0x30
 8010850:	d10a      	bne.n	8010868 <__cvt+0x8c>
 8010852:	2200      	movs	r2, #0
 8010854:	2300      	movs	r3, #0
 8010856:	4620      	mov	r0, r4
 8010858:	4629      	mov	r1, r5
 801085a:	f7f0 f93d 	bl	8000ad8 <__aeabi_dcmpeq>
 801085e:	b918      	cbnz	r0, 8010868 <__cvt+0x8c>
 8010860:	f1c6 0601 	rsb	r6, r6, #1
 8010864:	f8ca 6000 	str.w	r6, [sl]
 8010868:	f8da 3000 	ldr.w	r3, [sl]
 801086c:	4499      	add	r9, r3
 801086e:	2200      	movs	r2, #0
 8010870:	2300      	movs	r3, #0
 8010872:	4620      	mov	r0, r4
 8010874:	4629      	mov	r1, r5
 8010876:	f7f0 f92f 	bl	8000ad8 <__aeabi_dcmpeq>
 801087a:	b108      	cbz	r0, 8010880 <__cvt+0xa4>
 801087c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010880:	2230      	movs	r2, #48	; 0x30
 8010882:	9b03      	ldr	r3, [sp, #12]
 8010884:	454b      	cmp	r3, r9
 8010886:	d307      	bcc.n	8010898 <__cvt+0xbc>
 8010888:	9b03      	ldr	r3, [sp, #12]
 801088a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801088c:	1bdb      	subs	r3, r3, r7
 801088e:	4638      	mov	r0, r7
 8010890:	6013      	str	r3, [r2, #0]
 8010892:	b004      	add	sp, #16
 8010894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010898:	1c59      	adds	r1, r3, #1
 801089a:	9103      	str	r1, [sp, #12]
 801089c:	701a      	strb	r2, [r3, #0]
 801089e:	e7f0      	b.n	8010882 <__cvt+0xa6>

080108a0 <__exponent>:
 80108a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80108a2:	4603      	mov	r3, r0
 80108a4:	2900      	cmp	r1, #0
 80108a6:	bfb8      	it	lt
 80108a8:	4249      	neglt	r1, r1
 80108aa:	f803 2b02 	strb.w	r2, [r3], #2
 80108ae:	bfb4      	ite	lt
 80108b0:	222d      	movlt	r2, #45	; 0x2d
 80108b2:	222b      	movge	r2, #43	; 0x2b
 80108b4:	2909      	cmp	r1, #9
 80108b6:	7042      	strb	r2, [r0, #1]
 80108b8:	dd2a      	ble.n	8010910 <__exponent+0x70>
 80108ba:	f10d 0407 	add.w	r4, sp, #7
 80108be:	46a4      	mov	ip, r4
 80108c0:	270a      	movs	r7, #10
 80108c2:	46a6      	mov	lr, r4
 80108c4:	460a      	mov	r2, r1
 80108c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80108ca:	fb07 1516 	mls	r5, r7, r6, r1
 80108ce:	3530      	adds	r5, #48	; 0x30
 80108d0:	2a63      	cmp	r2, #99	; 0x63
 80108d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80108d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80108da:	4631      	mov	r1, r6
 80108dc:	dcf1      	bgt.n	80108c2 <__exponent+0x22>
 80108de:	3130      	adds	r1, #48	; 0x30
 80108e0:	f1ae 0502 	sub.w	r5, lr, #2
 80108e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80108e8:	1c44      	adds	r4, r0, #1
 80108ea:	4629      	mov	r1, r5
 80108ec:	4561      	cmp	r1, ip
 80108ee:	d30a      	bcc.n	8010906 <__exponent+0x66>
 80108f0:	f10d 0209 	add.w	r2, sp, #9
 80108f4:	eba2 020e 	sub.w	r2, r2, lr
 80108f8:	4565      	cmp	r5, ip
 80108fa:	bf88      	it	hi
 80108fc:	2200      	movhi	r2, #0
 80108fe:	4413      	add	r3, r2
 8010900:	1a18      	subs	r0, r3, r0
 8010902:	b003      	add	sp, #12
 8010904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010906:	f811 2b01 	ldrb.w	r2, [r1], #1
 801090a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801090e:	e7ed      	b.n	80108ec <__exponent+0x4c>
 8010910:	2330      	movs	r3, #48	; 0x30
 8010912:	3130      	adds	r1, #48	; 0x30
 8010914:	7083      	strb	r3, [r0, #2]
 8010916:	70c1      	strb	r1, [r0, #3]
 8010918:	1d03      	adds	r3, r0, #4
 801091a:	e7f1      	b.n	8010900 <__exponent+0x60>

0801091c <_printf_float>:
 801091c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010920:	ed2d 8b02 	vpush	{d8}
 8010924:	b08d      	sub	sp, #52	; 0x34
 8010926:	460c      	mov	r4, r1
 8010928:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801092c:	4616      	mov	r6, r2
 801092e:	461f      	mov	r7, r3
 8010930:	4605      	mov	r5, r0
 8010932:	f001 fdd5 	bl	80124e0 <_localeconv_r>
 8010936:	f8d0 a000 	ldr.w	sl, [r0]
 801093a:	4650      	mov	r0, sl
 801093c:	f7ef fc50 	bl	80001e0 <strlen>
 8010940:	2300      	movs	r3, #0
 8010942:	930a      	str	r3, [sp, #40]	; 0x28
 8010944:	6823      	ldr	r3, [r4, #0]
 8010946:	9305      	str	r3, [sp, #20]
 8010948:	f8d8 3000 	ldr.w	r3, [r8]
 801094c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010950:	3307      	adds	r3, #7
 8010952:	f023 0307 	bic.w	r3, r3, #7
 8010956:	f103 0208 	add.w	r2, r3, #8
 801095a:	f8c8 2000 	str.w	r2, [r8]
 801095e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010962:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010966:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801096a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801096e:	9307      	str	r3, [sp, #28]
 8010970:	f8cd 8018 	str.w	r8, [sp, #24]
 8010974:	ee08 0a10 	vmov	s16, r0
 8010978:	4b9f      	ldr	r3, [pc, #636]	; (8010bf8 <_printf_float+0x2dc>)
 801097a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801097e:	f04f 32ff 	mov.w	r2, #4294967295
 8010982:	f7f0 f8db 	bl	8000b3c <__aeabi_dcmpun>
 8010986:	bb88      	cbnz	r0, 80109ec <_printf_float+0xd0>
 8010988:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801098c:	4b9a      	ldr	r3, [pc, #616]	; (8010bf8 <_printf_float+0x2dc>)
 801098e:	f04f 32ff 	mov.w	r2, #4294967295
 8010992:	f7f0 f8b5 	bl	8000b00 <__aeabi_dcmple>
 8010996:	bb48      	cbnz	r0, 80109ec <_printf_float+0xd0>
 8010998:	2200      	movs	r2, #0
 801099a:	2300      	movs	r3, #0
 801099c:	4640      	mov	r0, r8
 801099e:	4649      	mov	r1, r9
 80109a0:	f7f0 f8a4 	bl	8000aec <__aeabi_dcmplt>
 80109a4:	b110      	cbz	r0, 80109ac <_printf_float+0x90>
 80109a6:	232d      	movs	r3, #45	; 0x2d
 80109a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80109ac:	4b93      	ldr	r3, [pc, #588]	; (8010bfc <_printf_float+0x2e0>)
 80109ae:	4894      	ldr	r0, [pc, #592]	; (8010c00 <_printf_float+0x2e4>)
 80109b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80109b4:	bf94      	ite	ls
 80109b6:	4698      	movls	r8, r3
 80109b8:	4680      	movhi	r8, r0
 80109ba:	2303      	movs	r3, #3
 80109bc:	6123      	str	r3, [r4, #16]
 80109be:	9b05      	ldr	r3, [sp, #20]
 80109c0:	f023 0204 	bic.w	r2, r3, #4
 80109c4:	6022      	str	r2, [r4, #0]
 80109c6:	f04f 0900 	mov.w	r9, #0
 80109ca:	9700      	str	r7, [sp, #0]
 80109cc:	4633      	mov	r3, r6
 80109ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80109d0:	4621      	mov	r1, r4
 80109d2:	4628      	mov	r0, r5
 80109d4:	f000 f9d8 	bl	8010d88 <_printf_common>
 80109d8:	3001      	adds	r0, #1
 80109da:	f040 8090 	bne.w	8010afe <_printf_float+0x1e2>
 80109de:	f04f 30ff 	mov.w	r0, #4294967295
 80109e2:	b00d      	add	sp, #52	; 0x34
 80109e4:	ecbd 8b02 	vpop	{d8}
 80109e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109ec:	4642      	mov	r2, r8
 80109ee:	464b      	mov	r3, r9
 80109f0:	4640      	mov	r0, r8
 80109f2:	4649      	mov	r1, r9
 80109f4:	f7f0 f8a2 	bl	8000b3c <__aeabi_dcmpun>
 80109f8:	b140      	cbz	r0, 8010a0c <_printf_float+0xf0>
 80109fa:	464b      	mov	r3, r9
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	bfbc      	itt	lt
 8010a00:	232d      	movlt	r3, #45	; 0x2d
 8010a02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010a06:	487f      	ldr	r0, [pc, #508]	; (8010c04 <_printf_float+0x2e8>)
 8010a08:	4b7f      	ldr	r3, [pc, #508]	; (8010c08 <_printf_float+0x2ec>)
 8010a0a:	e7d1      	b.n	80109b0 <_printf_float+0x94>
 8010a0c:	6863      	ldr	r3, [r4, #4]
 8010a0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010a12:	9206      	str	r2, [sp, #24]
 8010a14:	1c5a      	adds	r2, r3, #1
 8010a16:	d13f      	bne.n	8010a98 <_printf_float+0x17c>
 8010a18:	2306      	movs	r3, #6
 8010a1a:	6063      	str	r3, [r4, #4]
 8010a1c:	9b05      	ldr	r3, [sp, #20]
 8010a1e:	6861      	ldr	r1, [r4, #4]
 8010a20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010a24:	2300      	movs	r3, #0
 8010a26:	9303      	str	r3, [sp, #12]
 8010a28:	ab0a      	add	r3, sp, #40	; 0x28
 8010a2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010a2e:	ab09      	add	r3, sp, #36	; 0x24
 8010a30:	ec49 8b10 	vmov	d0, r8, r9
 8010a34:	9300      	str	r3, [sp, #0]
 8010a36:	6022      	str	r2, [r4, #0]
 8010a38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010a3c:	4628      	mov	r0, r5
 8010a3e:	f7ff fecd 	bl	80107dc <__cvt>
 8010a42:	9b06      	ldr	r3, [sp, #24]
 8010a44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010a46:	2b47      	cmp	r3, #71	; 0x47
 8010a48:	4680      	mov	r8, r0
 8010a4a:	d108      	bne.n	8010a5e <_printf_float+0x142>
 8010a4c:	1cc8      	adds	r0, r1, #3
 8010a4e:	db02      	blt.n	8010a56 <_printf_float+0x13a>
 8010a50:	6863      	ldr	r3, [r4, #4]
 8010a52:	4299      	cmp	r1, r3
 8010a54:	dd41      	ble.n	8010ada <_printf_float+0x1be>
 8010a56:	f1ab 0b02 	sub.w	fp, fp, #2
 8010a5a:	fa5f fb8b 	uxtb.w	fp, fp
 8010a5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010a62:	d820      	bhi.n	8010aa6 <_printf_float+0x18a>
 8010a64:	3901      	subs	r1, #1
 8010a66:	465a      	mov	r2, fp
 8010a68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010a6c:	9109      	str	r1, [sp, #36]	; 0x24
 8010a6e:	f7ff ff17 	bl	80108a0 <__exponent>
 8010a72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a74:	1813      	adds	r3, r2, r0
 8010a76:	2a01      	cmp	r2, #1
 8010a78:	4681      	mov	r9, r0
 8010a7a:	6123      	str	r3, [r4, #16]
 8010a7c:	dc02      	bgt.n	8010a84 <_printf_float+0x168>
 8010a7e:	6822      	ldr	r2, [r4, #0]
 8010a80:	07d2      	lsls	r2, r2, #31
 8010a82:	d501      	bpl.n	8010a88 <_printf_float+0x16c>
 8010a84:	3301      	adds	r3, #1
 8010a86:	6123      	str	r3, [r4, #16]
 8010a88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d09c      	beq.n	80109ca <_printf_float+0xae>
 8010a90:	232d      	movs	r3, #45	; 0x2d
 8010a92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a96:	e798      	b.n	80109ca <_printf_float+0xae>
 8010a98:	9a06      	ldr	r2, [sp, #24]
 8010a9a:	2a47      	cmp	r2, #71	; 0x47
 8010a9c:	d1be      	bne.n	8010a1c <_printf_float+0x100>
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d1bc      	bne.n	8010a1c <_printf_float+0x100>
 8010aa2:	2301      	movs	r3, #1
 8010aa4:	e7b9      	b.n	8010a1a <_printf_float+0xfe>
 8010aa6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010aaa:	d118      	bne.n	8010ade <_printf_float+0x1c2>
 8010aac:	2900      	cmp	r1, #0
 8010aae:	6863      	ldr	r3, [r4, #4]
 8010ab0:	dd0b      	ble.n	8010aca <_printf_float+0x1ae>
 8010ab2:	6121      	str	r1, [r4, #16]
 8010ab4:	b913      	cbnz	r3, 8010abc <_printf_float+0x1a0>
 8010ab6:	6822      	ldr	r2, [r4, #0]
 8010ab8:	07d0      	lsls	r0, r2, #31
 8010aba:	d502      	bpl.n	8010ac2 <_printf_float+0x1a6>
 8010abc:	3301      	adds	r3, #1
 8010abe:	440b      	add	r3, r1
 8010ac0:	6123      	str	r3, [r4, #16]
 8010ac2:	65a1      	str	r1, [r4, #88]	; 0x58
 8010ac4:	f04f 0900 	mov.w	r9, #0
 8010ac8:	e7de      	b.n	8010a88 <_printf_float+0x16c>
 8010aca:	b913      	cbnz	r3, 8010ad2 <_printf_float+0x1b6>
 8010acc:	6822      	ldr	r2, [r4, #0]
 8010ace:	07d2      	lsls	r2, r2, #31
 8010ad0:	d501      	bpl.n	8010ad6 <_printf_float+0x1ba>
 8010ad2:	3302      	adds	r3, #2
 8010ad4:	e7f4      	b.n	8010ac0 <_printf_float+0x1a4>
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	e7f2      	b.n	8010ac0 <_printf_float+0x1a4>
 8010ada:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ae0:	4299      	cmp	r1, r3
 8010ae2:	db05      	blt.n	8010af0 <_printf_float+0x1d4>
 8010ae4:	6823      	ldr	r3, [r4, #0]
 8010ae6:	6121      	str	r1, [r4, #16]
 8010ae8:	07d8      	lsls	r0, r3, #31
 8010aea:	d5ea      	bpl.n	8010ac2 <_printf_float+0x1a6>
 8010aec:	1c4b      	adds	r3, r1, #1
 8010aee:	e7e7      	b.n	8010ac0 <_printf_float+0x1a4>
 8010af0:	2900      	cmp	r1, #0
 8010af2:	bfd4      	ite	le
 8010af4:	f1c1 0202 	rsble	r2, r1, #2
 8010af8:	2201      	movgt	r2, #1
 8010afa:	4413      	add	r3, r2
 8010afc:	e7e0      	b.n	8010ac0 <_printf_float+0x1a4>
 8010afe:	6823      	ldr	r3, [r4, #0]
 8010b00:	055a      	lsls	r2, r3, #21
 8010b02:	d407      	bmi.n	8010b14 <_printf_float+0x1f8>
 8010b04:	6923      	ldr	r3, [r4, #16]
 8010b06:	4642      	mov	r2, r8
 8010b08:	4631      	mov	r1, r6
 8010b0a:	4628      	mov	r0, r5
 8010b0c:	47b8      	blx	r7
 8010b0e:	3001      	adds	r0, #1
 8010b10:	d12c      	bne.n	8010b6c <_printf_float+0x250>
 8010b12:	e764      	b.n	80109de <_printf_float+0xc2>
 8010b14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010b18:	f240 80e0 	bls.w	8010cdc <_printf_float+0x3c0>
 8010b1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010b20:	2200      	movs	r2, #0
 8010b22:	2300      	movs	r3, #0
 8010b24:	f7ef ffd8 	bl	8000ad8 <__aeabi_dcmpeq>
 8010b28:	2800      	cmp	r0, #0
 8010b2a:	d034      	beq.n	8010b96 <_printf_float+0x27a>
 8010b2c:	4a37      	ldr	r2, [pc, #220]	; (8010c0c <_printf_float+0x2f0>)
 8010b2e:	2301      	movs	r3, #1
 8010b30:	4631      	mov	r1, r6
 8010b32:	4628      	mov	r0, r5
 8010b34:	47b8      	blx	r7
 8010b36:	3001      	adds	r0, #1
 8010b38:	f43f af51 	beq.w	80109de <_printf_float+0xc2>
 8010b3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010b40:	429a      	cmp	r2, r3
 8010b42:	db02      	blt.n	8010b4a <_printf_float+0x22e>
 8010b44:	6823      	ldr	r3, [r4, #0]
 8010b46:	07d8      	lsls	r0, r3, #31
 8010b48:	d510      	bpl.n	8010b6c <_printf_float+0x250>
 8010b4a:	ee18 3a10 	vmov	r3, s16
 8010b4e:	4652      	mov	r2, sl
 8010b50:	4631      	mov	r1, r6
 8010b52:	4628      	mov	r0, r5
 8010b54:	47b8      	blx	r7
 8010b56:	3001      	adds	r0, #1
 8010b58:	f43f af41 	beq.w	80109de <_printf_float+0xc2>
 8010b5c:	f04f 0800 	mov.w	r8, #0
 8010b60:	f104 091a 	add.w	r9, r4, #26
 8010b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b66:	3b01      	subs	r3, #1
 8010b68:	4543      	cmp	r3, r8
 8010b6a:	dc09      	bgt.n	8010b80 <_printf_float+0x264>
 8010b6c:	6823      	ldr	r3, [r4, #0]
 8010b6e:	079b      	lsls	r3, r3, #30
 8010b70:	f100 8105 	bmi.w	8010d7e <_printf_float+0x462>
 8010b74:	68e0      	ldr	r0, [r4, #12]
 8010b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b78:	4298      	cmp	r0, r3
 8010b7a:	bfb8      	it	lt
 8010b7c:	4618      	movlt	r0, r3
 8010b7e:	e730      	b.n	80109e2 <_printf_float+0xc6>
 8010b80:	2301      	movs	r3, #1
 8010b82:	464a      	mov	r2, r9
 8010b84:	4631      	mov	r1, r6
 8010b86:	4628      	mov	r0, r5
 8010b88:	47b8      	blx	r7
 8010b8a:	3001      	adds	r0, #1
 8010b8c:	f43f af27 	beq.w	80109de <_printf_float+0xc2>
 8010b90:	f108 0801 	add.w	r8, r8, #1
 8010b94:	e7e6      	b.n	8010b64 <_printf_float+0x248>
 8010b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	dc39      	bgt.n	8010c10 <_printf_float+0x2f4>
 8010b9c:	4a1b      	ldr	r2, [pc, #108]	; (8010c0c <_printf_float+0x2f0>)
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	4631      	mov	r1, r6
 8010ba2:	4628      	mov	r0, r5
 8010ba4:	47b8      	blx	r7
 8010ba6:	3001      	adds	r0, #1
 8010ba8:	f43f af19 	beq.w	80109de <_printf_float+0xc2>
 8010bac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010bb0:	4313      	orrs	r3, r2
 8010bb2:	d102      	bne.n	8010bba <_printf_float+0x29e>
 8010bb4:	6823      	ldr	r3, [r4, #0]
 8010bb6:	07d9      	lsls	r1, r3, #31
 8010bb8:	d5d8      	bpl.n	8010b6c <_printf_float+0x250>
 8010bba:	ee18 3a10 	vmov	r3, s16
 8010bbe:	4652      	mov	r2, sl
 8010bc0:	4631      	mov	r1, r6
 8010bc2:	4628      	mov	r0, r5
 8010bc4:	47b8      	blx	r7
 8010bc6:	3001      	adds	r0, #1
 8010bc8:	f43f af09 	beq.w	80109de <_printf_float+0xc2>
 8010bcc:	f04f 0900 	mov.w	r9, #0
 8010bd0:	f104 0a1a 	add.w	sl, r4, #26
 8010bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bd6:	425b      	negs	r3, r3
 8010bd8:	454b      	cmp	r3, r9
 8010bda:	dc01      	bgt.n	8010be0 <_printf_float+0x2c4>
 8010bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bde:	e792      	b.n	8010b06 <_printf_float+0x1ea>
 8010be0:	2301      	movs	r3, #1
 8010be2:	4652      	mov	r2, sl
 8010be4:	4631      	mov	r1, r6
 8010be6:	4628      	mov	r0, r5
 8010be8:	47b8      	blx	r7
 8010bea:	3001      	adds	r0, #1
 8010bec:	f43f aef7 	beq.w	80109de <_printf_float+0xc2>
 8010bf0:	f109 0901 	add.w	r9, r9, #1
 8010bf4:	e7ee      	b.n	8010bd4 <_printf_float+0x2b8>
 8010bf6:	bf00      	nop
 8010bf8:	7fefffff 	.word	0x7fefffff
 8010bfc:	08014db0 	.word	0x08014db0
 8010c00:	08014db4 	.word	0x08014db4
 8010c04:	08014dbc 	.word	0x08014dbc
 8010c08:	08014db8 	.word	0x08014db8
 8010c0c:	08014dc0 	.word	0x08014dc0
 8010c10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010c14:	429a      	cmp	r2, r3
 8010c16:	bfa8      	it	ge
 8010c18:	461a      	movge	r2, r3
 8010c1a:	2a00      	cmp	r2, #0
 8010c1c:	4691      	mov	r9, r2
 8010c1e:	dc37      	bgt.n	8010c90 <_printf_float+0x374>
 8010c20:	f04f 0b00 	mov.w	fp, #0
 8010c24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010c28:	f104 021a 	add.w	r2, r4, #26
 8010c2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010c2e:	9305      	str	r3, [sp, #20]
 8010c30:	eba3 0309 	sub.w	r3, r3, r9
 8010c34:	455b      	cmp	r3, fp
 8010c36:	dc33      	bgt.n	8010ca0 <_printf_float+0x384>
 8010c38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010c3c:	429a      	cmp	r2, r3
 8010c3e:	db3b      	blt.n	8010cb8 <_printf_float+0x39c>
 8010c40:	6823      	ldr	r3, [r4, #0]
 8010c42:	07da      	lsls	r2, r3, #31
 8010c44:	d438      	bmi.n	8010cb8 <_printf_float+0x39c>
 8010c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c48:	9a05      	ldr	r2, [sp, #20]
 8010c4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c4c:	1a9a      	subs	r2, r3, r2
 8010c4e:	eba3 0901 	sub.w	r9, r3, r1
 8010c52:	4591      	cmp	r9, r2
 8010c54:	bfa8      	it	ge
 8010c56:	4691      	movge	r9, r2
 8010c58:	f1b9 0f00 	cmp.w	r9, #0
 8010c5c:	dc35      	bgt.n	8010cca <_printf_float+0x3ae>
 8010c5e:	f04f 0800 	mov.w	r8, #0
 8010c62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010c66:	f104 0a1a 	add.w	sl, r4, #26
 8010c6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010c6e:	1a9b      	subs	r3, r3, r2
 8010c70:	eba3 0309 	sub.w	r3, r3, r9
 8010c74:	4543      	cmp	r3, r8
 8010c76:	f77f af79 	ble.w	8010b6c <_printf_float+0x250>
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	4652      	mov	r2, sl
 8010c7e:	4631      	mov	r1, r6
 8010c80:	4628      	mov	r0, r5
 8010c82:	47b8      	blx	r7
 8010c84:	3001      	adds	r0, #1
 8010c86:	f43f aeaa 	beq.w	80109de <_printf_float+0xc2>
 8010c8a:	f108 0801 	add.w	r8, r8, #1
 8010c8e:	e7ec      	b.n	8010c6a <_printf_float+0x34e>
 8010c90:	4613      	mov	r3, r2
 8010c92:	4631      	mov	r1, r6
 8010c94:	4642      	mov	r2, r8
 8010c96:	4628      	mov	r0, r5
 8010c98:	47b8      	blx	r7
 8010c9a:	3001      	adds	r0, #1
 8010c9c:	d1c0      	bne.n	8010c20 <_printf_float+0x304>
 8010c9e:	e69e      	b.n	80109de <_printf_float+0xc2>
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	4631      	mov	r1, r6
 8010ca4:	4628      	mov	r0, r5
 8010ca6:	9205      	str	r2, [sp, #20]
 8010ca8:	47b8      	blx	r7
 8010caa:	3001      	adds	r0, #1
 8010cac:	f43f ae97 	beq.w	80109de <_printf_float+0xc2>
 8010cb0:	9a05      	ldr	r2, [sp, #20]
 8010cb2:	f10b 0b01 	add.w	fp, fp, #1
 8010cb6:	e7b9      	b.n	8010c2c <_printf_float+0x310>
 8010cb8:	ee18 3a10 	vmov	r3, s16
 8010cbc:	4652      	mov	r2, sl
 8010cbe:	4631      	mov	r1, r6
 8010cc0:	4628      	mov	r0, r5
 8010cc2:	47b8      	blx	r7
 8010cc4:	3001      	adds	r0, #1
 8010cc6:	d1be      	bne.n	8010c46 <_printf_float+0x32a>
 8010cc8:	e689      	b.n	80109de <_printf_float+0xc2>
 8010cca:	9a05      	ldr	r2, [sp, #20]
 8010ccc:	464b      	mov	r3, r9
 8010cce:	4442      	add	r2, r8
 8010cd0:	4631      	mov	r1, r6
 8010cd2:	4628      	mov	r0, r5
 8010cd4:	47b8      	blx	r7
 8010cd6:	3001      	adds	r0, #1
 8010cd8:	d1c1      	bne.n	8010c5e <_printf_float+0x342>
 8010cda:	e680      	b.n	80109de <_printf_float+0xc2>
 8010cdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010cde:	2a01      	cmp	r2, #1
 8010ce0:	dc01      	bgt.n	8010ce6 <_printf_float+0x3ca>
 8010ce2:	07db      	lsls	r3, r3, #31
 8010ce4:	d538      	bpl.n	8010d58 <_printf_float+0x43c>
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	4642      	mov	r2, r8
 8010cea:	4631      	mov	r1, r6
 8010cec:	4628      	mov	r0, r5
 8010cee:	47b8      	blx	r7
 8010cf0:	3001      	adds	r0, #1
 8010cf2:	f43f ae74 	beq.w	80109de <_printf_float+0xc2>
 8010cf6:	ee18 3a10 	vmov	r3, s16
 8010cfa:	4652      	mov	r2, sl
 8010cfc:	4631      	mov	r1, r6
 8010cfe:	4628      	mov	r0, r5
 8010d00:	47b8      	blx	r7
 8010d02:	3001      	adds	r0, #1
 8010d04:	f43f ae6b 	beq.w	80109de <_printf_float+0xc2>
 8010d08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	2300      	movs	r3, #0
 8010d10:	f7ef fee2 	bl	8000ad8 <__aeabi_dcmpeq>
 8010d14:	b9d8      	cbnz	r0, 8010d4e <_printf_float+0x432>
 8010d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d18:	f108 0201 	add.w	r2, r8, #1
 8010d1c:	3b01      	subs	r3, #1
 8010d1e:	4631      	mov	r1, r6
 8010d20:	4628      	mov	r0, r5
 8010d22:	47b8      	blx	r7
 8010d24:	3001      	adds	r0, #1
 8010d26:	d10e      	bne.n	8010d46 <_printf_float+0x42a>
 8010d28:	e659      	b.n	80109de <_printf_float+0xc2>
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	4652      	mov	r2, sl
 8010d2e:	4631      	mov	r1, r6
 8010d30:	4628      	mov	r0, r5
 8010d32:	47b8      	blx	r7
 8010d34:	3001      	adds	r0, #1
 8010d36:	f43f ae52 	beq.w	80109de <_printf_float+0xc2>
 8010d3a:	f108 0801 	add.w	r8, r8, #1
 8010d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d40:	3b01      	subs	r3, #1
 8010d42:	4543      	cmp	r3, r8
 8010d44:	dcf1      	bgt.n	8010d2a <_printf_float+0x40e>
 8010d46:	464b      	mov	r3, r9
 8010d48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010d4c:	e6dc      	b.n	8010b08 <_printf_float+0x1ec>
 8010d4e:	f04f 0800 	mov.w	r8, #0
 8010d52:	f104 0a1a 	add.w	sl, r4, #26
 8010d56:	e7f2      	b.n	8010d3e <_printf_float+0x422>
 8010d58:	2301      	movs	r3, #1
 8010d5a:	4642      	mov	r2, r8
 8010d5c:	e7df      	b.n	8010d1e <_printf_float+0x402>
 8010d5e:	2301      	movs	r3, #1
 8010d60:	464a      	mov	r2, r9
 8010d62:	4631      	mov	r1, r6
 8010d64:	4628      	mov	r0, r5
 8010d66:	47b8      	blx	r7
 8010d68:	3001      	adds	r0, #1
 8010d6a:	f43f ae38 	beq.w	80109de <_printf_float+0xc2>
 8010d6e:	f108 0801 	add.w	r8, r8, #1
 8010d72:	68e3      	ldr	r3, [r4, #12]
 8010d74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010d76:	1a5b      	subs	r3, r3, r1
 8010d78:	4543      	cmp	r3, r8
 8010d7a:	dcf0      	bgt.n	8010d5e <_printf_float+0x442>
 8010d7c:	e6fa      	b.n	8010b74 <_printf_float+0x258>
 8010d7e:	f04f 0800 	mov.w	r8, #0
 8010d82:	f104 0919 	add.w	r9, r4, #25
 8010d86:	e7f4      	b.n	8010d72 <_printf_float+0x456>

08010d88 <_printf_common>:
 8010d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d8c:	4616      	mov	r6, r2
 8010d8e:	4699      	mov	r9, r3
 8010d90:	688a      	ldr	r2, [r1, #8]
 8010d92:	690b      	ldr	r3, [r1, #16]
 8010d94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010d98:	4293      	cmp	r3, r2
 8010d9a:	bfb8      	it	lt
 8010d9c:	4613      	movlt	r3, r2
 8010d9e:	6033      	str	r3, [r6, #0]
 8010da0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010da4:	4607      	mov	r7, r0
 8010da6:	460c      	mov	r4, r1
 8010da8:	b10a      	cbz	r2, 8010dae <_printf_common+0x26>
 8010daa:	3301      	adds	r3, #1
 8010dac:	6033      	str	r3, [r6, #0]
 8010dae:	6823      	ldr	r3, [r4, #0]
 8010db0:	0699      	lsls	r1, r3, #26
 8010db2:	bf42      	ittt	mi
 8010db4:	6833      	ldrmi	r3, [r6, #0]
 8010db6:	3302      	addmi	r3, #2
 8010db8:	6033      	strmi	r3, [r6, #0]
 8010dba:	6825      	ldr	r5, [r4, #0]
 8010dbc:	f015 0506 	ands.w	r5, r5, #6
 8010dc0:	d106      	bne.n	8010dd0 <_printf_common+0x48>
 8010dc2:	f104 0a19 	add.w	sl, r4, #25
 8010dc6:	68e3      	ldr	r3, [r4, #12]
 8010dc8:	6832      	ldr	r2, [r6, #0]
 8010dca:	1a9b      	subs	r3, r3, r2
 8010dcc:	42ab      	cmp	r3, r5
 8010dce:	dc26      	bgt.n	8010e1e <_printf_common+0x96>
 8010dd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010dd4:	1e13      	subs	r3, r2, #0
 8010dd6:	6822      	ldr	r2, [r4, #0]
 8010dd8:	bf18      	it	ne
 8010dda:	2301      	movne	r3, #1
 8010ddc:	0692      	lsls	r2, r2, #26
 8010dde:	d42b      	bmi.n	8010e38 <_printf_common+0xb0>
 8010de0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010de4:	4649      	mov	r1, r9
 8010de6:	4638      	mov	r0, r7
 8010de8:	47c0      	blx	r8
 8010dea:	3001      	adds	r0, #1
 8010dec:	d01e      	beq.n	8010e2c <_printf_common+0xa4>
 8010dee:	6823      	ldr	r3, [r4, #0]
 8010df0:	68e5      	ldr	r5, [r4, #12]
 8010df2:	6832      	ldr	r2, [r6, #0]
 8010df4:	f003 0306 	and.w	r3, r3, #6
 8010df8:	2b04      	cmp	r3, #4
 8010dfa:	bf08      	it	eq
 8010dfc:	1aad      	subeq	r5, r5, r2
 8010dfe:	68a3      	ldr	r3, [r4, #8]
 8010e00:	6922      	ldr	r2, [r4, #16]
 8010e02:	bf0c      	ite	eq
 8010e04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010e08:	2500      	movne	r5, #0
 8010e0a:	4293      	cmp	r3, r2
 8010e0c:	bfc4      	itt	gt
 8010e0e:	1a9b      	subgt	r3, r3, r2
 8010e10:	18ed      	addgt	r5, r5, r3
 8010e12:	2600      	movs	r6, #0
 8010e14:	341a      	adds	r4, #26
 8010e16:	42b5      	cmp	r5, r6
 8010e18:	d11a      	bne.n	8010e50 <_printf_common+0xc8>
 8010e1a:	2000      	movs	r0, #0
 8010e1c:	e008      	b.n	8010e30 <_printf_common+0xa8>
 8010e1e:	2301      	movs	r3, #1
 8010e20:	4652      	mov	r2, sl
 8010e22:	4649      	mov	r1, r9
 8010e24:	4638      	mov	r0, r7
 8010e26:	47c0      	blx	r8
 8010e28:	3001      	adds	r0, #1
 8010e2a:	d103      	bne.n	8010e34 <_printf_common+0xac>
 8010e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e34:	3501      	adds	r5, #1
 8010e36:	e7c6      	b.n	8010dc6 <_printf_common+0x3e>
 8010e38:	18e1      	adds	r1, r4, r3
 8010e3a:	1c5a      	adds	r2, r3, #1
 8010e3c:	2030      	movs	r0, #48	; 0x30
 8010e3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010e42:	4422      	add	r2, r4
 8010e44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010e48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010e4c:	3302      	adds	r3, #2
 8010e4e:	e7c7      	b.n	8010de0 <_printf_common+0x58>
 8010e50:	2301      	movs	r3, #1
 8010e52:	4622      	mov	r2, r4
 8010e54:	4649      	mov	r1, r9
 8010e56:	4638      	mov	r0, r7
 8010e58:	47c0      	blx	r8
 8010e5a:	3001      	adds	r0, #1
 8010e5c:	d0e6      	beq.n	8010e2c <_printf_common+0xa4>
 8010e5e:	3601      	adds	r6, #1
 8010e60:	e7d9      	b.n	8010e16 <_printf_common+0x8e>
	...

08010e64 <_printf_i>:
 8010e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010e68:	7e0f      	ldrb	r7, [r1, #24]
 8010e6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010e6c:	2f78      	cmp	r7, #120	; 0x78
 8010e6e:	4691      	mov	r9, r2
 8010e70:	4680      	mov	r8, r0
 8010e72:	460c      	mov	r4, r1
 8010e74:	469a      	mov	sl, r3
 8010e76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010e7a:	d807      	bhi.n	8010e8c <_printf_i+0x28>
 8010e7c:	2f62      	cmp	r7, #98	; 0x62
 8010e7e:	d80a      	bhi.n	8010e96 <_printf_i+0x32>
 8010e80:	2f00      	cmp	r7, #0
 8010e82:	f000 80d8 	beq.w	8011036 <_printf_i+0x1d2>
 8010e86:	2f58      	cmp	r7, #88	; 0x58
 8010e88:	f000 80a3 	beq.w	8010fd2 <_printf_i+0x16e>
 8010e8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010e94:	e03a      	b.n	8010f0c <_printf_i+0xa8>
 8010e96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010e9a:	2b15      	cmp	r3, #21
 8010e9c:	d8f6      	bhi.n	8010e8c <_printf_i+0x28>
 8010e9e:	a101      	add	r1, pc, #4	; (adr r1, 8010ea4 <_printf_i+0x40>)
 8010ea0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010ea4:	08010efd 	.word	0x08010efd
 8010ea8:	08010f11 	.word	0x08010f11
 8010eac:	08010e8d 	.word	0x08010e8d
 8010eb0:	08010e8d 	.word	0x08010e8d
 8010eb4:	08010e8d 	.word	0x08010e8d
 8010eb8:	08010e8d 	.word	0x08010e8d
 8010ebc:	08010f11 	.word	0x08010f11
 8010ec0:	08010e8d 	.word	0x08010e8d
 8010ec4:	08010e8d 	.word	0x08010e8d
 8010ec8:	08010e8d 	.word	0x08010e8d
 8010ecc:	08010e8d 	.word	0x08010e8d
 8010ed0:	0801101d 	.word	0x0801101d
 8010ed4:	08010f41 	.word	0x08010f41
 8010ed8:	08010fff 	.word	0x08010fff
 8010edc:	08010e8d 	.word	0x08010e8d
 8010ee0:	08010e8d 	.word	0x08010e8d
 8010ee4:	0801103f 	.word	0x0801103f
 8010ee8:	08010e8d 	.word	0x08010e8d
 8010eec:	08010f41 	.word	0x08010f41
 8010ef0:	08010e8d 	.word	0x08010e8d
 8010ef4:	08010e8d 	.word	0x08010e8d
 8010ef8:	08011007 	.word	0x08011007
 8010efc:	682b      	ldr	r3, [r5, #0]
 8010efe:	1d1a      	adds	r2, r3, #4
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	602a      	str	r2, [r5, #0]
 8010f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010f0c:	2301      	movs	r3, #1
 8010f0e:	e0a3      	b.n	8011058 <_printf_i+0x1f4>
 8010f10:	6820      	ldr	r0, [r4, #0]
 8010f12:	6829      	ldr	r1, [r5, #0]
 8010f14:	0606      	lsls	r6, r0, #24
 8010f16:	f101 0304 	add.w	r3, r1, #4
 8010f1a:	d50a      	bpl.n	8010f32 <_printf_i+0xce>
 8010f1c:	680e      	ldr	r6, [r1, #0]
 8010f1e:	602b      	str	r3, [r5, #0]
 8010f20:	2e00      	cmp	r6, #0
 8010f22:	da03      	bge.n	8010f2c <_printf_i+0xc8>
 8010f24:	232d      	movs	r3, #45	; 0x2d
 8010f26:	4276      	negs	r6, r6
 8010f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f2c:	485e      	ldr	r0, [pc, #376]	; (80110a8 <_printf_i+0x244>)
 8010f2e:	230a      	movs	r3, #10
 8010f30:	e019      	b.n	8010f66 <_printf_i+0x102>
 8010f32:	680e      	ldr	r6, [r1, #0]
 8010f34:	602b      	str	r3, [r5, #0]
 8010f36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010f3a:	bf18      	it	ne
 8010f3c:	b236      	sxthne	r6, r6
 8010f3e:	e7ef      	b.n	8010f20 <_printf_i+0xbc>
 8010f40:	682b      	ldr	r3, [r5, #0]
 8010f42:	6820      	ldr	r0, [r4, #0]
 8010f44:	1d19      	adds	r1, r3, #4
 8010f46:	6029      	str	r1, [r5, #0]
 8010f48:	0601      	lsls	r1, r0, #24
 8010f4a:	d501      	bpl.n	8010f50 <_printf_i+0xec>
 8010f4c:	681e      	ldr	r6, [r3, #0]
 8010f4e:	e002      	b.n	8010f56 <_printf_i+0xf2>
 8010f50:	0646      	lsls	r6, r0, #25
 8010f52:	d5fb      	bpl.n	8010f4c <_printf_i+0xe8>
 8010f54:	881e      	ldrh	r6, [r3, #0]
 8010f56:	4854      	ldr	r0, [pc, #336]	; (80110a8 <_printf_i+0x244>)
 8010f58:	2f6f      	cmp	r7, #111	; 0x6f
 8010f5a:	bf0c      	ite	eq
 8010f5c:	2308      	moveq	r3, #8
 8010f5e:	230a      	movne	r3, #10
 8010f60:	2100      	movs	r1, #0
 8010f62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010f66:	6865      	ldr	r5, [r4, #4]
 8010f68:	60a5      	str	r5, [r4, #8]
 8010f6a:	2d00      	cmp	r5, #0
 8010f6c:	bfa2      	ittt	ge
 8010f6e:	6821      	ldrge	r1, [r4, #0]
 8010f70:	f021 0104 	bicge.w	r1, r1, #4
 8010f74:	6021      	strge	r1, [r4, #0]
 8010f76:	b90e      	cbnz	r6, 8010f7c <_printf_i+0x118>
 8010f78:	2d00      	cmp	r5, #0
 8010f7a:	d04d      	beq.n	8011018 <_printf_i+0x1b4>
 8010f7c:	4615      	mov	r5, r2
 8010f7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010f82:	fb03 6711 	mls	r7, r3, r1, r6
 8010f86:	5dc7      	ldrb	r7, [r0, r7]
 8010f88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010f8c:	4637      	mov	r7, r6
 8010f8e:	42bb      	cmp	r3, r7
 8010f90:	460e      	mov	r6, r1
 8010f92:	d9f4      	bls.n	8010f7e <_printf_i+0x11a>
 8010f94:	2b08      	cmp	r3, #8
 8010f96:	d10b      	bne.n	8010fb0 <_printf_i+0x14c>
 8010f98:	6823      	ldr	r3, [r4, #0]
 8010f9a:	07de      	lsls	r6, r3, #31
 8010f9c:	d508      	bpl.n	8010fb0 <_printf_i+0x14c>
 8010f9e:	6923      	ldr	r3, [r4, #16]
 8010fa0:	6861      	ldr	r1, [r4, #4]
 8010fa2:	4299      	cmp	r1, r3
 8010fa4:	bfde      	ittt	le
 8010fa6:	2330      	movle	r3, #48	; 0x30
 8010fa8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010fac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010fb0:	1b52      	subs	r2, r2, r5
 8010fb2:	6122      	str	r2, [r4, #16]
 8010fb4:	f8cd a000 	str.w	sl, [sp]
 8010fb8:	464b      	mov	r3, r9
 8010fba:	aa03      	add	r2, sp, #12
 8010fbc:	4621      	mov	r1, r4
 8010fbe:	4640      	mov	r0, r8
 8010fc0:	f7ff fee2 	bl	8010d88 <_printf_common>
 8010fc4:	3001      	adds	r0, #1
 8010fc6:	d14c      	bne.n	8011062 <_printf_i+0x1fe>
 8010fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8010fcc:	b004      	add	sp, #16
 8010fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fd2:	4835      	ldr	r0, [pc, #212]	; (80110a8 <_printf_i+0x244>)
 8010fd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010fd8:	6829      	ldr	r1, [r5, #0]
 8010fda:	6823      	ldr	r3, [r4, #0]
 8010fdc:	f851 6b04 	ldr.w	r6, [r1], #4
 8010fe0:	6029      	str	r1, [r5, #0]
 8010fe2:	061d      	lsls	r5, r3, #24
 8010fe4:	d514      	bpl.n	8011010 <_printf_i+0x1ac>
 8010fe6:	07df      	lsls	r7, r3, #31
 8010fe8:	bf44      	itt	mi
 8010fea:	f043 0320 	orrmi.w	r3, r3, #32
 8010fee:	6023      	strmi	r3, [r4, #0]
 8010ff0:	b91e      	cbnz	r6, 8010ffa <_printf_i+0x196>
 8010ff2:	6823      	ldr	r3, [r4, #0]
 8010ff4:	f023 0320 	bic.w	r3, r3, #32
 8010ff8:	6023      	str	r3, [r4, #0]
 8010ffa:	2310      	movs	r3, #16
 8010ffc:	e7b0      	b.n	8010f60 <_printf_i+0xfc>
 8010ffe:	6823      	ldr	r3, [r4, #0]
 8011000:	f043 0320 	orr.w	r3, r3, #32
 8011004:	6023      	str	r3, [r4, #0]
 8011006:	2378      	movs	r3, #120	; 0x78
 8011008:	4828      	ldr	r0, [pc, #160]	; (80110ac <_printf_i+0x248>)
 801100a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801100e:	e7e3      	b.n	8010fd8 <_printf_i+0x174>
 8011010:	0659      	lsls	r1, r3, #25
 8011012:	bf48      	it	mi
 8011014:	b2b6      	uxthmi	r6, r6
 8011016:	e7e6      	b.n	8010fe6 <_printf_i+0x182>
 8011018:	4615      	mov	r5, r2
 801101a:	e7bb      	b.n	8010f94 <_printf_i+0x130>
 801101c:	682b      	ldr	r3, [r5, #0]
 801101e:	6826      	ldr	r6, [r4, #0]
 8011020:	6961      	ldr	r1, [r4, #20]
 8011022:	1d18      	adds	r0, r3, #4
 8011024:	6028      	str	r0, [r5, #0]
 8011026:	0635      	lsls	r5, r6, #24
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	d501      	bpl.n	8011030 <_printf_i+0x1cc>
 801102c:	6019      	str	r1, [r3, #0]
 801102e:	e002      	b.n	8011036 <_printf_i+0x1d2>
 8011030:	0670      	lsls	r0, r6, #25
 8011032:	d5fb      	bpl.n	801102c <_printf_i+0x1c8>
 8011034:	8019      	strh	r1, [r3, #0]
 8011036:	2300      	movs	r3, #0
 8011038:	6123      	str	r3, [r4, #16]
 801103a:	4615      	mov	r5, r2
 801103c:	e7ba      	b.n	8010fb4 <_printf_i+0x150>
 801103e:	682b      	ldr	r3, [r5, #0]
 8011040:	1d1a      	adds	r2, r3, #4
 8011042:	602a      	str	r2, [r5, #0]
 8011044:	681d      	ldr	r5, [r3, #0]
 8011046:	6862      	ldr	r2, [r4, #4]
 8011048:	2100      	movs	r1, #0
 801104a:	4628      	mov	r0, r5
 801104c:	f7ef f8d0 	bl	80001f0 <memchr>
 8011050:	b108      	cbz	r0, 8011056 <_printf_i+0x1f2>
 8011052:	1b40      	subs	r0, r0, r5
 8011054:	6060      	str	r0, [r4, #4]
 8011056:	6863      	ldr	r3, [r4, #4]
 8011058:	6123      	str	r3, [r4, #16]
 801105a:	2300      	movs	r3, #0
 801105c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011060:	e7a8      	b.n	8010fb4 <_printf_i+0x150>
 8011062:	6923      	ldr	r3, [r4, #16]
 8011064:	462a      	mov	r2, r5
 8011066:	4649      	mov	r1, r9
 8011068:	4640      	mov	r0, r8
 801106a:	47d0      	blx	sl
 801106c:	3001      	adds	r0, #1
 801106e:	d0ab      	beq.n	8010fc8 <_printf_i+0x164>
 8011070:	6823      	ldr	r3, [r4, #0]
 8011072:	079b      	lsls	r3, r3, #30
 8011074:	d413      	bmi.n	801109e <_printf_i+0x23a>
 8011076:	68e0      	ldr	r0, [r4, #12]
 8011078:	9b03      	ldr	r3, [sp, #12]
 801107a:	4298      	cmp	r0, r3
 801107c:	bfb8      	it	lt
 801107e:	4618      	movlt	r0, r3
 8011080:	e7a4      	b.n	8010fcc <_printf_i+0x168>
 8011082:	2301      	movs	r3, #1
 8011084:	4632      	mov	r2, r6
 8011086:	4649      	mov	r1, r9
 8011088:	4640      	mov	r0, r8
 801108a:	47d0      	blx	sl
 801108c:	3001      	adds	r0, #1
 801108e:	d09b      	beq.n	8010fc8 <_printf_i+0x164>
 8011090:	3501      	adds	r5, #1
 8011092:	68e3      	ldr	r3, [r4, #12]
 8011094:	9903      	ldr	r1, [sp, #12]
 8011096:	1a5b      	subs	r3, r3, r1
 8011098:	42ab      	cmp	r3, r5
 801109a:	dcf2      	bgt.n	8011082 <_printf_i+0x21e>
 801109c:	e7eb      	b.n	8011076 <_printf_i+0x212>
 801109e:	2500      	movs	r5, #0
 80110a0:	f104 0619 	add.w	r6, r4, #25
 80110a4:	e7f5      	b.n	8011092 <_printf_i+0x22e>
 80110a6:	bf00      	nop
 80110a8:	08014dc2 	.word	0x08014dc2
 80110ac:	08014dd3 	.word	0x08014dd3

080110b0 <iprintf>:
 80110b0:	b40f      	push	{r0, r1, r2, r3}
 80110b2:	4b0a      	ldr	r3, [pc, #40]	; (80110dc <iprintf+0x2c>)
 80110b4:	b513      	push	{r0, r1, r4, lr}
 80110b6:	681c      	ldr	r4, [r3, #0]
 80110b8:	b124      	cbz	r4, 80110c4 <iprintf+0x14>
 80110ba:	69a3      	ldr	r3, [r4, #24]
 80110bc:	b913      	cbnz	r3, 80110c4 <iprintf+0x14>
 80110be:	4620      	mov	r0, r4
 80110c0:	f7ff fa02 	bl	80104c8 <__sinit>
 80110c4:	ab05      	add	r3, sp, #20
 80110c6:	9a04      	ldr	r2, [sp, #16]
 80110c8:	68a1      	ldr	r1, [r4, #8]
 80110ca:	9301      	str	r3, [sp, #4]
 80110cc:	4620      	mov	r0, r4
 80110ce:	f002 f803 	bl	80130d8 <_vfiprintf_r>
 80110d2:	b002      	add	sp, #8
 80110d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110d8:	b004      	add	sp, #16
 80110da:	4770      	bx	lr
 80110dc:	20000114 	.word	0x20000114

080110e0 <_puts_r>:
 80110e0:	b570      	push	{r4, r5, r6, lr}
 80110e2:	460e      	mov	r6, r1
 80110e4:	4605      	mov	r5, r0
 80110e6:	b118      	cbz	r0, 80110f0 <_puts_r+0x10>
 80110e8:	6983      	ldr	r3, [r0, #24]
 80110ea:	b90b      	cbnz	r3, 80110f0 <_puts_r+0x10>
 80110ec:	f7ff f9ec 	bl	80104c8 <__sinit>
 80110f0:	69ab      	ldr	r3, [r5, #24]
 80110f2:	68ac      	ldr	r4, [r5, #8]
 80110f4:	b913      	cbnz	r3, 80110fc <_puts_r+0x1c>
 80110f6:	4628      	mov	r0, r5
 80110f8:	f7ff f9e6 	bl	80104c8 <__sinit>
 80110fc:	4b2c      	ldr	r3, [pc, #176]	; (80111b0 <_puts_r+0xd0>)
 80110fe:	429c      	cmp	r4, r3
 8011100:	d120      	bne.n	8011144 <_puts_r+0x64>
 8011102:	686c      	ldr	r4, [r5, #4]
 8011104:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011106:	07db      	lsls	r3, r3, #31
 8011108:	d405      	bmi.n	8011116 <_puts_r+0x36>
 801110a:	89a3      	ldrh	r3, [r4, #12]
 801110c:	0598      	lsls	r0, r3, #22
 801110e:	d402      	bmi.n	8011116 <_puts_r+0x36>
 8011110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011112:	f7ff fa9c 	bl	801064e <__retarget_lock_acquire_recursive>
 8011116:	89a3      	ldrh	r3, [r4, #12]
 8011118:	0719      	lsls	r1, r3, #28
 801111a:	d51d      	bpl.n	8011158 <_puts_r+0x78>
 801111c:	6923      	ldr	r3, [r4, #16]
 801111e:	b1db      	cbz	r3, 8011158 <_puts_r+0x78>
 8011120:	3e01      	subs	r6, #1
 8011122:	68a3      	ldr	r3, [r4, #8]
 8011124:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011128:	3b01      	subs	r3, #1
 801112a:	60a3      	str	r3, [r4, #8]
 801112c:	bb39      	cbnz	r1, 801117e <_puts_r+0x9e>
 801112e:	2b00      	cmp	r3, #0
 8011130:	da38      	bge.n	80111a4 <_puts_r+0xc4>
 8011132:	4622      	mov	r2, r4
 8011134:	210a      	movs	r1, #10
 8011136:	4628      	mov	r0, r5
 8011138:	f000 f9b2 	bl	80114a0 <__swbuf_r>
 801113c:	3001      	adds	r0, #1
 801113e:	d011      	beq.n	8011164 <_puts_r+0x84>
 8011140:	250a      	movs	r5, #10
 8011142:	e011      	b.n	8011168 <_puts_r+0x88>
 8011144:	4b1b      	ldr	r3, [pc, #108]	; (80111b4 <_puts_r+0xd4>)
 8011146:	429c      	cmp	r4, r3
 8011148:	d101      	bne.n	801114e <_puts_r+0x6e>
 801114a:	68ac      	ldr	r4, [r5, #8]
 801114c:	e7da      	b.n	8011104 <_puts_r+0x24>
 801114e:	4b1a      	ldr	r3, [pc, #104]	; (80111b8 <_puts_r+0xd8>)
 8011150:	429c      	cmp	r4, r3
 8011152:	bf08      	it	eq
 8011154:	68ec      	ldreq	r4, [r5, #12]
 8011156:	e7d5      	b.n	8011104 <_puts_r+0x24>
 8011158:	4621      	mov	r1, r4
 801115a:	4628      	mov	r0, r5
 801115c:	f000 fa04 	bl	8011568 <__swsetup_r>
 8011160:	2800      	cmp	r0, #0
 8011162:	d0dd      	beq.n	8011120 <_puts_r+0x40>
 8011164:	f04f 35ff 	mov.w	r5, #4294967295
 8011168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801116a:	07da      	lsls	r2, r3, #31
 801116c:	d405      	bmi.n	801117a <_puts_r+0x9a>
 801116e:	89a3      	ldrh	r3, [r4, #12]
 8011170:	059b      	lsls	r3, r3, #22
 8011172:	d402      	bmi.n	801117a <_puts_r+0x9a>
 8011174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011176:	f7ff fa6b 	bl	8010650 <__retarget_lock_release_recursive>
 801117a:	4628      	mov	r0, r5
 801117c:	bd70      	pop	{r4, r5, r6, pc}
 801117e:	2b00      	cmp	r3, #0
 8011180:	da04      	bge.n	801118c <_puts_r+0xac>
 8011182:	69a2      	ldr	r2, [r4, #24]
 8011184:	429a      	cmp	r2, r3
 8011186:	dc06      	bgt.n	8011196 <_puts_r+0xb6>
 8011188:	290a      	cmp	r1, #10
 801118a:	d004      	beq.n	8011196 <_puts_r+0xb6>
 801118c:	6823      	ldr	r3, [r4, #0]
 801118e:	1c5a      	adds	r2, r3, #1
 8011190:	6022      	str	r2, [r4, #0]
 8011192:	7019      	strb	r1, [r3, #0]
 8011194:	e7c5      	b.n	8011122 <_puts_r+0x42>
 8011196:	4622      	mov	r2, r4
 8011198:	4628      	mov	r0, r5
 801119a:	f000 f981 	bl	80114a0 <__swbuf_r>
 801119e:	3001      	adds	r0, #1
 80111a0:	d1bf      	bne.n	8011122 <_puts_r+0x42>
 80111a2:	e7df      	b.n	8011164 <_puts_r+0x84>
 80111a4:	6823      	ldr	r3, [r4, #0]
 80111a6:	250a      	movs	r5, #10
 80111a8:	1c5a      	adds	r2, r3, #1
 80111aa:	6022      	str	r2, [r4, #0]
 80111ac:	701d      	strb	r5, [r3, #0]
 80111ae:	e7db      	b.n	8011168 <_puts_r+0x88>
 80111b0:	08014d6c 	.word	0x08014d6c
 80111b4:	08014d8c 	.word	0x08014d8c
 80111b8:	08014d4c 	.word	0x08014d4c

080111bc <puts>:
 80111bc:	4b02      	ldr	r3, [pc, #8]	; (80111c8 <puts+0xc>)
 80111be:	4601      	mov	r1, r0
 80111c0:	6818      	ldr	r0, [r3, #0]
 80111c2:	f7ff bf8d 	b.w	80110e0 <_puts_r>
 80111c6:	bf00      	nop
 80111c8:	20000114 	.word	0x20000114

080111cc <cleanup_glue>:
 80111cc:	b538      	push	{r3, r4, r5, lr}
 80111ce:	460c      	mov	r4, r1
 80111d0:	6809      	ldr	r1, [r1, #0]
 80111d2:	4605      	mov	r5, r0
 80111d4:	b109      	cbz	r1, 80111da <cleanup_glue+0xe>
 80111d6:	f7ff fff9 	bl	80111cc <cleanup_glue>
 80111da:	4621      	mov	r1, r4
 80111dc:	4628      	mov	r0, r5
 80111de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111e2:	f001 bda7 	b.w	8012d34 <_free_r>
	...

080111e8 <_reclaim_reent>:
 80111e8:	4b2c      	ldr	r3, [pc, #176]	; (801129c <_reclaim_reent+0xb4>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	4283      	cmp	r3, r0
 80111ee:	b570      	push	{r4, r5, r6, lr}
 80111f0:	4604      	mov	r4, r0
 80111f2:	d051      	beq.n	8011298 <_reclaim_reent+0xb0>
 80111f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80111f6:	b143      	cbz	r3, 801120a <_reclaim_reent+0x22>
 80111f8:	68db      	ldr	r3, [r3, #12]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d14a      	bne.n	8011294 <_reclaim_reent+0xac>
 80111fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011200:	6819      	ldr	r1, [r3, #0]
 8011202:	b111      	cbz	r1, 801120a <_reclaim_reent+0x22>
 8011204:	4620      	mov	r0, r4
 8011206:	f001 fd95 	bl	8012d34 <_free_r>
 801120a:	6961      	ldr	r1, [r4, #20]
 801120c:	b111      	cbz	r1, 8011214 <_reclaim_reent+0x2c>
 801120e:	4620      	mov	r0, r4
 8011210:	f001 fd90 	bl	8012d34 <_free_r>
 8011214:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011216:	b111      	cbz	r1, 801121e <_reclaim_reent+0x36>
 8011218:	4620      	mov	r0, r4
 801121a:	f001 fd8b 	bl	8012d34 <_free_r>
 801121e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011220:	b111      	cbz	r1, 8011228 <_reclaim_reent+0x40>
 8011222:	4620      	mov	r0, r4
 8011224:	f001 fd86 	bl	8012d34 <_free_r>
 8011228:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801122a:	b111      	cbz	r1, 8011232 <_reclaim_reent+0x4a>
 801122c:	4620      	mov	r0, r4
 801122e:	f001 fd81 	bl	8012d34 <_free_r>
 8011232:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011234:	b111      	cbz	r1, 801123c <_reclaim_reent+0x54>
 8011236:	4620      	mov	r0, r4
 8011238:	f001 fd7c 	bl	8012d34 <_free_r>
 801123c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801123e:	b111      	cbz	r1, 8011246 <_reclaim_reent+0x5e>
 8011240:	4620      	mov	r0, r4
 8011242:	f001 fd77 	bl	8012d34 <_free_r>
 8011246:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011248:	b111      	cbz	r1, 8011250 <_reclaim_reent+0x68>
 801124a:	4620      	mov	r0, r4
 801124c:	f001 fd72 	bl	8012d34 <_free_r>
 8011250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011252:	b111      	cbz	r1, 801125a <_reclaim_reent+0x72>
 8011254:	4620      	mov	r0, r4
 8011256:	f001 fd6d 	bl	8012d34 <_free_r>
 801125a:	69a3      	ldr	r3, [r4, #24]
 801125c:	b1e3      	cbz	r3, 8011298 <_reclaim_reent+0xb0>
 801125e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011260:	4620      	mov	r0, r4
 8011262:	4798      	blx	r3
 8011264:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011266:	b1b9      	cbz	r1, 8011298 <_reclaim_reent+0xb0>
 8011268:	4620      	mov	r0, r4
 801126a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801126e:	f7ff bfad 	b.w	80111cc <cleanup_glue>
 8011272:	5949      	ldr	r1, [r1, r5]
 8011274:	b941      	cbnz	r1, 8011288 <_reclaim_reent+0xa0>
 8011276:	3504      	adds	r5, #4
 8011278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801127a:	2d80      	cmp	r5, #128	; 0x80
 801127c:	68d9      	ldr	r1, [r3, #12]
 801127e:	d1f8      	bne.n	8011272 <_reclaim_reent+0x8a>
 8011280:	4620      	mov	r0, r4
 8011282:	f001 fd57 	bl	8012d34 <_free_r>
 8011286:	e7ba      	b.n	80111fe <_reclaim_reent+0x16>
 8011288:	680e      	ldr	r6, [r1, #0]
 801128a:	4620      	mov	r0, r4
 801128c:	f001 fd52 	bl	8012d34 <_free_r>
 8011290:	4631      	mov	r1, r6
 8011292:	e7ef      	b.n	8011274 <_reclaim_reent+0x8c>
 8011294:	2500      	movs	r5, #0
 8011296:	e7ef      	b.n	8011278 <_reclaim_reent+0x90>
 8011298:	bd70      	pop	{r4, r5, r6, pc}
 801129a:	bf00      	nop
 801129c:	20000114 	.word	0x20000114

080112a0 <_sbrk_r>:
 80112a0:	b538      	push	{r3, r4, r5, lr}
 80112a2:	4d06      	ldr	r5, [pc, #24]	; (80112bc <_sbrk_r+0x1c>)
 80112a4:	2300      	movs	r3, #0
 80112a6:	4604      	mov	r4, r0
 80112a8:	4608      	mov	r0, r1
 80112aa:	602b      	str	r3, [r5, #0]
 80112ac:	f7f3 fc54 	bl	8004b58 <_sbrk>
 80112b0:	1c43      	adds	r3, r0, #1
 80112b2:	d102      	bne.n	80112ba <_sbrk_r+0x1a>
 80112b4:	682b      	ldr	r3, [r5, #0]
 80112b6:	b103      	cbz	r3, 80112ba <_sbrk_r+0x1a>
 80112b8:	6023      	str	r3, [r4, #0]
 80112ba:	bd38      	pop	{r3, r4, r5, pc}
 80112bc:	20005e44 	.word	0x20005e44

080112c0 <siprintf>:
 80112c0:	b40e      	push	{r1, r2, r3}
 80112c2:	b500      	push	{lr}
 80112c4:	b09c      	sub	sp, #112	; 0x70
 80112c6:	ab1d      	add	r3, sp, #116	; 0x74
 80112c8:	9002      	str	r0, [sp, #8]
 80112ca:	9006      	str	r0, [sp, #24]
 80112cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80112d0:	4809      	ldr	r0, [pc, #36]	; (80112f8 <siprintf+0x38>)
 80112d2:	9107      	str	r1, [sp, #28]
 80112d4:	9104      	str	r1, [sp, #16]
 80112d6:	4909      	ldr	r1, [pc, #36]	; (80112fc <siprintf+0x3c>)
 80112d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80112dc:	9105      	str	r1, [sp, #20]
 80112de:	6800      	ldr	r0, [r0, #0]
 80112e0:	9301      	str	r3, [sp, #4]
 80112e2:	a902      	add	r1, sp, #8
 80112e4:	f001 fdce 	bl	8012e84 <_svfiprintf_r>
 80112e8:	9b02      	ldr	r3, [sp, #8]
 80112ea:	2200      	movs	r2, #0
 80112ec:	701a      	strb	r2, [r3, #0]
 80112ee:	b01c      	add	sp, #112	; 0x70
 80112f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80112f4:	b003      	add	sp, #12
 80112f6:	4770      	bx	lr
 80112f8:	20000114 	.word	0x20000114
 80112fc:	ffff0208 	.word	0xffff0208

08011300 <__sread>:
 8011300:	b510      	push	{r4, lr}
 8011302:	460c      	mov	r4, r1
 8011304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011308:	f002 f816 	bl	8013338 <_read_r>
 801130c:	2800      	cmp	r0, #0
 801130e:	bfab      	itete	ge
 8011310:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011312:	89a3      	ldrhlt	r3, [r4, #12]
 8011314:	181b      	addge	r3, r3, r0
 8011316:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801131a:	bfac      	ite	ge
 801131c:	6563      	strge	r3, [r4, #84]	; 0x54
 801131e:	81a3      	strhlt	r3, [r4, #12]
 8011320:	bd10      	pop	{r4, pc}

08011322 <__swrite>:
 8011322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011326:	461f      	mov	r7, r3
 8011328:	898b      	ldrh	r3, [r1, #12]
 801132a:	05db      	lsls	r3, r3, #23
 801132c:	4605      	mov	r5, r0
 801132e:	460c      	mov	r4, r1
 8011330:	4616      	mov	r6, r2
 8011332:	d505      	bpl.n	8011340 <__swrite+0x1e>
 8011334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011338:	2302      	movs	r3, #2
 801133a:	2200      	movs	r2, #0
 801133c:	f001 f8d4 	bl	80124e8 <_lseek_r>
 8011340:	89a3      	ldrh	r3, [r4, #12]
 8011342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011346:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801134a:	81a3      	strh	r3, [r4, #12]
 801134c:	4632      	mov	r2, r6
 801134e:	463b      	mov	r3, r7
 8011350:	4628      	mov	r0, r5
 8011352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011356:	f000 b8f5 	b.w	8011544 <_write_r>

0801135a <__sseek>:
 801135a:	b510      	push	{r4, lr}
 801135c:	460c      	mov	r4, r1
 801135e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011362:	f001 f8c1 	bl	80124e8 <_lseek_r>
 8011366:	1c43      	adds	r3, r0, #1
 8011368:	89a3      	ldrh	r3, [r4, #12]
 801136a:	bf15      	itete	ne
 801136c:	6560      	strne	r0, [r4, #84]	; 0x54
 801136e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011372:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011376:	81a3      	strheq	r3, [r4, #12]
 8011378:	bf18      	it	ne
 801137a:	81a3      	strhne	r3, [r4, #12]
 801137c:	bd10      	pop	{r4, pc}

0801137e <__sclose>:
 801137e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011382:	f000 b95f 	b.w	8011644 <_close_r>
	...

08011388 <_strtol_l.constprop.0>:
 8011388:	2b01      	cmp	r3, #1
 801138a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801138e:	d001      	beq.n	8011394 <_strtol_l.constprop.0+0xc>
 8011390:	2b24      	cmp	r3, #36	; 0x24
 8011392:	d906      	bls.n	80113a2 <_strtol_l.constprop.0+0x1a>
 8011394:	f7ff f83a 	bl	801040c <__errno>
 8011398:	2316      	movs	r3, #22
 801139a:	6003      	str	r3, [r0, #0]
 801139c:	2000      	movs	r0, #0
 801139e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011488 <_strtol_l.constprop.0+0x100>
 80113a6:	460d      	mov	r5, r1
 80113a8:	462e      	mov	r6, r5
 80113aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80113ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 80113b2:	f017 0708 	ands.w	r7, r7, #8
 80113b6:	d1f7      	bne.n	80113a8 <_strtol_l.constprop.0+0x20>
 80113b8:	2c2d      	cmp	r4, #45	; 0x2d
 80113ba:	d132      	bne.n	8011422 <_strtol_l.constprop.0+0x9a>
 80113bc:	782c      	ldrb	r4, [r5, #0]
 80113be:	2701      	movs	r7, #1
 80113c0:	1cb5      	adds	r5, r6, #2
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d05b      	beq.n	801147e <_strtol_l.constprop.0+0xf6>
 80113c6:	2b10      	cmp	r3, #16
 80113c8:	d109      	bne.n	80113de <_strtol_l.constprop.0+0x56>
 80113ca:	2c30      	cmp	r4, #48	; 0x30
 80113cc:	d107      	bne.n	80113de <_strtol_l.constprop.0+0x56>
 80113ce:	782c      	ldrb	r4, [r5, #0]
 80113d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80113d4:	2c58      	cmp	r4, #88	; 0x58
 80113d6:	d14d      	bne.n	8011474 <_strtol_l.constprop.0+0xec>
 80113d8:	786c      	ldrb	r4, [r5, #1]
 80113da:	2310      	movs	r3, #16
 80113dc:	3502      	adds	r5, #2
 80113de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80113e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80113e6:	f04f 0c00 	mov.w	ip, #0
 80113ea:	fbb8 f9f3 	udiv	r9, r8, r3
 80113ee:	4666      	mov	r6, ip
 80113f0:	fb03 8a19 	mls	sl, r3, r9, r8
 80113f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80113f8:	f1be 0f09 	cmp.w	lr, #9
 80113fc:	d816      	bhi.n	801142c <_strtol_l.constprop.0+0xa4>
 80113fe:	4674      	mov	r4, lr
 8011400:	42a3      	cmp	r3, r4
 8011402:	dd24      	ble.n	801144e <_strtol_l.constprop.0+0xc6>
 8011404:	f1bc 0f00 	cmp.w	ip, #0
 8011408:	db1e      	blt.n	8011448 <_strtol_l.constprop.0+0xc0>
 801140a:	45b1      	cmp	r9, r6
 801140c:	d31c      	bcc.n	8011448 <_strtol_l.constprop.0+0xc0>
 801140e:	d101      	bne.n	8011414 <_strtol_l.constprop.0+0x8c>
 8011410:	45a2      	cmp	sl, r4
 8011412:	db19      	blt.n	8011448 <_strtol_l.constprop.0+0xc0>
 8011414:	fb06 4603 	mla	r6, r6, r3, r4
 8011418:	f04f 0c01 	mov.w	ip, #1
 801141c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011420:	e7e8      	b.n	80113f4 <_strtol_l.constprop.0+0x6c>
 8011422:	2c2b      	cmp	r4, #43	; 0x2b
 8011424:	bf04      	itt	eq
 8011426:	782c      	ldrbeq	r4, [r5, #0]
 8011428:	1cb5      	addeq	r5, r6, #2
 801142a:	e7ca      	b.n	80113c2 <_strtol_l.constprop.0+0x3a>
 801142c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011430:	f1be 0f19 	cmp.w	lr, #25
 8011434:	d801      	bhi.n	801143a <_strtol_l.constprop.0+0xb2>
 8011436:	3c37      	subs	r4, #55	; 0x37
 8011438:	e7e2      	b.n	8011400 <_strtol_l.constprop.0+0x78>
 801143a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801143e:	f1be 0f19 	cmp.w	lr, #25
 8011442:	d804      	bhi.n	801144e <_strtol_l.constprop.0+0xc6>
 8011444:	3c57      	subs	r4, #87	; 0x57
 8011446:	e7db      	b.n	8011400 <_strtol_l.constprop.0+0x78>
 8011448:	f04f 3cff 	mov.w	ip, #4294967295
 801144c:	e7e6      	b.n	801141c <_strtol_l.constprop.0+0x94>
 801144e:	f1bc 0f00 	cmp.w	ip, #0
 8011452:	da05      	bge.n	8011460 <_strtol_l.constprop.0+0xd8>
 8011454:	2322      	movs	r3, #34	; 0x22
 8011456:	6003      	str	r3, [r0, #0]
 8011458:	4646      	mov	r6, r8
 801145a:	b942      	cbnz	r2, 801146e <_strtol_l.constprop.0+0xe6>
 801145c:	4630      	mov	r0, r6
 801145e:	e79e      	b.n	801139e <_strtol_l.constprop.0+0x16>
 8011460:	b107      	cbz	r7, 8011464 <_strtol_l.constprop.0+0xdc>
 8011462:	4276      	negs	r6, r6
 8011464:	2a00      	cmp	r2, #0
 8011466:	d0f9      	beq.n	801145c <_strtol_l.constprop.0+0xd4>
 8011468:	f1bc 0f00 	cmp.w	ip, #0
 801146c:	d000      	beq.n	8011470 <_strtol_l.constprop.0+0xe8>
 801146e:	1e69      	subs	r1, r5, #1
 8011470:	6011      	str	r1, [r2, #0]
 8011472:	e7f3      	b.n	801145c <_strtol_l.constprop.0+0xd4>
 8011474:	2430      	movs	r4, #48	; 0x30
 8011476:	2b00      	cmp	r3, #0
 8011478:	d1b1      	bne.n	80113de <_strtol_l.constprop.0+0x56>
 801147a:	2308      	movs	r3, #8
 801147c:	e7af      	b.n	80113de <_strtol_l.constprop.0+0x56>
 801147e:	2c30      	cmp	r4, #48	; 0x30
 8011480:	d0a5      	beq.n	80113ce <_strtol_l.constprop.0+0x46>
 8011482:	230a      	movs	r3, #10
 8011484:	e7ab      	b.n	80113de <_strtol_l.constprop.0+0x56>
 8011486:	bf00      	nop
 8011488:	08014de5 	.word	0x08014de5

0801148c <strtol>:
 801148c:	4613      	mov	r3, r2
 801148e:	460a      	mov	r2, r1
 8011490:	4601      	mov	r1, r0
 8011492:	4802      	ldr	r0, [pc, #8]	; (801149c <strtol+0x10>)
 8011494:	6800      	ldr	r0, [r0, #0]
 8011496:	f7ff bf77 	b.w	8011388 <_strtol_l.constprop.0>
 801149a:	bf00      	nop
 801149c:	20000114 	.word	0x20000114

080114a0 <__swbuf_r>:
 80114a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114a2:	460e      	mov	r6, r1
 80114a4:	4614      	mov	r4, r2
 80114a6:	4605      	mov	r5, r0
 80114a8:	b118      	cbz	r0, 80114b2 <__swbuf_r+0x12>
 80114aa:	6983      	ldr	r3, [r0, #24]
 80114ac:	b90b      	cbnz	r3, 80114b2 <__swbuf_r+0x12>
 80114ae:	f7ff f80b 	bl	80104c8 <__sinit>
 80114b2:	4b21      	ldr	r3, [pc, #132]	; (8011538 <__swbuf_r+0x98>)
 80114b4:	429c      	cmp	r4, r3
 80114b6:	d12b      	bne.n	8011510 <__swbuf_r+0x70>
 80114b8:	686c      	ldr	r4, [r5, #4]
 80114ba:	69a3      	ldr	r3, [r4, #24]
 80114bc:	60a3      	str	r3, [r4, #8]
 80114be:	89a3      	ldrh	r3, [r4, #12]
 80114c0:	071a      	lsls	r2, r3, #28
 80114c2:	d52f      	bpl.n	8011524 <__swbuf_r+0x84>
 80114c4:	6923      	ldr	r3, [r4, #16]
 80114c6:	b36b      	cbz	r3, 8011524 <__swbuf_r+0x84>
 80114c8:	6923      	ldr	r3, [r4, #16]
 80114ca:	6820      	ldr	r0, [r4, #0]
 80114cc:	1ac0      	subs	r0, r0, r3
 80114ce:	6963      	ldr	r3, [r4, #20]
 80114d0:	b2f6      	uxtb	r6, r6
 80114d2:	4283      	cmp	r3, r0
 80114d4:	4637      	mov	r7, r6
 80114d6:	dc04      	bgt.n	80114e2 <__swbuf_r+0x42>
 80114d8:	4621      	mov	r1, r4
 80114da:	4628      	mov	r0, r5
 80114dc:	f000 ffc4 	bl	8012468 <_fflush_r>
 80114e0:	bb30      	cbnz	r0, 8011530 <__swbuf_r+0x90>
 80114e2:	68a3      	ldr	r3, [r4, #8]
 80114e4:	3b01      	subs	r3, #1
 80114e6:	60a3      	str	r3, [r4, #8]
 80114e8:	6823      	ldr	r3, [r4, #0]
 80114ea:	1c5a      	adds	r2, r3, #1
 80114ec:	6022      	str	r2, [r4, #0]
 80114ee:	701e      	strb	r6, [r3, #0]
 80114f0:	6963      	ldr	r3, [r4, #20]
 80114f2:	3001      	adds	r0, #1
 80114f4:	4283      	cmp	r3, r0
 80114f6:	d004      	beq.n	8011502 <__swbuf_r+0x62>
 80114f8:	89a3      	ldrh	r3, [r4, #12]
 80114fa:	07db      	lsls	r3, r3, #31
 80114fc:	d506      	bpl.n	801150c <__swbuf_r+0x6c>
 80114fe:	2e0a      	cmp	r6, #10
 8011500:	d104      	bne.n	801150c <__swbuf_r+0x6c>
 8011502:	4621      	mov	r1, r4
 8011504:	4628      	mov	r0, r5
 8011506:	f000 ffaf 	bl	8012468 <_fflush_r>
 801150a:	b988      	cbnz	r0, 8011530 <__swbuf_r+0x90>
 801150c:	4638      	mov	r0, r7
 801150e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011510:	4b0a      	ldr	r3, [pc, #40]	; (801153c <__swbuf_r+0x9c>)
 8011512:	429c      	cmp	r4, r3
 8011514:	d101      	bne.n	801151a <__swbuf_r+0x7a>
 8011516:	68ac      	ldr	r4, [r5, #8]
 8011518:	e7cf      	b.n	80114ba <__swbuf_r+0x1a>
 801151a:	4b09      	ldr	r3, [pc, #36]	; (8011540 <__swbuf_r+0xa0>)
 801151c:	429c      	cmp	r4, r3
 801151e:	bf08      	it	eq
 8011520:	68ec      	ldreq	r4, [r5, #12]
 8011522:	e7ca      	b.n	80114ba <__swbuf_r+0x1a>
 8011524:	4621      	mov	r1, r4
 8011526:	4628      	mov	r0, r5
 8011528:	f000 f81e 	bl	8011568 <__swsetup_r>
 801152c:	2800      	cmp	r0, #0
 801152e:	d0cb      	beq.n	80114c8 <__swbuf_r+0x28>
 8011530:	f04f 37ff 	mov.w	r7, #4294967295
 8011534:	e7ea      	b.n	801150c <__swbuf_r+0x6c>
 8011536:	bf00      	nop
 8011538:	08014d6c 	.word	0x08014d6c
 801153c:	08014d8c 	.word	0x08014d8c
 8011540:	08014d4c 	.word	0x08014d4c

08011544 <_write_r>:
 8011544:	b538      	push	{r3, r4, r5, lr}
 8011546:	4d07      	ldr	r5, [pc, #28]	; (8011564 <_write_r+0x20>)
 8011548:	4604      	mov	r4, r0
 801154a:	4608      	mov	r0, r1
 801154c:	4611      	mov	r1, r2
 801154e:	2200      	movs	r2, #0
 8011550:	602a      	str	r2, [r5, #0]
 8011552:	461a      	mov	r2, r3
 8011554:	f7fe fb2e 	bl	800fbb4 <_write>
 8011558:	1c43      	adds	r3, r0, #1
 801155a:	d102      	bne.n	8011562 <_write_r+0x1e>
 801155c:	682b      	ldr	r3, [r5, #0]
 801155e:	b103      	cbz	r3, 8011562 <_write_r+0x1e>
 8011560:	6023      	str	r3, [r4, #0]
 8011562:	bd38      	pop	{r3, r4, r5, pc}
 8011564:	20005e44 	.word	0x20005e44

08011568 <__swsetup_r>:
 8011568:	4b32      	ldr	r3, [pc, #200]	; (8011634 <__swsetup_r+0xcc>)
 801156a:	b570      	push	{r4, r5, r6, lr}
 801156c:	681d      	ldr	r5, [r3, #0]
 801156e:	4606      	mov	r6, r0
 8011570:	460c      	mov	r4, r1
 8011572:	b125      	cbz	r5, 801157e <__swsetup_r+0x16>
 8011574:	69ab      	ldr	r3, [r5, #24]
 8011576:	b913      	cbnz	r3, 801157e <__swsetup_r+0x16>
 8011578:	4628      	mov	r0, r5
 801157a:	f7fe ffa5 	bl	80104c8 <__sinit>
 801157e:	4b2e      	ldr	r3, [pc, #184]	; (8011638 <__swsetup_r+0xd0>)
 8011580:	429c      	cmp	r4, r3
 8011582:	d10f      	bne.n	80115a4 <__swsetup_r+0x3c>
 8011584:	686c      	ldr	r4, [r5, #4]
 8011586:	89a3      	ldrh	r3, [r4, #12]
 8011588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801158c:	0719      	lsls	r1, r3, #28
 801158e:	d42c      	bmi.n	80115ea <__swsetup_r+0x82>
 8011590:	06dd      	lsls	r5, r3, #27
 8011592:	d411      	bmi.n	80115b8 <__swsetup_r+0x50>
 8011594:	2309      	movs	r3, #9
 8011596:	6033      	str	r3, [r6, #0]
 8011598:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801159c:	81a3      	strh	r3, [r4, #12]
 801159e:	f04f 30ff 	mov.w	r0, #4294967295
 80115a2:	e03e      	b.n	8011622 <__swsetup_r+0xba>
 80115a4:	4b25      	ldr	r3, [pc, #148]	; (801163c <__swsetup_r+0xd4>)
 80115a6:	429c      	cmp	r4, r3
 80115a8:	d101      	bne.n	80115ae <__swsetup_r+0x46>
 80115aa:	68ac      	ldr	r4, [r5, #8]
 80115ac:	e7eb      	b.n	8011586 <__swsetup_r+0x1e>
 80115ae:	4b24      	ldr	r3, [pc, #144]	; (8011640 <__swsetup_r+0xd8>)
 80115b0:	429c      	cmp	r4, r3
 80115b2:	bf08      	it	eq
 80115b4:	68ec      	ldreq	r4, [r5, #12]
 80115b6:	e7e6      	b.n	8011586 <__swsetup_r+0x1e>
 80115b8:	0758      	lsls	r0, r3, #29
 80115ba:	d512      	bpl.n	80115e2 <__swsetup_r+0x7a>
 80115bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80115be:	b141      	cbz	r1, 80115d2 <__swsetup_r+0x6a>
 80115c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80115c4:	4299      	cmp	r1, r3
 80115c6:	d002      	beq.n	80115ce <__swsetup_r+0x66>
 80115c8:	4630      	mov	r0, r6
 80115ca:	f001 fbb3 	bl	8012d34 <_free_r>
 80115ce:	2300      	movs	r3, #0
 80115d0:	6363      	str	r3, [r4, #52]	; 0x34
 80115d2:	89a3      	ldrh	r3, [r4, #12]
 80115d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80115d8:	81a3      	strh	r3, [r4, #12]
 80115da:	2300      	movs	r3, #0
 80115dc:	6063      	str	r3, [r4, #4]
 80115de:	6923      	ldr	r3, [r4, #16]
 80115e0:	6023      	str	r3, [r4, #0]
 80115e2:	89a3      	ldrh	r3, [r4, #12]
 80115e4:	f043 0308 	orr.w	r3, r3, #8
 80115e8:	81a3      	strh	r3, [r4, #12]
 80115ea:	6923      	ldr	r3, [r4, #16]
 80115ec:	b94b      	cbnz	r3, 8011602 <__swsetup_r+0x9a>
 80115ee:	89a3      	ldrh	r3, [r4, #12]
 80115f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80115f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80115f8:	d003      	beq.n	8011602 <__swsetup_r+0x9a>
 80115fa:	4621      	mov	r1, r4
 80115fc:	4630      	mov	r0, r6
 80115fe:	f000 ffab 	bl	8012558 <__smakebuf_r>
 8011602:	89a0      	ldrh	r0, [r4, #12]
 8011604:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011608:	f010 0301 	ands.w	r3, r0, #1
 801160c:	d00a      	beq.n	8011624 <__swsetup_r+0xbc>
 801160e:	2300      	movs	r3, #0
 8011610:	60a3      	str	r3, [r4, #8]
 8011612:	6963      	ldr	r3, [r4, #20]
 8011614:	425b      	negs	r3, r3
 8011616:	61a3      	str	r3, [r4, #24]
 8011618:	6923      	ldr	r3, [r4, #16]
 801161a:	b943      	cbnz	r3, 801162e <__swsetup_r+0xc6>
 801161c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011620:	d1ba      	bne.n	8011598 <__swsetup_r+0x30>
 8011622:	bd70      	pop	{r4, r5, r6, pc}
 8011624:	0781      	lsls	r1, r0, #30
 8011626:	bf58      	it	pl
 8011628:	6963      	ldrpl	r3, [r4, #20]
 801162a:	60a3      	str	r3, [r4, #8]
 801162c:	e7f4      	b.n	8011618 <__swsetup_r+0xb0>
 801162e:	2000      	movs	r0, #0
 8011630:	e7f7      	b.n	8011622 <__swsetup_r+0xba>
 8011632:	bf00      	nop
 8011634:	20000114 	.word	0x20000114
 8011638:	08014d6c 	.word	0x08014d6c
 801163c:	08014d8c 	.word	0x08014d8c
 8011640:	08014d4c 	.word	0x08014d4c

08011644 <_close_r>:
 8011644:	b538      	push	{r3, r4, r5, lr}
 8011646:	4d06      	ldr	r5, [pc, #24]	; (8011660 <_close_r+0x1c>)
 8011648:	2300      	movs	r3, #0
 801164a:	4604      	mov	r4, r0
 801164c:	4608      	mov	r0, r1
 801164e:	602b      	str	r3, [r5, #0]
 8011650:	f7f3 fa4d 	bl	8004aee <_close>
 8011654:	1c43      	adds	r3, r0, #1
 8011656:	d102      	bne.n	801165e <_close_r+0x1a>
 8011658:	682b      	ldr	r3, [r5, #0]
 801165a:	b103      	cbz	r3, 801165e <_close_r+0x1a>
 801165c:	6023      	str	r3, [r4, #0]
 801165e:	bd38      	pop	{r3, r4, r5, pc}
 8011660:	20005e44 	.word	0x20005e44

08011664 <quorem>:
 8011664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011668:	6903      	ldr	r3, [r0, #16]
 801166a:	690c      	ldr	r4, [r1, #16]
 801166c:	42a3      	cmp	r3, r4
 801166e:	4607      	mov	r7, r0
 8011670:	f2c0 8081 	blt.w	8011776 <quorem+0x112>
 8011674:	3c01      	subs	r4, #1
 8011676:	f101 0814 	add.w	r8, r1, #20
 801167a:	f100 0514 	add.w	r5, r0, #20
 801167e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011682:	9301      	str	r3, [sp, #4]
 8011684:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011688:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801168c:	3301      	adds	r3, #1
 801168e:	429a      	cmp	r2, r3
 8011690:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011694:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011698:	fbb2 f6f3 	udiv	r6, r2, r3
 801169c:	d331      	bcc.n	8011702 <quorem+0x9e>
 801169e:	f04f 0e00 	mov.w	lr, #0
 80116a2:	4640      	mov	r0, r8
 80116a4:	46ac      	mov	ip, r5
 80116a6:	46f2      	mov	sl, lr
 80116a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80116ac:	b293      	uxth	r3, r2
 80116ae:	fb06 e303 	mla	r3, r6, r3, lr
 80116b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80116b6:	b29b      	uxth	r3, r3
 80116b8:	ebaa 0303 	sub.w	r3, sl, r3
 80116bc:	f8dc a000 	ldr.w	sl, [ip]
 80116c0:	0c12      	lsrs	r2, r2, #16
 80116c2:	fa13 f38a 	uxtah	r3, r3, sl
 80116c6:	fb06 e202 	mla	r2, r6, r2, lr
 80116ca:	9300      	str	r3, [sp, #0]
 80116cc:	9b00      	ldr	r3, [sp, #0]
 80116ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80116d2:	b292      	uxth	r2, r2
 80116d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80116d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80116dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80116e0:	4581      	cmp	r9, r0
 80116e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80116e6:	f84c 3b04 	str.w	r3, [ip], #4
 80116ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80116ee:	d2db      	bcs.n	80116a8 <quorem+0x44>
 80116f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80116f4:	b92b      	cbnz	r3, 8011702 <quorem+0x9e>
 80116f6:	9b01      	ldr	r3, [sp, #4]
 80116f8:	3b04      	subs	r3, #4
 80116fa:	429d      	cmp	r5, r3
 80116fc:	461a      	mov	r2, r3
 80116fe:	d32e      	bcc.n	801175e <quorem+0xfa>
 8011700:	613c      	str	r4, [r7, #16]
 8011702:	4638      	mov	r0, r7
 8011704:	f001 f9fe 	bl	8012b04 <__mcmp>
 8011708:	2800      	cmp	r0, #0
 801170a:	db24      	blt.n	8011756 <quorem+0xf2>
 801170c:	3601      	adds	r6, #1
 801170e:	4628      	mov	r0, r5
 8011710:	f04f 0c00 	mov.w	ip, #0
 8011714:	f858 2b04 	ldr.w	r2, [r8], #4
 8011718:	f8d0 e000 	ldr.w	lr, [r0]
 801171c:	b293      	uxth	r3, r2
 801171e:	ebac 0303 	sub.w	r3, ip, r3
 8011722:	0c12      	lsrs	r2, r2, #16
 8011724:	fa13 f38e 	uxtah	r3, r3, lr
 8011728:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801172c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011730:	b29b      	uxth	r3, r3
 8011732:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011736:	45c1      	cmp	r9, r8
 8011738:	f840 3b04 	str.w	r3, [r0], #4
 801173c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011740:	d2e8      	bcs.n	8011714 <quorem+0xb0>
 8011742:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011746:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801174a:	b922      	cbnz	r2, 8011756 <quorem+0xf2>
 801174c:	3b04      	subs	r3, #4
 801174e:	429d      	cmp	r5, r3
 8011750:	461a      	mov	r2, r3
 8011752:	d30a      	bcc.n	801176a <quorem+0x106>
 8011754:	613c      	str	r4, [r7, #16]
 8011756:	4630      	mov	r0, r6
 8011758:	b003      	add	sp, #12
 801175a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801175e:	6812      	ldr	r2, [r2, #0]
 8011760:	3b04      	subs	r3, #4
 8011762:	2a00      	cmp	r2, #0
 8011764:	d1cc      	bne.n	8011700 <quorem+0x9c>
 8011766:	3c01      	subs	r4, #1
 8011768:	e7c7      	b.n	80116fa <quorem+0x96>
 801176a:	6812      	ldr	r2, [r2, #0]
 801176c:	3b04      	subs	r3, #4
 801176e:	2a00      	cmp	r2, #0
 8011770:	d1f0      	bne.n	8011754 <quorem+0xf0>
 8011772:	3c01      	subs	r4, #1
 8011774:	e7eb      	b.n	801174e <quorem+0xea>
 8011776:	2000      	movs	r0, #0
 8011778:	e7ee      	b.n	8011758 <quorem+0xf4>
 801177a:	0000      	movs	r0, r0
 801177c:	0000      	movs	r0, r0
	...

08011780 <_dtoa_r>:
 8011780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011784:	ed2d 8b04 	vpush	{d8-d9}
 8011788:	ec57 6b10 	vmov	r6, r7, d0
 801178c:	b093      	sub	sp, #76	; 0x4c
 801178e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011790:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011794:	9106      	str	r1, [sp, #24]
 8011796:	ee10 aa10 	vmov	sl, s0
 801179a:	4604      	mov	r4, r0
 801179c:	9209      	str	r2, [sp, #36]	; 0x24
 801179e:	930c      	str	r3, [sp, #48]	; 0x30
 80117a0:	46bb      	mov	fp, r7
 80117a2:	b975      	cbnz	r5, 80117c2 <_dtoa_r+0x42>
 80117a4:	2010      	movs	r0, #16
 80117a6:	f000 ff17 	bl	80125d8 <malloc>
 80117aa:	4602      	mov	r2, r0
 80117ac:	6260      	str	r0, [r4, #36]	; 0x24
 80117ae:	b920      	cbnz	r0, 80117ba <_dtoa_r+0x3a>
 80117b0:	4ba7      	ldr	r3, [pc, #668]	; (8011a50 <_dtoa_r+0x2d0>)
 80117b2:	21ea      	movs	r1, #234	; 0xea
 80117b4:	48a7      	ldr	r0, [pc, #668]	; (8011a54 <_dtoa_r+0x2d4>)
 80117b6:	f001 fdd1 	bl	801335c <__assert_func>
 80117ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80117be:	6005      	str	r5, [r0, #0]
 80117c0:	60c5      	str	r5, [r0, #12]
 80117c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80117c4:	6819      	ldr	r1, [r3, #0]
 80117c6:	b151      	cbz	r1, 80117de <_dtoa_r+0x5e>
 80117c8:	685a      	ldr	r2, [r3, #4]
 80117ca:	604a      	str	r2, [r1, #4]
 80117cc:	2301      	movs	r3, #1
 80117ce:	4093      	lsls	r3, r2
 80117d0:	608b      	str	r3, [r1, #8]
 80117d2:	4620      	mov	r0, r4
 80117d4:	f000 ff54 	bl	8012680 <_Bfree>
 80117d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80117da:	2200      	movs	r2, #0
 80117dc:	601a      	str	r2, [r3, #0]
 80117de:	1e3b      	subs	r3, r7, #0
 80117e0:	bfaa      	itet	ge
 80117e2:	2300      	movge	r3, #0
 80117e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80117e8:	f8c8 3000 	strge.w	r3, [r8]
 80117ec:	4b9a      	ldr	r3, [pc, #616]	; (8011a58 <_dtoa_r+0x2d8>)
 80117ee:	bfbc      	itt	lt
 80117f0:	2201      	movlt	r2, #1
 80117f2:	f8c8 2000 	strlt.w	r2, [r8]
 80117f6:	ea33 030b 	bics.w	r3, r3, fp
 80117fa:	d11b      	bne.n	8011834 <_dtoa_r+0xb4>
 80117fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80117fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8011802:	6013      	str	r3, [r2, #0]
 8011804:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011808:	4333      	orrs	r3, r6
 801180a:	f000 8592 	beq.w	8012332 <_dtoa_r+0xbb2>
 801180e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011810:	b963      	cbnz	r3, 801182c <_dtoa_r+0xac>
 8011812:	4b92      	ldr	r3, [pc, #584]	; (8011a5c <_dtoa_r+0x2dc>)
 8011814:	e022      	b.n	801185c <_dtoa_r+0xdc>
 8011816:	4b92      	ldr	r3, [pc, #584]	; (8011a60 <_dtoa_r+0x2e0>)
 8011818:	9301      	str	r3, [sp, #4]
 801181a:	3308      	adds	r3, #8
 801181c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801181e:	6013      	str	r3, [r2, #0]
 8011820:	9801      	ldr	r0, [sp, #4]
 8011822:	b013      	add	sp, #76	; 0x4c
 8011824:	ecbd 8b04 	vpop	{d8-d9}
 8011828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801182c:	4b8b      	ldr	r3, [pc, #556]	; (8011a5c <_dtoa_r+0x2dc>)
 801182e:	9301      	str	r3, [sp, #4]
 8011830:	3303      	adds	r3, #3
 8011832:	e7f3      	b.n	801181c <_dtoa_r+0x9c>
 8011834:	2200      	movs	r2, #0
 8011836:	2300      	movs	r3, #0
 8011838:	4650      	mov	r0, sl
 801183a:	4659      	mov	r1, fp
 801183c:	f7ef f94c 	bl	8000ad8 <__aeabi_dcmpeq>
 8011840:	ec4b ab19 	vmov	d9, sl, fp
 8011844:	4680      	mov	r8, r0
 8011846:	b158      	cbz	r0, 8011860 <_dtoa_r+0xe0>
 8011848:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801184a:	2301      	movs	r3, #1
 801184c:	6013      	str	r3, [r2, #0]
 801184e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011850:	2b00      	cmp	r3, #0
 8011852:	f000 856b 	beq.w	801232c <_dtoa_r+0xbac>
 8011856:	4883      	ldr	r0, [pc, #524]	; (8011a64 <_dtoa_r+0x2e4>)
 8011858:	6018      	str	r0, [r3, #0]
 801185a:	1e43      	subs	r3, r0, #1
 801185c:	9301      	str	r3, [sp, #4]
 801185e:	e7df      	b.n	8011820 <_dtoa_r+0xa0>
 8011860:	ec4b ab10 	vmov	d0, sl, fp
 8011864:	aa10      	add	r2, sp, #64	; 0x40
 8011866:	a911      	add	r1, sp, #68	; 0x44
 8011868:	4620      	mov	r0, r4
 801186a:	f001 f9f1 	bl	8012c50 <__d2b>
 801186e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011872:	ee08 0a10 	vmov	s16, r0
 8011876:	2d00      	cmp	r5, #0
 8011878:	f000 8084 	beq.w	8011984 <_dtoa_r+0x204>
 801187c:	ee19 3a90 	vmov	r3, s19
 8011880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011884:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011888:	4656      	mov	r6, sl
 801188a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801188e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011892:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011896:	4b74      	ldr	r3, [pc, #464]	; (8011a68 <_dtoa_r+0x2e8>)
 8011898:	2200      	movs	r2, #0
 801189a:	4630      	mov	r0, r6
 801189c:	4639      	mov	r1, r7
 801189e:	f7ee fcfb 	bl	8000298 <__aeabi_dsub>
 80118a2:	a365      	add	r3, pc, #404	; (adr r3, 8011a38 <_dtoa_r+0x2b8>)
 80118a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a8:	f7ee feae 	bl	8000608 <__aeabi_dmul>
 80118ac:	a364      	add	r3, pc, #400	; (adr r3, 8011a40 <_dtoa_r+0x2c0>)
 80118ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b2:	f7ee fcf3 	bl	800029c <__adddf3>
 80118b6:	4606      	mov	r6, r0
 80118b8:	4628      	mov	r0, r5
 80118ba:	460f      	mov	r7, r1
 80118bc:	f7ee fe3a 	bl	8000534 <__aeabi_i2d>
 80118c0:	a361      	add	r3, pc, #388	; (adr r3, 8011a48 <_dtoa_r+0x2c8>)
 80118c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c6:	f7ee fe9f 	bl	8000608 <__aeabi_dmul>
 80118ca:	4602      	mov	r2, r0
 80118cc:	460b      	mov	r3, r1
 80118ce:	4630      	mov	r0, r6
 80118d0:	4639      	mov	r1, r7
 80118d2:	f7ee fce3 	bl	800029c <__adddf3>
 80118d6:	4606      	mov	r6, r0
 80118d8:	460f      	mov	r7, r1
 80118da:	f7ef f945 	bl	8000b68 <__aeabi_d2iz>
 80118de:	2200      	movs	r2, #0
 80118e0:	9000      	str	r0, [sp, #0]
 80118e2:	2300      	movs	r3, #0
 80118e4:	4630      	mov	r0, r6
 80118e6:	4639      	mov	r1, r7
 80118e8:	f7ef f900 	bl	8000aec <__aeabi_dcmplt>
 80118ec:	b150      	cbz	r0, 8011904 <_dtoa_r+0x184>
 80118ee:	9800      	ldr	r0, [sp, #0]
 80118f0:	f7ee fe20 	bl	8000534 <__aeabi_i2d>
 80118f4:	4632      	mov	r2, r6
 80118f6:	463b      	mov	r3, r7
 80118f8:	f7ef f8ee 	bl	8000ad8 <__aeabi_dcmpeq>
 80118fc:	b910      	cbnz	r0, 8011904 <_dtoa_r+0x184>
 80118fe:	9b00      	ldr	r3, [sp, #0]
 8011900:	3b01      	subs	r3, #1
 8011902:	9300      	str	r3, [sp, #0]
 8011904:	9b00      	ldr	r3, [sp, #0]
 8011906:	2b16      	cmp	r3, #22
 8011908:	d85a      	bhi.n	80119c0 <_dtoa_r+0x240>
 801190a:	9a00      	ldr	r2, [sp, #0]
 801190c:	4b57      	ldr	r3, [pc, #348]	; (8011a6c <_dtoa_r+0x2ec>)
 801190e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011916:	ec51 0b19 	vmov	r0, r1, d9
 801191a:	f7ef f8e7 	bl	8000aec <__aeabi_dcmplt>
 801191e:	2800      	cmp	r0, #0
 8011920:	d050      	beq.n	80119c4 <_dtoa_r+0x244>
 8011922:	9b00      	ldr	r3, [sp, #0]
 8011924:	3b01      	subs	r3, #1
 8011926:	9300      	str	r3, [sp, #0]
 8011928:	2300      	movs	r3, #0
 801192a:	930b      	str	r3, [sp, #44]	; 0x2c
 801192c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801192e:	1b5d      	subs	r5, r3, r5
 8011930:	1e6b      	subs	r3, r5, #1
 8011932:	9305      	str	r3, [sp, #20]
 8011934:	bf45      	ittet	mi
 8011936:	f1c5 0301 	rsbmi	r3, r5, #1
 801193a:	9304      	strmi	r3, [sp, #16]
 801193c:	2300      	movpl	r3, #0
 801193e:	2300      	movmi	r3, #0
 8011940:	bf4c      	ite	mi
 8011942:	9305      	strmi	r3, [sp, #20]
 8011944:	9304      	strpl	r3, [sp, #16]
 8011946:	9b00      	ldr	r3, [sp, #0]
 8011948:	2b00      	cmp	r3, #0
 801194a:	db3d      	blt.n	80119c8 <_dtoa_r+0x248>
 801194c:	9b05      	ldr	r3, [sp, #20]
 801194e:	9a00      	ldr	r2, [sp, #0]
 8011950:	920a      	str	r2, [sp, #40]	; 0x28
 8011952:	4413      	add	r3, r2
 8011954:	9305      	str	r3, [sp, #20]
 8011956:	2300      	movs	r3, #0
 8011958:	9307      	str	r3, [sp, #28]
 801195a:	9b06      	ldr	r3, [sp, #24]
 801195c:	2b09      	cmp	r3, #9
 801195e:	f200 8089 	bhi.w	8011a74 <_dtoa_r+0x2f4>
 8011962:	2b05      	cmp	r3, #5
 8011964:	bfc4      	itt	gt
 8011966:	3b04      	subgt	r3, #4
 8011968:	9306      	strgt	r3, [sp, #24]
 801196a:	9b06      	ldr	r3, [sp, #24]
 801196c:	f1a3 0302 	sub.w	r3, r3, #2
 8011970:	bfcc      	ite	gt
 8011972:	2500      	movgt	r5, #0
 8011974:	2501      	movle	r5, #1
 8011976:	2b03      	cmp	r3, #3
 8011978:	f200 8087 	bhi.w	8011a8a <_dtoa_r+0x30a>
 801197c:	e8df f003 	tbb	[pc, r3]
 8011980:	59383a2d 	.word	0x59383a2d
 8011984:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011988:	441d      	add	r5, r3
 801198a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801198e:	2b20      	cmp	r3, #32
 8011990:	bfc1      	itttt	gt
 8011992:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011996:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801199a:	fa0b f303 	lslgt.w	r3, fp, r3
 801199e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80119a2:	bfda      	itte	le
 80119a4:	f1c3 0320 	rsble	r3, r3, #32
 80119a8:	fa06 f003 	lslle.w	r0, r6, r3
 80119ac:	4318      	orrgt	r0, r3
 80119ae:	f7ee fdb1 	bl	8000514 <__aeabi_ui2d>
 80119b2:	2301      	movs	r3, #1
 80119b4:	4606      	mov	r6, r0
 80119b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80119ba:	3d01      	subs	r5, #1
 80119bc:	930e      	str	r3, [sp, #56]	; 0x38
 80119be:	e76a      	b.n	8011896 <_dtoa_r+0x116>
 80119c0:	2301      	movs	r3, #1
 80119c2:	e7b2      	b.n	801192a <_dtoa_r+0x1aa>
 80119c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80119c6:	e7b1      	b.n	801192c <_dtoa_r+0x1ac>
 80119c8:	9b04      	ldr	r3, [sp, #16]
 80119ca:	9a00      	ldr	r2, [sp, #0]
 80119cc:	1a9b      	subs	r3, r3, r2
 80119ce:	9304      	str	r3, [sp, #16]
 80119d0:	4253      	negs	r3, r2
 80119d2:	9307      	str	r3, [sp, #28]
 80119d4:	2300      	movs	r3, #0
 80119d6:	930a      	str	r3, [sp, #40]	; 0x28
 80119d8:	e7bf      	b.n	801195a <_dtoa_r+0x1da>
 80119da:	2300      	movs	r3, #0
 80119dc:	9308      	str	r3, [sp, #32]
 80119de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	dc55      	bgt.n	8011a90 <_dtoa_r+0x310>
 80119e4:	2301      	movs	r3, #1
 80119e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80119ea:	461a      	mov	r2, r3
 80119ec:	9209      	str	r2, [sp, #36]	; 0x24
 80119ee:	e00c      	b.n	8011a0a <_dtoa_r+0x28a>
 80119f0:	2301      	movs	r3, #1
 80119f2:	e7f3      	b.n	80119dc <_dtoa_r+0x25c>
 80119f4:	2300      	movs	r3, #0
 80119f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80119f8:	9308      	str	r3, [sp, #32]
 80119fa:	9b00      	ldr	r3, [sp, #0]
 80119fc:	4413      	add	r3, r2
 80119fe:	9302      	str	r3, [sp, #8]
 8011a00:	3301      	adds	r3, #1
 8011a02:	2b01      	cmp	r3, #1
 8011a04:	9303      	str	r3, [sp, #12]
 8011a06:	bfb8      	it	lt
 8011a08:	2301      	movlt	r3, #1
 8011a0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	6042      	str	r2, [r0, #4]
 8011a10:	2204      	movs	r2, #4
 8011a12:	f102 0614 	add.w	r6, r2, #20
 8011a16:	429e      	cmp	r6, r3
 8011a18:	6841      	ldr	r1, [r0, #4]
 8011a1a:	d93d      	bls.n	8011a98 <_dtoa_r+0x318>
 8011a1c:	4620      	mov	r0, r4
 8011a1e:	f000 fdef 	bl	8012600 <_Balloc>
 8011a22:	9001      	str	r0, [sp, #4]
 8011a24:	2800      	cmp	r0, #0
 8011a26:	d13b      	bne.n	8011aa0 <_dtoa_r+0x320>
 8011a28:	4b11      	ldr	r3, [pc, #68]	; (8011a70 <_dtoa_r+0x2f0>)
 8011a2a:	4602      	mov	r2, r0
 8011a2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011a30:	e6c0      	b.n	80117b4 <_dtoa_r+0x34>
 8011a32:	2301      	movs	r3, #1
 8011a34:	e7df      	b.n	80119f6 <_dtoa_r+0x276>
 8011a36:	bf00      	nop
 8011a38:	636f4361 	.word	0x636f4361
 8011a3c:	3fd287a7 	.word	0x3fd287a7
 8011a40:	8b60c8b3 	.word	0x8b60c8b3
 8011a44:	3fc68a28 	.word	0x3fc68a28
 8011a48:	509f79fb 	.word	0x509f79fb
 8011a4c:	3fd34413 	.word	0x3fd34413
 8011a50:	08014ef2 	.word	0x08014ef2
 8011a54:	08014f09 	.word	0x08014f09
 8011a58:	7ff00000 	.word	0x7ff00000
 8011a5c:	08014eee 	.word	0x08014eee
 8011a60:	08014ee5 	.word	0x08014ee5
 8011a64:	08014dc1 	.word	0x08014dc1
 8011a68:	3ff80000 	.word	0x3ff80000
 8011a6c:	08015000 	.word	0x08015000
 8011a70:	08014f64 	.word	0x08014f64
 8011a74:	2501      	movs	r5, #1
 8011a76:	2300      	movs	r3, #0
 8011a78:	9306      	str	r3, [sp, #24]
 8011a7a:	9508      	str	r5, [sp, #32]
 8011a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8011a80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011a84:	2200      	movs	r2, #0
 8011a86:	2312      	movs	r3, #18
 8011a88:	e7b0      	b.n	80119ec <_dtoa_r+0x26c>
 8011a8a:	2301      	movs	r3, #1
 8011a8c:	9308      	str	r3, [sp, #32]
 8011a8e:	e7f5      	b.n	8011a7c <_dtoa_r+0x2fc>
 8011a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011a96:	e7b8      	b.n	8011a0a <_dtoa_r+0x28a>
 8011a98:	3101      	adds	r1, #1
 8011a9a:	6041      	str	r1, [r0, #4]
 8011a9c:	0052      	lsls	r2, r2, #1
 8011a9e:	e7b8      	b.n	8011a12 <_dtoa_r+0x292>
 8011aa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011aa2:	9a01      	ldr	r2, [sp, #4]
 8011aa4:	601a      	str	r2, [r3, #0]
 8011aa6:	9b03      	ldr	r3, [sp, #12]
 8011aa8:	2b0e      	cmp	r3, #14
 8011aaa:	f200 809d 	bhi.w	8011be8 <_dtoa_r+0x468>
 8011aae:	2d00      	cmp	r5, #0
 8011ab0:	f000 809a 	beq.w	8011be8 <_dtoa_r+0x468>
 8011ab4:	9b00      	ldr	r3, [sp, #0]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	dd32      	ble.n	8011b20 <_dtoa_r+0x3a0>
 8011aba:	4ab7      	ldr	r2, [pc, #732]	; (8011d98 <_dtoa_r+0x618>)
 8011abc:	f003 030f 	and.w	r3, r3, #15
 8011ac0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011ac4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011ac8:	9b00      	ldr	r3, [sp, #0]
 8011aca:	05d8      	lsls	r0, r3, #23
 8011acc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011ad0:	d516      	bpl.n	8011b00 <_dtoa_r+0x380>
 8011ad2:	4bb2      	ldr	r3, [pc, #712]	; (8011d9c <_dtoa_r+0x61c>)
 8011ad4:	ec51 0b19 	vmov	r0, r1, d9
 8011ad8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011adc:	f7ee febe 	bl	800085c <__aeabi_ddiv>
 8011ae0:	f007 070f 	and.w	r7, r7, #15
 8011ae4:	4682      	mov	sl, r0
 8011ae6:	468b      	mov	fp, r1
 8011ae8:	2503      	movs	r5, #3
 8011aea:	4eac      	ldr	r6, [pc, #688]	; (8011d9c <_dtoa_r+0x61c>)
 8011aec:	b957      	cbnz	r7, 8011b04 <_dtoa_r+0x384>
 8011aee:	4642      	mov	r2, r8
 8011af0:	464b      	mov	r3, r9
 8011af2:	4650      	mov	r0, sl
 8011af4:	4659      	mov	r1, fp
 8011af6:	f7ee feb1 	bl	800085c <__aeabi_ddiv>
 8011afa:	4682      	mov	sl, r0
 8011afc:	468b      	mov	fp, r1
 8011afe:	e028      	b.n	8011b52 <_dtoa_r+0x3d2>
 8011b00:	2502      	movs	r5, #2
 8011b02:	e7f2      	b.n	8011aea <_dtoa_r+0x36a>
 8011b04:	07f9      	lsls	r1, r7, #31
 8011b06:	d508      	bpl.n	8011b1a <_dtoa_r+0x39a>
 8011b08:	4640      	mov	r0, r8
 8011b0a:	4649      	mov	r1, r9
 8011b0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011b10:	f7ee fd7a 	bl	8000608 <__aeabi_dmul>
 8011b14:	3501      	adds	r5, #1
 8011b16:	4680      	mov	r8, r0
 8011b18:	4689      	mov	r9, r1
 8011b1a:	107f      	asrs	r7, r7, #1
 8011b1c:	3608      	adds	r6, #8
 8011b1e:	e7e5      	b.n	8011aec <_dtoa_r+0x36c>
 8011b20:	f000 809b 	beq.w	8011c5a <_dtoa_r+0x4da>
 8011b24:	9b00      	ldr	r3, [sp, #0]
 8011b26:	4f9d      	ldr	r7, [pc, #628]	; (8011d9c <_dtoa_r+0x61c>)
 8011b28:	425e      	negs	r6, r3
 8011b2a:	4b9b      	ldr	r3, [pc, #620]	; (8011d98 <_dtoa_r+0x618>)
 8011b2c:	f006 020f 	and.w	r2, r6, #15
 8011b30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b38:	ec51 0b19 	vmov	r0, r1, d9
 8011b3c:	f7ee fd64 	bl	8000608 <__aeabi_dmul>
 8011b40:	1136      	asrs	r6, r6, #4
 8011b42:	4682      	mov	sl, r0
 8011b44:	468b      	mov	fp, r1
 8011b46:	2300      	movs	r3, #0
 8011b48:	2502      	movs	r5, #2
 8011b4a:	2e00      	cmp	r6, #0
 8011b4c:	d17a      	bne.n	8011c44 <_dtoa_r+0x4c4>
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d1d3      	bne.n	8011afa <_dtoa_r+0x37a>
 8011b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	f000 8082 	beq.w	8011c5e <_dtoa_r+0x4de>
 8011b5a:	4b91      	ldr	r3, [pc, #580]	; (8011da0 <_dtoa_r+0x620>)
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	4650      	mov	r0, sl
 8011b60:	4659      	mov	r1, fp
 8011b62:	f7ee ffc3 	bl	8000aec <__aeabi_dcmplt>
 8011b66:	2800      	cmp	r0, #0
 8011b68:	d079      	beq.n	8011c5e <_dtoa_r+0x4de>
 8011b6a:	9b03      	ldr	r3, [sp, #12]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d076      	beq.n	8011c5e <_dtoa_r+0x4de>
 8011b70:	9b02      	ldr	r3, [sp, #8]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	dd36      	ble.n	8011be4 <_dtoa_r+0x464>
 8011b76:	9b00      	ldr	r3, [sp, #0]
 8011b78:	4650      	mov	r0, sl
 8011b7a:	4659      	mov	r1, fp
 8011b7c:	1e5f      	subs	r7, r3, #1
 8011b7e:	2200      	movs	r2, #0
 8011b80:	4b88      	ldr	r3, [pc, #544]	; (8011da4 <_dtoa_r+0x624>)
 8011b82:	f7ee fd41 	bl	8000608 <__aeabi_dmul>
 8011b86:	9e02      	ldr	r6, [sp, #8]
 8011b88:	4682      	mov	sl, r0
 8011b8a:	468b      	mov	fp, r1
 8011b8c:	3501      	adds	r5, #1
 8011b8e:	4628      	mov	r0, r5
 8011b90:	f7ee fcd0 	bl	8000534 <__aeabi_i2d>
 8011b94:	4652      	mov	r2, sl
 8011b96:	465b      	mov	r3, fp
 8011b98:	f7ee fd36 	bl	8000608 <__aeabi_dmul>
 8011b9c:	4b82      	ldr	r3, [pc, #520]	; (8011da8 <_dtoa_r+0x628>)
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	f7ee fb7c 	bl	800029c <__adddf3>
 8011ba4:	46d0      	mov	r8, sl
 8011ba6:	46d9      	mov	r9, fp
 8011ba8:	4682      	mov	sl, r0
 8011baa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011bae:	2e00      	cmp	r6, #0
 8011bb0:	d158      	bne.n	8011c64 <_dtoa_r+0x4e4>
 8011bb2:	4b7e      	ldr	r3, [pc, #504]	; (8011dac <_dtoa_r+0x62c>)
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	4640      	mov	r0, r8
 8011bb8:	4649      	mov	r1, r9
 8011bba:	f7ee fb6d 	bl	8000298 <__aeabi_dsub>
 8011bbe:	4652      	mov	r2, sl
 8011bc0:	465b      	mov	r3, fp
 8011bc2:	4680      	mov	r8, r0
 8011bc4:	4689      	mov	r9, r1
 8011bc6:	f7ee ffaf 	bl	8000b28 <__aeabi_dcmpgt>
 8011bca:	2800      	cmp	r0, #0
 8011bcc:	f040 8295 	bne.w	80120fa <_dtoa_r+0x97a>
 8011bd0:	4652      	mov	r2, sl
 8011bd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011bd6:	4640      	mov	r0, r8
 8011bd8:	4649      	mov	r1, r9
 8011bda:	f7ee ff87 	bl	8000aec <__aeabi_dcmplt>
 8011bde:	2800      	cmp	r0, #0
 8011be0:	f040 8289 	bne.w	80120f6 <_dtoa_r+0x976>
 8011be4:	ec5b ab19 	vmov	sl, fp, d9
 8011be8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	f2c0 8148 	blt.w	8011e80 <_dtoa_r+0x700>
 8011bf0:	9a00      	ldr	r2, [sp, #0]
 8011bf2:	2a0e      	cmp	r2, #14
 8011bf4:	f300 8144 	bgt.w	8011e80 <_dtoa_r+0x700>
 8011bf8:	4b67      	ldr	r3, [pc, #412]	; (8011d98 <_dtoa_r+0x618>)
 8011bfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011bfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	f280 80d5 	bge.w	8011db4 <_dtoa_r+0x634>
 8011c0a:	9b03      	ldr	r3, [sp, #12]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	f300 80d1 	bgt.w	8011db4 <_dtoa_r+0x634>
 8011c12:	f040 826f 	bne.w	80120f4 <_dtoa_r+0x974>
 8011c16:	4b65      	ldr	r3, [pc, #404]	; (8011dac <_dtoa_r+0x62c>)
 8011c18:	2200      	movs	r2, #0
 8011c1a:	4640      	mov	r0, r8
 8011c1c:	4649      	mov	r1, r9
 8011c1e:	f7ee fcf3 	bl	8000608 <__aeabi_dmul>
 8011c22:	4652      	mov	r2, sl
 8011c24:	465b      	mov	r3, fp
 8011c26:	f7ee ff75 	bl	8000b14 <__aeabi_dcmpge>
 8011c2a:	9e03      	ldr	r6, [sp, #12]
 8011c2c:	4637      	mov	r7, r6
 8011c2e:	2800      	cmp	r0, #0
 8011c30:	f040 8245 	bne.w	80120be <_dtoa_r+0x93e>
 8011c34:	9d01      	ldr	r5, [sp, #4]
 8011c36:	2331      	movs	r3, #49	; 0x31
 8011c38:	f805 3b01 	strb.w	r3, [r5], #1
 8011c3c:	9b00      	ldr	r3, [sp, #0]
 8011c3e:	3301      	adds	r3, #1
 8011c40:	9300      	str	r3, [sp, #0]
 8011c42:	e240      	b.n	80120c6 <_dtoa_r+0x946>
 8011c44:	07f2      	lsls	r2, r6, #31
 8011c46:	d505      	bpl.n	8011c54 <_dtoa_r+0x4d4>
 8011c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011c4c:	f7ee fcdc 	bl	8000608 <__aeabi_dmul>
 8011c50:	3501      	adds	r5, #1
 8011c52:	2301      	movs	r3, #1
 8011c54:	1076      	asrs	r6, r6, #1
 8011c56:	3708      	adds	r7, #8
 8011c58:	e777      	b.n	8011b4a <_dtoa_r+0x3ca>
 8011c5a:	2502      	movs	r5, #2
 8011c5c:	e779      	b.n	8011b52 <_dtoa_r+0x3d2>
 8011c5e:	9f00      	ldr	r7, [sp, #0]
 8011c60:	9e03      	ldr	r6, [sp, #12]
 8011c62:	e794      	b.n	8011b8e <_dtoa_r+0x40e>
 8011c64:	9901      	ldr	r1, [sp, #4]
 8011c66:	4b4c      	ldr	r3, [pc, #304]	; (8011d98 <_dtoa_r+0x618>)
 8011c68:	4431      	add	r1, r6
 8011c6a:	910d      	str	r1, [sp, #52]	; 0x34
 8011c6c:	9908      	ldr	r1, [sp, #32]
 8011c6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011c72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011c76:	2900      	cmp	r1, #0
 8011c78:	d043      	beq.n	8011d02 <_dtoa_r+0x582>
 8011c7a:	494d      	ldr	r1, [pc, #308]	; (8011db0 <_dtoa_r+0x630>)
 8011c7c:	2000      	movs	r0, #0
 8011c7e:	f7ee fded 	bl	800085c <__aeabi_ddiv>
 8011c82:	4652      	mov	r2, sl
 8011c84:	465b      	mov	r3, fp
 8011c86:	f7ee fb07 	bl	8000298 <__aeabi_dsub>
 8011c8a:	9d01      	ldr	r5, [sp, #4]
 8011c8c:	4682      	mov	sl, r0
 8011c8e:	468b      	mov	fp, r1
 8011c90:	4649      	mov	r1, r9
 8011c92:	4640      	mov	r0, r8
 8011c94:	f7ee ff68 	bl	8000b68 <__aeabi_d2iz>
 8011c98:	4606      	mov	r6, r0
 8011c9a:	f7ee fc4b 	bl	8000534 <__aeabi_i2d>
 8011c9e:	4602      	mov	r2, r0
 8011ca0:	460b      	mov	r3, r1
 8011ca2:	4640      	mov	r0, r8
 8011ca4:	4649      	mov	r1, r9
 8011ca6:	f7ee faf7 	bl	8000298 <__aeabi_dsub>
 8011caa:	3630      	adds	r6, #48	; 0x30
 8011cac:	f805 6b01 	strb.w	r6, [r5], #1
 8011cb0:	4652      	mov	r2, sl
 8011cb2:	465b      	mov	r3, fp
 8011cb4:	4680      	mov	r8, r0
 8011cb6:	4689      	mov	r9, r1
 8011cb8:	f7ee ff18 	bl	8000aec <__aeabi_dcmplt>
 8011cbc:	2800      	cmp	r0, #0
 8011cbe:	d163      	bne.n	8011d88 <_dtoa_r+0x608>
 8011cc0:	4642      	mov	r2, r8
 8011cc2:	464b      	mov	r3, r9
 8011cc4:	4936      	ldr	r1, [pc, #216]	; (8011da0 <_dtoa_r+0x620>)
 8011cc6:	2000      	movs	r0, #0
 8011cc8:	f7ee fae6 	bl	8000298 <__aeabi_dsub>
 8011ccc:	4652      	mov	r2, sl
 8011cce:	465b      	mov	r3, fp
 8011cd0:	f7ee ff0c 	bl	8000aec <__aeabi_dcmplt>
 8011cd4:	2800      	cmp	r0, #0
 8011cd6:	f040 80b5 	bne.w	8011e44 <_dtoa_r+0x6c4>
 8011cda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011cdc:	429d      	cmp	r5, r3
 8011cde:	d081      	beq.n	8011be4 <_dtoa_r+0x464>
 8011ce0:	4b30      	ldr	r3, [pc, #192]	; (8011da4 <_dtoa_r+0x624>)
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	4650      	mov	r0, sl
 8011ce6:	4659      	mov	r1, fp
 8011ce8:	f7ee fc8e 	bl	8000608 <__aeabi_dmul>
 8011cec:	4b2d      	ldr	r3, [pc, #180]	; (8011da4 <_dtoa_r+0x624>)
 8011cee:	4682      	mov	sl, r0
 8011cf0:	468b      	mov	fp, r1
 8011cf2:	4640      	mov	r0, r8
 8011cf4:	4649      	mov	r1, r9
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	f7ee fc86 	bl	8000608 <__aeabi_dmul>
 8011cfc:	4680      	mov	r8, r0
 8011cfe:	4689      	mov	r9, r1
 8011d00:	e7c6      	b.n	8011c90 <_dtoa_r+0x510>
 8011d02:	4650      	mov	r0, sl
 8011d04:	4659      	mov	r1, fp
 8011d06:	f7ee fc7f 	bl	8000608 <__aeabi_dmul>
 8011d0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d0c:	9d01      	ldr	r5, [sp, #4]
 8011d0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d10:	4682      	mov	sl, r0
 8011d12:	468b      	mov	fp, r1
 8011d14:	4649      	mov	r1, r9
 8011d16:	4640      	mov	r0, r8
 8011d18:	f7ee ff26 	bl	8000b68 <__aeabi_d2iz>
 8011d1c:	4606      	mov	r6, r0
 8011d1e:	f7ee fc09 	bl	8000534 <__aeabi_i2d>
 8011d22:	3630      	adds	r6, #48	; 0x30
 8011d24:	4602      	mov	r2, r0
 8011d26:	460b      	mov	r3, r1
 8011d28:	4640      	mov	r0, r8
 8011d2a:	4649      	mov	r1, r9
 8011d2c:	f7ee fab4 	bl	8000298 <__aeabi_dsub>
 8011d30:	f805 6b01 	strb.w	r6, [r5], #1
 8011d34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d36:	429d      	cmp	r5, r3
 8011d38:	4680      	mov	r8, r0
 8011d3a:	4689      	mov	r9, r1
 8011d3c:	f04f 0200 	mov.w	r2, #0
 8011d40:	d124      	bne.n	8011d8c <_dtoa_r+0x60c>
 8011d42:	4b1b      	ldr	r3, [pc, #108]	; (8011db0 <_dtoa_r+0x630>)
 8011d44:	4650      	mov	r0, sl
 8011d46:	4659      	mov	r1, fp
 8011d48:	f7ee faa8 	bl	800029c <__adddf3>
 8011d4c:	4602      	mov	r2, r0
 8011d4e:	460b      	mov	r3, r1
 8011d50:	4640      	mov	r0, r8
 8011d52:	4649      	mov	r1, r9
 8011d54:	f7ee fee8 	bl	8000b28 <__aeabi_dcmpgt>
 8011d58:	2800      	cmp	r0, #0
 8011d5a:	d173      	bne.n	8011e44 <_dtoa_r+0x6c4>
 8011d5c:	4652      	mov	r2, sl
 8011d5e:	465b      	mov	r3, fp
 8011d60:	4913      	ldr	r1, [pc, #76]	; (8011db0 <_dtoa_r+0x630>)
 8011d62:	2000      	movs	r0, #0
 8011d64:	f7ee fa98 	bl	8000298 <__aeabi_dsub>
 8011d68:	4602      	mov	r2, r0
 8011d6a:	460b      	mov	r3, r1
 8011d6c:	4640      	mov	r0, r8
 8011d6e:	4649      	mov	r1, r9
 8011d70:	f7ee febc 	bl	8000aec <__aeabi_dcmplt>
 8011d74:	2800      	cmp	r0, #0
 8011d76:	f43f af35 	beq.w	8011be4 <_dtoa_r+0x464>
 8011d7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011d7c:	1e6b      	subs	r3, r5, #1
 8011d7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011d84:	2b30      	cmp	r3, #48	; 0x30
 8011d86:	d0f8      	beq.n	8011d7a <_dtoa_r+0x5fa>
 8011d88:	9700      	str	r7, [sp, #0]
 8011d8a:	e049      	b.n	8011e20 <_dtoa_r+0x6a0>
 8011d8c:	4b05      	ldr	r3, [pc, #20]	; (8011da4 <_dtoa_r+0x624>)
 8011d8e:	f7ee fc3b 	bl	8000608 <__aeabi_dmul>
 8011d92:	4680      	mov	r8, r0
 8011d94:	4689      	mov	r9, r1
 8011d96:	e7bd      	b.n	8011d14 <_dtoa_r+0x594>
 8011d98:	08015000 	.word	0x08015000
 8011d9c:	08014fd8 	.word	0x08014fd8
 8011da0:	3ff00000 	.word	0x3ff00000
 8011da4:	40240000 	.word	0x40240000
 8011da8:	401c0000 	.word	0x401c0000
 8011dac:	40140000 	.word	0x40140000
 8011db0:	3fe00000 	.word	0x3fe00000
 8011db4:	9d01      	ldr	r5, [sp, #4]
 8011db6:	4656      	mov	r6, sl
 8011db8:	465f      	mov	r7, fp
 8011dba:	4642      	mov	r2, r8
 8011dbc:	464b      	mov	r3, r9
 8011dbe:	4630      	mov	r0, r6
 8011dc0:	4639      	mov	r1, r7
 8011dc2:	f7ee fd4b 	bl	800085c <__aeabi_ddiv>
 8011dc6:	f7ee fecf 	bl	8000b68 <__aeabi_d2iz>
 8011dca:	4682      	mov	sl, r0
 8011dcc:	f7ee fbb2 	bl	8000534 <__aeabi_i2d>
 8011dd0:	4642      	mov	r2, r8
 8011dd2:	464b      	mov	r3, r9
 8011dd4:	f7ee fc18 	bl	8000608 <__aeabi_dmul>
 8011dd8:	4602      	mov	r2, r0
 8011dda:	460b      	mov	r3, r1
 8011ddc:	4630      	mov	r0, r6
 8011dde:	4639      	mov	r1, r7
 8011de0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011de4:	f7ee fa58 	bl	8000298 <__aeabi_dsub>
 8011de8:	f805 6b01 	strb.w	r6, [r5], #1
 8011dec:	9e01      	ldr	r6, [sp, #4]
 8011dee:	9f03      	ldr	r7, [sp, #12]
 8011df0:	1bae      	subs	r6, r5, r6
 8011df2:	42b7      	cmp	r7, r6
 8011df4:	4602      	mov	r2, r0
 8011df6:	460b      	mov	r3, r1
 8011df8:	d135      	bne.n	8011e66 <_dtoa_r+0x6e6>
 8011dfa:	f7ee fa4f 	bl	800029c <__adddf3>
 8011dfe:	4642      	mov	r2, r8
 8011e00:	464b      	mov	r3, r9
 8011e02:	4606      	mov	r6, r0
 8011e04:	460f      	mov	r7, r1
 8011e06:	f7ee fe8f 	bl	8000b28 <__aeabi_dcmpgt>
 8011e0a:	b9d0      	cbnz	r0, 8011e42 <_dtoa_r+0x6c2>
 8011e0c:	4642      	mov	r2, r8
 8011e0e:	464b      	mov	r3, r9
 8011e10:	4630      	mov	r0, r6
 8011e12:	4639      	mov	r1, r7
 8011e14:	f7ee fe60 	bl	8000ad8 <__aeabi_dcmpeq>
 8011e18:	b110      	cbz	r0, 8011e20 <_dtoa_r+0x6a0>
 8011e1a:	f01a 0f01 	tst.w	sl, #1
 8011e1e:	d110      	bne.n	8011e42 <_dtoa_r+0x6c2>
 8011e20:	4620      	mov	r0, r4
 8011e22:	ee18 1a10 	vmov	r1, s16
 8011e26:	f000 fc2b 	bl	8012680 <_Bfree>
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	9800      	ldr	r0, [sp, #0]
 8011e2e:	702b      	strb	r3, [r5, #0]
 8011e30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e32:	3001      	adds	r0, #1
 8011e34:	6018      	str	r0, [r3, #0]
 8011e36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	f43f acf1 	beq.w	8011820 <_dtoa_r+0xa0>
 8011e3e:	601d      	str	r5, [r3, #0]
 8011e40:	e4ee      	b.n	8011820 <_dtoa_r+0xa0>
 8011e42:	9f00      	ldr	r7, [sp, #0]
 8011e44:	462b      	mov	r3, r5
 8011e46:	461d      	mov	r5, r3
 8011e48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011e4c:	2a39      	cmp	r2, #57	; 0x39
 8011e4e:	d106      	bne.n	8011e5e <_dtoa_r+0x6de>
 8011e50:	9a01      	ldr	r2, [sp, #4]
 8011e52:	429a      	cmp	r2, r3
 8011e54:	d1f7      	bne.n	8011e46 <_dtoa_r+0x6c6>
 8011e56:	9901      	ldr	r1, [sp, #4]
 8011e58:	2230      	movs	r2, #48	; 0x30
 8011e5a:	3701      	adds	r7, #1
 8011e5c:	700a      	strb	r2, [r1, #0]
 8011e5e:	781a      	ldrb	r2, [r3, #0]
 8011e60:	3201      	adds	r2, #1
 8011e62:	701a      	strb	r2, [r3, #0]
 8011e64:	e790      	b.n	8011d88 <_dtoa_r+0x608>
 8011e66:	4ba6      	ldr	r3, [pc, #664]	; (8012100 <_dtoa_r+0x980>)
 8011e68:	2200      	movs	r2, #0
 8011e6a:	f7ee fbcd 	bl	8000608 <__aeabi_dmul>
 8011e6e:	2200      	movs	r2, #0
 8011e70:	2300      	movs	r3, #0
 8011e72:	4606      	mov	r6, r0
 8011e74:	460f      	mov	r7, r1
 8011e76:	f7ee fe2f 	bl	8000ad8 <__aeabi_dcmpeq>
 8011e7a:	2800      	cmp	r0, #0
 8011e7c:	d09d      	beq.n	8011dba <_dtoa_r+0x63a>
 8011e7e:	e7cf      	b.n	8011e20 <_dtoa_r+0x6a0>
 8011e80:	9a08      	ldr	r2, [sp, #32]
 8011e82:	2a00      	cmp	r2, #0
 8011e84:	f000 80d7 	beq.w	8012036 <_dtoa_r+0x8b6>
 8011e88:	9a06      	ldr	r2, [sp, #24]
 8011e8a:	2a01      	cmp	r2, #1
 8011e8c:	f300 80ba 	bgt.w	8012004 <_dtoa_r+0x884>
 8011e90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011e92:	2a00      	cmp	r2, #0
 8011e94:	f000 80b2 	beq.w	8011ffc <_dtoa_r+0x87c>
 8011e98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011e9c:	9e07      	ldr	r6, [sp, #28]
 8011e9e:	9d04      	ldr	r5, [sp, #16]
 8011ea0:	9a04      	ldr	r2, [sp, #16]
 8011ea2:	441a      	add	r2, r3
 8011ea4:	9204      	str	r2, [sp, #16]
 8011ea6:	9a05      	ldr	r2, [sp, #20]
 8011ea8:	2101      	movs	r1, #1
 8011eaa:	441a      	add	r2, r3
 8011eac:	4620      	mov	r0, r4
 8011eae:	9205      	str	r2, [sp, #20]
 8011eb0:	f000 fc9e 	bl	80127f0 <__i2b>
 8011eb4:	4607      	mov	r7, r0
 8011eb6:	2d00      	cmp	r5, #0
 8011eb8:	dd0c      	ble.n	8011ed4 <_dtoa_r+0x754>
 8011eba:	9b05      	ldr	r3, [sp, #20]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	dd09      	ble.n	8011ed4 <_dtoa_r+0x754>
 8011ec0:	42ab      	cmp	r3, r5
 8011ec2:	9a04      	ldr	r2, [sp, #16]
 8011ec4:	bfa8      	it	ge
 8011ec6:	462b      	movge	r3, r5
 8011ec8:	1ad2      	subs	r2, r2, r3
 8011eca:	9204      	str	r2, [sp, #16]
 8011ecc:	9a05      	ldr	r2, [sp, #20]
 8011ece:	1aed      	subs	r5, r5, r3
 8011ed0:	1ad3      	subs	r3, r2, r3
 8011ed2:	9305      	str	r3, [sp, #20]
 8011ed4:	9b07      	ldr	r3, [sp, #28]
 8011ed6:	b31b      	cbz	r3, 8011f20 <_dtoa_r+0x7a0>
 8011ed8:	9b08      	ldr	r3, [sp, #32]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	f000 80af 	beq.w	801203e <_dtoa_r+0x8be>
 8011ee0:	2e00      	cmp	r6, #0
 8011ee2:	dd13      	ble.n	8011f0c <_dtoa_r+0x78c>
 8011ee4:	4639      	mov	r1, r7
 8011ee6:	4632      	mov	r2, r6
 8011ee8:	4620      	mov	r0, r4
 8011eea:	f000 fd41 	bl	8012970 <__pow5mult>
 8011eee:	ee18 2a10 	vmov	r2, s16
 8011ef2:	4601      	mov	r1, r0
 8011ef4:	4607      	mov	r7, r0
 8011ef6:	4620      	mov	r0, r4
 8011ef8:	f000 fc90 	bl	801281c <__multiply>
 8011efc:	ee18 1a10 	vmov	r1, s16
 8011f00:	4680      	mov	r8, r0
 8011f02:	4620      	mov	r0, r4
 8011f04:	f000 fbbc 	bl	8012680 <_Bfree>
 8011f08:	ee08 8a10 	vmov	s16, r8
 8011f0c:	9b07      	ldr	r3, [sp, #28]
 8011f0e:	1b9a      	subs	r2, r3, r6
 8011f10:	d006      	beq.n	8011f20 <_dtoa_r+0x7a0>
 8011f12:	ee18 1a10 	vmov	r1, s16
 8011f16:	4620      	mov	r0, r4
 8011f18:	f000 fd2a 	bl	8012970 <__pow5mult>
 8011f1c:	ee08 0a10 	vmov	s16, r0
 8011f20:	2101      	movs	r1, #1
 8011f22:	4620      	mov	r0, r4
 8011f24:	f000 fc64 	bl	80127f0 <__i2b>
 8011f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	4606      	mov	r6, r0
 8011f2e:	f340 8088 	ble.w	8012042 <_dtoa_r+0x8c2>
 8011f32:	461a      	mov	r2, r3
 8011f34:	4601      	mov	r1, r0
 8011f36:	4620      	mov	r0, r4
 8011f38:	f000 fd1a 	bl	8012970 <__pow5mult>
 8011f3c:	9b06      	ldr	r3, [sp, #24]
 8011f3e:	2b01      	cmp	r3, #1
 8011f40:	4606      	mov	r6, r0
 8011f42:	f340 8081 	ble.w	8012048 <_dtoa_r+0x8c8>
 8011f46:	f04f 0800 	mov.w	r8, #0
 8011f4a:	6933      	ldr	r3, [r6, #16]
 8011f4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011f50:	6918      	ldr	r0, [r3, #16]
 8011f52:	f000 fbfd 	bl	8012750 <__hi0bits>
 8011f56:	f1c0 0020 	rsb	r0, r0, #32
 8011f5a:	9b05      	ldr	r3, [sp, #20]
 8011f5c:	4418      	add	r0, r3
 8011f5e:	f010 001f 	ands.w	r0, r0, #31
 8011f62:	f000 8092 	beq.w	801208a <_dtoa_r+0x90a>
 8011f66:	f1c0 0320 	rsb	r3, r0, #32
 8011f6a:	2b04      	cmp	r3, #4
 8011f6c:	f340 808a 	ble.w	8012084 <_dtoa_r+0x904>
 8011f70:	f1c0 001c 	rsb	r0, r0, #28
 8011f74:	9b04      	ldr	r3, [sp, #16]
 8011f76:	4403      	add	r3, r0
 8011f78:	9304      	str	r3, [sp, #16]
 8011f7a:	9b05      	ldr	r3, [sp, #20]
 8011f7c:	4403      	add	r3, r0
 8011f7e:	4405      	add	r5, r0
 8011f80:	9305      	str	r3, [sp, #20]
 8011f82:	9b04      	ldr	r3, [sp, #16]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	dd07      	ble.n	8011f98 <_dtoa_r+0x818>
 8011f88:	ee18 1a10 	vmov	r1, s16
 8011f8c:	461a      	mov	r2, r3
 8011f8e:	4620      	mov	r0, r4
 8011f90:	f000 fd48 	bl	8012a24 <__lshift>
 8011f94:	ee08 0a10 	vmov	s16, r0
 8011f98:	9b05      	ldr	r3, [sp, #20]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	dd05      	ble.n	8011faa <_dtoa_r+0x82a>
 8011f9e:	4631      	mov	r1, r6
 8011fa0:	461a      	mov	r2, r3
 8011fa2:	4620      	mov	r0, r4
 8011fa4:	f000 fd3e 	bl	8012a24 <__lshift>
 8011fa8:	4606      	mov	r6, r0
 8011faa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d06e      	beq.n	801208e <_dtoa_r+0x90e>
 8011fb0:	ee18 0a10 	vmov	r0, s16
 8011fb4:	4631      	mov	r1, r6
 8011fb6:	f000 fda5 	bl	8012b04 <__mcmp>
 8011fba:	2800      	cmp	r0, #0
 8011fbc:	da67      	bge.n	801208e <_dtoa_r+0x90e>
 8011fbe:	9b00      	ldr	r3, [sp, #0]
 8011fc0:	3b01      	subs	r3, #1
 8011fc2:	ee18 1a10 	vmov	r1, s16
 8011fc6:	9300      	str	r3, [sp, #0]
 8011fc8:	220a      	movs	r2, #10
 8011fca:	2300      	movs	r3, #0
 8011fcc:	4620      	mov	r0, r4
 8011fce:	f000 fb79 	bl	80126c4 <__multadd>
 8011fd2:	9b08      	ldr	r3, [sp, #32]
 8011fd4:	ee08 0a10 	vmov	s16, r0
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	f000 81b1 	beq.w	8012340 <_dtoa_r+0xbc0>
 8011fde:	2300      	movs	r3, #0
 8011fe0:	4639      	mov	r1, r7
 8011fe2:	220a      	movs	r2, #10
 8011fe4:	4620      	mov	r0, r4
 8011fe6:	f000 fb6d 	bl	80126c4 <__multadd>
 8011fea:	9b02      	ldr	r3, [sp, #8]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	4607      	mov	r7, r0
 8011ff0:	f300 808e 	bgt.w	8012110 <_dtoa_r+0x990>
 8011ff4:	9b06      	ldr	r3, [sp, #24]
 8011ff6:	2b02      	cmp	r3, #2
 8011ff8:	dc51      	bgt.n	801209e <_dtoa_r+0x91e>
 8011ffa:	e089      	b.n	8012110 <_dtoa_r+0x990>
 8011ffc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011ffe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012002:	e74b      	b.n	8011e9c <_dtoa_r+0x71c>
 8012004:	9b03      	ldr	r3, [sp, #12]
 8012006:	1e5e      	subs	r6, r3, #1
 8012008:	9b07      	ldr	r3, [sp, #28]
 801200a:	42b3      	cmp	r3, r6
 801200c:	bfbf      	itttt	lt
 801200e:	9b07      	ldrlt	r3, [sp, #28]
 8012010:	9607      	strlt	r6, [sp, #28]
 8012012:	1af2      	sublt	r2, r6, r3
 8012014:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012016:	bfb6      	itet	lt
 8012018:	189b      	addlt	r3, r3, r2
 801201a:	1b9e      	subge	r6, r3, r6
 801201c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801201e:	9b03      	ldr	r3, [sp, #12]
 8012020:	bfb8      	it	lt
 8012022:	2600      	movlt	r6, #0
 8012024:	2b00      	cmp	r3, #0
 8012026:	bfb7      	itett	lt
 8012028:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801202c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8012030:	1a9d      	sublt	r5, r3, r2
 8012032:	2300      	movlt	r3, #0
 8012034:	e734      	b.n	8011ea0 <_dtoa_r+0x720>
 8012036:	9e07      	ldr	r6, [sp, #28]
 8012038:	9d04      	ldr	r5, [sp, #16]
 801203a:	9f08      	ldr	r7, [sp, #32]
 801203c:	e73b      	b.n	8011eb6 <_dtoa_r+0x736>
 801203e:	9a07      	ldr	r2, [sp, #28]
 8012040:	e767      	b.n	8011f12 <_dtoa_r+0x792>
 8012042:	9b06      	ldr	r3, [sp, #24]
 8012044:	2b01      	cmp	r3, #1
 8012046:	dc18      	bgt.n	801207a <_dtoa_r+0x8fa>
 8012048:	f1ba 0f00 	cmp.w	sl, #0
 801204c:	d115      	bne.n	801207a <_dtoa_r+0x8fa>
 801204e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012052:	b993      	cbnz	r3, 801207a <_dtoa_r+0x8fa>
 8012054:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012058:	0d1b      	lsrs	r3, r3, #20
 801205a:	051b      	lsls	r3, r3, #20
 801205c:	b183      	cbz	r3, 8012080 <_dtoa_r+0x900>
 801205e:	9b04      	ldr	r3, [sp, #16]
 8012060:	3301      	adds	r3, #1
 8012062:	9304      	str	r3, [sp, #16]
 8012064:	9b05      	ldr	r3, [sp, #20]
 8012066:	3301      	adds	r3, #1
 8012068:	9305      	str	r3, [sp, #20]
 801206a:	f04f 0801 	mov.w	r8, #1
 801206e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012070:	2b00      	cmp	r3, #0
 8012072:	f47f af6a 	bne.w	8011f4a <_dtoa_r+0x7ca>
 8012076:	2001      	movs	r0, #1
 8012078:	e76f      	b.n	8011f5a <_dtoa_r+0x7da>
 801207a:	f04f 0800 	mov.w	r8, #0
 801207e:	e7f6      	b.n	801206e <_dtoa_r+0x8ee>
 8012080:	4698      	mov	r8, r3
 8012082:	e7f4      	b.n	801206e <_dtoa_r+0x8ee>
 8012084:	f43f af7d 	beq.w	8011f82 <_dtoa_r+0x802>
 8012088:	4618      	mov	r0, r3
 801208a:	301c      	adds	r0, #28
 801208c:	e772      	b.n	8011f74 <_dtoa_r+0x7f4>
 801208e:	9b03      	ldr	r3, [sp, #12]
 8012090:	2b00      	cmp	r3, #0
 8012092:	dc37      	bgt.n	8012104 <_dtoa_r+0x984>
 8012094:	9b06      	ldr	r3, [sp, #24]
 8012096:	2b02      	cmp	r3, #2
 8012098:	dd34      	ble.n	8012104 <_dtoa_r+0x984>
 801209a:	9b03      	ldr	r3, [sp, #12]
 801209c:	9302      	str	r3, [sp, #8]
 801209e:	9b02      	ldr	r3, [sp, #8]
 80120a0:	b96b      	cbnz	r3, 80120be <_dtoa_r+0x93e>
 80120a2:	4631      	mov	r1, r6
 80120a4:	2205      	movs	r2, #5
 80120a6:	4620      	mov	r0, r4
 80120a8:	f000 fb0c 	bl	80126c4 <__multadd>
 80120ac:	4601      	mov	r1, r0
 80120ae:	4606      	mov	r6, r0
 80120b0:	ee18 0a10 	vmov	r0, s16
 80120b4:	f000 fd26 	bl	8012b04 <__mcmp>
 80120b8:	2800      	cmp	r0, #0
 80120ba:	f73f adbb 	bgt.w	8011c34 <_dtoa_r+0x4b4>
 80120be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120c0:	9d01      	ldr	r5, [sp, #4]
 80120c2:	43db      	mvns	r3, r3
 80120c4:	9300      	str	r3, [sp, #0]
 80120c6:	f04f 0800 	mov.w	r8, #0
 80120ca:	4631      	mov	r1, r6
 80120cc:	4620      	mov	r0, r4
 80120ce:	f000 fad7 	bl	8012680 <_Bfree>
 80120d2:	2f00      	cmp	r7, #0
 80120d4:	f43f aea4 	beq.w	8011e20 <_dtoa_r+0x6a0>
 80120d8:	f1b8 0f00 	cmp.w	r8, #0
 80120dc:	d005      	beq.n	80120ea <_dtoa_r+0x96a>
 80120de:	45b8      	cmp	r8, r7
 80120e0:	d003      	beq.n	80120ea <_dtoa_r+0x96a>
 80120e2:	4641      	mov	r1, r8
 80120e4:	4620      	mov	r0, r4
 80120e6:	f000 facb 	bl	8012680 <_Bfree>
 80120ea:	4639      	mov	r1, r7
 80120ec:	4620      	mov	r0, r4
 80120ee:	f000 fac7 	bl	8012680 <_Bfree>
 80120f2:	e695      	b.n	8011e20 <_dtoa_r+0x6a0>
 80120f4:	2600      	movs	r6, #0
 80120f6:	4637      	mov	r7, r6
 80120f8:	e7e1      	b.n	80120be <_dtoa_r+0x93e>
 80120fa:	9700      	str	r7, [sp, #0]
 80120fc:	4637      	mov	r7, r6
 80120fe:	e599      	b.n	8011c34 <_dtoa_r+0x4b4>
 8012100:	40240000 	.word	0x40240000
 8012104:	9b08      	ldr	r3, [sp, #32]
 8012106:	2b00      	cmp	r3, #0
 8012108:	f000 80ca 	beq.w	80122a0 <_dtoa_r+0xb20>
 801210c:	9b03      	ldr	r3, [sp, #12]
 801210e:	9302      	str	r3, [sp, #8]
 8012110:	2d00      	cmp	r5, #0
 8012112:	dd05      	ble.n	8012120 <_dtoa_r+0x9a0>
 8012114:	4639      	mov	r1, r7
 8012116:	462a      	mov	r2, r5
 8012118:	4620      	mov	r0, r4
 801211a:	f000 fc83 	bl	8012a24 <__lshift>
 801211e:	4607      	mov	r7, r0
 8012120:	f1b8 0f00 	cmp.w	r8, #0
 8012124:	d05b      	beq.n	80121de <_dtoa_r+0xa5e>
 8012126:	6879      	ldr	r1, [r7, #4]
 8012128:	4620      	mov	r0, r4
 801212a:	f000 fa69 	bl	8012600 <_Balloc>
 801212e:	4605      	mov	r5, r0
 8012130:	b928      	cbnz	r0, 801213e <_dtoa_r+0x9be>
 8012132:	4b87      	ldr	r3, [pc, #540]	; (8012350 <_dtoa_r+0xbd0>)
 8012134:	4602      	mov	r2, r0
 8012136:	f240 21ea 	movw	r1, #746	; 0x2ea
 801213a:	f7ff bb3b 	b.w	80117b4 <_dtoa_r+0x34>
 801213e:	693a      	ldr	r2, [r7, #16]
 8012140:	3202      	adds	r2, #2
 8012142:	0092      	lsls	r2, r2, #2
 8012144:	f107 010c 	add.w	r1, r7, #12
 8012148:	300c      	adds	r0, #12
 801214a:	f7fe fa82 	bl	8010652 <memcpy>
 801214e:	2201      	movs	r2, #1
 8012150:	4629      	mov	r1, r5
 8012152:	4620      	mov	r0, r4
 8012154:	f000 fc66 	bl	8012a24 <__lshift>
 8012158:	9b01      	ldr	r3, [sp, #4]
 801215a:	f103 0901 	add.w	r9, r3, #1
 801215e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8012162:	4413      	add	r3, r2
 8012164:	9305      	str	r3, [sp, #20]
 8012166:	f00a 0301 	and.w	r3, sl, #1
 801216a:	46b8      	mov	r8, r7
 801216c:	9304      	str	r3, [sp, #16]
 801216e:	4607      	mov	r7, r0
 8012170:	4631      	mov	r1, r6
 8012172:	ee18 0a10 	vmov	r0, s16
 8012176:	f7ff fa75 	bl	8011664 <quorem>
 801217a:	4641      	mov	r1, r8
 801217c:	9002      	str	r0, [sp, #8]
 801217e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012182:	ee18 0a10 	vmov	r0, s16
 8012186:	f000 fcbd 	bl	8012b04 <__mcmp>
 801218a:	463a      	mov	r2, r7
 801218c:	9003      	str	r0, [sp, #12]
 801218e:	4631      	mov	r1, r6
 8012190:	4620      	mov	r0, r4
 8012192:	f000 fcd3 	bl	8012b3c <__mdiff>
 8012196:	68c2      	ldr	r2, [r0, #12]
 8012198:	f109 3bff 	add.w	fp, r9, #4294967295
 801219c:	4605      	mov	r5, r0
 801219e:	bb02      	cbnz	r2, 80121e2 <_dtoa_r+0xa62>
 80121a0:	4601      	mov	r1, r0
 80121a2:	ee18 0a10 	vmov	r0, s16
 80121a6:	f000 fcad 	bl	8012b04 <__mcmp>
 80121aa:	4602      	mov	r2, r0
 80121ac:	4629      	mov	r1, r5
 80121ae:	4620      	mov	r0, r4
 80121b0:	9207      	str	r2, [sp, #28]
 80121b2:	f000 fa65 	bl	8012680 <_Bfree>
 80121b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80121ba:	ea43 0102 	orr.w	r1, r3, r2
 80121be:	9b04      	ldr	r3, [sp, #16]
 80121c0:	430b      	orrs	r3, r1
 80121c2:	464d      	mov	r5, r9
 80121c4:	d10f      	bne.n	80121e6 <_dtoa_r+0xa66>
 80121c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80121ca:	d02a      	beq.n	8012222 <_dtoa_r+0xaa2>
 80121cc:	9b03      	ldr	r3, [sp, #12]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	dd02      	ble.n	80121d8 <_dtoa_r+0xa58>
 80121d2:	9b02      	ldr	r3, [sp, #8]
 80121d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80121d8:	f88b a000 	strb.w	sl, [fp]
 80121dc:	e775      	b.n	80120ca <_dtoa_r+0x94a>
 80121de:	4638      	mov	r0, r7
 80121e0:	e7ba      	b.n	8012158 <_dtoa_r+0x9d8>
 80121e2:	2201      	movs	r2, #1
 80121e4:	e7e2      	b.n	80121ac <_dtoa_r+0xa2c>
 80121e6:	9b03      	ldr	r3, [sp, #12]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	db04      	blt.n	80121f6 <_dtoa_r+0xa76>
 80121ec:	9906      	ldr	r1, [sp, #24]
 80121ee:	430b      	orrs	r3, r1
 80121f0:	9904      	ldr	r1, [sp, #16]
 80121f2:	430b      	orrs	r3, r1
 80121f4:	d122      	bne.n	801223c <_dtoa_r+0xabc>
 80121f6:	2a00      	cmp	r2, #0
 80121f8:	ddee      	ble.n	80121d8 <_dtoa_r+0xa58>
 80121fa:	ee18 1a10 	vmov	r1, s16
 80121fe:	2201      	movs	r2, #1
 8012200:	4620      	mov	r0, r4
 8012202:	f000 fc0f 	bl	8012a24 <__lshift>
 8012206:	4631      	mov	r1, r6
 8012208:	ee08 0a10 	vmov	s16, r0
 801220c:	f000 fc7a 	bl	8012b04 <__mcmp>
 8012210:	2800      	cmp	r0, #0
 8012212:	dc03      	bgt.n	801221c <_dtoa_r+0xa9c>
 8012214:	d1e0      	bne.n	80121d8 <_dtoa_r+0xa58>
 8012216:	f01a 0f01 	tst.w	sl, #1
 801221a:	d0dd      	beq.n	80121d8 <_dtoa_r+0xa58>
 801221c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012220:	d1d7      	bne.n	80121d2 <_dtoa_r+0xa52>
 8012222:	2339      	movs	r3, #57	; 0x39
 8012224:	f88b 3000 	strb.w	r3, [fp]
 8012228:	462b      	mov	r3, r5
 801222a:	461d      	mov	r5, r3
 801222c:	3b01      	subs	r3, #1
 801222e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012232:	2a39      	cmp	r2, #57	; 0x39
 8012234:	d071      	beq.n	801231a <_dtoa_r+0xb9a>
 8012236:	3201      	adds	r2, #1
 8012238:	701a      	strb	r2, [r3, #0]
 801223a:	e746      	b.n	80120ca <_dtoa_r+0x94a>
 801223c:	2a00      	cmp	r2, #0
 801223e:	dd07      	ble.n	8012250 <_dtoa_r+0xad0>
 8012240:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012244:	d0ed      	beq.n	8012222 <_dtoa_r+0xaa2>
 8012246:	f10a 0301 	add.w	r3, sl, #1
 801224a:	f88b 3000 	strb.w	r3, [fp]
 801224e:	e73c      	b.n	80120ca <_dtoa_r+0x94a>
 8012250:	9b05      	ldr	r3, [sp, #20]
 8012252:	f809 ac01 	strb.w	sl, [r9, #-1]
 8012256:	4599      	cmp	r9, r3
 8012258:	d047      	beq.n	80122ea <_dtoa_r+0xb6a>
 801225a:	ee18 1a10 	vmov	r1, s16
 801225e:	2300      	movs	r3, #0
 8012260:	220a      	movs	r2, #10
 8012262:	4620      	mov	r0, r4
 8012264:	f000 fa2e 	bl	80126c4 <__multadd>
 8012268:	45b8      	cmp	r8, r7
 801226a:	ee08 0a10 	vmov	s16, r0
 801226e:	f04f 0300 	mov.w	r3, #0
 8012272:	f04f 020a 	mov.w	r2, #10
 8012276:	4641      	mov	r1, r8
 8012278:	4620      	mov	r0, r4
 801227a:	d106      	bne.n	801228a <_dtoa_r+0xb0a>
 801227c:	f000 fa22 	bl	80126c4 <__multadd>
 8012280:	4680      	mov	r8, r0
 8012282:	4607      	mov	r7, r0
 8012284:	f109 0901 	add.w	r9, r9, #1
 8012288:	e772      	b.n	8012170 <_dtoa_r+0x9f0>
 801228a:	f000 fa1b 	bl	80126c4 <__multadd>
 801228e:	4639      	mov	r1, r7
 8012290:	4680      	mov	r8, r0
 8012292:	2300      	movs	r3, #0
 8012294:	220a      	movs	r2, #10
 8012296:	4620      	mov	r0, r4
 8012298:	f000 fa14 	bl	80126c4 <__multadd>
 801229c:	4607      	mov	r7, r0
 801229e:	e7f1      	b.n	8012284 <_dtoa_r+0xb04>
 80122a0:	9b03      	ldr	r3, [sp, #12]
 80122a2:	9302      	str	r3, [sp, #8]
 80122a4:	9d01      	ldr	r5, [sp, #4]
 80122a6:	ee18 0a10 	vmov	r0, s16
 80122aa:	4631      	mov	r1, r6
 80122ac:	f7ff f9da 	bl	8011664 <quorem>
 80122b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80122b4:	9b01      	ldr	r3, [sp, #4]
 80122b6:	f805 ab01 	strb.w	sl, [r5], #1
 80122ba:	1aea      	subs	r2, r5, r3
 80122bc:	9b02      	ldr	r3, [sp, #8]
 80122be:	4293      	cmp	r3, r2
 80122c0:	dd09      	ble.n	80122d6 <_dtoa_r+0xb56>
 80122c2:	ee18 1a10 	vmov	r1, s16
 80122c6:	2300      	movs	r3, #0
 80122c8:	220a      	movs	r2, #10
 80122ca:	4620      	mov	r0, r4
 80122cc:	f000 f9fa 	bl	80126c4 <__multadd>
 80122d0:	ee08 0a10 	vmov	s16, r0
 80122d4:	e7e7      	b.n	80122a6 <_dtoa_r+0xb26>
 80122d6:	9b02      	ldr	r3, [sp, #8]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	bfc8      	it	gt
 80122dc:	461d      	movgt	r5, r3
 80122de:	9b01      	ldr	r3, [sp, #4]
 80122e0:	bfd8      	it	le
 80122e2:	2501      	movle	r5, #1
 80122e4:	441d      	add	r5, r3
 80122e6:	f04f 0800 	mov.w	r8, #0
 80122ea:	ee18 1a10 	vmov	r1, s16
 80122ee:	2201      	movs	r2, #1
 80122f0:	4620      	mov	r0, r4
 80122f2:	f000 fb97 	bl	8012a24 <__lshift>
 80122f6:	4631      	mov	r1, r6
 80122f8:	ee08 0a10 	vmov	s16, r0
 80122fc:	f000 fc02 	bl	8012b04 <__mcmp>
 8012300:	2800      	cmp	r0, #0
 8012302:	dc91      	bgt.n	8012228 <_dtoa_r+0xaa8>
 8012304:	d102      	bne.n	801230c <_dtoa_r+0xb8c>
 8012306:	f01a 0f01 	tst.w	sl, #1
 801230a:	d18d      	bne.n	8012228 <_dtoa_r+0xaa8>
 801230c:	462b      	mov	r3, r5
 801230e:	461d      	mov	r5, r3
 8012310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012314:	2a30      	cmp	r2, #48	; 0x30
 8012316:	d0fa      	beq.n	801230e <_dtoa_r+0xb8e>
 8012318:	e6d7      	b.n	80120ca <_dtoa_r+0x94a>
 801231a:	9a01      	ldr	r2, [sp, #4]
 801231c:	429a      	cmp	r2, r3
 801231e:	d184      	bne.n	801222a <_dtoa_r+0xaaa>
 8012320:	9b00      	ldr	r3, [sp, #0]
 8012322:	3301      	adds	r3, #1
 8012324:	9300      	str	r3, [sp, #0]
 8012326:	2331      	movs	r3, #49	; 0x31
 8012328:	7013      	strb	r3, [r2, #0]
 801232a:	e6ce      	b.n	80120ca <_dtoa_r+0x94a>
 801232c:	4b09      	ldr	r3, [pc, #36]	; (8012354 <_dtoa_r+0xbd4>)
 801232e:	f7ff ba95 	b.w	801185c <_dtoa_r+0xdc>
 8012332:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012334:	2b00      	cmp	r3, #0
 8012336:	f47f aa6e 	bne.w	8011816 <_dtoa_r+0x96>
 801233a:	4b07      	ldr	r3, [pc, #28]	; (8012358 <_dtoa_r+0xbd8>)
 801233c:	f7ff ba8e 	b.w	801185c <_dtoa_r+0xdc>
 8012340:	9b02      	ldr	r3, [sp, #8]
 8012342:	2b00      	cmp	r3, #0
 8012344:	dcae      	bgt.n	80122a4 <_dtoa_r+0xb24>
 8012346:	9b06      	ldr	r3, [sp, #24]
 8012348:	2b02      	cmp	r3, #2
 801234a:	f73f aea8 	bgt.w	801209e <_dtoa_r+0x91e>
 801234e:	e7a9      	b.n	80122a4 <_dtoa_r+0xb24>
 8012350:	08014f64 	.word	0x08014f64
 8012354:	08014dc0 	.word	0x08014dc0
 8012358:	08014ee5 	.word	0x08014ee5

0801235c <__sflush_r>:
 801235c:	898a      	ldrh	r2, [r1, #12]
 801235e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012362:	4605      	mov	r5, r0
 8012364:	0710      	lsls	r0, r2, #28
 8012366:	460c      	mov	r4, r1
 8012368:	d458      	bmi.n	801241c <__sflush_r+0xc0>
 801236a:	684b      	ldr	r3, [r1, #4]
 801236c:	2b00      	cmp	r3, #0
 801236e:	dc05      	bgt.n	801237c <__sflush_r+0x20>
 8012370:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012372:	2b00      	cmp	r3, #0
 8012374:	dc02      	bgt.n	801237c <__sflush_r+0x20>
 8012376:	2000      	movs	r0, #0
 8012378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801237c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801237e:	2e00      	cmp	r6, #0
 8012380:	d0f9      	beq.n	8012376 <__sflush_r+0x1a>
 8012382:	2300      	movs	r3, #0
 8012384:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012388:	682f      	ldr	r7, [r5, #0]
 801238a:	602b      	str	r3, [r5, #0]
 801238c:	d032      	beq.n	80123f4 <__sflush_r+0x98>
 801238e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012390:	89a3      	ldrh	r3, [r4, #12]
 8012392:	075a      	lsls	r2, r3, #29
 8012394:	d505      	bpl.n	80123a2 <__sflush_r+0x46>
 8012396:	6863      	ldr	r3, [r4, #4]
 8012398:	1ac0      	subs	r0, r0, r3
 801239a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801239c:	b10b      	cbz	r3, 80123a2 <__sflush_r+0x46>
 801239e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80123a0:	1ac0      	subs	r0, r0, r3
 80123a2:	2300      	movs	r3, #0
 80123a4:	4602      	mov	r2, r0
 80123a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80123a8:	6a21      	ldr	r1, [r4, #32]
 80123aa:	4628      	mov	r0, r5
 80123ac:	47b0      	blx	r6
 80123ae:	1c43      	adds	r3, r0, #1
 80123b0:	89a3      	ldrh	r3, [r4, #12]
 80123b2:	d106      	bne.n	80123c2 <__sflush_r+0x66>
 80123b4:	6829      	ldr	r1, [r5, #0]
 80123b6:	291d      	cmp	r1, #29
 80123b8:	d82c      	bhi.n	8012414 <__sflush_r+0xb8>
 80123ba:	4a2a      	ldr	r2, [pc, #168]	; (8012464 <__sflush_r+0x108>)
 80123bc:	40ca      	lsrs	r2, r1
 80123be:	07d6      	lsls	r6, r2, #31
 80123c0:	d528      	bpl.n	8012414 <__sflush_r+0xb8>
 80123c2:	2200      	movs	r2, #0
 80123c4:	6062      	str	r2, [r4, #4]
 80123c6:	04d9      	lsls	r1, r3, #19
 80123c8:	6922      	ldr	r2, [r4, #16]
 80123ca:	6022      	str	r2, [r4, #0]
 80123cc:	d504      	bpl.n	80123d8 <__sflush_r+0x7c>
 80123ce:	1c42      	adds	r2, r0, #1
 80123d0:	d101      	bne.n	80123d6 <__sflush_r+0x7a>
 80123d2:	682b      	ldr	r3, [r5, #0]
 80123d4:	b903      	cbnz	r3, 80123d8 <__sflush_r+0x7c>
 80123d6:	6560      	str	r0, [r4, #84]	; 0x54
 80123d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80123da:	602f      	str	r7, [r5, #0]
 80123dc:	2900      	cmp	r1, #0
 80123de:	d0ca      	beq.n	8012376 <__sflush_r+0x1a>
 80123e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80123e4:	4299      	cmp	r1, r3
 80123e6:	d002      	beq.n	80123ee <__sflush_r+0x92>
 80123e8:	4628      	mov	r0, r5
 80123ea:	f000 fca3 	bl	8012d34 <_free_r>
 80123ee:	2000      	movs	r0, #0
 80123f0:	6360      	str	r0, [r4, #52]	; 0x34
 80123f2:	e7c1      	b.n	8012378 <__sflush_r+0x1c>
 80123f4:	6a21      	ldr	r1, [r4, #32]
 80123f6:	2301      	movs	r3, #1
 80123f8:	4628      	mov	r0, r5
 80123fa:	47b0      	blx	r6
 80123fc:	1c41      	adds	r1, r0, #1
 80123fe:	d1c7      	bne.n	8012390 <__sflush_r+0x34>
 8012400:	682b      	ldr	r3, [r5, #0]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d0c4      	beq.n	8012390 <__sflush_r+0x34>
 8012406:	2b1d      	cmp	r3, #29
 8012408:	d001      	beq.n	801240e <__sflush_r+0xb2>
 801240a:	2b16      	cmp	r3, #22
 801240c:	d101      	bne.n	8012412 <__sflush_r+0xb6>
 801240e:	602f      	str	r7, [r5, #0]
 8012410:	e7b1      	b.n	8012376 <__sflush_r+0x1a>
 8012412:	89a3      	ldrh	r3, [r4, #12]
 8012414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012418:	81a3      	strh	r3, [r4, #12]
 801241a:	e7ad      	b.n	8012378 <__sflush_r+0x1c>
 801241c:	690f      	ldr	r7, [r1, #16]
 801241e:	2f00      	cmp	r7, #0
 8012420:	d0a9      	beq.n	8012376 <__sflush_r+0x1a>
 8012422:	0793      	lsls	r3, r2, #30
 8012424:	680e      	ldr	r6, [r1, #0]
 8012426:	bf08      	it	eq
 8012428:	694b      	ldreq	r3, [r1, #20]
 801242a:	600f      	str	r7, [r1, #0]
 801242c:	bf18      	it	ne
 801242e:	2300      	movne	r3, #0
 8012430:	eba6 0807 	sub.w	r8, r6, r7
 8012434:	608b      	str	r3, [r1, #8]
 8012436:	f1b8 0f00 	cmp.w	r8, #0
 801243a:	dd9c      	ble.n	8012376 <__sflush_r+0x1a>
 801243c:	6a21      	ldr	r1, [r4, #32]
 801243e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012440:	4643      	mov	r3, r8
 8012442:	463a      	mov	r2, r7
 8012444:	4628      	mov	r0, r5
 8012446:	47b0      	blx	r6
 8012448:	2800      	cmp	r0, #0
 801244a:	dc06      	bgt.n	801245a <__sflush_r+0xfe>
 801244c:	89a3      	ldrh	r3, [r4, #12]
 801244e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012452:	81a3      	strh	r3, [r4, #12]
 8012454:	f04f 30ff 	mov.w	r0, #4294967295
 8012458:	e78e      	b.n	8012378 <__sflush_r+0x1c>
 801245a:	4407      	add	r7, r0
 801245c:	eba8 0800 	sub.w	r8, r8, r0
 8012460:	e7e9      	b.n	8012436 <__sflush_r+0xda>
 8012462:	bf00      	nop
 8012464:	20400001 	.word	0x20400001

08012468 <_fflush_r>:
 8012468:	b538      	push	{r3, r4, r5, lr}
 801246a:	690b      	ldr	r3, [r1, #16]
 801246c:	4605      	mov	r5, r0
 801246e:	460c      	mov	r4, r1
 8012470:	b913      	cbnz	r3, 8012478 <_fflush_r+0x10>
 8012472:	2500      	movs	r5, #0
 8012474:	4628      	mov	r0, r5
 8012476:	bd38      	pop	{r3, r4, r5, pc}
 8012478:	b118      	cbz	r0, 8012482 <_fflush_r+0x1a>
 801247a:	6983      	ldr	r3, [r0, #24]
 801247c:	b90b      	cbnz	r3, 8012482 <_fflush_r+0x1a>
 801247e:	f7fe f823 	bl	80104c8 <__sinit>
 8012482:	4b14      	ldr	r3, [pc, #80]	; (80124d4 <_fflush_r+0x6c>)
 8012484:	429c      	cmp	r4, r3
 8012486:	d11b      	bne.n	80124c0 <_fflush_r+0x58>
 8012488:	686c      	ldr	r4, [r5, #4]
 801248a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d0ef      	beq.n	8012472 <_fflush_r+0xa>
 8012492:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012494:	07d0      	lsls	r0, r2, #31
 8012496:	d404      	bmi.n	80124a2 <_fflush_r+0x3a>
 8012498:	0599      	lsls	r1, r3, #22
 801249a:	d402      	bmi.n	80124a2 <_fflush_r+0x3a>
 801249c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801249e:	f7fe f8d6 	bl	801064e <__retarget_lock_acquire_recursive>
 80124a2:	4628      	mov	r0, r5
 80124a4:	4621      	mov	r1, r4
 80124a6:	f7ff ff59 	bl	801235c <__sflush_r>
 80124aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80124ac:	07da      	lsls	r2, r3, #31
 80124ae:	4605      	mov	r5, r0
 80124b0:	d4e0      	bmi.n	8012474 <_fflush_r+0xc>
 80124b2:	89a3      	ldrh	r3, [r4, #12]
 80124b4:	059b      	lsls	r3, r3, #22
 80124b6:	d4dd      	bmi.n	8012474 <_fflush_r+0xc>
 80124b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124ba:	f7fe f8c9 	bl	8010650 <__retarget_lock_release_recursive>
 80124be:	e7d9      	b.n	8012474 <_fflush_r+0xc>
 80124c0:	4b05      	ldr	r3, [pc, #20]	; (80124d8 <_fflush_r+0x70>)
 80124c2:	429c      	cmp	r4, r3
 80124c4:	d101      	bne.n	80124ca <_fflush_r+0x62>
 80124c6:	68ac      	ldr	r4, [r5, #8]
 80124c8:	e7df      	b.n	801248a <_fflush_r+0x22>
 80124ca:	4b04      	ldr	r3, [pc, #16]	; (80124dc <_fflush_r+0x74>)
 80124cc:	429c      	cmp	r4, r3
 80124ce:	bf08      	it	eq
 80124d0:	68ec      	ldreq	r4, [r5, #12]
 80124d2:	e7da      	b.n	801248a <_fflush_r+0x22>
 80124d4:	08014d6c 	.word	0x08014d6c
 80124d8:	08014d8c 	.word	0x08014d8c
 80124dc:	08014d4c 	.word	0x08014d4c

080124e0 <_localeconv_r>:
 80124e0:	4800      	ldr	r0, [pc, #0]	; (80124e4 <_localeconv_r+0x4>)
 80124e2:	4770      	bx	lr
 80124e4:	20000268 	.word	0x20000268

080124e8 <_lseek_r>:
 80124e8:	b538      	push	{r3, r4, r5, lr}
 80124ea:	4d07      	ldr	r5, [pc, #28]	; (8012508 <_lseek_r+0x20>)
 80124ec:	4604      	mov	r4, r0
 80124ee:	4608      	mov	r0, r1
 80124f0:	4611      	mov	r1, r2
 80124f2:	2200      	movs	r2, #0
 80124f4:	602a      	str	r2, [r5, #0]
 80124f6:	461a      	mov	r2, r3
 80124f8:	f7f2 fb20 	bl	8004b3c <_lseek>
 80124fc:	1c43      	adds	r3, r0, #1
 80124fe:	d102      	bne.n	8012506 <_lseek_r+0x1e>
 8012500:	682b      	ldr	r3, [r5, #0]
 8012502:	b103      	cbz	r3, 8012506 <_lseek_r+0x1e>
 8012504:	6023      	str	r3, [r4, #0]
 8012506:	bd38      	pop	{r3, r4, r5, pc}
 8012508:	20005e44 	.word	0x20005e44

0801250c <__swhatbuf_r>:
 801250c:	b570      	push	{r4, r5, r6, lr}
 801250e:	460e      	mov	r6, r1
 8012510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012514:	2900      	cmp	r1, #0
 8012516:	b096      	sub	sp, #88	; 0x58
 8012518:	4614      	mov	r4, r2
 801251a:	461d      	mov	r5, r3
 801251c:	da08      	bge.n	8012530 <__swhatbuf_r+0x24>
 801251e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012522:	2200      	movs	r2, #0
 8012524:	602a      	str	r2, [r5, #0]
 8012526:	061a      	lsls	r2, r3, #24
 8012528:	d410      	bmi.n	801254c <__swhatbuf_r+0x40>
 801252a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801252e:	e00e      	b.n	801254e <__swhatbuf_r+0x42>
 8012530:	466a      	mov	r2, sp
 8012532:	f000 ff43 	bl	80133bc <_fstat_r>
 8012536:	2800      	cmp	r0, #0
 8012538:	dbf1      	blt.n	801251e <__swhatbuf_r+0x12>
 801253a:	9a01      	ldr	r2, [sp, #4]
 801253c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012540:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012544:	425a      	negs	r2, r3
 8012546:	415a      	adcs	r2, r3
 8012548:	602a      	str	r2, [r5, #0]
 801254a:	e7ee      	b.n	801252a <__swhatbuf_r+0x1e>
 801254c:	2340      	movs	r3, #64	; 0x40
 801254e:	2000      	movs	r0, #0
 8012550:	6023      	str	r3, [r4, #0]
 8012552:	b016      	add	sp, #88	; 0x58
 8012554:	bd70      	pop	{r4, r5, r6, pc}
	...

08012558 <__smakebuf_r>:
 8012558:	898b      	ldrh	r3, [r1, #12]
 801255a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801255c:	079d      	lsls	r5, r3, #30
 801255e:	4606      	mov	r6, r0
 8012560:	460c      	mov	r4, r1
 8012562:	d507      	bpl.n	8012574 <__smakebuf_r+0x1c>
 8012564:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012568:	6023      	str	r3, [r4, #0]
 801256a:	6123      	str	r3, [r4, #16]
 801256c:	2301      	movs	r3, #1
 801256e:	6163      	str	r3, [r4, #20]
 8012570:	b002      	add	sp, #8
 8012572:	bd70      	pop	{r4, r5, r6, pc}
 8012574:	ab01      	add	r3, sp, #4
 8012576:	466a      	mov	r2, sp
 8012578:	f7ff ffc8 	bl	801250c <__swhatbuf_r>
 801257c:	9900      	ldr	r1, [sp, #0]
 801257e:	4605      	mov	r5, r0
 8012580:	4630      	mov	r0, r6
 8012582:	f7fe f8b7 	bl	80106f4 <_malloc_r>
 8012586:	b948      	cbnz	r0, 801259c <__smakebuf_r+0x44>
 8012588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801258c:	059a      	lsls	r2, r3, #22
 801258e:	d4ef      	bmi.n	8012570 <__smakebuf_r+0x18>
 8012590:	f023 0303 	bic.w	r3, r3, #3
 8012594:	f043 0302 	orr.w	r3, r3, #2
 8012598:	81a3      	strh	r3, [r4, #12]
 801259a:	e7e3      	b.n	8012564 <__smakebuf_r+0xc>
 801259c:	4b0d      	ldr	r3, [pc, #52]	; (80125d4 <__smakebuf_r+0x7c>)
 801259e:	62b3      	str	r3, [r6, #40]	; 0x28
 80125a0:	89a3      	ldrh	r3, [r4, #12]
 80125a2:	6020      	str	r0, [r4, #0]
 80125a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125a8:	81a3      	strh	r3, [r4, #12]
 80125aa:	9b00      	ldr	r3, [sp, #0]
 80125ac:	6163      	str	r3, [r4, #20]
 80125ae:	9b01      	ldr	r3, [sp, #4]
 80125b0:	6120      	str	r0, [r4, #16]
 80125b2:	b15b      	cbz	r3, 80125cc <__smakebuf_r+0x74>
 80125b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125b8:	4630      	mov	r0, r6
 80125ba:	f000 ff11 	bl	80133e0 <_isatty_r>
 80125be:	b128      	cbz	r0, 80125cc <__smakebuf_r+0x74>
 80125c0:	89a3      	ldrh	r3, [r4, #12]
 80125c2:	f023 0303 	bic.w	r3, r3, #3
 80125c6:	f043 0301 	orr.w	r3, r3, #1
 80125ca:	81a3      	strh	r3, [r4, #12]
 80125cc:	89a0      	ldrh	r0, [r4, #12]
 80125ce:	4305      	orrs	r5, r0
 80125d0:	81a5      	strh	r5, [r4, #12]
 80125d2:	e7cd      	b.n	8012570 <__smakebuf_r+0x18>
 80125d4:	08010461 	.word	0x08010461

080125d8 <malloc>:
 80125d8:	4b02      	ldr	r3, [pc, #8]	; (80125e4 <malloc+0xc>)
 80125da:	4601      	mov	r1, r0
 80125dc:	6818      	ldr	r0, [r3, #0]
 80125de:	f7fe b889 	b.w	80106f4 <_malloc_r>
 80125e2:	bf00      	nop
 80125e4:	20000114 	.word	0x20000114

080125e8 <__malloc_lock>:
 80125e8:	4801      	ldr	r0, [pc, #4]	; (80125f0 <__malloc_lock+0x8>)
 80125ea:	f7fe b830 	b.w	801064e <__retarget_lock_acquire_recursive>
 80125ee:	bf00      	nop
 80125f0:	20005e38 	.word	0x20005e38

080125f4 <__malloc_unlock>:
 80125f4:	4801      	ldr	r0, [pc, #4]	; (80125fc <__malloc_unlock+0x8>)
 80125f6:	f7fe b82b 	b.w	8010650 <__retarget_lock_release_recursive>
 80125fa:	bf00      	nop
 80125fc:	20005e38 	.word	0x20005e38

08012600 <_Balloc>:
 8012600:	b570      	push	{r4, r5, r6, lr}
 8012602:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012604:	4604      	mov	r4, r0
 8012606:	460d      	mov	r5, r1
 8012608:	b976      	cbnz	r6, 8012628 <_Balloc+0x28>
 801260a:	2010      	movs	r0, #16
 801260c:	f7ff ffe4 	bl	80125d8 <malloc>
 8012610:	4602      	mov	r2, r0
 8012612:	6260      	str	r0, [r4, #36]	; 0x24
 8012614:	b920      	cbnz	r0, 8012620 <_Balloc+0x20>
 8012616:	4b18      	ldr	r3, [pc, #96]	; (8012678 <_Balloc+0x78>)
 8012618:	4818      	ldr	r0, [pc, #96]	; (801267c <_Balloc+0x7c>)
 801261a:	2166      	movs	r1, #102	; 0x66
 801261c:	f000 fe9e 	bl	801335c <__assert_func>
 8012620:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012624:	6006      	str	r6, [r0, #0]
 8012626:	60c6      	str	r6, [r0, #12]
 8012628:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801262a:	68f3      	ldr	r3, [r6, #12]
 801262c:	b183      	cbz	r3, 8012650 <_Balloc+0x50>
 801262e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012630:	68db      	ldr	r3, [r3, #12]
 8012632:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012636:	b9b8      	cbnz	r0, 8012668 <_Balloc+0x68>
 8012638:	2101      	movs	r1, #1
 801263a:	fa01 f605 	lsl.w	r6, r1, r5
 801263e:	1d72      	adds	r2, r6, #5
 8012640:	0092      	lsls	r2, r2, #2
 8012642:	4620      	mov	r0, r4
 8012644:	f000 fb60 	bl	8012d08 <_calloc_r>
 8012648:	b160      	cbz	r0, 8012664 <_Balloc+0x64>
 801264a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801264e:	e00e      	b.n	801266e <_Balloc+0x6e>
 8012650:	2221      	movs	r2, #33	; 0x21
 8012652:	2104      	movs	r1, #4
 8012654:	4620      	mov	r0, r4
 8012656:	f000 fb57 	bl	8012d08 <_calloc_r>
 801265a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801265c:	60f0      	str	r0, [r6, #12]
 801265e:	68db      	ldr	r3, [r3, #12]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d1e4      	bne.n	801262e <_Balloc+0x2e>
 8012664:	2000      	movs	r0, #0
 8012666:	bd70      	pop	{r4, r5, r6, pc}
 8012668:	6802      	ldr	r2, [r0, #0]
 801266a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801266e:	2300      	movs	r3, #0
 8012670:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012674:	e7f7      	b.n	8012666 <_Balloc+0x66>
 8012676:	bf00      	nop
 8012678:	08014ef2 	.word	0x08014ef2
 801267c:	08014f75 	.word	0x08014f75

08012680 <_Bfree>:
 8012680:	b570      	push	{r4, r5, r6, lr}
 8012682:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012684:	4605      	mov	r5, r0
 8012686:	460c      	mov	r4, r1
 8012688:	b976      	cbnz	r6, 80126a8 <_Bfree+0x28>
 801268a:	2010      	movs	r0, #16
 801268c:	f7ff ffa4 	bl	80125d8 <malloc>
 8012690:	4602      	mov	r2, r0
 8012692:	6268      	str	r0, [r5, #36]	; 0x24
 8012694:	b920      	cbnz	r0, 80126a0 <_Bfree+0x20>
 8012696:	4b09      	ldr	r3, [pc, #36]	; (80126bc <_Bfree+0x3c>)
 8012698:	4809      	ldr	r0, [pc, #36]	; (80126c0 <_Bfree+0x40>)
 801269a:	218a      	movs	r1, #138	; 0x8a
 801269c:	f000 fe5e 	bl	801335c <__assert_func>
 80126a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80126a4:	6006      	str	r6, [r0, #0]
 80126a6:	60c6      	str	r6, [r0, #12]
 80126a8:	b13c      	cbz	r4, 80126ba <_Bfree+0x3a>
 80126aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80126ac:	6862      	ldr	r2, [r4, #4]
 80126ae:	68db      	ldr	r3, [r3, #12]
 80126b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80126b4:	6021      	str	r1, [r4, #0]
 80126b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80126ba:	bd70      	pop	{r4, r5, r6, pc}
 80126bc:	08014ef2 	.word	0x08014ef2
 80126c0:	08014f75 	.word	0x08014f75

080126c4 <__multadd>:
 80126c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126c8:	690d      	ldr	r5, [r1, #16]
 80126ca:	4607      	mov	r7, r0
 80126cc:	460c      	mov	r4, r1
 80126ce:	461e      	mov	r6, r3
 80126d0:	f101 0c14 	add.w	ip, r1, #20
 80126d4:	2000      	movs	r0, #0
 80126d6:	f8dc 3000 	ldr.w	r3, [ip]
 80126da:	b299      	uxth	r1, r3
 80126dc:	fb02 6101 	mla	r1, r2, r1, r6
 80126e0:	0c1e      	lsrs	r6, r3, #16
 80126e2:	0c0b      	lsrs	r3, r1, #16
 80126e4:	fb02 3306 	mla	r3, r2, r6, r3
 80126e8:	b289      	uxth	r1, r1
 80126ea:	3001      	adds	r0, #1
 80126ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80126f0:	4285      	cmp	r5, r0
 80126f2:	f84c 1b04 	str.w	r1, [ip], #4
 80126f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80126fa:	dcec      	bgt.n	80126d6 <__multadd+0x12>
 80126fc:	b30e      	cbz	r6, 8012742 <__multadd+0x7e>
 80126fe:	68a3      	ldr	r3, [r4, #8]
 8012700:	42ab      	cmp	r3, r5
 8012702:	dc19      	bgt.n	8012738 <__multadd+0x74>
 8012704:	6861      	ldr	r1, [r4, #4]
 8012706:	4638      	mov	r0, r7
 8012708:	3101      	adds	r1, #1
 801270a:	f7ff ff79 	bl	8012600 <_Balloc>
 801270e:	4680      	mov	r8, r0
 8012710:	b928      	cbnz	r0, 801271e <__multadd+0x5a>
 8012712:	4602      	mov	r2, r0
 8012714:	4b0c      	ldr	r3, [pc, #48]	; (8012748 <__multadd+0x84>)
 8012716:	480d      	ldr	r0, [pc, #52]	; (801274c <__multadd+0x88>)
 8012718:	21b5      	movs	r1, #181	; 0xb5
 801271a:	f000 fe1f 	bl	801335c <__assert_func>
 801271e:	6922      	ldr	r2, [r4, #16]
 8012720:	3202      	adds	r2, #2
 8012722:	f104 010c 	add.w	r1, r4, #12
 8012726:	0092      	lsls	r2, r2, #2
 8012728:	300c      	adds	r0, #12
 801272a:	f7fd ff92 	bl	8010652 <memcpy>
 801272e:	4621      	mov	r1, r4
 8012730:	4638      	mov	r0, r7
 8012732:	f7ff ffa5 	bl	8012680 <_Bfree>
 8012736:	4644      	mov	r4, r8
 8012738:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801273c:	3501      	adds	r5, #1
 801273e:	615e      	str	r6, [r3, #20]
 8012740:	6125      	str	r5, [r4, #16]
 8012742:	4620      	mov	r0, r4
 8012744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012748:	08014f64 	.word	0x08014f64
 801274c:	08014f75 	.word	0x08014f75

08012750 <__hi0bits>:
 8012750:	0c03      	lsrs	r3, r0, #16
 8012752:	041b      	lsls	r3, r3, #16
 8012754:	b9d3      	cbnz	r3, 801278c <__hi0bits+0x3c>
 8012756:	0400      	lsls	r0, r0, #16
 8012758:	2310      	movs	r3, #16
 801275a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801275e:	bf04      	itt	eq
 8012760:	0200      	lsleq	r0, r0, #8
 8012762:	3308      	addeq	r3, #8
 8012764:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012768:	bf04      	itt	eq
 801276a:	0100      	lsleq	r0, r0, #4
 801276c:	3304      	addeq	r3, #4
 801276e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012772:	bf04      	itt	eq
 8012774:	0080      	lsleq	r0, r0, #2
 8012776:	3302      	addeq	r3, #2
 8012778:	2800      	cmp	r0, #0
 801277a:	db05      	blt.n	8012788 <__hi0bits+0x38>
 801277c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012780:	f103 0301 	add.w	r3, r3, #1
 8012784:	bf08      	it	eq
 8012786:	2320      	moveq	r3, #32
 8012788:	4618      	mov	r0, r3
 801278a:	4770      	bx	lr
 801278c:	2300      	movs	r3, #0
 801278e:	e7e4      	b.n	801275a <__hi0bits+0xa>

08012790 <__lo0bits>:
 8012790:	6803      	ldr	r3, [r0, #0]
 8012792:	f013 0207 	ands.w	r2, r3, #7
 8012796:	4601      	mov	r1, r0
 8012798:	d00b      	beq.n	80127b2 <__lo0bits+0x22>
 801279a:	07da      	lsls	r2, r3, #31
 801279c:	d423      	bmi.n	80127e6 <__lo0bits+0x56>
 801279e:	0798      	lsls	r0, r3, #30
 80127a0:	bf49      	itett	mi
 80127a2:	085b      	lsrmi	r3, r3, #1
 80127a4:	089b      	lsrpl	r3, r3, #2
 80127a6:	2001      	movmi	r0, #1
 80127a8:	600b      	strmi	r3, [r1, #0]
 80127aa:	bf5c      	itt	pl
 80127ac:	600b      	strpl	r3, [r1, #0]
 80127ae:	2002      	movpl	r0, #2
 80127b0:	4770      	bx	lr
 80127b2:	b298      	uxth	r0, r3
 80127b4:	b9a8      	cbnz	r0, 80127e2 <__lo0bits+0x52>
 80127b6:	0c1b      	lsrs	r3, r3, #16
 80127b8:	2010      	movs	r0, #16
 80127ba:	b2da      	uxtb	r2, r3
 80127bc:	b90a      	cbnz	r2, 80127c2 <__lo0bits+0x32>
 80127be:	3008      	adds	r0, #8
 80127c0:	0a1b      	lsrs	r3, r3, #8
 80127c2:	071a      	lsls	r2, r3, #28
 80127c4:	bf04      	itt	eq
 80127c6:	091b      	lsreq	r3, r3, #4
 80127c8:	3004      	addeq	r0, #4
 80127ca:	079a      	lsls	r2, r3, #30
 80127cc:	bf04      	itt	eq
 80127ce:	089b      	lsreq	r3, r3, #2
 80127d0:	3002      	addeq	r0, #2
 80127d2:	07da      	lsls	r2, r3, #31
 80127d4:	d403      	bmi.n	80127de <__lo0bits+0x4e>
 80127d6:	085b      	lsrs	r3, r3, #1
 80127d8:	f100 0001 	add.w	r0, r0, #1
 80127dc:	d005      	beq.n	80127ea <__lo0bits+0x5a>
 80127de:	600b      	str	r3, [r1, #0]
 80127e0:	4770      	bx	lr
 80127e2:	4610      	mov	r0, r2
 80127e4:	e7e9      	b.n	80127ba <__lo0bits+0x2a>
 80127e6:	2000      	movs	r0, #0
 80127e8:	4770      	bx	lr
 80127ea:	2020      	movs	r0, #32
 80127ec:	4770      	bx	lr
	...

080127f0 <__i2b>:
 80127f0:	b510      	push	{r4, lr}
 80127f2:	460c      	mov	r4, r1
 80127f4:	2101      	movs	r1, #1
 80127f6:	f7ff ff03 	bl	8012600 <_Balloc>
 80127fa:	4602      	mov	r2, r0
 80127fc:	b928      	cbnz	r0, 801280a <__i2b+0x1a>
 80127fe:	4b05      	ldr	r3, [pc, #20]	; (8012814 <__i2b+0x24>)
 8012800:	4805      	ldr	r0, [pc, #20]	; (8012818 <__i2b+0x28>)
 8012802:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012806:	f000 fda9 	bl	801335c <__assert_func>
 801280a:	2301      	movs	r3, #1
 801280c:	6144      	str	r4, [r0, #20]
 801280e:	6103      	str	r3, [r0, #16]
 8012810:	bd10      	pop	{r4, pc}
 8012812:	bf00      	nop
 8012814:	08014f64 	.word	0x08014f64
 8012818:	08014f75 	.word	0x08014f75

0801281c <__multiply>:
 801281c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012820:	4691      	mov	r9, r2
 8012822:	690a      	ldr	r2, [r1, #16]
 8012824:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012828:	429a      	cmp	r2, r3
 801282a:	bfb8      	it	lt
 801282c:	460b      	movlt	r3, r1
 801282e:	460c      	mov	r4, r1
 8012830:	bfbc      	itt	lt
 8012832:	464c      	movlt	r4, r9
 8012834:	4699      	movlt	r9, r3
 8012836:	6927      	ldr	r7, [r4, #16]
 8012838:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801283c:	68a3      	ldr	r3, [r4, #8]
 801283e:	6861      	ldr	r1, [r4, #4]
 8012840:	eb07 060a 	add.w	r6, r7, sl
 8012844:	42b3      	cmp	r3, r6
 8012846:	b085      	sub	sp, #20
 8012848:	bfb8      	it	lt
 801284a:	3101      	addlt	r1, #1
 801284c:	f7ff fed8 	bl	8012600 <_Balloc>
 8012850:	b930      	cbnz	r0, 8012860 <__multiply+0x44>
 8012852:	4602      	mov	r2, r0
 8012854:	4b44      	ldr	r3, [pc, #272]	; (8012968 <__multiply+0x14c>)
 8012856:	4845      	ldr	r0, [pc, #276]	; (801296c <__multiply+0x150>)
 8012858:	f240 115d 	movw	r1, #349	; 0x15d
 801285c:	f000 fd7e 	bl	801335c <__assert_func>
 8012860:	f100 0514 	add.w	r5, r0, #20
 8012864:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012868:	462b      	mov	r3, r5
 801286a:	2200      	movs	r2, #0
 801286c:	4543      	cmp	r3, r8
 801286e:	d321      	bcc.n	80128b4 <__multiply+0x98>
 8012870:	f104 0314 	add.w	r3, r4, #20
 8012874:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012878:	f109 0314 	add.w	r3, r9, #20
 801287c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012880:	9202      	str	r2, [sp, #8]
 8012882:	1b3a      	subs	r2, r7, r4
 8012884:	3a15      	subs	r2, #21
 8012886:	f022 0203 	bic.w	r2, r2, #3
 801288a:	3204      	adds	r2, #4
 801288c:	f104 0115 	add.w	r1, r4, #21
 8012890:	428f      	cmp	r7, r1
 8012892:	bf38      	it	cc
 8012894:	2204      	movcc	r2, #4
 8012896:	9201      	str	r2, [sp, #4]
 8012898:	9a02      	ldr	r2, [sp, #8]
 801289a:	9303      	str	r3, [sp, #12]
 801289c:	429a      	cmp	r2, r3
 801289e:	d80c      	bhi.n	80128ba <__multiply+0x9e>
 80128a0:	2e00      	cmp	r6, #0
 80128a2:	dd03      	ble.n	80128ac <__multiply+0x90>
 80128a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d05a      	beq.n	8012962 <__multiply+0x146>
 80128ac:	6106      	str	r6, [r0, #16]
 80128ae:	b005      	add	sp, #20
 80128b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128b4:	f843 2b04 	str.w	r2, [r3], #4
 80128b8:	e7d8      	b.n	801286c <__multiply+0x50>
 80128ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80128be:	f1ba 0f00 	cmp.w	sl, #0
 80128c2:	d024      	beq.n	801290e <__multiply+0xf2>
 80128c4:	f104 0e14 	add.w	lr, r4, #20
 80128c8:	46a9      	mov	r9, r5
 80128ca:	f04f 0c00 	mov.w	ip, #0
 80128ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 80128d2:	f8d9 1000 	ldr.w	r1, [r9]
 80128d6:	fa1f fb82 	uxth.w	fp, r2
 80128da:	b289      	uxth	r1, r1
 80128dc:	fb0a 110b 	mla	r1, sl, fp, r1
 80128e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80128e4:	f8d9 2000 	ldr.w	r2, [r9]
 80128e8:	4461      	add	r1, ip
 80128ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80128ee:	fb0a c20b 	mla	r2, sl, fp, ip
 80128f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80128f6:	b289      	uxth	r1, r1
 80128f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80128fc:	4577      	cmp	r7, lr
 80128fe:	f849 1b04 	str.w	r1, [r9], #4
 8012902:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012906:	d8e2      	bhi.n	80128ce <__multiply+0xb2>
 8012908:	9a01      	ldr	r2, [sp, #4]
 801290a:	f845 c002 	str.w	ip, [r5, r2]
 801290e:	9a03      	ldr	r2, [sp, #12]
 8012910:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012914:	3304      	adds	r3, #4
 8012916:	f1b9 0f00 	cmp.w	r9, #0
 801291a:	d020      	beq.n	801295e <__multiply+0x142>
 801291c:	6829      	ldr	r1, [r5, #0]
 801291e:	f104 0c14 	add.w	ip, r4, #20
 8012922:	46ae      	mov	lr, r5
 8012924:	f04f 0a00 	mov.w	sl, #0
 8012928:	f8bc b000 	ldrh.w	fp, [ip]
 801292c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012930:	fb09 220b 	mla	r2, r9, fp, r2
 8012934:	4492      	add	sl, r2
 8012936:	b289      	uxth	r1, r1
 8012938:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801293c:	f84e 1b04 	str.w	r1, [lr], #4
 8012940:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012944:	f8be 1000 	ldrh.w	r1, [lr]
 8012948:	0c12      	lsrs	r2, r2, #16
 801294a:	fb09 1102 	mla	r1, r9, r2, r1
 801294e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012952:	4567      	cmp	r7, ip
 8012954:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012958:	d8e6      	bhi.n	8012928 <__multiply+0x10c>
 801295a:	9a01      	ldr	r2, [sp, #4]
 801295c:	50a9      	str	r1, [r5, r2]
 801295e:	3504      	adds	r5, #4
 8012960:	e79a      	b.n	8012898 <__multiply+0x7c>
 8012962:	3e01      	subs	r6, #1
 8012964:	e79c      	b.n	80128a0 <__multiply+0x84>
 8012966:	bf00      	nop
 8012968:	08014f64 	.word	0x08014f64
 801296c:	08014f75 	.word	0x08014f75

08012970 <__pow5mult>:
 8012970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012974:	4615      	mov	r5, r2
 8012976:	f012 0203 	ands.w	r2, r2, #3
 801297a:	4606      	mov	r6, r0
 801297c:	460f      	mov	r7, r1
 801297e:	d007      	beq.n	8012990 <__pow5mult+0x20>
 8012980:	4c25      	ldr	r4, [pc, #148]	; (8012a18 <__pow5mult+0xa8>)
 8012982:	3a01      	subs	r2, #1
 8012984:	2300      	movs	r3, #0
 8012986:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801298a:	f7ff fe9b 	bl	80126c4 <__multadd>
 801298e:	4607      	mov	r7, r0
 8012990:	10ad      	asrs	r5, r5, #2
 8012992:	d03d      	beq.n	8012a10 <__pow5mult+0xa0>
 8012994:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012996:	b97c      	cbnz	r4, 80129b8 <__pow5mult+0x48>
 8012998:	2010      	movs	r0, #16
 801299a:	f7ff fe1d 	bl	80125d8 <malloc>
 801299e:	4602      	mov	r2, r0
 80129a0:	6270      	str	r0, [r6, #36]	; 0x24
 80129a2:	b928      	cbnz	r0, 80129b0 <__pow5mult+0x40>
 80129a4:	4b1d      	ldr	r3, [pc, #116]	; (8012a1c <__pow5mult+0xac>)
 80129a6:	481e      	ldr	r0, [pc, #120]	; (8012a20 <__pow5mult+0xb0>)
 80129a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80129ac:	f000 fcd6 	bl	801335c <__assert_func>
 80129b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80129b4:	6004      	str	r4, [r0, #0]
 80129b6:	60c4      	str	r4, [r0, #12]
 80129b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80129bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80129c0:	b94c      	cbnz	r4, 80129d6 <__pow5mult+0x66>
 80129c2:	f240 2171 	movw	r1, #625	; 0x271
 80129c6:	4630      	mov	r0, r6
 80129c8:	f7ff ff12 	bl	80127f0 <__i2b>
 80129cc:	2300      	movs	r3, #0
 80129ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80129d2:	4604      	mov	r4, r0
 80129d4:	6003      	str	r3, [r0, #0]
 80129d6:	f04f 0900 	mov.w	r9, #0
 80129da:	07eb      	lsls	r3, r5, #31
 80129dc:	d50a      	bpl.n	80129f4 <__pow5mult+0x84>
 80129de:	4639      	mov	r1, r7
 80129e0:	4622      	mov	r2, r4
 80129e2:	4630      	mov	r0, r6
 80129e4:	f7ff ff1a 	bl	801281c <__multiply>
 80129e8:	4639      	mov	r1, r7
 80129ea:	4680      	mov	r8, r0
 80129ec:	4630      	mov	r0, r6
 80129ee:	f7ff fe47 	bl	8012680 <_Bfree>
 80129f2:	4647      	mov	r7, r8
 80129f4:	106d      	asrs	r5, r5, #1
 80129f6:	d00b      	beq.n	8012a10 <__pow5mult+0xa0>
 80129f8:	6820      	ldr	r0, [r4, #0]
 80129fa:	b938      	cbnz	r0, 8012a0c <__pow5mult+0x9c>
 80129fc:	4622      	mov	r2, r4
 80129fe:	4621      	mov	r1, r4
 8012a00:	4630      	mov	r0, r6
 8012a02:	f7ff ff0b 	bl	801281c <__multiply>
 8012a06:	6020      	str	r0, [r4, #0]
 8012a08:	f8c0 9000 	str.w	r9, [r0]
 8012a0c:	4604      	mov	r4, r0
 8012a0e:	e7e4      	b.n	80129da <__pow5mult+0x6a>
 8012a10:	4638      	mov	r0, r7
 8012a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a16:	bf00      	nop
 8012a18:	080150c8 	.word	0x080150c8
 8012a1c:	08014ef2 	.word	0x08014ef2
 8012a20:	08014f75 	.word	0x08014f75

08012a24 <__lshift>:
 8012a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a28:	460c      	mov	r4, r1
 8012a2a:	6849      	ldr	r1, [r1, #4]
 8012a2c:	6923      	ldr	r3, [r4, #16]
 8012a2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012a32:	68a3      	ldr	r3, [r4, #8]
 8012a34:	4607      	mov	r7, r0
 8012a36:	4691      	mov	r9, r2
 8012a38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012a3c:	f108 0601 	add.w	r6, r8, #1
 8012a40:	42b3      	cmp	r3, r6
 8012a42:	db0b      	blt.n	8012a5c <__lshift+0x38>
 8012a44:	4638      	mov	r0, r7
 8012a46:	f7ff fddb 	bl	8012600 <_Balloc>
 8012a4a:	4605      	mov	r5, r0
 8012a4c:	b948      	cbnz	r0, 8012a62 <__lshift+0x3e>
 8012a4e:	4602      	mov	r2, r0
 8012a50:	4b2a      	ldr	r3, [pc, #168]	; (8012afc <__lshift+0xd8>)
 8012a52:	482b      	ldr	r0, [pc, #172]	; (8012b00 <__lshift+0xdc>)
 8012a54:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012a58:	f000 fc80 	bl	801335c <__assert_func>
 8012a5c:	3101      	adds	r1, #1
 8012a5e:	005b      	lsls	r3, r3, #1
 8012a60:	e7ee      	b.n	8012a40 <__lshift+0x1c>
 8012a62:	2300      	movs	r3, #0
 8012a64:	f100 0114 	add.w	r1, r0, #20
 8012a68:	f100 0210 	add.w	r2, r0, #16
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	4553      	cmp	r3, sl
 8012a70:	db37      	blt.n	8012ae2 <__lshift+0xbe>
 8012a72:	6920      	ldr	r0, [r4, #16]
 8012a74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012a78:	f104 0314 	add.w	r3, r4, #20
 8012a7c:	f019 091f 	ands.w	r9, r9, #31
 8012a80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012a84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012a88:	d02f      	beq.n	8012aea <__lshift+0xc6>
 8012a8a:	f1c9 0e20 	rsb	lr, r9, #32
 8012a8e:	468a      	mov	sl, r1
 8012a90:	f04f 0c00 	mov.w	ip, #0
 8012a94:	681a      	ldr	r2, [r3, #0]
 8012a96:	fa02 f209 	lsl.w	r2, r2, r9
 8012a9a:	ea42 020c 	orr.w	r2, r2, ip
 8012a9e:	f84a 2b04 	str.w	r2, [sl], #4
 8012aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012aa6:	4298      	cmp	r0, r3
 8012aa8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012aac:	d8f2      	bhi.n	8012a94 <__lshift+0x70>
 8012aae:	1b03      	subs	r3, r0, r4
 8012ab0:	3b15      	subs	r3, #21
 8012ab2:	f023 0303 	bic.w	r3, r3, #3
 8012ab6:	3304      	adds	r3, #4
 8012ab8:	f104 0215 	add.w	r2, r4, #21
 8012abc:	4290      	cmp	r0, r2
 8012abe:	bf38      	it	cc
 8012ac0:	2304      	movcc	r3, #4
 8012ac2:	f841 c003 	str.w	ip, [r1, r3]
 8012ac6:	f1bc 0f00 	cmp.w	ip, #0
 8012aca:	d001      	beq.n	8012ad0 <__lshift+0xac>
 8012acc:	f108 0602 	add.w	r6, r8, #2
 8012ad0:	3e01      	subs	r6, #1
 8012ad2:	4638      	mov	r0, r7
 8012ad4:	612e      	str	r6, [r5, #16]
 8012ad6:	4621      	mov	r1, r4
 8012ad8:	f7ff fdd2 	bl	8012680 <_Bfree>
 8012adc:	4628      	mov	r0, r5
 8012ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ae2:	f842 0f04 	str.w	r0, [r2, #4]!
 8012ae6:	3301      	adds	r3, #1
 8012ae8:	e7c1      	b.n	8012a6e <__lshift+0x4a>
 8012aea:	3904      	subs	r1, #4
 8012aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8012af0:	f841 2f04 	str.w	r2, [r1, #4]!
 8012af4:	4298      	cmp	r0, r3
 8012af6:	d8f9      	bhi.n	8012aec <__lshift+0xc8>
 8012af8:	e7ea      	b.n	8012ad0 <__lshift+0xac>
 8012afa:	bf00      	nop
 8012afc:	08014f64 	.word	0x08014f64
 8012b00:	08014f75 	.word	0x08014f75

08012b04 <__mcmp>:
 8012b04:	b530      	push	{r4, r5, lr}
 8012b06:	6902      	ldr	r2, [r0, #16]
 8012b08:	690c      	ldr	r4, [r1, #16]
 8012b0a:	1b12      	subs	r2, r2, r4
 8012b0c:	d10e      	bne.n	8012b2c <__mcmp+0x28>
 8012b0e:	f100 0314 	add.w	r3, r0, #20
 8012b12:	3114      	adds	r1, #20
 8012b14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012b18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012b1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012b20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012b24:	42a5      	cmp	r5, r4
 8012b26:	d003      	beq.n	8012b30 <__mcmp+0x2c>
 8012b28:	d305      	bcc.n	8012b36 <__mcmp+0x32>
 8012b2a:	2201      	movs	r2, #1
 8012b2c:	4610      	mov	r0, r2
 8012b2e:	bd30      	pop	{r4, r5, pc}
 8012b30:	4283      	cmp	r3, r0
 8012b32:	d3f3      	bcc.n	8012b1c <__mcmp+0x18>
 8012b34:	e7fa      	b.n	8012b2c <__mcmp+0x28>
 8012b36:	f04f 32ff 	mov.w	r2, #4294967295
 8012b3a:	e7f7      	b.n	8012b2c <__mcmp+0x28>

08012b3c <__mdiff>:
 8012b3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b40:	460c      	mov	r4, r1
 8012b42:	4606      	mov	r6, r0
 8012b44:	4611      	mov	r1, r2
 8012b46:	4620      	mov	r0, r4
 8012b48:	4690      	mov	r8, r2
 8012b4a:	f7ff ffdb 	bl	8012b04 <__mcmp>
 8012b4e:	1e05      	subs	r5, r0, #0
 8012b50:	d110      	bne.n	8012b74 <__mdiff+0x38>
 8012b52:	4629      	mov	r1, r5
 8012b54:	4630      	mov	r0, r6
 8012b56:	f7ff fd53 	bl	8012600 <_Balloc>
 8012b5a:	b930      	cbnz	r0, 8012b6a <__mdiff+0x2e>
 8012b5c:	4b3a      	ldr	r3, [pc, #232]	; (8012c48 <__mdiff+0x10c>)
 8012b5e:	4602      	mov	r2, r0
 8012b60:	f240 2132 	movw	r1, #562	; 0x232
 8012b64:	4839      	ldr	r0, [pc, #228]	; (8012c4c <__mdiff+0x110>)
 8012b66:	f000 fbf9 	bl	801335c <__assert_func>
 8012b6a:	2301      	movs	r3, #1
 8012b6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012b70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b74:	bfa4      	itt	ge
 8012b76:	4643      	movge	r3, r8
 8012b78:	46a0      	movge	r8, r4
 8012b7a:	4630      	mov	r0, r6
 8012b7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012b80:	bfa6      	itte	ge
 8012b82:	461c      	movge	r4, r3
 8012b84:	2500      	movge	r5, #0
 8012b86:	2501      	movlt	r5, #1
 8012b88:	f7ff fd3a 	bl	8012600 <_Balloc>
 8012b8c:	b920      	cbnz	r0, 8012b98 <__mdiff+0x5c>
 8012b8e:	4b2e      	ldr	r3, [pc, #184]	; (8012c48 <__mdiff+0x10c>)
 8012b90:	4602      	mov	r2, r0
 8012b92:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012b96:	e7e5      	b.n	8012b64 <__mdiff+0x28>
 8012b98:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012b9c:	6926      	ldr	r6, [r4, #16]
 8012b9e:	60c5      	str	r5, [r0, #12]
 8012ba0:	f104 0914 	add.w	r9, r4, #20
 8012ba4:	f108 0514 	add.w	r5, r8, #20
 8012ba8:	f100 0e14 	add.w	lr, r0, #20
 8012bac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012bb0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012bb4:	f108 0210 	add.w	r2, r8, #16
 8012bb8:	46f2      	mov	sl, lr
 8012bba:	2100      	movs	r1, #0
 8012bbc:	f859 3b04 	ldr.w	r3, [r9], #4
 8012bc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012bc4:	fa1f f883 	uxth.w	r8, r3
 8012bc8:	fa11 f18b 	uxtah	r1, r1, fp
 8012bcc:	0c1b      	lsrs	r3, r3, #16
 8012bce:	eba1 0808 	sub.w	r8, r1, r8
 8012bd2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012bd6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012bda:	fa1f f888 	uxth.w	r8, r8
 8012bde:	1419      	asrs	r1, r3, #16
 8012be0:	454e      	cmp	r6, r9
 8012be2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012be6:	f84a 3b04 	str.w	r3, [sl], #4
 8012bea:	d8e7      	bhi.n	8012bbc <__mdiff+0x80>
 8012bec:	1b33      	subs	r3, r6, r4
 8012bee:	3b15      	subs	r3, #21
 8012bf0:	f023 0303 	bic.w	r3, r3, #3
 8012bf4:	3304      	adds	r3, #4
 8012bf6:	3415      	adds	r4, #21
 8012bf8:	42a6      	cmp	r6, r4
 8012bfa:	bf38      	it	cc
 8012bfc:	2304      	movcc	r3, #4
 8012bfe:	441d      	add	r5, r3
 8012c00:	4473      	add	r3, lr
 8012c02:	469e      	mov	lr, r3
 8012c04:	462e      	mov	r6, r5
 8012c06:	4566      	cmp	r6, ip
 8012c08:	d30e      	bcc.n	8012c28 <__mdiff+0xec>
 8012c0a:	f10c 0203 	add.w	r2, ip, #3
 8012c0e:	1b52      	subs	r2, r2, r5
 8012c10:	f022 0203 	bic.w	r2, r2, #3
 8012c14:	3d03      	subs	r5, #3
 8012c16:	45ac      	cmp	ip, r5
 8012c18:	bf38      	it	cc
 8012c1a:	2200      	movcc	r2, #0
 8012c1c:	441a      	add	r2, r3
 8012c1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012c22:	b17b      	cbz	r3, 8012c44 <__mdiff+0x108>
 8012c24:	6107      	str	r7, [r0, #16]
 8012c26:	e7a3      	b.n	8012b70 <__mdiff+0x34>
 8012c28:	f856 8b04 	ldr.w	r8, [r6], #4
 8012c2c:	fa11 f288 	uxtah	r2, r1, r8
 8012c30:	1414      	asrs	r4, r2, #16
 8012c32:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012c36:	b292      	uxth	r2, r2
 8012c38:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012c3c:	f84e 2b04 	str.w	r2, [lr], #4
 8012c40:	1421      	asrs	r1, r4, #16
 8012c42:	e7e0      	b.n	8012c06 <__mdiff+0xca>
 8012c44:	3f01      	subs	r7, #1
 8012c46:	e7ea      	b.n	8012c1e <__mdiff+0xe2>
 8012c48:	08014f64 	.word	0x08014f64
 8012c4c:	08014f75 	.word	0x08014f75

08012c50 <__d2b>:
 8012c50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012c54:	4689      	mov	r9, r1
 8012c56:	2101      	movs	r1, #1
 8012c58:	ec57 6b10 	vmov	r6, r7, d0
 8012c5c:	4690      	mov	r8, r2
 8012c5e:	f7ff fccf 	bl	8012600 <_Balloc>
 8012c62:	4604      	mov	r4, r0
 8012c64:	b930      	cbnz	r0, 8012c74 <__d2b+0x24>
 8012c66:	4602      	mov	r2, r0
 8012c68:	4b25      	ldr	r3, [pc, #148]	; (8012d00 <__d2b+0xb0>)
 8012c6a:	4826      	ldr	r0, [pc, #152]	; (8012d04 <__d2b+0xb4>)
 8012c6c:	f240 310a 	movw	r1, #778	; 0x30a
 8012c70:	f000 fb74 	bl	801335c <__assert_func>
 8012c74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012c78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012c7c:	bb35      	cbnz	r5, 8012ccc <__d2b+0x7c>
 8012c7e:	2e00      	cmp	r6, #0
 8012c80:	9301      	str	r3, [sp, #4]
 8012c82:	d028      	beq.n	8012cd6 <__d2b+0x86>
 8012c84:	4668      	mov	r0, sp
 8012c86:	9600      	str	r6, [sp, #0]
 8012c88:	f7ff fd82 	bl	8012790 <__lo0bits>
 8012c8c:	9900      	ldr	r1, [sp, #0]
 8012c8e:	b300      	cbz	r0, 8012cd2 <__d2b+0x82>
 8012c90:	9a01      	ldr	r2, [sp, #4]
 8012c92:	f1c0 0320 	rsb	r3, r0, #32
 8012c96:	fa02 f303 	lsl.w	r3, r2, r3
 8012c9a:	430b      	orrs	r3, r1
 8012c9c:	40c2      	lsrs	r2, r0
 8012c9e:	6163      	str	r3, [r4, #20]
 8012ca0:	9201      	str	r2, [sp, #4]
 8012ca2:	9b01      	ldr	r3, [sp, #4]
 8012ca4:	61a3      	str	r3, [r4, #24]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	bf14      	ite	ne
 8012caa:	2202      	movne	r2, #2
 8012cac:	2201      	moveq	r2, #1
 8012cae:	6122      	str	r2, [r4, #16]
 8012cb0:	b1d5      	cbz	r5, 8012ce8 <__d2b+0x98>
 8012cb2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012cb6:	4405      	add	r5, r0
 8012cb8:	f8c9 5000 	str.w	r5, [r9]
 8012cbc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012cc0:	f8c8 0000 	str.w	r0, [r8]
 8012cc4:	4620      	mov	r0, r4
 8012cc6:	b003      	add	sp, #12
 8012cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ccc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012cd0:	e7d5      	b.n	8012c7e <__d2b+0x2e>
 8012cd2:	6161      	str	r1, [r4, #20]
 8012cd4:	e7e5      	b.n	8012ca2 <__d2b+0x52>
 8012cd6:	a801      	add	r0, sp, #4
 8012cd8:	f7ff fd5a 	bl	8012790 <__lo0bits>
 8012cdc:	9b01      	ldr	r3, [sp, #4]
 8012cde:	6163      	str	r3, [r4, #20]
 8012ce0:	2201      	movs	r2, #1
 8012ce2:	6122      	str	r2, [r4, #16]
 8012ce4:	3020      	adds	r0, #32
 8012ce6:	e7e3      	b.n	8012cb0 <__d2b+0x60>
 8012ce8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012cec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012cf0:	f8c9 0000 	str.w	r0, [r9]
 8012cf4:	6918      	ldr	r0, [r3, #16]
 8012cf6:	f7ff fd2b 	bl	8012750 <__hi0bits>
 8012cfa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012cfe:	e7df      	b.n	8012cc0 <__d2b+0x70>
 8012d00:	08014f64 	.word	0x08014f64
 8012d04:	08014f75 	.word	0x08014f75

08012d08 <_calloc_r>:
 8012d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012d0a:	fba1 2402 	umull	r2, r4, r1, r2
 8012d0e:	b94c      	cbnz	r4, 8012d24 <_calloc_r+0x1c>
 8012d10:	4611      	mov	r1, r2
 8012d12:	9201      	str	r2, [sp, #4]
 8012d14:	f7fd fcee 	bl	80106f4 <_malloc_r>
 8012d18:	9a01      	ldr	r2, [sp, #4]
 8012d1a:	4605      	mov	r5, r0
 8012d1c:	b930      	cbnz	r0, 8012d2c <_calloc_r+0x24>
 8012d1e:	4628      	mov	r0, r5
 8012d20:	b003      	add	sp, #12
 8012d22:	bd30      	pop	{r4, r5, pc}
 8012d24:	220c      	movs	r2, #12
 8012d26:	6002      	str	r2, [r0, #0]
 8012d28:	2500      	movs	r5, #0
 8012d2a:	e7f8      	b.n	8012d1e <_calloc_r+0x16>
 8012d2c:	4621      	mov	r1, r4
 8012d2e:	f7fd fcb8 	bl	80106a2 <memset>
 8012d32:	e7f4      	b.n	8012d1e <_calloc_r+0x16>

08012d34 <_free_r>:
 8012d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012d36:	2900      	cmp	r1, #0
 8012d38:	d044      	beq.n	8012dc4 <_free_r+0x90>
 8012d3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d3e:	9001      	str	r0, [sp, #4]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	f1a1 0404 	sub.w	r4, r1, #4
 8012d46:	bfb8      	it	lt
 8012d48:	18e4      	addlt	r4, r4, r3
 8012d4a:	f7ff fc4d 	bl	80125e8 <__malloc_lock>
 8012d4e:	4a1e      	ldr	r2, [pc, #120]	; (8012dc8 <_free_r+0x94>)
 8012d50:	9801      	ldr	r0, [sp, #4]
 8012d52:	6813      	ldr	r3, [r2, #0]
 8012d54:	b933      	cbnz	r3, 8012d64 <_free_r+0x30>
 8012d56:	6063      	str	r3, [r4, #4]
 8012d58:	6014      	str	r4, [r2, #0]
 8012d5a:	b003      	add	sp, #12
 8012d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d60:	f7ff bc48 	b.w	80125f4 <__malloc_unlock>
 8012d64:	42a3      	cmp	r3, r4
 8012d66:	d908      	bls.n	8012d7a <_free_r+0x46>
 8012d68:	6825      	ldr	r5, [r4, #0]
 8012d6a:	1961      	adds	r1, r4, r5
 8012d6c:	428b      	cmp	r3, r1
 8012d6e:	bf01      	itttt	eq
 8012d70:	6819      	ldreq	r1, [r3, #0]
 8012d72:	685b      	ldreq	r3, [r3, #4]
 8012d74:	1949      	addeq	r1, r1, r5
 8012d76:	6021      	streq	r1, [r4, #0]
 8012d78:	e7ed      	b.n	8012d56 <_free_r+0x22>
 8012d7a:	461a      	mov	r2, r3
 8012d7c:	685b      	ldr	r3, [r3, #4]
 8012d7e:	b10b      	cbz	r3, 8012d84 <_free_r+0x50>
 8012d80:	42a3      	cmp	r3, r4
 8012d82:	d9fa      	bls.n	8012d7a <_free_r+0x46>
 8012d84:	6811      	ldr	r1, [r2, #0]
 8012d86:	1855      	adds	r5, r2, r1
 8012d88:	42a5      	cmp	r5, r4
 8012d8a:	d10b      	bne.n	8012da4 <_free_r+0x70>
 8012d8c:	6824      	ldr	r4, [r4, #0]
 8012d8e:	4421      	add	r1, r4
 8012d90:	1854      	adds	r4, r2, r1
 8012d92:	42a3      	cmp	r3, r4
 8012d94:	6011      	str	r1, [r2, #0]
 8012d96:	d1e0      	bne.n	8012d5a <_free_r+0x26>
 8012d98:	681c      	ldr	r4, [r3, #0]
 8012d9a:	685b      	ldr	r3, [r3, #4]
 8012d9c:	6053      	str	r3, [r2, #4]
 8012d9e:	4421      	add	r1, r4
 8012da0:	6011      	str	r1, [r2, #0]
 8012da2:	e7da      	b.n	8012d5a <_free_r+0x26>
 8012da4:	d902      	bls.n	8012dac <_free_r+0x78>
 8012da6:	230c      	movs	r3, #12
 8012da8:	6003      	str	r3, [r0, #0]
 8012daa:	e7d6      	b.n	8012d5a <_free_r+0x26>
 8012dac:	6825      	ldr	r5, [r4, #0]
 8012dae:	1961      	adds	r1, r4, r5
 8012db0:	428b      	cmp	r3, r1
 8012db2:	bf04      	itt	eq
 8012db4:	6819      	ldreq	r1, [r3, #0]
 8012db6:	685b      	ldreq	r3, [r3, #4]
 8012db8:	6063      	str	r3, [r4, #4]
 8012dba:	bf04      	itt	eq
 8012dbc:	1949      	addeq	r1, r1, r5
 8012dbe:	6021      	streq	r1, [r4, #0]
 8012dc0:	6054      	str	r4, [r2, #4]
 8012dc2:	e7ca      	b.n	8012d5a <_free_r+0x26>
 8012dc4:	b003      	add	sp, #12
 8012dc6:	bd30      	pop	{r4, r5, pc}
 8012dc8:	20005e3c 	.word	0x20005e3c

08012dcc <__ssputs_r>:
 8012dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dd0:	688e      	ldr	r6, [r1, #8]
 8012dd2:	429e      	cmp	r6, r3
 8012dd4:	4682      	mov	sl, r0
 8012dd6:	460c      	mov	r4, r1
 8012dd8:	4690      	mov	r8, r2
 8012dda:	461f      	mov	r7, r3
 8012ddc:	d838      	bhi.n	8012e50 <__ssputs_r+0x84>
 8012dde:	898a      	ldrh	r2, [r1, #12]
 8012de0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012de4:	d032      	beq.n	8012e4c <__ssputs_r+0x80>
 8012de6:	6825      	ldr	r5, [r4, #0]
 8012de8:	6909      	ldr	r1, [r1, #16]
 8012dea:	eba5 0901 	sub.w	r9, r5, r1
 8012dee:	6965      	ldr	r5, [r4, #20]
 8012df0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012df4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012df8:	3301      	adds	r3, #1
 8012dfa:	444b      	add	r3, r9
 8012dfc:	106d      	asrs	r5, r5, #1
 8012dfe:	429d      	cmp	r5, r3
 8012e00:	bf38      	it	cc
 8012e02:	461d      	movcc	r5, r3
 8012e04:	0553      	lsls	r3, r2, #21
 8012e06:	d531      	bpl.n	8012e6c <__ssputs_r+0xa0>
 8012e08:	4629      	mov	r1, r5
 8012e0a:	f7fd fc73 	bl	80106f4 <_malloc_r>
 8012e0e:	4606      	mov	r6, r0
 8012e10:	b950      	cbnz	r0, 8012e28 <__ssputs_r+0x5c>
 8012e12:	230c      	movs	r3, #12
 8012e14:	f8ca 3000 	str.w	r3, [sl]
 8012e18:	89a3      	ldrh	r3, [r4, #12]
 8012e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e1e:	81a3      	strh	r3, [r4, #12]
 8012e20:	f04f 30ff 	mov.w	r0, #4294967295
 8012e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e28:	6921      	ldr	r1, [r4, #16]
 8012e2a:	464a      	mov	r2, r9
 8012e2c:	f7fd fc11 	bl	8010652 <memcpy>
 8012e30:	89a3      	ldrh	r3, [r4, #12]
 8012e32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e3a:	81a3      	strh	r3, [r4, #12]
 8012e3c:	6126      	str	r6, [r4, #16]
 8012e3e:	6165      	str	r5, [r4, #20]
 8012e40:	444e      	add	r6, r9
 8012e42:	eba5 0509 	sub.w	r5, r5, r9
 8012e46:	6026      	str	r6, [r4, #0]
 8012e48:	60a5      	str	r5, [r4, #8]
 8012e4a:	463e      	mov	r6, r7
 8012e4c:	42be      	cmp	r6, r7
 8012e4e:	d900      	bls.n	8012e52 <__ssputs_r+0x86>
 8012e50:	463e      	mov	r6, r7
 8012e52:	6820      	ldr	r0, [r4, #0]
 8012e54:	4632      	mov	r2, r6
 8012e56:	4641      	mov	r1, r8
 8012e58:	f7fd fc09 	bl	801066e <memmove>
 8012e5c:	68a3      	ldr	r3, [r4, #8]
 8012e5e:	1b9b      	subs	r3, r3, r6
 8012e60:	60a3      	str	r3, [r4, #8]
 8012e62:	6823      	ldr	r3, [r4, #0]
 8012e64:	4433      	add	r3, r6
 8012e66:	6023      	str	r3, [r4, #0]
 8012e68:	2000      	movs	r0, #0
 8012e6a:	e7db      	b.n	8012e24 <__ssputs_r+0x58>
 8012e6c:	462a      	mov	r2, r5
 8012e6e:	f000 fad9 	bl	8013424 <_realloc_r>
 8012e72:	4606      	mov	r6, r0
 8012e74:	2800      	cmp	r0, #0
 8012e76:	d1e1      	bne.n	8012e3c <__ssputs_r+0x70>
 8012e78:	6921      	ldr	r1, [r4, #16]
 8012e7a:	4650      	mov	r0, sl
 8012e7c:	f7ff ff5a 	bl	8012d34 <_free_r>
 8012e80:	e7c7      	b.n	8012e12 <__ssputs_r+0x46>
	...

08012e84 <_svfiprintf_r>:
 8012e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e88:	4698      	mov	r8, r3
 8012e8a:	898b      	ldrh	r3, [r1, #12]
 8012e8c:	061b      	lsls	r3, r3, #24
 8012e8e:	b09d      	sub	sp, #116	; 0x74
 8012e90:	4607      	mov	r7, r0
 8012e92:	460d      	mov	r5, r1
 8012e94:	4614      	mov	r4, r2
 8012e96:	d50e      	bpl.n	8012eb6 <_svfiprintf_r+0x32>
 8012e98:	690b      	ldr	r3, [r1, #16]
 8012e9a:	b963      	cbnz	r3, 8012eb6 <_svfiprintf_r+0x32>
 8012e9c:	2140      	movs	r1, #64	; 0x40
 8012e9e:	f7fd fc29 	bl	80106f4 <_malloc_r>
 8012ea2:	6028      	str	r0, [r5, #0]
 8012ea4:	6128      	str	r0, [r5, #16]
 8012ea6:	b920      	cbnz	r0, 8012eb2 <_svfiprintf_r+0x2e>
 8012ea8:	230c      	movs	r3, #12
 8012eaa:	603b      	str	r3, [r7, #0]
 8012eac:	f04f 30ff 	mov.w	r0, #4294967295
 8012eb0:	e0d1      	b.n	8013056 <_svfiprintf_r+0x1d2>
 8012eb2:	2340      	movs	r3, #64	; 0x40
 8012eb4:	616b      	str	r3, [r5, #20]
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8012eba:	2320      	movs	r3, #32
 8012ebc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012ec0:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ec4:	2330      	movs	r3, #48	; 0x30
 8012ec6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013070 <_svfiprintf_r+0x1ec>
 8012eca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012ece:	f04f 0901 	mov.w	r9, #1
 8012ed2:	4623      	mov	r3, r4
 8012ed4:	469a      	mov	sl, r3
 8012ed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012eda:	b10a      	cbz	r2, 8012ee0 <_svfiprintf_r+0x5c>
 8012edc:	2a25      	cmp	r2, #37	; 0x25
 8012ede:	d1f9      	bne.n	8012ed4 <_svfiprintf_r+0x50>
 8012ee0:	ebba 0b04 	subs.w	fp, sl, r4
 8012ee4:	d00b      	beq.n	8012efe <_svfiprintf_r+0x7a>
 8012ee6:	465b      	mov	r3, fp
 8012ee8:	4622      	mov	r2, r4
 8012eea:	4629      	mov	r1, r5
 8012eec:	4638      	mov	r0, r7
 8012eee:	f7ff ff6d 	bl	8012dcc <__ssputs_r>
 8012ef2:	3001      	adds	r0, #1
 8012ef4:	f000 80aa 	beq.w	801304c <_svfiprintf_r+0x1c8>
 8012ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012efa:	445a      	add	r2, fp
 8012efc:	9209      	str	r2, [sp, #36]	; 0x24
 8012efe:	f89a 3000 	ldrb.w	r3, [sl]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	f000 80a2 	beq.w	801304c <_svfiprintf_r+0x1c8>
 8012f08:	2300      	movs	r3, #0
 8012f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8012f0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f12:	f10a 0a01 	add.w	sl, sl, #1
 8012f16:	9304      	str	r3, [sp, #16]
 8012f18:	9307      	str	r3, [sp, #28]
 8012f1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012f1e:	931a      	str	r3, [sp, #104]	; 0x68
 8012f20:	4654      	mov	r4, sl
 8012f22:	2205      	movs	r2, #5
 8012f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f28:	4851      	ldr	r0, [pc, #324]	; (8013070 <_svfiprintf_r+0x1ec>)
 8012f2a:	f7ed f961 	bl	80001f0 <memchr>
 8012f2e:	9a04      	ldr	r2, [sp, #16]
 8012f30:	b9d8      	cbnz	r0, 8012f6a <_svfiprintf_r+0xe6>
 8012f32:	06d0      	lsls	r0, r2, #27
 8012f34:	bf44      	itt	mi
 8012f36:	2320      	movmi	r3, #32
 8012f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f3c:	0711      	lsls	r1, r2, #28
 8012f3e:	bf44      	itt	mi
 8012f40:	232b      	movmi	r3, #43	; 0x2b
 8012f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f46:	f89a 3000 	ldrb.w	r3, [sl]
 8012f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8012f4c:	d015      	beq.n	8012f7a <_svfiprintf_r+0xf6>
 8012f4e:	9a07      	ldr	r2, [sp, #28]
 8012f50:	4654      	mov	r4, sl
 8012f52:	2000      	movs	r0, #0
 8012f54:	f04f 0c0a 	mov.w	ip, #10
 8012f58:	4621      	mov	r1, r4
 8012f5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f5e:	3b30      	subs	r3, #48	; 0x30
 8012f60:	2b09      	cmp	r3, #9
 8012f62:	d94e      	bls.n	8013002 <_svfiprintf_r+0x17e>
 8012f64:	b1b0      	cbz	r0, 8012f94 <_svfiprintf_r+0x110>
 8012f66:	9207      	str	r2, [sp, #28]
 8012f68:	e014      	b.n	8012f94 <_svfiprintf_r+0x110>
 8012f6a:	eba0 0308 	sub.w	r3, r0, r8
 8012f6e:	fa09 f303 	lsl.w	r3, r9, r3
 8012f72:	4313      	orrs	r3, r2
 8012f74:	9304      	str	r3, [sp, #16]
 8012f76:	46a2      	mov	sl, r4
 8012f78:	e7d2      	b.n	8012f20 <_svfiprintf_r+0x9c>
 8012f7a:	9b03      	ldr	r3, [sp, #12]
 8012f7c:	1d19      	adds	r1, r3, #4
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	9103      	str	r1, [sp, #12]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	bfbb      	ittet	lt
 8012f86:	425b      	neglt	r3, r3
 8012f88:	f042 0202 	orrlt.w	r2, r2, #2
 8012f8c:	9307      	strge	r3, [sp, #28]
 8012f8e:	9307      	strlt	r3, [sp, #28]
 8012f90:	bfb8      	it	lt
 8012f92:	9204      	strlt	r2, [sp, #16]
 8012f94:	7823      	ldrb	r3, [r4, #0]
 8012f96:	2b2e      	cmp	r3, #46	; 0x2e
 8012f98:	d10c      	bne.n	8012fb4 <_svfiprintf_r+0x130>
 8012f9a:	7863      	ldrb	r3, [r4, #1]
 8012f9c:	2b2a      	cmp	r3, #42	; 0x2a
 8012f9e:	d135      	bne.n	801300c <_svfiprintf_r+0x188>
 8012fa0:	9b03      	ldr	r3, [sp, #12]
 8012fa2:	1d1a      	adds	r2, r3, #4
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	9203      	str	r2, [sp, #12]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	bfb8      	it	lt
 8012fac:	f04f 33ff 	movlt.w	r3, #4294967295
 8012fb0:	3402      	adds	r4, #2
 8012fb2:	9305      	str	r3, [sp, #20]
 8012fb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013080 <_svfiprintf_r+0x1fc>
 8012fb8:	7821      	ldrb	r1, [r4, #0]
 8012fba:	2203      	movs	r2, #3
 8012fbc:	4650      	mov	r0, sl
 8012fbe:	f7ed f917 	bl	80001f0 <memchr>
 8012fc2:	b140      	cbz	r0, 8012fd6 <_svfiprintf_r+0x152>
 8012fc4:	2340      	movs	r3, #64	; 0x40
 8012fc6:	eba0 000a 	sub.w	r0, r0, sl
 8012fca:	fa03 f000 	lsl.w	r0, r3, r0
 8012fce:	9b04      	ldr	r3, [sp, #16]
 8012fd0:	4303      	orrs	r3, r0
 8012fd2:	3401      	adds	r4, #1
 8012fd4:	9304      	str	r3, [sp, #16]
 8012fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fda:	4826      	ldr	r0, [pc, #152]	; (8013074 <_svfiprintf_r+0x1f0>)
 8012fdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012fe0:	2206      	movs	r2, #6
 8012fe2:	f7ed f905 	bl	80001f0 <memchr>
 8012fe6:	2800      	cmp	r0, #0
 8012fe8:	d038      	beq.n	801305c <_svfiprintf_r+0x1d8>
 8012fea:	4b23      	ldr	r3, [pc, #140]	; (8013078 <_svfiprintf_r+0x1f4>)
 8012fec:	bb1b      	cbnz	r3, 8013036 <_svfiprintf_r+0x1b2>
 8012fee:	9b03      	ldr	r3, [sp, #12]
 8012ff0:	3307      	adds	r3, #7
 8012ff2:	f023 0307 	bic.w	r3, r3, #7
 8012ff6:	3308      	adds	r3, #8
 8012ff8:	9303      	str	r3, [sp, #12]
 8012ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ffc:	4433      	add	r3, r6
 8012ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8013000:	e767      	b.n	8012ed2 <_svfiprintf_r+0x4e>
 8013002:	fb0c 3202 	mla	r2, ip, r2, r3
 8013006:	460c      	mov	r4, r1
 8013008:	2001      	movs	r0, #1
 801300a:	e7a5      	b.n	8012f58 <_svfiprintf_r+0xd4>
 801300c:	2300      	movs	r3, #0
 801300e:	3401      	adds	r4, #1
 8013010:	9305      	str	r3, [sp, #20]
 8013012:	4619      	mov	r1, r3
 8013014:	f04f 0c0a 	mov.w	ip, #10
 8013018:	4620      	mov	r0, r4
 801301a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801301e:	3a30      	subs	r2, #48	; 0x30
 8013020:	2a09      	cmp	r2, #9
 8013022:	d903      	bls.n	801302c <_svfiprintf_r+0x1a8>
 8013024:	2b00      	cmp	r3, #0
 8013026:	d0c5      	beq.n	8012fb4 <_svfiprintf_r+0x130>
 8013028:	9105      	str	r1, [sp, #20]
 801302a:	e7c3      	b.n	8012fb4 <_svfiprintf_r+0x130>
 801302c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013030:	4604      	mov	r4, r0
 8013032:	2301      	movs	r3, #1
 8013034:	e7f0      	b.n	8013018 <_svfiprintf_r+0x194>
 8013036:	ab03      	add	r3, sp, #12
 8013038:	9300      	str	r3, [sp, #0]
 801303a:	462a      	mov	r2, r5
 801303c:	4b0f      	ldr	r3, [pc, #60]	; (801307c <_svfiprintf_r+0x1f8>)
 801303e:	a904      	add	r1, sp, #16
 8013040:	4638      	mov	r0, r7
 8013042:	f7fd fc6b 	bl	801091c <_printf_float>
 8013046:	1c42      	adds	r2, r0, #1
 8013048:	4606      	mov	r6, r0
 801304a:	d1d6      	bne.n	8012ffa <_svfiprintf_r+0x176>
 801304c:	89ab      	ldrh	r3, [r5, #12]
 801304e:	065b      	lsls	r3, r3, #25
 8013050:	f53f af2c 	bmi.w	8012eac <_svfiprintf_r+0x28>
 8013054:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013056:	b01d      	add	sp, #116	; 0x74
 8013058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801305c:	ab03      	add	r3, sp, #12
 801305e:	9300      	str	r3, [sp, #0]
 8013060:	462a      	mov	r2, r5
 8013062:	4b06      	ldr	r3, [pc, #24]	; (801307c <_svfiprintf_r+0x1f8>)
 8013064:	a904      	add	r1, sp, #16
 8013066:	4638      	mov	r0, r7
 8013068:	f7fd fefc 	bl	8010e64 <_printf_i>
 801306c:	e7eb      	b.n	8013046 <_svfiprintf_r+0x1c2>
 801306e:	bf00      	nop
 8013070:	080150d4 	.word	0x080150d4
 8013074:	080150de 	.word	0x080150de
 8013078:	0801091d 	.word	0x0801091d
 801307c:	08012dcd 	.word	0x08012dcd
 8013080:	080150da 	.word	0x080150da

08013084 <__sfputc_r>:
 8013084:	6893      	ldr	r3, [r2, #8]
 8013086:	3b01      	subs	r3, #1
 8013088:	2b00      	cmp	r3, #0
 801308a:	b410      	push	{r4}
 801308c:	6093      	str	r3, [r2, #8]
 801308e:	da08      	bge.n	80130a2 <__sfputc_r+0x1e>
 8013090:	6994      	ldr	r4, [r2, #24]
 8013092:	42a3      	cmp	r3, r4
 8013094:	db01      	blt.n	801309a <__sfputc_r+0x16>
 8013096:	290a      	cmp	r1, #10
 8013098:	d103      	bne.n	80130a2 <__sfputc_r+0x1e>
 801309a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801309e:	f7fe b9ff 	b.w	80114a0 <__swbuf_r>
 80130a2:	6813      	ldr	r3, [r2, #0]
 80130a4:	1c58      	adds	r0, r3, #1
 80130a6:	6010      	str	r0, [r2, #0]
 80130a8:	7019      	strb	r1, [r3, #0]
 80130aa:	4608      	mov	r0, r1
 80130ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130b0:	4770      	bx	lr

080130b2 <__sfputs_r>:
 80130b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130b4:	4606      	mov	r6, r0
 80130b6:	460f      	mov	r7, r1
 80130b8:	4614      	mov	r4, r2
 80130ba:	18d5      	adds	r5, r2, r3
 80130bc:	42ac      	cmp	r4, r5
 80130be:	d101      	bne.n	80130c4 <__sfputs_r+0x12>
 80130c0:	2000      	movs	r0, #0
 80130c2:	e007      	b.n	80130d4 <__sfputs_r+0x22>
 80130c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130c8:	463a      	mov	r2, r7
 80130ca:	4630      	mov	r0, r6
 80130cc:	f7ff ffda 	bl	8013084 <__sfputc_r>
 80130d0:	1c43      	adds	r3, r0, #1
 80130d2:	d1f3      	bne.n	80130bc <__sfputs_r+0xa>
 80130d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080130d8 <_vfiprintf_r>:
 80130d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130dc:	460d      	mov	r5, r1
 80130de:	b09d      	sub	sp, #116	; 0x74
 80130e0:	4614      	mov	r4, r2
 80130e2:	4698      	mov	r8, r3
 80130e4:	4606      	mov	r6, r0
 80130e6:	b118      	cbz	r0, 80130f0 <_vfiprintf_r+0x18>
 80130e8:	6983      	ldr	r3, [r0, #24]
 80130ea:	b90b      	cbnz	r3, 80130f0 <_vfiprintf_r+0x18>
 80130ec:	f7fd f9ec 	bl	80104c8 <__sinit>
 80130f0:	4b89      	ldr	r3, [pc, #548]	; (8013318 <_vfiprintf_r+0x240>)
 80130f2:	429d      	cmp	r5, r3
 80130f4:	d11b      	bne.n	801312e <_vfiprintf_r+0x56>
 80130f6:	6875      	ldr	r5, [r6, #4]
 80130f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80130fa:	07d9      	lsls	r1, r3, #31
 80130fc:	d405      	bmi.n	801310a <_vfiprintf_r+0x32>
 80130fe:	89ab      	ldrh	r3, [r5, #12]
 8013100:	059a      	lsls	r2, r3, #22
 8013102:	d402      	bmi.n	801310a <_vfiprintf_r+0x32>
 8013104:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013106:	f7fd faa2 	bl	801064e <__retarget_lock_acquire_recursive>
 801310a:	89ab      	ldrh	r3, [r5, #12]
 801310c:	071b      	lsls	r3, r3, #28
 801310e:	d501      	bpl.n	8013114 <_vfiprintf_r+0x3c>
 8013110:	692b      	ldr	r3, [r5, #16]
 8013112:	b9eb      	cbnz	r3, 8013150 <_vfiprintf_r+0x78>
 8013114:	4629      	mov	r1, r5
 8013116:	4630      	mov	r0, r6
 8013118:	f7fe fa26 	bl	8011568 <__swsetup_r>
 801311c:	b1c0      	cbz	r0, 8013150 <_vfiprintf_r+0x78>
 801311e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013120:	07dc      	lsls	r4, r3, #31
 8013122:	d50e      	bpl.n	8013142 <_vfiprintf_r+0x6a>
 8013124:	f04f 30ff 	mov.w	r0, #4294967295
 8013128:	b01d      	add	sp, #116	; 0x74
 801312a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801312e:	4b7b      	ldr	r3, [pc, #492]	; (801331c <_vfiprintf_r+0x244>)
 8013130:	429d      	cmp	r5, r3
 8013132:	d101      	bne.n	8013138 <_vfiprintf_r+0x60>
 8013134:	68b5      	ldr	r5, [r6, #8]
 8013136:	e7df      	b.n	80130f8 <_vfiprintf_r+0x20>
 8013138:	4b79      	ldr	r3, [pc, #484]	; (8013320 <_vfiprintf_r+0x248>)
 801313a:	429d      	cmp	r5, r3
 801313c:	bf08      	it	eq
 801313e:	68f5      	ldreq	r5, [r6, #12]
 8013140:	e7da      	b.n	80130f8 <_vfiprintf_r+0x20>
 8013142:	89ab      	ldrh	r3, [r5, #12]
 8013144:	0598      	lsls	r0, r3, #22
 8013146:	d4ed      	bmi.n	8013124 <_vfiprintf_r+0x4c>
 8013148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801314a:	f7fd fa81 	bl	8010650 <__retarget_lock_release_recursive>
 801314e:	e7e9      	b.n	8013124 <_vfiprintf_r+0x4c>
 8013150:	2300      	movs	r3, #0
 8013152:	9309      	str	r3, [sp, #36]	; 0x24
 8013154:	2320      	movs	r3, #32
 8013156:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801315a:	f8cd 800c 	str.w	r8, [sp, #12]
 801315e:	2330      	movs	r3, #48	; 0x30
 8013160:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013324 <_vfiprintf_r+0x24c>
 8013164:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013168:	f04f 0901 	mov.w	r9, #1
 801316c:	4623      	mov	r3, r4
 801316e:	469a      	mov	sl, r3
 8013170:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013174:	b10a      	cbz	r2, 801317a <_vfiprintf_r+0xa2>
 8013176:	2a25      	cmp	r2, #37	; 0x25
 8013178:	d1f9      	bne.n	801316e <_vfiprintf_r+0x96>
 801317a:	ebba 0b04 	subs.w	fp, sl, r4
 801317e:	d00b      	beq.n	8013198 <_vfiprintf_r+0xc0>
 8013180:	465b      	mov	r3, fp
 8013182:	4622      	mov	r2, r4
 8013184:	4629      	mov	r1, r5
 8013186:	4630      	mov	r0, r6
 8013188:	f7ff ff93 	bl	80130b2 <__sfputs_r>
 801318c:	3001      	adds	r0, #1
 801318e:	f000 80aa 	beq.w	80132e6 <_vfiprintf_r+0x20e>
 8013192:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013194:	445a      	add	r2, fp
 8013196:	9209      	str	r2, [sp, #36]	; 0x24
 8013198:	f89a 3000 	ldrb.w	r3, [sl]
 801319c:	2b00      	cmp	r3, #0
 801319e:	f000 80a2 	beq.w	80132e6 <_vfiprintf_r+0x20e>
 80131a2:	2300      	movs	r3, #0
 80131a4:	f04f 32ff 	mov.w	r2, #4294967295
 80131a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131ac:	f10a 0a01 	add.w	sl, sl, #1
 80131b0:	9304      	str	r3, [sp, #16]
 80131b2:	9307      	str	r3, [sp, #28]
 80131b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80131b8:	931a      	str	r3, [sp, #104]	; 0x68
 80131ba:	4654      	mov	r4, sl
 80131bc:	2205      	movs	r2, #5
 80131be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131c2:	4858      	ldr	r0, [pc, #352]	; (8013324 <_vfiprintf_r+0x24c>)
 80131c4:	f7ed f814 	bl	80001f0 <memchr>
 80131c8:	9a04      	ldr	r2, [sp, #16]
 80131ca:	b9d8      	cbnz	r0, 8013204 <_vfiprintf_r+0x12c>
 80131cc:	06d1      	lsls	r1, r2, #27
 80131ce:	bf44      	itt	mi
 80131d0:	2320      	movmi	r3, #32
 80131d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80131d6:	0713      	lsls	r3, r2, #28
 80131d8:	bf44      	itt	mi
 80131da:	232b      	movmi	r3, #43	; 0x2b
 80131dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80131e0:	f89a 3000 	ldrb.w	r3, [sl]
 80131e4:	2b2a      	cmp	r3, #42	; 0x2a
 80131e6:	d015      	beq.n	8013214 <_vfiprintf_r+0x13c>
 80131e8:	9a07      	ldr	r2, [sp, #28]
 80131ea:	4654      	mov	r4, sl
 80131ec:	2000      	movs	r0, #0
 80131ee:	f04f 0c0a 	mov.w	ip, #10
 80131f2:	4621      	mov	r1, r4
 80131f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80131f8:	3b30      	subs	r3, #48	; 0x30
 80131fa:	2b09      	cmp	r3, #9
 80131fc:	d94e      	bls.n	801329c <_vfiprintf_r+0x1c4>
 80131fe:	b1b0      	cbz	r0, 801322e <_vfiprintf_r+0x156>
 8013200:	9207      	str	r2, [sp, #28]
 8013202:	e014      	b.n	801322e <_vfiprintf_r+0x156>
 8013204:	eba0 0308 	sub.w	r3, r0, r8
 8013208:	fa09 f303 	lsl.w	r3, r9, r3
 801320c:	4313      	orrs	r3, r2
 801320e:	9304      	str	r3, [sp, #16]
 8013210:	46a2      	mov	sl, r4
 8013212:	e7d2      	b.n	80131ba <_vfiprintf_r+0xe2>
 8013214:	9b03      	ldr	r3, [sp, #12]
 8013216:	1d19      	adds	r1, r3, #4
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	9103      	str	r1, [sp, #12]
 801321c:	2b00      	cmp	r3, #0
 801321e:	bfbb      	ittet	lt
 8013220:	425b      	neglt	r3, r3
 8013222:	f042 0202 	orrlt.w	r2, r2, #2
 8013226:	9307      	strge	r3, [sp, #28]
 8013228:	9307      	strlt	r3, [sp, #28]
 801322a:	bfb8      	it	lt
 801322c:	9204      	strlt	r2, [sp, #16]
 801322e:	7823      	ldrb	r3, [r4, #0]
 8013230:	2b2e      	cmp	r3, #46	; 0x2e
 8013232:	d10c      	bne.n	801324e <_vfiprintf_r+0x176>
 8013234:	7863      	ldrb	r3, [r4, #1]
 8013236:	2b2a      	cmp	r3, #42	; 0x2a
 8013238:	d135      	bne.n	80132a6 <_vfiprintf_r+0x1ce>
 801323a:	9b03      	ldr	r3, [sp, #12]
 801323c:	1d1a      	adds	r2, r3, #4
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	9203      	str	r2, [sp, #12]
 8013242:	2b00      	cmp	r3, #0
 8013244:	bfb8      	it	lt
 8013246:	f04f 33ff 	movlt.w	r3, #4294967295
 801324a:	3402      	adds	r4, #2
 801324c:	9305      	str	r3, [sp, #20]
 801324e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013334 <_vfiprintf_r+0x25c>
 8013252:	7821      	ldrb	r1, [r4, #0]
 8013254:	2203      	movs	r2, #3
 8013256:	4650      	mov	r0, sl
 8013258:	f7ec ffca 	bl	80001f0 <memchr>
 801325c:	b140      	cbz	r0, 8013270 <_vfiprintf_r+0x198>
 801325e:	2340      	movs	r3, #64	; 0x40
 8013260:	eba0 000a 	sub.w	r0, r0, sl
 8013264:	fa03 f000 	lsl.w	r0, r3, r0
 8013268:	9b04      	ldr	r3, [sp, #16]
 801326a:	4303      	orrs	r3, r0
 801326c:	3401      	adds	r4, #1
 801326e:	9304      	str	r3, [sp, #16]
 8013270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013274:	482c      	ldr	r0, [pc, #176]	; (8013328 <_vfiprintf_r+0x250>)
 8013276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801327a:	2206      	movs	r2, #6
 801327c:	f7ec ffb8 	bl	80001f0 <memchr>
 8013280:	2800      	cmp	r0, #0
 8013282:	d03f      	beq.n	8013304 <_vfiprintf_r+0x22c>
 8013284:	4b29      	ldr	r3, [pc, #164]	; (801332c <_vfiprintf_r+0x254>)
 8013286:	bb1b      	cbnz	r3, 80132d0 <_vfiprintf_r+0x1f8>
 8013288:	9b03      	ldr	r3, [sp, #12]
 801328a:	3307      	adds	r3, #7
 801328c:	f023 0307 	bic.w	r3, r3, #7
 8013290:	3308      	adds	r3, #8
 8013292:	9303      	str	r3, [sp, #12]
 8013294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013296:	443b      	add	r3, r7
 8013298:	9309      	str	r3, [sp, #36]	; 0x24
 801329a:	e767      	b.n	801316c <_vfiprintf_r+0x94>
 801329c:	fb0c 3202 	mla	r2, ip, r2, r3
 80132a0:	460c      	mov	r4, r1
 80132a2:	2001      	movs	r0, #1
 80132a4:	e7a5      	b.n	80131f2 <_vfiprintf_r+0x11a>
 80132a6:	2300      	movs	r3, #0
 80132a8:	3401      	adds	r4, #1
 80132aa:	9305      	str	r3, [sp, #20]
 80132ac:	4619      	mov	r1, r3
 80132ae:	f04f 0c0a 	mov.w	ip, #10
 80132b2:	4620      	mov	r0, r4
 80132b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132b8:	3a30      	subs	r2, #48	; 0x30
 80132ba:	2a09      	cmp	r2, #9
 80132bc:	d903      	bls.n	80132c6 <_vfiprintf_r+0x1ee>
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d0c5      	beq.n	801324e <_vfiprintf_r+0x176>
 80132c2:	9105      	str	r1, [sp, #20]
 80132c4:	e7c3      	b.n	801324e <_vfiprintf_r+0x176>
 80132c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80132ca:	4604      	mov	r4, r0
 80132cc:	2301      	movs	r3, #1
 80132ce:	e7f0      	b.n	80132b2 <_vfiprintf_r+0x1da>
 80132d0:	ab03      	add	r3, sp, #12
 80132d2:	9300      	str	r3, [sp, #0]
 80132d4:	462a      	mov	r2, r5
 80132d6:	4b16      	ldr	r3, [pc, #88]	; (8013330 <_vfiprintf_r+0x258>)
 80132d8:	a904      	add	r1, sp, #16
 80132da:	4630      	mov	r0, r6
 80132dc:	f7fd fb1e 	bl	801091c <_printf_float>
 80132e0:	4607      	mov	r7, r0
 80132e2:	1c78      	adds	r0, r7, #1
 80132e4:	d1d6      	bne.n	8013294 <_vfiprintf_r+0x1bc>
 80132e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80132e8:	07d9      	lsls	r1, r3, #31
 80132ea:	d405      	bmi.n	80132f8 <_vfiprintf_r+0x220>
 80132ec:	89ab      	ldrh	r3, [r5, #12]
 80132ee:	059a      	lsls	r2, r3, #22
 80132f0:	d402      	bmi.n	80132f8 <_vfiprintf_r+0x220>
 80132f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80132f4:	f7fd f9ac 	bl	8010650 <__retarget_lock_release_recursive>
 80132f8:	89ab      	ldrh	r3, [r5, #12]
 80132fa:	065b      	lsls	r3, r3, #25
 80132fc:	f53f af12 	bmi.w	8013124 <_vfiprintf_r+0x4c>
 8013300:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013302:	e711      	b.n	8013128 <_vfiprintf_r+0x50>
 8013304:	ab03      	add	r3, sp, #12
 8013306:	9300      	str	r3, [sp, #0]
 8013308:	462a      	mov	r2, r5
 801330a:	4b09      	ldr	r3, [pc, #36]	; (8013330 <_vfiprintf_r+0x258>)
 801330c:	a904      	add	r1, sp, #16
 801330e:	4630      	mov	r0, r6
 8013310:	f7fd fda8 	bl	8010e64 <_printf_i>
 8013314:	e7e4      	b.n	80132e0 <_vfiprintf_r+0x208>
 8013316:	bf00      	nop
 8013318:	08014d6c 	.word	0x08014d6c
 801331c:	08014d8c 	.word	0x08014d8c
 8013320:	08014d4c 	.word	0x08014d4c
 8013324:	080150d4 	.word	0x080150d4
 8013328:	080150de 	.word	0x080150de
 801332c:	0801091d 	.word	0x0801091d
 8013330:	080130b3 	.word	0x080130b3
 8013334:	080150da 	.word	0x080150da

08013338 <_read_r>:
 8013338:	b538      	push	{r3, r4, r5, lr}
 801333a:	4d07      	ldr	r5, [pc, #28]	; (8013358 <_read_r+0x20>)
 801333c:	4604      	mov	r4, r0
 801333e:	4608      	mov	r0, r1
 8013340:	4611      	mov	r1, r2
 8013342:	2200      	movs	r2, #0
 8013344:	602a      	str	r2, [r5, #0]
 8013346:	461a      	mov	r2, r3
 8013348:	f7f1 fbb4 	bl	8004ab4 <_read>
 801334c:	1c43      	adds	r3, r0, #1
 801334e:	d102      	bne.n	8013356 <_read_r+0x1e>
 8013350:	682b      	ldr	r3, [r5, #0]
 8013352:	b103      	cbz	r3, 8013356 <_read_r+0x1e>
 8013354:	6023      	str	r3, [r4, #0]
 8013356:	bd38      	pop	{r3, r4, r5, pc}
 8013358:	20005e44 	.word	0x20005e44

0801335c <__assert_func>:
 801335c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801335e:	4614      	mov	r4, r2
 8013360:	461a      	mov	r2, r3
 8013362:	4b09      	ldr	r3, [pc, #36]	; (8013388 <__assert_func+0x2c>)
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	4605      	mov	r5, r0
 8013368:	68d8      	ldr	r0, [r3, #12]
 801336a:	b14c      	cbz	r4, 8013380 <__assert_func+0x24>
 801336c:	4b07      	ldr	r3, [pc, #28]	; (801338c <__assert_func+0x30>)
 801336e:	9100      	str	r1, [sp, #0]
 8013370:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013374:	4906      	ldr	r1, [pc, #24]	; (8013390 <__assert_func+0x34>)
 8013376:	462b      	mov	r3, r5
 8013378:	f000 f80e 	bl	8013398 <fiprintf>
 801337c:	f000 f88e 	bl	801349c <abort>
 8013380:	4b04      	ldr	r3, [pc, #16]	; (8013394 <__assert_func+0x38>)
 8013382:	461c      	mov	r4, r3
 8013384:	e7f3      	b.n	801336e <__assert_func+0x12>
 8013386:	bf00      	nop
 8013388:	20000114 	.word	0x20000114
 801338c:	080150e5 	.word	0x080150e5
 8013390:	080150f2 	.word	0x080150f2
 8013394:	08015120 	.word	0x08015120

08013398 <fiprintf>:
 8013398:	b40e      	push	{r1, r2, r3}
 801339a:	b503      	push	{r0, r1, lr}
 801339c:	4601      	mov	r1, r0
 801339e:	ab03      	add	r3, sp, #12
 80133a0:	4805      	ldr	r0, [pc, #20]	; (80133b8 <fiprintf+0x20>)
 80133a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80133a6:	6800      	ldr	r0, [r0, #0]
 80133a8:	9301      	str	r3, [sp, #4]
 80133aa:	f7ff fe95 	bl	80130d8 <_vfiprintf_r>
 80133ae:	b002      	add	sp, #8
 80133b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80133b4:	b003      	add	sp, #12
 80133b6:	4770      	bx	lr
 80133b8:	20000114 	.word	0x20000114

080133bc <_fstat_r>:
 80133bc:	b538      	push	{r3, r4, r5, lr}
 80133be:	4d07      	ldr	r5, [pc, #28]	; (80133dc <_fstat_r+0x20>)
 80133c0:	2300      	movs	r3, #0
 80133c2:	4604      	mov	r4, r0
 80133c4:	4608      	mov	r0, r1
 80133c6:	4611      	mov	r1, r2
 80133c8:	602b      	str	r3, [r5, #0]
 80133ca:	f7f1 fb9c 	bl	8004b06 <_fstat>
 80133ce:	1c43      	adds	r3, r0, #1
 80133d0:	d102      	bne.n	80133d8 <_fstat_r+0x1c>
 80133d2:	682b      	ldr	r3, [r5, #0]
 80133d4:	b103      	cbz	r3, 80133d8 <_fstat_r+0x1c>
 80133d6:	6023      	str	r3, [r4, #0]
 80133d8:	bd38      	pop	{r3, r4, r5, pc}
 80133da:	bf00      	nop
 80133dc:	20005e44 	.word	0x20005e44

080133e0 <_isatty_r>:
 80133e0:	b538      	push	{r3, r4, r5, lr}
 80133e2:	4d06      	ldr	r5, [pc, #24]	; (80133fc <_isatty_r+0x1c>)
 80133e4:	2300      	movs	r3, #0
 80133e6:	4604      	mov	r4, r0
 80133e8:	4608      	mov	r0, r1
 80133ea:	602b      	str	r3, [r5, #0]
 80133ec:	f7f1 fb9b 	bl	8004b26 <_isatty>
 80133f0:	1c43      	adds	r3, r0, #1
 80133f2:	d102      	bne.n	80133fa <_isatty_r+0x1a>
 80133f4:	682b      	ldr	r3, [r5, #0]
 80133f6:	b103      	cbz	r3, 80133fa <_isatty_r+0x1a>
 80133f8:	6023      	str	r3, [r4, #0]
 80133fa:	bd38      	pop	{r3, r4, r5, pc}
 80133fc:	20005e44 	.word	0x20005e44

08013400 <__ascii_mbtowc>:
 8013400:	b082      	sub	sp, #8
 8013402:	b901      	cbnz	r1, 8013406 <__ascii_mbtowc+0x6>
 8013404:	a901      	add	r1, sp, #4
 8013406:	b142      	cbz	r2, 801341a <__ascii_mbtowc+0x1a>
 8013408:	b14b      	cbz	r3, 801341e <__ascii_mbtowc+0x1e>
 801340a:	7813      	ldrb	r3, [r2, #0]
 801340c:	600b      	str	r3, [r1, #0]
 801340e:	7812      	ldrb	r2, [r2, #0]
 8013410:	1e10      	subs	r0, r2, #0
 8013412:	bf18      	it	ne
 8013414:	2001      	movne	r0, #1
 8013416:	b002      	add	sp, #8
 8013418:	4770      	bx	lr
 801341a:	4610      	mov	r0, r2
 801341c:	e7fb      	b.n	8013416 <__ascii_mbtowc+0x16>
 801341e:	f06f 0001 	mvn.w	r0, #1
 8013422:	e7f8      	b.n	8013416 <__ascii_mbtowc+0x16>

08013424 <_realloc_r>:
 8013424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013428:	4680      	mov	r8, r0
 801342a:	4614      	mov	r4, r2
 801342c:	460e      	mov	r6, r1
 801342e:	b921      	cbnz	r1, 801343a <_realloc_r+0x16>
 8013430:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013434:	4611      	mov	r1, r2
 8013436:	f7fd b95d 	b.w	80106f4 <_malloc_r>
 801343a:	b92a      	cbnz	r2, 8013448 <_realloc_r+0x24>
 801343c:	f7ff fc7a 	bl	8012d34 <_free_r>
 8013440:	4625      	mov	r5, r4
 8013442:	4628      	mov	r0, r5
 8013444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013448:	f000 f82f 	bl	80134aa <_malloc_usable_size_r>
 801344c:	4284      	cmp	r4, r0
 801344e:	4607      	mov	r7, r0
 8013450:	d802      	bhi.n	8013458 <_realloc_r+0x34>
 8013452:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013456:	d812      	bhi.n	801347e <_realloc_r+0x5a>
 8013458:	4621      	mov	r1, r4
 801345a:	4640      	mov	r0, r8
 801345c:	f7fd f94a 	bl	80106f4 <_malloc_r>
 8013460:	4605      	mov	r5, r0
 8013462:	2800      	cmp	r0, #0
 8013464:	d0ed      	beq.n	8013442 <_realloc_r+0x1e>
 8013466:	42bc      	cmp	r4, r7
 8013468:	4622      	mov	r2, r4
 801346a:	4631      	mov	r1, r6
 801346c:	bf28      	it	cs
 801346e:	463a      	movcs	r2, r7
 8013470:	f7fd f8ef 	bl	8010652 <memcpy>
 8013474:	4631      	mov	r1, r6
 8013476:	4640      	mov	r0, r8
 8013478:	f7ff fc5c 	bl	8012d34 <_free_r>
 801347c:	e7e1      	b.n	8013442 <_realloc_r+0x1e>
 801347e:	4635      	mov	r5, r6
 8013480:	e7df      	b.n	8013442 <_realloc_r+0x1e>

08013482 <__ascii_wctomb>:
 8013482:	b149      	cbz	r1, 8013498 <__ascii_wctomb+0x16>
 8013484:	2aff      	cmp	r2, #255	; 0xff
 8013486:	bf85      	ittet	hi
 8013488:	238a      	movhi	r3, #138	; 0x8a
 801348a:	6003      	strhi	r3, [r0, #0]
 801348c:	700a      	strbls	r2, [r1, #0]
 801348e:	f04f 30ff 	movhi.w	r0, #4294967295
 8013492:	bf98      	it	ls
 8013494:	2001      	movls	r0, #1
 8013496:	4770      	bx	lr
 8013498:	4608      	mov	r0, r1
 801349a:	4770      	bx	lr

0801349c <abort>:
 801349c:	b508      	push	{r3, lr}
 801349e:	2006      	movs	r0, #6
 80134a0:	f000 f834 	bl	801350c <raise>
 80134a4:	2001      	movs	r0, #1
 80134a6:	f7f1 fafb 	bl	8004aa0 <_exit>

080134aa <_malloc_usable_size_r>:
 80134aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80134ae:	1f18      	subs	r0, r3, #4
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	bfbc      	itt	lt
 80134b4:	580b      	ldrlt	r3, [r1, r0]
 80134b6:	18c0      	addlt	r0, r0, r3
 80134b8:	4770      	bx	lr

080134ba <_raise_r>:
 80134ba:	291f      	cmp	r1, #31
 80134bc:	b538      	push	{r3, r4, r5, lr}
 80134be:	4604      	mov	r4, r0
 80134c0:	460d      	mov	r5, r1
 80134c2:	d904      	bls.n	80134ce <_raise_r+0x14>
 80134c4:	2316      	movs	r3, #22
 80134c6:	6003      	str	r3, [r0, #0]
 80134c8:	f04f 30ff 	mov.w	r0, #4294967295
 80134cc:	bd38      	pop	{r3, r4, r5, pc}
 80134ce:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80134d0:	b112      	cbz	r2, 80134d8 <_raise_r+0x1e>
 80134d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80134d6:	b94b      	cbnz	r3, 80134ec <_raise_r+0x32>
 80134d8:	4620      	mov	r0, r4
 80134da:	f000 f831 	bl	8013540 <_getpid_r>
 80134de:	462a      	mov	r2, r5
 80134e0:	4601      	mov	r1, r0
 80134e2:	4620      	mov	r0, r4
 80134e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134e8:	f000 b818 	b.w	801351c <_kill_r>
 80134ec:	2b01      	cmp	r3, #1
 80134ee:	d00a      	beq.n	8013506 <_raise_r+0x4c>
 80134f0:	1c59      	adds	r1, r3, #1
 80134f2:	d103      	bne.n	80134fc <_raise_r+0x42>
 80134f4:	2316      	movs	r3, #22
 80134f6:	6003      	str	r3, [r0, #0]
 80134f8:	2001      	movs	r0, #1
 80134fa:	e7e7      	b.n	80134cc <_raise_r+0x12>
 80134fc:	2400      	movs	r4, #0
 80134fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013502:	4628      	mov	r0, r5
 8013504:	4798      	blx	r3
 8013506:	2000      	movs	r0, #0
 8013508:	e7e0      	b.n	80134cc <_raise_r+0x12>
	...

0801350c <raise>:
 801350c:	4b02      	ldr	r3, [pc, #8]	; (8013518 <raise+0xc>)
 801350e:	4601      	mov	r1, r0
 8013510:	6818      	ldr	r0, [r3, #0]
 8013512:	f7ff bfd2 	b.w	80134ba <_raise_r>
 8013516:	bf00      	nop
 8013518:	20000114 	.word	0x20000114

0801351c <_kill_r>:
 801351c:	b538      	push	{r3, r4, r5, lr}
 801351e:	4d07      	ldr	r5, [pc, #28]	; (801353c <_kill_r+0x20>)
 8013520:	2300      	movs	r3, #0
 8013522:	4604      	mov	r4, r0
 8013524:	4608      	mov	r0, r1
 8013526:	4611      	mov	r1, r2
 8013528:	602b      	str	r3, [r5, #0]
 801352a:	f7f1 faa9 	bl	8004a80 <_kill>
 801352e:	1c43      	adds	r3, r0, #1
 8013530:	d102      	bne.n	8013538 <_kill_r+0x1c>
 8013532:	682b      	ldr	r3, [r5, #0]
 8013534:	b103      	cbz	r3, 8013538 <_kill_r+0x1c>
 8013536:	6023      	str	r3, [r4, #0]
 8013538:	bd38      	pop	{r3, r4, r5, pc}
 801353a:	bf00      	nop
 801353c:	20005e44 	.word	0x20005e44

08013540 <_getpid_r>:
 8013540:	f7f1 ba96 	b.w	8004a70 <_getpid>

08013544 <_init>:
 8013544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013546:	bf00      	nop
 8013548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801354a:	bc08      	pop	{r3}
 801354c:	469e      	mov	lr, r3
 801354e:	4770      	bx	lr

08013550 <_fini>:
 8013550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013552:	bf00      	nop
 8013554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013556:	bc08      	pop	{r3}
 8013558:	469e      	mov	lr, r3
 801355a:	4770      	bx	lr
