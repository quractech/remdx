
FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e6c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bcc  08013010  08013010  00023010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014bdc  08014bdc  000302e4  2**0
                  CONTENTS
  4 .ARM          00000008  08014bdc  08014bdc  00024bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014be4  08014be4  000302e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014be4  08014be4  00024be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014be8  08014be8  00024be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  08014bec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005bb0  200002e4  08014ed0  000302e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005e94  08014ed0  00035e94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b321  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006999  00000000  00000000  0005b635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002308  00000000  00000000  00061fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fe8  00000000  00000000  000642d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024bf1  00000000  00000000  000662c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032451  00000000  00000000  0008aeb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac37b  00000000  00000000  000bd302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016967d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1ac  00000000  00000000  001696d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e4 	.word	0x200002e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012ff4 	.word	0x08012ff4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e8 	.word	0x200002e8
 80001dc:	08012ff4 	.word	0x08012ff4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig =
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000fae:	4b38      	ldr	r3, [pc, #224]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fb0:	4a38      	ldr	r2, [pc, #224]	; (8001094 <MX_ADC1_Init+0xf8>)
 8000fb2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fb4:	4b36      	ldr	r3, [pc, #216]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fba:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fbc:	4b34      	ldr	r3, [pc, #208]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000fc2:	4b33      	ldr	r3, [pc, #204]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000fc8:	4b31      	ldr	r3, [pc, #196]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fce:	4b30      	ldr	r3, [pc, #192]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fde:	4a2e      	ldr	r2, [pc, #184]	; (8001098 <MX_ADC1_Init+0xfc>)
 8000fe0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe2:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 4;
 8000fe8:	4b29      	ldr	r3, [pc, #164]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fea:	2204      	movs	r2, #4
 8000fec:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fee:	4b28      	ldr	r3, [pc, #160]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ff6:	4b26      	ldr	r3, [pc, #152]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ffc:	4824      	ldr	r0, [pc, #144]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000ffe:	f003 fcc1 	bl	8004984 <HAL_ADC_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8001008:	f001 fe54 	bl	8002cb4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 800100c:	2308      	movs	r3, #8
 800100e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001010:	2301      	movs	r3, #1
 8001012:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001014:	2306      	movs	r3, #6
 8001016:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001018:	463b      	mov	r3, r7
 800101a:	4619      	mov	r1, r3
 800101c:	481c      	ldr	r0, [pc, #112]	; (8001090 <MX_ADC1_Init+0xf4>)
 800101e:	f003 fe03 	bl	8004c28 <HAL_ADC_ConfigChannel>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8001028:	f001 fe44 	bl	8002cb4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800102c:	2309      	movs	r3, #9
 800102e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8001030:	2302      	movs	r3, #2
 8001032:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	4619      	mov	r1, r3
 8001038:	4815      	ldr	r0, [pc, #84]	; (8001090 <MX_ADC1_Init+0xf4>)
 800103a:	f003 fdf5 	bl	8004c28 <HAL_ADC_ConfigChannel>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 8001044:	f001 fe36 	bl	8002cb4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001048:	2310      	movs	r3, #16
 800104a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 800104c:	2303      	movs	r3, #3
 800104e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001050:	2307      	movs	r3, #7
 8001052:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001054:	463b      	mov	r3, r7
 8001056:	4619      	mov	r1, r3
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_ADC1_Init+0xf4>)
 800105a:	f003 fde5 	bl	8004c28 <HAL_ADC_ConfigChannel>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC1_Init+0xcc>
	{
		Error_Handler();
 8001064:	f001 fe26 	bl	8002cb4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001068:	2311      	movs	r3, #17
 800106a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 800106c:	2304      	movs	r3, #4
 800106e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001070:	2306      	movs	r3, #6
 8001072:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_ADC1_Init+0xf4>)
 800107a:	f003 fdd5 	bl	8004c28 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0xec>
	{
		Error_Handler();
 8001084:	f001 fe16 	bl	8002cb4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000300 	.word	0x20000300
 8001094:	40012000 	.word	0x40012000
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (adcHandle->Instance == ADC1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <HAL_ADC_MspInit+0xdc>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d158      	bne.n	8001170 <HAL_ADC_MspInit+0xd4>
	{
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a2d      	ldr	r2, [pc, #180]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a26      	ldr	r2, [pc, #152]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
		/**ADC1 GPIO Configuration
		 PB0     ------> ADC1_IN8
		 PB1     ------> ADC1_IN9
		 */
		GPIO_InitStruct.Pin = ANA_IN0_Pin | ANA_IN1_Pin;
 80010f6:	2303      	movs	r3, #3
 80010f8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	481d      	ldr	r0, [pc, #116]	; (8001180 <HAL_ADC_MspInit+0xe4>)
 800110a:	f004 fc9b 	bl	8005a44 <HAL_GPIO_Init>

		/* ADC1 DMA Init */
		/* ADC1 Init */
		hdma_adc1.Instance = DMA2_Stream0;
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001110:	4a1d      	ldr	r2, [pc, #116]	; (8001188 <HAL_ADC_MspInit+0xec>)
 8001112:	601a      	str	r2, [r3, #0]
		hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111a:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001120:	4b18      	ldr	r3, [pc, #96]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001126:	4b17      	ldr	r3, [pc, #92]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001128:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112c:	611a      	str	r2, [r3, #16]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001130:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001134:	615a      	str	r2, [r3, #20]
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001138:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800113c:	619a      	str	r2, [r3, #24]
		hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001140:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001144:	61da      	str	r2, [r3, #28]
		hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001148:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800114c:	621a      	str	r2, [r3, #32]
		hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001156:	f004 f905 	bl	8005364 <HAL_DMA_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_ADC_MspInit+0xc8>
		{
			Error_Handler();
 8001160:	f001 fda8 	bl	8002cb4 <Error_Handler>
		}

		__HAL_LINKDMA(adcHandle, DMA_Handle, hdma_adc1);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001168:	639a      	str	r2, [r3, #56]	; 0x38
 800116a:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6393      	str	r3, [r2, #56]	; 0x38

		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 8001170:	bf00      	nop
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40012000 	.word	0x40012000
 800117c:	40023800 	.word	0x40023800
 8001180:	40020400 	.word	0x40020400
 8001184:	20000348 	.word	0x20000348
 8001188:	40026410 	.word	0x40026410

0800118c <adcRead>:
	}
}

/* USER CODE BEGIN 1 */
uint32_t adcRead(uint16_t channel)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]
	return adc_data[channel];
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <adcRead+0x20>)
 800119a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	200006a8 	.word	0x200006a8

080011b0 <EEPROMWriteByte>:
	float floatVariable = thing.a;
	return floatVariable;
}

void EEPROMWriteByte(uint16_t page, uint16_t offset, uint8_t *data)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af04      	add	r7, sp, #16
 80011b6:	4603      	mov	r3, r0
 80011b8:	603a      	str	r2, [r7, #0]
 80011ba:	80fb      	strh	r3, [r7, #6]
 80011bc:	460b      	mov	r3, r1
 80011be:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2120      	movs	r1, #32
 80011c4:	4817      	ldr	r0, [pc, #92]	; (8001224 <EEPROMWriteByte+0x74>)
 80011c6:	f004 fdd9 	bl	8005d7c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80011ca:	2001      	movs	r0, #1
 80011cc:	f003 fbb6 	bl	800493c <HAL_Delay>
	int paddrposition = 6;
 80011d0:	2306      	movs	r3, #6
 80011d2:	617b      	str	r3, [r7, #20]
	uint16_t startPage = page;
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	827b      	strh	r3, [r7, #18]
	uint16_t endPage = page;
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	823b      	strh	r3, [r7, #16]
	uint16_t MemAddress = ((startPage << paddrposition) | offset);
 80011dc:	8a7a      	ldrh	r2, [r7, #18]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	81fb      	strh	r3, [r7, #14]

	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data, 1, 1000);
 80011f0:	89fa      	ldrh	r2, [r7, #14]
 80011f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	2301      	movs	r3, #1
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	463b      	mov	r3, r7
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2302      	movs	r3, #2
 8001202:	21a0      	movs	r1, #160	; 0xa0
 8001204:	4808      	ldr	r0, [pc, #32]	; (8001228 <EEPROMWriteByte+0x78>)
 8001206:	f005 fa79 	bl	80066fc <HAL_I2C_Mem_Write>
	HAL_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, SET);
 800120a:	2201      	movs	r2, #1
 800120c:	2120      	movs	r1, #32
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <EEPROMWriteByte+0x74>)
 8001210:	f004 fdb4 	bl	8005d7c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001214:	2001      	movs	r0, #1
 8001216:	f003 fb91 	bl	800493c <HAL_Delay>
}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40020400 	.word	0x40020400
 8001228:	200006d0 	.word	0x200006d0

0800122c <EEPROMReadByte>:
		HAL_Delay(1);
	}
}

uint8_t EEPROMReadByte(uint16_t page, uint16_t offset)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af04      	add	r7, sp, #16
 8001232:	4603      	mov	r3, r0
 8001234:	460a      	mov	r2, r1
 8001236:	80fb      	strh	r3, [r7, #6]
 8001238:	4613      	mov	r3, r2
 800123a:	80bb      	strh	r3, [r7, #4]
	uint8_t *data;
	int paddrposition = 6;
 800123c:	2306      	movs	r3, #6
 800123e:	617b      	str	r3, [r7, #20]
	uint16_t startPage = page;
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	827b      	strh	r3, [r7, #18]
	uint16_t endPage = page;
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	823b      	strh	r3, [r7, #16]
	uint16_t MemAddress = ((startPage << paddrposition) | offset);
 8001248:	8a7a      	ldrh	r2, [r7, #18]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	b21a      	sxth	r2, r3
 8001252:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001256:	4313      	orrs	r3, r2
 8001258:	b21b      	sxth	r3, r3
 800125a:	81fb      	strh	r3, [r7, #14]

	HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data, 1, 1000);
 800125c:	89fa      	ldrh	r2, [r7, #14]
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	2301      	movs	r3, #1
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2302      	movs	r3, #2
 8001270:	21a0      	movs	r1, #160	; 0xa0
 8001272:	4804      	ldr	r0, [pc, #16]	; (8001284 <EEPROMReadByte+0x58>)
 8001274:	f005 fb3c 	bl	80068f0 <HAL_I2C_Mem_Read>
	return data;
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	b2db      	uxtb	r3, r3
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200006d0 	.word	0x200006d0

08001288 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_DMA_Init+0x3c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <MX_DMA_Init+0x3c>)
 8001298:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_DMA_Init+0x3c>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2105      	movs	r1, #5
 80012ae:	2038      	movs	r0, #56	; 0x38
 80012b0:	f004 f829 	bl	8005306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012b4:	2038      	movs	r0, #56	; 0x38
 80012b6:	f004 f842 	bl	800533e <HAL_NVIC_EnableIRQ>

}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800

080012c8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
	/* This function will be called by each tick interrupt if
	 configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
	 added here, but the tick hook is called from an interrupt context, so
	 code must not attempt to block, and only the interrupt safe FreeRTOS API
	 functions can be used (those that end in FromISR()). */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
	 demo application. If heap_1.c or heap_2.c are used, then the size of the
	 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	 to query the size of free heap space that remains (although it does not
	 provide information on how the remaining heap might be fragmented). */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer,
		uint32_t *pulIdleTaskStackSize)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4a07      	ldr	r2, [pc, #28]	; (8001334 <vApplicationGetIdleTaskMemory+0x2c>)
 8001318:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	4a06      	ldr	r2, [pc, #24]	; (8001338 <vApplicationGetIdleTaskMemory+0x30>)
 800131e:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	200003e0 	.word	0x200003e0
 8001338:	20000498 	.word	0x20000498

0800133c <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 800133c:	b5b0      	push	{r4, r5, r7, lr}
 800133e:	b0aa      	sub	sp, #168	; 0xa8
 8001340:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of LED1Task */
	osThreadDef(LED1Task, startLED1Task, osPriorityNormal, 0, 128);
 8001342:	4b3a      	ldr	r3, [pc, #232]	; (800142c <MX_FREERTOS_Init+0xf0>)
 8001344:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001348:	461d      	mov	r5, r3
 800134a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800134c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800134e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001352:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	LED1TaskHandle = osThreadCreate(osThread(LED1Task), NULL);
 8001356:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f00c fd60 	bl	800de22 <osThreadCreate>
 8001362:	4603      	mov	r3, r0
 8001364:	4a32      	ldr	r2, [pc, #200]	; (8001430 <MX_FREERTOS_Init+0xf4>)
 8001366:	6013      	str	r3, [r2, #0]

	/* definition and creation of USBTask */
	osThreadDef(USBTask, startUSBTask, osPriorityNormal, 0, 256);
 8001368:	4b32      	ldr	r3, [pc, #200]	; (8001434 <MX_FREERTOS_Init+0xf8>)
 800136a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800136e:	461d      	mov	r5, r3
 8001370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001374:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001378:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	USBTaskHandle = osThreadCreate(osThread(USBTask), NULL);
 800137c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f00c fd4d 	bl	800de22 <osThreadCreate>
 8001388:	4603      	mov	r3, r0
 800138a:	4a2b      	ldr	r2, [pc, #172]	; (8001438 <MX_FREERTOS_Init+0xfc>)
 800138c:	6013      	str	r3, [r2, #0]

	/* definition and creation of OLEDUpdateTask */
	osThreadDef(OLEDUpdateTask, startOLEDUpdateTask, osPriorityLow, 0, 256);
 800138e:	4b2b      	ldr	r3, [pc, #172]	; (800143c <MX_FREERTOS_Init+0x100>)
 8001390:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001394:	461d      	mov	r5, r3
 8001396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800139a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800139e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	OLEDUpdateTaskHandle = osThreadCreate(osThread(OLEDUpdateTask), NULL);
 80013a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f00c fd3a 	bl	800de22 <osThreadCreate>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a23      	ldr	r2, [pc, #140]	; (8001440 <MX_FREERTOS_Init+0x104>)
 80013b2:	6013      	str	r3, [r2, #0]

	/* definition and creation of fetchReadingTask */
	osThreadDef(fetchReadingTask, startFetchReadingTask, osPriorityHigh, 0, 512);
 80013b4:	4b23      	ldr	r3, [pc, #140]	; (8001444 <MX_FREERTOS_Init+0x108>)
 80013b6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80013ba:	461d      	mov	r5, r3
 80013bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	fetchReadingTaskHandle = osThreadCreate(osThread(fetchReadingTask), NULL);
 80013c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00c fd27 	bl	800de22 <osThreadCreate>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a1c      	ldr	r2, [pc, #112]	; (8001448 <MX_FREERTOS_Init+0x10c>)
 80013d8:	6013      	str	r3, [r2, #0]

	/* definition and creation of regUpdateTask */
	osThreadDef(regUpdateTask, startRegUpdateTask, osPriorityAboveNormal, 0, 256);
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <MX_FREERTOS_Init+0x110>)
 80013dc:	f107 041c 	add.w	r4, r7, #28
 80013e0:	461d      	mov	r5, r3
 80013e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	regUpdateTaskHandle = osThreadCreate(osThread(regUpdateTask), NULL);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f00c fd14 	bl	800de22 <osThreadCreate>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a14      	ldr	r2, [pc, #80]	; (8001450 <MX_FREERTOS_Init+0x114>)
 80013fe:	6013      	str	r3, [r2, #0]

	/* definition and creation of LED2Task */
	osThreadDef(LED2Task, startLED2Task, osPriorityIdle, 0, 128);
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_FREERTOS_Init+0x118>)
 8001402:	463c      	mov	r4, r7
 8001404:	461d      	mov	r5, r3
 8001406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800140e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	LED2TaskHandle = osThreadCreate(osThread(LED2Task), NULL);
 8001412:	463b      	mov	r3, r7
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f00c fd03 	bl	800de22 <osThreadCreate>
 800141c:	4603      	mov	r3, r0
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <MX_FREERTOS_Init+0x11c>)
 8001420:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 8001422:	bf00      	nop
 8001424:	37a8      	adds	r7, #168	; 0xa8
 8001426:	46bd      	mov	sp, r7
 8001428:	bdb0      	pop	{r4, r5, r7, pc}
 800142a:	bf00      	nop
 800142c:	08013064 	.word	0x08013064
 8001430:	200003c8 	.word	0x200003c8
 8001434:	08013080 	.word	0x08013080
 8001438:	200003cc 	.word	0x200003cc
 800143c:	0801309c 	.word	0x0801309c
 8001440:	200003d0 	.word	0x200003d0
 8001444:	080130b8 	.word	0x080130b8
 8001448:	200003d4 	.word	0x200003d4
 800144c:	080130d4 	.word	0x080130d4
 8001450:	200003d8 	.word	0x200003d8
 8001454:	080130f0 	.word	0x080130f0
 8001458:	200003dc 	.word	0x200003dc

0800145c <startLED1Task>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startLED1Task */
void startLED1Task(void const *argument)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
//	MX_USB_DEVICE_Init();
	/* USER CODE BEGIN startLED1Task */
	/* Infinite loop */
	for (;;)
	{
		if (newSetupData.setRegister.blink_led1 == 1)
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <startLED1Task+0x50>)
 8001466:	7edb      	ldrb	r3, [r3, #27]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d108      	bne.n	800147e <startLED1Task+0x22>
		{
			newSetupData.setRegister.set_led1 = 0;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <startLED1Task+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	765a      	strb	r2, [r3, #25]
			led1Blink(newSetupData.setRegister.led1_blink_rate);
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <startLED1Task+0x50>)
 8001474:	8b9b      	ldrh	r3, [r3, #28]
 8001476:	4618      	mov	r0, r3
 8001478:	f001 f9ba 	bl	80027f0 <led1Blink>
 800147c:	e7f2      	b.n	8001464 <startLED1Task+0x8>
		}
		else if (newSetupData.setRegister.set_led1 == 1 && newSetupData.setRegister.blink_led1 == 0)
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <startLED1Task+0x50>)
 8001480:	7e5b      	ldrb	r3, [r3, #25]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d10a      	bne.n	800149c <startLED1Task+0x40>
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <startLED1Task+0x50>)
 8001488:	7edb      	ldrb	r3, [r3, #27]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d106      	bne.n	800149c <startLED1Task+0x40>
		{
			led1On();
 800148e:	f001 f97f 	bl	8002790 <led1On>
			osDelay(LED1UpdateTime);
 8001492:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001496:	f00c fd10 	bl	800deba <osDelay>
		{
 800149a:	e005      	b.n	80014a8 <startLED1Task+0x4c>
		}
		else
		{
			led1Off();
 800149c:	f001 f990 	bl	80027c0 <led1Off>
			osDelay(LED1UpdateTime);
 80014a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a4:	f00c fd09 	bl	800deba <osDelay>
		if (newSetupData.setRegister.blink_led1 == 1)
 80014a8:	e7dc      	b.n	8001464 <startLED1Task+0x8>
 80014aa:	bf00      	nop
 80014ac:	20000724 	.word	0x20000724

080014b0 <startUSBTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUSBTask */
void startUSBTask(void const *argument)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startUSBTask */
	/* Infinite loop */
	for (;;)
	{
//		printf("g_regMapUpdateFlag=%d\r\n", g_regMapUpdateFlag);
		streamMeasurements(&newSetupData, &lm75adAmbTemp, &channel1Data, &channel2Data);
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <startUSBTask+0x1c>)
 80014ba:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <startUSBTask+0x20>)
 80014bc:	4905      	ldr	r1, [pc, #20]	; (80014d4 <startUSBTask+0x24>)
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <startUSBTask+0x28>)
 80014c0:	f000 fc9c 	bl	8001dfc <streamMeasurements>
//		printf("id0 = %d\r\n", newSetupData.setRegister.id0);
		osDelay(USBUpdateTime);
 80014c4:	2064      	movs	r0, #100	; 0x64
 80014c6:	f00c fcf8 	bl	800deba <osDelay>
	{
 80014ca:	e7f5      	b.n	80014b8 <startUSBTask+0x8>
 80014cc:	200003b8 	.word	0x200003b8
 80014d0:	200003a8 	.word	0x200003a8
 80014d4:	200006a4 	.word	0x200006a4
 80014d8:	20000724 	.word	0x20000724

080014dc <startOLEDUpdateTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startOLEDUpdateTask */
void startOLEDUpdateTask(void const *argument)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startOLEDUpdateTask */
	/* Infinite loop */
	for (;;)
	{
		displayEfficiency(1, &channel1Data, &channel2Data, &lm75adAmbTemp);
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <startOLEDUpdateTask+0x20>)
 80014e6:	4a06      	ldr	r2, [pc, #24]	; (8001500 <startOLEDUpdateTask+0x24>)
 80014e8:	4906      	ldr	r1, [pc, #24]	; (8001504 <startOLEDUpdateTask+0x28>)
 80014ea:	2001      	movs	r0, #1
 80014ec:	f000 f9da 	bl	80018a4 <displayEfficiency>
		osDelay(OLEDUpdateTime);
 80014f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014f4:	f00c fce1 	bl	800deba <osDelay>
	{
 80014f8:	e7f4      	b.n	80014e4 <startOLEDUpdateTask+0x8>
 80014fa:	bf00      	nop
 80014fc:	200006a4 	.word	0x200006a4
 8001500:	200003b8 	.word	0x200003b8
 8001504:	200003a8 	.word	0x200003a8

08001508 <startFetchReadingTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startFetchReadingTask */
void startFetchReadingTask(void const *argument)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startFetchReadingTask */
	/* Infinite loop */
	for (;;)
	{
		lm75adAmbTemp = lm75ad_getTempValue(&hi2c1, LM75AD_ADDRESS, lm75adAmbTemp);
 8001510:	4b4b      	ldr	r3, [pc, #300]	; (8001640 <startFetchReadingTask+0x138>)
 8001512:	edd3 7a00 	vldr	s15, [r3]
 8001516:	eeb0 0a67 	vmov.f32	s0, s15
 800151a:	2190      	movs	r1, #144	; 0x90
 800151c:	4849      	ldr	r0, [pc, #292]	; (8001644 <startFetchReadingTask+0x13c>)
 800151e:	f001 fa6d 	bl	80029fc <lm75ad_getTempValue>
 8001522:	eef0 7a40 	vmov.f32	s15, s0
 8001526:	4b46      	ldr	r3, [pc, #280]	; (8001640 <startFetchReadingTask+0x138>)
 8001528:	edc3 7a00 	vstr	s15, [r3]
		ina226_getResult(&channel1Data, &hi2c1, CH1_ADDRESS);
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	4945      	ldr	r1, [pc, #276]	; (8001644 <startFetchReadingTask+0x13c>)
 8001530:	4845      	ldr	r0, [pc, #276]	; (8001648 <startFetchReadingTask+0x140>)
 8001532:	f001 f829 	bl	8002588 <ina226_getResult>
		ina226_getResult(&channel2Data, &hi2c1, CH2_ADDRESS);
 8001536:	2282      	movs	r2, #130	; 0x82
 8001538:	4942      	ldr	r1, [pc, #264]	; (8001644 <startFetchReadingTask+0x13c>)
 800153a:	4844      	ldr	r0, [pc, #272]	; (800164c <startFetchReadingTask+0x144>)
 800153c:	f001 f824 	bl	8002588 <ina226_getResult>
		stm32Temp = (VSENSE * adcRead(MCU_TEMP_ADC_CHANNEL) - V25) / Avg_Slope + 25.0;
 8001540:	2002      	movs	r0, #2
 8001542:	f7ff fe23 	bl	800118c <adcRead>
 8001546:	4603      	mov	r3, r0
 8001548:	4618      	mov	r0, r3
 800154a:	f7fe fff3 	bl	8000534 <__aeabi_i2d>
 800154e:	a336      	add	r3, pc, #216	; (adr r3, 8001628 <startFetchReadingTask+0x120>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7ff f858 	bl	8000608 <__aeabi_dmul>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	a333      	add	r3, pc, #204	; (adr r3, 8001630 <startFetchReadingTask+0x128>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	f7fe fe97 	bl	8000298 <__aeabi_dsub>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	a331      	add	r3, pc, #196	; (adr r3, 8001638 <startFetchReadingTask+0x130>)
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	f7ff f970 	bl	800085c <__aeabi_ddiv>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	4b31      	ldr	r3, [pc, #196]	; (8001650 <startFetchReadingTask+0x148>)
 800158a:	f7fe fe87 	bl	800029c <__adddf3>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fb2f 	bl	8000bf8 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	4a2d      	ldr	r2, [pc, #180]	; (8001654 <startFetchReadingTask+0x14c>)
 800159e:	6013      	str	r3, [r2, #0]
		stm32Vref = (VSENSE) * adcRead(MCU_INT_REF_ADC_CHANNEL);
 80015a0:	2003      	movs	r0, #3
 80015a2:	f7ff fdf3 	bl	800118c <adcRead>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe ffc3 	bl	8000534 <__aeabi_i2d>
 80015ae:	a31e      	add	r3, pc, #120	; (adr r3, 8001628 <startFetchReadingTask+0x120>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7ff f828 	bl	8000608 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fb1a 	bl	8000bf8 <__aeabi_d2f>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4a24      	ldr	r2, [pc, #144]	; (8001658 <startFetchReadingTask+0x150>)
 80015c8:	6013      	str	r3, [r2, #0]

		ina_in0 = (VSENSE) * adcRead(INA_IN0_ADC_CHANNEL);
 80015ca:	2000      	movs	r0, #0
 80015cc:	f7ff fdde 	bl	800118c <adcRead>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ffae 	bl	8000534 <__aeabi_i2d>
 80015d8:	a313      	add	r3, pc, #76	; (adr r3, 8001628 <startFetchReadingTask+0x120>)
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f7ff f813 	bl	8000608 <__aeabi_dmul>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff fb05 	bl	8000bf8 <__aeabi_d2f>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4a1a      	ldr	r2, [pc, #104]	; (800165c <startFetchReadingTask+0x154>)
 80015f2:	6013      	str	r3, [r2, #0]

		ina_in1 = VSENSE * adcRead(INA_IN1_ADC_CHANNEL);
 80015f4:	2001      	movs	r0, #1
 80015f6:	f7ff fdc9 	bl	800118c <adcRead>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ff99 	bl	8000534 <__aeabi_i2d>
 8001602:	a309      	add	r3, pc, #36	; (adr r3, 8001628 <startFetchReadingTask+0x120>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f7fe fffe 	bl	8000608 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f7ff faf0 	bl	8000bf8 <__aeabi_d2f>
 8001618:	4603      	mov	r3, r0
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <startFetchReadingTask+0x158>)
 800161c:	6013      	str	r3, [r2, #0]
//		stm32Vref = (VSENSE) * adcRead(3);
//
//		ina_in0 = (VSENSE) * adcRead(0);
//
//		ina_in1 = VSENSE * adcRead(1);
		osDelay(100);
 800161e:	2064      	movs	r0, #100	; 0x64
 8001620:	f00c fc4b 	bl	800deba <osDelay>
	{
 8001624:	e774      	b.n	8001510 <startFetchReadingTask+0x8>
 8001626:	bf00      	nop
 8001628:	c6a7ef9e 	.word	0xc6a7ef9e
 800162c:	3f4a374b 	.word	0x3f4a374b
 8001630:	851eb852 	.word	0x851eb852
 8001634:	3fe851eb 	.word	0x3fe851eb
 8001638:	47ae147b 	.word	0x47ae147b
 800163c:	3f647ae1 	.word	0x3f647ae1
 8001640:	200006a4 	.word	0x200006a4
 8001644:	200006d0 	.word	0x200006d0
 8001648:	200003a8 	.word	0x200003a8
 800164c:	200003b8 	.word	0x200003b8
 8001650:	40390000 	.word	0x40390000
 8001654:	200006c0 	.word	0x200006c0
 8001658:	200006c4 	.word	0x200006c4
 800165c:	200006c8 	.word	0x200006c8
 8001660:	200006cc 	.word	0x200006cc

08001664 <startRegUpdateTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startRegUpdateTask */
void startRegUpdateTask(void const *argument)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startRegUpdateTask */
	/* Infinite loop */
	for (;;)
	{
		configHW(&newSetupData, g_HWUpdateFlag);
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <startRegUpdateTask+0x34>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	480a      	ldr	r0, [pc, #40]	; (800169c <startRegUpdateTask+0x38>)
 8001674:	f000 fb74 	bl	8001d60 <configHW>
		if (g_regMapUpdateFlag)
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <startRegUpdateTask+0x3c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d007      	beq.n	8001690 <startRegUpdateTask+0x2c>
		{
			registerMap(USBRXDataBuffer);
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <startRegUpdateTask+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f001 fb79 	bl	8002d7c <registerMap>
			g_regMapUpdateFlag = 0;
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <startRegUpdateTask+0x3c>)
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
		}

		osDelay(100);
 8001690:	2064      	movs	r0, #100	; 0x64
 8001692:	f00c fc12 	bl	800deba <osDelay>
	{
 8001696:	e7e9      	b.n	800166c <startRegUpdateTask+0x8>
 8001698:	200006b8 	.word	0x200006b8
 800169c:	20000724 	.word	0x20000724
 80016a0:	200006a0 	.word	0x200006a0
 80016a4:	2000069c 	.word	0x2000069c

080016a8 <startLED2Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startLED2Task */
void startLED2Task(void const *argument)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startLED2Task */
	/* Infinite loop */
	for (;;)
	{
		if (newSetupData.setRegister.blink_led2 == 1)
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <startLED2Task+0x58>)
 80016b2:	7f9b      	ldrb	r3, [r3, #30]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d10c      	bne.n	80016d2 <startLED2Task+0x2a>
		{
			newSetupData.setRegister.set_led2 = 0;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <startLED2Task+0x58>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	769a      	strb	r2, [r3, #26]
//			led2Blink(newSetupData.setRegister.led2_blink_rate);
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80016be:	2110      	movs	r1, #16
 80016c0:	4810      	ldr	r0, [pc, #64]	; (8001704 <startLED2Task+0x5c>)
 80016c2:	f004 fb74 	bl	8005dae <HAL_GPIO_TogglePin>
			osDelay(newSetupData.setRegister.led2_blink_rate);
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <startLED2Task+0x58>)
 80016c8:	8c1b      	ldrh	r3, [r3, #32]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f00c fbf5 	bl	800deba <osDelay>
 80016d0:	e7ee      	b.n	80016b0 <startLED2Task+0x8>
		}
		else if (newSetupData.setRegister.set_led2 == 1 && newSetupData.setRegister.blink_led2 == 0)
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <startLED2Task+0x58>)
 80016d4:	7e9b      	ldrb	r3, [r3, #26]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d10a      	bne.n	80016f0 <startLED2Task+0x48>
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <startLED2Task+0x58>)
 80016dc:	7f9b      	ldrb	r3, [r3, #30]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d106      	bne.n	80016f0 <startLED2Task+0x48>
		{
			led2On();
 80016e2:	f001 f861 	bl	80027a8 <led2On>
			osDelay(LED2UpdateTime);
 80016e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ea:	f00c fbe6 	bl	800deba <osDelay>
		{
 80016ee:	e005      	b.n	80016fc <startLED2Task+0x54>
		}
		else
		{
			led2Off();
 80016f0:	f001 f872 	bl	80027d8 <led2Off>
			osDelay(LED2UpdateTime);
 80016f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f8:	f00c fbdf 	bl	800deba <osDelay>
		if (newSetupData.setRegister.blink_led2 == 1)
 80016fc:	e7d8      	b.n	80016b0 <startLED2Task+0x8>
 80016fe:	bf00      	nop
 8001700:	20000724 	.word	0x20000724
 8001704:	40020000 	.word	0x40020000

08001708 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b5c      	ldr	r3, [pc, #368]	; (8001894 <MX_GPIO_Init+0x18c>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a5b      	ldr	r2, [pc, #364]	; (8001894 <MX_GPIO_Init+0x18c>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b59      	ldr	r3, [pc, #356]	; (8001894 <MX_GPIO_Init+0x18c>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b55      	ldr	r3, [pc, #340]	; (8001894 <MX_GPIO_Init+0x18c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a54      	ldr	r2, [pc, #336]	; (8001894 <MX_GPIO_Init+0x18c>)
 8001744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b52      	ldr	r3, [pc, #328]	; (8001894 <MX_GPIO_Init+0x18c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b4e      	ldr	r3, [pc, #312]	; (8001894 <MX_GPIO_Init+0x18c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a4d      	ldr	r2, [pc, #308]	; (8001894 <MX_GPIO_Init+0x18c>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b4b      	ldr	r3, [pc, #300]	; (8001894 <MX_GPIO_Init+0x18c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4b47      	ldr	r3, [pc, #284]	; (8001894 <MX_GPIO_Init+0x18c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a46      	ldr	r2, [pc, #280]	; (8001894 <MX_GPIO_Init+0x18c>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b44      	ldr	r3, [pc, #272]	; (8001894 <MX_GPIO_Init+0x18c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|SDCard_CS_Pin|Auto_off_dis_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	f248 4110 	movw	r1, #33808	; 0x8410
 8001794:	4840      	ldr	r0, [pc, #256]	; (8001898 <MX_GPIO_Init+0x190>)
 8001796:	f004 faf1 	bl	8005d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|EEPROM_WP_Pin, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80017a0:	483e      	ldr	r0, [pc, #248]	; (800189c <MX_GPIO_Init+0x194>)
 80017a2:	f004 faeb 	bl	8005d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIG_OUT0_Pin|DIG_OUT1_Pin, GPIO_PIN_SET);
 80017a6:	2201      	movs	r2, #1
 80017a8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80017ac:	483b      	ldr	r0, [pc, #236]	; (800189c <MX_GPIO_Init+0x194>)
 80017ae:	f004 fae5 	bl	8005d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = INT_OUT_Pin|INT_IN_Pin|TEMP_IRQ_Pin;
 80017b2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80017b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	4835      	ldr	r0, [pc, #212]	; (80018a0 <MX_GPIO_Init+0x198>)
 80017ca:	f004 f93b 	bl	8005a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80017ce:	2310      	movs	r3, #16
 80017d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	4619      	mov	r1, r3
 80017e4:	482c      	ldr	r0, [pc, #176]	; (8001898 <MX_GPIO_Init+0x190>)
 80017e6:	f004 f92d 	bl	8005a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|DIG_OUT0_Pin|DIG_OUT1_Pin|EEPROM_WP_Pin;
 80017ea:	f243 4320 	movw	r3, #13344	; 0x3420
 80017ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f0:	2301      	movs	r3, #1
 80017f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4619      	mov	r1, r3
 8001802:	4826      	ldr	r0, [pc, #152]	; (800189c <MX_GPIO_Init+0x194>)
 8001804:	f004 f91e 	bl	8005a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIG_IN0_Pin|DIG_IN1_Pin;
 8001808:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800180c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	481f      	ldr	r0, [pc, #124]	; (800189c <MX_GPIO_Init+0x194>)
 800181e:	f004 f911 	bl	8005a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SDCard_CS_Pin|Auto_off_dis_Pin;
 8001822:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001828:	2301      	movs	r3, #1
 800182a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4619      	mov	r1, r3
 800183a:	4817      	ldr	r0, [pc, #92]	; (8001898 <MX_GPIO_Init+0x190>)
 800183c:	f004 f902 	bl	8005a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = INT_IN0_Pin|INT_IN1_Pin;
 8001840:	2318      	movs	r3, #24
 8001842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001844:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4619      	mov	r1, r3
 8001854:	4811      	ldr	r0, [pc, #68]	; (800189c <MX_GPIO_Init+0x194>)
 8001856:	f004 f8f5 	bl	8005a44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2105      	movs	r1, #5
 800185e:	2009      	movs	r0, #9
 8001860:	f003 fd51 	bl	8005306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001864:	2009      	movs	r0, #9
 8001866:	f003 fd6a 	bl	800533e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2105      	movs	r1, #5
 800186e:	200a      	movs	r0, #10
 8001870:	f003 fd49 	bl	8005306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001874:	200a      	movs	r0, #10
 8001876:	f003 fd62 	bl	800533e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2105      	movs	r1, #5
 800187e:	2028      	movs	r0, #40	; 0x28
 8001880:	f003 fd41 	bl	8005306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001884:	2028      	movs	r0, #40	; 0x28
 8001886:	f003 fd5a 	bl	800533e <HAL_NVIC_EnableIRQ>

}
 800188a:	bf00      	nop
 800188c:	3728      	adds	r7, #40	; 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40020000 	.word	0x40020000
 800189c:	40020400 	.word	0x40020400
 80018a0:	40020800 	.word	0x40020800

080018a4 <displayEfficiency>:
 */

#include "hw.h"

void displayEfficiency(uint8_t en_disp, Ina226Data_t *ch1Data, Ina226Data_t *ch2Data, float *temp_data)
{
 80018a4:	b5b0      	push	{r4, r5, r7, lr}
 80018a6:	b08e      	sub	sp, #56	; 0x38
 80018a8:	af02      	add	r7, sp, #8
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	4603      	mov	r3, r0
 80018b2:	73fb      	strb	r3, [r7, #15]
	char str[28];
	if (en_disp == 1)
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	f040 818a 	bne.w	8001bd0 <displayEfficiency+0x32c>
	{
		ssd1306_SetDisplayOn(1);
 80018bc:	2001      	movs	r0, #1
 80018be:	f002 fd17 	bl	80042f0 <ssd1306_SetDisplayOn>
		ssd1306_Fill(Black);
 80018c2:	2000      	movs	r0, #0
 80018c4:	f002 fb8e 	bl	8003fe4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 80018c8:	2100      	movs	r1, #0
 80018ca:	2000      	movs	r0, #0
 80018cc:	f002 fce4 	bl	8004298 <ssd1306_SetCursor>
		sprintf(str, "%0.1fC|%0.1f%%", *temp_data, ((ch2Data->power / ch1Data->power) * 100));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fe3f 	bl	8000558 <__aeabi_f2d>
 80018da:	4604      	mov	r4, r0
 80018dc:	460d      	mov	r5, r1
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	edd3 6a03 	vldr	s13, [r3, #12]
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80018ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ee:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8001be0 <displayEfficiency+0x33c>
 80018f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f6:	ee17 0a90 	vmov	r0, s15
 80018fa:	f7fe fe2d 	bl	8000558 <__aeabi_f2d>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	f107 0014 	add.w	r0, r7, #20
 8001906:	e9cd 2300 	strd	r2, r3, [sp]
 800190a:	4622      	mov	r2, r4
 800190c:	462b      	mov	r3, r5
 800190e:	49b5      	ldr	r1, [pc, #724]	; (8001be4 <displayEfficiency+0x340>)
 8001910:	f00f fa2e 	bl	8010d70 <siprintf>
		ssd1306_WriteString(str, Font_11x18, White);
 8001914:	4ab4      	ldr	r2, [pc, #720]	; (8001be8 <displayEfficiency+0x344>)
 8001916:	f107 0014 	add.w	r0, r7, #20
 800191a:	2301      	movs	r3, #1
 800191c:	ca06      	ldmia	r2, {r1, r2}
 800191e:	f002 fc95 	bl	800424c <ssd1306_WriteString>

		ssd1306_SetCursor(0, 24);
 8001922:	2118      	movs	r1, #24
 8001924:	2000      	movs	r0, #0
 8001926:	f002 fcb7 	bl	8004298 <ssd1306_SetCursor>
		(ch1Data->vbus >= 1 ? sprintf(str, "%0.3f", ch1Data->vbus) : sprintf(str, "%0.3f", ch1Data->vbus));
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001930:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193c:	db0c      	blt.n	8001958 <displayEfficiency+0xb4>
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fe08 	bl	8000558 <__aeabi_f2d>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	f107 0014 	add.w	r0, r7, #20
 8001950:	49a6      	ldr	r1, [pc, #664]	; (8001bec <displayEfficiency+0x348>)
 8001952:	f00f fa0d 	bl	8010d70 <siprintf>
 8001956:	e00b      	b.n	8001970 <displayEfficiency+0xcc>
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fdfb 	bl	8000558 <__aeabi_f2d>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	f107 0014 	add.w	r0, r7, #20
 800196a:	49a0      	ldr	r1, [pc, #640]	; (8001bec <displayEfficiency+0x348>)
 800196c:	f00f fa00 	bl	8010d70 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 8001970:	4a9f      	ldr	r2, [pc, #636]	; (8001bf0 <displayEfficiency+0x34c>)
 8001972:	f107 0014 	add.w	r0, r7, #20
 8001976:	2301      	movs	r3, #1
 8001978:	ca06      	ldmia	r2, {r1, r2}
 800197a:	f002 fc67 	bl	800424c <ssd1306_WriteString>

		ssd1306_SetCursor(((SSD1306_WIDTH - 10) / 2 - 6), 24);
 800197e:	2118      	movs	r1, #24
 8001980:	2035      	movs	r0, #53	; 0x35
 8001982:	f002 fc89 	bl	8004298 <ssd1306_SetCursor>
		sprintf(str, "%0.3f", ch2Data->vbus);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fde4 	bl	8000558 <__aeabi_f2d>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	f107 0014 	add.w	r0, r7, #20
 8001998:	4994      	ldr	r1, [pc, #592]	; (8001bec <displayEfficiency+0x348>)
 800199a:	f00f f9e9 	bl	8010d70 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 800199e:	4a94      	ldr	r2, [pc, #592]	; (8001bf0 <displayEfficiency+0x34c>)
 80019a0:	f107 0014 	add.w	r0, r7, #20
 80019a4:	2301      	movs	r3, #1
 80019a6:	ca06      	ldmia	r2, {r1, r2}
 80019a8:	f002 fc50 	bl	800424c <ssd1306_WriteString>

		ssd1306_SetCursor((SSD1306_WIDTH - 20), 24);
 80019ac:	2118      	movs	r1, #24
 80019ae:	206c      	movs	r0, #108	; 0x6c
 80019b0:	f002 fc72 	bl	8004298 <ssd1306_SetCursor>
		ssd1306_WriteString("V", Font_7x10, White);
 80019b4:	4a8e      	ldr	r2, [pc, #568]	; (8001bf0 <displayEfficiency+0x34c>)
 80019b6:	2301      	movs	r3, #1
 80019b8:	ca06      	ldmia	r2, {r1, r2}
 80019ba:	488e      	ldr	r0, [pc, #568]	; (8001bf4 <displayEfficiency+0x350>)
 80019bc:	f002 fc46 	bl	800424c <ssd1306_WriteString>

		ssd1306_SetCursor(0, 34);
 80019c0:	2122      	movs	r1, #34	; 0x22
 80019c2:	2000      	movs	r0, #0
 80019c4:	f002 fc68 	bl	8004298 <ssd1306_SetCursor>
		(ch1Data->current < 1 ? sprintf(str, "%0.1f", ch1Data->current * 1e3) : sprintf(str, "%0.3f", ch1Data->current));
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019da:	d511      	bpl.n	8001a00 <displayEfficiency+0x15c>
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fdb9 	bl	8000558 <__aeabi_f2d>
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	4b83      	ldr	r3, [pc, #524]	; (8001bf8 <displayEfficiency+0x354>)
 80019ec:	f7fe fe0c 	bl	8000608 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	f107 0014 	add.w	r0, r7, #20
 80019f8:	4980      	ldr	r1, [pc, #512]	; (8001bfc <displayEfficiency+0x358>)
 80019fa:	f00f f9b9 	bl	8010d70 <siprintf>
 80019fe:	e00b      	b.n	8001a18 <displayEfficiency+0x174>
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fda7 	bl	8000558 <__aeabi_f2d>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	f107 0014 	add.w	r0, r7, #20
 8001a12:	4976      	ldr	r1, [pc, #472]	; (8001bec <displayEfficiency+0x348>)
 8001a14:	f00f f9ac 	bl	8010d70 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 8001a18:	4a75      	ldr	r2, [pc, #468]	; (8001bf0 <displayEfficiency+0x34c>)
 8001a1a:	f107 0014 	add.w	r0, r7, #20
 8001a1e:	2301      	movs	r3, #1
 8001a20:	ca06      	ldmia	r2, {r1, r2}
 8001a22:	f002 fc13 	bl	800424c <ssd1306_WriteString>

		ssd1306_SetCursor(((SSD1306_WIDTH - 10) / 2 - 6), 34);
 8001a26:	2122      	movs	r1, #34	; 0x22
 8001a28:	2035      	movs	r0, #53	; 0x35
 8001a2a:	f002 fc35 	bl	8004298 <ssd1306_SetCursor>
		(ch2Data->current < 1 ? sprintf(str, "%0.1f", ch2Data->current * 1e3) : sprintf(str, "%0.3f", ch2Data->current));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a40:	d511      	bpl.n	8001a66 <displayEfficiency+0x1c2>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fd86 	bl	8000558 <__aeabi_f2d>
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	4b69      	ldr	r3, [pc, #420]	; (8001bf8 <displayEfficiency+0x354>)
 8001a52:	f7fe fdd9 	bl	8000608 <__aeabi_dmul>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	f107 0014 	add.w	r0, r7, #20
 8001a5e:	4967      	ldr	r1, [pc, #412]	; (8001bfc <displayEfficiency+0x358>)
 8001a60:	f00f f986 	bl	8010d70 <siprintf>
 8001a64:	e00b      	b.n	8001a7e <displayEfficiency+0x1da>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fd74 	bl	8000558 <__aeabi_f2d>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	f107 0014 	add.w	r0, r7, #20
 8001a78:	495c      	ldr	r1, [pc, #368]	; (8001bec <displayEfficiency+0x348>)
 8001a7a:	f00f f979 	bl	8010d70 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 8001a7e:	4a5c      	ldr	r2, [pc, #368]	; (8001bf0 <displayEfficiency+0x34c>)
 8001a80:	f107 0014 	add.w	r0, r7, #20
 8001a84:	2301      	movs	r3, #1
 8001a86:	ca06      	ldmia	r2, {r1, r2}
 8001a88:	f002 fbe0 	bl	800424c <ssd1306_WriteString>

		ssd1306_SetCursor((SSD1306_WIDTH - 20), 34);
 8001a8c:	2122      	movs	r1, #34	; 0x22
 8001a8e:	206c      	movs	r0, #108	; 0x6c
 8001a90:	f002 fc02 	bl	8004298 <ssd1306_SetCursor>
		(ch1Data->current > 1 && ch2Data->current > 1) ?
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	edd3 7a00 	vldr	s15, [r3]
				ssd1306_WriteString("A", Font_7x10, White) : ssd1306_WriteString("mA", Font_7x10, White);
 8001a9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa6:	dd10      	ble.n	8001aca <displayEfficiency+0x226>
		(ch1Data->current > 1 && ch2Data->current > 1) ?
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	edd3 7a00 	vldr	s15, [r3]
 8001aae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ab2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aba:	dd06      	ble.n	8001aca <displayEfficiency+0x226>
				ssd1306_WriteString("A", Font_7x10, White) : ssd1306_WriteString("mA", Font_7x10, White);
 8001abc:	4a4c      	ldr	r2, [pc, #304]	; (8001bf0 <displayEfficiency+0x34c>)
 8001abe:	2301      	movs	r3, #1
 8001ac0:	ca06      	ldmia	r2, {r1, r2}
 8001ac2:	484f      	ldr	r0, [pc, #316]	; (8001c00 <displayEfficiency+0x35c>)
 8001ac4:	f002 fbc2 	bl	800424c <ssd1306_WriteString>
 8001ac8:	e005      	b.n	8001ad6 <displayEfficiency+0x232>
 8001aca:	4a49      	ldr	r2, [pc, #292]	; (8001bf0 <displayEfficiency+0x34c>)
 8001acc:	2301      	movs	r3, #1
 8001ace:	ca06      	ldmia	r2, {r1, r2}
 8001ad0:	484c      	ldr	r0, [pc, #304]	; (8001c04 <displayEfficiency+0x360>)
 8001ad2:	f002 fbbb 	bl	800424c <ssd1306_WriteString>

		ssd1306_SetCursor(0, 44);
 8001ad6:	212c      	movs	r1, #44	; 0x2c
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f002 fbdd 	bl	8004298 <ssd1306_SetCursor>
		sprintf(str, "%0.3f", ch1Data->vshunt * 1e3);
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd38 	bl	8000558 <__aeabi_f2d>
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	4b42      	ldr	r3, [pc, #264]	; (8001bf8 <displayEfficiency+0x354>)
 8001aee:	f7fe fd8b 	bl	8000608 <__aeabi_dmul>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	f107 0014 	add.w	r0, r7, #20
 8001afa:	493c      	ldr	r1, [pc, #240]	; (8001bec <displayEfficiency+0x348>)
 8001afc:	f00f f938 	bl	8010d70 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 8001b00:	4a3b      	ldr	r2, [pc, #236]	; (8001bf0 <displayEfficiency+0x34c>)
 8001b02:	f107 0014 	add.w	r0, r7, #20
 8001b06:	2301      	movs	r3, #1
 8001b08:	ca06      	ldmia	r2, {r1, r2}
 8001b0a:	f002 fb9f 	bl	800424c <ssd1306_WriteString>

		ssd1306_SetCursor(((SSD1306_WIDTH - 10) / 2 - 6), 44);
 8001b0e:	212c      	movs	r1, #44	; 0x2c
 8001b10:	2035      	movs	r0, #53	; 0x35
 8001b12:	f002 fbc1 	bl	8004298 <ssd1306_SetCursor>
		sprintf(str, "%0.3f", ch2Data->vshunt * 1e3);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fd1c 	bl	8000558 <__aeabi_f2d>
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <displayEfficiency+0x354>)
 8001b26:	f7fe fd6f 	bl	8000608 <__aeabi_dmul>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	f107 0014 	add.w	r0, r7, #20
 8001b32:	492e      	ldr	r1, [pc, #184]	; (8001bec <displayEfficiency+0x348>)
 8001b34:	f00f f91c 	bl	8010d70 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 8001b38:	4a2d      	ldr	r2, [pc, #180]	; (8001bf0 <displayEfficiency+0x34c>)
 8001b3a:	f107 0014 	add.w	r0, r7, #20
 8001b3e:	2301      	movs	r3, #1
 8001b40:	ca06      	ldmia	r2, {r1, r2}
 8001b42:	f002 fb83 	bl	800424c <ssd1306_WriteString>

		ssd1306_SetCursor((SSD1306_WIDTH - 20), 44);
 8001b46:	212c      	movs	r1, #44	; 0x2c
 8001b48:	206c      	movs	r0, #108	; 0x6c
 8001b4a:	f002 fba5 	bl	8004298 <ssd1306_SetCursor>
		ssd1306_WriteString("mV", Font_7x10, White);
 8001b4e:	4a28      	ldr	r2, [pc, #160]	; (8001bf0 <displayEfficiency+0x34c>)
 8001b50:	2301      	movs	r3, #1
 8001b52:	ca06      	ldmia	r2, {r1, r2}
 8001b54:	482c      	ldr	r0, [pc, #176]	; (8001c08 <displayEfficiency+0x364>)
 8001b56:	f002 fb79 	bl	800424c <ssd1306_WriteString>

		ssd1306_SetCursor(0, 54);
 8001b5a:	2136      	movs	r1, #54	; 0x36
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f002 fb9b 	bl	8004298 <ssd1306_SetCursor>
		sprintf(str, "%0.3f", ch1Data->power);
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fcf6 	bl	8000558 <__aeabi_f2d>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	f107 0014 	add.w	r0, r7, #20
 8001b74:	491d      	ldr	r1, [pc, #116]	; (8001bec <displayEfficiency+0x348>)
 8001b76:	f00f f8fb 	bl	8010d70 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 8001b7a:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <displayEfficiency+0x34c>)
 8001b7c:	f107 0014 	add.w	r0, r7, #20
 8001b80:	2301      	movs	r3, #1
 8001b82:	ca06      	ldmia	r2, {r1, r2}
 8001b84:	f002 fb62 	bl	800424c <ssd1306_WriteString>

		ssd1306_SetCursor(((SSD1306_WIDTH - 10) / 2 - 6), 54);
 8001b88:	2136      	movs	r1, #54	; 0x36
 8001b8a:	2035      	movs	r0, #53	; 0x35
 8001b8c:	f002 fb84 	bl	8004298 <ssd1306_SetCursor>
		sprintf(str, "%0.3f", ch2Data->power);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fcdf 	bl	8000558 <__aeabi_f2d>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	f107 0014 	add.w	r0, r7, #20
 8001ba2:	4912      	ldr	r1, [pc, #72]	; (8001bec <displayEfficiency+0x348>)
 8001ba4:	f00f f8e4 	bl	8010d70 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 8001ba8:	4a11      	ldr	r2, [pc, #68]	; (8001bf0 <displayEfficiency+0x34c>)
 8001baa:	f107 0014 	add.w	r0, r7, #20
 8001bae:	2301      	movs	r3, #1
 8001bb0:	ca06      	ldmia	r2, {r1, r2}
 8001bb2:	f002 fb4b 	bl	800424c <ssd1306_WriteString>

		ssd1306_SetCursor((SSD1306_WIDTH - 20), 54);
 8001bb6:	2136      	movs	r1, #54	; 0x36
 8001bb8:	206c      	movs	r0, #108	; 0x6c
 8001bba:	f002 fb6d 	bl	8004298 <ssd1306_SetCursor>
		ssd1306_WriteString("W", Font_7x10, White);
 8001bbe:	4a0c      	ldr	r2, [pc, #48]	; (8001bf0 <displayEfficiency+0x34c>)
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	ca06      	ldmia	r2, {r1, r2}
 8001bc4:	4811      	ldr	r0, [pc, #68]	; (8001c0c <displayEfficiency+0x368>)
 8001bc6:	f002 fb41 	bl	800424c <ssd1306_WriteString>

		ssd1306_UpdateScreen();
 8001bca:	f002 fa2f 	bl	800402c <ssd1306_UpdateScreen>
	}
	else
	{
		ssd1306_SetDisplayOn(0);
	}
}
 8001bce:	e002      	b.n	8001bd6 <displayEfficiency+0x332>
		ssd1306_SetDisplayOn(0);
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f002 fb8d 	bl	80042f0 <ssd1306_SetDisplayOn>
}
 8001bd6:	bf00      	nop
 8001bd8:	3730      	adds	r7, #48	; 0x30
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8001bde:	bf00      	nop
 8001be0:	42c80000 	.word	0x42c80000
 8001be4:	0801310c 	.word	0x0801310c
 8001be8:	2000000c 	.word	0x2000000c
 8001bec:	0801311c 	.word	0x0801311c
 8001bf0:	20000004 	.word	0x20000004
 8001bf4:	08013124 	.word	0x08013124
 8001bf8:	408f4000 	.word	0x408f4000
 8001bfc:	08013128 	.word	0x08013128
 8001c00:	08013130 	.word	0x08013130
 8001c04:	08013134 	.word	0x08013134
 8001c08:	08013138 	.word	0x08013138
 8001c0c:	0801313c 	.word	0x0801313c

08001c10 <digRead>:

uint8_t digRead(uint8_t dig_pin)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
	if (dig_pin == 0)
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10b      	bne.n	8001c38 <digRead+0x28>
	{
		if (HAL_GPIO_ReadPin(DIG_IN0_GPIO_Port, DIG_IN0_Pin) == GPIO_PIN_RESET)
 8001c20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c24:	480e      	ldr	r0, [pc, #56]	; (8001c60 <digRead+0x50>)
 8001c26:	f004 f891 	bl	8005d4c <HAL_GPIO_ReadPin>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <digRead+0x24>
			return 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	e011      	b.n	8001c58 <digRead+0x48>
		else
			return 1;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e00f      	b.n	8001c58 <digRead+0x48>
	}
	else if (dig_pin == 1)
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d10b      	bne.n	8001c56 <digRead+0x46>
	{
		if (HAL_GPIO_ReadPin(DIG_IN1_GPIO_Port, DIG_IN1_Pin) == GPIO_PIN_RESET)
 8001c3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c42:	4807      	ldr	r0, [pc, #28]	; (8001c60 <digRead+0x50>)
 8001c44:	f004 f882 	bl	8005d4c <HAL_GPIO_ReadPin>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <digRead+0x42>
			return 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e002      	b.n	8001c58 <digRead+0x48>
		else
			return 1;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <digRead+0x48>
	}
	else
		return 0;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40020400 	.word	0x40020400

08001c64 <digitalWrite>:

void digitalWrite(uint8_t dig_pin, uint8_t value)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	460a      	mov	r2, r1
 8001c6e:	71fb      	strb	r3, [r7, #7]
 8001c70:	4613      	mov	r3, r2
 8001c72:	71bb      	strb	r3, [r7, #6]
	if (dig_pin == 0)
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d110      	bne.n	8001c9c <digitalWrite+0x38>
	{
		if (value == 1)
 8001c7a:	79bb      	ldrb	r3, [r7, #6]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d106      	bne.n	8001c8e <digitalWrite+0x2a>
			HAL_GPIO_WritePin(DIG_OUT0_GPIO_Port, DIG_OUT0_Pin, RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c86:	4811      	ldr	r0, [pc, #68]	; (8001ccc <digitalWrite+0x68>)
 8001c88:	f004 f878 	bl	8005d7c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_OUT1_GPIO_Port, DIG_OUT1_Pin, RESET);
		else
			HAL_GPIO_WritePin(DIG_OUT1_GPIO_Port, DIG_OUT1_Pin, SET);
	}

}
 8001c8c:	e019      	b.n	8001cc2 <digitalWrite+0x5e>
			HAL_GPIO_WritePin(DIG_OUT0_GPIO_Port, DIG_OUT0_Pin, SET);
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c94:	480d      	ldr	r0, [pc, #52]	; (8001ccc <digitalWrite+0x68>)
 8001c96:	f004 f871 	bl	8005d7c <HAL_GPIO_WritePin>
}
 8001c9a:	e012      	b.n	8001cc2 <digitalWrite+0x5e>
	else if (dig_pin == 1)
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d10f      	bne.n	8001cc2 <digitalWrite+0x5e>
		if (value == 1)
 8001ca2:	79bb      	ldrb	r3, [r7, #6]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d106      	bne.n	8001cb6 <digitalWrite+0x52>
			HAL_GPIO_WritePin(DIG_OUT1_GPIO_Port, DIG_OUT1_Pin, RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cae:	4807      	ldr	r0, [pc, #28]	; (8001ccc <digitalWrite+0x68>)
 8001cb0:	f004 f864 	bl	8005d7c <HAL_GPIO_WritePin>
}
 8001cb4:	e005      	b.n	8001cc2 <digitalWrite+0x5e>
			HAL_GPIO_WritePin(DIG_OUT1_GPIO_Port, DIG_OUT1_Pin, SET);
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cbc:	4803      	ldr	r0, [pc, #12]	; (8001ccc <digitalWrite+0x68>)
 8001cbe:	f004 f85d 	bl	8005d7c <HAL_GPIO_WritePin>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40020400 	.word	0x40020400

08001cd0 <restartMCU>:

void restartMCU(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 8001cd4:	f003 fb41 	bl	800535a <HAL_NVIC_SystemReset>
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <saveUserConfigData>:

void saveUserConfigData(uint16_t page, RegisterData_t *inputBuffer)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	80fb      	strh	r3, [r7, #6]
//	EEPROMPageErase(page);
	for (uint8_t offset = 0; offset < NO_REGISTERS; offset++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	73fb      	strb	r3, [r7, #15]
 8001cec:	e010      	b.n	8001d10 <saveUserConfigData+0x34>
	{
		EEPROMWriteByte(page, offset, (inputBuffer + offset)->value);
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	b299      	uxth	r1, r3
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fa56 	bl	80011b0 <EEPROMWriteByte>
		HAL_Delay(1);
 8001d04:	2001      	movs	r0, #1
 8001d06:	f002 fe19 	bl	800493c <HAL_Delay>
	for (uint8_t offset = 0; offset < NO_REGISTERS; offset++)
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	2b1f      	cmp	r3, #31
 8001d14:	d9eb      	bls.n	8001cee <saveUserConfigData+0x12>
	}
}
 8001d16:	bf00      	nop
 8001d18:	bf00      	nop
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <getSavedUserConfigData>:

void getSavedUserConfigData(uint16_t page, RegisterData_t *outBuffer)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	80fb      	strh	r3, [r7, #6]
	for (uint8_t offset = 0; offset < NO_REGISTERS; offset++)
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	73fb      	strb	r3, [r7, #15]
 8001d30:	e00d      	b.n	8001d4e <getSavedUserConfigData+0x2e>
	{
		(outBuffer + offset)->value = EEPROMReadByte(page, offset);
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	b299      	uxth	r1, r3
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	18d4      	adds	r4, r2, r3
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fa74 	bl	800122c <EEPROMReadByte>
 8001d44:	4603      	mov	r3, r0
 8001d46:	7023      	strb	r3, [r4, #0]
	for (uint8_t offset = 0; offset < NO_REGISTERS; offset++)
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	73fb      	strb	r3, [r7, #15]
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	2b1f      	cmp	r3, #31
 8001d52:	d9ee      	bls.n	8001d32 <getSavedUserConfigData+0x12>
	}

}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd90      	pop	{r4, r7, pc}
	...

08001d60 <configHW>:

void configHW(SetupData_t *setupData, uint8_t update)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	70fb      	strb	r3, [r7, #3]
	if (update == 1)
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d113      	bne.n	8001d9a <configHW+0x3a>
	{
		digitalWrite(DIG_OUT0, setupData->setRegister.set_dig_out0);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001d78:	4619      	mov	r1, r3
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f7ff ff72 	bl	8001c64 <digitalWrite>
		digitalWrite(DIG_OUT1, setupData->setRegister.set_dig_out1);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001d86:	4619      	mov	r1, r3
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f7ff ff6b 	bl	8001c64 <digitalWrite>

//	enableLED(setupData);

		enablePWM(setupData);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f80a 	bl	8001da8 <enablePWM>

//		disablePowerSaveMode(setupData);
		g_HWUpdateFlag = 0;
 8001d94:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <configHW+0x44>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
	}

}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200006b8 	.word	0x200006b8

08001da8 <enablePWM>:

void enablePWM(SetupData_t *setupData)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	set_pwm_freq(setupData->setRegister.set_pwm_freq);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 ffc7 	bl	8002d48 <set_pwm_freq>
	if (setupData->setRegister.en_pwm0 == 1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d106      	bne.n	8001dd2 <enablePWM+0x2a>
	{
		run_pwm_out0(setupData->setRegister.set_pwm0_duty);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 ff78 	bl	8002cc0 <run_pwm_out0>
 8001dd0:	e001      	b.n	8001dd6 <enablePWM+0x2e>
	}
	else
	{
		stop_pwm_out0();
 8001dd2:	f000 ff89 	bl	8002ce8 <stop_pwm_out0>
	}

	if (setupData->setRegister.en_pwm1 == 1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d106      	bne.n	8001dee <enablePWM+0x46>
	{
		run_pwm_out1(setupData->setRegister.set_pwm1_duty);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 ff8c 	bl	8002d04 <run_pwm_out1>
	}
	else
	{
		stop_pwm_out1();
	}
}
 8001dec:	e001      	b.n	8001df2 <enablePWM+0x4a>
		stop_pwm_out1();
 8001dee:	f000 ff9d 	bl	8002d2c <stop_pwm_out1>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <streamMeasurements>:

void streamMeasurements(SetupData_t *setupData, float *temp_data, Ina226Data_t *channel1, Ina226Data_t *channel2)
{
 8001dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e00:	b0b7      	sub	sp, #220	; 0xdc
 8001e02:	af1c      	add	r7, sp, #112	; 0x70
 8001e04:	6678      	str	r0, [r7, #100]	; 0x64
 8001e06:	6639      	str	r1, [r7, #96]	; 0x60
 8001e08:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e0a:	65bb      	str	r3, [r7, #88]	; 0x58

	if (newSetupData.setRegister.meas_mode == 1)
 8001e0c:	4b58      	ldr	r3, [pc, #352]	; (8001f70 <streamMeasurements+0x174>)
 8001e0e:	7ddb      	ldrb	r3, [r3, #23]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	f040 80a7 	bne.w	8001f64 <streamMeasurements+0x168>
//				setupData->setRegister.set_pwm1_duty, setupData->setRegister.set_pwm_freq, channel1->vshunt,
//				channel1->vbus, channel1->current, channel1->power, channel2->vshunt, channel2->vbus, channel2->current,
//				channel2->power, (channel2->power / channel1->power) * 100);

		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
				*temp_data, stm32Temp, stm32Vref, channel1->vshunt, channel1->vbus, channel1->current, channel1->power,
 8001e16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e18:	681b      	ldr	r3, [r3, #0]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fb9c 	bl	8000558 <__aeabi_f2d>
 8001e20:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 8001e24:	4b53      	ldr	r3, [pc, #332]	; (8001f74 <streamMeasurements+0x178>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fb95 	bl	8000558 <__aeabi_f2d>
 8001e2e:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8001e32:	4b51      	ldr	r3, [pc, #324]	; (8001f78 <streamMeasurements+0x17c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fb8e 	bl	8000558 <__aeabi_f2d>
 8001e3c:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
				*temp_data, stm32Temp, stm32Vref, channel1->vshunt, channel1->vbus, channel1->current, channel1->power,
 8001e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e42:	689b      	ldr	r3, [r3, #8]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fb87 	bl	8000558 <__aeabi_f2d>
 8001e4a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
				*temp_data, stm32Temp, stm32Vref, channel1->vshunt, channel1->vbus, channel1->current, channel1->power,
 8001e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e50:	685b      	ldr	r3, [r3, #4]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fb80 	bl	8000558 <__aeabi_f2d>
 8001e58:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
				*temp_data, stm32Temp, stm32Vref, channel1->vshunt, channel1->vbus, channel1->current, channel1->power,
 8001e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e5e:	681b      	ldr	r3, [r3, #0]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fb79 	bl	8000558 <__aeabi_f2d>
 8001e66:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				*temp_data, stm32Temp, stm32Vref, channel1->vshunt, channel1->vbus, channel1->current, channel1->power,
 8001e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e6c:	68db      	ldr	r3, [r3, #12]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fb72 	bl	8000558 <__aeabi_f2d>
 8001e74:	e9c7 0108 	strd	r0, r1, [r7, #32]
				channel2->vshunt, channel2->vbus, channel2->current, channel2->power,
 8001e78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e7a:	689b      	ldr	r3, [r3, #8]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb6b 	bl	8000558 <__aeabi_f2d>
 8001e82:	e9c7 0106 	strd	r0, r1, [r7, #24]
				channel2->vshunt, channel2->vbus, channel2->current, channel2->power,
 8001e86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e88:	685b      	ldr	r3, [r3, #4]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fb64 	bl	8000558 <__aeabi_f2d>
 8001e90:	e9c7 0104 	strd	r0, r1, [r7, #16]
				channel2->vshunt, channel2->vbus, channel2->current, channel2->power,
 8001e94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e96:	681b      	ldr	r3, [r3, #0]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fb5d 	bl	8000558 <__aeabi_f2d>
 8001e9e:	e9c7 0102 	strd	r0, r1, [r7, #8]
				channel2->vshunt, channel2->vbus, channel2->current, channel2->power,
 8001ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ea4:	68db      	ldr	r3, [r3, #12]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fb56 	bl	8000558 <__aeabi_f2d>
 8001eac:	e9c7 0100 	strd	r0, r1, [r7]
				(channel2->power / channel1->power), ina_in0, ina_in1, digRead(DIG_IN0), digRead(DIG_IN1));
 8001eb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eb2:	ed93 7a03 	vldr	s14, [r3, #12]
 8001eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eb8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ebc:	eec7 6a27 	vdiv.f32	s13, s14, s15
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001ec0:	ee16 0a90 	vmov	r0, s13
 8001ec4:	f7fe fb48 	bl	8000558 <__aeabi_f2d>
 8001ec8:	4682      	mov	sl, r0
 8001eca:	468b      	mov	fp, r1
 8001ecc:	4b2b      	ldr	r3, [pc, #172]	; (8001f7c <streamMeasurements+0x180>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fb41 	bl	8000558 <__aeabi_f2d>
 8001ed6:	4680      	mov	r8, r0
 8001ed8:	4689      	mov	r9, r1
 8001eda:	4b29      	ldr	r3, [pc, #164]	; (8001f80 <streamMeasurements+0x184>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fb3a 	bl	8000558 <__aeabi_f2d>
 8001ee4:	4604      	mov	r4, r0
 8001ee6:	460d      	mov	r5, r1
				(channel2->power / channel1->power), ina_in0, ina_in1, digRead(DIG_IN0), digRead(DIG_IN1));
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f7ff fe91 	bl	8001c10 <digRead>
 8001eee:	4603      	mov	r3, r0
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001ef0:	461e      	mov	r6, r3
				(channel2->power / channel1->power), ina_in0, ina_in1, digRead(DIG_IN0), digRead(DIG_IN1));
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f7ff fe8c 	bl	8001c10 <digRead>
 8001ef8:	4603      	mov	r3, r0
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f, %0.3f,%d,%d\r\n",
 8001efa:	931b      	str	r3, [sp, #108]	; 0x6c
 8001efc:	961a      	str	r6, [sp, #104]	; 0x68
 8001efe:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 8001f02:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 8001f06:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8001f0a:	ed97 7b00 	vldr	d7, [r7]
 8001f0e:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8001f12:	ed97 7b02 	vldr	d7, [r7, #8]
 8001f16:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001f1a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f1e:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001f22:	ed97 7b06 	vldr	d7, [r7, #24]
 8001f26:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001f2a:	ed97 7b08 	vldr	d7, [r7, #32]
 8001f2e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001f32:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001f36:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001f3a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001f3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001f42:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001f46:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001f4a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001f4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001f52:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001f56:	ed8d 7b00 	vstr	d7, [sp]
 8001f5a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f5e:	4809      	ldr	r0, [pc, #36]	; (8001f84 <streamMeasurements+0x188>)
 8001f60:	f00e fdfe 	bl	8010b60 <iprintf>
//				channel2->vshunt * 1e3, channel2->vbus, channel2->current, channel2->power,
//				(channel2->power / channel1->power) * 100);

//		printf("#D#%0.1f#%0.1f#%0.3f#%0.3f#4#\n", LM75TempReading, stm32Temp, stm32Vref, channel1->vbus);
	}
}
 8001f64:	bf00      	nop
 8001f66:	376c      	adds	r7, #108	; 0x6c
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000724 	.word	0x20000724
 8001f74:	200006c0 	.word	0x200006c0
 8001f78:	200006c4 	.word	0x200006c4
 8001f7c:	200006c8 	.word	0x200006c8
 8001f80:	200006cc 	.word	0x200006cc
 8001f84:	08013140 	.word	0x08013140

08001f88 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001f8e:	4a13      	ldr	r2, [pc, #76]	; (8001fdc <MX_I2C1_Init+0x54>)
 8001f90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001f94:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <MX_I2C1_Init+0x58>)
 8001f96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f98:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001fa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001faa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fb8:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fc4:	4804      	ldr	r0, [pc, #16]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001fc6:	f003 ff31 	bl	8005e2c <HAL_I2C_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fd0:	f000 fe70 	bl	8002cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	200006d0 	.word	0x200006d0
 8001fdc:	40005400 	.word	0x40005400
 8001fe0:	000186a0 	.word	0x000186a0

08001fe4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a19      	ldr	r2, [pc, #100]	; (8002068 <HAL_I2C_MspInit+0x84>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d12b      	bne.n	800205e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	4b18      	ldr	r3, [pc, #96]	; (800206c <HAL_I2C_MspInit+0x88>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	4a17      	ldr	r2, [pc, #92]	; (800206c <HAL_I2C_MspInit+0x88>)
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	6313      	str	r3, [r2, #48]	; 0x30
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <HAL_I2C_MspInit+0x88>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002022:	23c0      	movs	r3, #192	; 0xc0
 8002024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002026:	2312      	movs	r3, #18
 8002028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800202a:	2301      	movs	r3, #1
 800202c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002032:	2304      	movs	r3, #4
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4619      	mov	r1, r3
 800203c:	480c      	ldr	r0, [pc, #48]	; (8002070 <HAL_I2C_MspInit+0x8c>)
 800203e:	f003 fd01 	bl	8005a44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_I2C_MspInit+0x88>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a08      	ldr	r2, [pc, #32]	; (800206c <HAL_I2C_MspInit+0x88>)
 800204c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002050:	6413      	str	r3, [r2, #64]	; 0x40
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_I2C_MspInit+0x88>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800205e:	bf00      	nop
 8002060:	3728      	adds	r7, #40	; 0x28
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40005400 	.word	0x40005400
 800206c:	40023800 	.word	0x40023800
 8002070:	40020400 	.word	0x40020400

08002074 <ina226_getBusVoltage>:
 */

#include "ina226.h"

float ina226_getBusVoltage(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	460b      	mov	r3, r1
 800207e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002082:	817b      	strh	r3, [r7, #10]
	return (ina226_getBusVoltageReg(I2CHandler, Address, preResult) * VBUS_LSB );
 8002084:	897b      	ldrh	r3, [r7, #10]
 8002086:	ed97 0a01 	vldr	s0, [r7, #4]
 800208a:	4619      	mov	r1, r3
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f000 f999 	bl	80023c4 <ina226_getBusVoltageReg>
 8002092:	4603      	mov	r3, r0
 8002094:	ee07 3a90 	vmov	s15, r3
 8002098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800209c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80020b0 <ina226_getBusVoltage+0x3c>
 80020a0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80020a4:	eeb0 0a67 	vmov.f32	s0, s15
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	3aa3d70a 	.word	0x3aa3d70a

080020b4 <ina226_getCurrent>:

float ina226_getCurrent(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	460b      	mov	r3, r1
 80020be:	ed87 0a01 	vstr	s0, [r7, #4]
 80020c2:	817b      	strh	r3, [r7, #10]
	return (ina226_getCurrentReg(I2CHandler, Address, preResult) * CURRENT_LSB );
 80020c4:	897b      	ldrh	r3, [r7, #10]
 80020c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80020ca:	4619      	mov	r1, r3
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f9fb 	bl	80024c8 <ina226_getCurrentReg>
 80020d2:	ee07 0a90 	vmov	s15, r0
 80020d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020da:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80020ec <ina226_getCurrent+0x38>
 80020de:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80020e2:	eeb0 0a67 	vmov.f32	s0, s15
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	3983126f 	.word	0x3983126f

080020f0 <ina226_getPower>:

float ina226_getPower(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	460b      	mov	r3, r1
 80020fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80020fe:	817b      	strh	r3, [r7, #10]
	return (ina226_getPowerReg(I2CHandler, Address, preResult) * POWER_LSB );
 8002100:	897b      	ldrh	r3, [r7, #10]
 8002102:	ed97 0a01 	vldr	s0, [r7, #4]
 8002106:	4619      	mov	r1, r3
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 f9a3 	bl	8002454 <ina226_getPowerReg>
 800210e:	4603      	mov	r3, r0
 8002110:	ee07 3a90 	vmov	s15, r3
 8002114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002118:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800212c <ina226_getPower+0x3c>
 800211c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002120:	eeb0 0a67 	vmov.f32	s0, s15
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	3bcccccd 	.word	0x3bcccccd

08002130 <ina226_getShuntVoltage>:

float ina226_getShuntVoltage(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	460b      	mov	r3, r1
 800213a:	ed87 0a01 	vstr	s0, [r7, #4]
 800213e:	817b      	strh	r3, [r7, #10]
	return (ina226_getShuntVoltageReg(I2CHandler, Address, preResult) * VSHUNT_LSB );
 8002140:	897b      	ldrh	r3, [r7, #10]
 8002142:	ed97 0a01 	vldr	s0, [r7, #4]
 8002146:	4619      	mov	r1, r3
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 f8f3 	bl	8002334 <ina226_getShuntVoltageReg>
 800214e:	ee07 0a90 	vmov	s15, r0
 8002152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002156:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002168 <ina226_getShuntVoltage+0x38>
 800215a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800215e:	eeb0 0a67 	vmov.f32	s0, s15
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	3627c5ac 	.word	0x3627c5ac

0800216c <ina226_setConfig>:

uint8_t ina226_setConfig(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint16_t ConfigWord)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af02      	add	r7, sp, #8
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	807b      	strh	r3, [r7, #2]
 8002178:	4613      	mov	r3, r2
 800217a:	803b      	strh	r3, [r7, #0]
	uint8_t sentTable[3];
	sentTable[0] = CONFIG_REG;
 800217c:	2300      	movs	r3, #0
 800217e:	733b      	strb	r3, [r7, #12]
	sentTable[1] = (ConfigWord & 0xFF00) >> 8;
 8002180:	883b      	ldrh	r3, [r7, #0]
 8002182:	0a1b      	lsrs	r3, r3, #8
 8002184:	b29b      	uxth	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	737b      	strb	r3, [r7, #13]
	sentTable[2] = (ConfigWord & 0x00FF);
 800218a:	883b      	ldrh	r3, [r7, #0]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	73bb      	strb	r3, [r7, #14]
	return HAL_I2C_Master_Transmit(I2CHandler, Address, sentTable, 3,
 8002190:	f107 020c 	add.w	r2, r7, #12
 8002194:	8879      	ldrh	r1, [r7, #2]
 8002196:	230a      	movs	r3, #10
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2303      	movs	r3, #3
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f003 ff89 	bl	80060b4 <HAL_I2C_Master_Transmit>
 80021a2:	4603      	mov	r3, r0
	I2CTIMEOUT);
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <ina226_getConfig>:

uint16_t ina226_getConfig(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af02      	add	r7, sp, #8
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	807b      	strh	r3, [r7, #2]
	uint8_t sentTable[1] =
 80021b8:	2300      	movs	r3, #0
 80021ba:	733b      	strb	r3, [r7, #12]
	{ CONFIG_REG };
	uint8_t receivedTable[2];
	HAL_I2C_Master_Transmit(I2CHandler, Address, sentTable, 1, I2CTIMEOUT);
 80021bc:	f107 020c 	add.w	r2, r7, #12
 80021c0:	8879      	ldrh	r1, [r7, #2]
 80021c2:	230a      	movs	r3, #10
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	2301      	movs	r3, #1
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f003 ff73 	bl	80060b4 <HAL_I2C_Master_Transmit>
	if (HAL_I2C_Master_Receive(I2CHandler, Address, receivedTable, 2,
 80021ce:	f107 0208 	add.w	r2, r7, #8
 80021d2:	8879      	ldrh	r1, [r7, #2]
 80021d4:	230a      	movs	r3, #10
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	2302      	movs	r3, #2
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f004 f868 	bl	80062b0 <HAL_I2C_Master_Receive>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <ina226_getConfig+0x3e>
	I2CTIMEOUT) != HAL_OK)
		return 0x00;
 80021e6:	2300      	movs	r3, #0
 80021e8:	e007      	b.n	80021fa <ina226_getConfig+0x4e>
	else
		return ((uint16_t) receivedTable[0] << 8 | receivedTable[1]);
 80021ea:	7a3b      	ldrb	r3, [r7, #8]
 80021ec:	021b      	lsls	r3, r3, #8
 80021ee:	b21a      	sxth	r2, r3
 80021f0:	7a7b      	ldrb	r3, [r7, #9]
 80021f2:	b21b      	sxth	r3, r3
 80021f4:	4313      	orrs	r3, r2
 80021f6:	b21b      	sxth	r3, r3
 80021f8:	b29b      	uxth	r3, r3
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <ina226_setAVG>:

void ina226_setAVG(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint8_t AVG)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	807b      	strh	r3, [r7, #2]
 800220e:	4613      	mov	r3, r2
 8002210:	707b      	strb	r3, [r7, #1]
	uint16_t preConfigData = 0;
 8002212:	2300      	movs	r3, #0
 8002214:	81fb      	strh	r3, [r7, #14]
	preConfigData = ina226_getConfig(I2CHandler, Address);
 8002216:	887b      	ldrh	r3, [r7, #2]
 8002218:	4619      	mov	r1, r3
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ffc6 	bl	80021ac <ina226_getConfig>
 8002220:	4603      	mov	r3, r0
 8002222:	81fb      	strh	r3, [r7, #14]
	preConfigData = (preConfigData & 0xF1FF);	// Clear bits[11:9]
 8002224:	89fb      	ldrh	r3, [r7, #14]
 8002226:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 800222a:	81fb      	strh	r3, [r7, #14]
	preConfigData |= (AVG << 9);				// Shift AVG value into bit field [11:9]
 800222c:	787b      	ldrb	r3, [r7, #1]
 800222e:	025b      	lsls	r3, r3, #9
 8002230:	b21a      	sxth	r2, r3
 8002232:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002236:	4313      	orrs	r3, r2
 8002238:	b21b      	sxth	r3, r3
 800223a:	81fb      	strh	r3, [r7, #14]
	ina226_setConfig(I2CHandler, Address, preConfigData);
 800223c:	89fa      	ldrh	r2, [r7, #14]
 800223e:	887b      	ldrh	r3, [r7, #2]
 8002240:	4619      	mov	r1, r3
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff ff92 	bl	800216c <ina226_setConfig>
}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <ina226_setMODE>:
void ina226_setMODE(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint8_t MODE)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	807b      	strh	r3, [r7, #2]
 800225c:	4613      	mov	r3, r2
 800225e:	707b      	strb	r3, [r7, #1]
	uint16_t preConfigData = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	81fb      	strh	r3, [r7, #14]
	preConfigData = ina226_getConfig(I2CHandler, Address);
 8002264:	887b      	ldrh	r3, [r7, #2]
 8002266:	4619      	mov	r1, r3
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ff9f 	bl	80021ac <ina226_getConfig>
 800226e:	4603      	mov	r3, r0
 8002270:	81fb      	strh	r3, [r7, #14]
	preConfigData = (preConfigData & 0xFFF8);	// Clear bits [2:0]
 8002272:	89fb      	ldrh	r3, [r7, #14]
 8002274:	f023 0307 	bic.w	r3, r3, #7
 8002278:	81fb      	strh	r3, [r7, #14]
	preConfigData |= MODE;						// Or MODE value into bit field [2:0]
 800227a:	787b      	ldrb	r3, [r7, #1]
 800227c:	b29a      	uxth	r2, r3
 800227e:	89fb      	ldrh	r3, [r7, #14]
 8002280:	4313      	orrs	r3, r2
 8002282:	81fb      	strh	r3, [r7, #14]
	ina226_setConfig(I2CHandler, Address, preConfigData);
 8002284:	89fa      	ldrh	r2, [r7, #14]
 8002286:	887b      	ldrh	r3, [r7, #2]
 8002288:	4619      	mov	r1, r3
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ff6e 	bl	800216c <ina226_setConfig>
}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <ina226_setVBUSCT>:

void ina226_setVBUSCT(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint8_t VBUSCT)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	807b      	strh	r3, [r7, #2]
 80022a4:	4613      	mov	r3, r2
 80022a6:	707b      	strb	r3, [r7, #1]
	uint16_t preConfigData = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	81fb      	strh	r3, [r7, #14]
	preConfigData = ina226_getConfig(I2CHandler, Address);
 80022ac:	887b      	ldrh	r3, [r7, #2]
 80022ae:	4619      	mov	r1, r3
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff7b 	bl	80021ac <ina226_getConfig>
 80022b6:	4603      	mov	r3, r0
 80022b8:	81fb      	strh	r3, [r7, #14]
	preConfigData = (preConfigData & 0xFE3F);	// Clear bits [8:6]
 80022ba:	89fb      	ldrh	r3, [r7, #14]
 80022bc:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80022c0:	81fb      	strh	r3, [r7, #14]
	preConfigData |= (VBUSCT << 6);				// shift VBUS 6 places and or with previous Configuration Data
 80022c2:	787b      	ldrb	r3, [r7, #1]
 80022c4:	019b      	lsls	r3, r3, #6
 80022c6:	b21a      	sxth	r2, r3
 80022c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	b21b      	sxth	r3, r3
 80022d0:	81fb      	strh	r3, [r7, #14]
	ina226_setConfig(I2CHandler, Address, preConfigData);
 80022d2:	89fa      	ldrh	r2, [r7, #14]
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	4619      	mov	r1, r3
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7ff ff47 	bl	800216c <ina226_setConfig>
}
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <ina226_setVSHUNTCT>:

void ina226_setVSHUNTCT(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint8_t VSHUNTCT)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	460b      	mov	r3, r1
 80022f0:	807b      	strh	r3, [r7, #2]
 80022f2:	4613      	mov	r3, r2
 80022f4:	707b      	strb	r3, [r7, #1]
	uint16_t preConfigData = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	81fb      	strh	r3, [r7, #14]
	preConfigData = ina226_getConfig(I2CHandler, Address);
 80022fa:	887b      	ldrh	r3, [r7, #2]
 80022fc:	4619      	mov	r1, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff ff54 	bl	80021ac <ina226_getConfig>
 8002304:	4603      	mov	r3, r0
 8002306:	81fb      	strh	r3, [r7, #14]
	preConfigData = (preConfigData & 0xFFC7);	// Clear bits [5:3]
 8002308:	89fb      	ldrh	r3, [r7, #14]
 800230a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800230e:	81fb      	strh	r3, [r7, #14]
	preConfigData |= (VSHUNTCT << 3);			// shift VBUS 3 places and or with previous Configuration Data
 8002310:	787b      	ldrb	r3, [r7, #1]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	b21a      	sxth	r2, r3
 8002316:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800231a:	4313      	orrs	r3, r2
 800231c:	b21b      	sxth	r3, r3
 800231e:	81fb      	strh	r3, [r7, #14]
	ina226_setConfig(I2CHandler, Address, preConfigData);
 8002320:	89fa      	ldrh	r2, [r7, #14]
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	4619      	mov	r1, r3
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ff20 	bl	800216c <ina226_setConfig>
}
 800232c:	bf00      	nop
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <ina226_getShuntVoltageReg>:
	float convRshunt = (((float) (Rshunt >> 3) * 0.001)) * (pow(10, (float) (Rshunt & 0x07)));
	ina226_setCalibrationReg(I2CHandler, Address, (uint16_t) (INA226_CONST / (convRshunt * CURRENT_LSB )));
}

int32_t ina226_getShuntVoltageReg(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af02      	add	r7, sp, #8
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	460b      	mov	r3, r1
 800233e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002342:	817b      	strh	r3, [r7, #10]
	uint8_t SentTable[1] =
 8002344:	2301      	movs	r3, #1
 8002346:	753b      	strb	r3, [r7, #20]
	{ SHUNTV_REG };
	uint8_t ReceivedTable[2];
	HAL_I2C_Master_Transmit(I2CHandler, Address, SentTable, 1, I2CTIMEOUT);
 8002348:	f107 0214 	add.w	r2, r7, #20
 800234c:	8979      	ldrh	r1, [r7, #10]
 800234e:	230a      	movs	r3, #10
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	2301      	movs	r3, #1
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f003 fead 	bl	80060b4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(I2CHandler, Address, ReceivedTable, 2, I2CTIMEOUT);
 800235a:	f107 0210 	add.w	r2, r7, #16
 800235e:	8979      	ldrh	r1, [r7, #10]
 8002360:	230a      	movs	r3, #10
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	2302      	movs	r3, #2
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f003 ffa2 	bl	80062b0 <HAL_I2C_Master_Receive>
	if (HAL_I2C_Master_Receive(I2CHandler, Address, ReceivedTable, 2,
 800236c:	f107 0210 	add.w	r2, r7, #16
 8002370:	8979      	ldrh	r1, [r7, #10]
 8002372:	230a      	movs	r3, #10
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	2302      	movs	r3, #2
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f003 ff99 	bl	80062b0 <HAL_I2C_Master_Receive>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <ina226_getShuntVoltageReg+0x66>
	I2CTIMEOUT) != HAL_OK)
	{
		return (int32_t) (preResult / VSHUNT_LSB );
 8002384:	ed97 7a01 	vldr	s14, [r7, #4]
 8002388:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80023c0 <ina226_getShuntVoltageReg+0x8c>
 800238c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002394:	ee17 3a90 	vmov	r3, s15
 8002398:	e00e      	b.n	80023b8 <ina226_getShuntVoltageReg+0x84>
	}
	else
	{
		if (ReceivedTable[0] > 127)
 800239a:	7c3b      	ldrb	r3, [r7, #16]
 800239c:	b25b      	sxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	da06      	bge.n	80023b0 <ina226_getShuntVoltageReg+0x7c>
		{
			return (int32_t) ((ReceivedTable[0] << 8 | ReceivedTable[1]) - INA226_ADC_RESOLUTION );
 80023a2:	7c3b      	ldrb	r3, [r7, #16]
 80023a4:	021b      	lsls	r3, r3, #8
 80023a6:	7c7a      	ldrb	r2, [r7, #17]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80023ae:	e003      	b.n	80023b8 <ina226_getShuntVoltageReg+0x84>
		}
		else
		{

			return ((int32_t) ReceivedTable[0] << 8 | ReceivedTable[1]);
 80023b0:	7c3b      	ldrb	r3, [r7, #16]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	7c7a      	ldrb	r2, [r7, #17]
 80023b6:	4313      	orrs	r3, r2
		}
	}
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	3627c5ac 	.word	0x3627c5ac

080023c4 <ina226_getBusVoltageReg>:

uint16_t ina226_getBusVoltageReg(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	460b      	mov	r3, r1
 80023ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80023d2:	817b      	strh	r3, [r7, #10]
	uint8_t sentTable[1] =
 80023d4:	2302      	movs	r3, #2
 80023d6:	753b      	strb	r3, [r7, #20]
	{ BUSV_REG };
	uint8_t receivedTable[2];
	HAL_I2C_Master_Transmit(I2CHandler, Address, sentTable, 1, I2CTIMEOUT);
 80023d8:	f107 0214 	add.w	r2, r7, #20
 80023dc:	8979      	ldrh	r1, [r7, #10]
 80023de:	230a      	movs	r3, #10
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	2301      	movs	r3, #1
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f003 fe65 	bl	80060b4 <HAL_I2C_Master_Transmit>
	if (HAL_I2C_Master_Receive(I2CHandler, Address, receivedTable, 2, I2CTIMEOUT) != HAL_OK)
 80023ea:	f107 0210 	add.w	r2, r7, #16
 80023ee:	8979      	ldrh	r1, [r7, #10]
 80023f0:	230a      	movs	r3, #10
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	2302      	movs	r3, #2
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f003 ff5a 	bl	80062b0 <HAL_I2C_Master_Receive>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <ina226_getBusVoltageReg+0x56>
	{
		return (uint16_t) (preResult / VBUS_LSB );
 8002402:	ed97 7a01 	vldr	s14, [r7, #4]
 8002406:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002450 <ina226_getBusVoltageReg+0x8c>
 800240a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800240e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002412:	ee17 3a90 	vmov	r3, s15
 8002416:	b29b      	uxth	r3, r3
 8002418:	e016      	b.n	8002448 <ina226_getBusVoltageReg+0x84>
	}
	else
	{
		if (receivedTable[0] > 127)
 800241a:	7c3b      	ldrb	r3, [r7, #16]
 800241c:	b25b      	sxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	da0a      	bge.n	8002438 <ina226_getBusVoltageReg+0x74>
		{
			return (uint16_t) (INA226_ADC_RESOLUTION - (receivedTable[0] << 8 | receivedTable[1]));
 8002422:	7c3b      	ldrb	r3, [r7, #16]
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	b21a      	sxth	r2, r3
 8002428:	7c7b      	ldrb	r3, [r7, #17]
 800242a:	b21b      	sxth	r3, r3
 800242c:	4313      	orrs	r3, r2
 800242e:	b21b      	sxth	r3, r3
 8002430:	b29b      	uxth	r3, r3
 8002432:	425b      	negs	r3, r3
 8002434:	b29b      	uxth	r3, r3
 8002436:	e007      	b.n	8002448 <ina226_getBusVoltageReg+0x84>
		}
		else
		{
			return ((uint16_t) receivedTable[0] << 8 | receivedTable[1]);
 8002438:	7c3b      	ldrb	r3, [r7, #16]
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	b21a      	sxth	r2, r3
 800243e:	7c7b      	ldrb	r3, [r7, #17]
 8002440:	b21b      	sxth	r3, r3
 8002442:	4313      	orrs	r3, r2
 8002444:	b21b      	sxth	r3, r3
 8002446:	b29b      	uxth	r3, r3
		}
	}
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	3aa3d70a 	.word	0x3aa3d70a

08002454 <ina226_getPowerReg>:

uint16_t ina226_getPowerReg(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af02      	add	r7, sp, #8
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	460b      	mov	r3, r1
 800245e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002462:	817b      	strh	r3, [r7, #10]
	uint8_t SentTable[1] =
 8002464:	2303      	movs	r3, #3
 8002466:	753b      	strb	r3, [r7, #20]
	{ POWER_REG };
	uint8_t ReceivedTable[2];
	HAL_I2C_Master_Transmit(I2CHandler, Address, SentTable, 1, I2CTIMEOUT);
 8002468:	f107 0214 	add.w	r2, r7, #20
 800246c:	8979      	ldrh	r1, [r7, #10]
 800246e:	230a      	movs	r3, #10
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2301      	movs	r3, #1
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f003 fe1d 	bl	80060b4 <HAL_I2C_Master_Transmit>
	if (HAL_I2C_Master_Receive(I2CHandler, Address, ReceivedTable, 2,
 800247a:	f107 0210 	add.w	r2, r7, #16
 800247e:	8979      	ldrh	r1, [r7, #10]
 8002480:	230a      	movs	r3, #10
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2302      	movs	r3, #2
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f003 ff12 	bl	80062b0 <HAL_I2C_Master_Receive>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00b      	beq.n	80024aa <ina226_getPowerReg+0x56>
	I2CTIMEOUT) != HAL_OK)
	{
		return preResult / POWER_LSB ;
 8002492:	ed97 7a01 	vldr	s14, [r7, #4]
 8002496:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80024c4 <ina226_getPowerReg+0x70>
 800249a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800249e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024a2:	ee17 3a90 	vmov	r3, s15
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	e007      	b.n	80024ba <ina226_getPowerReg+0x66>
	}
	else
		return (uint16_t) (ReceivedTable[0] << 8 | ReceivedTable[1]);
 80024aa:	7c3b      	ldrb	r3, [r7, #16]
 80024ac:	021b      	lsls	r3, r3, #8
 80024ae:	b21a      	sxth	r2, r3
 80024b0:	7c7b      	ldrb	r3, [r7, #17]
 80024b2:	b21b      	sxth	r3, r3
 80024b4:	4313      	orrs	r3, r2
 80024b6:	b21b      	sxth	r3, r3
 80024b8:	b29b      	uxth	r3, r3

}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	3bcccccd 	.word	0x3bcccccd

080024c8 <ina226_getCurrentReg>:

int32_t ina226_getCurrentReg(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	460b      	mov	r3, r1
 80024d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80024d6:	817b      	strh	r3, [r7, #10]
	uint8_t SentTable[1] =
 80024d8:	2304      	movs	r3, #4
 80024da:	753b      	strb	r3, [r7, #20]
	{ CURRENT_REG };
	uint8_t ReceivedTable[2];
	HAL_I2C_Master_Transmit(I2CHandler, Address, SentTable, 1, I2CTIMEOUT);
 80024dc:	f107 0214 	add.w	r2, r7, #20
 80024e0:	8979      	ldrh	r1, [r7, #10]
 80024e2:	230a      	movs	r3, #10
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	2301      	movs	r3, #1
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f003 fde3 	bl	80060b4 <HAL_I2C_Master_Transmit>
	if (HAL_I2C_Master_Receive(I2CHandler, Address, ReceivedTable, 2,
 80024ee:	f107 0210 	add.w	r2, r7, #16
 80024f2:	8979      	ldrh	r1, [r7, #10]
 80024f4:	230a      	movs	r3, #10
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	2302      	movs	r3, #2
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f003 fed8 	bl	80062b0 <HAL_I2C_Master_Receive>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00b      	beq.n	800251e <ina226_getCurrentReg+0x56>
	I2CTIMEOUT) != HAL_OK)
	{
		return (uint16_t) (preResult / CURRENT_LSB );
 8002506:	ed97 7a01 	vldr	s14, [r7, #4]
 800250a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002544 <ina226_getCurrentReg+0x7c>
 800250e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002516:	ee17 3a90 	vmov	r3, s15
 800251a:	b29b      	uxth	r3, r3
 800251c:	e00e      	b.n	800253c <ina226_getCurrentReg+0x74>
	}
	else
	{
		if (ReceivedTable[0] > 127)
 800251e:	7c3b      	ldrb	r3, [r7, #16]
 8002520:	b25b      	sxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	da06      	bge.n	8002534 <ina226_getCurrentReg+0x6c>
		{
			return ((int32_t) ((ReceivedTable[0] << 8 | ReceivedTable[1]) - INA226_ADC_RESOLUTION ));
 8002526:	7c3b      	ldrb	r3, [r7, #16]
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	7c7a      	ldrb	r2, [r7, #17]
 800252c:	4313      	orrs	r3, r2
 800252e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8002532:	e003      	b.n	800253c <ina226_getCurrentReg+0x74>
		}
		else
		{

			return ((int32_t) ReceivedTable[0] << 8 | ReceivedTable[1]);
 8002534:	7c3b      	ldrb	r3, [r7, #16]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	7c7a      	ldrb	r2, [r7, #17]
 800253a:	4313      	orrs	r3, r2
		}
	}

}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	3983126f 	.word	0x3983126f

08002548 <ina226_setCalibrationReg>:

uint8_t ina226_setCalibrationReg(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint16_t ConfigWord)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af02      	add	r7, sp, #8
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	807b      	strh	r3, [r7, #2]
 8002554:	4613      	mov	r3, r2
 8002556:	803b      	strh	r3, [r7, #0]
	uint8_t sentTable[3];
	sentTable[0] = CALIB_REG;
 8002558:	2305      	movs	r3, #5
 800255a:	733b      	strb	r3, [r7, #12]
	sentTable[1] = (ConfigWord & 0xFF00) >> 8;
 800255c:	883b      	ldrh	r3, [r7, #0]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	b29b      	uxth	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	737b      	strb	r3, [r7, #13]
	sentTable[2] = (ConfigWord & 0x00FF);
 8002566:	883b      	ldrh	r3, [r7, #0]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	73bb      	strb	r3, [r7, #14]
	return HAL_I2C_Master_Transmit(I2CHandler, Address, sentTable, 3,
 800256c:	f107 020c 	add.w	r2, r7, #12
 8002570:	8879      	ldrh	r1, [r7, #2]
 8002572:	230a      	movs	r3, #10
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	2303      	movs	r3, #3
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f003 fd9b 	bl	80060b4 <HAL_I2C_Master_Transmit>
 800257e:	4603      	mov	r3, r0
	I2CTIMEOUT);
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <ina226_getResult>:

	return calRegResult;
}

void ina226_getResult(Ina226Data_t *resultdef, I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	4613      	mov	r3, r2
 8002594:	80fb      	strh	r3, [r7, #6]
	resultdef->vbus = ina226_getBusVoltage(I2CHandler, Address, resultdef->vbus);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	edd3 7a01 	vldr	s15, [r3, #4]
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	eeb0 0a67 	vmov.f32	s0, s15
 80025a2:	4619      	mov	r1, r3
 80025a4:	68b8      	ldr	r0, [r7, #8]
 80025a6:	f7ff fd65 	bl	8002074 <ina226_getBusVoltage>
 80025aa:	eef0 7a40 	vmov.f32	s15, s0
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	edc3 7a01 	vstr	s15, [r3, #4]
	osDelay(1);
 80025b4:	2001      	movs	r0, #1
 80025b6:	f00b fc80 	bl	800deba <osDelay>
	resultdef->current = ina226_getCurrent(I2CHandler, Address, resultdef->current);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	edd3 7a00 	vldr	s15, [r3]
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	eeb0 0a67 	vmov.f32	s0, s15
 80025c6:	4619      	mov	r1, r3
 80025c8:	68b8      	ldr	r0, [r7, #8]
 80025ca:	f7ff fd73 	bl	80020b4 <ina226_getCurrent>
 80025ce:	eef0 7a40 	vmov.f32	s15, s0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	edc3 7a00 	vstr	s15, [r3]
	osDelay(1);
 80025d8:	2001      	movs	r0, #1
 80025da:	f00b fc6e 	bl	800deba <osDelay>
	resultdef->vshunt = ina226_getShuntVoltage(I2CHandler, Address, resultdef->vshunt);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ea:	4619      	mov	r1, r3
 80025ec:	68b8      	ldr	r0, [r7, #8]
 80025ee:	f7ff fd9f 	bl	8002130 <ina226_getShuntVoltage>
 80025f2:	eef0 7a40 	vmov.f32	s15, s0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	edc3 7a02 	vstr	s15, [r3, #8]
	osDelay(1);
 80025fc:	2001      	movs	r0, #1
 80025fe:	f00b fc5c 	bl	800deba <osDelay>
	resultdef->power = ina226_getPower(I2CHandler, Address, resultdef->power);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	edd3 7a03 	vldr	s15, [r3, #12]
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	eeb0 0a67 	vmov.f32	s0, s15
 800260e:	4619      	mov	r1, r3
 8002610:	68b8      	ldr	r0, [r7, #8]
 8002612:	f7ff fd6d 	bl	80020f0 <ina226_getPower>
 8002616:	eef0 7a40 	vmov.f32	s15, s0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	edc3 7a03 	vstr	s15, [r3, #12]
	osDelay(1);
 8002620:	2001      	movs	r0, #1
 8002622:	f00b fc4a 	bl	800deba <osDelay>
//	{
//		resultdef->current = ina226_getCurrent(I2CHandler, Address);
//		resultdef->vshunt = ina226_getShuntVoltage(I2CHandler, Address);
//		resultdef->power = ina226_getPower(I2CHandler, Address);
//	}
}
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <ina226_setMaskEnable>:
	else
		return ((uint16_t) receivedTable[0] << 8 | receivedTable[1]);
}

uint8_t ina226_setMaskEnable(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint16_t ConfigWord)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af02      	add	r7, sp, #8
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	460b      	mov	r3, r1
 8002638:	807b      	strh	r3, [r7, #2]
 800263a:	4613      	mov	r3, r2
 800263c:	803b      	strh	r3, [r7, #0]
	uint8_t sentTable[3];
	sentTable[0] = MASK_REG;
 800263e:	2306      	movs	r3, #6
 8002640:	733b      	strb	r3, [r7, #12]
	sentTable[1] = (ConfigWord & 0xFF00) >> 8;
 8002642:	883b      	ldrh	r3, [r7, #0]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	b29b      	uxth	r3, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	737b      	strb	r3, [r7, #13]
	sentTable[2] = (ConfigWord & 0x00FF);
 800264c:	883b      	ldrh	r3, [r7, #0]
 800264e:	b2db      	uxtb	r3, r3
 8002650:	73bb      	strb	r3, [r7, #14]
	return HAL_I2C_Master_Transmit(I2CHandler, Address, sentTable, 3,
 8002652:	f107 020c 	add.w	r2, r7, #12
 8002656:	8879      	ldrh	r1, [r7, #2]
 8002658:	230a      	movs	r3, #10
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	2303      	movs	r3, #3
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f003 fd28 	bl	80060b4 <HAL_I2C_Master_Transmit>
 8002664:	4603      	mov	r3, r0
	I2CTIMEOUT);
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <ina226_channelInit>:
	else
		return ((uint16_t) receivedTable[0] << 8 | receivedTable[1]);
}

void ina226_channelInit(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint16_t config)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	460b      	mov	r3, r1
 8002678:	807b      	strh	r3, [r7, #2]
 800267a:	4613      	mov	r3, r2
 800267c:	803b      	strh	r3, [r7, #0]
	ina226_setCalibrationReg(I2CHandler, Address, CALIB_VAL);
 800267e:	887b      	ldrh	r3, [r7, #2]
 8002680:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002684:	4619      	mov	r1, r3
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ff5e 	bl	8002548 <ina226_setCalibrationReg>
	ina226_setConfig(I2CHandler, Address, config);
 800268c:	883a      	ldrh	r2, [r7, #0]
 800268e:	887b      	ldrh	r3, [r7, #2]
 8002690:	4619      	mov	r1, r3
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff fd6a 	bl	800216c <ina226_setConfig>
}
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <ina226_setBusUnderVoltageAlert>:
void ina226_setBusUnderVoltageAlert(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	807b      	strh	r3, [r7, #2]
	ina226_setMaskEnable(I2CHandler, Address, (BUL | APOL));
 80026ac:	887b      	ldrh	r3, [r7, #2]
 80026ae:	f241 0202 	movw	r2, #4098	; 0x1002
 80026b2:	4619      	mov	r1, r3
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff ffba 	bl	800262e <ina226_setMaskEnable>
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <ina226_setBusOverVoltageAlert>:

void ina226_setBusOverVoltageAlert(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	460b      	mov	r3, r1
 80026cc:	807b      	strh	r3, [r7, #2]
	ina226_setMaskEnable(I2CHandler, Address, (BOL | APOL));
 80026ce:	887b      	ldrh	r3, [r7, #2]
 80026d0:	f242 0202 	movw	r2, #8194	; 0x2002
 80026d4:	4619      	mov	r1, r3
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff ffa9 	bl	800262e <ina226_setMaskEnable>
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <ina226_setShuntOverVoltageAlert>:
{
	ina226_setAlertLimit(I2CHandler, Address, (uint16_t) (limit / VBUS_LSB ));
}

void ina226_setShuntOverVoltageAlert(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
	ina226_setMaskEnable(I2CHandler, Address, (SOL | APOL));
 80026f0:	887b      	ldrh	r3, [r7, #2]
 80026f2:	f248 0202 	movw	r2, #32770	; 0x8002
 80026f6:	4619      	mov	r1, r3
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ff98 	bl	800262e <ina226_setMaskEnable>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <ina226_setShuntUnderVoltageAlert>:
void ina226_setShuntUnderVoltageAlert(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	460b      	mov	r3, r1
 8002710:	807b      	strh	r3, [r7, #2]
	ina226_setMaskEnable(I2CHandler, Address, (SUL | APOL));
 8002712:	887b      	ldrh	r3, [r7, #2]
 8002714:	f244 0202 	movw	r2, #16386	; 0x4002
 8002718:	4619      	mov	r1, r3
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ff87 	bl	800262e <ina226_setMaskEnable>
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <ina226_setOverPowerAlert>:
{
	ina226_setAlertLimit(I2CHandler, Address, (uint16_t) (limit / VSHUNT_LSB ));
}

void ina226_setOverPowerAlert(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	807b      	strh	r3, [r7, #2]
	ina226_setMaskEnable(I2CHandler, Address, (POL | APOL));
 8002734:	887b      	ldrh	r3, [r7, #2]
 8002736:	f640 0202 	movw	r2, #2050	; 0x802
 800273a:	4619      	mov	r1, r3
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff ff76 	bl	800262e <ina226_setMaskEnable>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <ina226_setOverCurrentAlert>:
{
	ina226_setAlertLimit(I2CHandler, Address, (uint16_t) (limit / POWER_LSB ));
}

void ina226_setOverCurrentAlert(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	460b      	mov	r3, r1
 8002754:	807b      	strh	r3, [r7, #2]
	ina226_setMaskEnable(I2CHandler, Address, (SOL | APOL));
 8002756:	887b      	ldrh	r3, [r7, #2]
 8002758:	f248 0202 	movw	r2, #32770	; 0x8002
 800275c:	4619      	mov	r1, r3
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff ff65 	bl	800262e <ina226_setMaskEnable>
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <ina226_setUnderCurrentAlert>:

void ina226_setUnderCurrentAlert(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	807b      	strh	r3, [r7, #2]
	ina226_setMaskEnable(I2CHandler, Address, (SUL | APOL));
 8002778:	887b      	ldrh	r3, [r7, #2]
 800277a:	f244 0202 	movw	r2, #16386	; 0x4002
 800277e:	4619      	mov	r1, r3
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff ff54 	bl	800262e <ina226_setMaskEnable>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <led1On>:
 */

#include "led.h"

void led1On(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8002794:	2200      	movs	r2, #0
 8002796:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800279a:	4802      	ldr	r0, [pc, #8]	; (80027a4 <led1On+0x14>)
 800279c:	f003 faee 	bl	8005d7c <HAL_GPIO_WritePin>
}
 80027a0:	bf00      	nop
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40020400 	.word	0x40020400

080027a8 <led2On>:

void led2On(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 80027ac:	2200      	movs	r2, #0
 80027ae:	2110      	movs	r1, #16
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <led2On+0x14>)
 80027b2:	f003 fae3 	bl	8005d7c <HAL_GPIO_WritePin>
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40020000 	.word	0x40020000

080027c0 <led1Off>:

void led1Off(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 80027c4:	2201      	movs	r2, #1
 80027c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027ca:	4802      	ldr	r0, [pc, #8]	; (80027d4 <led1Off+0x14>)
 80027cc:	f003 fad6 	bl	8005d7c <HAL_GPIO_WritePin>
}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40020400 	.word	0x40020400

080027d8 <led2Off>:

void led2Off(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 80027dc:	2201      	movs	r2, #1
 80027de:	2110      	movs	r1, #16
 80027e0:	4802      	ldr	r0, [pc, #8]	; (80027ec <led2Off+0x14>)
 80027e2:	f003 facb 	bl	8005d7c <HAL_GPIO_WritePin>
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40020000 	.word	0x40020000

080027f0 <led1Blink>:

void led1Blink(uint16_t delay)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 80027fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027fe:	4805      	ldr	r0, [pc, #20]	; (8002814 <led1Blink+0x24>)
 8002800:	f003 fad5 	bl	8005dae <HAL_GPIO_TogglePin>
	HAL_Delay((uint16_t) delay);
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	4618      	mov	r0, r3
 8002808:	f002 f898 	bl	800493c <HAL_Delay>
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40020400 	.word	0x40020400

08002818 <lm75ad_readTempReg>:
	sent_table[1] = configuration;
	HAL_I2C_Master_Transmit(I2CHandler, Address, sent_table, 2, I2C_TIMEOUT);
}

uint16_t lm75ad_readTempReg(I2C_HandleTypeDef *I2CHandler, uint8_t Address, float preResult)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	460b      	mov	r3, r1
 8002822:	ed87 0a01 	vstr	s0, [r7, #4]
 8002826:	72fb      	strb	r3, [r7, #11]
	uint8_t sent_table[1] =
 8002828:	2300      	movs	r3, #0
 800282a:	753b      	strb	r3, [r7, #20]
	{ TEMP_REG };
	uint8_t received_table[2];
	HAL_I2C_Master_Transmit(I2CHandler, Address, sent_table, 1, I2C_TIMEOUT);
 800282c:	7afb      	ldrb	r3, [r7, #11]
 800282e:	b299      	uxth	r1, r3
 8002830:	f107 0214 	add.w	r2, r7, #20
 8002834:	230a      	movs	r3, #10
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	2301      	movs	r3, #1
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f003 fc3a 	bl	80060b4 <HAL_I2C_Master_Transmit>

	if (HAL_I2C_Master_Receive(I2CHandler, Address, received_table, 2, I2C_TIMEOUT) != HAL_OK)
 8002840:	7afb      	ldrb	r3, [r7, #11]
 8002842:	b299      	uxth	r1, r3
 8002844:	f107 0210 	add.w	r2, r7, #16
 8002848:	230a      	movs	r3, #10
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	2302      	movs	r3, #2
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f003 fd2e 	bl	80062b0 <HAL_I2C_Master_Receive>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d011      	beq.n	800287e <lm75ad_readTempReg+0x66>
	{
		return (uint16_t) (preResult / TEMP_RESOLUTION);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fd fe7c 	bl	8000558 <__aeabi_f2d>
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002868:	f7fd fff8 	bl	800085c <__aeabi_ddiv>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4610      	mov	r0, r2
 8002872:	4619      	mov	r1, r3
 8002874:	f7fe f9a0 	bl	8000bb8 <__aeabi_d2uiz>
 8002878:	4603      	mov	r3, r0
 800287a:	b29b      	uxth	r3, r3
 800287c:	e005      	b.n	800288a <lm75ad_readTempReg+0x72>
	}
	else
	{
		return (uint16_t) (((received_table[0] << 8) | received_table[1]) >> 5);
 800287e:	7c3b      	ldrb	r3, [r7, #16]
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	7c7a      	ldrb	r2, [r7, #17]
 8002884:	4313      	orrs	r3, r2
 8002886:	115b      	asrs	r3, r3, #5
 8002888:	b29b      	uxth	r3, r3
	}

}
 800288a:	4618      	mov	r0, r3
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <lm75ad_setTosLimit>:

void lm75ad_setTosLimit(I2C_HandleTypeDef *I2CHandler, uint8_t Address, float tos_limit)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af02      	add	r7, sp, #8
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	460b      	mov	r3, r1
 800289e:	ed87 0a01 	vstr	s0, [r7, #4]
 80028a2:	72fb      	strb	r3, [r7, #11]
	uint16_t sent_limit = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	82fb      	strh	r3, [r7, #22]
	/*Example: Temp = -55C*/
	/*512-(-55*(-2))*=402 ==> 402<<7=51456 (0x0192<<7 = 0xC900)*/

	if (tos_limit < 0)
 80028a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80028ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b4:	d51b      	bpl.n	80028ee <lm75ad_setTosLimit+0x5a>
	{
		sent_limit = (512 - ((uint16_t) (-tos_limit / TOS_THYST_RESOLUTION))) << 7;
 80028b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80028ba:	eef1 7a67 	vneg.f32	s15, s15
 80028be:	ee17 3a90 	vmov	r3, s15
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fd fe48 	bl	8000558 <__aeabi_f2d>
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <lm75ad_setTosLimit+0xb0>)
 80028ce:	f7fd ffc5 	bl	800085c <__aeabi_ddiv>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	f7fe f96d 	bl	8000bb8 <__aeabi_d2uiz>
 80028de:	4603      	mov	r3, r0
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	01db      	lsls	r3, r3, #7
 80028ea:	82fb      	strh	r3, [r7, #22]
 80028ec:	e011      	b.n	8002912 <lm75ad_setTosLimit+0x7e>
	}
	else
	{
		sent_limit = (uint16_t) (tos_limit / TOS_THYST_RESOLUTION) << 7;
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fd fe32 	bl	8000558 <__aeabi_f2d>
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	4b12      	ldr	r3, [pc, #72]	; (8002944 <lm75ad_setTosLimit+0xb0>)
 80028fa:	f7fd ffaf 	bl	800085c <__aeabi_ddiv>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	f7fe f957 	bl	8000bb8 <__aeabi_d2uiz>
 800290a:	4603      	mov	r3, r0
 800290c:	b29b      	uxth	r3, r3
 800290e:	01db      	lsls	r3, r3, #7
 8002910:	82fb      	strh	r3, [r7, #22]
	}

	uint8_t sent_table[3];
	sent_table[0] = TOS_REG;
 8002912:	2303      	movs	r3, #3
 8002914:	743b      	strb	r3, [r7, #16]
	sent_table[1] = (sent_limit & 0xFF00) >> 8;
 8002916:	8afb      	ldrh	r3, [r7, #22]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	b29b      	uxth	r3, r3
 800291c:	b2db      	uxtb	r3, r3
 800291e:	747b      	strb	r3, [r7, #17]
	sent_table[2] = (sent_limit & 0x00FF);
 8002920:	8afb      	ldrh	r3, [r7, #22]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Master_Transmit(I2CHandler, Address, sent_table, 3,
 8002926:	7afb      	ldrb	r3, [r7, #11]
 8002928:	b299      	uxth	r1, r3
 800292a:	f107 0210 	add.w	r2, r7, #16
 800292e:	230a      	movs	r3, #10
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	2303      	movs	r3, #3
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f003 fbbd 	bl	80060b4 <HAL_I2C_Master_Transmit>
	I2C_TIMEOUT);

}
 800293a:	bf00      	nop
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	3fe00000 	.word	0x3fe00000

08002948 <lm75ad_setThystLimit>:

	}
}

void lm75ad_setThystLimit(I2C_HandleTypeDef *I2CHandler, uint8_t Address, float thyst_limit)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af02      	add	r7, sp, #8
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	460b      	mov	r3, r1
 8002952:	ed87 0a01 	vstr	s0, [r7, #4]
 8002956:	72fb      	strb	r3, [r7, #11]
	uint16_t sent_limit = 0;
 8002958:	2300      	movs	r3, #0
 800295a:	82fb      	strh	r3, [r7, #22]
	/*Example: Temp = -55C*/
	/*512-(-55*(-2))*=402 ==> 402<<7=51456 (0x0192<<7 = 0xC900)*/

	if (thyst_limit < 0)
 800295c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002960:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002968:	d51b      	bpl.n	80029a2 <lm75ad_setThystLimit+0x5a>
	{
		sent_limit = (512 - ((uint16_t) (-thyst_limit / TOS_THYST_RESOLUTION))) << 7;
 800296a:	edd7 7a01 	vldr	s15, [r7, #4]
 800296e:	eef1 7a67 	vneg.f32	s15, s15
 8002972:	ee17 3a90 	vmov	r3, s15
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fdee 	bl	8000558 <__aeabi_f2d>
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <lm75ad_setThystLimit+0xb0>)
 8002982:	f7fd ff6b 	bl	800085c <__aeabi_ddiv>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	f7fe f913 	bl	8000bb8 <__aeabi_d2uiz>
 8002992:	4603      	mov	r3, r0
 8002994:	b29b      	uxth	r3, r3
 8002996:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800299a:	b29b      	uxth	r3, r3
 800299c:	01db      	lsls	r3, r3, #7
 800299e:	82fb      	strh	r3, [r7, #22]
 80029a0:	e011      	b.n	80029c6 <lm75ad_setThystLimit+0x7e>
	}
	else
	{
		sent_limit = (uint16_t) (thyst_limit / TOS_THYST_RESOLUTION) << 7;
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fd fdd8 	bl	8000558 <__aeabi_f2d>
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <lm75ad_setThystLimit+0xb0>)
 80029ae:	f7fd ff55 	bl	800085c <__aeabi_ddiv>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	f7fe f8fd 	bl	8000bb8 <__aeabi_d2uiz>
 80029be:	4603      	mov	r3, r0
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	01db      	lsls	r3, r3, #7
 80029c4:	82fb      	strh	r3, [r7, #22]
	}

	uint8_t sent_table[3];
	sent_table[0] = THYST_REG;
 80029c6:	2302      	movs	r3, #2
 80029c8:	743b      	strb	r3, [r7, #16]
	sent_table[1] = (sent_limit & 0xFF00) >> 8;
 80029ca:	8afb      	ldrh	r3, [r7, #22]
 80029cc:	0a1b      	lsrs	r3, r3, #8
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	747b      	strb	r3, [r7, #17]
	sent_table[2] = (sent_limit & 0x00FF);
 80029d4:	8afb      	ldrh	r3, [r7, #22]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Master_Transmit(I2CHandler, Address, sent_table, 3,
 80029da:	7afb      	ldrb	r3, [r7, #11]
 80029dc:	b299      	uxth	r1, r3
 80029de:	f107 0210 	add.w	r2, r7, #16
 80029e2:	230a      	movs	r3, #10
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	2303      	movs	r3, #3
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f003 fb63 	bl	80060b4 <HAL_I2C_Master_Transmit>
	I2C_TIMEOUT);

}
 80029ee:	bf00      	nop
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	3fe00000 	.word	0x3fe00000

080029fc <lm75ad_getTempValue>:

	}
}

float lm75ad_getTempValue(I2C_HandleTypeDef *I2CHandler, uint8_t Address, float preResult)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	460b      	mov	r3, r1
 8002a06:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a0a:	72fb      	strb	r3, [r7, #11]
	uint16_t data = lm75ad_readTempReg(I2CHandler, Address, preResult);
 8002a0c:	7afb      	ldrb	r3, [r7, #11]
 8002a0e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a12:	4619      	mov	r1, r3
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f7ff feff 	bl	8002818 <lm75ad_readTempReg>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	82fb      	strh	r3, [r7, #22]
	/*Example: -25C*/
	/*-25 -> 0b111 1110 0111 (dec 2023) => 2023-2^11(2048)=-25*/
	if ((data >> 10) == 1) // Check if the MSB is 1, meaning a negative temperature is measured
 8002a1e:	8afb      	ldrh	r3, [r7, #22]
 8002a20:	0a9b      	lsrs	r3, r3, #10
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d10b      	bne.n	8002a40 <lm75ad_getTempValue+0x44>
	{
		//data = (~(data - 1)) & 0x07FF; // convert to positive number and keep 11-bits
		return ((float) (data - 2048) * TEMP_RESOLUTION);
 8002a28:	8afb      	ldrh	r3, [r7, #22]
 8002a2a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002a2e:	ee07 3a90 	vmov	s15, r3
 8002a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a36:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a3e:	e008      	b.n	8002a52 <lm75ad_getTempValue+0x56>
	}
	else
	{
		return ((float) (data) * TEMP_RESOLUTION);
 8002a40:	8afb      	ldrh	r3, [r7, #22]
 8002a42:	ee07 3a90 	vmov	s15, r3
 8002a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4a:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
	}

}
 8002a52:	eeb0 0a67 	vmov.f32	s0, s15
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002a60:	f001 ff2a 	bl	80048b8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002a64:	f000 f8aa 	bl	8002bbc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002a68:	f7fe fe4e 	bl	8001708 <MX_GPIO_Init>
	MX_DMA_Init();
 8002a6c:	f7fe fc0c 	bl	8001288 <MX_DMA_Init>
	MX_ADC1_Init();
 8002a70:	f7fe fa94 	bl	8000f9c <MX_ADC1_Init>
	MX_I2C1_Init();
 8002a74:	f7ff fa88 	bl	8001f88 <MX_I2C1_Init>
	MX_SPI1_Init();
 8002a78:	f001 f992 	bl	8003da0 <MX_SPI1_Init>
	MX_TIM4_Init();
 8002a7c:	f001 fe0c 	bl	8004698 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8002a80:	f00c fc68 	bl	800f354 <MX_USB_DEVICE_Init>
//	printf("Initializing...\r\n");
	ssd1306_Init();
 8002a84:	f001 fa44 	bl	8003f10 <ssd1306_Init>
	ssd1306_SetCursor(10, 10);
 8002a88:	210a      	movs	r1, #10
 8002a8a:	200a      	movs	r0, #10
 8002a8c:	f001 fc04 	bl	8004298 <ssd1306_SetCursor>
	ssd1306_WriteString("Welcome", Font_11x18, White);
 8002a90:	4a39      	ldr	r2, [pc, #228]	; (8002b78 <main+0x11c>)
 8002a92:	2301      	movs	r3, #1
 8002a94:	ca06      	ldmia	r2, {r1, r2}
 8002a96:	4839      	ldr	r0, [pc, #228]	; (8002b7c <main+0x120>)
 8002a98:	f001 fbd8 	bl	800424c <ssd1306_WriteString>
	ssd1306_SetCursor(10, 30);
 8002a9c:	211e      	movs	r1, #30
 8002a9e:	200a      	movs	r0, #10
 8002aa0:	f001 fbfa 	bl	8004298 <ssd1306_SetCursor>
	ssd1306_WriteString("to REMDx", Font_11x18, White);
 8002aa4:	4a34      	ldr	r2, [pc, #208]	; (8002b78 <main+0x11c>)
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	ca06      	ldmia	r2, {r1, r2}
 8002aaa:	4835      	ldr	r0, [pc, #212]	; (8002b80 <main+0x124>)
 8002aac:	f001 fbce 	bl	800424c <ssd1306_WriteString>
	ssd1306_SetCursor(10, 50);
 8002ab0:	2132      	movs	r1, #50	; 0x32
 8002ab2:	200a      	movs	r0, #10
 8002ab4:	f001 fbf0 	bl	8004298 <ssd1306_SetCursor>
	ssd1306_WriteString("by Qu'rac Tech", Font_7x10, White);
 8002ab8:	4a32      	ldr	r2, [pc, #200]	; (8002b84 <main+0x128>)
 8002aba:	2301      	movs	r3, #1
 8002abc:	ca06      	ldmia	r2, {r1, r2}
 8002abe:	4832      	ldr	r0, [pc, #200]	; (8002b88 <main+0x12c>)
 8002ac0:	f001 fbc4 	bl	800424c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002ac4:	f001 fab2 	bl	800402c <ssd1306_UpdateScreen>
	HAL_Delay(2000);
 8002ac8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002acc:	f001 ff36 	bl	800493c <HAL_Delay>

	ina226_channelInit(&hi2c1, CH1_ADDRESS,
 8002ad0:	f244 1227 	movw	r2, #16679	; 0x4127
 8002ad4:	2180      	movs	r1, #128	; 0x80
 8002ad6:	482d      	ldr	r0, [pc, #180]	; (8002b8c <main+0x130>)
 8002ad8:	f7ff fdc9 	bl	800266e <ina226_channelInit>
	RESET_INACTIVE | UNUSED_BITS | AVG_1 | VBUS_1100uS | VSH_1100uS | MODE_CONT_SHUNT_AND_BUS);
	HAL_Delay(1);
 8002adc:	2001      	movs	r0, #1
 8002ade:	f001 ff2d 	bl	800493c <HAL_Delay>
	ina226_channelInit(&hi2c1, CH2_ADDRESS,
 8002ae2:	f244 1227 	movw	r2, #16679	; 0x4127
 8002ae6:	2182      	movs	r1, #130	; 0x82
 8002ae8:	4828      	ldr	r0, [pc, #160]	; (8002b8c <main+0x130>)
 8002aea:	f7ff fdc0 	bl	800266e <ina226_channelInit>
	RESET_INACTIVE | UNUSED_BITS | AVG_1 | VBUS_1100uS | VSH_1100uS | MODE_CONT_SHUNT_AND_BUS);
	if (HAL_OK != HAL_ADC_Start_DMA(&hadc1, adc_data, 4))
 8002aee:	2204      	movs	r2, #4
 8002af0:	4927      	ldr	r1, [pc, #156]	; (8002b90 <main+0x134>)
 8002af2:	4828      	ldr	r0, [pc, #160]	; (8002b94 <main+0x138>)
 8002af4:	f001 ff8a 	bl	8004a0c <HAL_ADC_Start_DMA>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <main+0xa6>
	{
		Error_Handler();
 8002afe:	f000 f8d9 	bl	8002cb4 <Error_Handler>
	}
	CDC_Transmit_FS((uint8_t*) "Starting USB\r\n", sizeof("Starting USB\r\n"));
 8002b02:	210f      	movs	r1, #15
 8002b04:	4824      	ldr	r0, [pc, #144]	; (8002b98 <main+0x13c>)
 8002b06:	f00c fd31 	bl	800f56c <CDC_Transmit_FS>

//	PWMInit(1000);
//	run_pwm_out0(1);
//	run_pwm_out1(1);
	SetupDataState = EEPROMReadByte(EEPROMLoadPage, 0);
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	2009      	movs	r0, #9
 8002b0e:	f7fe fb8d 	bl	800122c <EEPROMReadByte>
 8002b12:	4603      	mov	r3, r0
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b21      	ldr	r3, [pc, #132]	; (8002b9c <main+0x140>)
 8002b18:	701a      	strb	r2, [r3, #0]
		EEPROMWriteByte(EEPROMLoadPage, 0, (uint8_t*) (1));
		newSetupData = defaultSetupData;
	}
	else
	{
		if (SetupDataState == loadCustomSetupData)
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <main+0x140>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d10c      	bne.n	8002b3c <main+0xe0>
		{
			getSavedUserConfigData(EEPROMCustomPage, regBuffer);
 8002b22:	491f      	ldr	r1, [pc, #124]	; (8002ba0 <main+0x144>)
 8002b24:	200c      	movs	r0, #12
 8002b26:	f7ff f8fb 	bl	8001d20 <getSavedUserConfigData>
			//			loadSettingFromBuffer(&customSetupData, regBuffer);
			newSetupData = customSetupData;
 8002b2a:	4a1e      	ldr	r2, [pc, #120]	; (8002ba4 <main+0x148>)
 8002b2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <main+0x14c>)
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	2348      	movs	r3, #72	; 0x48
 8002b34:	461a      	mov	r2, r3
 8002b36:	f00d fae4 	bl	8010102 <memcpy>
 8002b3a:	e015      	b.n	8002b68 <main+0x10c>
		}
		else
		{
			g_ina226Ch1ConfigUpdateFlag = 1;
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <main+0x150>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	701a      	strb	r2, [r3, #0]
			g_ina226Ch2ConfigUpdateFlag = 1;
 8002b42:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <main+0x154>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
			getSavedUserConfigData(EEPROMDefaultPage, regBuffer);
 8002b48:	4915      	ldr	r1, [pc, #84]	; (8002ba0 <main+0x144>)
 8002b4a:	200a      	movs	r0, #10
 8002b4c:	f7ff f8e8 	bl	8001d20 <getSavedUserConfigData>
			loadSettingFromBuffer(&defaultSetupData, regBuffer);
 8002b50:	4913      	ldr	r1, [pc, #76]	; (8002ba0 <main+0x144>)
 8002b52:	4818      	ldr	r0, [pc, #96]	; (8002bb4 <main+0x158>)
 8002b54:	f000 fed8 	bl	8003908 <loadSettingFromBuffer>
			//			defaultSettings(&defaultSetupData);
			newSetupData = defaultSetupData;
 8002b58:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <main+0x148>)
 8002b5a:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <main+0x158>)
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	2348      	movs	r3, #72	; 0x48
 8002b62:	461a      	mov	r2, r3
 8002b64:	f00d facd 	bl	8010102 <memcpy>
		}
	}
	g_HWUpdateFlag = 1;
 8002b68:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <main+0x15c>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8002b6e:	f7fe fbe5 	bl	800133c <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8002b72:	f00b f94f 	bl	800de14 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8002b76:	e7fe      	b.n	8002b76 <main+0x11a>
 8002b78:	2000000c 	.word	0x2000000c
 8002b7c:	080131a0 	.word	0x080131a0
 8002b80:	080131a8 	.word	0x080131a8
 8002b84:	20000004 	.word	0x20000004
 8002b88:	080131b4 	.word	0x080131b4
 8002b8c:	200006d0 	.word	0x200006d0
 8002b90:	200006a8 	.word	0x200006a8
 8002b94:	20000300 	.word	0x20000300
 8002b98:	080131c4 	.word	0x080131c4
 8002b9c:	200007fd 	.word	0x200007fd
 8002ba0:	20000800 	.word	0x20000800
 8002ba4:	20000724 	.word	0x20000724
 8002ba8:	200007b4 	.word	0x200007b4
 8002bac:	200006bb 	.word	0x200006bb
 8002bb0:	200006bc 	.word	0x200006bc
 8002bb4:	2000076c 	.word	0x2000076c
 8002bb8:	200006b8 	.word	0x200006b8

08002bbc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b094      	sub	sp, #80	; 0x50
 8002bc0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8002bc2:	f107 0320 	add.w	r3, r7, #32
 8002bc6:	2230      	movs	r2, #48	; 0x30
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f00d fac1 	bl	8010152 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8002bd0:	f107 030c 	add.w	r3, r7, #12
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002be0:	2300      	movs	r3, #0
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <SystemClock_Config+0xcc>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	4a27      	ldr	r2, [pc, #156]	; (8002c88 <SystemClock_Config+0xcc>)
 8002bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bee:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf0:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <SystemClock_Config+0xcc>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <SystemClock_Config+0xd0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c08:	4a20      	ldr	r2, [pc, #128]	; (8002c8c <SystemClock_Config+0xd0>)
 8002c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	4b1e      	ldr	r3, [pc, #120]	; (8002c8c <SystemClock_Config+0xd0>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c26:	2302      	movs	r3, #2
 8002c28:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002c30:	2304      	movs	r3, #4
 8002c32:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8002c34:	23a8      	movs	r3, #168	; 0xa8
 8002c36:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002c38:	2304      	movs	r3, #4
 8002c3a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c3c:	2307      	movs	r3, #7
 8002c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c40:	f107 0320 	add.w	r3, r7, #32
 8002c44:	4618      	mov	r0, r3
 8002c46:	f005 ffa1 	bl	8008b8c <HAL_RCC_OscConfig>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8002c50:	f000 f830 	bl	8002cb4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c54:	230f      	movs	r3, #15
 8002c56:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c64:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c6a:	f107 030c 	add.w	r3, r7, #12
 8002c6e:	2102      	movs	r1, #2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f006 fa03 	bl	800907c <HAL_RCC_ClockConfig>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8002c7c:	f000 f81a 	bl	8002cb4 <Error_Handler>
	}
}
 8002c80:	bf00      	nop
 8002c82:	3750      	adds	r7, #80	; 0x50
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40007000 	.word	0x40007000

08002c90 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d101      	bne.n	8002ca6 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8002ca2:	f001 fe2b 	bl	80048fc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40010000 	.word	0x40010000

08002cb4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cb8:	b672      	cpsid	i
}
 8002cba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002cbc:	e7fe      	b.n	8002cbc <Error_Handler+0x8>
	...

08002cc0 <run_pwm_out0>:
	timer4->Instance->CCR3 = duty;
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
}

void run_pwm_out0(uint8_t duty_cycle)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
	htim4.Instance->CCR3 = duty_cycle;
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <run_pwm_out0+0x24>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	79fa      	ldrb	r2, [r7, #7]
 8002cd0:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002cd2:	2108      	movs	r1, #8
 8002cd4:	4803      	ldr	r0, [pc, #12]	; (8002ce4 <run_pwm_out0+0x24>)
 8002cd6:	f006 fdb7 	bl	8009848 <HAL_TIM_PWM_Start>
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000ccc 	.word	0x20000ccc

08002ce8 <stop_pwm_out0>:

void stop_pwm_out0(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
	htim4.Instance->CCR3 = 0;
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <stop_pwm_out0+0x18>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002cf4:	2108      	movs	r1, #8
 8002cf6:	4802      	ldr	r0, [pc, #8]	; (8002d00 <stop_pwm_out0+0x18>)
 8002cf8:	f006 fda6 	bl	8009848 <HAL_TIM_PWM_Start>
//	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
}
 8002cfc:	bf00      	nop
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20000ccc 	.word	0x20000ccc

08002d04 <run_pwm_out1>:

void run_pwm_out1(uint8_t duty_cycle)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	71fb      	strb	r3, [r7, #7]
	htim4.Instance->CCR4 = duty_cycle;
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <run_pwm_out1+0x24>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	79fa      	ldrb	r2, [r7, #7]
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002d16:	210c      	movs	r1, #12
 8002d18:	4803      	ldr	r0, [pc, #12]	; (8002d28 <run_pwm_out1+0x24>)
 8002d1a:	f006 fd95 	bl	8009848 <HAL_TIM_PWM_Start>
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000ccc 	.word	0x20000ccc

08002d2c <stop_pwm_out1>:

void stop_pwm_out1(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
	htim4.Instance->CCR4 = 0;
 8002d30:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <stop_pwm_out1+0x18>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2200      	movs	r2, #0
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002d38:	210c      	movs	r1, #12
 8002d3a:	4802      	ldr	r0, [pc, #8]	; (8002d44 <stop_pwm_out1+0x18>)
 8002d3c:	f006 fd84 	bl	8009848 <HAL_TIM_PWM_Start>
//	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000ccc 	.word	0x20000ccc

08002d48 <set_pwm_freq>:

void set_pwm_freq(uint16_t pwm_freq)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	80fb      	strh	r3, [r7, #6]
	htim4.Instance->PSC = HAL_RCC_GetSysClockFreq() / (htim4.Instance->ARR * pwm_freq);
 8002d52:	f006 fa79 	bl	8009248 <HAL_RCC_GetSysClockFreq>
 8002d56:	4601      	mov	r1, r0
 8002d58:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <set_pwm_freq+0x30>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5e:	88fa      	ldrh	r2, [r7, #6]
 8002d60:	fb03 f202 	mul.w	r2, r3, r2
 8002d64:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <set_pwm_freq+0x30>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	fbb1 f2f2 	udiv	r2, r1, r2
 8002d6c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000ccc 	.word	0x20000ccc

08002d7c <registerMap>:
SetupDataState_e SetupDataState = loadDefaultSetupData;
RegisterData_t regBuffer[NO_REGISTERS] =
{ 0 };

void registerMap(uint8_t *cmd)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b0a2      	sub	sp, #136	; 0x88
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
	static uint8_t w = 119;		// ascii value of w is 119 in decimal
	static uint8_t r = 114;		// ascii value of r is 114 in decimal
//	printf(cmd);
//	printf("cmd=%s\r\n", cmd);
	registerNumber = (uint8_t) (strtol(&cmd[1], NULL, 16) >> 8);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3301      	adds	r3, #1
 8002d88:	2210      	movs	r2, #16
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f00e f8d5 	bl	8010f3c <strtol>
 8002d92:	4603      	mov	r3, r0
 8002d94:	121b      	asrs	r3, r3, #8
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	4b32      	ldr	r3, [pc, #200]	; (8002e64 <registerMap+0xe8>)
 8002d9a:	701a      	strb	r2, [r3, #0]
	guserEnteredData = (uint8_t) (strtol(&cmd[3], NULL, 16));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3303      	adds	r3, #3
 8002da0:	2210      	movs	r2, #16
 8002da2:	2100      	movs	r1, #0
 8002da4:	4618      	mov	r0, r3
 8002da6:	f00e f8c9 	bl	8010f3c <strtol>
 8002daa:	4603      	mov	r3, r0
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	4b2e      	ldr	r3, [pc, #184]	; (8002e68 <registerMap+0xec>)
 8002db0:	701a      	strb	r2, [r3, #0]

	// Create an array of function pointers, one for each case in the switch statement
	regHandlerFunc regHandlers[NO_REGISTERS] =
 8002db2:	4a2e      	ldr	r2, [pc, #184]	; (8002e6c <registerMap+0xf0>)
 8002db4:	f107 0308 	add.w	r3, r7, #8
 8002db8:	4611      	mov	r1, r2
 8002dba:	2280      	movs	r2, #128	; 0x80
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f00d f9a0 	bl	8010102 <memcpy>
	{ &reg0Handler, &reg1Handler, &reg2Handler, &reg3Handler, &reg4Handler, &reg5Handler, &reg6Handler, &reg7Handler,
			&reg8Handler, &reg9Handler, &reg10Handler, &reg11Handler, &reg12Handler, &reg13Handler, &reg14Handler,
			&reg15Handler, &reg16Handler, &reg17Handler, &reg18Handler, &reg19Handler, &reg20Handler, &reg21Handler,
			&reg22Handler, &reg23Handler, &reg24Handler, &reg25Handler, &reg26Handler, &reg27Handler, &reg28Handler,
			&reg29Handler, &reg30Handler, &reg31Handler };
	if (cmd[0] == w)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	781a      	ldrb	r2, [r3, #0]
 8002dc6:	4b2a      	ldr	r3, [pc, #168]	; (8002e70 <registerMap+0xf4>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d12f      	bne.n	8002e2e <registerMap+0xb2>
	{
		if (registerNumber < 2)
 8002dce:	4b25      	ldr	r3, [pc, #148]	; (8002e64 <registerMap+0xe8>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d815      	bhi.n	8002e02 <registerMap+0x86>
		{
			if (registerNumber == 0)
 8002dd6:	4b23      	ldr	r3, [pc, #140]	; (8002e64 <registerMap+0xe8>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <registerMap+0x70>
			{
				regBuffer[registerNumber].value = HW_VERSION;
 8002dde:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <registerMap+0xe8>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	4b23      	ldr	r3, [pc, #140]	; (8002e74 <registerMap+0xf8>)
 8002de6:	2119      	movs	r1, #25
 8002de8:	5499      	strb	r1, [r3, r2]
 8002dea:	e011      	b.n	8002e10 <registerMap+0x94>
			}
			else if (registerNumber == 1)
 8002dec:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <registerMap+0xe8>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d10d      	bne.n	8002e10 <registerMap+0x94>
			{
				regBuffer[registerNumber].value = FW_VERSION;
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <registerMap+0xe8>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b1e      	ldr	r3, [pc, #120]	; (8002e74 <registerMap+0xf8>)
 8002dfc:	2114      	movs	r1, #20
 8002dfe:	5499      	strb	r1, [r3, r2]
 8002e00:	e006      	b.n	8002e10 <registerMap+0x94>
			}
		}
		else
		{
			regBuffer[registerNumber].value = guserEnteredData;
 8002e02:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <registerMap+0xe8>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <registerMap+0xec>)
 8002e0a:	7819      	ldrb	r1, [r3, #0]
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <registerMap+0xf8>)
 8002e0e:	5499      	strb	r1, [r3, r2]
		}
		// Call the function pointer for the register number
		regHandlers[registerNumber](guserEnteredData);
 8002e10:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <registerMap+0xe8>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	3388      	adds	r3, #136	; 0x88
 8002e18:	443b      	add	r3, r7
 8002e1a:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8002e1e:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <registerMap+0xec>)
 8002e20:	7812      	ldrb	r2, [r2, #0]
 8002e22:	4610      	mov	r0, r2
 8002e24:	4798      	blx	r3
		printf("ACK\r\n");
 8002e26:	4814      	ldr	r0, [pc, #80]	; (8002e78 <registerMap+0xfc>)
 8002e28:	f00d ff20 	bl	8010c6c <puts>
	}
	else
	{
		printf("NAK\r\n");
	}
}
 8002e2c:	e015      	b.n	8002e5a <registerMap+0xde>
	else if (cmd[0] == r)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	781a      	ldrb	r2, [r3, #0]
 8002e32:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <registerMap+0x100>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d10c      	bne.n	8002e54 <registerMap+0xd8>
		printf("#R#%02X%02X\r\n", registerNumber, regBuffer[registerNumber].value);
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <registerMap+0xe8>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <registerMap+0xe8>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <registerMap+0xf8>)
 8002e48:	5c9b      	ldrb	r3, [r3, r2]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	480c      	ldr	r0, [pc, #48]	; (8002e80 <registerMap+0x104>)
 8002e4e:	f00d fe87 	bl	8010b60 <iprintf>
}
 8002e52:	e002      	b.n	8002e5a <registerMap+0xde>
		printf("NAK\r\n");
 8002e54:	480b      	ldr	r0, [pc, #44]	; (8002e84 <registerMap+0x108>)
 8002e56:	f00d ff09 	bl	8010c6c <puts>
}
 8002e5a:	bf00      	nop
 8002e5c:	3788      	adds	r7, #136	; 0x88
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	200007fc 	.word	0x200007fc
 8002e68:	200006a1 	.word	0x200006a1
 8002e6c:	080131f4 	.word	0x080131f4
 8002e70:	20000000 	.word	0x20000000
 8002e74:	20000800 	.word	0x20000800
 8002e78:	080131d4 	.word	0x080131d4
 8002e7c:	20000001 	.word	0x20000001
 8002e80:	080131dc 	.word	0x080131dc
 8002e84:	080131ec 	.word	0x080131ec

08002e88 <reg0Handler>:

void reg0Handler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
	newSetupData.setRegister.id0 = HW_VERSION;
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <reg0Handler+0x1c>)
 8002e8e:	2219      	movs	r2, #25
 8002e90:	751a      	strb	r2, [r3, #20]
	printf("HW VERSION: %0.2f\r\n", (float) (HW_VERSION) / 10);
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <reg0Handler+0x20>)
 8002e98:	4804      	ldr	r0, [pc, #16]	; (8002eac <reg0Handler+0x24>)
 8002e9a:	f00d fe61 	bl	8010b60 <iprintf>
}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000724 	.word	0x20000724
 8002ea8:	40040000 	.word	0x40040000
 8002eac:	08013274 	.word	0x08013274

08002eb0 <reg1Handler>:

void reg1Handler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
	newSetupData.setRegister.id0 = FW_VERSION;
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <reg1Handler+0x1c>)
 8002eb6:	2214      	movs	r2, #20
 8002eb8:	751a      	strb	r2, [r3, #20]
	printf("FW VERSION: %0.2f\r\n", (float) (FW_VERSION) / 10);
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ec2:	4803      	ldr	r0, [pc, #12]	; (8002ed0 <reg1Handler+0x20>)
 8002ec4:	f00d fe4c 	bl	8010b60 <iprintf>
}
 8002ec8:	bf00      	nop
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20000724 	.word	0x20000724
 8002ed0:	08013288 	.word	0x08013288

08002ed4 <reg2Handler>:

void reg2Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
	newSetupData.setRegister.set_led1 = (regBuffer[registerNumber].value & 0x01);
 8002ed8:	4b33      	ldr	r3, [pc, #204]	; (8002fa8 <reg2Handler+0xd4>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	4b33      	ldr	r3, [pc, #204]	; (8002fac <reg2Handler+0xd8>)
 8002ee0:	5c9b      	ldrb	r3, [r3, r2]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	4b31      	ldr	r3, [pc, #196]	; (8002fb0 <reg2Handler+0xdc>)
 8002eea:	765a      	strb	r2, [r3, #25]
	newSetupData.setRegister.set_led2 = ((regBuffer[registerNumber].value & 0x02) >> 1);
 8002eec:	4b2e      	ldr	r3, [pc, #184]	; (8002fa8 <reg2Handler+0xd4>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4b2e      	ldr	r3, [pc, #184]	; (8002fac <reg2Handler+0xd8>)
 8002ef4:	5c9b      	ldrb	r3, [r3, r2]
 8002ef6:	105b      	asrs	r3, r3, #1
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	4b2b      	ldr	r3, [pc, #172]	; (8002fb0 <reg2Handler+0xdc>)
 8002f02:	769a      	strb	r2, [r3, #26]
	newSetupData.setRegister.set_dig_out0 = ((regBuffer[registerNumber].value & 0x04) >> 2);
 8002f04:	4b28      	ldr	r3, [pc, #160]	; (8002fa8 <reg2Handler+0xd4>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4b28      	ldr	r3, [pc, #160]	; (8002fac <reg2Handler+0xd8>)
 8002f0c:	5c9b      	ldrb	r3, [r3, r2]
 8002f0e:	109b      	asrs	r3, r3, #2
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	4b25      	ldr	r3, [pc, #148]	; (8002fb0 <reg2Handler+0xdc>)
 8002f1a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	newSetupData.setRegister.set_dig_out1 = ((regBuffer[registerNumber].value & 0x08) >> 3);
 8002f1e:	4b22      	ldr	r3, [pc, #136]	; (8002fa8 <reg2Handler+0xd4>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	4b21      	ldr	r3, [pc, #132]	; (8002fac <reg2Handler+0xd8>)
 8002f26:	5c9b      	ldrb	r3, [r3, r2]
 8002f28:	10db      	asrs	r3, r3, #3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	4b1f      	ldr	r3, [pc, #124]	; (8002fb0 <reg2Handler+0xdc>)
 8002f34:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	;
	newSetupData.getRegister.get_int_in0 = ((regBuffer[registerNumber].value & 0x10) >> 4);
 8002f38:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <reg2Handler+0xd4>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <reg2Handler+0xd8>)
 8002f40:	5c9b      	ldrb	r3, [r3, r2]
 8002f42:	111b      	asrs	r3, r3, #4
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	4b18      	ldr	r3, [pc, #96]	; (8002fb0 <reg2Handler+0xdc>)
 8002f4e:	72da      	strb	r2, [r3, #11]
	newSetupData.getRegister.get_int_in1 = ((regBuffer[registerNumber].value & 0x20) >> 5);
 8002f50:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <reg2Handler+0xd4>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <reg2Handler+0xd8>)
 8002f58:	5c9b      	ldrb	r3, [r3, r2]
 8002f5a:	115b      	asrs	r3, r3, #5
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <reg2Handler+0xdc>)
 8002f66:	731a      	strb	r2, [r3, #12]
	newSetupData.setRegister.en_pwm0 = ((regBuffer[registerNumber].value & 0x40) >> 6);
 8002f68:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <reg2Handler+0xd4>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <reg2Handler+0xd8>)
 8002f70:	5c9b      	ldrb	r3, [r3, r2]
 8002f72:	119b      	asrs	r3, r3, #6
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <reg2Handler+0xdc>)
 8002f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	newSetupData.setRegister.en_pwm1 = ((regBuffer[registerNumber].value & 0x80) >> 7);
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <reg2Handler+0xd4>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	4b08      	ldr	r3, [pc, #32]	; (8002fac <reg2Handler+0xd8>)
 8002f8a:	5c9b      	ldrb	r3, [r3, r2]
 8002f8c:	09db      	lsrs	r3, r3, #7
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <reg2Handler+0xdc>)
 8002f92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
	g_HWUpdateFlag = 1;
 8002f96:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <reg2Handler+0xe0>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	200007fc 	.word	0x200007fc
 8002fac:	20000800 	.word	0x20000800
 8002fb0:	20000724 	.word	0x20000724
 8002fb4:	200006b8 	.word	0x200006b8

08002fb8 <reg3Handler>:

void reg3Handler(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
	newSetupData.setRegister.auto_off_dis = (regBuffer[registerNumber].value & 0x01);
 8002fbc:	4b14      	ldr	r3, [pc, #80]	; (8003010 <reg3Handler+0x58>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b14      	ldr	r3, [pc, #80]	; (8003014 <reg3Handler+0x5c>)
 8002fc4:	5c9b      	ldrb	r3, [r3, r2]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	4b12      	ldr	r3, [pc, #72]	; (8003018 <reg3Handler+0x60>)
 8002fce:	759a      	strb	r2, [r3, #22]
	newSetupData.setRegister.meas_mode = ((regBuffer[registerNumber].value & 0x02) >> 1);
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <reg3Handler+0x58>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <reg3Handler+0x5c>)
 8002fd8:	5c9b      	ldrb	r3, [r3, r2]
 8002fda:	105b      	asrs	r3, r3, #1
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <reg3Handler+0x60>)
 8002fe6:	75da      	strb	r2, [r3, #23]
	newSetupData.setRegister.en_disp = ((regBuffer[registerNumber].value & 0x04) >> 2);
 8002fe8:	4b09      	ldr	r3, [pc, #36]	; (8003010 <reg3Handler+0x58>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	4b09      	ldr	r3, [pc, #36]	; (8003014 <reg3Handler+0x5c>)
 8002ff0:	5c9b      	ldrb	r3, [r3, r2]
 8002ff2:	109b      	asrs	r3, r3, #2
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <reg3Handler+0x60>)
 8002ffe:	761a      	strb	r2, [r3, #24]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
	g_HWUpdateFlag = 1;
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <reg3Handler+0x64>)
 8003002:	2201      	movs	r2, #1
 8003004:	701a      	strb	r2, [r3, #0]
}
 8003006:	bf00      	nop
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	200007fc 	.word	0x200007fc
 8003014:	20000800 	.word	0x20000800
 8003018:	20000724 	.word	0x20000724
 800301c:	200006b8 	.word	0x200006b8

08003020 <reg4Handler>:

void reg4Handler(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
	newSetupData.setRegister.set_over_temp_limit = regBuffer[registerNumber].value;
 8003024:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <reg4Handler+0x98>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	4b24      	ldr	r3, [pc, #144]	; (80030bc <reg4Handler+0x9c>)
 800302c:	5c9a      	ldrb	r2, [r3, r2]
 800302e:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <reg4Handler+0xa0>)
 8003030:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	if (newSetupData.setRegister.set_over_temp_limit > 127)
 8003034:	4b22      	ldr	r3, [pc, #136]	; (80030c0 <reg4Handler+0xa0>)
 8003036:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800303a:	b25b      	sxtb	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	da1d      	bge.n	800307c <reg4Handler+0x5c>
	{
		lm75ad_setTosLimit(&hi2c1, LM75AD_ADDRESS, (float) (newSetupData.setRegister.set_over_temp_limit - 256));
 8003040:	4b1f      	ldr	r3, [pc, #124]	; (80030c0 <reg4Handler+0xa0>)
 8003042:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003046:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800304a:	ee07 3a90 	vmov	s15, r3
 800304e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003052:	eeb0 0a67 	vmov.f32	s0, s15
 8003056:	2190      	movs	r1, #144	; 0x90
 8003058:	481a      	ldr	r0, [pc, #104]	; (80030c4 <reg4Handler+0xa4>)
 800305a:	f7ff fc1b 	bl	8002894 <lm75ad_setTosLimit>
		lm75ad_setThystLimit(&hi2c1, LM75AD_ADDRESS, (float) (newSetupData.setRegister.set_over_temp_limit - 256 + 5));
 800305e:	4b18      	ldr	r3, [pc, #96]	; (80030c0 <reg4Handler+0xa0>)
 8003060:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003064:	3bfb      	subs	r3, #251	; 0xfb
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800306e:	eeb0 0a67 	vmov.f32	s0, s15
 8003072:	2190      	movs	r1, #144	; 0x90
 8003074:	4813      	ldr	r0, [pc, #76]	; (80030c4 <reg4Handler+0xa4>)
 8003076:	f7ff fc67 	bl	8002948 <lm75ad_setThystLimit>
	{
		lm75ad_setTosLimit(&hi2c1, LM75AD_ADDRESS, (float) (newSetupData.setRegister.set_over_temp_limit));
		lm75ad_setThystLimit(&hi2c1, LM75AD_ADDRESS, (float) (newSetupData.setRegister.set_over_temp_limit - 5));
	}
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 800307a:	e01a      	b.n	80030b2 <reg4Handler+0x92>
		lm75ad_setTosLimit(&hi2c1, LM75AD_ADDRESS, (float) (newSetupData.setRegister.set_over_temp_limit));
 800307c:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <reg4Handler+0xa0>)
 800307e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003082:	ee07 3a90 	vmov	s15, r3
 8003086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800308a:	eeb0 0a67 	vmov.f32	s0, s15
 800308e:	2190      	movs	r1, #144	; 0x90
 8003090:	480c      	ldr	r0, [pc, #48]	; (80030c4 <reg4Handler+0xa4>)
 8003092:	f7ff fbff 	bl	8002894 <lm75ad_setTosLimit>
		lm75ad_setThystLimit(&hi2c1, LM75AD_ADDRESS, (float) (newSetupData.setRegister.set_over_temp_limit - 5));
 8003096:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <reg4Handler+0xa0>)
 8003098:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800309c:	3b05      	subs	r3, #5
 800309e:	ee07 3a90 	vmov	s15, r3
 80030a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030a6:	eeb0 0a67 	vmov.f32	s0, s15
 80030aa:	2190      	movs	r1, #144	; 0x90
 80030ac:	4805      	ldr	r0, [pc, #20]	; (80030c4 <reg4Handler+0xa4>)
 80030ae:	f7ff fc4b 	bl	8002948 <lm75ad_setThystLimit>
}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	200007fc 	.word	0x200007fc
 80030bc:	20000800 	.word	0x20000800
 80030c0:	20000724 	.word	0x20000724
 80030c4:	200006d0 	.word	0x200006d0

080030c8 <reg5Handler>:

void reg5Handler(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
	newSetupData.setRegister.bus_volt_conv_time_ch1 = (regBuffer[registerNumber].value & 0x07);
 80030cc:	4b1b      	ldr	r3, [pc, #108]	; (800313c <reg5Handler+0x74>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	4b1b      	ldr	r3, [pc, #108]	; (8003140 <reg5Handler+0x78>)
 80030d4:	5c9b      	ldrb	r3, [r3, r2]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	4b19      	ldr	r3, [pc, #100]	; (8003144 <reg5Handler+0x7c>)
 80030de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	newSetupData.setRegister.shunt_volt_conv_time_ch1 = ((regBuffer[registerNumber].value & 0x38) >> 3);
 80030e2:	4b16      	ldr	r3, [pc, #88]	; (800313c <reg5Handler+0x74>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	4b15      	ldr	r3, [pc, #84]	; (8003140 <reg5Handler+0x78>)
 80030ea:	5c9b      	ldrb	r3, [r3, r2]
 80030ec:	10db      	asrs	r3, r3, #3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	4b13      	ldr	r3, [pc, #76]	; (8003144 <reg5Handler+0x7c>)
 80030f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	newSetupData.setRegister.limit_unit_prefix_ch1 = ((regBuffer[registerNumber].value & 0x40) >> 6);
 80030fc:	4b0f      	ldr	r3, [pc, #60]	; (800313c <reg5Handler+0x74>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <reg5Handler+0x78>)
 8003104:	5c9b      	ldrb	r3, [r3, r2]
 8003106:	119b      	asrs	r3, r3, #6
 8003108:	b2db      	uxtb	r3, r3
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	b2da      	uxtb	r2, r3
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <reg5Handler+0x7c>)
 8003112:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	newSetupData.setRegister.limit_unit_prefix_ch2 = ((regBuffer[registerNumber].value & 0x80) >> 7);
 8003116:	4b09      	ldr	r3, [pc, #36]	; (800313c <reg5Handler+0x74>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	4b08      	ldr	r3, [pc, #32]	; (8003140 <reg5Handler+0x78>)
 800311e:	5c9b      	ldrb	r3, [r3, r2]
 8003120:	09db      	lsrs	r3, r3, #7
 8003122:	b2da      	uxtb	r2, r3
 8003124:	4b07      	ldr	r3, [pc, #28]	; (8003144 <reg5Handler+0x7c>)
 8003126:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	g_ina226Ch1ConfigChangeFlag = 1;
 800312a:	4b07      	ldr	r3, [pc, #28]	; (8003148 <reg5Handler+0x80>)
 800312c:	2201      	movs	r2, #1
 800312e:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	200007fc 	.word	0x200007fc
 8003140:	20000800 	.word	0x20000800
 8003144:	20000724 	.word	0x20000724
 8003148:	200006b9 	.word	0x200006b9

0800314c <reg6Handler>:

void reg6Handler(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
	newSetupData.setRegister.bus_volt_conv_time_ch2 = (regBuffer[registerNumber].value & 0x07);
 8003150:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <reg6Handler+0x44>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <reg6Handler+0x48>)
 8003158:	5c9b      	ldrb	r3, [r3, r2]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	b2da      	uxtb	r2, r3
 8003160:	4b0d      	ldr	r3, [pc, #52]	; (8003198 <reg6Handler+0x4c>)
 8003162:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	newSetupData.setRegister.shunt_volt_conv_time_ch2 = ((regBuffer[registerNumber].value & 0x38) >> 3);
 8003166:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <reg6Handler+0x44>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	4b09      	ldr	r3, [pc, #36]	; (8003194 <reg6Handler+0x48>)
 800316e:	5c9b      	ldrb	r3, [r3, r2]
 8003170:	10db      	asrs	r3, r3, #3
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	b2da      	uxtb	r2, r3
 800317a:	4b07      	ldr	r3, [pc, #28]	; (8003198 <reg6Handler+0x4c>)
 800317c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	g_ina226Ch2ConfigChangeFlag = 1;
 8003180:	4b06      	ldr	r3, [pc, #24]	; (800319c <reg6Handler+0x50>)
 8003182:	2201      	movs	r2, #1
 8003184:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003186:	bf00      	nop
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	200007fc 	.word	0x200007fc
 8003194:	20000800 	.word	0x20000800
 8003198:	20000724 	.word	0x20000724
 800319c:	200006ba 	.word	0x200006ba

080031a0 <reg7Handler>:

void reg7Handler(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
	newSetupData.setRegister.en_int_ch1 = (regBuffer[registerNumber].value & 0x01);
 80031a4:	4b52      	ldr	r3, [pc, #328]	; (80032f0 <reg7Handler+0x150>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b52      	ldr	r3, [pc, #328]	; (80032f4 <reg7Handler+0x154>)
 80031ac:	5c9b      	ldrb	r3, [r3, r2]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	4b50      	ldr	r3, [pc, #320]	; (80032f8 <reg7Handler+0x158>)
 80031b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	newSetupData.setRegister.en_int_ch2 = ((regBuffer[registerNumber].value & 0x02) >> 1);
 80031ba:	4b4d      	ldr	r3, [pc, #308]	; (80032f0 <reg7Handler+0x150>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	4b4c      	ldr	r3, [pc, #304]	; (80032f4 <reg7Handler+0x154>)
 80031c2:	5c9b      	ldrb	r3, [r3, r2]
 80031c4:	105b      	asrs	r3, r3, #1
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	4b4a      	ldr	r3, [pc, #296]	; (80032f8 <reg7Handler+0x158>)
 80031d0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	newSetupData.setRegister.ale_trig_ch1 = ((regBuffer[registerNumber].value & 0x1C) >> 2);
 80031d4:	4b46      	ldr	r3, [pc, #280]	; (80032f0 <reg7Handler+0x150>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	4b46      	ldr	r3, [pc, #280]	; (80032f4 <reg7Handler+0x154>)
 80031dc:	5c9b      	ldrb	r3, [r3, r2]
 80031de:	109b      	asrs	r3, r3, #2
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	4b43      	ldr	r3, [pc, #268]	; (80032f8 <reg7Handler+0x158>)
 80031ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	newSetupData.setRegister.ale_trig_ch2 = ((regBuffer[registerNumber].value & 0xE0) >> 5);
 80031ee:	4b40      	ldr	r3, [pc, #256]	; (80032f0 <reg7Handler+0x150>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	4b3f      	ldr	r3, [pc, #252]	; (80032f4 <reg7Handler+0x154>)
 80031f6:	5c9b      	ldrb	r3, [r3, r2]
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	4b3e      	ldr	r3, [pc, #248]	; (80032f8 <reg7Handler+0x158>)
 80031fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	switch (newSetupData.setRegister.ale_trig_ch1)
 8003202:	4b3d      	ldr	r3, [pc, #244]	; (80032f8 <reg7Handler+0x158>)
 8003204:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003208:	2b06      	cmp	r3, #6
 800320a:	d834      	bhi.n	8003276 <reg7Handler+0xd6>
 800320c:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <reg7Handler+0x74>)
 800320e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003212:	bf00      	nop
 8003214:	08003231 	.word	0x08003231
 8003218:	0800323b 	.word	0x0800323b
 800321c:	08003245 	.word	0x08003245
 8003220:	0800324f 	.word	0x0800324f
 8003224:	08003259 	.word	0x08003259
 8003228:	08003263 	.word	0x08003263
 800322c:	0800326d 	.word	0x0800326d
	{
		case underCurrentAlert:
			ina226_setUnderCurrentAlert(&hi2c1, CH1_ADDRESS);
 8003230:	2180      	movs	r1, #128	; 0x80
 8003232:	4832      	ldr	r0, [pc, #200]	; (80032fc <reg7Handler+0x15c>)
 8003234:	f7ff fa9a 	bl	800276c <ina226_setUnderCurrentAlert>
			break;
 8003238:	e01d      	b.n	8003276 <reg7Handler+0xd6>
		case overCurrentAlert:
			ina226_setOverCurrentAlert(&hi2c1, CH1_ADDRESS);
 800323a:	2180      	movs	r1, #128	; 0x80
 800323c:	482f      	ldr	r0, [pc, #188]	; (80032fc <reg7Handler+0x15c>)
 800323e:	f7ff fa84 	bl	800274a <ina226_setOverCurrentAlert>
			break;
 8003242:	e018      	b.n	8003276 <reg7Handler+0xd6>
		case underVshuntAlert:
			ina226_setShuntUnderVoltageAlert(&hi2c1, CH1_ADDRESS);
 8003244:	2180      	movs	r1, #128	; 0x80
 8003246:	482d      	ldr	r0, [pc, #180]	; (80032fc <reg7Handler+0x15c>)
 8003248:	f7ff fa5d 	bl	8002706 <ina226_setShuntUnderVoltageAlert>
			break;
 800324c:	e013      	b.n	8003276 <reg7Handler+0xd6>
		case overVshuntAlert:
			ina226_setShuntOverVoltageAlert(&hi2c1, CH1_ADDRESS);
 800324e:	2180      	movs	r1, #128	; 0x80
 8003250:	482a      	ldr	r0, [pc, #168]	; (80032fc <reg7Handler+0x15c>)
 8003252:	f7ff fa47 	bl	80026e4 <ina226_setShuntOverVoltageAlert>
			break;
 8003256:	e00e      	b.n	8003276 <reg7Handler+0xd6>
		case underVbusAlert:
			ina226_setBusUnderVoltageAlert(&hi2c1, CH1_ADDRESS);
 8003258:	2180      	movs	r1, #128	; 0x80
 800325a:	4828      	ldr	r0, [pc, #160]	; (80032fc <reg7Handler+0x15c>)
 800325c:	f7ff fa20 	bl	80026a0 <ina226_setBusUnderVoltageAlert>
			break;
 8003260:	e009      	b.n	8003276 <reg7Handler+0xd6>
		case overVbusAlert:
			ina226_setBusOverVoltageAlert(&hi2c1, CH1_ADDRESS);
 8003262:	2180      	movs	r1, #128	; 0x80
 8003264:	4825      	ldr	r0, [pc, #148]	; (80032fc <reg7Handler+0x15c>)
 8003266:	f7ff fa2c 	bl	80026c2 <ina226_setBusOverVoltageAlert>
			break;
 800326a:	e004      	b.n	8003276 <reg7Handler+0xd6>
		case overPowerAlert:
			ina226_setOverPowerAlert(&hi2c1, CH1_ADDRESS);
 800326c:	2180      	movs	r1, #128	; 0x80
 800326e:	4823      	ldr	r0, [pc, #140]	; (80032fc <reg7Handler+0x15c>)
 8003270:	f7ff fa5a 	bl	8002728 <ina226_setOverPowerAlert>
			break;
 8003274:	bf00      	nop
	}
	switch (newSetupData.setRegister.ale_trig_ch2)
 8003276:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <reg7Handler+0x158>)
 8003278:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800327c:	2b06      	cmp	r3, #6
 800327e:	d834      	bhi.n	80032ea <reg7Handler+0x14a>
 8003280:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <reg7Handler+0xe8>)
 8003282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003286:	bf00      	nop
 8003288:	080032a5 	.word	0x080032a5
 800328c:	080032af 	.word	0x080032af
 8003290:	080032b9 	.word	0x080032b9
 8003294:	080032c3 	.word	0x080032c3
 8003298:	080032cd 	.word	0x080032cd
 800329c:	080032d7 	.word	0x080032d7
 80032a0:	080032e1 	.word	0x080032e1
	{
		case underCurrentAlert:
			ina226_setUnderCurrentAlert(&hi2c1, CH2_ADDRESS);
 80032a4:	2182      	movs	r1, #130	; 0x82
 80032a6:	4815      	ldr	r0, [pc, #84]	; (80032fc <reg7Handler+0x15c>)
 80032a8:	f7ff fa60 	bl	800276c <ina226_setUnderCurrentAlert>
			break;
 80032ac:	e01d      	b.n	80032ea <reg7Handler+0x14a>
		case overCurrentAlert:
			ina226_setOverCurrentAlert(&hi2c1, CH2_ADDRESS);
 80032ae:	2182      	movs	r1, #130	; 0x82
 80032b0:	4812      	ldr	r0, [pc, #72]	; (80032fc <reg7Handler+0x15c>)
 80032b2:	f7ff fa4a 	bl	800274a <ina226_setOverCurrentAlert>
			break;
 80032b6:	e018      	b.n	80032ea <reg7Handler+0x14a>
		case underVshuntAlert:
			ina226_setShuntUnderVoltageAlert(&hi2c1, CH2_ADDRESS);
 80032b8:	2182      	movs	r1, #130	; 0x82
 80032ba:	4810      	ldr	r0, [pc, #64]	; (80032fc <reg7Handler+0x15c>)
 80032bc:	f7ff fa23 	bl	8002706 <ina226_setShuntUnderVoltageAlert>
			break;
 80032c0:	e013      	b.n	80032ea <reg7Handler+0x14a>
		case overVshuntAlert:
			ina226_setShuntOverVoltageAlert(&hi2c1, CH2_ADDRESS);
 80032c2:	2182      	movs	r1, #130	; 0x82
 80032c4:	480d      	ldr	r0, [pc, #52]	; (80032fc <reg7Handler+0x15c>)
 80032c6:	f7ff fa0d 	bl	80026e4 <ina226_setShuntOverVoltageAlert>
			break;
 80032ca:	e00e      	b.n	80032ea <reg7Handler+0x14a>
		case underVbusAlert:
			ina226_setBusUnderVoltageAlert(&hi2c1, CH2_ADDRESS);
 80032cc:	2182      	movs	r1, #130	; 0x82
 80032ce:	480b      	ldr	r0, [pc, #44]	; (80032fc <reg7Handler+0x15c>)
 80032d0:	f7ff f9e6 	bl	80026a0 <ina226_setBusUnderVoltageAlert>
			break;
 80032d4:	e009      	b.n	80032ea <reg7Handler+0x14a>
		case overVbusAlert:
			ina226_setBusOverVoltageAlert(&hi2c1, CH2_ADDRESS);
 80032d6:	2182      	movs	r1, #130	; 0x82
 80032d8:	4808      	ldr	r0, [pc, #32]	; (80032fc <reg7Handler+0x15c>)
 80032da:	f7ff f9f2 	bl	80026c2 <ina226_setBusOverVoltageAlert>
			break;
 80032de:	e004      	b.n	80032ea <reg7Handler+0x14a>
		case overPowerAlert:
			ina226_setOverPowerAlert(&hi2c1, CH2_ADDRESS);
 80032e0:	2182      	movs	r1, #130	; 0x82
 80032e2:	4806      	ldr	r0, [pc, #24]	; (80032fc <reg7Handler+0x15c>)
 80032e4:	f7ff fa20 	bl	8002728 <ina226_setOverPowerAlert>
			break;
 80032e8:	bf00      	nop
	}

	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	200007fc 	.word	0x200007fc
 80032f4:	20000800 	.word	0x20000800
 80032f8:	20000724 	.word	0x20000724
 80032fc:	200006d0 	.word	0x200006d0

08003300 <reg8Handler>:

void reg8Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
	newSetupData.setRegister.limit1_ch1 = regBuffer[registerNumber].value;
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <reg8Handler+0x20>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	461a      	mov	r2, r3
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <reg8Handler+0x24>)
 800330c:	5c9a      	ldrb	r2, [r3, r2]
 800330e:	4b06      	ldr	r3, [pc, #24]	; (8003328 <reg8Handler+0x28>)
 8003310:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	200007fc 	.word	0x200007fc
 8003324:	20000800 	.word	0x20000800
 8003328:	20000724 	.word	0x20000724

0800332c <reg9Handler>:

void reg9Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
	newSetupData.setRegister.limit2_ch1 = regBuffer[registerNumber].value;
 8003330:	4b06      	ldr	r3, [pc, #24]	; (800334c <reg9Handler+0x20>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <reg9Handler+0x24>)
 8003338:	5c9a      	ldrb	r2, [r3, r2]
 800333a:	4b06      	ldr	r3, [pc, #24]	; (8003354 <reg9Handler+0x28>)
 800333c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003340:	bf00      	nop
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	200007fc 	.word	0x200007fc
 8003350:	20000800 	.word	0x20000800
 8003354:	20000724 	.word	0x20000724

08003358 <reg10Handler>:

void reg10Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
	newSetupData.setRegister.limit1_ch2 = regBuffer[registerNumber].value;
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <reg10Handler+0x20>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <reg10Handler+0x24>)
 8003364:	5c9a      	ldrb	r2, [r3, r2]
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <reg10Handler+0x28>)
 8003368:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	200007fc 	.word	0x200007fc
 800337c:	20000800 	.word	0x20000800
 8003380:	20000724 	.word	0x20000724

08003384 <reg11Handler>:

void reg11Handler(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
	newSetupData.setRegister.limit2_ch2 = regBuffer[registerNumber].value;
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <reg11Handler+0x20>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	461a      	mov	r2, r3
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <reg11Handler+0x24>)
 8003390:	5c9a      	ldrb	r2, [r3, r2]
 8003392:	4b06      	ldr	r3, [pc, #24]	; (80033ac <reg11Handler+0x28>)
 8003394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	200007fc 	.word	0x200007fc
 80033a8:	20000800 	.word	0x20000800
 80033ac:	20000724 	.word	0x20000724

080033b0 <reg12Handler>:

void reg12Handler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
	newSetupData.setRegister.set_pwm0_duty = (
			regBuffer[registerNumber].value > 100 ? 100 : regBuffer[registerNumber].value);
 80033b4:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <reg12Handler+0x34>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <reg12Handler+0x38>)
 80033bc:	5c9b      	ldrb	r3, [r3, r2]
 80033be:	2b64      	cmp	r3, #100	; 0x64
 80033c0:	bf28      	it	cs
 80033c2:	2364      	movcs	r3, #100	; 0x64
 80033c4:	b2da      	uxtb	r2, r3
	newSetupData.setRegister.set_pwm0_duty = (
 80033c6:	4b09      	ldr	r3, [pc, #36]	; (80033ec <reg12Handler+0x3c>)
 80033c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	run_pwm_out0(newSetupData.setRegister.set_pwm0_duty);
 80033cc:	4b07      	ldr	r3, [pc, #28]	; (80033ec <reg12Handler+0x3c>)
 80033ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fc74 	bl	8002cc0 <run_pwm_out0>
	g_HWUpdateFlag = 1;
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <reg12Handler+0x40>)
 80033da:	2201      	movs	r2, #1
 80033dc:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	200007fc 	.word	0x200007fc
 80033e8:	20000800 	.word	0x20000800
 80033ec:	20000724 	.word	0x20000724
 80033f0:	200006b8 	.word	0x200006b8

080033f4 <reg13Handler>:

void reg13Handler(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
	newSetupData.setRegister.set_pwm1_duty = (
			regBuffer[registerNumber].value > 100 ? 100 : regBuffer[registerNumber].value);
 80033f8:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <reg13Handler+0x34>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	4b0b      	ldr	r3, [pc, #44]	; (800342c <reg13Handler+0x38>)
 8003400:	5c9b      	ldrb	r3, [r3, r2]
 8003402:	2b64      	cmp	r3, #100	; 0x64
 8003404:	bf28      	it	cs
 8003406:	2364      	movcs	r3, #100	; 0x64
 8003408:	b2da      	uxtb	r2, r3
	newSetupData.setRegister.set_pwm1_duty = (
 800340a:	4b09      	ldr	r3, [pc, #36]	; (8003430 <reg13Handler+0x3c>)
 800340c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	run_pwm_out1(newSetupData.setRegister.set_pwm1_duty);
 8003410:	4b07      	ldr	r3, [pc, #28]	; (8003430 <reg13Handler+0x3c>)
 8003412:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fc74 	bl	8002d04 <run_pwm_out1>
	g_HWUpdateFlag = 1;
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <reg13Handler+0x40>)
 800341e:	2201      	movs	r2, #1
 8003420:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	200007fc 	.word	0x200007fc
 800342c:	20000800 	.word	0x20000800
 8003430:	20000724 	.word	0x20000724
 8003434:	200006b8 	.word	0x200006b8

08003438 <reg14Handler>:

void reg14Handler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
	newSetupData.setRegister.set_pwm_freq1 = (
			regBuffer[registerNumber].value > 255 ? 255 : regBuffer[registerNumber].value);
 800343c:	4b18      	ldr	r3, [pc, #96]	; (80034a0 <reg14Handler+0x68>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	4b18      	ldr	r3, [pc, #96]	; (80034a4 <reg14Handler+0x6c>)
 8003444:	5c9a      	ldrb	r2, [r3, r2]
	newSetupData.setRegister.set_pwm_freq1 = (
 8003446:	4b18      	ldr	r3, [pc, #96]	; (80034a8 <reg14Handler+0x70>)
 8003448:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	newSetupData.setRegister.set_pwm_freq = (uint16_t) ((float) (newSetupData.setRegister.set_pwm_freq1
 800344c:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <reg14Handler+0x70>)
 800344e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003452:	461a      	mov	r2, r3
			+ (newSetupData.setRegister.set_pwm_freq2 << 8)) * PWMFreqCorrectionFactor);
 8003454:	4b14      	ldr	r3, [pc, #80]	; (80034a8 <reg14Handler+0x70>)
 8003456:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	4413      	add	r3, r2
	newSetupData.setRegister.set_pwm_freq = (uint16_t) ((float) (newSetupData.setRegister.set_pwm_freq1
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003466:	ee17 0a90 	vmov	r0, s15
 800346a:	f7fd f875 	bl	8000558 <__aeabi_f2d>
			+ (newSetupData.setRegister.set_pwm_freq2 << 8)) * PWMFreqCorrectionFactor);
 800346e:	a30a      	add	r3, pc, #40	; (adr r3, 8003498 <reg14Handler+0x60>)
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f7fd f8c8 	bl	8000608 <__aeabi_dmul>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
	newSetupData.setRegister.set_pwm_freq = (uint16_t) ((float) (newSetupData.setRegister.set_pwm_freq1
 800347c:	4610      	mov	r0, r2
 800347e:	4619      	mov	r1, r3
 8003480:	f7fd fb9a 	bl	8000bb8 <__aeabi_d2uiz>
 8003484:	4603      	mov	r3, r0
 8003486:	b29a      	uxth	r2, r3
 8003488:	4b07      	ldr	r3, [pc, #28]	; (80034a8 <reg14Handler+0x70>)
 800348a:	871a      	strh	r2, [r3, #56]	; 0x38
	g_HWUpdateFlag = 1;
 800348c:	4b07      	ldr	r3, [pc, #28]	; (80034ac <reg14Handler+0x74>)
 800348e:	2201      	movs	r2, #1
 8003490:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	e978d4fe 	.word	0xe978d4fe
 800349c:	3ff03126 	.word	0x3ff03126
 80034a0:	200007fc 	.word	0x200007fc
 80034a4:	20000800 	.word	0x20000800
 80034a8:	20000724 	.word	0x20000724
 80034ac:	200006b8 	.word	0x200006b8

080034b0 <reg15Handler>:

void reg15Handler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
	newSetupData.setRegister.set_pwm_freq2 = (
			regBuffer[registerNumber].value > 255 ? 255 : regBuffer[registerNumber].value);
 80034b4:	4b18      	ldr	r3, [pc, #96]	; (8003518 <reg15Handler+0x68>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	4b18      	ldr	r3, [pc, #96]	; (800351c <reg15Handler+0x6c>)
 80034bc:	5c9a      	ldrb	r2, [r3, r2]
	newSetupData.setRegister.set_pwm_freq2 = (
 80034be:	4b18      	ldr	r3, [pc, #96]	; (8003520 <reg15Handler+0x70>)
 80034c0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	newSetupData.setRegister.set_pwm_freq = (uint16_t) ((float) (newSetupData.setRegister.set_pwm_freq1
 80034c4:	4b16      	ldr	r3, [pc, #88]	; (8003520 <reg15Handler+0x70>)
 80034c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034ca:	461a      	mov	r2, r3
			+ (newSetupData.setRegister.set_pwm_freq2 << 8)) * PWMFreqCorrectionFactor);
 80034cc:	4b14      	ldr	r3, [pc, #80]	; (8003520 <reg15Handler+0x70>)
 80034ce:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	4413      	add	r3, r2
	newSetupData.setRegister.set_pwm_freq = (uint16_t) ((float) (newSetupData.setRegister.set_pwm_freq1
 80034d6:	ee07 3a90 	vmov	s15, r3
 80034da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034de:	ee17 0a90 	vmov	r0, s15
 80034e2:	f7fd f839 	bl	8000558 <__aeabi_f2d>
			+ (newSetupData.setRegister.set_pwm_freq2 << 8)) * PWMFreqCorrectionFactor);
 80034e6:	a30a      	add	r3, pc, #40	; (adr r3, 8003510 <reg15Handler+0x60>)
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f7fd f88c 	bl	8000608 <__aeabi_dmul>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
	newSetupData.setRegister.set_pwm_freq = (uint16_t) ((float) (newSetupData.setRegister.set_pwm_freq1
 80034f4:	4610      	mov	r0, r2
 80034f6:	4619      	mov	r1, r3
 80034f8:	f7fd fb5e 	bl	8000bb8 <__aeabi_d2uiz>
 80034fc:	4603      	mov	r3, r0
 80034fe:	b29a      	uxth	r2, r3
 8003500:	4b07      	ldr	r3, [pc, #28]	; (8003520 <reg15Handler+0x70>)
 8003502:	871a      	strh	r2, [r3, #56]	; 0x38
	g_HWUpdateFlag = 1;
 8003504:	4b07      	ldr	r3, [pc, #28]	; (8003524 <reg15Handler+0x74>)
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 800350a:	bf00      	nop
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	e978d4fe 	.word	0xe978d4fe
 8003514:	3ff03126 	.word	0x3ff03126
 8003518:	200007fc 	.word	0x200007fc
 800351c:	20000800 	.word	0x20000800
 8003520:	20000724 	.word	0x20000724
 8003524:	200006b8 	.word	0x200006b8

08003528 <reg16Handler>:

void reg16Handler(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
//	newSetupData.getRegister.get_adc0 = (regBuffer[registerNumber].value & 0x01);
	//				newSetupData.getRegister.get_adc1 = ((regBuffer[registerNumber].value & 0x02) >> 1);
	//				newSetupData.getRegister.get_vref_mcu = ((regBuffer[registerNumber].value & 0x04) >> 2);
	//				newSetupData.getRegister.get_temp_amb = ((regBuffer[registerNumber].value & 0x08) >> 3);
	//				newSetupData.getRegister.get_temp_mcu = ((regBuffer[registerNumber].value & 0x10) >> 4);
	newSetupData.getRegister.get_dig_in0 = ((regBuffer[registerNumber].value & 0x20) >> 5);
 800352c:	4b18      	ldr	r3, [pc, #96]	; (8003590 <reg16Handler+0x68>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	4b18      	ldr	r3, [pc, #96]	; (8003594 <reg16Handler+0x6c>)
 8003534:	5c9b      	ldrb	r3, [r3, r2]
 8003536:	115b      	asrs	r3, r3, #5
 8003538:	b2db      	uxtb	r3, r3
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	b2da      	uxtb	r2, r3
 8003540:	4b15      	ldr	r3, [pc, #84]	; (8003598 <reg16Handler+0x70>)
 8003542:	741a      	strb	r2, [r3, #16]
	newSetupData.getRegister.get_dig_in1 = ((regBuffer[registerNumber].value & 0x40) >> 6);
 8003544:	4b12      	ldr	r3, [pc, #72]	; (8003590 <reg16Handler+0x68>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	4b12      	ldr	r3, [pc, #72]	; (8003594 <reg16Handler+0x6c>)
 800354c:	5c9b      	ldrb	r3, [r3, r2]
 800354e:	119b      	asrs	r3, r3, #6
 8003550:	b2db      	uxtb	r3, r3
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	b2da      	uxtb	r2, r3
 8003558:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <reg16Handler+0x70>)
 800355a:	745a      	strb	r2, [r3, #17]
	//				}
	//				if (newSetupData.getRegister.get_temp_mcu)
	//				{
	//					printf("temp_mcu=%0.2f\r\n", stm32Temp);
	//				}
	if (newSetupData.getRegister.get_dig_in0)
 800355c:	4b0e      	ldr	r3, [pc, #56]	; (8003598 <reg16Handler+0x70>)
 800355e:	7c1b      	ldrb	r3, [r3, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d007      	beq.n	8003574 <reg16Handler+0x4c>
	{
		printf("IN_DIG0=%d\r\n", digRead(DIG_IN0));
 8003564:	2000      	movs	r0, #0
 8003566:	f7fe fb53 	bl	8001c10 <digRead>
 800356a:	4603      	mov	r3, r0
 800356c:	4619      	mov	r1, r3
 800356e:	480b      	ldr	r0, [pc, #44]	; (800359c <reg16Handler+0x74>)
 8003570:	f00d faf6 	bl	8010b60 <iprintf>
	}
	if (newSetupData.getRegister.get_dig_in1)
 8003574:	4b08      	ldr	r3, [pc, #32]	; (8003598 <reg16Handler+0x70>)
 8003576:	7c5b      	ldrb	r3, [r3, #17]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d007      	beq.n	800358c <reg16Handler+0x64>
	{
		printf("IN_DIG1=%d\r\n", digRead(DIG_IN1));
 800357c:	2001      	movs	r0, #1
 800357e:	f7fe fb47 	bl	8001c10 <digRead>
 8003582:	4603      	mov	r3, r0
 8003584:	4619      	mov	r1, r3
 8003586:	4806      	ldr	r0, [pc, #24]	; (80035a0 <reg16Handler+0x78>)
 8003588:	f00d faea 	bl	8010b60 <iprintf>
	}
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 800358c:	bf00      	nop
 800358e:	bd80      	pop	{r7, pc}
 8003590:	200007fc 	.word	0x200007fc
 8003594:	20000800 	.word	0x20000800
 8003598:	20000724 	.word	0x20000724
 800359c:	0801329c 	.word	0x0801329c
 80035a0:	080132ac 	.word	0x080132ac

080035a4 <reg17Handler>:

void reg17Handler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
	newSetupData.setRegister.restore_default = (regBuffer[registerNumber].value & 0x01);
 80035a8:	4b42      	ldr	r3, [pc, #264]	; (80036b4 <reg17Handler+0x110>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	461a      	mov	r2, r3
 80035ae:	4b42      	ldr	r3, [pc, #264]	; (80036b8 <reg17Handler+0x114>)
 80035b0:	5c9b      	ldrb	r3, [r3, r2]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	4b40      	ldr	r3, [pc, #256]	; (80036bc <reg17Handler+0x118>)
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	newSetupData.setRegister.save_config = ((regBuffer[registerNumber].value & 0x02) >> 1);
 80035be:	4b3d      	ldr	r3, [pc, #244]	; (80036b4 <reg17Handler+0x110>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	4b3c      	ldr	r3, [pc, #240]	; (80036b8 <reg17Handler+0x114>)
 80035c6:	5c9b      	ldrb	r3, [r3, r2]
 80035c8:	105b      	asrs	r3, r3, #1
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4b3a      	ldr	r3, [pc, #232]	; (80036bc <reg17Handler+0x118>)
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	if ((newSetupData.setRegister.save_config == 1) && (newSetupData.setRegister.restore_default == 0))
 80035d8:	4b38      	ldr	r3, [pc, #224]	; (80036bc <reg17Handler+0x118>)
 80035da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d11e      	bne.n	8003620 <reg17Handler+0x7c>
 80035e2:	4b36      	ldr	r3, [pc, #216]	; (80036bc <reg17Handler+0x118>)
 80035e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d119      	bne.n	8003620 <reg17Handler+0x7c>
	{
		EEPROMWriteByte(EEPROMLoadPage, 0, (uint8_t*) (1));
 80035ec:	2201      	movs	r2, #1
 80035ee:	2100      	movs	r1, #0
 80035f0:	2009      	movs	r0, #9
 80035f2:	f7fd fddd 	bl	80011b0 <EEPROMWriteByte>
		loadSettingFromBuffer(&newSetupData, regBuffer);
 80035f6:	4930      	ldr	r1, [pc, #192]	; (80036b8 <reg17Handler+0x114>)
 80035f8:	4830      	ldr	r0, [pc, #192]	; (80036bc <reg17Handler+0x118>)
 80035fa:	f000 f985 	bl	8003908 <loadSettingFromBuffer>
		newSetupData.setRegister.save_config = 0;
 80035fe:	4b2f      	ldr	r3, [pc, #188]	; (80036bc <reg17Handler+0x118>)
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		regBuffer[reg17].value = (regBuffer[reg17].value & 0xFC);
 8003606:	4b2c      	ldr	r3, [pc, #176]	; (80036b8 <reg17Handler+0x114>)
 8003608:	7c5b      	ldrb	r3, [r3, #17]
 800360a:	f023 0303 	bic.w	r3, r3, #3
 800360e:	b2da      	uxtb	r2, r3
 8003610:	4b29      	ldr	r3, [pc, #164]	; (80036b8 <reg17Handler+0x114>)
 8003612:	745a      	strb	r2, [r3, #17]
		saveUserConfigData(EEPROMCustomPage, regBuffer);
 8003614:	4928      	ldr	r1, [pc, #160]	; (80036b8 <reg17Handler+0x114>)
 8003616:	200c      	movs	r0, #12
 8003618:	f7fe fb60 	bl	8001cdc <saveUserConfigData>
		restartMCU();
 800361c:	f7fe fb58 	bl	8001cd0 <restartMCU>
	}
	if (newSetupData.setRegister.restore_default == 1)
 8003620:	4b26      	ldr	r3, [pc, #152]	; (80036bc <reg17Handler+0x118>)
 8003622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003626:	2b01      	cmp	r3, #1
 8003628:	d113      	bne.n	8003652 <reg17Handler+0xae>
	{
		newSetupData.setRegister.save_config = 0;
 800362a:	4b24      	ldr	r3, [pc, #144]	; (80036bc <reg17Handler+0x118>)
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		EEPROMWriteByte(EEPROMLoadPage, 0, (uint8_t*) (0));
 8003632:	2200      	movs	r2, #0
 8003634:	2100      	movs	r1, #0
 8003636:	2009      	movs	r0, #9
 8003638:	f7fd fdba 	bl	80011b0 <EEPROMWriteByte>
		getSavedUserConfigData(EEPROMDefaultPage, regBuffer);
 800363c:	491e      	ldr	r1, [pc, #120]	; (80036b8 <reg17Handler+0x114>)
 800363e:	200a      	movs	r0, #10
 8003640:	f7fe fb6e 	bl	8001d20 <getSavedUserConfigData>
		loadSettingFromBuffer(&newSetupData, regBuffer);
 8003644:	491c      	ldr	r1, [pc, #112]	; (80036b8 <reg17Handler+0x114>)
 8003646:	481d      	ldr	r0, [pc, #116]	; (80036bc <reg17Handler+0x118>)
 8003648:	f000 f95e 	bl	8003908 <loadSettingFromBuffer>
		restartMCU();
 800364c:	f7fe fb40 	bl	8001cd0 <restartMCU>
 8003650:	e014      	b.n	800367c <reg17Handler+0xd8>
	}
	else if ((newSetupData.setRegister.restore_default == 0) && (newSetupData.setRegister.save_config == 0))
 8003652:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <reg17Handler+0x118>)
 8003654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10f      	bne.n	800367c <reg17Handler+0xd8>
 800365c:	4b17      	ldr	r3, [pc, #92]	; (80036bc <reg17Handler+0x118>)
 800365e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10a      	bne.n	800367c <reg17Handler+0xd8>
	{
		EEPROMWriteByte(EEPROMLoadPage, 0, (uint8_t*) (1));
 8003666:	2201      	movs	r2, #1
 8003668:	2100      	movs	r1, #0
 800366a:	2009      	movs	r0, #9
 800366c:	f7fd fda0 	bl	80011b0 <EEPROMWriteByte>
		loadSettingFromBuffer(&newSetupData, regBuffer);
 8003670:	4911      	ldr	r1, [pc, #68]	; (80036b8 <reg17Handler+0x114>)
 8003672:	4812      	ldr	r0, [pc, #72]	; (80036bc <reg17Handler+0x118>)
 8003674:	f000 f948 	bl	8003908 <loadSettingFromBuffer>
		restartMCU();
 8003678:	f7fe fb2a 	bl	8001cd0 <restartMCU>
	}

	newSetupData.setRegister.ina226_avg_ch1 = ((regBuffer[registerNumber].value & 0x1C) >> 2);
 800367c:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <reg17Handler+0x110>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <reg17Handler+0x114>)
 8003684:	5c9b      	ldrb	r3, [r3, r2]
 8003686:	109b      	asrs	r3, r3, #2
 8003688:	b2db      	uxtb	r3, r3
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	b2da      	uxtb	r2, r3
 8003690:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <reg17Handler+0x118>)
 8003692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	newSetupData.setRegister.ina226_mode_ch1 = ((regBuffer[registerNumber].value & 0xE0) >> 5);
 8003696:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <reg17Handler+0x110>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <reg17Handler+0x114>)
 800369e:	5c9b      	ldrb	r3, [r3, r2]
 80036a0:	095b      	lsrs	r3, r3, #5
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <reg17Handler+0x118>)
 80036a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	g_ina226Ch1ConfigChangeFlag = 1;
 80036aa:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <reg17Handler+0x11c>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80036b0:	bf00      	nop
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	200007fc 	.word	0x200007fc
 80036b8:	20000800 	.word	0x20000800
 80036bc:	20000724 	.word	0x20000724
 80036c0:	200006b9 	.word	0x200006b9

080036c4 <reg18Handler>:

void reg18Handler(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
	newSetupData.setRegister.restart_device = (regBuffer[registerNumber].value & 0x01);
 80036c8:	4b18      	ldr	r3, [pc, #96]	; (800372c <reg18Handler+0x68>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	461a      	mov	r2, r3
 80036ce:	4b18      	ldr	r3, [pc, #96]	; (8003730 <reg18Handler+0x6c>)
 80036d0:	5c9b      	ldrb	r3, [r3, r2]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	4b16      	ldr	r3, [pc, #88]	; (8003734 <reg18Handler+0x70>)
 80036da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	newSetupData.setRegister.ina226_avg_ch2 = ((regBuffer[registerNumber].value & 0x1C) >> 2);
 80036de:	4b13      	ldr	r3, [pc, #76]	; (800372c <reg18Handler+0x68>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <reg18Handler+0x6c>)
 80036e6:	5c9b      	ldrb	r3, [r3, r2]
 80036e8:	109b      	asrs	r3, r3, #2
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <reg18Handler+0x70>)
 80036f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	newSetupData.setRegister.ina226_mode_ch2 = ((regBuffer[registerNumber].value & 0xE0) >> 5);
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <reg18Handler+0x68>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <reg18Handler+0x6c>)
 8003700:	5c9b      	ldrb	r3, [r3, r2]
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	b2da      	uxtb	r2, r3
 8003706:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <reg18Handler+0x70>)
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	if (newSetupData.setRegister.restart_device == 1)
 800370c:	4b09      	ldr	r3, [pc, #36]	; (8003734 <reg18Handler+0x70>)
 800370e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003712:	2b01      	cmp	r3, #1
 8003714:	d105      	bne.n	8003722 <reg18Handler+0x5e>
	{
		newSetupData.setRegister.restart_device = 0;
 8003716:	4b07      	ldr	r3, [pc, #28]	; (8003734 <reg18Handler+0x70>)
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		restartMCU();
 800371e:	f7fe fad7 	bl	8001cd0 <restartMCU>
	}

	g_ina226Ch2ConfigChangeFlag = 1;
 8003722:	4b05      	ldr	r3, [pc, #20]	; (8003738 <reg18Handler+0x74>)
 8003724:	2201      	movs	r2, #1
 8003726:	701a      	strb	r2, [r3, #0]

	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003728:	bf00      	nop
 800372a:	bd80      	pop	{r7, pc}
 800372c:	200007fc 	.word	0x200007fc
 8003730:	20000800 	.word	0x20000800
 8003734:	20000724 	.word	0x20000724
 8003738:	200006ba 	.word	0x200006ba

0800373c <reg19Handler>:

void reg19Handler(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
	newSetupData.setRegister.ina226_rsh_pwr_ch1 = (regBuffer[registerNumber].value & 0x07);
 8003740:	4b0e      	ldr	r3, [pc, #56]	; (800377c <reg19Handler+0x40>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <reg19Handler+0x44>)
 8003748:	5c9b      	ldrb	r3, [r3, r2]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	b2da      	uxtb	r2, r3
 8003750:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <reg19Handler+0x48>)
 8003752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	newSetupData.setRegister.ina226_rsh_base_ch1 = ((regBuffer[registerNumber].value & 0xF8) >> 3);
 8003756:	4b09      	ldr	r3, [pc, #36]	; (800377c <reg19Handler+0x40>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	4b08      	ldr	r3, [pc, #32]	; (8003780 <reg19Handler+0x44>)
 800375e:	5c9b      	ldrb	r3, [r3, r2]
 8003760:	08db      	lsrs	r3, r3, #3
 8003762:	b2da      	uxtb	r2, r3
 8003764:	4b07      	ldr	r3, [pc, #28]	; (8003784 <reg19Handler+0x48>)
 8003766:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	g_ina226Ch1ConfigChangeFlag = 1;
 800376a:	4b07      	ldr	r3, [pc, #28]	; (8003788 <reg19Handler+0x4c>)
 800376c:	2201      	movs	r2, #1
 800376e:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	200007fc 	.word	0x200007fc
 8003780:	20000800 	.word	0x20000800
 8003784:	20000724 	.word	0x20000724
 8003788:	200006b9 	.word	0x200006b9

0800378c <reg20Handler>:

void reg20Handler(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
	newSetupData.setRegister.ina226_rsh_pwr_ch2 = (regBuffer[registerNumber].value & 0x07);
 8003790:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <reg20Handler+0x40>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <reg20Handler+0x44>)
 8003798:	5c9b      	ldrb	r3, [r3, r2]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <reg20Handler+0x48>)
 80037a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	newSetupData.setRegister.ina226_rsh_base_ch2 = ((regBuffer[registerNumber].value & 0xF8) >> 3);
 80037a6:	4b09      	ldr	r3, [pc, #36]	; (80037cc <reg20Handler+0x40>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <reg20Handler+0x44>)
 80037ae:	5c9b      	ldrb	r3, [r3, r2]
 80037b0:	08db      	lsrs	r3, r3, #3
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <reg20Handler+0x48>)
 80037b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	g_ina226Ch2ConfigChangeFlag = 1;
 80037ba:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <reg20Handler+0x4c>)
 80037bc:	2201      	movs	r2, #1
 80037be:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80037c0:	bf00      	nop
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	200007fc 	.word	0x200007fc
 80037d0:	20000800 	.word	0x20000800
 80037d4:	20000724 	.word	0x20000724
 80037d8:	200006ba 	.word	0x200006ba

080037dc <reg21Handler>:

void reg21Handler(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
	newSetupData.setRegister.blink_led1 = (regBuffer[registerNumber].value & 0x01);
 80037e0:	4b0e      	ldr	r3, [pc, #56]	; (800381c <reg21Handler+0x40>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	461a      	mov	r2, r3
 80037e6:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <reg21Handler+0x44>)
 80037e8:	5c9b      	ldrb	r3, [r3, r2]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <reg21Handler+0x48>)
 80037f2:	76da      	strb	r2, [r3, #27]
	newSetupData.setRegister.led1_blink_rate = ((regBuffer[registerNumber].value & 0xFE) >> 1) * 10;
 80037f4:	4b09      	ldr	r3, [pc, #36]	; (800381c <reg21Handler+0x40>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	4b09      	ldr	r3, [pc, #36]	; (8003820 <reg21Handler+0x44>)
 80037fc:	5c9b      	ldrb	r3, [r3, r2]
 80037fe:	085b      	lsrs	r3, r3, #1
 8003800:	b2db      	uxtb	r3, r3
 8003802:	b29b      	uxth	r3, r3
 8003804:	461a      	mov	r2, r3
 8003806:	0092      	lsls	r2, r2, #2
 8003808:	4413      	add	r3, r2
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	4b05      	ldr	r3, [pc, #20]	; (8003824 <reg21Handler+0x48>)
 8003810:	839a      	strh	r2, [r3, #28]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003812:	bf00      	nop
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	200007fc 	.word	0x200007fc
 8003820:	20000800 	.word	0x20000800
 8003824:	20000724 	.word	0x20000724

08003828 <reg22Handler>:

void reg22Handler(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
	newSetupData.setRegister.blink_led2 = (regBuffer[registerNumber].value & 0x01);
 800382c:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <reg22Handler+0x40>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	461a      	mov	r2, r3
 8003832:	4b0e      	ldr	r3, [pc, #56]	; (800386c <reg22Handler+0x44>)
 8003834:	5c9b      	ldrb	r3, [r3, r2]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	b2da      	uxtb	r2, r3
 800383c:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <reg22Handler+0x48>)
 800383e:	779a      	strb	r2, [r3, #30]
	newSetupData.setRegister.led2_blink_rate = ((regBuffer[registerNumber].value & 0xFE) >> 1) * 10;
 8003840:	4b09      	ldr	r3, [pc, #36]	; (8003868 <reg22Handler+0x40>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	4b09      	ldr	r3, [pc, #36]	; (800386c <reg22Handler+0x44>)
 8003848:	5c9b      	ldrb	r3, [r3, r2]
 800384a:	085b      	lsrs	r3, r3, #1
 800384c:	b2db      	uxtb	r3, r3
 800384e:	b29b      	uxth	r3, r3
 8003850:	461a      	mov	r2, r3
 8003852:	0092      	lsls	r2, r2, #2
 8003854:	4413      	add	r3, r2
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <reg22Handler+0x48>)
 800385c:	841a      	strh	r2, [r3, #32]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 800385e:	bf00      	nop
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	200007fc 	.word	0x200007fc
 800386c:	20000800 	.word	0x20000800
 8003870:	20000724 	.word	0x20000724

08003874 <reg23Handler>:

void reg23Handler(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003878:	bf00      	nop
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <reg24Handler>:

void reg24Handler(void)
{
 8003882:	b480      	push	{r7}
 8003884:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003886:	bf00      	nop
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <reg25Handler>:

void reg25Handler(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003894:	bf00      	nop
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <reg26Handler>:

void reg26Handler(void)
{
 800389e:	b480      	push	{r7}
 80038a0:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80038a2:	bf00      	nop
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <reg27Handler>:

void reg27Handler(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80038b0:	bf00      	nop
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <reg28Handler>:

void reg28Handler(void)
{
 80038ba:	b480      	push	{r7}
 80038bc:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80038be:	bf00      	nop
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <reg29Handler>:

void reg29Handler(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80038cc:	bf00      	nop
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <reg30Handler>:

void reg30Handler(void)
{
 80038d6:	b480      	push	{r7}
 80038d8:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80038da:	bf00      	nop
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <reg31Handler>:

void reg31Handler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
	if (regBuffer[registerNumber].value == 255)
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <reg31Handler+0x1c>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	4b05      	ldr	r3, [pc, #20]	; (8003904 <reg31Handler+0x20>)
 80038f0:	5c9b      	ldrb	r3, [r3, r2]
 80038f2:	2bff      	cmp	r3, #255	; 0xff
 80038f4:	d101      	bne.n	80038fa <reg31Handler+0x16>
	{
		restartMCU();
 80038f6:	f7fe f9eb 	bl	8001cd0 <restartMCU>
	}
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	200007fc 	.word	0x200007fc
 8003904:	20000800 	.word	0x20000800

08003908 <loadSettingFromBuffer>:
//	g_ina226Ch1ConfigChangedFlag = 1;
//	g_ina226Ch2ConfigChangedFlag = 1;
}

void loadSettingFromBuffer(SetupData_t *SetupData, RegisterData_t *inputBuffer)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
	SetupData->setRegister.id0 = (inputBuffer + reg0)->value;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	781a      	ldrb	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	751a      	strb	r2, [r3, #20]

	SetupData->setRegister.id1 = (inputBuffer + reg1)->value;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	3301      	adds	r3, #1
 800391e:	781a      	ldrb	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	755a      	strb	r2, [r3, #21]
	/**********************END REGISTER 0/1 DAFUALT DATA**********************/

	/*********************START REGISTER 2 DAFUALT DATA*********************/
	SetupData->setRegister.set_led1 = ((inputBuffer + reg2)->value & 0x01);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	3302      	adds	r3, #2
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	b2da      	uxtb	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	765a      	strb	r2, [r3, #25]

	SetupData->setRegister.set_led2 = ((inputBuffer + reg2)->value & 0x02) >> 1;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	3302      	adds	r3, #2
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	105b      	asrs	r3, r3, #1
 800393c:	b2db      	uxtb	r3, r3
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	b2da      	uxtb	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	769a      	strb	r2, [r3, #26]

	SetupData->setRegister.set_dig_out0 = ((inputBuffer + reg2)->value & 0x04) >> 2;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	3302      	adds	r3, #2
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	109b      	asrs	r3, r3, #2
 8003950:	b2db      	uxtb	r3, r3
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	b2da      	uxtb	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	SetupData->setRegister.set_dig_out1 = ((inputBuffer + reg2)->value & 0x8) >> 3;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	3302      	adds	r3, #2
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	10db      	asrs	r3, r3, #3
 8003966:	b2db      	uxtb	r3, r3
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	b2da      	uxtb	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	SetupData->getRegister.get_int_in0 = ((inputBuffer + reg2)->value & 0x10) >> 4;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	3302      	adds	r3, #2
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	111b      	asrs	r3, r3, #4
 800397c:	b2db      	uxtb	r3, r3
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	b2da      	uxtb	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	72da      	strb	r2, [r3, #11]

	SetupData->getRegister.get_int_in1 = ((inputBuffer + reg2)->value & 0x20) >> 5;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	3302      	adds	r3, #2
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	115b      	asrs	r3, r3, #5
 8003990:	b2db      	uxtb	r3, r3
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	b2da      	uxtb	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	731a      	strb	r2, [r3, #12]

	SetupData->setRegister.en_pwm0 = ((inputBuffer + reg2)->value & 0x40) >> 6;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	3302      	adds	r3, #2
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	119b      	asrs	r3, r3, #6
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	SetupData->setRegister.en_pwm1 = ((inputBuffer + reg2)->value & 0x80) >> 7;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	3302      	adds	r3, #2
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	09db      	lsrs	r3, r3, #7
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	/**********************END REGISTER 2 DAFUALT DATA**********************/

	/*********************START REGISTER 3 DAFUALT DATA*********************/
	SetupData->setRegister.auto_off_dis = ((inputBuffer + reg3)->value & 0x01);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	3303      	adds	r3, #3
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	759a      	strb	r2, [r3, #22]

	SetupData->setRegister.meas_mode = ((inputBuffer + reg3)->value & 0x02) >> 1;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	3303      	adds	r3, #3
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	105b      	asrs	r3, r3, #1
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	75da      	strb	r2, [r3, #23]

	SetupData->setRegister.en_disp = ((inputBuffer + reg3)->value & 0x04) >> 2;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	3303      	adds	r3, #3
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	109b      	asrs	r3, r3, #2
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	761a      	strb	r2, [r3, #24]

	SetupData->getRegister.get_int_temp = ((inputBuffer + reg3)->value & 0x08) >> 3;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	3303      	adds	r3, #3
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	10db      	asrs	r3, r3, #3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	73da      	strb	r2, [r3, #15]
	SetupData->getRegister.get_detect_5v = ((inputBuffer + reg3)->value & 0x10) >> 4;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	3303      	adds	r3, #3
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	111b      	asrs	r3, r3, #4
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	749a      	strb	r2, [r3, #18]
	//	defaultSetupData->adc0_upper_limit = 4095;
	//
	//	defaultSetupData->adc1_lower_limit = 0;
	//	defaultSetupData->adc1_upper_limit = 4095;
	/*********************START REGISTER 4 DAFUALT DATA*********************/
	SetupData->setRegister.set_over_temp_limit = (inputBuffer + reg4)->value;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	3304      	adds	r3, #4
 8003a26:	781a      	ldrb	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	lm75ad_setTosLimit(&hi2c1, LM75AD_ADDRESS, (float) (SetupData->setRegister.set_over_temp_limit));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003a34:	ee07 3a90 	vmov	s15, r3
 8003a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a40:	2190      	movs	r1, #144	; 0x90
 8003a42:	48b7      	ldr	r0, [pc, #732]	; (8003d20 <loadSettingFromBuffer+0x418>)
 8003a44:	f7fe ff26 	bl	8002894 <lm75ad_setTosLimit>
	lm75ad_setThystLimit(&hi2c1, LM75AD_ADDRESS, (float) (SetupData->setRegister.set_over_temp_limit - 5));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003a4e:	3b05      	subs	r3, #5
 8003a50:	ee07 3a90 	vmov	s15, r3
 8003a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a58:	eeb0 0a67 	vmov.f32	s0, s15
 8003a5c:	2190      	movs	r1, #144	; 0x90
 8003a5e:	48b0      	ldr	r0, [pc, #704]	; (8003d20 <loadSettingFromBuffer+0x418>)
 8003a60:	f7fe ff72 	bl	8002948 <lm75ad_setThystLimit>
	/**********************END REGISTER 4 DAFUALT DATA**********************/

	/*********************START REGISTER 5 DAFUALT DATA*********************/
	SetupData->setRegister.bus_volt_conv_time_ch1 = ((inputBuffer + reg5)->value & 0x07);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	3305      	adds	r3, #5
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	ina226_setVBUSCT(&hi2c1, CH1_ADDRESS, SetupData->setRegister.bus_volt_conv_time_ch1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	2180      	movs	r1, #128	; 0x80
 8003a80:	48a7      	ldr	r0, [pc, #668]	; (8003d20 <loadSettingFromBuffer+0x418>)
 8003a82:	f7fe fc09 	bl	8002298 <ina226_setVBUSCT>

	SetupData->setRegister.shunt_volt_conv_time_ch1 = ((inputBuffer + reg5)->value & 0x38) >> 3;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	3305      	adds	r3, #5
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	10db      	asrs	r3, r3, #3
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	ina226_setVSHUNTCT(&hi2c1, CH1_ADDRESS, SetupData->setRegister.shunt_volt_conv_time_ch1);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	2180      	movs	r1, #128	; 0x80
 8003aa6:	489e      	ldr	r0, [pc, #632]	; (8003d20 <loadSettingFromBuffer+0x418>)
 8003aa8:	f7fe fc1d 	bl	80022e6 <ina226_setVSHUNTCT>

	SetupData->setRegister.limit_unit_prefix_ch1 = ((inputBuffer + reg5)->value & 0x40) >> 6;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	3305      	adds	r3, #5
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	119b      	asrs	r3, r3, #6
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	SetupData->setRegister.limit_unit_prefix_ch2 = ((inputBuffer + reg5)->value & 0x80) >> 7;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	3305      	adds	r3, #5
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	09db      	lsrs	r3, r3, #7
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	/**********************END REGISTER 5 DAFUALT DATA**********************/

	/*********************START REGISTER 6 DAFUALT DATA*********************/
	SetupData->setRegister.bus_volt_conv_time_ch2 = ((inputBuffer + reg6)->value & 0x07);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	3306      	adds	r3, #6
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	ina226_setVBUSCT(&hi2c1, CH2_ADDRESS, SetupData->setRegister.bus_volt_conv_time_ch2);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003aea:	461a      	mov	r2, r3
 8003aec:	2182      	movs	r1, #130	; 0x82
 8003aee:	488c      	ldr	r0, [pc, #560]	; (8003d20 <loadSettingFromBuffer+0x418>)
 8003af0:	f7fe fbd2 	bl	8002298 <ina226_setVBUSCT>

	SetupData->setRegister.shunt_volt_conv_time_ch2 = ((inputBuffer + reg6)->value & 0x38) >> 3;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	3306      	adds	r3, #6
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	10db      	asrs	r3, r3, #3
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	ina226_setVSHUNTCT(&hi2c1, CH2_ADDRESS, SetupData->setRegister.shunt_volt_conv_time_ch2);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003b10:	461a      	mov	r2, r3
 8003b12:	2182      	movs	r1, #130	; 0x82
 8003b14:	4882      	ldr	r0, [pc, #520]	; (8003d20 <loadSettingFromBuffer+0x418>)
 8003b16:	f7fe fbe6 	bl	80022e6 <ina226_setVSHUNTCT>
	/**********************END REGISTER 6 DAFUALT DATA**********************/

	/*********************START REGISTER 7 DAFUALT DATA*********************/
	SetupData->setRegister.en_int_ch1 = ((inputBuffer + reg7)->value & 0x01);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	3307      	adds	r3, #7
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	SetupData->setRegister.en_int_ch2 = ((inputBuffer + reg7)->value & 0x02) >> 1;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	3307      	adds	r3, #7
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	105b      	asrs	r3, r3, #1
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	SetupData->setRegister.ale_trig_ch1 = ((inputBuffer + reg7)->value & 0x1C) >> 2;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	3307      	adds	r3, #7
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	109b      	asrs	r3, r3, #2
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	SetupData->setRegister.ale_trig_ch2 = ((inputBuffer + reg7)->value & 0xE0) >> 5;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	3307      	adds	r3, #7
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	/**********************END REGISTER 7 DAFUALT DATA**********************/

	/*********************START REGISTER 8 DAFUALT DATA*********************/
	SetupData->setRegister.limit1_ch1 = (inputBuffer + reg8)->value;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	3308      	adds	r3, #8
 8003b6c:	781a      	ldrb	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	/**********************END REGISTER 8 DAFUALT DATA**********************/

	/*********************START REGISTER 9 DAFUALT DATA*********************/
	SetupData->setRegister.limit2_ch1 = (inputBuffer + reg9)->value;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	3309      	adds	r3, #9
 8003b78:	781a      	ldrb	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	/**********************END REGISTER 9 DAFUALT DATA**********************/

	/*********************START REGISTER 10 DAFUALT DATA*********************/
	SetupData->setRegister.limit1_ch2 = (inputBuffer + reg10)->value;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	330a      	adds	r3, #10
 8003b84:	781a      	ldrb	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	/**********************END REGISTER 10 DAFUALT DATA**********************/

	/*********************START REGISTER 11 DAFUALT DATA*********************/
	SetupData->setRegister.limit2_ch2 = (inputBuffer + reg11)->value;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	330b      	adds	r3, #11
 8003b90:	781a      	ldrb	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	/**********************END REGISTER 11 DAFUALT DATA**********************/

	/*********************START REGISTER 12 DAFUALT DATA*********************/
	SetupData->setRegister.set_pwm0_duty = (inputBuffer + reg12)->value;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	330c      	adds	r3, #12
 8003b9c:	781a      	ldrb	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	/**********************END REGISTER 12 DAFUALT DATA**********************/

	/*********************START REGISTER 13 DAFUALT DATA*********************/
	SetupData->setRegister.set_pwm1_duty = (inputBuffer + reg13)->value;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	330d      	adds	r3, #13
 8003ba8:	781a      	ldrb	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	/**********************END REGISTER 13 DAFUALT DATA**********************/

	/*********************START REGISTER 14 DAFUALT DATA*********************/
	// The default PWM frequency is 1kHz
	SetupData->setRegister.set_pwm_freq1 = (inputBuffer + reg14)->value;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	330e      	adds	r3, #14
 8003bb4:	781a      	ldrb	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	/**********************END REGISTER 14 DAFUALT DATA**********************/

	/*********************START REGISTER 15 DAFUALT DATA*********************/
	SetupData->setRegister.set_pwm_freq2 = (inputBuffer + reg15)->value;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	330f      	adds	r3, #15
 8003bc0:	781a      	ldrb	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	SetupData->setRegister.set_pwm_freq = (uint16_t) ((float) (SetupData->setRegister.set_pwm_freq1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003bce:	461a      	mov	r2, r3
			+ (SetupData->setRegister.set_pwm_freq2 << 8)) * PWMFreqCorrectionFactor);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8003bd6:	021b      	lsls	r3, r3, #8
 8003bd8:	4413      	add	r3, r2
	SetupData->setRegister.set_pwm_freq = (uint16_t) ((float) (SetupData->setRegister.set_pwm_freq1
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003be2:	ee17 0a90 	vmov	r0, s15
 8003be6:	f7fc fcb7 	bl	8000558 <__aeabi_f2d>
			+ (SetupData->setRegister.set_pwm_freq2 << 8)) * PWMFreqCorrectionFactor);
 8003bea:	a34b      	add	r3, pc, #300	; (adr r3, 8003d18 <loadSettingFromBuffer+0x410>)
 8003bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf0:	f7fc fd0a 	bl	8000608 <__aeabi_dmul>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
	SetupData->setRegister.set_pwm_freq = (uint16_t) ((float) (SetupData->setRegister.set_pwm_freq1
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	f7fc ffdc 	bl	8000bb8 <__aeabi_d2uiz>
 8003c00:	4603      	mov	r3, r0
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	871a      	strh	r2, [r3, #56]	; 0x38
//	SetupData->getRegister.get_vref_mcu = ((inputBuffer + reg16)->value & 0x04) >> 2;
//
//	SetupData->getRegister.get_temp_amb = ((inputBuffer + reg16)->value & 0x08) >> 3;
//
//	SetupData->getRegister.get_temp_mcu = ((inputBuffer + reg16)->value & 0x10) >> 4;
	SetupData->getRegister.get_dig_in0 = ((inputBuffer + reg16)->value & 0x20) >> 5;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	3310      	adds	r3, #16
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	115b      	asrs	r3, r3, #5
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	741a      	strb	r2, [r3, #16]

	SetupData->getRegister.get_dig_in1 = ((inputBuffer + reg16)->value & 0x40) >> 6;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	3310      	adds	r3, #16
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	119b      	asrs	r3, r3, #6
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	745a      	strb	r2, [r3, #17]

//	SetupData->getRegister.get_effiency = ((inputBuffer + reg16)->value & 0x80) >> 7;
	/**********************END REGISTER 16 DAFUALT DATA**********************/

	/**********************START REGISTER 17 DAFUALT DATA**********************/
	SetupData->setRegister.restore_default = ((inputBuffer + reg17)->value & 0x01);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	3311      	adds	r3, #17
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	SetupData->setRegister.save_config = ((inputBuffer + reg17)->value & 0x02) >> 1;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	3311      	adds	r3, #17
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	105b      	asrs	r3, r3, #1
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	SetupData->setRegister.ina226_avg_ch1 = ((inputBuffer + reg17)->value & 0x1C) >> 2;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	3311      	adds	r3, #17
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	109b      	asrs	r3, r3, #2
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	ina226_setAVG(&hi2c1, CH1_ADDRESS, SetupData->setRegister.ina226_avg_ch1);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c74:	461a      	mov	r2, r3
 8003c76:	2180      	movs	r1, #128	; 0x80
 8003c78:	4829      	ldr	r0, [pc, #164]	; (8003d20 <loadSettingFromBuffer+0x418>)
 8003c7a:	f7fe fac2 	bl	8002202 <ina226_setAVG>
	SetupData->setRegister.ina226_mode_ch1 = ((inputBuffer + reg17)->value & 0xE0) >> 5;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	3311      	adds	r3, #17
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	ina226_setMODE(&hi2c1, CH1_ADDRESS, SetupData->setRegister.ina226_mode_ch1);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c94:	461a      	mov	r2, r3
 8003c96:	2180      	movs	r1, #128	; 0x80
 8003c98:	4821      	ldr	r0, [pc, #132]	; (8003d20 <loadSettingFromBuffer+0x418>)
 8003c9a:	f7fe fad9 	bl	8002250 <ina226_setMODE>
	/**********************END REGISTER 17 DAFUALT DATA**********************/

	/**********************START REGISTER 18 DAFUALT DATA**********************/
	SetupData->setRegister.ina226_avg_ch2 = ((inputBuffer + reg18)->value & 0x1C) >> 2;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	3312      	adds	r3, #18
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	109b      	asrs	r3, r3, #2
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	ina226_setAVG(&hi2c1, CH2_ADDRESS, SetupData->setRegister.ina226_avg_ch2);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cba:	461a      	mov	r2, r3
 8003cbc:	2182      	movs	r1, #130	; 0x82
 8003cbe:	4818      	ldr	r0, [pc, #96]	; (8003d20 <loadSettingFromBuffer+0x418>)
 8003cc0:	f7fe fa9f 	bl	8002202 <ina226_setAVG>
	SetupData->setRegister.ina226_mode_ch2 = ((inputBuffer + reg18)->value & 0xE0) >> 5;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	3312      	adds	r3, #18
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	ina226_setMODE(&hi2c1, CH2_ADDRESS, SetupData->setRegister.ina226_mode_ch2);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cda:	461a      	mov	r2, r3
 8003cdc:	2182      	movs	r1, #130	; 0x82
 8003cde:	4810      	ldr	r0, [pc, #64]	; (8003d20 <loadSettingFromBuffer+0x418>)
 8003ce0:	f7fe fab6 	bl	8002250 <ina226_setMODE>
	/**********************END REGISTER 18 DAFUALT DATA**********************/

	/**********************START REGISTER 19 DAFUALT DATA**********************/
	SetupData->setRegister.ina226_rsh_pwr_ch1 = ((inputBuffer + reg19)->value & 0x07);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	3313      	adds	r3, #19
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	SetupData->setRegister.ina226_rsh_base_ch1 = ((inputBuffer + reg19)->value & 0xF8) >> 3;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	3313      	adds	r3, #19
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	08db      	lsrs	r3, r3, #3
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
//	((SetupData->setRegister.ina226_rsh_base_ch1 << 3) | (SetupData->setRegister.ina226_rsh_pwr_ch1))
//	);
	/**********************END REGISTER 19 DAFUALT DATA**********************/

	/**********************START REGISTER 20 DAFUALT DATA**********************/
	SetupData->setRegister.ina226_rsh_pwr_ch2 = ((inputBuffer + reg20)->value & 0x07);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	3314      	adds	r3, #20
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	e007      	b.n	8003d24 <loadSettingFromBuffer+0x41c>
 8003d14:	f3af 8000 	nop.w
 8003d18:	e978d4fe 	.word	0xe978d4fe
 8003d1c:	3ff03126 	.word	0x3ff03126
 8003d20:	200006d0 	.word	0x200006d0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	SetupData->setRegister.ina226_rsh_base_ch2 = ((inputBuffer + reg20)->value & 0xF8) >> 3;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	3314      	adds	r3, #20
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	08db      	lsrs	r3, r3, #3
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
//	((SetupData->setRegister.ina226_rsh_base_ch2 << 3) | (SetupData->setRegister.ina226_rsh_pwr_ch2))
//	);
	/**********************END REGISTER 20 DAFUALT DATA**********************/

	/**********************START REGISTER 21 DAFUALT DATA**********************/
	SetupData->setRegister.blink_led1 = ((inputBuffer + reg21)->value & 0x01);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	3315      	adds	r3, #21
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	76da      	strb	r2, [r3, #27]
	SetupData->setRegister.led1_blink_rate = (((inputBuffer + reg21)->value & 0xFE) >> 1) * 10;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	3315      	adds	r3, #21
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	085b      	lsrs	r3, r3, #1
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	461a      	mov	r2, r3
 8003d58:	0092      	lsls	r2, r2, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	839a      	strh	r2, [r3, #28]
	/***********************END REGISTER 21 DAFUALT DATA***********************/

	/**********************START REGISTER 22 DAFUALT DATA**********************/
	SetupData->setRegister.blink_led2 = ((inputBuffer + reg22)->value & 0x01);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	3316      	adds	r3, #22
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	779a      	strb	r2, [r3, #30]
	SetupData->setRegister.led2_blink_rate = (((inputBuffer + reg22)->value & 0xFE) >> 1) * 10;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	3316      	adds	r3, #22
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	085b      	lsrs	r3, r3, #1
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	461a      	mov	r2, r3
 8003d82:	0092      	lsls	r2, r2, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	841a      	strh	r2, [r3, #32]
	/***********************END REGISTER 22 DAFUALT DATA***********************/

	g_HWUpdateFlag = 1;
 8003d8e:	4b03      	ldr	r3, [pc, #12]	; (8003d9c <loadSettingFromBuffer+0x494>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	701a      	strb	r2, [r3, #0]
}
 8003d94:	bf00      	nop
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	200006b8 	.word	0x200006b8

08003da0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003da4:	4b17      	ldr	r3, [pc, #92]	; (8003e04 <MX_SPI1_Init+0x64>)
 8003da6:	4a18      	ldr	r2, [pc, #96]	; (8003e08 <MX_SPI1_Init+0x68>)
 8003da8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003daa:	4b16      	ldr	r3, [pc, #88]	; (8003e04 <MX_SPI1_Init+0x64>)
 8003dac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003db0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003db2:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <MX_SPI1_Init+0x64>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003db8:	4b12      	ldr	r3, [pc, #72]	; (8003e04 <MX_SPI1_Init+0x64>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dbe:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <MX_SPI1_Init+0x64>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <MX_SPI1_Init+0x64>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003dca:	4b0e      	ldr	r3, [pc, #56]	; (8003e04 <MX_SPI1_Init+0x64>)
 8003dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dd2:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <MX_SPI1_Init+0x64>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003dd8:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <MX_SPI1_Init+0x64>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003dde:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <MX_SPI1_Init+0x64>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003de4:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <MX_SPI1_Init+0x64>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003dea:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <MX_SPI1_Init+0x64>)
 8003dec:	220a      	movs	r2, #10
 8003dee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003df0:	4804      	ldr	r0, [pc, #16]	; (8003e04 <MX_SPI1_Init+0x64>)
 8003df2:	f005 fb95 	bl	8009520 <HAL_SPI_Init>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003dfc:	f7fe ff5a 	bl	8002cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003e00:	bf00      	nop
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	20000820 	.word	0x20000820
 8003e08:	40013000 	.word	0x40013000

08003e0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08a      	sub	sp, #40	; 0x28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e14:	f107 0314 	add.w	r3, r7, #20
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	605a      	str	r2, [r3, #4]
 8003e1e:	609a      	str	r2, [r3, #8]
 8003e20:	60da      	str	r2, [r3, #12]
 8003e22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a19      	ldr	r2, [pc, #100]	; (8003e90 <HAL_SPI_MspInit+0x84>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d12b      	bne.n	8003e86 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e2e:	2300      	movs	r3, #0
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	4b18      	ldr	r3, [pc, #96]	; (8003e94 <HAL_SPI_MspInit+0x88>)
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	4a17      	ldr	r2, [pc, #92]	; (8003e94 <HAL_SPI_MspInit+0x88>)
 8003e38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e3e:	4b15      	ldr	r3, [pc, #84]	; (8003e94 <HAL_SPI_MspInit+0x88>)
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <HAL_SPI_MspInit+0x88>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	4a10      	ldr	r2, [pc, #64]	; (8003e94 <HAL_SPI_MspInit+0x88>)
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	6313      	str	r3, [r2, #48]	; 0x30
 8003e5a:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <HAL_SPI_MspInit+0x88>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003e66:	23e0      	movs	r3, #224	; 0xe0
 8003e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e72:	2303      	movs	r3, #3
 8003e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e76:	2305      	movs	r3, #5
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e7a:	f107 0314 	add.w	r3, r7, #20
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4805      	ldr	r0, [pc, #20]	; (8003e98 <HAL_SPI_MspInit+0x8c>)
 8003e82:	f001 fddf 	bl	8005a44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003e86:	bf00      	nop
 8003e88:	3728      	adds	r7, #40	; 0x28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40013000 	.word	0x40013000
 8003e94:	40023800 	.word	0x40023800
 8003e98:	40020000 	.word	0x40020000

08003e9c <ssd1306_Reset>:
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	bf00      	nop
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <ssd1306_WriteCommand>:
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af04      	add	r7, sp, #16
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	71fb      	strb	r3, [r7, #7]
 8003eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eba:	9302      	str	r3, [sp, #8]
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	1dfb      	adds	r3, r7, #7
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	2178      	movs	r1, #120	; 0x78
 8003eca:	4803      	ldr	r0, [pc, #12]	; (8003ed8 <ssd1306_WriteCommand+0x2c>)
 8003ecc:	f002 fc16 	bl	80066fc <HAL_I2C_Mem_Write>
 8003ed0:	bf00      	nop
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	200006d0 	.word	0x200006d0

08003edc <ssd1306_WriteData>:
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af04      	add	r7, sp, #16
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	f04f 32ff 	mov.w	r2, #4294967295
 8003eee:	9202      	str	r2, [sp, #8]
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	2240      	movs	r2, #64	; 0x40
 8003efa:	2178      	movs	r1, #120	; 0x78
 8003efc:	4803      	ldr	r0, [pc, #12]	; (8003f0c <ssd1306_WriteData+0x30>)
 8003efe:	f002 fbfd 	bl	80066fc <HAL_I2C_Mem_Write>
 8003f02:	bf00      	nop
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	200006d0 	.word	0x200006d0

08003f10 <ssd1306_Init>:
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	f7ff ffc2 	bl	8003e9c <ssd1306_Reset>
 8003f18:	2064      	movs	r0, #100	; 0x64
 8003f1a:	f000 fd0f 	bl	800493c <HAL_Delay>
 8003f1e:	2000      	movs	r0, #0
 8003f20:	f000 f9e6 	bl	80042f0 <ssd1306_SetDisplayOn>
 8003f24:	2020      	movs	r0, #32
 8003f26:	f7ff ffc1 	bl	8003eac <ssd1306_WriteCommand>
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	f7ff ffbe 	bl	8003eac <ssd1306_WriteCommand>
 8003f30:	20b0      	movs	r0, #176	; 0xb0
 8003f32:	f7ff ffbb 	bl	8003eac <ssd1306_WriteCommand>
 8003f36:	20c8      	movs	r0, #200	; 0xc8
 8003f38:	f7ff ffb8 	bl	8003eac <ssd1306_WriteCommand>
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	f7ff ffb5 	bl	8003eac <ssd1306_WriteCommand>
 8003f42:	2010      	movs	r0, #16
 8003f44:	f7ff ffb2 	bl	8003eac <ssd1306_WriteCommand>
 8003f48:	2040      	movs	r0, #64	; 0x40
 8003f4a:	f7ff ffaf 	bl	8003eac <ssd1306_WriteCommand>
 8003f4e:	20ff      	movs	r0, #255	; 0xff
 8003f50:	f000 f9ba 	bl	80042c8 <ssd1306_SetContrast>
 8003f54:	20a1      	movs	r0, #161	; 0xa1
 8003f56:	f7ff ffa9 	bl	8003eac <ssd1306_WriteCommand>
 8003f5a:	20a6      	movs	r0, #166	; 0xa6
 8003f5c:	f7ff ffa6 	bl	8003eac <ssd1306_WriteCommand>
 8003f60:	20a8      	movs	r0, #168	; 0xa8
 8003f62:	f7ff ffa3 	bl	8003eac <ssd1306_WriteCommand>
 8003f66:	203f      	movs	r0, #63	; 0x3f
 8003f68:	f7ff ffa0 	bl	8003eac <ssd1306_WriteCommand>
 8003f6c:	20a4      	movs	r0, #164	; 0xa4
 8003f6e:	f7ff ff9d 	bl	8003eac <ssd1306_WriteCommand>
 8003f72:	20d3      	movs	r0, #211	; 0xd3
 8003f74:	f7ff ff9a 	bl	8003eac <ssd1306_WriteCommand>
 8003f78:	2000      	movs	r0, #0
 8003f7a:	f7ff ff97 	bl	8003eac <ssd1306_WriteCommand>
 8003f7e:	20d5      	movs	r0, #213	; 0xd5
 8003f80:	f7ff ff94 	bl	8003eac <ssd1306_WriteCommand>
 8003f84:	20f0      	movs	r0, #240	; 0xf0
 8003f86:	f7ff ff91 	bl	8003eac <ssd1306_WriteCommand>
 8003f8a:	20d9      	movs	r0, #217	; 0xd9
 8003f8c:	f7ff ff8e 	bl	8003eac <ssd1306_WriteCommand>
 8003f90:	2022      	movs	r0, #34	; 0x22
 8003f92:	f7ff ff8b 	bl	8003eac <ssd1306_WriteCommand>
 8003f96:	20da      	movs	r0, #218	; 0xda
 8003f98:	f7ff ff88 	bl	8003eac <ssd1306_WriteCommand>
 8003f9c:	2012      	movs	r0, #18
 8003f9e:	f7ff ff85 	bl	8003eac <ssd1306_WriteCommand>
 8003fa2:	20db      	movs	r0, #219	; 0xdb
 8003fa4:	f7ff ff82 	bl	8003eac <ssd1306_WriteCommand>
 8003fa8:	2020      	movs	r0, #32
 8003faa:	f7ff ff7f 	bl	8003eac <ssd1306_WriteCommand>
 8003fae:	208d      	movs	r0, #141	; 0x8d
 8003fb0:	f7ff ff7c 	bl	8003eac <ssd1306_WriteCommand>
 8003fb4:	2014      	movs	r0, #20
 8003fb6:	f7ff ff79 	bl	8003eac <ssd1306_WriteCommand>
 8003fba:	2001      	movs	r0, #1
 8003fbc:	f000 f998 	bl	80042f0 <ssd1306_SetDisplayOn>
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	f000 f80f 	bl	8003fe4 <ssd1306_Fill>
 8003fc6:	f000 f831 	bl	800402c <ssd1306_UpdateScreen>
 8003fca:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <ssd1306_Init+0xd0>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	801a      	strh	r2, [r3, #0]
 8003fd0:	4b03      	ldr	r3, [pc, #12]	; (8003fe0 <ssd1306_Init+0xd0>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	805a      	strh	r2, [r3, #2]
 8003fd6:	4b02      	ldr	r3, [pc, #8]	; (8003fe0 <ssd1306_Init+0xd0>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	715a      	strb	r2, [r3, #5]
 8003fdc:	bf00      	nop
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	20000c78 	.word	0x20000c78

08003fe4 <ssd1306_Fill>:
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	71fb      	strb	r3, [r7, #7]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	e00d      	b.n	8004010 <ssd1306_Fill+0x2c>
 8003ff4:	79fb      	ldrb	r3, [r7, #7]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <ssd1306_Fill+0x1a>
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	e000      	b.n	8004000 <ssd1306_Fill+0x1c>
 8003ffe:	21ff      	movs	r1, #255	; 0xff
 8004000:	4a09      	ldr	r2, [pc, #36]	; (8004028 <ssd1306_Fill+0x44>)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4413      	add	r3, r2
 8004006:	460a      	mov	r2, r1
 8004008:	701a      	strb	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3301      	adds	r3, #1
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004016:	d3ed      	bcc.n	8003ff4 <ssd1306_Fill+0x10>
 8004018:	bf00      	nop
 800401a:	bf00      	nop
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	20000878 	.word	0x20000878

0800402c <ssd1306_UpdateScreen>:
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	2300      	movs	r3, #0
 8004034:	71fb      	strb	r3, [r7, #7]
 8004036:	e016      	b.n	8004066 <ssd1306_UpdateScreen+0x3a>
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	3b50      	subs	r3, #80	; 0x50
 800403c:	b2db      	uxtb	r3, r3
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff ff34 	bl	8003eac <ssd1306_WriteCommand>
 8004044:	2000      	movs	r0, #0
 8004046:	f7ff ff31 	bl	8003eac <ssd1306_WriteCommand>
 800404a:	2010      	movs	r0, #16
 800404c:	f7ff ff2e 	bl	8003eac <ssd1306_WriteCommand>
 8004050:	79fb      	ldrb	r3, [r7, #7]
 8004052:	01db      	lsls	r3, r3, #7
 8004054:	4a08      	ldr	r2, [pc, #32]	; (8004078 <ssd1306_UpdateScreen+0x4c>)
 8004056:	4413      	add	r3, r2
 8004058:	2180      	movs	r1, #128	; 0x80
 800405a:	4618      	mov	r0, r3
 800405c:	f7ff ff3e 	bl	8003edc <ssd1306_WriteData>
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	3301      	adds	r3, #1
 8004064:	71fb      	strb	r3, [r7, #7]
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	2b07      	cmp	r3, #7
 800406a:	d9e5      	bls.n	8004038 <ssd1306_UpdateScreen+0xc>
 800406c:	bf00      	nop
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	20000878 	.word	0x20000878

0800407c <ssd1306_DrawPixel>:
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	4603      	mov	r3, r0
 8004084:	71fb      	strb	r3, [r7, #7]
 8004086:	460b      	mov	r3, r1
 8004088:	71bb      	strb	r3, [r7, #6]
 800408a:	4613      	mov	r3, r2
 800408c:	717b      	strb	r3, [r7, #5]
 800408e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004092:	2b00      	cmp	r3, #0
 8004094:	db48      	blt.n	8004128 <ssd1306_DrawPixel+0xac>
 8004096:	79bb      	ldrb	r3, [r7, #6]
 8004098:	2b3f      	cmp	r3, #63	; 0x3f
 800409a:	d845      	bhi.n	8004128 <ssd1306_DrawPixel+0xac>
 800409c:	4b25      	ldr	r3, [pc, #148]	; (8004134 <ssd1306_DrawPixel+0xb8>)
 800409e:	791b      	ldrb	r3, [r3, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d006      	beq.n	80040b2 <ssd1306_DrawPixel+0x36>
 80040a4:	797b      	ldrb	r3, [r7, #5]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	bf0c      	ite	eq
 80040aa:	2301      	moveq	r3, #1
 80040ac:	2300      	movne	r3, #0
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	717b      	strb	r3, [r7, #5]
 80040b2:	797b      	ldrb	r3, [r7, #5]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d11a      	bne.n	80040ee <ssd1306_DrawPixel+0x72>
 80040b8:	79fa      	ldrb	r2, [r7, #7]
 80040ba:	79bb      	ldrb	r3, [r7, #6]
 80040bc:	08db      	lsrs	r3, r3, #3
 80040be:	b2d8      	uxtb	r0, r3
 80040c0:	4603      	mov	r3, r0
 80040c2:	01db      	lsls	r3, r3, #7
 80040c4:	4413      	add	r3, r2
 80040c6:	4a1c      	ldr	r2, [pc, #112]	; (8004138 <ssd1306_DrawPixel+0xbc>)
 80040c8:	5cd3      	ldrb	r3, [r2, r3]
 80040ca:	b25a      	sxtb	r2, r3
 80040cc:	79bb      	ldrb	r3, [r7, #6]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	2101      	movs	r1, #1
 80040d4:	fa01 f303 	lsl.w	r3, r1, r3
 80040d8:	b25b      	sxtb	r3, r3
 80040da:	4313      	orrs	r3, r2
 80040dc:	b259      	sxtb	r1, r3
 80040de:	79fa      	ldrb	r2, [r7, #7]
 80040e0:	4603      	mov	r3, r0
 80040e2:	01db      	lsls	r3, r3, #7
 80040e4:	4413      	add	r3, r2
 80040e6:	b2c9      	uxtb	r1, r1
 80040e8:	4a13      	ldr	r2, [pc, #76]	; (8004138 <ssd1306_DrawPixel+0xbc>)
 80040ea:	54d1      	strb	r1, [r2, r3]
 80040ec:	e01d      	b.n	800412a <ssd1306_DrawPixel+0xae>
 80040ee:	79fa      	ldrb	r2, [r7, #7]
 80040f0:	79bb      	ldrb	r3, [r7, #6]
 80040f2:	08db      	lsrs	r3, r3, #3
 80040f4:	b2d8      	uxtb	r0, r3
 80040f6:	4603      	mov	r3, r0
 80040f8:	01db      	lsls	r3, r3, #7
 80040fa:	4413      	add	r3, r2
 80040fc:	4a0e      	ldr	r2, [pc, #56]	; (8004138 <ssd1306_DrawPixel+0xbc>)
 80040fe:	5cd3      	ldrb	r3, [r2, r3]
 8004100:	b25a      	sxtb	r2, r3
 8004102:	79bb      	ldrb	r3, [r7, #6]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	2101      	movs	r1, #1
 800410a:	fa01 f303 	lsl.w	r3, r1, r3
 800410e:	b25b      	sxtb	r3, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	b25b      	sxtb	r3, r3
 8004114:	4013      	ands	r3, r2
 8004116:	b259      	sxtb	r1, r3
 8004118:	79fa      	ldrb	r2, [r7, #7]
 800411a:	4603      	mov	r3, r0
 800411c:	01db      	lsls	r3, r3, #7
 800411e:	4413      	add	r3, r2
 8004120:	b2c9      	uxtb	r1, r1
 8004122:	4a05      	ldr	r2, [pc, #20]	; (8004138 <ssd1306_DrawPixel+0xbc>)
 8004124:	54d1      	strb	r1, [r2, r3]
 8004126:	e000      	b.n	800412a <ssd1306_DrawPixel+0xae>
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	20000c78 	.word	0x20000c78
 8004138:	20000878 	.word	0x20000878

0800413c <ssd1306_WriteChar>:
 800413c:	b590      	push	{r4, r7, lr}
 800413e:	b089      	sub	sp, #36	; 0x24
 8004140:	af00      	add	r7, sp, #0
 8004142:	4604      	mov	r4, r0
 8004144:	1d38      	adds	r0, r7, #4
 8004146:	e880 0006 	stmia.w	r0, {r1, r2}
 800414a:	461a      	mov	r2, r3
 800414c:	4623      	mov	r3, r4
 800414e:	73fb      	strb	r3, [r7, #15]
 8004150:	4613      	mov	r3, r2
 8004152:	73bb      	strb	r3, [r7, #14]
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	2b1f      	cmp	r3, #31
 8004158:	d902      	bls.n	8004160 <ssd1306_WriteChar+0x24>
 800415a:	7bfb      	ldrb	r3, [r7, #15]
 800415c:	2b7e      	cmp	r3, #126	; 0x7e
 800415e:	d901      	bls.n	8004164 <ssd1306_WriteChar+0x28>
 8004160:	2300      	movs	r3, #0
 8004162:	e06d      	b.n	8004240 <ssd1306_WriteChar+0x104>
 8004164:	4b38      	ldr	r3, [pc, #224]	; (8004248 <ssd1306_WriteChar+0x10c>)
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	461a      	mov	r2, r3
 800416a:	793b      	ldrb	r3, [r7, #4]
 800416c:	4413      	add	r3, r2
 800416e:	2b80      	cmp	r3, #128	; 0x80
 8004170:	dc06      	bgt.n	8004180 <ssd1306_WriteChar+0x44>
 8004172:	4b35      	ldr	r3, [pc, #212]	; (8004248 <ssd1306_WriteChar+0x10c>)
 8004174:	885b      	ldrh	r3, [r3, #2]
 8004176:	461a      	mov	r2, r3
 8004178:	797b      	ldrb	r3, [r7, #5]
 800417a:	4413      	add	r3, r2
 800417c:	2b40      	cmp	r3, #64	; 0x40
 800417e:	dd01      	ble.n	8004184 <ssd1306_WriteChar+0x48>
 8004180:	2300      	movs	r3, #0
 8004182:	e05d      	b.n	8004240 <ssd1306_WriteChar+0x104>
 8004184:	2300      	movs	r3, #0
 8004186:	61fb      	str	r3, [r7, #28]
 8004188:	e04c      	b.n	8004224 <ssd1306_WriteChar+0xe8>
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	3b20      	subs	r3, #32
 8004190:	7979      	ldrb	r1, [r7, #5]
 8004192:	fb01 f303 	mul.w	r3, r1, r3
 8004196:	4619      	mov	r1, r3
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	440b      	add	r3, r1
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	4413      	add	r3, r2
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	2300      	movs	r3, #0
 80041a6:	61bb      	str	r3, [r7, #24]
 80041a8:	e034      	b.n	8004214 <ssd1306_WriteChar+0xd8>
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d012      	beq.n	80041e0 <ssd1306_WriteChar+0xa4>
 80041ba:	4b23      	ldr	r3, [pc, #140]	; (8004248 <ssd1306_WriteChar+0x10c>)
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	4413      	add	r3, r2
 80041c6:	b2d8      	uxtb	r0, r3
 80041c8:	4b1f      	ldr	r3, [pc, #124]	; (8004248 <ssd1306_WriteChar+0x10c>)
 80041ca:	885b      	ldrh	r3, [r3, #2]
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	4413      	add	r3, r2
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	7bba      	ldrb	r2, [r7, #14]
 80041d8:	4619      	mov	r1, r3
 80041da:	f7ff ff4f 	bl	800407c <ssd1306_DrawPixel>
 80041de:	e016      	b.n	800420e <ssd1306_WriteChar+0xd2>
 80041e0:	4b19      	ldr	r3, [pc, #100]	; (8004248 <ssd1306_WriteChar+0x10c>)
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	4413      	add	r3, r2
 80041ec:	b2d8      	uxtb	r0, r3
 80041ee:	4b16      	ldr	r3, [pc, #88]	; (8004248 <ssd1306_WriteChar+0x10c>)
 80041f0:	885b      	ldrh	r3, [r3, #2]
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	4413      	add	r3, r2
 80041fa:	b2d9      	uxtb	r1, r3
 80041fc:	7bbb      	ldrb	r3, [r7, #14]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	bf0c      	ite	eq
 8004202:	2301      	moveq	r3, #1
 8004204:	2300      	movne	r3, #0
 8004206:	b2db      	uxtb	r3, r3
 8004208:	461a      	mov	r2, r3
 800420a:	f7ff ff37 	bl	800407c <ssd1306_DrawPixel>
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	3301      	adds	r3, #1
 8004212:	61bb      	str	r3, [r7, #24]
 8004214:	793b      	ldrb	r3, [r7, #4]
 8004216:	461a      	mov	r2, r3
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	4293      	cmp	r3, r2
 800421c:	d3c5      	bcc.n	80041aa <ssd1306_WriteChar+0x6e>
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	3301      	adds	r3, #1
 8004222:	61fb      	str	r3, [r7, #28]
 8004224:	797b      	ldrb	r3, [r7, #5]
 8004226:	461a      	mov	r2, r3
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	4293      	cmp	r3, r2
 800422c:	d3ad      	bcc.n	800418a <ssd1306_WriteChar+0x4e>
 800422e:	4b06      	ldr	r3, [pc, #24]	; (8004248 <ssd1306_WriteChar+0x10c>)
 8004230:	881a      	ldrh	r2, [r3, #0]
 8004232:	793b      	ldrb	r3, [r7, #4]
 8004234:	b29b      	uxth	r3, r3
 8004236:	4413      	add	r3, r2
 8004238:	b29a      	uxth	r2, r3
 800423a:	4b03      	ldr	r3, [pc, #12]	; (8004248 <ssd1306_WriteChar+0x10c>)
 800423c:	801a      	strh	r2, [r3, #0]
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	4618      	mov	r0, r3
 8004242:	3724      	adds	r7, #36	; 0x24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd90      	pop	{r4, r7, pc}
 8004248:	20000c78 	.word	0x20000c78

0800424c <ssd1306_WriteString>:
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	1d38      	adds	r0, r7, #4
 8004256:	e880 0006 	stmia.w	r0, {r1, r2}
 800425a:	70fb      	strb	r3, [r7, #3]
 800425c:	e012      	b.n	8004284 <ssd1306_WriteString+0x38>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	7818      	ldrb	r0, [r3, #0]
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	1d3a      	adds	r2, r7, #4
 8004266:	ca06      	ldmia	r2, {r1, r2}
 8004268:	f7ff ff68 	bl	800413c <ssd1306_WriteChar>
 800426c:	4603      	mov	r3, r0
 800426e:	461a      	mov	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d002      	beq.n	800427e <ssd1306_WriteString+0x32>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	e008      	b.n	8004290 <ssd1306_WriteString+0x44>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3301      	adds	r3, #1
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1e8      	bne.n	800425e <ssd1306_WriteString+0x12>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <ssd1306_SetCursor>:
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	460a      	mov	r2, r1
 80042a2:	71fb      	strb	r3, [r7, #7]
 80042a4:	4613      	mov	r3, r2
 80042a6:	71bb      	strb	r3, [r7, #6]
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <ssd1306_SetCursor+0x2c>)
 80042ae:	801a      	strh	r2, [r3, #0]
 80042b0:	79bb      	ldrb	r3, [r7, #6]
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	4b03      	ldr	r3, [pc, #12]	; (80042c4 <ssd1306_SetCursor+0x2c>)
 80042b6:	805a      	strh	r2, [r3, #2]
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	20000c78 	.word	0x20000c78

080042c8 <ssd1306_SetContrast>:
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	71fb      	strb	r3, [r7, #7]
 80042d2:	2381      	movs	r3, #129	; 0x81
 80042d4:	73fb      	strb	r3, [r7, #15]
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff fde7 	bl	8003eac <ssd1306_WriteCommand>
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff fde3 	bl	8003eac <ssd1306_WriteCommand>
 80042e6:	bf00      	nop
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <ssd1306_SetDisplayOn>:
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	71fb      	strb	r3, [r7, #7]
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d005      	beq.n	800430c <ssd1306_SetDisplayOn+0x1c>
 8004300:	23af      	movs	r3, #175	; 0xaf
 8004302:	73fb      	strb	r3, [r7, #15]
 8004304:	4b08      	ldr	r3, [pc, #32]	; (8004328 <ssd1306_SetDisplayOn+0x38>)
 8004306:	2201      	movs	r2, #1
 8004308:	719a      	strb	r2, [r3, #6]
 800430a:	e004      	b.n	8004316 <ssd1306_SetDisplayOn+0x26>
 800430c:	23ae      	movs	r3, #174	; 0xae
 800430e:	73fb      	strb	r3, [r7, #15]
 8004310:	4b05      	ldr	r3, [pc, #20]	; (8004328 <ssd1306_SetDisplayOn+0x38>)
 8004312:	2200      	movs	r2, #0
 8004314:	719a      	strb	r2, [r3, #6]
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff fdc7 	bl	8003eac <ssd1306_WriteCommand>
 800431e:	bf00      	nop
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	20000c78 	.word	0x20000c78

0800432c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004332:	2300      	movs	r3, #0
 8004334:	607b      	str	r3, [r7, #4]
 8004336:	4b12      	ldr	r3, [pc, #72]	; (8004380 <HAL_MspInit+0x54>)
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	4a11      	ldr	r2, [pc, #68]	; (8004380 <HAL_MspInit+0x54>)
 800433c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004340:	6453      	str	r3, [r2, #68]	; 0x44
 8004342:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <HAL_MspInit+0x54>)
 8004344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800434a:	607b      	str	r3, [r7, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800434e:	2300      	movs	r3, #0
 8004350:	603b      	str	r3, [r7, #0]
 8004352:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <HAL_MspInit+0x54>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	4a0a      	ldr	r2, [pc, #40]	; (8004380 <HAL_MspInit+0x54>)
 8004358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800435c:	6413      	str	r3, [r2, #64]	; 0x40
 800435e:	4b08      	ldr	r3, [pc, #32]	; (8004380 <HAL_MspInit+0x54>)
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004366:	603b      	str	r3, [r7, #0]
 8004368:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800436a:	2200      	movs	r2, #0
 800436c:	210f      	movs	r1, #15
 800436e:	f06f 0001 	mvn.w	r0, #1
 8004372:	f000 ffc8 	bl	8005306 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40023800 	.word	0x40023800

08004384 <HAL_InitTick>:
 8004384:	b580      	push	{r7, lr}
 8004386:	b08c      	sub	sp, #48	; 0x30
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	2300      	movs	r3, #0
 800438e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004390:	2300      	movs	r3, #0
 8004392:	627b      	str	r3, [r7, #36]	; 0x24
 8004394:	2300      	movs	r3, #0
 8004396:	60bb      	str	r3, [r7, #8]
 8004398:	4b2e      	ldr	r3, [pc, #184]	; (8004454 <HAL_InitTick+0xd0>)
 800439a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439c:	4a2d      	ldr	r2, [pc, #180]	; (8004454 <HAL_InitTick+0xd0>)
 800439e:	f043 0301 	orr.w	r3, r3, #1
 80043a2:	6453      	str	r3, [r2, #68]	; 0x44
 80043a4:	4b2b      	ldr	r3, [pc, #172]	; (8004454 <HAL_InitTick+0xd0>)
 80043a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	60bb      	str	r3, [r7, #8]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f107 020c 	add.w	r2, r7, #12
 80043b4:	f107 0310 	add.w	r3, r7, #16
 80043b8:	4611      	mov	r1, r2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f005 f87e 	bl	80094bc <HAL_RCC_GetClockConfig>
 80043c0:	f005 f868 	bl	8009494 <HAL_RCC_GetPCLK2Freq>
 80043c4:	62b8      	str	r0, [r7, #40]	; 0x28
 80043c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c8:	4a23      	ldr	r2, [pc, #140]	; (8004458 <HAL_InitTick+0xd4>)
 80043ca:	fba2 2303 	umull	r2, r3, r2, r3
 80043ce:	0c9b      	lsrs	r3, r3, #18
 80043d0:	3b01      	subs	r3, #1
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
 80043d4:	4b21      	ldr	r3, [pc, #132]	; (800445c <HAL_InitTick+0xd8>)
 80043d6:	4a22      	ldr	r2, [pc, #136]	; (8004460 <HAL_InitTick+0xdc>)
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	4b20      	ldr	r3, [pc, #128]	; (800445c <HAL_InitTick+0xd8>)
 80043dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043e0:	60da      	str	r2, [r3, #12]
 80043e2:	4a1e      	ldr	r2, [pc, #120]	; (800445c <HAL_InitTick+0xd8>)
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	6053      	str	r3, [r2, #4]
 80043e8:	4b1c      	ldr	r3, [pc, #112]	; (800445c <HAL_InitTick+0xd8>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	611a      	str	r2, [r3, #16]
 80043ee:	4b1b      	ldr	r3, [pc, #108]	; (800445c <HAL_InitTick+0xd8>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	609a      	str	r2, [r3, #8]
 80043f4:	4b19      	ldr	r3, [pc, #100]	; (800445c <HAL_InitTick+0xd8>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	619a      	str	r2, [r3, #24]
 80043fa:	4818      	ldr	r0, [pc, #96]	; (800445c <HAL_InitTick+0xd8>)
 80043fc:	f005 f919 	bl	8009632 <HAL_TIM_Base_Init>
 8004400:	4603      	mov	r3, r0
 8004402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004406:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800440a:	2b00      	cmp	r3, #0
 800440c:	d11b      	bne.n	8004446 <HAL_InitTick+0xc2>
 800440e:	4813      	ldr	r0, [pc, #76]	; (800445c <HAL_InitTick+0xd8>)
 8004410:	f005 f95e 	bl	80096d0 <HAL_TIM_Base_Start_IT>
 8004414:	4603      	mov	r3, r0
 8004416:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800441a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800441e:	2b00      	cmp	r3, #0
 8004420:	d111      	bne.n	8004446 <HAL_InitTick+0xc2>
 8004422:	2019      	movs	r0, #25
 8004424:	f000 ff8b 	bl	800533e <HAL_NVIC_EnableIRQ>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b0f      	cmp	r3, #15
 800442c:	d808      	bhi.n	8004440 <HAL_InitTick+0xbc>
 800442e:	2200      	movs	r2, #0
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	2019      	movs	r0, #25
 8004434:	f000 ff67 	bl	8005306 <HAL_NVIC_SetPriority>
 8004438:	4a0a      	ldr	r2, [pc, #40]	; (8004464 <HAL_InitTick+0xe0>)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e002      	b.n	8004446 <HAL_InitTick+0xc2>
 8004440:	2301      	movs	r3, #1
 8004442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004446:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800444a:	4618      	mov	r0, r3
 800444c:	3730      	adds	r7, #48	; 0x30
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800
 8004458:	431bde83 	.word	0x431bde83
 800445c:	20000c80 	.word	0x20000c80
 8004460:	40010000 	.word	0x40010000
 8004464:	20000018 	.word	0x20000018

08004468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800446c:	e7fe      	b.n	800446c <NMI_Handler+0x4>

0800446e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800446e:	b480      	push	{r7}
 8004470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004472:	e7fe      	b.n	8004472 <HardFault_Handler+0x4>

08004474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004478:	e7fe      	b.n	8004478 <MemManage_Handler+0x4>

0800447a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800447a:	b480      	push	{r7}
 800447c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800447e:	e7fe      	b.n	800447e <BusFault_Handler+0x4>

08004480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004484:	e7fe      	b.n	8004484 <UsageFault_Handler+0x4>

08004486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004486:	b480      	push	{r7}
 8004488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800448a:	bf00      	nop
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_IN0_Pin);
 8004498:	2008      	movs	r0, #8
 800449a:	f001 fca3 	bl	8005de4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800449e:	bf00      	nop
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_IN1_Pin);
 80044a6:	2010      	movs	r0, #16
 80044a8:	f001 fc9c 	bl	8005de4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80044ac:	bf00      	nop
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80044b4:	4802      	ldr	r0, [pc, #8]	; (80044c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80044b6:	f005 fa77 	bl	80099a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80044ba:	bf00      	nop
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20000c80 	.word	0x20000c80

080044c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80044c8:	4802      	ldr	r0, [pc, #8]	; (80044d4 <TIM4_IRQHandler+0x10>)
 80044ca:	f005 fa6d 	bl	80099a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80044ce:	bf00      	nop
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000ccc 	.word	0x20000ccc

080044d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_OUT_Pin);
 80044dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80044e0:	f001 fc80 	bl	8005de4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_IN_Pin);
 80044e4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80044e8:	f001 fc7c 	bl	8005de4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TEMP_IRQ_Pin);
 80044ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80044f0:	f001 fc78 	bl	8005de4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80044f4:	bf00      	nop
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80044fc:	4802      	ldr	r0, [pc, #8]	; (8004508 <DMA2_Stream0_IRQHandler+0x10>)
 80044fe:	f001 f837 	bl	8005570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004502:	bf00      	nop
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	20000348 	.word	0x20000348

0800450c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004510:	4802      	ldr	r0, [pc, #8]	; (800451c <OTG_FS_IRQHandler+0x10>)
 8004512:	f003 fa0e 	bl	8007932 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004516:	bf00      	nop
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20005758 	.word	0x20005758

08004520 <_getpid>:
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
 8004524:	2301      	movs	r3, #1
 8004526:	4618      	mov	r0, r3
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <_kill>:
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
 800453a:	f00b fcbf 	bl	800febc <__errno>
 800453e:	4603      	mov	r3, r0
 8004540:	2216      	movs	r2, #22
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	f04f 33ff 	mov.w	r3, #4294967295
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <_exit>:
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	f04f 31ff 	mov.w	r1, #4294967295
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7ff ffe7 	bl	8004530 <_kill>
 8004562:	e7fe      	b.n	8004562 <_exit+0x12>

08004564 <_read>:
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	e00a      	b.n	800458c <_read+0x28>
 8004576:	f3af 8000 	nop.w
 800457a:	4601      	mov	r1, r0
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	60ba      	str	r2, [r7, #8]
 8004582:	b2ca      	uxtb	r2, r1
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	3301      	adds	r3, #1
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	429a      	cmp	r2, r3
 8004592:	dbf0      	blt.n	8004576 <_read+0x12>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <_close>:
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	f04f 33ff 	mov.w	r3, #4294967295
 80045aa:	4618      	mov	r0, r3
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <_fstat>:
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	6039      	str	r1, [r7, #0]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045c6:	605a      	str	r2, [r3, #4]
 80045c8:	2300      	movs	r3, #0
 80045ca:	4618      	mov	r0, r3
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <_isatty>:
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	2301      	movs	r3, #1
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <_lseek>:
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	2300      	movs	r3, #0
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
	...

08004608 <_sbrk>:
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	4a14      	ldr	r2, [pc, #80]	; (8004664 <_sbrk+0x5c>)
 8004612:	4b15      	ldr	r3, [pc, #84]	; (8004668 <_sbrk+0x60>)
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	4b13      	ldr	r3, [pc, #76]	; (800466c <_sbrk+0x64>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d102      	bne.n	800462a <_sbrk+0x22>
 8004624:	4b11      	ldr	r3, [pc, #68]	; (800466c <_sbrk+0x64>)
 8004626:	4a12      	ldr	r2, [pc, #72]	; (8004670 <_sbrk+0x68>)
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	4b10      	ldr	r3, [pc, #64]	; (800466c <_sbrk+0x64>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4413      	add	r3, r2
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	429a      	cmp	r2, r3
 8004636:	d207      	bcs.n	8004648 <_sbrk+0x40>
 8004638:	f00b fc40 	bl	800febc <__errno>
 800463c:	4603      	mov	r3, r0
 800463e:	220c      	movs	r2, #12
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	f04f 33ff 	mov.w	r3, #4294967295
 8004646:	e009      	b.n	800465c <_sbrk+0x54>
 8004648:	4b08      	ldr	r3, [pc, #32]	; (800466c <_sbrk+0x64>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	4b07      	ldr	r3, [pc, #28]	; (800466c <_sbrk+0x64>)
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4413      	add	r3, r2
 8004656:	4a05      	ldr	r2, [pc, #20]	; (800466c <_sbrk+0x64>)
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4618      	mov	r0, r3
 800465e:	3718      	adds	r7, #24
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	20010000 	.word	0x20010000
 8004668:	00000400 	.word	0x00000400
 800466c:	20000cc8 	.word	0x20000cc8
 8004670:	20005e98 	.word	0x20005e98

08004674 <SystemInit>:
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
 8004678:	4b06      	ldr	r3, [pc, #24]	; (8004694 <SystemInit+0x20>)
 800467a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467e:	4a05      	ldr	r2, [pc, #20]	; (8004694 <SystemInit+0x20>)
 8004680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004688:	bf00      	nop
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	e000ed00 	.word	0xe000ed00

08004698 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08e      	sub	sp, #56	; 0x38
 800469c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig =
 800469e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	605a      	str	r2, [r3, #4]
 80046a8:	609a      	str	r2, [r3, #8]
 80046aa:	60da      	str	r2, [r3, #12]
	{ 0 };
	TIM_MasterConfigTypeDef sMasterConfig =
 80046ac:	f107 0320 	add.w	r3, r7, #32
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	605a      	str	r2, [r3, #4]
	{ 0 };
	TIM_OC_InitTypeDef sConfigOC =
 80046b6:	1d3b      	adds	r3, r7, #4
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	605a      	str	r2, [r3, #4]
 80046be:	609a      	str	r2, [r3, #8]
 80046c0:	60da      	str	r2, [r3, #12]
 80046c2:	611a      	str	r2, [r3, #16]
 80046c4:	615a      	str	r2, [r3, #20]
 80046c6:	619a      	str	r2, [r3, #24]
	{ 0 };

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80046c8:	4b33      	ldr	r3, [pc, #204]	; (8004798 <MX_TIM4_Init+0x100>)
 80046ca:	4a34      	ldr	r2, [pc, #208]	; (800479c <MX_TIM4_Init+0x104>)
 80046cc:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 840 - 1;
 80046ce:	4b32      	ldr	r3, [pc, #200]	; (8004798 <MX_TIM4_Init+0x100>)
 80046d0:	f240 3247 	movw	r2, #839	; 0x347
 80046d4:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046d6:	4b30      	ldr	r3, [pc, #192]	; (8004798 <MX_TIM4_Init+0x100>)
 80046d8:	2200      	movs	r2, #0
 80046da:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 100 - 1;
 80046dc:	4b2e      	ldr	r3, [pc, #184]	; (8004798 <MX_TIM4_Init+0x100>)
 80046de:	2263      	movs	r2, #99	; 0x63
 80046e0:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046e2:	4b2d      	ldr	r3, [pc, #180]	; (8004798 <MX_TIM4_Init+0x100>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80046e8:	4b2b      	ldr	r3, [pc, #172]	; (8004798 <MX_TIM4_Init+0x100>)
 80046ea:	2280      	movs	r2, #128	; 0x80
 80046ec:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80046ee:	482a      	ldr	r0, [pc, #168]	; (8004798 <MX_TIM4_Init+0x100>)
 80046f0:	f004 ff9f 	bl	8009632 <HAL_TIM_Base_Init>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <MX_TIM4_Init+0x66>
	{
		Error_Handler();
 80046fa:	f7fe fadb 	bl	8002cb4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004702:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004704:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004708:	4619      	mov	r1, r3
 800470a:	4823      	ldr	r0, [pc, #140]	; (8004798 <MX_TIM4_Init+0x100>)
 800470c:	f005 fb16 	bl	8009d3c <HAL_TIM_ConfigClockSource>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <MX_TIM4_Init+0x82>
	{
		Error_Handler();
 8004716:	f7fe facd 	bl	8002cb4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800471a:	481f      	ldr	r0, [pc, #124]	; (8004798 <MX_TIM4_Init+0x100>)
 800471c:	f005 f83a 	bl	8009794 <HAL_TIM_PWM_Init>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <MX_TIM4_Init+0x92>
	{
		Error_Handler();
 8004726:	f7fe fac5 	bl	8002cb4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800472a:	2320      	movs	r3, #32
 800472c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800472e:	2300      	movs	r3, #0
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004732:	f107 0320 	add.w	r3, r7, #32
 8004736:	4619      	mov	r1, r3
 8004738:	4817      	ldr	r0, [pc, #92]	; (8004798 <MX_TIM4_Init+0x100>)
 800473a:	f005 febb 	bl	800a4b4 <HAL_TIMEx_MasterConfigSynchronization>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <MX_TIM4_Init+0xb0>
	{
		Error_Handler();
 8004744:	f7fe fab6 	bl	8002cb4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004748:	2360      	movs	r3, #96	; 0x60
 800474a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 50;
 800474c:	2332      	movs	r3, #50	; 0x32
 800474e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004750:	2302      	movs	r3, #2
 8004752:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004758:	1d3b      	adds	r3, r7, #4
 800475a:	2208      	movs	r2, #8
 800475c:	4619      	mov	r1, r3
 800475e:	480e      	ldr	r0, [pc, #56]	; (8004798 <MX_TIM4_Init+0x100>)
 8004760:	f005 fa2a 	bl	8009bb8 <HAL_TIM_PWM_ConfigChannel>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <MX_TIM4_Init+0xd6>
	{
		Error_Handler();
 800476a:	f7fe faa3 	bl	8002cb4 <Error_Handler>
	}
	sConfigOC.Pulse = 25;
 800476e:	2319      	movs	r3, #25
 8004770:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004772:	1d3b      	adds	r3, r7, #4
 8004774:	220c      	movs	r2, #12
 8004776:	4619      	mov	r1, r3
 8004778:	4807      	ldr	r0, [pc, #28]	; (8004798 <MX_TIM4_Init+0x100>)
 800477a:	f005 fa1d 	bl	8009bb8 <HAL_TIM_PWM_ConfigChannel>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <MX_TIM4_Init+0xf0>
	{
		Error_Handler();
 8004784:	f7fe fa96 	bl	8002cb4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8004788:	4803      	ldr	r0, [pc, #12]	; (8004798 <MX_TIM4_Init+0x100>)
 800478a:	f000 f831 	bl	80047f0 <HAL_TIM_MspPostInit>

}
 800478e:	bf00      	nop
 8004790:	3738      	adds	r7, #56	; 0x38
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	20000ccc 	.word	0x20000ccc
 800479c:	40000800 	.word	0x40000800

080047a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *tim_baseHandle)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]

	if (tim_baseHandle->Instance == TIM4)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a0e      	ldr	r2, [pc, #56]	; (80047e8 <HAL_TIM_Base_MspInit+0x48>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d115      	bne.n	80047de <HAL_TIM_Base_MspInit+0x3e>
	{
		/* USER CODE BEGIN TIM4_MspInit 0 */

		/* USER CODE END TIM4_MspInit 0 */
		/* TIM4 clock enable */
		__HAL_RCC_TIM4_CLK_ENABLE();
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <HAL_TIM_Base_MspInit+0x4c>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	4a0c      	ldr	r2, [pc, #48]	; (80047ec <HAL_TIM_Base_MspInit+0x4c>)
 80047bc:	f043 0304 	orr.w	r3, r3, #4
 80047c0:	6413      	str	r3, [r2, #64]	; 0x40
 80047c2:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <HAL_TIM_Base_MspInit+0x4c>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]

		/* TIM4 interrupt Init */
		HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80047ce:	2200      	movs	r2, #0
 80047d0:	2105      	movs	r1, #5
 80047d2:	201e      	movs	r0, #30
 80047d4:	f000 fd97 	bl	8005306 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80047d8:	201e      	movs	r0, #30
 80047da:	f000 fdb0 	bl	800533e <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM4_MspInit 1 */

		/* USER CODE END TIM4_MspInit 1 */
	}
}
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40000800 	.word	0x40000800
 80047ec:	40023800 	.word	0x40023800

080047f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *timHandle)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 80047f8:	f107 030c 	add.w	r3, r7, #12
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	609a      	str	r2, [r3, #8]
 8004804:	60da      	str	r2, [r3, #12]
 8004806:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (timHandle->Instance == TIM4)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a12      	ldr	r2, [pc, #72]	; (8004858 <HAL_TIM_MspPostInit+0x68>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d11e      	bne.n	8004850 <HAL_TIM_MspPostInit+0x60>
	{
		/* USER CODE BEGIN TIM4_MspPostInit 0 */

		/* USER CODE END TIM4_MspPostInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8004812:	2300      	movs	r3, #0
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	4b11      	ldr	r3, [pc, #68]	; (800485c <HAL_TIM_MspPostInit+0x6c>)
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	4a10      	ldr	r2, [pc, #64]	; (800485c <HAL_TIM_MspPostInit+0x6c>)
 800481c:	f043 0302 	orr.w	r3, r3, #2
 8004820:	6313      	str	r3, [r2, #48]	; 0x30
 8004822:	4b0e      	ldr	r3, [pc, #56]	; (800485c <HAL_TIM_MspPostInit+0x6c>)
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	60bb      	str	r3, [r7, #8]
 800482c:	68bb      	ldr	r3, [r7, #8]
		/**TIM4 GPIO Configuration
		 PB8     ------> TIM4_CH3
		 PB9     ------> TIM4_CH4
		 */
		GPIO_InitStruct.Pin = PWM_OUT0_Pin | PWM_OUT1_Pin;
 800482e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004832:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004834:	2302      	movs	r3, #2
 8004836:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004838:	2301      	movs	r3, #1
 800483a:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800483c:	2302      	movs	r3, #2
 800483e:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004840:	2302      	movs	r3, #2
 8004842:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004844:	f107 030c 	add.w	r3, r7, #12
 8004848:	4619      	mov	r1, r3
 800484a:	4805      	ldr	r0, [pc, #20]	; (8004860 <HAL_TIM_MspPostInit+0x70>)
 800484c:	f001 f8fa 	bl	8005a44 <HAL_GPIO_Init>
		/* USER CODE BEGIN TIM4_MspPostInit 1 */

		/* USER CODE END TIM4_MspPostInit 1 */
	}

}
 8004850:	bf00      	nop
 8004852:	3720      	adds	r7, #32
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40000800 	.word	0x40000800
 800485c:	40023800 	.word	0x40023800
 8004860:	40020400 	.word	0x40020400

08004864 <Reset_Handler>:
 8004864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800489c <LoopFillZerobss+0x12>
 8004868:	480d      	ldr	r0, [pc, #52]	; (80048a0 <LoopFillZerobss+0x16>)
 800486a:	490e      	ldr	r1, [pc, #56]	; (80048a4 <LoopFillZerobss+0x1a>)
 800486c:	4a0e      	ldr	r2, [pc, #56]	; (80048a8 <LoopFillZerobss+0x1e>)
 800486e:	2300      	movs	r3, #0
 8004870:	e002      	b.n	8004878 <LoopCopyDataInit>

08004872 <CopyDataInit>:
 8004872:	58d4      	ldr	r4, [r2, r3]
 8004874:	50c4      	str	r4, [r0, r3]
 8004876:	3304      	adds	r3, #4

08004878 <LoopCopyDataInit>:
 8004878:	18c4      	adds	r4, r0, r3
 800487a:	428c      	cmp	r4, r1
 800487c:	d3f9      	bcc.n	8004872 <CopyDataInit>
 800487e:	4a0b      	ldr	r2, [pc, #44]	; (80048ac <LoopFillZerobss+0x22>)
 8004880:	4c0b      	ldr	r4, [pc, #44]	; (80048b0 <LoopFillZerobss+0x26>)
 8004882:	2300      	movs	r3, #0
 8004884:	e001      	b.n	800488a <LoopFillZerobss>

08004886 <FillZerobss>:
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	3204      	adds	r2, #4

0800488a <LoopFillZerobss>:
 800488a:	42a2      	cmp	r2, r4
 800488c:	d3fb      	bcc.n	8004886 <FillZerobss>
 800488e:	f7ff fef1 	bl	8004674 <SystemInit>
 8004892:	f00b fc0f 	bl	80100b4 <__libc_init_array>
 8004896:	f7fe f8e1 	bl	8002a5c <main>
 800489a:	4770      	bx	lr
 800489c:	20010000 	.word	0x20010000
 80048a0:	20000000 	.word	0x20000000
 80048a4:	200002e4 	.word	0x200002e4
 80048a8:	08014bec 	.word	0x08014bec
 80048ac:	200002e4 	.word	0x200002e4
 80048b0:	20005e94 	.word	0x20005e94

080048b4 <ADC_IRQHandler>:
 80048b4:	e7fe      	b.n	80048b4 <ADC_IRQHandler>
	...

080048b8 <HAL_Init>:
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	4b0e      	ldr	r3, [pc, #56]	; (80048f8 <HAL_Init+0x40>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a0d      	ldr	r2, [pc, #52]	; (80048f8 <HAL_Init+0x40>)
 80048c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048c6:	6013      	str	r3, [r2, #0]
 80048c8:	4b0b      	ldr	r3, [pc, #44]	; (80048f8 <HAL_Init+0x40>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a0a      	ldr	r2, [pc, #40]	; (80048f8 <HAL_Init+0x40>)
 80048ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <HAL_Init+0x40>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a07      	ldr	r2, [pc, #28]	; (80048f8 <HAL_Init+0x40>)
 80048da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	2003      	movs	r0, #3
 80048e2:	f000 fd05 	bl	80052f0 <HAL_NVIC_SetPriorityGrouping>
 80048e6:	200f      	movs	r0, #15
 80048e8:	f7ff fd4c 	bl	8004384 <HAL_InitTick>
 80048ec:	f7ff fd1e 	bl	800432c <HAL_MspInit>
 80048f0:	2300      	movs	r3, #0
 80048f2:	4618      	mov	r0, r3
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40023c00 	.word	0x40023c00

080048fc <HAL_IncTick>:
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
 8004900:	4b06      	ldr	r3, [pc, #24]	; (800491c <HAL_IncTick+0x20>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	461a      	mov	r2, r3
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <HAL_IncTick+0x24>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4413      	add	r3, r2
 800490c:	4a04      	ldr	r2, [pc, #16]	; (8004920 <HAL_IncTick+0x24>)
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	bf00      	nop
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	2000001c 	.word	0x2000001c
 8004920:	20000d14 	.word	0x20000d14

08004924 <HAL_GetTick>:
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
 8004928:	4b03      	ldr	r3, [pc, #12]	; (8004938 <HAL_GetTick+0x14>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4618      	mov	r0, r3
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	20000d14 	.word	0x20000d14

0800493c <HAL_Delay>:
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	f7ff ffee 	bl	8004924 <HAL_GetTick>
 8004948:	60b8      	str	r0, [r7, #8]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004954:	d005      	beq.n	8004962 <HAL_Delay+0x26>
 8004956:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <HAL_Delay+0x44>)
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	461a      	mov	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	bf00      	nop
 8004964:	f7ff ffde 	bl	8004924 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	429a      	cmp	r2, r3
 8004972:	d8f7      	bhi.n	8004964 <HAL_Delay+0x28>
 8004974:	bf00      	nop
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	2000001c 	.word	0x2000001c

08004984 <HAL_ADC_Init>:
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	2300      	movs	r3, #0
 800498e:	73fb      	strb	r3, [r7, #15]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_ADC_Init+0x16>
 8004996:	2301      	movs	r3, #1
 8004998:	e033      	b.n	8004a02 <HAL_ADC_Init+0x7e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <HAL_ADC_Init+0x32>
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7fc fb7a 	bl	800109c <HAL_ADC_MspInit>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	645a      	str	r2, [r3, #68]	; 0x44
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	f003 0310 	and.w	r3, r3, #16
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d118      	bne.n	80049f4 <HAL_ADC_Init+0x70>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80049ca:	f023 0302 	bic.w	r3, r3, #2
 80049ce:	f043 0202 	orr.w	r2, r3, #2
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	641a      	str	r2, [r3, #64]	; 0x40
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 fa48 	bl	8004e6c <ADC_Init>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	645a      	str	r2, [r3, #68]	; 0x44
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	f023 0303 	bic.w	r3, r3, #3
 80049ea:	f043 0201 	orr.w	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	641a      	str	r2, [r3, #64]	; 0x40
 80049f2:	e001      	b.n	80049f8 <HAL_ADC_Init+0x74>
 80049f4:	2301      	movs	r3, #1
 80049f6:	73fb      	strb	r3, [r7, #15]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <HAL_ADC_Start_DMA>:
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	2300      	movs	r3, #0
 8004a1a:	613b      	str	r3, [r7, #16]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <HAL_ADC_Start_DMA+0x1e>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e0ce      	b.n	8004bc8 <HAL_ADC_Start_DMA+0x1bc>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d018      	beq.n	8004a72 <HAL_ADC_Start_DMA+0x66>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689a      	ldr	r2, [r3, #8]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0201 	orr.w	r2, r2, #1
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	4b5f      	ldr	r3, [pc, #380]	; (8004bd0 <HAL_ADC_Start_DMA+0x1c4>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a5f      	ldr	r2, [pc, #380]	; (8004bd4 <HAL_ADC_Start_DMA+0x1c8>)
 8004a56:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5a:	0c9a      	lsrs	r2, r3, #18
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	4413      	add	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
 8004a64:	e002      	b.n	8004a6c <HAL_ADC_Start_DMA+0x60>
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f9      	bne.n	8004a66 <HAL_ADC_Start_DMA+0x5a>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a80:	d107      	bne.n	8004a92 <HAL_ADC_Start_DMA+0x86>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a90:	609a      	str	r2, [r3, #8]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	f040 8086 	bne.w	8004bae <HAL_ADC_Start_DMA+0x1a2>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	641a      	str	r2, [r3, #64]	; 0x40
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d007      	beq.n	8004ad4 <HAL_ADC_Start_DMA+0xc8>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004acc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	641a      	str	r2, [r3, #64]	; 0x40
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae0:	d106      	bne.n	8004af0 <HAL_ADC_Start_DMA+0xe4>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae6:	f023 0206 	bic.w	r2, r3, #6
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	645a      	str	r2, [r3, #68]	; 0x44
 8004aee:	e002      	b.n	8004af6 <HAL_ADC_Start_DMA+0xea>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	645a      	str	r2, [r3, #68]	; 0x44
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004afe:	4b36      	ldr	r3, [pc, #216]	; (8004bd8 <HAL_ADC_Start_DMA+0x1cc>)
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	4a35      	ldr	r2, [pc, #212]	; (8004bdc <HAL_ADC_Start_DMA+0x1d0>)
 8004b08:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	4a34      	ldr	r2, [pc, #208]	; (8004be0 <HAL_ADC_Start_DMA+0x1d4>)
 8004b10:	641a      	str	r2, [r3, #64]	; 0x40
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	4a33      	ldr	r2, [pc, #204]	; (8004be4 <HAL_ADC_Start_DMA+0x1d8>)
 8004b18:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004b32:	605a      	str	r2, [r3, #4]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b42:	609a      	str	r2, [r3, #8]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	334c      	adds	r3, #76	; 0x4c
 8004b4e:	4619      	mov	r1, r3
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f000 fcb4 	bl	80054c0 <HAL_DMA_Start_IT>
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f003 031f 	and.w	r3, r3, #31
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10f      	bne.n	8004b84 <HAL_ADC_Start_DMA+0x178>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d129      	bne.n	8004bc6 <HAL_ADC_Start_DMA+0x1ba>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b80:	609a      	str	r2, [r3, #8]
 8004b82:	e020      	b.n	8004bc6 <HAL_ADC_Start_DMA+0x1ba>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a17      	ldr	r2, [pc, #92]	; (8004be8 <HAL_ADC_Start_DMA+0x1dc>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d11b      	bne.n	8004bc6 <HAL_ADC_Start_DMA+0x1ba>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d114      	bne.n	8004bc6 <HAL_ADC_Start_DMA+0x1ba>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004baa:	609a      	str	r2, [r3, #8]
 8004bac:	e00b      	b.n	8004bc6 <HAL_ADC_Start_DMA+0x1ba>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	f043 0210 	orr.w	r2, r3, #16
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	641a      	str	r2, [r3, #64]	; 0x40
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbe:	f043 0201 	orr.w	r2, r3, #1
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	645a      	str	r2, [r3, #68]	; 0x44
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	20000014 	.word	0x20000014
 8004bd4:	431bde83 	.word	0x431bde83
 8004bd8:	40012300 	.word	0x40012300
 8004bdc:	08005065 	.word	0x08005065
 8004be0:	0800511f 	.word	0x0800511f
 8004be4:	0800513b 	.word	0x0800513b
 8004be8:	40012000 	.word	0x40012000

08004bec <HAL_ADC_ConvCpltCallback>:
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_ADC_ConvHalfCpltCallback>:
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_ADC_ErrorCallback>:
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_ADC_ConfigChannel>:
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
 8004c32:	2300      	movs	r3, #0
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_ADC_ConfigChannel+0x1c>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e105      	b.n	8004e50 <HAL_ADC_ConfigChannel+0x228>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b09      	cmp	r3, #9
 8004c52:	d925      	bls.n	8004ca0 <HAL_ADC_ConfigChannel+0x78>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68d9      	ldr	r1, [r3, #12]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	4613      	mov	r3, r2
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	4413      	add	r3, r2
 8004c68:	3b1e      	subs	r3, #30
 8004c6a:	2207      	movs	r2, #7
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	43da      	mvns	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	400a      	ands	r2, r1
 8004c78:	60da      	str	r2, [r3, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68d9      	ldr	r1, [r3, #12]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	4403      	add	r3, r0
 8004c92:	3b1e      	subs	r3, #30
 8004c94:	409a      	lsls	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	60da      	str	r2, [r3, #12]
 8004c9e:	e022      	b.n	8004ce6 <HAL_ADC_ConfigChannel+0xbe>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6919      	ldr	r1, [r3, #16]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	4613      	mov	r3, r2
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	4413      	add	r3, r2
 8004cb4:	2207      	movs	r2, #7
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	43da      	mvns	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	400a      	ands	r2, r1
 8004cc2:	611a      	str	r2, [r3, #16]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6919      	ldr	r1, [r3, #16]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	4403      	add	r3, r0
 8004cdc:	409a      	lsls	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	611a      	str	r2, [r3, #16]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2b06      	cmp	r3, #6
 8004cec:	d824      	bhi.n	8004d38 <HAL_ADC_ConfigChannel+0x110>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3b05      	subs	r3, #5
 8004d00:	221f      	movs	r2, #31
 8004d02:	fa02 f303 	lsl.w	r3, r2, r3
 8004d06:	43da      	mvns	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	400a      	ands	r2, r1
 8004d0e:	635a      	str	r2, [r3, #52]	; 0x34
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	3b05      	subs	r3, #5
 8004d2a:	fa00 f203 	lsl.w	r2, r0, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	635a      	str	r2, [r3, #52]	; 0x34
 8004d36:	e04c      	b.n	8004dd2 <HAL_ADC_ConfigChannel+0x1aa>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b0c      	cmp	r3, #12
 8004d3e:	d824      	bhi.n	8004d8a <HAL_ADC_ConfigChannel+0x162>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	3b23      	subs	r3, #35	; 0x23
 8004d52:	221f      	movs	r2, #31
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	43da      	mvns	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	400a      	ands	r2, r1
 8004d60:	631a      	str	r2, [r3, #48]	; 0x30
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	4618      	mov	r0, r3
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	3b23      	subs	r3, #35	; 0x23
 8004d7c:	fa00 f203 	lsl.w	r2, r0, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30
 8004d88:	e023      	b.n	8004dd2 <HAL_ADC_ConfigChannel+0x1aa>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	3b41      	subs	r3, #65	; 0x41
 8004d9c:	221f      	movs	r2, #31
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	43da      	mvns	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	400a      	ands	r2, r1
 8004daa:	62da      	str	r2, [r3, #44]	; 0x2c
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	4618      	mov	r0, r3
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	3b41      	subs	r3, #65	; 0x41
 8004dc6:	fa00 f203 	lsl.w	r2, r0, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004dd2:	4b22      	ldr	r3, [pc, #136]	; (8004e5c <HAL_ADC_ConfigChannel+0x234>)
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a21      	ldr	r2, [pc, #132]	; (8004e60 <HAL_ADC_ConfigChannel+0x238>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d109      	bne.n	8004df4 <HAL_ADC_ConfigChannel+0x1cc>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b12      	cmp	r3, #18
 8004de6:	d105      	bne.n	8004df4 <HAL_ADC_ConfigChannel+0x1cc>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	605a      	str	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a19      	ldr	r2, [pc, #100]	; (8004e60 <HAL_ADC_ConfigChannel+0x238>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d123      	bne.n	8004e46 <HAL_ADC_ConfigChannel+0x21e>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b10      	cmp	r3, #16
 8004e04:	d003      	beq.n	8004e0e <HAL_ADC_ConfigChannel+0x1e6>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b11      	cmp	r3, #17
 8004e0c:	d11b      	bne.n	8004e46 <HAL_ADC_ConfigChannel+0x21e>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	605a      	str	r2, [r3, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b10      	cmp	r3, #16
 8004e20:	d111      	bne.n	8004e46 <HAL_ADC_ConfigChannel+0x21e>
 8004e22:	4b10      	ldr	r3, [pc, #64]	; (8004e64 <HAL_ADC_ConfigChannel+0x23c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a10      	ldr	r2, [pc, #64]	; (8004e68 <HAL_ADC_ConfigChannel+0x240>)
 8004e28:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2c:	0c9a      	lsrs	r2, r3, #18
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	60bb      	str	r3, [r7, #8]
 8004e38:	e002      	b.n	8004e40 <HAL_ADC_ConfigChannel+0x218>
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	60bb      	str	r3, [r7, #8]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f9      	bne.n	8004e3a <HAL_ADC_ConfigChannel+0x212>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e4e:	2300      	movs	r3, #0
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	40012300 	.word	0x40012300
 8004e60:	40012000 	.word	0x40012000
 8004e64:	20000014 	.word	0x20000014
 8004e68:	431bde83 	.word	0x431bde83

08004e6c <ADC_Init>:
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	4b79      	ldr	r3, [pc, #484]	; (800505c <ADC_Init+0x1f0>)
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	605a      	str	r2, [r3, #4]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	605a      	str	r2, [r3, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ea0:	605a      	str	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6859      	ldr	r1, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	021a      	lsls	r2, r3, #8
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004ec4:	605a      	str	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6859      	ldr	r1, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	605a      	str	r2, [r3, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ee6:	609a      	str	r2, [r3, #8]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6899      	ldr	r1, [r3, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	609a      	str	r2, [r3, #8]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efe:	4a58      	ldr	r2, [pc, #352]	; (8005060 <ADC_Init+0x1f4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d022      	beq.n	8004f4a <ADC_Init+0xde>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f12:	609a      	str	r2, [r3, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6899      	ldr	r1, [r3, #8]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	609a      	str	r2, [r3, #8]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f34:	609a      	str	r2, [r3, #8]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6899      	ldr	r1, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	609a      	str	r2, [r3, #8]
 8004f48:	e00f      	b.n	8004f6a <ADC_Init+0xfe>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f58:	609a      	str	r2, [r3, #8]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f68:	609a      	str	r2, [r3, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0202 	bic.w	r2, r2, #2
 8004f78:	609a      	str	r2, [r3, #8]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6899      	ldr	r1, [r3, #8]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	7e1b      	ldrb	r3, [r3, #24]
 8004f84:	005a      	lsls	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	609a      	str	r2, [r3, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d01b      	beq.n	8004fd0 <ADC_Init+0x164>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fa6:	605a      	str	r2, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004fb6:	605a      	str	r2, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6859      	ldr	r1, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	035a      	lsls	r2, r3, #13
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	605a      	str	r2, [r3, #4]
 8004fce:	e007      	b.n	8004fe0 <ADC_Init+0x174>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fde:	605a      	str	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004fee:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	051a      	lsls	r2, r3, #20
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	62da      	str	r2, [r3, #44]	; 0x2c
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005014:	609a      	str	r2, [r3, #8]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6899      	ldr	r1, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005022:	025a      	lsls	r2, r3, #9
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	609a      	str	r2, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800503a:	609a      	str	r2, [r3, #8]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6899      	ldr	r1, [r3, #8]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	029a      	lsls	r2, r3, #10
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	609a      	str	r2, [r3, #8]
 8005050:	bf00      	nop
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	40012300 	.word	0x40012300
 8005060:	0f000001 	.word	0x0f000001

08005064 <ADC_DMAConvCplt>:
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800507a:	2b00      	cmp	r3, #0
 800507c:	d13c      	bne.n	80050f8 <ADC_DMAConvCplt+0x94>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	641a      	str	r2, [r3, #64]	; 0x40
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d12b      	bne.n	80050f0 <ADC_DMAConvCplt+0x8c>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	7e1b      	ldrb	r3, [r3, #24]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d127      	bne.n	80050f0 <ADC_DMAConvCplt+0x8c>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d006      	beq.n	80050bc <ADC_DMAConvCplt+0x58>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d119      	bne.n	80050f0 <ADC_DMAConvCplt+0x8c>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0220 	bic.w	r2, r2, #32
 80050ca:	605a      	str	r2, [r3, #4]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	641a      	str	r2, [r3, #64]	; 0x40
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d105      	bne.n	80050f0 <ADC_DMAConvCplt+0x8c>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	f043 0201 	orr.w	r2, r3, #1
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	641a      	str	r2, [r3, #64]	; 0x40
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f7ff fd7b 	bl	8004bec <HAL_ADC_ConvCpltCallback>
 80050f6:	e00e      	b.n	8005116 <ADC_DMAConvCplt+0xb2>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	f003 0310 	and.w	r3, r3, #16
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <ADC_DMAConvCplt+0xa8>
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff fd85 	bl	8004c14 <HAL_ADC_ErrorCallback>
 800510a:	e004      	b.n	8005116 <ADC_DMAConvCplt+0xb2>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	4798      	blx	r3
 8005116:	bf00      	nop
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <ADC_DMAHalfConvCplt>:
 800511e:	b580      	push	{r7, lr}
 8005120:	b084      	sub	sp, #16
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f7ff fd67 	bl	8004c00 <HAL_ADC_ConvHalfCpltCallback>
 8005132:	bf00      	nop
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <ADC_DMAError>:
 800513a:	b580      	push	{r7, lr}
 800513c:	b084      	sub	sp, #16
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2240      	movs	r2, #64	; 0x40
 800514c:	641a      	str	r2, [r3, #64]	; 0x40
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005152:	f043 0204 	orr.w	r2, r3, #4
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	645a      	str	r2, [r3, #68]	; 0x44
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7ff fd5a 	bl	8004c14 <HAL_ADC_ErrorCallback>
 8005160:	bf00      	nop
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <__NVIC_SetPriorityGrouping>:
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	4b0c      	ldr	r3, [pc, #48]	; (80051ac <__NVIC_SetPriorityGrouping+0x44>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	60bb      	str	r3, [r7, #8]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005184:	4013      	ands	r3, r2
 8005186:	60bb      	str	r3, [r7, #8]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	021a      	lsls	r2, r3, #8
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4313      	orrs	r3, r2
 8005190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	4a04      	ldr	r2, [pc, #16]	; (80051ac <__NVIC_SetPriorityGrouping+0x44>)
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	60d3      	str	r3, [r2, #12]
 80051a0:	bf00      	nop
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	e000ed00 	.word	0xe000ed00

080051b0 <__NVIC_GetPriorityGrouping>:
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	4b04      	ldr	r3, [pc, #16]	; (80051c8 <__NVIC_GetPriorityGrouping+0x18>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	0a1b      	lsrs	r3, r3, #8
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	4618      	mov	r0, r3
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	e000ed00 	.word	0xe000ed00

080051cc <__NVIC_EnableIRQ>:
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	71fb      	strb	r3, [r7, #7]
 80051d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	db0b      	blt.n	80051f6 <__NVIC_EnableIRQ+0x2a>
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	f003 021f 	and.w	r2, r3, #31
 80051e4:	4907      	ldr	r1, [pc, #28]	; (8005204 <__NVIC_EnableIRQ+0x38>)
 80051e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	2001      	movs	r0, #1
 80051ee:	fa00 f202 	lsl.w	r2, r0, r2
 80051f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	e000e100 	.word	0xe000e100

08005208 <__NVIC_SetPriority>:
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	4603      	mov	r3, r0
 8005210:	6039      	str	r1, [r7, #0]
 8005212:	71fb      	strb	r3, [r7, #7]
 8005214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005218:	2b00      	cmp	r3, #0
 800521a:	db0a      	blt.n	8005232 <__NVIC_SetPriority+0x2a>
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	b2da      	uxtb	r2, r3
 8005220:	490c      	ldr	r1, [pc, #48]	; (8005254 <__NVIC_SetPriority+0x4c>)
 8005222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005226:	0112      	lsls	r2, r2, #4
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	440b      	add	r3, r1
 800522c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8005230:	e00a      	b.n	8005248 <__NVIC_SetPriority+0x40>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	b2da      	uxtb	r2, r3
 8005236:	4908      	ldr	r1, [pc, #32]	; (8005258 <__NVIC_SetPriority+0x50>)
 8005238:	79fb      	ldrb	r3, [r7, #7]
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	3b04      	subs	r3, #4
 8005240:	0112      	lsls	r2, r2, #4
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	440b      	add	r3, r1
 8005246:	761a      	strb	r2, [r3, #24]
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	e000e100 	.word	0xe000e100
 8005258:	e000ed00 	.word	0xe000ed00

0800525c <NVIC_EncodePriority>:
 800525c:	b480      	push	{r7}
 800525e:	b089      	sub	sp, #36	; 0x24
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	61fb      	str	r3, [r7, #28]
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f1c3 0307 	rsb	r3, r3, #7
 8005276:	2b04      	cmp	r3, #4
 8005278:	bf28      	it	cs
 800527a:	2304      	movcs	r3, #4
 800527c:	61bb      	str	r3, [r7, #24]
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	3304      	adds	r3, #4
 8005282:	2b06      	cmp	r3, #6
 8005284:	d902      	bls.n	800528c <NVIC_EncodePriority+0x30>
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	3b03      	subs	r3, #3
 800528a:	e000      	b.n	800528e <NVIC_EncodePriority+0x32>
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	f04f 32ff 	mov.w	r2, #4294967295
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	fa02 f303 	lsl.w	r3, r2, r3
 800529a:	43da      	mvns	r2, r3
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	401a      	ands	r2, r3
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	409a      	lsls	r2, r3
 80052a4:	f04f 31ff 	mov.w	r1, #4294967295
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	fa01 f303 	lsl.w	r3, r1, r3
 80052ae:	43d9      	mvns	r1, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	400b      	ands	r3, r1
 80052b4:	4313      	orrs	r3, r2
 80052b6:	4618      	mov	r0, r3
 80052b8:	3724      	adds	r7, #36	; 0x24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
	...

080052c4 <__NVIC_SystemReset>:
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	bf00      	nop
 80052ce:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <__NVIC_SystemReset+0x24>)
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052d6:	4904      	ldr	r1, [pc, #16]	; (80052e8 <__NVIC_SystemReset+0x24>)
 80052d8:	4b04      	ldr	r3, [pc, #16]	; (80052ec <__NVIC_SystemReset+0x28>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	60cb      	str	r3, [r1, #12]
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	bf00      	nop
 80052e4:	bf00      	nop
 80052e6:	e7fd      	b.n	80052e4 <__NVIC_SystemReset+0x20>
 80052e8:	e000ed00 	.word	0xe000ed00
 80052ec:	05fa0004 	.word	0x05fa0004

080052f0 <HAL_NVIC_SetPriorityGrouping>:
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7ff ff35 	bl	8005168 <__NVIC_SetPriorityGrouping>
 80052fe:	bf00      	nop
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <HAL_NVIC_SetPriority>:
 8005306:	b580      	push	{r7, lr}
 8005308:	b086      	sub	sp, #24
 800530a:	af00      	add	r7, sp, #0
 800530c:	4603      	mov	r3, r0
 800530e:	60b9      	str	r1, [r7, #8]
 8005310:	607a      	str	r2, [r7, #4]
 8005312:	73fb      	strb	r3, [r7, #15]
 8005314:	2300      	movs	r3, #0
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	f7ff ff4a 	bl	80051b0 <__NVIC_GetPriorityGrouping>
 800531c:	6178      	str	r0, [r7, #20]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	6978      	ldr	r0, [r7, #20]
 8005324:	f7ff ff9a 	bl	800525c <NVIC_EncodePriority>
 8005328:	4602      	mov	r2, r0
 800532a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800532e:	4611      	mov	r1, r2
 8005330:	4618      	mov	r0, r3
 8005332:	f7ff ff69 	bl	8005208 <__NVIC_SetPriority>
 8005336:	bf00      	nop
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_NVIC_EnableIRQ>:
 800533e:	b580      	push	{r7, lr}
 8005340:	b082      	sub	sp, #8
 8005342:	af00      	add	r7, sp, #0
 8005344:	4603      	mov	r3, r0
 8005346:	71fb      	strb	r3, [r7, #7]
 8005348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff ff3d 	bl	80051cc <__NVIC_EnableIRQ>
 8005352:	bf00      	nop
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <HAL_NVIC_SystemReset>:
 800535a:	b580      	push	{r7, lr}
 800535c:	af00      	add	r7, sp, #0
 800535e:	f7ff ffb1 	bl	80052c4 <__NVIC_SystemReset>
	...

08005364 <HAL_DMA_Init>:
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	2300      	movs	r3, #0
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	f7ff fad8 	bl	8004924 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_DMA_Init+0x1c>
 800537c:	2301      	movs	r3, #1
 800537e:	e099      	b.n	80054b4 <HAL_DMA_Init+0x150>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0201 	bic.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	e00f      	b.n	80053c2 <HAL_DMA_Init+0x5e>
 80053a2:	f7ff fabf 	bl	8004924 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b05      	cmp	r3, #5
 80053ae:	d908      	bls.n	80053c2 <HAL_DMA_Init+0x5e>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2220      	movs	r2, #32
 80053b4:	655a      	str	r2, [r3, #84]	; 0x54
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2203      	movs	r2, #3
 80053ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80053be:	2303      	movs	r3, #3
 80053c0:	e078      	b.n	80054b4 <HAL_DMA_Init+0x150>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e8      	bne.n	80053a2 <HAL_DMA_Init+0x3e>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4b38      	ldr	r3, [pc, #224]	; (80054bc <HAL_DMA_Init+0x158>)
 80053dc:	4013      	ands	r3, r2
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	431a      	orrs	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	431a      	orrs	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	4313      	orrs	r3, r2
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	2b04      	cmp	r3, #4
 800541a:	d107      	bne.n	800542c <HAL_DMA_Init+0xc8>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	4313      	orrs	r3, r2
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4313      	orrs	r3, r2
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f023 0307 	bic.w	r3, r3, #7
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	4313      	orrs	r3, r2
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	2b04      	cmp	r3, #4
 8005454:	d117      	bne.n	8005486 <HAL_DMA_Init+0x122>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00e      	beq.n	8005486 <HAL_DMA_Init+0x122>
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fa6f 	bl	800594c <DMA_CheckFifoParam>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <HAL_DMA_Init+0x122>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2240      	movs	r2, #64	; 0x40
 8005478:	655a      	str	r2, [r3, #84]	; 0x54
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005482:	2301      	movs	r3, #1
 8005484:	e016      	b.n	80054b4 <HAL_DMA_Init+0x150>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	615a      	str	r2, [r3, #20]
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fa26 	bl	80058e0 <DMA_CalcBaseAndBitshift>
 8005494:	4603      	mov	r3, r0
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800549c:	223f      	movs	r2, #63	; 0x3f
 800549e:	409a      	lsls	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	609a      	str	r2, [r3, #8]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	655a      	str	r2, [r3, #84]	; 0x54
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80054b2:	2300      	movs	r3, #0
 80054b4:	4618      	mov	r0, r3
 80054b6:	3718      	adds	r7, #24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	f010803f 	.word	0xf010803f

080054c0 <HAL_DMA_Start_IT>:
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	603b      	str	r3, [r7, #0]
 80054ce:	2300      	movs	r3, #0
 80054d0:	75fb      	strb	r3, [r7, #23]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d101      	bne.n	80054e6 <HAL_DMA_Start_IT+0x26>
 80054e2:	2302      	movs	r3, #2
 80054e4:	e040      	b.n	8005568 <HAL_DMA_Start_IT+0xa8>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d12f      	bne.n	800555a <HAL_DMA_Start_IT+0x9a>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2202      	movs	r2, #2
 80054fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	655a      	str	r2, [r3, #84]	; 0x54
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	68b9      	ldr	r1, [r7, #8]
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 f9b8 	bl	8005884 <DMA_SetConfig>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005518:	223f      	movs	r2, #63	; 0x3f
 800551a:	409a      	lsls	r2, r3
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	609a      	str	r2, [r3, #8]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0216 	orr.w	r2, r2, #22
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005534:	2b00      	cmp	r3, #0
 8005536:	d007      	beq.n	8005548 <HAL_DMA_Start_IT+0x88>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0208 	orr.w	r2, r2, #8
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0201 	orr.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	e005      	b.n	8005566 <HAL_DMA_Start_IT+0xa6>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005562:	2302      	movs	r3, #2
 8005564:	75fb      	strb	r3, [r7, #23]
 8005566:	7dfb      	ldrb	r3, [r7, #23]
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_DMA_IRQHandler>:
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	2300      	movs	r3, #0
 800557a:	60bb      	str	r3, [r7, #8]
 800557c:	4b8e      	ldr	r3, [pc, #568]	; (80057b8 <HAL_DMA_IRQHandler+0x248>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a8e      	ldr	r2, [pc, #568]	; (80057bc <HAL_DMA_IRQHandler+0x24c>)
 8005582:	fba2 2303 	umull	r2, r3, r2, r3
 8005586:	0a9b      	lsrs	r3, r3, #10
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800558e:	613b      	str	r3, [r7, #16]
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800559a:	2208      	movs	r2, #8
 800559c:	409a      	lsls	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d01a      	beq.n	80055dc <HAL_DMA_IRQHandler+0x6c>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d013      	beq.n	80055dc <HAL_DMA_IRQHandler+0x6c>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0204 	bic.w	r2, r2, #4
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055c8:	2208      	movs	r2, #8
 80055ca:	409a      	lsls	r2, r3
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	609a      	str	r2, [r3, #8]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d4:	f043 0201 	orr.w	r2, r3, #1
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	655a      	str	r2, [r3, #84]	; 0x54
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e0:	2201      	movs	r2, #1
 80055e2:	409a      	lsls	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4013      	ands	r3, r2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d012      	beq.n	8005612 <HAL_DMA_IRQHandler+0xa2>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00b      	beq.n	8005612 <HAL_DMA_IRQHandler+0xa2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fe:	2201      	movs	r2, #1
 8005600:	409a      	lsls	r2, r3
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	609a      	str	r2, [r3, #8]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560a:	f043 0202 	orr.w	r2, r3, #2
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	655a      	str	r2, [r3, #84]	; 0x54
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005616:	2204      	movs	r2, #4
 8005618:	409a      	lsls	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4013      	ands	r3, r2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d012      	beq.n	8005648 <HAL_DMA_IRQHandler+0xd8>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00b      	beq.n	8005648 <HAL_DMA_IRQHandler+0xd8>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005634:	2204      	movs	r2, #4
 8005636:	409a      	lsls	r2, r3
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	609a      	str	r2, [r3, #8]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005640:	f043 0204 	orr.w	r2, r3, #4
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	655a      	str	r2, [r3, #84]	; 0x54
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800564c:	2210      	movs	r2, #16
 800564e:	409a      	lsls	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4013      	ands	r3, r2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d043      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x170>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d03c      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x170>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800566a:	2210      	movs	r2, #16
 800566c:	409a      	lsls	r2, r3
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	609a      	str	r2, [r3, #8]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d018      	beq.n	80056b2 <HAL_DMA_IRQHandler+0x142>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d108      	bne.n	80056a0 <HAL_DMA_IRQHandler+0x130>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	d024      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x170>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	4798      	blx	r3
 800569e:	e01f      	b.n	80056e0 <HAL_DMA_IRQHandler+0x170>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d01b      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x170>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	4798      	blx	r3
 80056b0:	e016      	b.n	80056e0 <HAL_DMA_IRQHandler+0x170>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d107      	bne.n	80056d0 <HAL_DMA_IRQHandler+0x160>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0208 	bic.w	r2, r2, #8
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x170>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	4798      	blx	r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e4:	2220      	movs	r2, #32
 80056e6:	409a      	lsls	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4013      	ands	r3, r2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 808f 	beq.w	8005810 <HAL_DMA_IRQHandler+0x2a0>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 8087 	beq.w	8005810 <HAL_DMA_IRQHandler+0x2a0>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005706:	2220      	movs	r2, #32
 8005708:	409a      	lsls	r2, r3
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	609a      	str	r2, [r3, #8]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b05      	cmp	r3, #5
 8005718:	d136      	bne.n	8005788 <HAL_DMA_IRQHandler+0x218>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0216 	bic.w	r2, r2, #22
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695a      	ldr	r2, [r3, #20]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005738:	615a      	str	r2, [r3, #20]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	2b00      	cmp	r3, #0
 8005740:	d103      	bne.n	800574a <HAL_DMA_IRQHandler+0x1da>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005746:	2b00      	cmp	r3, #0
 8005748:	d007      	beq.n	800575a <HAL_DMA_IRQHandler+0x1ea>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0208 	bic.w	r2, r2, #8
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800575e:	223f      	movs	r2, #63	; 0x3f
 8005760:	409a      	lsls	r2, r3
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	609a      	str	r2, [r3, #8]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800577a:	2b00      	cmp	r3, #0
 800577c:	d07e      	beq.n	800587c <HAL_DMA_IRQHandler+0x30c>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	4798      	blx	r3
 8005786:	e079      	b.n	800587c <HAL_DMA_IRQHandler+0x30c>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d01d      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x262>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10d      	bne.n	80057c0 <HAL_DMA_IRQHandler+0x250>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d031      	beq.n	8005810 <HAL_DMA_IRQHandler+0x2a0>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	4798      	blx	r3
 80057b4:	e02c      	b.n	8005810 <HAL_DMA_IRQHandler+0x2a0>
 80057b6:	bf00      	nop
 80057b8:	20000014 	.word	0x20000014
 80057bc:	1b4e81b5 	.word	0x1b4e81b5
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d023      	beq.n	8005810 <HAL_DMA_IRQHandler+0x2a0>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	4798      	blx	r3
 80057d0:	e01e      	b.n	8005810 <HAL_DMA_IRQHandler+0x2a0>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10f      	bne.n	8005800 <HAL_DMA_IRQHandler+0x290>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0210 	bic.w	r2, r2, #16
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <HAL_DMA_IRQHandler+0x2a0>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	4798      	blx	r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005814:	2b00      	cmp	r3, #0
 8005816:	d032      	beq.n	800587e <HAL_DMA_IRQHandler+0x30e>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d022      	beq.n	800586a <HAL_DMA_IRQHandler+0x2fa>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2205      	movs	r2, #5
 8005828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0201 	bic.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	3301      	adds	r3, #1
 8005840:	60bb      	str	r3, [r7, #8]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	429a      	cmp	r2, r3
 8005846:	d307      	bcc.n	8005858 <HAL_DMA_IRQHandler+0x2e8>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1f2      	bne.n	800583c <HAL_DMA_IRQHandler+0x2cc>
 8005856:	e000      	b.n	800585a <HAL_DMA_IRQHandler+0x2ea>
 8005858:	bf00      	nop
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d005      	beq.n	800587e <HAL_DMA_IRQHandler+0x30e>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	4798      	blx	r3
 800587a:	e000      	b.n	800587e <HAL_DMA_IRQHandler+0x30e>
 800587c:	bf00      	nop
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <DMA_SetConfig>:
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	603b      	str	r3, [r7, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	605a      	str	r2, [r3, #4]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	2b40      	cmp	r3, #64	; 0x40
 80058b0:	d108      	bne.n	80058c4 <DMA_SetConfig+0x40>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	609a      	str	r2, [r3, #8]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	60da      	str	r2, [r3, #12]
 80058c2:	e007      	b.n	80058d4 <DMA_SetConfig+0x50>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	609a      	str	r2, [r3, #8]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	60da      	str	r2, [r3, #12]
 80058d4:	bf00      	nop
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <DMA_CalcBaseAndBitshift>:
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	3b10      	subs	r3, #16
 80058f0:	4a14      	ldr	r2, [pc, #80]	; (8005944 <DMA_CalcBaseAndBitshift+0x64>)
 80058f2:	fba2 2303 	umull	r2, r3, r2, r3
 80058f6:	091b      	lsrs	r3, r3, #4
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	4a13      	ldr	r2, [pc, #76]	; (8005948 <DMA_CalcBaseAndBitshift+0x68>)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	65da      	str	r2, [r3, #92]	; 0x5c
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b03      	cmp	r3, #3
 800590c:	d909      	bls.n	8005922 <DMA_CalcBaseAndBitshift+0x42>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005916:	f023 0303 	bic.w	r3, r3, #3
 800591a:	1d1a      	adds	r2, r3, #4
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	659a      	str	r2, [r3, #88]	; 0x58
 8005920:	e007      	b.n	8005932 <DMA_CalcBaseAndBitshift+0x52>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800592a:	f023 0303 	bic.w	r3, r3, #3
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	6593      	str	r3, [r2, #88]	; 0x58
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	aaaaaaab 	.word	0xaaaaaaab
 8005948:	080147f4 	.word	0x080147f4

0800594c <DMA_CheckFifoParam>:
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	2300      	movs	r3, #0
 8005956:	73fb      	strb	r3, [r7, #15]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595c:	60bb      	str	r3, [r7, #8]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d11f      	bne.n	80059a6 <DMA_CheckFifoParam+0x5a>
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b03      	cmp	r3, #3
 800596a:	d856      	bhi.n	8005a1a <DMA_CheckFifoParam+0xce>
 800596c:	a201      	add	r2, pc, #4	; (adr r2, 8005974 <DMA_CheckFifoParam+0x28>)
 800596e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005972:	bf00      	nop
 8005974:	08005985 	.word	0x08005985
 8005978:	08005997 	.word	0x08005997
 800597c:	08005985 	.word	0x08005985
 8005980:	08005a1b 	.word	0x08005a1b
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d046      	beq.n	8005a1e <DMA_CheckFifoParam+0xd2>
 8005990:	2301      	movs	r3, #1
 8005992:	73fb      	strb	r3, [r7, #15]
 8005994:	e043      	b.n	8005a1e <DMA_CheckFifoParam+0xd2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800599e:	d140      	bne.n	8005a22 <DMA_CheckFifoParam+0xd6>
 80059a0:	2301      	movs	r3, #1
 80059a2:	73fb      	strb	r3, [r7, #15]
 80059a4:	e03d      	b.n	8005a22 <DMA_CheckFifoParam+0xd6>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ae:	d121      	bne.n	80059f4 <DMA_CheckFifoParam+0xa8>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d837      	bhi.n	8005a26 <DMA_CheckFifoParam+0xda>
 80059b6:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <DMA_CheckFifoParam+0x70>)
 80059b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059bc:	080059cd 	.word	0x080059cd
 80059c0:	080059d3 	.word	0x080059d3
 80059c4:	080059cd 	.word	0x080059cd
 80059c8:	080059e5 	.word	0x080059e5
 80059cc:	2301      	movs	r3, #1
 80059ce:	73fb      	strb	r3, [r7, #15]
 80059d0:	e030      	b.n	8005a34 <DMA_CheckFifoParam+0xe8>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d025      	beq.n	8005a2a <DMA_CheckFifoParam+0xde>
 80059de:	2301      	movs	r3, #1
 80059e0:	73fb      	strb	r3, [r7, #15]
 80059e2:	e022      	b.n	8005a2a <DMA_CheckFifoParam+0xde>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059ec:	d11f      	bne.n	8005a2e <DMA_CheckFifoParam+0xe2>
 80059ee:	2301      	movs	r3, #1
 80059f0:	73fb      	strb	r3, [r7, #15]
 80059f2:	e01c      	b.n	8005a2e <DMA_CheckFifoParam+0xe2>
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d903      	bls.n	8005a02 <DMA_CheckFifoParam+0xb6>
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b03      	cmp	r3, #3
 80059fe:	d003      	beq.n	8005a08 <DMA_CheckFifoParam+0xbc>
 8005a00:	e018      	b.n	8005a34 <DMA_CheckFifoParam+0xe8>
 8005a02:	2301      	movs	r3, #1
 8005a04:	73fb      	strb	r3, [r7, #15]
 8005a06:	e015      	b.n	8005a34 <DMA_CheckFifoParam+0xe8>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00e      	beq.n	8005a32 <DMA_CheckFifoParam+0xe6>
 8005a14:	2301      	movs	r3, #1
 8005a16:	73fb      	strb	r3, [r7, #15]
 8005a18:	e00b      	b.n	8005a32 <DMA_CheckFifoParam+0xe6>
 8005a1a:	bf00      	nop
 8005a1c:	e00a      	b.n	8005a34 <DMA_CheckFifoParam+0xe8>
 8005a1e:	bf00      	nop
 8005a20:	e008      	b.n	8005a34 <DMA_CheckFifoParam+0xe8>
 8005a22:	bf00      	nop
 8005a24:	e006      	b.n	8005a34 <DMA_CheckFifoParam+0xe8>
 8005a26:	bf00      	nop
 8005a28:	e004      	b.n	8005a34 <DMA_CheckFifoParam+0xe8>
 8005a2a:	bf00      	nop
 8005a2c:	e002      	b.n	8005a34 <DMA_CheckFifoParam+0xe8>
 8005a2e:	bf00      	nop
 8005a30:	e000      	b.n	8005a34 <DMA_CheckFifoParam+0xe8>
 8005a32:	bf00      	nop
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
 8005a36:	4618      	mov	r0, r3
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop

08005a44 <HAL_GPIO_Init>:
 8005a44:	b480      	push	{r7}
 8005a46:	b089      	sub	sp, #36	; 0x24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
 8005a4e:	2300      	movs	r3, #0
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	2300      	movs	r3, #0
 8005a54:	613b      	str	r3, [r7, #16]
 8005a56:	2300      	movs	r3, #0
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	61fb      	str	r3, [r7, #28]
 8005a5e:	e159      	b.n	8005d14 <HAL_GPIO_Init+0x2d0>
 8005a60:	2201      	movs	r2, #1
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	617b      	str	r3, [r7, #20]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	4013      	ands	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	f040 8148 	bne.w	8005d0e <HAL_GPIO_Init+0x2ca>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d005      	beq.n	8005a96 <HAL_GPIO_Init+0x52>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d130      	bne.n	8005af8 <HAL_GPIO_Init+0xb4>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	61bb      	str	r3, [r7, #24]
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	2203      	movs	r2, #3
 8005aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa6:	43db      	mvns	r3, r3
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	61bb      	str	r3, [r7, #24]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	61bb      	str	r3, [r7, #24]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	609a      	str	r2, [r3, #8]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	61bb      	str	r3, [r7, #24]
 8005acc:	2201      	movs	r2, #1
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad4:	43db      	mvns	r3, r3
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	091b      	lsrs	r3, r3, #4
 8005ae2:	f003 0201 	and.w	r2, r3, #1
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	605a      	str	r2, [r3, #4]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f003 0303 	and.w	r3, r3, #3
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d017      	beq.n	8005b34 <HAL_GPIO_Init+0xf0>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	61bb      	str	r3, [r7, #24]
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	2203      	movs	r2, #3
 8005b10:	fa02 f303 	lsl.w	r3, r2, r3
 8005b14:	43db      	mvns	r3, r3
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	61bb      	str	r3, [r7, #24]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	fa02 f303 	lsl.w	r3, r2, r3
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	60da      	str	r2, [r3, #12]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f003 0303 	and.w	r3, r3, #3
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d123      	bne.n	8005b88 <HAL_GPIO_Init+0x144>
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	08da      	lsrs	r2, r3, #3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	3208      	adds	r2, #8
 8005b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4c:	61bb      	str	r3, [r7, #24]
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	f003 0307 	and.w	r3, r3, #7
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	220f      	movs	r2, #15
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	4013      	ands	r3, r2
 8005b62:	61bb      	str	r3, [r7, #24]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	fa02 f303 	lsl.w	r3, r2, r3
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	61bb      	str	r3, [r7, #24]
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	08da      	lsrs	r2, r3, #3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	3208      	adds	r2, #8
 8005b82:	69b9      	ldr	r1, [r7, #24]
 8005b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	61bb      	str	r3, [r7, #24]
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	2203      	movs	r2, #3
 8005b94:	fa02 f303 	lsl.w	r3, r2, r3
 8005b98:	43db      	mvns	r3, r3
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	61bb      	str	r3, [r7, #24]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f003 0203 	and.w	r2, r3, #3
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	61bb      	str	r3, [r7, #24]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 80a2 	beq.w	8005d0e <HAL_GPIO_Init+0x2ca>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	4b57      	ldr	r3, [pc, #348]	; (8005d2c <HAL_GPIO_Init+0x2e8>)
 8005bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd2:	4a56      	ldr	r2, [pc, #344]	; (8005d2c <HAL_GPIO_Init+0x2e8>)
 8005bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8005bda:	4b54      	ldr	r3, [pc, #336]	; (8005d2c <HAL_GPIO_Init+0x2e8>)
 8005bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4a52      	ldr	r2, [pc, #328]	; (8005d30 <HAL_GPIO_Init+0x2ec>)
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	089b      	lsrs	r3, r3, #2
 8005bec:	3302      	adds	r3, #2
 8005bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf2:	61bb      	str	r3, [r7, #24]
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	f003 0303 	and.w	r3, r3, #3
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	220f      	movs	r2, #15
 8005bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005c02:	43db      	mvns	r3, r3
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	4013      	ands	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a49      	ldr	r2, [pc, #292]	; (8005d34 <HAL_GPIO_Init+0x2f0>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d019      	beq.n	8005c46 <HAL_GPIO_Init+0x202>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a48      	ldr	r2, [pc, #288]	; (8005d38 <HAL_GPIO_Init+0x2f4>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d013      	beq.n	8005c42 <HAL_GPIO_Init+0x1fe>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a47      	ldr	r2, [pc, #284]	; (8005d3c <HAL_GPIO_Init+0x2f8>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00d      	beq.n	8005c3e <HAL_GPIO_Init+0x1fa>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a46      	ldr	r2, [pc, #280]	; (8005d40 <HAL_GPIO_Init+0x2fc>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d007      	beq.n	8005c3a <HAL_GPIO_Init+0x1f6>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a45      	ldr	r2, [pc, #276]	; (8005d44 <HAL_GPIO_Init+0x300>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d101      	bne.n	8005c36 <HAL_GPIO_Init+0x1f2>
 8005c32:	2304      	movs	r3, #4
 8005c34:	e008      	b.n	8005c48 <HAL_GPIO_Init+0x204>
 8005c36:	2307      	movs	r3, #7
 8005c38:	e006      	b.n	8005c48 <HAL_GPIO_Init+0x204>
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e004      	b.n	8005c48 <HAL_GPIO_Init+0x204>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e002      	b.n	8005c48 <HAL_GPIO_Init+0x204>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <HAL_GPIO_Init+0x204>
 8005c46:	2300      	movs	r3, #0
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	f002 0203 	and.w	r2, r2, #3
 8005c4e:	0092      	lsls	r2, r2, #2
 8005c50:	4093      	lsls	r3, r2
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	61bb      	str	r3, [r7, #24]
 8005c58:	4935      	ldr	r1, [pc, #212]	; (8005d30 <HAL_GPIO_Init+0x2ec>)
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	089b      	lsrs	r3, r3, #2
 8005c5e:	3302      	adds	r3, #2
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005c66:	4b38      	ldr	r3, [pc, #224]	; (8005d48 <HAL_GPIO_Init+0x304>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	61bb      	str	r3, [r7, #24]
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	43db      	mvns	r3, r3
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	4013      	ands	r3, r2
 8005c74:	61bb      	str	r3, [r7, #24]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_GPIO_Init+0x246>
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	61bb      	str	r3, [r7, #24]
 8005c8a:	4a2f      	ldr	r2, [pc, #188]	; (8005d48 <HAL_GPIO_Init+0x304>)
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	6093      	str	r3, [r2, #8]
 8005c90:	4b2d      	ldr	r3, [pc, #180]	; (8005d48 <HAL_GPIO_Init+0x304>)
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	61bb      	str	r3, [r7, #24]
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	43db      	mvns	r3, r3
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	61bb      	str	r3, [r7, #24]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <HAL_GPIO_Init+0x270>
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	61bb      	str	r3, [r7, #24]
 8005cb4:	4a24      	ldr	r2, [pc, #144]	; (8005d48 <HAL_GPIO_Init+0x304>)
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	60d3      	str	r3, [r2, #12]
 8005cba:	4b23      	ldr	r3, [pc, #140]	; (8005d48 <HAL_GPIO_Init+0x304>)
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	61bb      	str	r3, [r7, #24]
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	43db      	mvns	r3, r3
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	61bb      	str	r3, [r7, #24]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_GPIO_Init+0x29a>
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	61bb      	str	r3, [r7, #24]
 8005cde:	4a1a      	ldr	r2, [pc, #104]	; (8005d48 <HAL_GPIO_Init+0x304>)
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	6053      	str	r3, [r2, #4]
 8005ce4:	4b18      	ldr	r3, [pc, #96]	; (8005d48 <HAL_GPIO_Init+0x304>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	61bb      	str	r3, [r7, #24]
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	43db      	mvns	r3, r3
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	61bb      	str	r3, [r7, #24]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <HAL_GPIO_Init+0x2c4>
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	61bb      	str	r3, [r7, #24]
 8005d08:	4a0f      	ldr	r2, [pc, #60]	; (8005d48 <HAL_GPIO_Init+0x304>)
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	3301      	adds	r3, #1
 8005d12:	61fb      	str	r3, [r7, #28]
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	2b0f      	cmp	r3, #15
 8005d18:	f67f aea2 	bls.w	8005a60 <HAL_GPIO_Init+0x1c>
 8005d1c:	bf00      	nop
 8005d1e:	bf00      	nop
 8005d20:	3724      	adds	r7, #36	; 0x24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	40023800 	.word	0x40023800
 8005d30:	40013800 	.word	0x40013800
 8005d34:	40020000 	.word	0x40020000
 8005d38:	40020400 	.word	0x40020400
 8005d3c:	40020800 	.word	0x40020800
 8005d40:	40020c00 	.word	0x40020c00
 8005d44:	40021000 	.word	0x40021000
 8005d48:	40013c00 	.word	0x40013c00

08005d4c <HAL_GPIO_ReadPin>:
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	460b      	mov	r3, r1
 8005d56:	807b      	strh	r3, [r7, #2]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	887b      	ldrh	r3, [r7, #2]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <HAL_GPIO_ReadPin+0x1e>
 8005d64:	2301      	movs	r3, #1
 8005d66:	73fb      	strb	r3, [r7, #15]
 8005d68:	e001      	b.n	8005d6e <HAL_GPIO_ReadPin+0x22>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	73fb      	strb	r3, [r7, #15]
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
 8005d70:	4618      	mov	r0, r3
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_GPIO_WritePin>:
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	807b      	strh	r3, [r7, #2]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	707b      	strb	r3, [r7, #1]
 8005d8c:	787b      	ldrb	r3, [r7, #1]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_GPIO_WritePin+0x1e>
 8005d92:	887a      	ldrh	r2, [r7, #2]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	619a      	str	r2, [r3, #24]
 8005d98:	e003      	b.n	8005da2 <HAL_GPIO_WritePin+0x26>
 8005d9a:	887b      	ldrh	r3, [r7, #2]
 8005d9c:	041a      	lsls	r2, r3, #16
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	619a      	str	r2, [r3, #24]
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <HAL_GPIO_TogglePin>:
 8005dae:	b480      	push	{r7}
 8005db0:	b085      	sub	sp, #20
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	460b      	mov	r3, r1
 8005db8:	807b      	strh	r3, [r7, #2]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	887a      	ldrh	r2, [r7, #2]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	041a      	lsls	r2, r3, #16
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	43d9      	mvns	r1, r3
 8005dcc:	887b      	ldrh	r3, [r7, #2]
 8005dce:	400b      	ands	r3, r1
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	619a      	str	r2, [r3, #24]
 8005dd6:	bf00      	nop
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
	...

08005de4 <HAL_GPIO_EXTI_IRQHandler>:
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	4603      	mov	r3, r0
 8005dec:	80fb      	strh	r3, [r7, #6]
 8005dee:	4b08      	ldr	r3, [pc, #32]	; (8005e10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005df0:	695a      	ldr	r2, [r3, #20]
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	4013      	ands	r3, r2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d006      	beq.n	8005e08 <HAL_GPIO_EXTI_IRQHandler+0x24>
 8005dfa:	4a05      	ldr	r2, [pc, #20]	; (8005e10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005dfc:	88fb      	ldrh	r3, [r7, #6]
 8005dfe:	6153      	str	r3, [r2, #20]
 8005e00:	88fb      	ldrh	r3, [r7, #6]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 f806 	bl	8005e14 <HAL_GPIO_EXTI_Callback>
 8005e08:	bf00      	nop
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	40013c00 	.word	0x40013c00

08005e14 <HAL_GPIO_EXTI_Callback>:
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	80fb      	strh	r3, [r7, #6]
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
	...

08005e2c <HAL_I2C_Init>:
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_I2C_Init+0x12>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e12b      	b.n	8006096 <HAL_I2C_Init+0x26a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d106      	bne.n	8005e58 <HAL_I2C_Init+0x2c>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7fc f8c6 	bl	8001fe4 <HAL_I2C_MspInit>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2224      	movs	r2, #36	; 0x24
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0201 	bic.w	r2, r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	f003 faec 	bl	800946c <HAL_RCC_GetPCLK1Freq>
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	4a81      	ldr	r2, [pc, #516]	; (80060a0 <HAL_I2C_Init+0x274>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d807      	bhi.n	8005eb0 <HAL_I2C_Init+0x84>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4a80      	ldr	r2, [pc, #512]	; (80060a4 <HAL_I2C_Init+0x278>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	bf94      	ite	ls
 8005ea8:	2301      	movls	r3, #1
 8005eaa:	2300      	movhi	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	e006      	b.n	8005ebe <HAL_I2C_Init+0x92>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4a7d      	ldr	r2, [pc, #500]	; (80060a8 <HAL_I2C_Init+0x27c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	bf94      	ite	ls
 8005eb8:	2301      	movls	r3, #1
 8005eba:	2300      	movhi	r3, #0
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <HAL_I2C_Init+0x9a>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e0e7      	b.n	8006096 <HAL_I2C_Init+0x26a>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4a78      	ldr	r2, [pc, #480]	; (80060ac <HAL_I2C_Init+0x280>)
 8005eca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ece:	0c9b      	lsrs	r3, r3, #18
 8005ed0:	60bb      	str	r3, [r7, #8]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	605a      	str	r2, [r3, #4]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	4a6a      	ldr	r2, [pc, #424]	; (80060a0 <HAL_I2C_Init+0x274>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d802      	bhi.n	8005f00 <HAL_I2C_Init+0xd4>
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	3301      	adds	r3, #1
 8005efe:	e009      	b.n	8005f14 <HAL_I2C_Init+0xe8>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005f06:	fb02 f303 	mul.w	r3, r2, r3
 8005f0a:	4a69      	ldr	r2, [pc, #420]	; (80060b0 <HAL_I2C_Init+0x284>)
 8005f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f10:	099b      	lsrs	r3, r3, #6
 8005f12:	3301      	adds	r3, #1
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6812      	ldr	r2, [r2, #0]
 8005f18:	430b      	orrs	r3, r1
 8005f1a:	6213      	str	r3, [r2, #32]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005f26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	495c      	ldr	r1, [pc, #368]	; (80060a0 <HAL_I2C_Init+0x274>)
 8005f30:	428b      	cmp	r3, r1
 8005f32:	d819      	bhi.n	8005f68 <HAL_I2C_Init+0x13c>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	1e59      	subs	r1, r3, #1
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f42:	1c59      	adds	r1, r3, #1
 8005f44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005f48:	400b      	ands	r3, r1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <HAL_I2C_Init+0x138>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	1e59      	subs	r1, r3, #1
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f62:	e051      	b.n	8006008 <HAL_I2C_Init+0x1dc>
 8005f64:	2304      	movs	r3, #4
 8005f66:	e04f      	b.n	8006008 <HAL_I2C_Init+0x1dc>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d111      	bne.n	8005f94 <HAL_I2C_Init+0x168>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	1e58      	subs	r0, r3, #1
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6859      	ldr	r1, [r3, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	440b      	add	r3, r1
 8005f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f82:	3301      	adds	r3, #1
 8005f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	bf0c      	ite	eq
 8005f8c:	2301      	moveq	r3, #1
 8005f8e:	2300      	movne	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	e012      	b.n	8005fba <HAL_I2C_Init+0x18e>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	1e58      	subs	r0, r3, #1
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6859      	ldr	r1, [r3, #4]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	0099      	lsls	r1, r3, #2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005faa:	3301      	adds	r3, #1
 8005fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	bf0c      	ite	eq
 8005fb4:	2301      	moveq	r3, #1
 8005fb6:	2300      	movne	r3, #0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <HAL_I2C_Init+0x196>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e022      	b.n	8006008 <HAL_I2C_Init+0x1dc>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10e      	bne.n	8005fe8 <HAL_I2C_Init+0x1bc>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	1e58      	subs	r0, r3, #1
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6859      	ldr	r1, [r3, #4]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	440b      	add	r3, r1
 8005fd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fdc:	3301      	adds	r3, #1
 8005fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe6:	e00f      	b.n	8006008 <HAL_I2C_Init+0x1dc>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	1e58      	subs	r0, r3, #1
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6859      	ldr	r1, [r3, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	440b      	add	r3, r1
 8005ff6:	0099      	lsls	r1, r3, #2
 8005ff8:	440b      	add	r3, r1
 8005ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ffe:	3301      	adds	r3, #1
 8006000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006008:	6879      	ldr	r1, [r7, #4]
 800600a:	6809      	ldr	r1, [r1, #0]
 800600c:	4313      	orrs	r3, r2
 800600e:	61cb      	str	r3, [r1, #28]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	69da      	ldr	r2, [r3, #28]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	431a      	orrs	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006036:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	6911      	ldr	r1, [r2, #16]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	68d2      	ldr	r2, [r2, #12]
 8006042:	4311      	orrs	r1, r2
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6812      	ldr	r2, [r2, #0]
 8006048:	430b      	orrs	r3, r1
 800604a:	6093      	str	r3, [r2, #8]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	695a      	ldr	r2, [r3, #20]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	430a      	orrs	r2, r1
 8006066:	60da      	str	r2, [r3, #12]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0201 	orr.w	r2, r2, #1
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	641a      	str	r2, [r3, #64]	; 0x40
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2220      	movs	r2, #32
 8006082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	631a      	str	r2, [r3, #48]	; 0x30
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006094:	2300      	movs	r3, #0
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	000186a0 	.word	0x000186a0
 80060a4:	001e847f 	.word	0x001e847f
 80060a8:	003d08ff 	.word	0x003d08ff
 80060ac:	431bde83 	.word	0x431bde83
 80060b0:	10624dd3 	.word	0x10624dd3

080060b4 <HAL_I2C_Master_Transmit>:
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b088      	sub	sp, #32
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	607a      	str	r2, [r7, #4]
 80060be:	461a      	mov	r2, r3
 80060c0:	460b      	mov	r3, r1
 80060c2:	817b      	strh	r3, [r7, #10]
 80060c4:	4613      	mov	r3, r2
 80060c6:	813b      	strh	r3, [r7, #8]
 80060c8:	f7fe fc2c 	bl	8004924 <HAL_GetTick>
 80060cc:	6178      	str	r0, [r7, #20]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b20      	cmp	r3, #32
 80060d8:	f040 80e0 	bne.w	800629c <HAL_I2C_Master_Transmit+0x1e8>
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	2319      	movs	r3, #25
 80060e2:	2201      	movs	r2, #1
 80060e4:	4970      	ldr	r1, [pc, #448]	; (80062a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f001 f8f6 	bl	80072d8 <I2C_WaitOnFlagUntilTimeout>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <HAL_I2C_Master_Transmit+0x42>
 80060f2:	2302      	movs	r3, #2
 80060f4:	e0d3      	b.n	800629e <HAL_I2C_Master_Transmit+0x1ea>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d101      	bne.n	8006104 <HAL_I2C_Master_Transmit+0x50>
 8006100:	2302      	movs	r3, #2
 8006102:	e0cc      	b.n	800629e <HAL_I2C_Master_Transmit+0x1ea>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b01      	cmp	r3, #1
 8006118:	d007      	beq.n	800612a <HAL_I2C_Master_Transmit+0x76>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 0201 	orr.w	r2, r2, #1
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2221      	movs	r2, #33	; 0x21
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2210      	movs	r2, #16
 8006146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	641a      	str	r2, [r3, #64]	; 0x40
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	625a      	str	r2, [r3, #36]	; 0x24
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	893a      	ldrh	r2, [r7, #8]
 800615a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	851a      	strh	r2, [r3, #40]	; 0x28
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4a50      	ldr	r2, [pc, #320]	; (80062ac <HAL_I2C_Master_Transmit+0x1f8>)
 800616a:	62da      	str	r2, [r3, #44]	; 0x2c
 800616c:	8979      	ldrh	r1, [r7, #10]
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	6a3a      	ldr	r2, [r7, #32]
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 fde2 	bl	8006d3c <I2C_MasterRequestWrite>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <HAL_I2C_Master_Transmit+0xce>
 800617e:	2301      	movs	r3, #1
 8006180:	e08d      	b.n	800629e <HAL_I2C_Master_Transmit+0x1ea>
 8006182:	2300      	movs	r3, #0
 8006184:	613b      	str	r3, [r7, #16]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	613b      	str	r3, [r7, #16]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	613b      	str	r3, [r7, #16]
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	e066      	b.n	8006268 <HAL_I2C_Master_Transmit+0x1b4>
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	6a39      	ldr	r1, [r7, #32]
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f001 f970 	bl	8007484 <I2C_WaitOnTXEFlagUntilTimeout>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00d      	beq.n	80061c6 <HAL_I2C_Master_Transmit+0x112>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	d107      	bne.n	80061c2 <HAL_I2C_Master_Transmit+0x10e>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	2301      	movs	r3, #1
 80061c4:	e06b      	b.n	800629e <HAL_I2C_Master_Transmit+0x1ea>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	781a      	ldrb	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	611a      	str	r2, [r3, #16]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	625a      	str	r2, [r3, #36]	; 0x24
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ee:	3b01      	subs	r3, #1
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	851a      	strh	r2, [r3, #40]	; 0x28
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b04      	cmp	r3, #4
 8006202:	d11b      	bne.n	800623c <HAL_I2C_Master_Transmit+0x188>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006208:	2b00      	cmp	r3, #0
 800620a:	d017      	beq.n	800623c <HAL_I2C_Master_Transmit+0x188>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	781a      	ldrb	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	611a      	str	r2, [r3, #16]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	625a      	str	r2, [r3, #36]	; 0x24
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006226:	b29b      	uxth	r3, r3
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006234:	3b01      	subs	r3, #1
 8006236:	b29a      	uxth	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	851a      	strh	r2, [r3, #40]	; 0x28
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	6a39      	ldr	r1, [r7, #32]
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f001 f960 	bl	8007506 <I2C_WaitOnBTFFlagUntilTimeout>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00d      	beq.n	8006268 <HAL_I2C_Master_Transmit+0x1b4>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006250:	2b04      	cmp	r3, #4
 8006252:	d107      	bne.n	8006264 <HAL_I2C_Master_Transmit+0x1b0>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	2301      	movs	r3, #1
 8006266:	e01a      	b.n	800629e <HAL_I2C_Master_Transmit+0x1ea>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800626c:	2b00      	cmp	r3, #0
 800626e:	d194      	bne.n	800619a <HAL_I2C_Master_Transmit+0xe6>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2220      	movs	r2, #32
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006298:	2300      	movs	r3, #0
 800629a:	e000      	b.n	800629e <HAL_I2C_Master_Transmit+0x1ea>
 800629c:	2302      	movs	r3, #2
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	00100002 	.word	0x00100002
 80062ac:	ffff0000 	.word	0xffff0000

080062b0 <HAL_I2C_Master_Receive>:
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08c      	sub	sp, #48	; 0x30
 80062b4:	af02      	add	r7, sp, #8
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	607a      	str	r2, [r7, #4]
 80062ba:	461a      	mov	r2, r3
 80062bc:	460b      	mov	r3, r1
 80062be:	817b      	strh	r3, [r7, #10]
 80062c0:	4613      	mov	r3, r2
 80062c2:	813b      	strh	r3, [r7, #8]
 80062c4:	f7fe fb2e 	bl	8004924 <HAL_GetTick>
 80062c8:	6278      	str	r0, [r7, #36]	; 0x24
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	f040 820b 	bne.w	80066ee <HAL_I2C_Master_Receive+0x43e>
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	2319      	movs	r3, #25
 80062de:	2201      	movs	r2, #1
 80062e0:	497c      	ldr	r1, [pc, #496]	; (80064d4 <HAL_I2C_Master_Receive+0x224>)
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f000 fff8 	bl	80072d8 <I2C_WaitOnFlagUntilTimeout>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <HAL_I2C_Master_Receive+0x42>
 80062ee:	2302      	movs	r3, #2
 80062f0:	e1fe      	b.n	80066f0 <HAL_I2C_Master_Receive+0x440>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d101      	bne.n	8006300 <HAL_I2C_Master_Receive+0x50>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e1f7      	b.n	80066f0 <HAL_I2C_Master_Receive+0x440>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b01      	cmp	r3, #1
 8006314:	d007      	beq.n	8006326 <HAL_I2C_Master_Receive+0x76>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f042 0201 	orr.w	r2, r2, #1
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2222      	movs	r2, #34	; 0x22
 800633a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2210      	movs	r2, #16
 8006342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	641a      	str	r2, [r3, #64]	; 0x40
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	625a      	str	r2, [r3, #36]	; 0x24
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	893a      	ldrh	r2, [r7, #8]
 8006356:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800635c:	b29a      	uxth	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	851a      	strh	r2, [r3, #40]	; 0x28
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	4a5c      	ldr	r2, [pc, #368]	; (80064d8 <HAL_I2C_Master_Receive+0x228>)
 8006366:	62da      	str	r2, [r3, #44]	; 0x2c
 8006368:	8979      	ldrh	r1, [r7, #10]
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 fd66 	bl	8006e40 <I2C_MasterRequestRead>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <HAL_I2C_Master_Receive+0xce>
 800637a:	2301      	movs	r3, #1
 800637c:	e1b8      	b.n	80066f0 <HAL_I2C_Master_Receive+0x440>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006382:	2b00      	cmp	r3, #0
 8006384:	d113      	bne.n	80063ae <HAL_I2C_Master_Receive+0xfe>
 8006386:	2300      	movs	r3, #0
 8006388:	623b      	str	r3, [r7, #32]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	623b      	str	r3, [r7, #32]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	623b      	str	r3, [r7, #32]
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	e18c      	b.n	80066c8 <HAL_I2C_Master_Receive+0x418>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d11b      	bne.n	80063ee <HAL_I2C_Master_Receive+0x13e>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	2300      	movs	r3, #0
 80063c8:	61fb      	str	r3, [r7, #28]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	61fb      	str	r3, [r7, #28]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	61fb      	str	r3, [r7, #28]
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063ea:	601a      	str	r2, [r3, #0]
 80063ec:	e16c      	b.n	80066c8 <HAL_I2C_Master_Receive+0x418>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d11b      	bne.n	800642e <HAL_I2C_Master_Receive+0x17e>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	2300      	movs	r3, #0
 8006418:	61bb      	str	r3, [r7, #24]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	61bb      	str	r3, [r7, #24]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	61bb      	str	r3, [r7, #24]
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	e14c      	b.n	80066c8 <HAL_I2C_Master_Receive+0x418>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	2300      	movs	r3, #0
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	617b      	str	r3, [r7, #20]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	617b      	str	r3, [r7, #20]
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	e138      	b.n	80066c8 <HAL_I2C_Master_Receive+0x418>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800645a:	2b03      	cmp	r3, #3
 800645c:	f200 80f1 	bhi.w	8006642 <HAL_I2C_Master_Receive+0x392>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006464:	2b01      	cmp	r3, #1
 8006466:	d123      	bne.n	80064b0 <HAL_I2C_Master_Receive+0x200>
 8006468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800646a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f001 f88b 	bl	8007588 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <HAL_I2C_Master_Receive+0x1cc>
 8006478:	2301      	movs	r3, #1
 800647a:	e139      	b.n	80066f0 <HAL_I2C_Master_Receive+0x440>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	691a      	ldr	r2, [r3, #16]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	625a      	str	r2, [r3, #36]	; 0x24
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006498:	3b01      	subs	r3, #1
 800649a:	b29a      	uxth	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	851a      	strh	r2, [r3, #40]	; 0x28
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064ae:	e10b      	b.n	80066c8 <HAL_I2C_Master_Receive+0x418>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d14e      	bne.n	8006556 <HAL_I2C_Master_Receive+0x2a6>
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064be:	2200      	movs	r2, #0
 80064c0:	4906      	ldr	r1, [pc, #24]	; (80064dc <HAL_I2C_Master_Receive+0x22c>)
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 ff08 	bl	80072d8 <I2C_WaitOnFlagUntilTimeout>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d008      	beq.n	80064e0 <HAL_I2C_Master_Receive+0x230>
 80064ce:	2301      	movs	r3, #1
 80064d0:	e10e      	b.n	80066f0 <HAL_I2C_Master_Receive+0x440>
 80064d2:	bf00      	nop
 80064d4:	00100002 	.word	0x00100002
 80064d8:	ffff0000 	.word	0xffff0000
 80064dc:	00010004 	.word	0x00010004
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691a      	ldr	r2, [r3, #16]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	b2d2      	uxtb	r2, r2
 80064fc:	701a      	strb	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	1c5a      	adds	r2, r3, #1
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	625a      	str	r2, [r3, #36]	; 0x24
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800650c:	3b01      	subs	r3, #1
 800650e:	b29a      	uxth	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	851a      	strh	r2, [r3, #40]	; 0x28
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006518:	b29b      	uxth	r3, r3
 800651a:	3b01      	subs	r3, #1
 800651c:	b29a      	uxth	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	691a      	ldr	r2, [r3, #16]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	1c5a      	adds	r2, r3, #1
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	625a      	str	r2, [r3, #36]	; 0x24
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800653e:	3b01      	subs	r3, #1
 8006540:	b29a      	uxth	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	851a      	strh	r2, [r3, #40]	; 0x28
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800654a:	b29b      	uxth	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006554:	e0b8      	b.n	80066c8 <HAL_I2C_Master_Receive+0x418>
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	2200      	movs	r2, #0
 800655e:	4966      	ldr	r1, [pc, #408]	; (80066f8 <HAL_I2C_Master_Receive+0x448>)
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 feb9 	bl	80072d8 <I2C_WaitOnFlagUntilTimeout>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d001      	beq.n	8006570 <HAL_I2C_Master_Receive+0x2c0>
 800656c:	2301      	movs	r3, #1
 800656e:	e0bf      	b.n	80066f0 <HAL_I2C_Master_Receive+0x440>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691a      	ldr	r2, [r3, #16]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	701a      	strb	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	1c5a      	adds	r2, r3, #1
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	625a      	str	r2, [r3, #36]	; 0x24
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800659c:	3b01      	subs	r3, #1
 800659e:	b29a      	uxth	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	851a      	strh	r2, [r3, #40]	; 0x28
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	3b01      	subs	r3, #1
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	2200      	movs	r2, #0
 80065ba:	494f      	ldr	r1, [pc, #316]	; (80066f8 <HAL_I2C_Master_Receive+0x448>)
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 fe8b 	bl	80072d8 <I2C_WaitOnFlagUntilTimeout>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <HAL_I2C_Master_Receive+0x31c>
 80065c8:	2301      	movs	r3, #1
 80065ca:	e091      	b.n	80066f0 <HAL_I2C_Master_Receive+0x440>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	691a      	ldr	r2, [r3, #16]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	625a      	str	r2, [r3, #36]	; 0x24
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f8:	3b01      	subs	r3, #1
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	851a      	strh	r2, [r3, #40]	; 0x28
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006604:	b29b      	uxth	r3, r3
 8006606:	3b01      	subs	r3, #1
 8006608:	b29a      	uxth	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	691a      	ldr	r2, [r3, #16]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	b2d2      	uxtb	r2, r2
 800661a:	701a      	strb	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	625a      	str	r2, [r3, #36]	; 0x24
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800662a:	3b01      	subs	r3, #1
 800662c:	b29a      	uxth	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	851a      	strh	r2, [r3, #40]	; 0x28
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006636:	b29b      	uxth	r3, r3
 8006638:	3b01      	subs	r3, #1
 800663a:	b29a      	uxth	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006640:	e042      	b.n	80066c8 <HAL_I2C_Master_Receive+0x418>
 8006642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006644:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 ff9e 	bl	8007588 <I2C_WaitOnRXNEFlagUntilTimeout>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <HAL_I2C_Master_Receive+0x3a6>
 8006652:	2301      	movs	r3, #1
 8006654:	e04c      	b.n	80066f0 <HAL_I2C_Master_Receive+0x440>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	691a      	ldr	r2, [r3, #16]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	b2d2      	uxtb	r2, r2
 8006662:	701a      	strb	r2, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006668:	1c5a      	adds	r2, r3, #1
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	625a      	str	r2, [r3, #36]	; 0x24
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006672:	3b01      	subs	r3, #1
 8006674:	b29a      	uxth	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	851a      	strh	r2, [r3, #40]	; 0x28
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667e:	b29b      	uxth	r3, r3
 8006680:	3b01      	subs	r3, #1
 8006682:	b29a      	uxth	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	f003 0304 	and.w	r3, r3, #4
 8006692:	2b04      	cmp	r3, #4
 8006694:	d118      	bne.n	80066c8 <HAL_I2C_Master_Receive+0x418>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	b2d2      	uxtb	r2, r2
 80066a2:	701a      	strb	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	625a      	str	r2, [r3, #36]	; 0x24
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b2:	3b01      	subs	r3, #1
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	851a      	strh	r2, [r3, #40]	; 0x28
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066be:	b29b      	uxth	r3, r3
 80066c0:	3b01      	subs	r3, #1
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f47f aec2 	bne.w	8006456 <HAL_I2C_Master_Receive+0x1a6>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2220      	movs	r2, #32
 80066d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80066ea:	2300      	movs	r3, #0
 80066ec:	e000      	b.n	80066f0 <HAL_I2C_Master_Receive+0x440>
 80066ee:	2302      	movs	r3, #2
 80066f0:	4618      	mov	r0, r3
 80066f2:	3728      	adds	r7, #40	; 0x28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	00010004 	.word	0x00010004

080066fc <HAL_I2C_Mem_Write>:
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b088      	sub	sp, #32
 8006700:	af02      	add	r7, sp, #8
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	4608      	mov	r0, r1
 8006706:	4611      	mov	r1, r2
 8006708:	461a      	mov	r2, r3
 800670a:	4603      	mov	r3, r0
 800670c:	817b      	strh	r3, [r7, #10]
 800670e:	460b      	mov	r3, r1
 8006710:	813b      	strh	r3, [r7, #8]
 8006712:	4613      	mov	r3, r2
 8006714:	80fb      	strh	r3, [r7, #6]
 8006716:	f7fe f905 	bl	8004924 <HAL_GetTick>
 800671a:	6178      	str	r0, [r7, #20]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b20      	cmp	r3, #32
 8006726:	f040 80d9 	bne.w	80068dc <HAL_I2C_Mem_Write+0x1e0>
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	2319      	movs	r3, #25
 8006730:	2201      	movs	r2, #1
 8006732:	496d      	ldr	r1, [pc, #436]	; (80068e8 <HAL_I2C_Mem_Write+0x1ec>)
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 fdcf 	bl	80072d8 <I2C_WaitOnFlagUntilTimeout>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <HAL_I2C_Mem_Write+0x48>
 8006740:	2302      	movs	r3, #2
 8006742:	e0cc      	b.n	80068de <HAL_I2C_Mem_Write+0x1e2>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800674a:	2b01      	cmp	r3, #1
 800674c:	d101      	bne.n	8006752 <HAL_I2C_Mem_Write+0x56>
 800674e:	2302      	movs	r3, #2
 8006750:	e0c5      	b.n	80068de <HAL_I2C_Mem_Write+0x1e2>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b01      	cmp	r3, #1
 8006766:	d007      	beq.n	8006778 <HAL_I2C_Mem_Write+0x7c>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0201 	orr.w	r2, r2, #1
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2221      	movs	r2, #33	; 0x21
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2240      	movs	r2, #64	; 0x40
 8006794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	641a      	str	r2, [r3, #64]	; 0x40
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6a3a      	ldr	r2, [r7, #32]
 80067a2:	625a      	str	r2, [r3, #36]	; 0x24
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80067a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	851a      	strh	r2, [r3, #40]	; 0x28
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4a4d      	ldr	r2, [pc, #308]	; (80068ec <HAL_I2C_Mem_Write+0x1f0>)
 80067b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80067ba:	88f8      	ldrh	r0, [r7, #6]
 80067bc:	893a      	ldrh	r2, [r7, #8]
 80067be:	8979      	ldrh	r1, [r7, #10]
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	9301      	str	r3, [sp, #4]
 80067c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	4603      	mov	r3, r0
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f000 fc06 	bl	8006fdc <I2C_RequestMemoryWrite>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d052      	beq.n	800687c <HAL_I2C_Mem_Write+0x180>
 80067d6:	2301      	movs	r3, #1
 80067d8:	e081      	b.n	80068de <HAL_I2C_Mem_Write+0x1e2>
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f000 fe50 	bl	8007484 <I2C_WaitOnTXEFlagUntilTimeout>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00d      	beq.n	8006806 <HAL_I2C_Mem_Write+0x10a>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d107      	bne.n	8006802 <HAL_I2C_Mem_Write+0x106>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	2301      	movs	r3, #1
 8006804:	e06b      	b.n	80068de <HAL_I2C_Mem_Write+0x1e2>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	781a      	ldrb	r2, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	611a      	str	r2, [r3, #16]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	625a      	str	r2, [r3, #36]	; 0x24
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006820:	3b01      	subs	r3, #1
 8006822:	b29a      	uxth	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	851a      	strh	r2, [r3, #40]	; 0x28
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682c:	b29b      	uxth	r3, r3
 800682e:	3b01      	subs	r3, #1
 8006830:	b29a      	uxth	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b04      	cmp	r3, #4
 8006842:	d11b      	bne.n	800687c <HAL_I2C_Mem_Write+0x180>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006848:	2b00      	cmp	r3, #0
 800684a:	d017      	beq.n	800687c <HAL_I2C_Mem_Write+0x180>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	781a      	ldrb	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	611a      	str	r2, [r3, #16]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	625a      	str	r2, [r3, #36]	; 0x24
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006866:	3b01      	subs	r3, #1
 8006868:	b29a      	uxth	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	851a      	strh	r2, [r3, #40]	; 0x28
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006872:	b29b      	uxth	r3, r3
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1aa      	bne.n	80067da <HAL_I2C_Mem_Write+0xde>
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 fe3c 	bl	8007506 <I2C_WaitOnBTFFlagUntilTimeout>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00d      	beq.n	80068b0 <HAL_I2C_Mem_Write+0x1b4>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006898:	2b04      	cmp	r3, #4
 800689a:	d107      	bne.n	80068ac <HAL_I2C_Mem_Write+0x1b0>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	2301      	movs	r3, #1
 80068ae:	e016      	b.n	80068de <HAL_I2C_Mem_Write+0x1e2>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2220      	movs	r2, #32
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80068d8:	2300      	movs	r3, #0
 80068da:	e000      	b.n	80068de <HAL_I2C_Mem_Write+0x1e2>
 80068dc:	2302      	movs	r3, #2
 80068de:	4618      	mov	r0, r3
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	00100002 	.word	0x00100002
 80068ec:	ffff0000 	.word	0xffff0000

080068f0 <HAL_I2C_Mem_Read>:
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08c      	sub	sp, #48	; 0x30
 80068f4:	af02      	add	r7, sp, #8
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	4608      	mov	r0, r1
 80068fa:	4611      	mov	r1, r2
 80068fc:	461a      	mov	r2, r3
 80068fe:	4603      	mov	r3, r0
 8006900:	817b      	strh	r3, [r7, #10]
 8006902:	460b      	mov	r3, r1
 8006904:	813b      	strh	r3, [r7, #8]
 8006906:	4613      	mov	r3, r2
 8006908:	80fb      	strh	r3, [r7, #6]
 800690a:	f7fe f80b 	bl	8004924 <HAL_GetTick>
 800690e:	6278      	str	r0, [r7, #36]	; 0x24
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b20      	cmp	r3, #32
 800691a:	f040 8208 	bne.w	8006d2e <HAL_I2C_Mem_Read+0x43e>
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	2319      	movs	r3, #25
 8006924:	2201      	movs	r2, #1
 8006926:	497b      	ldr	r1, [pc, #492]	; (8006b14 <HAL_I2C_Mem_Read+0x224>)
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f000 fcd5 	bl	80072d8 <I2C_WaitOnFlagUntilTimeout>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d001      	beq.n	8006938 <HAL_I2C_Mem_Read+0x48>
 8006934:	2302      	movs	r3, #2
 8006936:	e1fb      	b.n	8006d30 <HAL_I2C_Mem_Read+0x440>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800693e:	2b01      	cmp	r3, #1
 8006940:	d101      	bne.n	8006946 <HAL_I2C_Mem_Read+0x56>
 8006942:	2302      	movs	r3, #2
 8006944:	e1f4      	b.n	8006d30 <HAL_I2C_Mem_Read+0x440>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b01      	cmp	r3, #1
 800695a:	d007      	beq.n	800696c <HAL_I2C_Mem_Read+0x7c>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f042 0201 	orr.w	r2, r2, #1
 800696a:	601a      	str	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2222      	movs	r2, #34	; 0x22
 8006980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2240      	movs	r2, #64	; 0x40
 8006988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	641a      	str	r2, [r3, #64]	; 0x40
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006996:	625a      	str	r2, [r3, #36]	; 0x24
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800699c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	851a      	strh	r2, [r3, #40]	; 0x28
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4a5b      	ldr	r2, [pc, #364]	; (8006b18 <HAL_I2C_Mem_Read+0x228>)
 80069ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80069ae:	88f8      	ldrh	r0, [r7, #6]
 80069b0:	893a      	ldrh	r2, [r7, #8]
 80069b2:	8979      	ldrh	r1, [r7, #10]
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	9301      	str	r3, [sp, #4]
 80069b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	4603      	mov	r3, r0
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 fba2 	bl	8007108 <I2C_RequestMemoryRead>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <HAL_I2C_Mem_Read+0xde>
 80069ca:	2301      	movs	r3, #1
 80069cc:	e1b0      	b.n	8006d30 <HAL_I2C_Mem_Read+0x440>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d113      	bne.n	80069fe <HAL_I2C_Mem_Read+0x10e>
 80069d6:	2300      	movs	r3, #0
 80069d8:	623b      	str	r3, [r7, #32]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	623b      	str	r3, [r7, #32]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	623b      	str	r3, [r7, #32]
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069fa:	601a      	str	r2, [r3, #0]
 80069fc:	e184      	b.n	8006d08 <HAL_I2C_Mem_Read+0x418>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d11b      	bne.n	8006a3e <HAL_I2C_Mem_Read+0x14e>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	2300      	movs	r3, #0
 8006a18:	61fb      	str	r3, [r7, #28]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	61fb      	str	r3, [r7, #28]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	61fb      	str	r3, [r7, #28]
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a3a:	601a      	str	r2, [r3, #0]
 8006a3c:	e164      	b.n	8006d08 <HAL_I2C_Mem_Read+0x418>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d11b      	bne.n	8006a7e <HAL_I2C_Mem_Read+0x18e>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	2300      	movs	r3, #0
 8006a68:	61bb      	str	r3, [r7, #24]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	61bb      	str	r3, [r7, #24]
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	e144      	b.n	8006d08 <HAL_I2C_Mem_Read+0x418>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	617b      	str	r3, [r7, #20]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	617b      	str	r3, [r7, #20]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	617b      	str	r3, [r7, #20]
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	e138      	b.n	8006d08 <HAL_I2C_Mem_Read+0x418>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	f200 80f1 	bhi.w	8006c82 <HAL_I2C_Mem_Read+0x392>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d123      	bne.n	8006af0 <HAL_I2C_Mem_Read+0x200>
 8006aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 fd6b 	bl	8007588 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <HAL_I2C_Mem_Read+0x1cc>
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e139      	b.n	8006d30 <HAL_I2C_Mem_Read+0x440>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	691a      	ldr	r2, [r3, #16]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac6:	b2d2      	uxtb	r2, r2
 8006ac8:	701a      	strb	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	625a      	str	r2, [r3, #36]	; 0x24
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	851a      	strh	r2, [r3, #40]	; 0x28
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006aee:	e10b      	b.n	8006d08 <HAL_I2C_Mem_Read+0x418>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d14e      	bne.n	8006b96 <HAL_I2C_Mem_Read+0x2a6>
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afe:	2200      	movs	r2, #0
 8006b00:	4906      	ldr	r1, [pc, #24]	; (8006b1c <HAL_I2C_Mem_Read+0x22c>)
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f000 fbe8 	bl	80072d8 <I2C_WaitOnFlagUntilTimeout>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d008      	beq.n	8006b20 <HAL_I2C_Mem_Read+0x230>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e10e      	b.n	8006d30 <HAL_I2C_Mem_Read+0x440>
 8006b12:	bf00      	nop
 8006b14:	00100002 	.word	0x00100002
 8006b18:	ffff0000 	.word	0xffff0000
 8006b1c:	00010004 	.word	0x00010004
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	691a      	ldr	r2, [r3, #16]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3a:	b2d2      	uxtb	r2, r2
 8006b3c:	701a      	strb	r2, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	1c5a      	adds	r2, r3, #1
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	625a      	str	r2, [r3, #36]	; 0x24
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	851a      	strh	r2, [r3, #40]	; 0x28
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	691a      	ldr	r2, [r3, #16]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	701a      	strb	r2, [r3, #0]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	625a      	str	r2, [r3, #36]	; 0x24
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	851a      	strh	r2, [r3, #40]	; 0x28
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b94:	e0b8      	b.n	8006d08 <HAL_I2C_Mem_Read+0x418>
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	4966      	ldr	r1, [pc, #408]	; (8006d38 <HAL_I2C_Mem_Read+0x448>)
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 fb99 	bl	80072d8 <I2C_WaitOnFlagUntilTimeout>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <HAL_I2C_Mem_Read+0x2c0>
 8006bac:	2301      	movs	r3, #1
 8006bae:	e0bf      	b.n	8006d30 <HAL_I2C_Mem_Read+0x440>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	691a      	ldr	r2, [r3, #16]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bca:	b2d2      	uxtb	r2, r2
 8006bcc:	701a      	strb	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	625a      	str	r2, [r3, #36]	; 0x24
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	851a      	strh	r2, [r3, #40]	; 0x28
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	3b01      	subs	r3, #1
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	494f      	ldr	r1, [pc, #316]	; (8006d38 <HAL_I2C_Mem_Read+0x448>)
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 fb6b 	bl	80072d8 <I2C_WaitOnFlagUntilTimeout>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <HAL_I2C_Mem_Read+0x31c>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e091      	b.n	8006d30 <HAL_I2C_Mem_Read+0x440>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	691a      	ldr	r2, [r3, #16]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	b2d2      	uxtb	r2, r2
 8006c28:	701a      	strb	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2e:	1c5a      	adds	r2, r3, #1
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	625a      	str	r2, [r3, #36]	; 0x24
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	851a      	strh	r2, [r3, #40]	; 0x28
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	3b01      	subs	r3, #1
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	691a      	ldr	r2, [r3, #16]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c58:	b2d2      	uxtb	r2, r2
 8006c5a:	701a      	strb	r2, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c60:	1c5a      	adds	r2, r3, #1
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	625a      	str	r2, [r3, #36]	; 0x24
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	851a      	strh	r2, [r3, #40]	; 0x28
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c80:	e042      	b.n	8006d08 <HAL_I2C_Mem_Read+0x418>
 8006c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f000 fc7e 	bl	8007588 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <HAL_I2C_Mem_Read+0x3a6>
 8006c92:	2301      	movs	r3, #1
 8006c94:	e04c      	b.n	8006d30 <HAL_I2C_Mem_Read+0x440>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	691a      	ldr	r2, [r3, #16]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	b2d2      	uxtb	r2, r2
 8006ca2:	701a      	strb	r2, [r3, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	625a      	str	r2, [r3, #36]	; 0x24
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	851a      	strh	r2, [r3, #40]	; 0x28
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	f003 0304 	and.w	r3, r3, #4
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	d118      	bne.n	8006d08 <HAL_I2C_Mem_Read+0x418>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	691a      	ldr	r2, [r3, #16]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	701a      	strb	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	625a      	str	r2, [r3, #36]	; 0x24
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	851a      	strh	r2, [r3, #40]	; 0x28
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	3b01      	subs	r3, #1
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f47f aec2 	bne.w	8006a96 <HAL_I2C_Mem_Read+0x1a6>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e000      	b.n	8006d30 <HAL_I2C_Mem_Read+0x440>
 8006d2e:	2302      	movs	r3, #2
 8006d30:	4618      	mov	r0, r3
 8006d32:	3728      	adds	r7, #40	; 0x28
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	00010004 	.word	0x00010004

08006d3c <I2C_MasterRequestWrite>:
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b088      	sub	sp, #32
 8006d40:	af02      	add	r7, sp, #8
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	607a      	str	r2, [r7, #4]
 8006d46:	603b      	str	r3, [r7, #0]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	817b      	strh	r3, [r7, #10]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d50:	617b      	str	r3, [r7, #20]
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2b08      	cmp	r3, #8
 8006d56:	d006      	beq.n	8006d66 <I2C_MasterRequestWrite+0x2a>
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d003      	beq.n	8006d66 <I2C_MasterRequestWrite+0x2a>
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d64:	d108      	bne.n	8006d78 <I2C_MasterRequestWrite+0x3c>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	e00b      	b.n	8006d90 <I2C_MasterRequestWrite+0x54>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7c:	2b12      	cmp	r3, #18
 8006d7e:	d107      	bne.n	8006d90 <I2C_MasterRequestWrite+0x54>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 fa9b 	bl	80072d8 <I2C_WaitOnFlagUntilTimeout>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00d      	beq.n	8006dc4 <I2C_MasterRequestWrite+0x88>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006db6:	d103      	bne.n	8006dc0 <I2C_MasterRequestWrite+0x84>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dbe:	641a      	str	r2, [r3, #64]	; 0x40
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e035      	b.n	8006e30 <I2C_MasterRequestWrite+0xf4>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dcc:	d108      	bne.n	8006de0 <I2C_MasterRequestWrite+0xa4>
 8006dce:	897b      	ldrh	r3, [r7, #10]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ddc:	611a      	str	r2, [r3, #16]
 8006dde:	e01b      	b.n	8006e18 <I2C_MasterRequestWrite+0xdc>
 8006de0:	897b      	ldrh	r3, [r7, #10]
 8006de2:	11db      	asrs	r3, r3, #7
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	f003 0306 	and.w	r3, r3, #6
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	f063 030f 	orn	r3, r3, #15
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	611a      	str	r2, [r3, #16]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	490e      	ldr	r1, [pc, #56]	; (8006e38 <I2C_MasterRequestWrite+0xfc>)
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f000 fac1 	bl	8007386 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <I2C_MasterRequestWrite+0xd2>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e010      	b.n	8006e30 <I2C_MasterRequestWrite+0xf4>
 8006e0e:	897b      	ldrh	r3, [r7, #10]
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	611a      	str	r2, [r3, #16]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	4907      	ldr	r1, [pc, #28]	; (8006e3c <I2C_MasterRequestWrite+0x100>)
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 fab1 	bl	8007386 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <I2C_MasterRequestWrite+0xf2>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e000      	b.n	8006e30 <I2C_MasterRequestWrite+0xf4>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	4618      	mov	r0, r3
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	00010008 	.word	0x00010008
 8006e3c:	00010002 	.word	0x00010002

08006e40 <I2C_MasterRequestRead>:
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b088      	sub	sp, #32
 8006e44:	af02      	add	r7, sp, #8
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	607a      	str	r2, [r7, #4]
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	817b      	strh	r3, [r7, #10]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e54:	617b      	str	r3, [r7, #20]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e64:	601a      	str	r2, [r3, #0]
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	d006      	beq.n	8006e7a <I2C_MasterRequestRead+0x3a>
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d003      	beq.n	8006e7a <I2C_MasterRequestRead+0x3a>
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e78:	d108      	bne.n	8006e8c <I2C_MasterRequestRead+0x4c>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	e00b      	b.n	8006ea4 <I2C_MasterRequestRead+0x64>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e90:	2b11      	cmp	r3, #17
 8006e92:	d107      	bne.n	8006ea4 <I2C_MasterRequestRead+0x64>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f000 fa11 	bl	80072d8 <I2C_WaitOnFlagUntilTimeout>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00d      	beq.n	8006ed8 <I2C_MasterRequestRead+0x98>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eca:	d103      	bne.n	8006ed4 <I2C_MasterRequestRead+0x94>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ed2:	641a      	str	r2, [r3, #64]	; 0x40
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e079      	b.n	8006fcc <I2C_MasterRequestRead+0x18c>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ee0:	d108      	bne.n	8006ef4 <I2C_MasterRequestRead+0xb4>
 8006ee2:	897b      	ldrh	r3, [r7, #10]
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	f043 0301 	orr.w	r3, r3, #1
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	611a      	str	r2, [r3, #16]
 8006ef2:	e05f      	b.n	8006fb4 <I2C_MasterRequestRead+0x174>
 8006ef4:	897b      	ldrh	r3, [r7, #10]
 8006ef6:	11db      	asrs	r3, r3, #7
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	f003 0306 	and.w	r3, r3, #6
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	f063 030f 	orn	r3, r3, #15
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	611a      	str	r2, [r3, #16]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	4930      	ldr	r1, [pc, #192]	; (8006fd4 <I2C_MasterRequestRead+0x194>)
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f000 fa37 	bl	8007386 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d001      	beq.n	8006f22 <I2C_MasterRequestRead+0xe2>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e054      	b.n	8006fcc <I2C_MasterRequestRead+0x18c>
 8006f22:	897b      	ldrh	r3, [r7, #10]
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	611a      	str	r2, [r3, #16]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	4929      	ldr	r1, [pc, #164]	; (8006fd8 <I2C_MasterRequestRead+0x198>)
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f000 fa27 	bl	8007386 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <I2C_MasterRequestRead+0x102>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e044      	b.n	8006fcc <I2C_MasterRequestRead+0x18c>
 8006f42:	2300      	movs	r3, #0
 8006f44:	613b      	str	r3, [r7, #16]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	613b      	str	r3, [r7, #16]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	613b      	str	r3, [r7, #16]
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f000 f9af 	bl	80072d8 <I2C_WaitOnFlagUntilTimeout>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00d      	beq.n	8006f9c <I2C_MasterRequestRead+0x15c>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f8e:	d103      	bne.n	8006f98 <I2C_MasterRequestRead+0x158>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f96:	641a      	str	r2, [r3, #64]	; 0x40
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e017      	b.n	8006fcc <I2C_MasterRequestRead+0x18c>
 8006f9c:	897b      	ldrh	r3, [r7, #10]
 8006f9e:	11db      	asrs	r3, r3, #7
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	f003 0306 	and.w	r3, r3, #6
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	f063 030e 	orn	r3, r3, #14
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	611a      	str	r2, [r3, #16]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	4907      	ldr	r1, [pc, #28]	; (8006fd8 <I2C_MasterRequestRead+0x198>)
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 f9e3 	bl	8007386 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <I2C_MasterRequestRead+0x18a>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e000      	b.n	8006fcc <I2C_MasterRequestRead+0x18c>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3718      	adds	r7, #24
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	00010008 	.word	0x00010008
 8006fd8:	00010002 	.word	0x00010002

08006fdc <I2C_RequestMemoryWrite>:
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af02      	add	r7, sp, #8
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	4608      	mov	r0, r1
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	461a      	mov	r2, r3
 8006fea:	4603      	mov	r3, r0
 8006fec:	817b      	strh	r3, [r7, #10]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	813b      	strh	r3, [r7, #8]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	80fb      	strh	r3, [r7, #6]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007004:	601a      	str	r2, [r3, #0]
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	2200      	movs	r2, #0
 800700e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f000 f960 	bl	80072d8 <I2C_WaitOnFlagUntilTimeout>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00d      	beq.n	800703a <I2C_RequestMemoryWrite+0x5e>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800702c:	d103      	bne.n	8007036 <I2C_RequestMemoryWrite+0x5a>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007034:	641a      	str	r2, [r3, #64]	; 0x40
 8007036:	2303      	movs	r3, #3
 8007038:	e05f      	b.n	80070fa <I2C_RequestMemoryWrite+0x11e>
 800703a:	897b      	ldrh	r3, [r7, #10]
 800703c:	b2db      	uxtb	r3, r3
 800703e:	461a      	mov	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007048:	611a      	str	r2, [r3, #16]
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	6a3a      	ldr	r2, [r7, #32]
 800704e:	492d      	ldr	r1, [pc, #180]	; (8007104 <I2C_RequestMemoryWrite+0x128>)
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 f998 	bl	8007386 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <I2C_RequestMemoryWrite+0x84>
 800705c:	2301      	movs	r3, #1
 800705e:	e04c      	b.n	80070fa <I2C_RequestMemoryWrite+0x11e>
 8007060:	2300      	movs	r3, #0
 8007062:	617b      	str	r3, [r7, #20]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	617b      	str	r3, [r7, #20]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	617b      	str	r3, [r7, #20]
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007078:	6a39      	ldr	r1, [r7, #32]
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f000 fa02 	bl	8007484 <I2C_WaitOnTXEFlagUntilTimeout>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00d      	beq.n	80070a2 <I2C_RequestMemoryWrite+0xc6>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	2b04      	cmp	r3, #4
 800708c:	d107      	bne.n	800709e <I2C_RequestMemoryWrite+0xc2>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	2301      	movs	r3, #1
 80070a0:	e02b      	b.n	80070fa <I2C_RequestMemoryWrite+0x11e>
 80070a2:	88fb      	ldrh	r3, [r7, #6]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d105      	bne.n	80070b4 <I2C_RequestMemoryWrite+0xd8>
 80070a8:	893b      	ldrh	r3, [r7, #8]
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	611a      	str	r2, [r3, #16]
 80070b2:	e021      	b.n	80070f8 <I2C_RequestMemoryWrite+0x11c>
 80070b4:	893b      	ldrh	r3, [r7, #8]
 80070b6:	0a1b      	lsrs	r3, r3, #8
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	611a      	str	r2, [r3, #16]
 80070c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070c4:	6a39      	ldr	r1, [r7, #32]
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 f9dc 	bl	8007484 <I2C_WaitOnTXEFlagUntilTimeout>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00d      	beq.n	80070ee <I2C_RequestMemoryWrite+0x112>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d107      	bne.n	80070ea <I2C_RequestMemoryWrite+0x10e>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	2301      	movs	r3, #1
 80070ec:	e005      	b.n	80070fa <I2C_RequestMemoryWrite+0x11e>
 80070ee:	893b      	ldrh	r3, [r7, #8]
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	611a      	str	r2, [r3, #16]
 80070f8:	2300      	movs	r3, #0
 80070fa:	4618      	mov	r0, r3
 80070fc:	3718      	adds	r7, #24
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	00010002 	.word	0x00010002

08007108 <I2C_RequestMemoryRead>:
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af02      	add	r7, sp, #8
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	4608      	mov	r0, r1
 8007112:	4611      	mov	r1, r2
 8007114:	461a      	mov	r2, r3
 8007116:	4603      	mov	r3, r0
 8007118:	817b      	strh	r3, [r7, #10]
 800711a:	460b      	mov	r3, r1
 800711c:	813b      	strh	r3, [r7, #8]
 800711e:	4613      	mov	r3, r2
 8007120:	80fb      	strh	r3, [r7, #6]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007140:	601a      	str	r2, [r3, #0]
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	2200      	movs	r2, #0
 800714a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 f8c2 	bl	80072d8 <I2C_WaitOnFlagUntilTimeout>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00d      	beq.n	8007176 <I2C_RequestMemoryRead+0x6e>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007168:	d103      	bne.n	8007172 <I2C_RequestMemoryRead+0x6a>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007170:	641a      	str	r2, [r3, #64]	; 0x40
 8007172:	2303      	movs	r3, #3
 8007174:	e0aa      	b.n	80072cc <I2C_RequestMemoryRead+0x1c4>
 8007176:	897b      	ldrh	r3, [r7, #10]
 8007178:	b2db      	uxtb	r3, r3
 800717a:	461a      	mov	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007184:	611a      	str	r2, [r3, #16]
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	6a3a      	ldr	r2, [r7, #32]
 800718a:	4952      	ldr	r1, [pc, #328]	; (80072d4 <I2C_RequestMemoryRead+0x1cc>)
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 f8fa 	bl	8007386 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <I2C_RequestMemoryRead+0x94>
 8007198:	2301      	movs	r3, #1
 800719a:	e097      	b.n	80072cc <I2C_RequestMemoryRead+0x1c4>
 800719c:	2300      	movs	r3, #0
 800719e:	617b      	str	r3, [r7, #20]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071b4:	6a39      	ldr	r1, [r7, #32]
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 f964 	bl	8007484 <I2C_WaitOnTXEFlagUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00d      	beq.n	80071de <I2C_RequestMemoryRead+0xd6>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	d107      	bne.n	80071da <I2C_RequestMemoryRead+0xd2>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071d8:	601a      	str	r2, [r3, #0]
 80071da:	2301      	movs	r3, #1
 80071dc:	e076      	b.n	80072cc <I2C_RequestMemoryRead+0x1c4>
 80071de:	88fb      	ldrh	r3, [r7, #6]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d105      	bne.n	80071f0 <I2C_RequestMemoryRead+0xe8>
 80071e4:	893b      	ldrh	r3, [r7, #8]
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	611a      	str	r2, [r3, #16]
 80071ee:	e021      	b.n	8007234 <I2C_RequestMemoryRead+0x12c>
 80071f0:	893b      	ldrh	r3, [r7, #8]
 80071f2:	0a1b      	lsrs	r3, r3, #8
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	611a      	str	r2, [r3, #16]
 80071fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007200:	6a39      	ldr	r1, [r7, #32]
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 f93e 	bl	8007484 <I2C_WaitOnTXEFlagUntilTimeout>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00d      	beq.n	800722a <I2C_RequestMemoryRead+0x122>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	2b04      	cmp	r3, #4
 8007214:	d107      	bne.n	8007226 <I2C_RequestMemoryRead+0x11e>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007224:	601a      	str	r2, [r3, #0]
 8007226:	2301      	movs	r3, #1
 8007228:	e050      	b.n	80072cc <I2C_RequestMemoryRead+0x1c4>
 800722a:	893b      	ldrh	r3, [r7, #8]
 800722c:	b2da      	uxtb	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	611a      	str	r2, [r3, #16]
 8007234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007236:	6a39      	ldr	r1, [r7, #32]
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 f923 	bl	8007484 <I2C_WaitOnTXEFlagUntilTimeout>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00d      	beq.n	8007260 <I2C_RequestMemoryRead+0x158>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007248:	2b04      	cmp	r3, #4
 800724a:	d107      	bne.n	800725c <I2C_RequestMemoryRead+0x154>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800725a:	601a      	str	r2, [r3, #0]
 800725c:	2301      	movs	r3, #1
 800725e:	e035      	b.n	80072cc <I2C_RequestMemoryRead+0x1c4>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	2200      	movs	r2, #0
 8007278:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 f82b 	bl	80072d8 <I2C_WaitOnFlagUntilTimeout>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00d      	beq.n	80072a4 <I2C_RequestMemoryRead+0x19c>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007296:	d103      	bne.n	80072a0 <I2C_RequestMemoryRead+0x198>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800729e:	641a      	str	r2, [r3, #64]	; 0x40
 80072a0:	2303      	movs	r3, #3
 80072a2:	e013      	b.n	80072cc <I2C_RequestMemoryRead+0x1c4>
 80072a4:	897b      	ldrh	r3, [r7, #10]
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	f043 0301 	orr.w	r3, r3, #1
 80072ac:	b2da      	uxtb	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	611a      	str	r2, [r3, #16]
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	6a3a      	ldr	r2, [r7, #32]
 80072b8:	4906      	ldr	r1, [pc, #24]	; (80072d4 <I2C_RequestMemoryRead+0x1cc>)
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f000 f863 	bl	8007386 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <I2C_RequestMemoryRead+0x1c2>
 80072c6:	2301      	movs	r3, #1
 80072c8:	e000      	b.n	80072cc <I2C_RequestMemoryRead+0x1c4>
 80072ca:	2300      	movs	r3, #0
 80072cc:	4618      	mov	r0, r3
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	00010002 	.word	0x00010002

080072d8 <I2C_WaitOnFlagUntilTimeout>:
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	603b      	str	r3, [r7, #0]
 80072e4:	4613      	mov	r3, r2
 80072e6:	71fb      	strb	r3, [r7, #7]
 80072e8:	e025      	b.n	8007336 <I2C_WaitOnFlagUntilTimeout+0x5e>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f0:	d021      	beq.n	8007336 <I2C_WaitOnFlagUntilTimeout+0x5e>
 80072f2:	f7fd fb17 	bl	8004924 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	683a      	ldr	r2, [r7, #0]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d302      	bcc.n	8007308 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d116      	bne.n	8007336 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	631a      	str	r2, [r3, #48]	; 0x30
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2220      	movs	r2, #32
 8007312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	f043 0220 	orr.w	r2, r3, #32
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	641a      	str	r2, [r3, #64]	; 0x40
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007332:	2301      	movs	r3, #1
 8007334:	e023      	b.n	800737e <I2C_WaitOnFlagUntilTimeout+0xa6>
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	0c1b      	lsrs	r3, r3, #16
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b01      	cmp	r3, #1
 800733e:	d10d      	bne.n	800735c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	43da      	mvns	r2, r3
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	4013      	ands	r3, r2
 800734c:	b29b      	uxth	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	bf0c      	ite	eq
 8007352:	2301      	moveq	r3, #1
 8007354:	2300      	movne	r3, #0
 8007356:	b2db      	uxtb	r3, r3
 8007358:	461a      	mov	r2, r3
 800735a:	e00c      	b.n	8007376 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	43da      	mvns	r2, r3
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	4013      	ands	r3, r2
 8007368:	b29b      	uxth	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	bf0c      	ite	eq
 800736e:	2301      	moveq	r3, #1
 8007370:	2300      	movne	r3, #0
 8007372:	b2db      	uxtb	r3, r3
 8007374:	461a      	mov	r2, r3
 8007376:	79fb      	ldrb	r3, [r7, #7]
 8007378:	429a      	cmp	r2, r3
 800737a:	d0b6      	beq.n	80072ea <I2C_WaitOnFlagUntilTimeout+0x12>
 800737c:	2300      	movs	r3, #0
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8007386:	b580      	push	{r7, lr}
 8007388:	b084      	sub	sp, #16
 800738a:	af00      	add	r7, sp, #0
 800738c:	60f8      	str	r0, [r7, #12]
 800738e:	60b9      	str	r1, [r7, #8]
 8007390:	607a      	str	r2, [r7, #4]
 8007392:	603b      	str	r3, [r7, #0]
 8007394:	e051      	b.n	800743a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	695b      	ldr	r3, [r3, #20]
 800739c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073a4:	d123      	bne.n	80073ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073be:	615a      	str	r2, [r3, #20]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	631a      	str	r2, [r3, #48]	; 0x30
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	f043 0204 	orr.w	r2, r3, #4
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	641a      	str	r2, [r3, #64]	; 0x40
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80073ea:	2301      	movs	r3, #1
 80073ec:	e046      	b.n	800747c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f4:	d021      	beq.n	800743a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80073f6:	f7fd fa95 	bl	8004924 <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	429a      	cmp	r2, r3
 8007404:	d302      	bcc.n	800740c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d116      	bne.n	800743a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	631a      	str	r2, [r3, #48]	; 0x30
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2220      	movs	r2, #32
 8007416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	f043 0220 	orr.w	r2, r3, #32
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	641a      	str	r2, [r3, #64]	; 0x40
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007436:	2301      	movs	r3, #1
 8007438:	e020      	b.n	800747c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	0c1b      	lsrs	r3, r3, #16
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b01      	cmp	r3, #1
 8007442:	d10c      	bne.n	800745e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	43da      	mvns	r2, r3
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	4013      	ands	r3, r2
 8007450:	b29b      	uxth	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	bf14      	ite	ne
 8007456:	2301      	movne	r3, #1
 8007458:	2300      	moveq	r3, #0
 800745a:	b2db      	uxtb	r3, r3
 800745c:	e00b      	b.n	8007476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	43da      	mvns	r2, r3
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	4013      	ands	r3, r2
 800746a:	b29b      	uxth	r3, r3
 800746c:	2b00      	cmp	r3, #0
 800746e:	bf14      	ite	ne
 8007470:	2301      	movne	r3, #1
 8007472:	2300      	moveq	r3, #0
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b00      	cmp	r3, #0
 8007478:	d18d      	bne.n	8007396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800747a:	2300      	movs	r3, #0
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <I2C_WaitOnTXEFlagUntilTimeout>:
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
 8007490:	e02d      	b.n	80074ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f000 f8ce 	bl	8007634 <I2C_IsAcknowledgeFailed>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 800749e:	2301      	movs	r3, #1
 80074a0:	e02d      	b.n	80074fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a8:	d021      	beq.n	80074ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80074aa:	f7fd fa3b 	bl	8004924 <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d302      	bcc.n	80074c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d116      	bne.n	80074ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	631a      	str	r2, [r3, #48]	; 0x30
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2220      	movs	r2, #32
 80074ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	f043 0220 	orr.w	r2, r3, #32
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	641a      	str	r2, [r3, #64]	; 0x40
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80074ea:	2301      	movs	r3, #1
 80074ec:	e007      	b.n	80074fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074f8:	2b80      	cmp	r3, #128	; 0x80
 80074fa:	d1ca      	bne.n	8007492 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 80074fc:	2300      	movs	r3, #0
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <I2C_WaitOnBTFFlagUntilTimeout>:
 8007506:	b580      	push	{r7, lr}
 8007508:	b084      	sub	sp, #16
 800750a:	af00      	add	r7, sp, #0
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	607a      	str	r2, [r7, #4]
 8007512:	e02d      	b.n	8007570 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 f88d 	bl	8007634 <I2C_IsAcknowledgeFailed>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8007520:	2301      	movs	r3, #1
 8007522:	e02d      	b.n	8007580 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752a:	d021      	beq.n	8007570 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 800752c:	f7fd f9fa 	bl	8004924 <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	429a      	cmp	r2, r3
 800753a:	d302      	bcc.n	8007542 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d116      	bne.n	8007570 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	631a      	str	r2, [r3, #48]	; 0x30
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2220      	movs	r2, #32
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755c:	f043 0220 	orr.w	r2, r3, #32
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	641a      	str	r2, [r3, #64]	; 0x40
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800756c:	2301      	movs	r3, #1
 800756e:	e007      	b.n	8007580 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	f003 0304 	and.w	r3, r3, #4
 800757a:	2b04      	cmp	r3, #4
 800757c:	d1ca      	bne.n	8007514 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 800757e:	2300      	movs	r3, #0
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
 8007594:	e042      	b.n	800761c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	695b      	ldr	r3, [r3, #20]
 800759c:	f003 0310 	and.w	r3, r3, #16
 80075a0:	2b10      	cmp	r3, #16
 80075a2:	d119      	bne.n	80075d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f06f 0210 	mvn.w	r2, #16
 80075ac:	615a      	str	r2, [r3, #20]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	631a      	str	r2, [r3, #48]	; 0x30
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2220      	movs	r2, #32
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	641a      	str	r2, [r3, #64]	; 0x40
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80075d4:	2301      	movs	r3, #1
 80075d6:	e029      	b.n	800762c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 80075d8:	f7fd f9a4 	bl	8004924 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d302      	bcc.n	80075ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d116      	bne.n	800761c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	631a      	str	r2, [r3, #48]	; 0x30
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2220      	movs	r2, #32
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007608:	f043 0220 	orr.w	r2, r3, #32
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	641a      	str	r2, [r3, #64]	; 0x40
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007618:	2301      	movs	r3, #1
 800761a:	e007      	b.n	800762c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007626:	2b40      	cmp	r3, #64	; 0x40
 8007628:	d1b5      	bne.n	8007596 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 800762a:	2300      	movs	r3, #0
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <I2C_IsAcknowledgeFailed>:
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800764a:	d11b      	bne.n	8007684 <I2C_IsAcknowledgeFailed+0x50>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007654:	615a      	str	r2, [r3, #20]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	631a      	str	r2, [r3, #48]	; 0x30
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2220      	movs	r2, #32
 8007660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007670:	f043 0204 	orr.w	r2, r3, #4
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	641a      	str	r2, [r3, #64]	; 0x40
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007680:	2301      	movs	r3, #1
 8007682:	e000      	b.n	8007686 <I2C_IsAcknowledgeFailed+0x52>
 8007684:	2300      	movs	r3, #0
 8007686:	4618      	mov	r0, r3
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <HAL_PCD_Init>:
 8007692:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007694:	b08f      	sub	sp, #60	; 0x3c
 8007696:	af0a      	add	r7, sp, #40	; 0x28
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <HAL_PCD_Init+0x12>
 80076a0:	2301      	movs	r3, #1
 80076a2:	e10f      	b.n	80078c4 <HAL_PCD_Init+0x232>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	60bb      	str	r3, [r7, #8]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d106      	bne.n	80076c4 <HAL_PCD_Init+0x32>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f008 f8f2 	bl	800f8a8 <HAL_PCD_MspInit>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2203      	movs	r2, #3
 80076c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d102      	bne.n	80076de <HAL_PCD_Init+0x4c>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	611a      	str	r2, [r3, #16]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f003 f87d 	bl	800a7e2 <USB_DisableGlobalInt>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	603b      	str	r3, [r7, #0]
 80076ee:	687e      	ldr	r6, [r7, #4]
 80076f0:	466d      	mov	r5, sp
 80076f2:	f106 0410 	add.w	r4, r6, #16
 80076f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80076fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80076fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007702:	e885 0003 	stmia.w	r5, {r0, r1}
 8007706:	1d33      	adds	r3, r6, #4
 8007708:	cb0e      	ldmia	r3, {r1, r2, r3}
 800770a:	6838      	ldr	r0, [r7, #0]
 800770c:	f002 ff54 	bl	800a5b8 <USB_CoreInit>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d005      	beq.n	8007722 <HAL_PCD_Init+0x90>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2202      	movs	r2, #2
 800771a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 800771e:	2301      	movs	r3, #1
 8007720:	e0d0      	b.n	80078c4 <HAL_PCD_Init+0x232>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2100      	movs	r1, #0
 8007728:	4618      	mov	r0, r3
 800772a:	f003 f86b 	bl	800a804 <USB_SetCurrentMode>
 800772e:	2300      	movs	r3, #0
 8007730:	73fb      	strb	r3, [r7, #15]
 8007732:	e04a      	b.n	80077ca <HAL_PCD_Init+0x138>
 8007734:	7bfa      	ldrb	r2, [r7, #15]
 8007736:	6879      	ldr	r1, [r7, #4]
 8007738:	4613      	mov	r3, r2
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	4413      	add	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	440b      	add	r3, r1
 8007742:	333d      	adds	r3, #61	; 0x3d
 8007744:	2201      	movs	r2, #1
 8007746:	701a      	strb	r2, [r3, #0]
 8007748:	7bfa      	ldrb	r2, [r7, #15]
 800774a:	6879      	ldr	r1, [r7, #4]
 800774c:	4613      	mov	r3, r2
 800774e:	00db      	lsls	r3, r3, #3
 8007750:	4413      	add	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	440b      	add	r3, r1
 8007756:	333c      	adds	r3, #60	; 0x3c
 8007758:	7bfa      	ldrb	r2, [r7, #15]
 800775a:	701a      	strb	r2, [r3, #0]
 800775c:	7bfa      	ldrb	r2, [r7, #15]
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	b298      	uxth	r0, r3
 8007762:	6879      	ldr	r1, [r7, #4]
 8007764:	4613      	mov	r3, r2
 8007766:	00db      	lsls	r3, r3, #3
 8007768:	4413      	add	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	440b      	add	r3, r1
 800776e:	3344      	adds	r3, #68	; 0x44
 8007770:	4602      	mov	r2, r0
 8007772:	801a      	strh	r2, [r3, #0]
 8007774:	7bfa      	ldrb	r2, [r7, #15]
 8007776:	6879      	ldr	r1, [r7, #4]
 8007778:	4613      	mov	r3, r2
 800777a:	00db      	lsls	r3, r3, #3
 800777c:	4413      	add	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	440b      	add	r3, r1
 8007782:	3340      	adds	r3, #64	; 0x40
 8007784:	2200      	movs	r2, #0
 8007786:	701a      	strb	r2, [r3, #0]
 8007788:	7bfa      	ldrb	r2, [r7, #15]
 800778a:	6879      	ldr	r1, [r7, #4]
 800778c:	4613      	mov	r3, r2
 800778e:	00db      	lsls	r3, r3, #3
 8007790:	4413      	add	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	440b      	add	r3, r1
 8007796:	3348      	adds	r3, #72	; 0x48
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	7bfa      	ldrb	r2, [r7, #15]
 800779e:	6879      	ldr	r1, [r7, #4]
 80077a0:	4613      	mov	r3, r2
 80077a2:	00db      	lsls	r3, r3, #3
 80077a4:	4413      	add	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	440b      	add	r3, r1
 80077aa:	334c      	adds	r3, #76	; 0x4c
 80077ac:	2200      	movs	r2, #0
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	7bfa      	ldrb	r2, [r7, #15]
 80077b2:	6879      	ldr	r1, [r7, #4]
 80077b4:	4613      	mov	r3, r2
 80077b6:	00db      	lsls	r3, r3, #3
 80077b8:	4413      	add	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	440b      	add	r3, r1
 80077be:	3354      	adds	r3, #84	; 0x54
 80077c0:	2200      	movs	r2, #0
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	3301      	adds	r3, #1
 80077c8:	73fb      	strb	r3, [r7, #15]
 80077ca:	7bfa      	ldrb	r2, [r7, #15]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d3af      	bcc.n	8007734 <HAL_PCD_Init+0xa2>
 80077d4:	2300      	movs	r3, #0
 80077d6:	73fb      	strb	r3, [r7, #15]
 80077d8:	e044      	b.n	8007864 <HAL_PCD_Init+0x1d2>
 80077da:	7bfa      	ldrb	r2, [r7, #15]
 80077dc:	6879      	ldr	r1, [r7, #4]
 80077de:	4613      	mov	r3, r2
 80077e0:	00db      	lsls	r3, r3, #3
 80077e2:	4413      	add	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	440b      	add	r3, r1
 80077e8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80077ec:	2200      	movs	r2, #0
 80077ee:	701a      	strb	r2, [r3, #0]
 80077f0:	7bfa      	ldrb	r2, [r7, #15]
 80077f2:	6879      	ldr	r1, [r7, #4]
 80077f4:	4613      	mov	r3, r2
 80077f6:	00db      	lsls	r3, r3, #3
 80077f8:	4413      	add	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	440b      	add	r3, r1
 80077fe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007802:	7bfa      	ldrb	r2, [r7, #15]
 8007804:	701a      	strb	r2, [r3, #0]
 8007806:	7bfa      	ldrb	r2, [r7, #15]
 8007808:	6879      	ldr	r1, [r7, #4]
 800780a:	4613      	mov	r3, r2
 800780c:	00db      	lsls	r3, r3, #3
 800780e:	4413      	add	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	440b      	add	r3, r1
 8007814:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007818:	2200      	movs	r2, #0
 800781a:	701a      	strb	r2, [r3, #0]
 800781c:	7bfa      	ldrb	r2, [r7, #15]
 800781e:	6879      	ldr	r1, [r7, #4]
 8007820:	4613      	mov	r3, r2
 8007822:	00db      	lsls	r3, r3, #3
 8007824:	4413      	add	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	440b      	add	r3, r1
 800782a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800782e:	2200      	movs	r2, #0
 8007830:	601a      	str	r2, [r3, #0]
 8007832:	7bfa      	ldrb	r2, [r7, #15]
 8007834:	6879      	ldr	r1, [r7, #4]
 8007836:	4613      	mov	r3, r2
 8007838:	00db      	lsls	r3, r3, #3
 800783a:	4413      	add	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	440b      	add	r3, r1
 8007840:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007844:	2200      	movs	r2, #0
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	7bfa      	ldrb	r2, [r7, #15]
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	4613      	mov	r3, r2
 800784e:	00db      	lsls	r3, r3, #3
 8007850:	4413      	add	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	440b      	add	r3, r1
 8007856:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800785a:	2200      	movs	r2, #0
 800785c:	601a      	str	r2, [r3, #0]
 800785e:	7bfb      	ldrb	r3, [r7, #15]
 8007860:	3301      	adds	r3, #1
 8007862:	73fb      	strb	r3, [r7, #15]
 8007864:	7bfa      	ldrb	r2, [r7, #15]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	429a      	cmp	r2, r3
 800786c:	d3b5      	bcc.n	80077da <HAL_PCD_Init+0x148>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	603b      	str	r3, [r7, #0]
 8007874:	687e      	ldr	r6, [r7, #4]
 8007876:	466d      	mov	r5, sp
 8007878:	f106 0410 	add.w	r4, r6, #16
 800787c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800787e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007884:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007888:	e885 0003 	stmia.w	r5, {r0, r1}
 800788c:	1d33      	adds	r3, r6, #4
 800788e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007890:	6838      	ldr	r0, [r7, #0]
 8007892:	f003 f803 	bl	800a89c <USB_DevInit>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d005      	beq.n	80078a8 <HAL_PCD_Init+0x216>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2202      	movs	r2, #2
 80078a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 80078a4:	2301      	movs	r3, #1
 80078a6:	e00d      	b.n	80078c4 <HAL_PCD_Init+0x232>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4618      	mov	r0, r3
 80078be:	f004 f952 	bl	800bb66 <USB_DevDisconnect>
 80078c2:	2300      	movs	r3, #0
 80078c4:	4618      	mov	r0, r3
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080078cc <HAL_PCD_Start>:
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	60fb      	str	r3, [r7, #12]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d101      	bne.n	80078e8 <HAL_PCD_Start+0x1c>
 80078e4:	2302      	movs	r3, #2
 80078e6:	e020      	b.n	800792a <HAL_PCD_Start+0x5e>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d109      	bne.n	800790c <HAL_PCD_Start+0x40>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d005      	beq.n	800790c <HAL_PCD_Start+0x40>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007904:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	639a      	str	r2, [r3, #56]	; 0x38
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4618      	mov	r0, r3
 8007912:	f002 ff55 	bl	800a7c0 <USB_EnableGlobalInt>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4618      	mov	r0, r3
 800791c:	f004 f902 	bl	800bb24 <USB_DevConnect>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8007928:	2300      	movs	r3, #0
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <HAL_PCD_IRQHandler>:
 8007932:	b590      	push	{r4, r7, lr}
 8007934:	b08d      	sub	sp, #52	; 0x34
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	623b      	str	r3, [r7, #32]
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	61fb      	str	r3, [r7, #28]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4618      	mov	r0, r3
 800794a:	f004 f9c0 	bl	800bcce <USB_GetMode>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	f040 848a 	bne.w	800826a <HAL_PCD_IRQHandler+0x938>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4618      	mov	r0, r3
 800795c:	f004 f924 	bl	800bba8 <USB_ReadInterrupts>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 8480 	beq.w	8008268 <HAL_PCD_IRQHandler+0x936>
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	0a1b      	lsrs	r3, r3, #8
 8007972:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4618      	mov	r0, r3
 8007982:	f004 f911 	bl	800bba8 <USB_ReadInterrupts>
 8007986:	4603      	mov	r3, r0
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	2b02      	cmp	r3, #2
 800798e:	d107      	bne.n	80079a0 <HAL_PCD_IRQHandler+0x6e>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	695a      	ldr	r2, [r3, #20]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f002 0202 	and.w	r2, r2, #2
 800799e:	615a      	str	r2, [r3, #20]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f004 f8ff 	bl	800bba8 <USB_ReadInterrupts>
 80079aa:	4603      	mov	r3, r0
 80079ac:	f003 0310 	and.w	r3, r3, #16
 80079b0:	2b10      	cmp	r3, #16
 80079b2:	d161      	bne.n	8007a78 <HAL_PCD_IRQHandler+0x146>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	699a      	ldr	r2, [r3, #24]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 0210 	bic.w	r2, r2, #16
 80079c2:	619a      	str	r2, [r3, #24]
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	61bb      	str	r3, [r7, #24]
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	f003 020f 	and.w	r2, r3, #15
 80079d0:	4613      	mov	r3, r2
 80079d2:	00db      	lsls	r3, r3, #3
 80079d4:	4413      	add	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	4413      	add	r3, r2
 80079e0:	3304      	adds	r3, #4
 80079e2:	617b      	str	r3, [r7, #20]
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	0c5b      	lsrs	r3, r3, #17
 80079e8:	f003 030f 	and.w	r3, r3, #15
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d124      	bne.n	8007a3a <HAL_PCD_IRQHandler+0x108>
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80079f6:	4013      	ands	r3, r2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d035      	beq.n	8007a68 <HAL_PCD_IRQHandler+0x136>
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	6919      	ldr	r1, [r3, #16]
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	091b      	lsrs	r3, r3, #4
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	6a38      	ldr	r0, [r7, #32]
 8007a10:	f003 ff36 	bl	800b880 <USB_ReadPacket>
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	691a      	ldr	r2, [r3, #16]
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	091b      	lsrs	r3, r3, #4
 8007a1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a20:	441a      	add	r2, r3
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	611a      	str	r2, [r3, #16]
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	6a1a      	ldr	r2, [r3, #32]
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	091b      	lsrs	r3, r3, #4
 8007a2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a32:	441a      	add	r2, r3
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	621a      	str	r2, [r3, #32]
 8007a38:	e016      	b.n	8007a68 <HAL_PCD_IRQHandler+0x136>
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	0c5b      	lsrs	r3, r3, #17
 8007a3e:	f003 030f 	and.w	r3, r3, #15
 8007a42:	2b06      	cmp	r3, #6
 8007a44:	d110      	bne.n	8007a68 <HAL_PCD_IRQHandler+0x136>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007a4c:	2208      	movs	r2, #8
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6a38      	ldr	r0, [r7, #32]
 8007a52:	f003 ff15 	bl	800b880 <USB_ReadPacket>
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	6a1a      	ldr	r2, [r3, #32]
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	091b      	lsrs	r3, r3, #4
 8007a5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a62:	441a      	add	r2, r3
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	621a      	str	r2, [r3, #32]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	699a      	ldr	r2, [r3, #24]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f042 0210 	orr.w	r2, r2, #16
 8007a76:	619a      	str	r2, [r3, #24]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f004 f893 	bl	800bba8 <USB_ReadInterrupts>
 8007a82:	4603      	mov	r3, r0
 8007a84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a8c:	f040 80a7 	bne.w	8007bde <HAL_PCD_IRQHandler+0x2ac>
 8007a90:	2300      	movs	r3, #0
 8007a92:	627b      	str	r3, [r7, #36]	; 0x24
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f004 f898 	bl	800bbce <USB_ReadDevAllOutEpInterrupt>
 8007a9e:	62b8      	str	r0, [r7, #40]	; 0x28
 8007aa0:	e099      	b.n	8007bd6 <HAL_PCD_IRQHandler+0x2a4>
 8007aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f000 808e 	beq.w	8007bca <HAL_PCD_IRQHandler+0x298>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ab4:	b2d2      	uxtb	r2, r2
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f004 f8bc 	bl	800bc36 <USB_ReadDevOutEPInterrupt>
 8007abe:	6138      	str	r0, [r7, #16]
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00c      	beq.n	8007ae4 <HAL_PCD_IRQHandler+0x1b2>
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	2301      	movs	r3, #1
 8007ada:	6093      	str	r3, [r2, #8]
 8007adc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fec2 	bl	8008868 <PCD_EP_OutXfrComplete_int>
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	f003 0308 	and.w	r3, r3, #8
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00c      	beq.n	8007b08 <HAL_PCD_IRQHandler+0x1d6>
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007afa:	461a      	mov	r2, r3
 8007afc:	2308      	movs	r3, #8
 8007afe:	6093      	str	r3, [r2, #8]
 8007b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 ff98 	bl	8008a38 <PCD_EP_OutSetupPacket_int>
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	f003 0310 	and.w	r3, r3, #16
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d008      	beq.n	8007b24 <HAL_PCD_IRQHandler+0x1f2>
 8007b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b14:	015a      	lsls	r2, r3, #5
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	4413      	add	r3, r2
 8007b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b1e:	461a      	mov	r2, r3
 8007b20:	2310      	movs	r3, #16
 8007b22:	6093      	str	r3, [r2, #8]
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d030      	beq.n	8007b90 <HAL_PCD_IRQHandler+0x25e>
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b36:	2b80      	cmp	r3, #128	; 0x80
 8007b38:	d109      	bne.n	8007b4e <HAL_PCD_IRQHandler+0x21c>
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	69fa      	ldr	r2, [r7, #28]
 8007b44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b4c:	6053      	str	r3, [r2, #4]
 8007b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b50:	4613      	mov	r3, r2
 8007b52:	00db      	lsls	r3, r3, #3
 8007b54:	4413      	add	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	4413      	add	r3, r2
 8007b60:	3304      	adds	r3, #4
 8007b62:	617b      	str	r3, [r7, #20]
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	78db      	ldrb	r3, [r3, #3]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d108      	bne.n	8007b7e <HAL_PCD_IRQHandler+0x24c>
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	70da      	strb	r2, [r3, #3]
 8007b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f007 ff91 	bl	800faa0 <HAL_PCD_ISOOUTIncompleteCallback>
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	6093      	str	r3, [r2, #8]
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	f003 0320 	and.w	r3, r3, #32
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d008      	beq.n	8007bac <HAL_PCD_IRQHandler+0x27a>
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	2320      	movs	r3, #32
 8007baa:	6093      	str	r3, [r2, #8]
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d009      	beq.n	8007bca <HAL_PCD_IRQHandler+0x298>
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	015a      	lsls	r2, r3, #5
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bc8:	6093      	str	r3, [r2, #8]
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	3301      	adds	r3, #1
 8007bce:	627b      	str	r3, [r7, #36]	; 0x24
 8007bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd2:	085b      	lsrs	r3, r3, #1
 8007bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f47f af62 	bne.w	8007aa2 <HAL_PCD_IRQHandler+0x170>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f003 ffe0 	bl	800bba8 <USB_ReadInterrupts>
 8007be8:	4603      	mov	r3, r0
 8007bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bf2:	f040 80db 	bne.w	8007dac <HAL_PCD_IRQHandler+0x47a>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f004 f801 	bl	800bc02 <USB_ReadDevAllInEpInterrupt>
 8007c00:	62b8      	str	r0, [r7, #40]	; 0x28
 8007c02:	2300      	movs	r3, #0
 8007c04:	627b      	str	r3, [r7, #36]	; 0x24
 8007c06:	e0cd      	b.n	8007da4 <HAL_PCD_IRQHandler+0x472>
 8007c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 80c2 	beq.w	8007d98 <HAL_PCD_IRQHandler+0x466>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c1a:	b2d2      	uxtb	r2, r2
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f004 f827 	bl	800bc72 <USB_ReadDevInEPInterrupt>
 8007c24:	6138      	str	r0, [r7, #16]
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f003 0301 	and.w	r3, r3, #1
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d057      	beq.n	8007ce0 <HAL_PCD_IRQHandler+0x3ae>
 8007c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c32:	f003 030f 	and.w	r3, r3, #15
 8007c36:	2201      	movs	r2, #1
 8007c38:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3c:	60fb      	str	r3, [r7, #12]
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	43db      	mvns	r3, r3
 8007c4a:	69f9      	ldr	r1, [r7, #28]
 8007c4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c50:	4013      	ands	r3, r2
 8007c52:	634b      	str	r3, [r1, #52]	; 0x34
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	015a      	lsls	r2, r3, #5
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c60:	461a      	mov	r2, r3
 8007c62:	2301      	movs	r3, #1
 8007c64:	6093      	str	r3, [r2, #8]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d132      	bne.n	8007cd4 <HAL_PCD_IRQHandler+0x3a2>
 8007c6e:	6879      	ldr	r1, [r7, #4]
 8007c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c72:	4613      	mov	r3, r2
 8007c74:	00db      	lsls	r3, r3, #3
 8007c76:	4413      	add	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	440b      	add	r3, r1
 8007c7c:	334c      	adds	r3, #76	; 0x4c
 8007c7e:	6819      	ldr	r1, [r3, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c84:	4613      	mov	r3, r2
 8007c86:	00db      	lsls	r3, r3, #3
 8007c88:	4413      	add	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4403      	add	r3, r0
 8007c8e:	3348      	adds	r3, #72	; 0x48
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4419      	add	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c98:	4613      	mov	r3, r2
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	4413      	add	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4403      	add	r3, r0
 8007ca2:	334c      	adds	r3, #76	; 0x4c
 8007ca4:	6019      	str	r1, [r3, #0]
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d113      	bne.n	8007cd4 <HAL_PCD_IRQHandler+0x3a2>
 8007cac:	6879      	ldr	r1, [r7, #4]
 8007cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	00db      	lsls	r3, r3, #3
 8007cb4:	4413      	add	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	440b      	add	r3, r1
 8007cba:	3354      	adds	r3, #84	; 0x54
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d108      	bne.n	8007cd4 <HAL_PCD_IRQHandler+0x3a2>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6818      	ldr	r0, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007ccc:	461a      	mov	r2, r3
 8007cce:	2101      	movs	r1, #1
 8007cd0:	f004 f82e 	bl	800bd30 <USB_EP0_OutStart>
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f007 fe65 	bl	800f9aa <HAL_PCD_DataInStageCallback>
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	f003 0308 	and.w	r3, r3, #8
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d008      	beq.n	8007cfc <HAL_PCD_IRQHandler+0x3ca>
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	015a      	lsls	r2, r3, #5
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	2308      	movs	r3, #8
 8007cfa:	6093      	str	r3, [r2, #8]
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	f003 0310 	and.w	r3, r3, #16
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d008      	beq.n	8007d18 <HAL_PCD_IRQHandler+0x3e6>
 8007d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d08:	015a      	lsls	r2, r3, #5
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d12:	461a      	mov	r2, r3
 8007d14:	2310      	movs	r3, #16
 8007d16:	6093      	str	r3, [r2, #8]
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d008      	beq.n	8007d34 <HAL_PCD_IRQHandler+0x402>
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	015a      	lsls	r2, r3, #5
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	4413      	add	r3, r2
 8007d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2e:	461a      	mov	r2, r3
 8007d30:	2340      	movs	r3, #64	; 0x40
 8007d32:	6093      	str	r3, [r2, #8]
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f003 0302 	and.w	r3, r3, #2
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d023      	beq.n	8007d86 <HAL_PCD_IRQHandler+0x454>
 8007d3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d40:	6a38      	ldr	r0, [r7, #32]
 8007d42:	f002 ff0f 	bl	800ab64 <USB_FlushTxFifo>
 8007d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d48:	4613      	mov	r3, r2
 8007d4a:	00db      	lsls	r3, r3, #3
 8007d4c:	4413      	add	r3, r2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	3338      	adds	r3, #56	; 0x38
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	4413      	add	r3, r2
 8007d56:	3304      	adds	r3, #4
 8007d58:	617b      	str	r3, [r7, #20]
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	78db      	ldrb	r3, [r3, #3]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d108      	bne.n	8007d74 <HAL_PCD_IRQHandler+0x442>
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	2200      	movs	r2, #0
 8007d66:	70da      	strb	r2, [r3, #3]
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f007 fea8 	bl	800fac4 <HAL_PCD_ISOINIncompleteCallback>
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d80:	461a      	mov	r2, r3
 8007d82:	2302      	movs	r3, #2
 8007d84:	6093      	str	r3, [r2, #8]
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d003      	beq.n	8007d98 <HAL_PCD_IRQHandler+0x466>
 8007d90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fcdb 	bl	800874e <PCD_WriteEmptyTxFifo>
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da0:	085b      	lsrs	r3, r3, #1
 8007da2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f47f af2e 	bne.w	8007c08 <HAL_PCD_IRQHandler+0x2d6>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f003 fef9 	bl	800bba8 <USB_ReadInterrupts>
 8007db6:	4603      	mov	r3, r0
 8007db8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dc0:	d122      	bne.n	8007e08 <HAL_PCD_IRQHandler+0x4d6>
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	69fa      	ldr	r2, [r7, #28]
 8007dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dd0:	f023 0301 	bic.w	r3, r3, #1
 8007dd4:	6053      	str	r3, [r2, #4]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d108      	bne.n	8007df2 <HAL_PCD_IRQHandler+0x4c0>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8007de8:	2100      	movs	r1, #0
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fec2 	bl	8008b74 <HAL_PCDEx_LPM_Callback>
 8007df0:	e002      	b.n	8007df8 <HAL_PCD_IRQHandler+0x4c6>
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f007 fe46 	bl	800fa84 <HAL_PCD_ResumeCallback>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	695a      	ldr	r2, [r3, #20]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007e06:	615a      	str	r2, [r3, #20]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f003 fecb 	bl	800bba8 <USB_ReadInterrupts>
 8007e12:	4603      	mov	r3, r0
 8007e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e1c:	d112      	bne.n	8007e44 <HAL_PCD_IRQHandler+0x512>
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d102      	bne.n	8007e34 <HAL_PCD_IRQHandler+0x502>
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f007 fe02 	bl	800fa38 <HAL_PCD_SuspendCallback>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	695a      	ldr	r2, [r3, #20]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007e42:	615a      	str	r2, [r3, #20]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f003 fead 	bl	800bba8 <USB_ReadInterrupts>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e58:	f040 80b7 	bne.w	8007fca <HAL_PCD_IRQHandler+0x698>
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	69fa      	ldr	r2, [r7, #28]
 8007e66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e6a:	f023 0301 	bic.w	r3, r3, #1
 8007e6e:	6053      	str	r3, [r2, #4]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2110      	movs	r1, #16
 8007e76:	4618      	mov	r0, r3
 8007e78:	f002 fe74 	bl	800ab64 <USB_FlushTxFifo>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e80:	e046      	b.n	8007f10 <HAL_PCD_IRQHandler+0x5de>
 8007e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e84:	015a      	lsls	r2, r3, #5
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e8e:	461a      	mov	r2, r3
 8007e90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e94:	6093      	str	r3, [r2, #8]
 8007e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e98:	015a      	lsls	r2, r3, #5
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ea6:	0151      	lsls	r1, r2, #5
 8007ea8:	69fa      	ldr	r2, [r7, #28]
 8007eaa:	440a      	add	r2, r1
 8007eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ec8:	6093      	str	r3, [r2, #8]
 8007eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ecc:	015a      	lsls	r2, r3, #5
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eda:	0151      	lsls	r1, r2, #5
 8007edc:	69fa      	ldr	r2, [r7, #28]
 8007ede:	440a      	add	r2, r1
 8007ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ee4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ee8:	6013      	str	r3, [r2, #0]
 8007eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eec:	015a      	lsls	r2, r3, #5
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007efa:	0151      	lsls	r1, r2, #5
 8007efc:	69fa      	ldr	r2, [r7, #28]
 8007efe:	440a      	add	r2, r1
 8007f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f08:	6013      	str	r3, [r2, #0]
 8007f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d3b3      	bcc.n	8007e82 <HAL_PCD_IRQHandler+0x550>
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	69fa      	ldr	r2, [r7, #28]
 8007f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f28:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007f2c:	61d3      	str	r3, [r2, #28]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d016      	beq.n	8007f64 <HAL_PCD_IRQHandler+0x632>
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f40:	69fa      	ldr	r2, [r7, #28]
 8007f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f46:	f043 030b 	orr.w	r3, r3, #11
 8007f4a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f56:	69fa      	ldr	r2, [r7, #28]
 8007f58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f5c:	f043 030b 	orr.w	r3, r3, #11
 8007f60:	6453      	str	r3, [r2, #68]	; 0x44
 8007f62:	e015      	b.n	8007f90 <HAL_PCD_IRQHandler+0x65e>
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	69fa      	ldr	r2, [r7, #28]
 8007f6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007f76:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007f7a:	6153      	str	r3, [r2, #20]
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	69fa      	ldr	r2, [r7, #28]
 8007f86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f8a:	f043 030b 	orr.w	r3, r3, #11
 8007f8e:	6113      	str	r3, [r2, #16]
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	69fa      	ldr	r2, [r7, #28]
 8007f9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f9e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6818      	ldr	r0, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	b2d9      	uxtb	r1, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	f003 febb 	bl	800bd30 <USB_EP0_OutStart>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	695a      	ldr	r2, [r3, #20]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007fc8:	615a      	str	r2, [r3, #20]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f003 fdea 	bl	800bba8 <USB_ReadInterrupts>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fde:	d124      	bne.n	800802a <HAL_PCD_IRQHandler+0x6f8>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f003 fe80 	bl	800bcea <USB_ActivateSetup>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f002 fe35 	bl	800ac5e <USB_GetDevSpeed>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	60da      	str	r2, [r3, #12]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681c      	ldr	r4, [r3, #0]
 8008000:	f001 fa28 	bl	8009454 <HAL_RCC_GetHCLKFreq>
 8008004:	4601      	mov	r1, r0
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	b2db      	uxtb	r3, r3
 800800c:	461a      	mov	r2, r3
 800800e:	4620      	mov	r0, r4
 8008010:	f002 fb34 	bl	800a67c <USB_SetTurnaroundTime>
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f007 fcf0 	bl	800f9fa <HAL_PCD_ResetCallback>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	695a      	ldr	r2, [r3, #20]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008028:	615a      	str	r2, [r3, #20]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4618      	mov	r0, r3
 8008030:	f003 fdba 	bl	800bba8 <USB_ReadInterrupts>
 8008034:	4603      	mov	r3, r0
 8008036:	f003 0308 	and.w	r3, r3, #8
 800803a:	2b08      	cmp	r3, #8
 800803c:	d10a      	bne.n	8008054 <HAL_PCD_IRQHandler+0x722>
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f007 fccd 	bl	800f9de <HAL_PCD_SOFCallback>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	695a      	ldr	r2, [r3, #20]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f002 0208 	and.w	r2, r2, #8
 8008052:	615a      	str	r2, [r3, #20]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4618      	mov	r0, r3
 800805a:	f003 fda5 	bl	800bba8 <USB_ReadInterrupts>
 800805e:	4603      	mov	r3, r0
 8008060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008064:	2b80      	cmp	r3, #128	; 0x80
 8008066:	d122      	bne.n	80080ae <HAL_PCD_IRQHandler+0x77c>
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008070:	6a3b      	ldr	r3, [r7, #32]
 8008072:	619a      	str	r2, [r3, #24]
 8008074:	2301      	movs	r3, #1
 8008076:	627b      	str	r3, [r7, #36]	; 0x24
 8008078:	e014      	b.n	80080a4 <HAL_PCD_IRQHandler+0x772>
 800807a:	6879      	ldr	r1, [r7, #4]
 800807c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800807e:	4613      	mov	r3, r2
 8008080:	00db      	lsls	r3, r3, #3
 8008082:	4413      	add	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	440b      	add	r3, r1
 8008088:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d105      	bne.n	800809e <HAL_PCD_IRQHandler+0x76c>
 8008092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008094:	b2db      	uxtb	r3, r3
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fb27 	bl	80086ec <HAL_PCD_EP_Abort>
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	3301      	adds	r3, #1
 80080a2:	627b      	str	r3, [r7, #36]	; 0x24
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d3e5      	bcc.n	800807a <HAL_PCD_IRQHandler+0x748>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f003 fd78 	bl	800bba8 <USB_ReadInterrupts>
 80080b8:	4603      	mov	r3, r0
 80080ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080c2:	d13b      	bne.n	800813c <HAL_PCD_IRQHandler+0x80a>
 80080c4:	2301      	movs	r3, #1
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24
 80080c8:	e02b      	b.n	8008122 <HAL_PCD_IRQHandler+0x7f0>
 80080ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	61bb      	str	r3, [r7, #24]
 80080da:	6879      	ldr	r1, [r7, #4]
 80080dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080de:	4613      	mov	r3, r2
 80080e0:	00db      	lsls	r3, r3, #3
 80080e2:	4413      	add	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	440b      	add	r3, r1
 80080e8:	3340      	adds	r3, #64	; 0x40
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d115      	bne.n	800811c <HAL_PCD_IRQHandler+0x7ea>
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	da12      	bge.n	800811c <HAL_PCD_IRQHandler+0x7ea>
 80080f6:	6879      	ldr	r1, [r7, #4]
 80080f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080fa:	4613      	mov	r3, r2
 80080fc:	00db      	lsls	r3, r3, #3
 80080fe:	4413      	add	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	440b      	add	r3, r1
 8008104:	333f      	adds	r3, #63	; 0x3f
 8008106:	2201      	movs	r2, #1
 8008108:	701a      	strb	r2, [r3, #0]
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	b2db      	uxtb	r3, r3
 800810e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008112:	b2db      	uxtb	r3, r3
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fae8 	bl	80086ec <HAL_PCD_EP_Abort>
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	3301      	adds	r3, #1
 8008120:	627b      	str	r3, [r7, #36]	; 0x24
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008128:	429a      	cmp	r2, r3
 800812a:	d3ce      	bcc.n	80080ca <HAL_PCD_IRQHandler+0x798>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	695a      	ldr	r2, [r3, #20]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800813a:	615a      	str	r2, [r3, #20]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4618      	mov	r0, r3
 8008142:	f003 fd31 	bl	800bba8 <USB_ReadInterrupts>
 8008146:	4603      	mov	r3, r0
 8008148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800814c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008150:	d155      	bne.n	80081fe <HAL_PCD_IRQHandler+0x8cc>
 8008152:	2301      	movs	r3, #1
 8008154:	627b      	str	r3, [r7, #36]	; 0x24
 8008156:	e045      	b.n	80081e4 <HAL_PCD_IRQHandler+0x8b2>
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	015a      	lsls	r2, r3, #5
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	4413      	add	r3, r2
 8008160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	61bb      	str	r3, [r7, #24]
 8008168:	6879      	ldr	r1, [r7, #4]
 800816a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800816c:	4613      	mov	r3, r2
 800816e:	00db      	lsls	r3, r3, #3
 8008170:	4413      	add	r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	440b      	add	r3, r1
 8008176:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d12e      	bne.n	80081de <HAL_PCD_IRQHandler+0x8ac>
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	2b00      	cmp	r3, #0
 8008184:	da2b      	bge.n	80081de <HAL_PCD_IRQHandler+0x8ac>
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	429a      	cmp	r2, r3
 8008198:	d121      	bne.n	80081de <HAL_PCD_IRQHandler+0x8ac>
 800819a:	6879      	ldr	r1, [r7, #4]
 800819c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800819e:	4613      	mov	r3, r2
 80081a0:	00db      	lsls	r3, r3, #3
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	440b      	add	r3, r1
 80081a8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80081ac:	2201      	movs	r2, #1
 80081ae:	701a      	strb	r2, [r3, #0]
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	699b      	ldr	r3, [r3, #24]
 80081b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	619a      	str	r2, [r3, #24]
 80081bc:	6a3b      	ldr	r3, [r7, #32]
 80081be:	695b      	ldr	r3, [r3, #20]
 80081c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10a      	bne.n	80081de <HAL_PCD_IRQHandler+0x8ac>
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	69fa      	ldr	r2, [r7, #28]
 80081d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80081da:	6053      	str	r3, [r2, #4]
 80081dc:	e007      	b.n	80081ee <HAL_PCD_IRQHandler+0x8bc>
 80081de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e0:	3301      	adds	r3, #1
 80081e2:	627b      	str	r3, [r7, #36]	; 0x24
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d3b4      	bcc.n	8008158 <HAL_PCD_IRQHandler+0x826>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	695a      	ldr	r2, [r3, #20]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80081fc:	615a      	str	r2, [r3, #20]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4618      	mov	r0, r3
 8008204:	f003 fcd0 	bl	800bba8 <USB_ReadInterrupts>
 8008208:	4603      	mov	r3, r0
 800820a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800820e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008212:	d10a      	bne.n	800822a <HAL_PCD_IRQHandler+0x8f8>
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f007 fc67 	bl	800fae8 <HAL_PCD_ConnectCallback>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	695a      	ldr	r2, [r3, #20]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008228:	615a      	str	r2, [r3, #20]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4618      	mov	r0, r3
 8008230:	f003 fcba 	bl	800bba8 <USB_ReadInterrupts>
 8008234:	4603      	mov	r3, r0
 8008236:	f003 0304 	and.w	r3, r3, #4
 800823a:	2b04      	cmp	r3, #4
 800823c:	d115      	bne.n	800826a <HAL_PCD_IRQHandler+0x938>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	61bb      	str	r3, [r7, #24]
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	f003 0304 	and.w	r3, r3, #4
 800824c:	2b00      	cmp	r3, #0
 800824e:	d002      	beq.n	8008256 <HAL_PCD_IRQHandler+0x924>
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f007 fc57 	bl	800fb04 <HAL_PCD_DisconnectCallback>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6859      	ldr	r1, [r3, #4]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	430a      	orrs	r2, r1
 8008264:	605a      	str	r2, [r3, #4]
 8008266:	e000      	b.n	800826a <HAL_PCD_IRQHandler+0x938>
 8008268:	bf00      	nop
 800826a:	3734      	adds	r7, #52	; 0x34
 800826c:	46bd      	mov	sp, r7
 800826e:	bd90      	pop	{r4, r7, pc}

08008270 <HAL_PCD_SetAddress>:
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	70fb      	strb	r3, [r7, #3]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008282:	2b01      	cmp	r3, #1
 8008284:	d101      	bne.n	800828a <HAL_PCD_SetAddress+0x1a>
 8008286:	2302      	movs	r3, #2
 8008288:	e013      	b.n	80082b2 <HAL_PCD_SetAddress+0x42>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2201      	movs	r2, #1
 800828e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	78fa      	ldrb	r2, [r7, #3]
 8008296:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	78fa      	ldrb	r2, [r7, #3]
 80082a0:	4611      	mov	r1, r2
 80082a2:	4618      	mov	r0, r3
 80082a4:	f003 fc18 	bl	800bad8 <USB_SetDevAddress>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80082b0:	2300      	movs	r3, #0
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <HAL_PCD_EP_Open>:
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b084      	sub	sp, #16
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	4608      	mov	r0, r1
 80082c4:	4611      	mov	r1, r2
 80082c6:	461a      	mov	r2, r3
 80082c8:	4603      	mov	r3, r0
 80082ca:	70fb      	strb	r3, [r7, #3]
 80082cc:	460b      	mov	r3, r1
 80082ce:	803b      	strh	r3, [r7, #0]
 80082d0:	4613      	mov	r3, r2
 80082d2:	70bb      	strb	r3, [r7, #2]
 80082d4:	2300      	movs	r3, #0
 80082d6:	72fb      	strb	r3, [r7, #11]
 80082d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	da0f      	bge.n	8008300 <HAL_PCD_EP_Open+0x46>
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	f003 020f 	and.w	r2, r3, #15
 80082e6:	4613      	mov	r3, r2
 80082e8:	00db      	lsls	r3, r3, #3
 80082ea:	4413      	add	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	3338      	adds	r3, #56	; 0x38
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	4413      	add	r3, r2
 80082f4:	3304      	adds	r3, #4
 80082f6:	60fb      	str	r3, [r7, #12]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2201      	movs	r2, #1
 80082fc:	705a      	strb	r2, [r3, #1]
 80082fe:	e00f      	b.n	8008320 <HAL_PCD_EP_Open+0x66>
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	f003 020f 	and.w	r2, r3, #15
 8008306:	4613      	mov	r3, r2
 8008308:	00db      	lsls	r3, r3, #3
 800830a:	4413      	add	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	4413      	add	r3, r2
 8008316:	3304      	adds	r3, #4
 8008318:	60fb      	str	r3, [r7, #12]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	705a      	strb	r2, [r3, #1]
 8008320:	78fb      	ldrb	r3, [r7, #3]
 8008322:	f003 030f 	and.w	r3, r3, #15
 8008326:	b2da      	uxtb	r2, r3
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	701a      	strb	r2, [r3, #0]
 800832c:	883a      	ldrh	r2, [r7, #0]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	60da      	str	r2, [r3, #12]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	78ba      	ldrb	r2, [r7, #2]
 8008336:	711a      	strb	r2, [r3, #4]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	785b      	ldrb	r3, [r3, #1]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d004      	beq.n	800834a <HAL_PCD_EP_Open+0x90>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	b29a      	uxth	r2, r3
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	811a      	strh	r2, [r3, #8]
 800834a:	78bb      	ldrb	r3, [r7, #2]
 800834c:	2b02      	cmp	r3, #2
 800834e:	d102      	bne.n	8008356 <HAL_PCD_EP_Open+0x9c>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	715a      	strb	r2, [r3, #5]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800835c:	2b01      	cmp	r3, #1
 800835e:	d101      	bne.n	8008364 <HAL_PCD_EP_Open+0xaa>
 8008360:	2302      	movs	r3, #2
 8008362:	e00e      	b.n	8008382 <HAL_PCD_EP_Open+0xc8>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68f9      	ldr	r1, [r7, #12]
 8008372:	4618      	mov	r0, r3
 8008374:	f002 fc98 	bl	800aca8 <USB_ActivateEndpoint>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008380:	7afb      	ldrb	r3, [r7, #11]
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <HAL_PCD_EP_Close>:
 800838a:	b580      	push	{r7, lr}
 800838c:	b084      	sub	sp, #16
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	460b      	mov	r3, r1
 8008394:	70fb      	strb	r3, [r7, #3]
 8008396:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800839a:	2b00      	cmp	r3, #0
 800839c:	da0f      	bge.n	80083be <HAL_PCD_EP_Close+0x34>
 800839e:	78fb      	ldrb	r3, [r7, #3]
 80083a0:	f003 020f 	and.w	r2, r3, #15
 80083a4:	4613      	mov	r3, r2
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	4413      	add	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	3338      	adds	r3, #56	; 0x38
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	4413      	add	r3, r2
 80083b2:	3304      	adds	r3, #4
 80083b4:	60fb      	str	r3, [r7, #12]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2201      	movs	r2, #1
 80083ba:	705a      	strb	r2, [r3, #1]
 80083bc:	e00f      	b.n	80083de <HAL_PCD_EP_Close+0x54>
 80083be:	78fb      	ldrb	r3, [r7, #3]
 80083c0:	f003 020f 	and.w	r2, r3, #15
 80083c4:	4613      	mov	r3, r2
 80083c6:	00db      	lsls	r3, r3, #3
 80083c8:	4413      	add	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	4413      	add	r3, r2
 80083d4:	3304      	adds	r3, #4
 80083d6:	60fb      	str	r3, [r7, #12]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	705a      	strb	r2, [r3, #1]
 80083de:	78fb      	ldrb	r3, [r7, #3]
 80083e0:	f003 030f 	and.w	r3, r3, #15
 80083e4:	b2da      	uxtb	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	701a      	strb	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d101      	bne.n	80083f8 <HAL_PCD_EP_Close+0x6e>
 80083f4:	2302      	movs	r3, #2
 80083f6:	e00e      	b.n	8008416 <HAL_PCD_EP_Close+0x8c>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68f9      	ldr	r1, [r7, #12]
 8008406:	4618      	mov	r0, r3
 8008408:	f002 fcd6 	bl	800adb8 <USB_DeactivateEndpoint>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008414:	2300      	movs	r3, #0
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <HAL_PCD_EP_Receive>:
 800841e:	b580      	push	{r7, lr}
 8008420:	b086      	sub	sp, #24
 8008422:	af00      	add	r7, sp, #0
 8008424:	60f8      	str	r0, [r7, #12]
 8008426:	607a      	str	r2, [r7, #4]
 8008428:	603b      	str	r3, [r7, #0]
 800842a:	460b      	mov	r3, r1
 800842c:	72fb      	strb	r3, [r7, #11]
 800842e:	7afb      	ldrb	r3, [r7, #11]
 8008430:	f003 020f 	and.w	r2, r3, #15
 8008434:	4613      	mov	r3, r2
 8008436:	00db      	lsls	r3, r3, #3
 8008438:	4413      	add	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	4413      	add	r3, r2
 8008444:	3304      	adds	r3, #4
 8008446:	617b      	str	r3, [r7, #20]
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	611a      	str	r2, [r3, #16]
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	619a      	str	r2, [r3, #24]
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	2200      	movs	r2, #0
 8008458:	621a      	str	r2, [r3, #32]
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	2200      	movs	r2, #0
 800845e:	705a      	strb	r2, [r3, #1]
 8008460:	7afb      	ldrb	r3, [r7, #11]
 8008462:	f003 030f 	and.w	r3, r3, #15
 8008466:	b2da      	uxtb	r2, r3
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	701a      	strb	r2, [r3, #0]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d102      	bne.n	800847a <HAL_PCD_EP_Receive+0x5c>
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	615a      	str	r2, [r3, #20]
 800847a:	7afb      	ldrb	r3, [r7, #11]
 800847c:	f003 030f 	and.w	r3, r3, #15
 8008480:	2b00      	cmp	r3, #0
 8008482:	d109      	bne.n	8008498 <HAL_PCD_EP_Receive+0x7a>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6818      	ldr	r0, [r3, #0]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	b2db      	uxtb	r3, r3
 800848e:	461a      	mov	r2, r3
 8008490:	6979      	ldr	r1, [r7, #20]
 8008492:	f002 ffb5 	bl	800b400 <USB_EP0StartXfer>
 8008496:	e008      	b.n	80084aa <HAL_PCD_EP_Receive+0x8c>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6818      	ldr	r0, [r3, #0]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	461a      	mov	r2, r3
 80084a4:	6979      	ldr	r1, [r7, #20]
 80084a6:	f002 fd63 	bl	800af70 <USB_EPStartXfer>
 80084aa:	2300      	movs	r3, #0
 80084ac:	4618      	mov	r0, r3
 80084ae:	3718      	adds	r7, #24
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <HAL_PCD_EP_GetRxCount>:
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	70fb      	strb	r3, [r7, #3]
 80084c0:	78fb      	ldrb	r3, [r7, #3]
 80084c2:	f003 020f 	and.w	r2, r3, #15
 80084c6:	6879      	ldr	r1, [r7, #4]
 80084c8:	4613      	mov	r3, r2
 80084ca:	00db      	lsls	r3, r3, #3
 80084cc:	4413      	add	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	440b      	add	r3, r1
 80084d2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <HAL_PCD_EP_Transmit>:
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b086      	sub	sp, #24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	607a      	str	r2, [r7, #4]
 80084ee:	603b      	str	r3, [r7, #0]
 80084f0:	460b      	mov	r3, r1
 80084f2:	72fb      	strb	r3, [r7, #11]
 80084f4:	7afb      	ldrb	r3, [r7, #11]
 80084f6:	f003 020f 	and.w	r2, r3, #15
 80084fa:	4613      	mov	r3, r2
 80084fc:	00db      	lsls	r3, r3, #3
 80084fe:	4413      	add	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	3338      	adds	r3, #56	; 0x38
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	4413      	add	r3, r2
 8008508:	3304      	adds	r3, #4
 800850a:	617b      	str	r3, [r7, #20]
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	611a      	str	r2, [r3, #16]
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	683a      	ldr	r2, [r7, #0]
 8008516:	619a      	str	r2, [r3, #24]
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	2200      	movs	r2, #0
 800851c:	621a      	str	r2, [r3, #32]
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2201      	movs	r2, #1
 8008522:	705a      	strb	r2, [r3, #1]
 8008524:	7afb      	ldrb	r3, [r7, #11]
 8008526:	f003 030f 	and.w	r3, r3, #15
 800852a:	b2da      	uxtb	r2, r3
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	701a      	strb	r2, [r3, #0]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d102      	bne.n	800853e <HAL_PCD_EP_Transmit+0x5a>
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	615a      	str	r2, [r3, #20]
 800853e:	7afb      	ldrb	r3, [r7, #11]
 8008540:	f003 030f 	and.w	r3, r3, #15
 8008544:	2b00      	cmp	r3, #0
 8008546:	d109      	bne.n	800855c <HAL_PCD_EP_Transmit+0x78>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6818      	ldr	r0, [r3, #0]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	b2db      	uxtb	r3, r3
 8008552:	461a      	mov	r2, r3
 8008554:	6979      	ldr	r1, [r7, #20]
 8008556:	f002 ff53 	bl	800b400 <USB_EP0StartXfer>
 800855a:	e008      	b.n	800856e <HAL_PCD_EP_Transmit+0x8a>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6818      	ldr	r0, [r3, #0]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	b2db      	uxtb	r3, r3
 8008566:	461a      	mov	r2, r3
 8008568:	6979      	ldr	r1, [r7, #20]
 800856a:	f002 fd01 	bl	800af70 <USB_EPStartXfer>
 800856e:	2300      	movs	r3, #0
 8008570:	4618      	mov	r0, r3
 8008572:	3718      	adds	r7, #24
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <HAL_PCD_EP_SetStall>:
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	460b      	mov	r3, r1
 8008582:	70fb      	strb	r3, [r7, #3]
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	f003 020f 	and.w	r2, r3, #15
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	429a      	cmp	r2, r3
 8008590:	d901      	bls.n	8008596 <HAL_PCD_EP_SetStall+0x1e>
 8008592:	2301      	movs	r3, #1
 8008594:	e050      	b.n	8008638 <HAL_PCD_EP_SetStall+0xc0>
 8008596:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800859a:	2b00      	cmp	r3, #0
 800859c:	da0f      	bge.n	80085be <HAL_PCD_EP_SetStall+0x46>
 800859e:	78fb      	ldrb	r3, [r7, #3]
 80085a0:	f003 020f 	and.w	r2, r3, #15
 80085a4:	4613      	mov	r3, r2
 80085a6:	00db      	lsls	r3, r3, #3
 80085a8:	4413      	add	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	3338      	adds	r3, #56	; 0x38
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	4413      	add	r3, r2
 80085b2:	3304      	adds	r3, #4
 80085b4:	60fb      	str	r3, [r7, #12]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2201      	movs	r2, #1
 80085ba:	705a      	strb	r2, [r3, #1]
 80085bc:	e00d      	b.n	80085da <HAL_PCD_EP_SetStall+0x62>
 80085be:	78fa      	ldrb	r2, [r7, #3]
 80085c0:	4613      	mov	r3, r2
 80085c2:	00db      	lsls	r3, r3, #3
 80085c4:	4413      	add	r3, r2
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	4413      	add	r3, r2
 80085d0:	3304      	adds	r3, #4
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	705a      	strb	r2, [r3, #1]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2201      	movs	r2, #1
 80085de:	709a      	strb	r2, [r3, #2]
 80085e0:	78fb      	ldrb	r3, [r7, #3]
 80085e2:	f003 030f 	and.w	r3, r3, #15
 80085e6:	b2da      	uxtb	r2, r3
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	701a      	strb	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d101      	bne.n	80085fa <HAL_PCD_EP_SetStall+0x82>
 80085f6:	2302      	movs	r3, #2
 80085f8:	e01e      	b.n	8008638 <HAL_PCD_EP_SetStall+0xc0>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68f9      	ldr	r1, [r7, #12]
 8008608:	4618      	mov	r0, r3
 800860a:	f003 f991 	bl	800b930 <USB_EPSetStall>
 800860e:	78fb      	ldrb	r3, [r7, #3]
 8008610:	f003 030f 	and.w	r3, r3, #15
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10a      	bne.n	800862e <HAL_PCD_EP_SetStall+0xb6>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6818      	ldr	r0, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	b2d9      	uxtb	r1, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008628:	461a      	mov	r2, r3
 800862a:	f003 fb81 	bl	800bd30 <USB_EP0_OutStart>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008636:	2300      	movs	r3, #0
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <HAL_PCD_EP_ClrStall>:
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	460b      	mov	r3, r1
 800864a:	70fb      	strb	r3, [r7, #3]
 800864c:	78fb      	ldrb	r3, [r7, #3]
 800864e:	f003 020f 	and.w	r2, r3, #15
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	429a      	cmp	r2, r3
 8008658:	d901      	bls.n	800865e <HAL_PCD_EP_ClrStall+0x1e>
 800865a:	2301      	movs	r3, #1
 800865c:	e042      	b.n	80086e4 <HAL_PCD_EP_ClrStall+0xa4>
 800865e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008662:	2b00      	cmp	r3, #0
 8008664:	da0f      	bge.n	8008686 <HAL_PCD_EP_ClrStall+0x46>
 8008666:	78fb      	ldrb	r3, [r7, #3]
 8008668:	f003 020f 	and.w	r2, r3, #15
 800866c:	4613      	mov	r3, r2
 800866e:	00db      	lsls	r3, r3, #3
 8008670:	4413      	add	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	3338      	adds	r3, #56	; 0x38
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	4413      	add	r3, r2
 800867a:	3304      	adds	r3, #4
 800867c:	60fb      	str	r3, [r7, #12]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2201      	movs	r2, #1
 8008682:	705a      	strb	r2, [r3, #1]
 8008684:	e00f      	b.n	80086a6 <HAL_PCD_EP_ClrStall+0x66>
 8008686:	78fb      	ldrb	r3, [r7, #3]
 8008688:	f003 020f 	and.w	r2, r3, #15
 800868c:	4613      	mov	r3, r2
 800868e:	00db      	lsls	r3, r3, #3
 8008690:	4413      	add	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	4413      	add	r3, r2
 800869c:	3304      	adds	r3, #4
 800869e:	60fb      	str	r3, [r7, #12]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	705a      	strb	r2, [r3, #1]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	709a      	strb	r2, [r3, #2]
 80086ac:	78fb      	ldrb	r3, [r7, #3]
 80086ae:	f003 030f 	and.w	r3, r3, #15
 80086b2:	b2da      	uxtb	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	701a      	strb	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d101      	bne.n	80086c6 <HAL_PCD_EP_ClrStall+0x86>
 80086c2:	2302      	movs	r3, #2
 80086c4:	e00e      	b.n	80086e4 <HAL_PCD_EP_ClrStall+0xa4>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68f9      	ldr	r1, [r7, #12]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f003 f999 	bl	800ba0c <USB_EPClearStall>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80086e2:	2300      	movs	r3, #0
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <HAL_PCD_EP_Abort>:
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	70fb      	strb	r3, [r7, #3]
 80086f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	da0c      	bge.n	800871a <HAL_PCD_EP_Abort+0x2e>
 8008700:	78fb      	ldrb	r3, [r7, #3]
 8008702:	f003 020f 	and.w	r2, r3, #15
 8008706:	4613      	mov	r3, r2
 8008708:	00db      	lsls	r3, r3, #3
 800870a:	4413      	add	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	3338      	adds	r3, #56	; 0x38
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	4413      	add	r3, r2
 8008714:	3304      	adds	r3, #4
 8008716:	60fb      	str	r3, [r7, #12]
 8008718:	e00c      	b.n	8008734 <HAL_PCD_EP_Abort+0x48>
 800871a:	78fb      	ldrb	r3, [r7, #3]
 800871c:	f003 020f 	and.w	r2, r3, #15
 8008720:	4613      	mov	r3, r2
 8008722:	00db      	lsls	r3, r3, #3
 8008724:	4413      	add	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	4413      	add	r3, r2
 8008730:	3304      	adds	r3, #4
 8008732:	60fb      	str	r3, [r7, #12]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68f9      	ldr	r1, [r7, #12]
 800873a:	4618      	mov	r0, r3
 800873c:	f002 ffb8 	bl	800b6b0 <USB_EPStopXfer>
 8008740:	4603      	mov	r3, r0
 8008742:	72fb      	strb	r3, [r7, #11]
 8008744:	7afb      	ldrb	r3, [r7, #11]
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <PCD_WriteEmptyTxFifo>:
 800874e:	b580      	push	{r7, lr}
 8008750:	b08a      	sub	sp, #40	; 0x28
 8008752:	af02      	add	r7, sp, #8
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	6039      	str	r1, [r7, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	617b      	str	r3, [r7, #20]
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	613b      	str	r3, [r7, #16]
 8008762:	683a      	ldr	r2, [r7, #0]
 8008764:	4613      	mov	r3, r2
 8008766:	00db      	lsls	r3, r3, #3
 8008768:	4413      	add	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	3338      	adds	r3, #56	; 0x38
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	4413      	add	r3, r2
 8008772:	3304      	adds	r3, #4
 8008774:	60fb      	str	r3, [r7, #12]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6a1a      	ldr	r2, [r3, #32]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	429a      	cmp	r2, r3
 8008780:	d901      	bls.n	8008786 <PCD_WriteEmptyTxFifo+0x38>
 8008782:	2301      	movs	r3, #1
 8008784:	e06c      	b.n	8008860 <PCD_WriteEmptyTxFifo+0x112>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	699a      	ldr	r2, [r3, #24]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6a1b      	ldr	r3, [r3, #32]
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	61fb      	str	r3, [r7, #28]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	69fa      	ldr	r2, [r7, #28]
 8008798:	429a      	cmp	r2, r3
 800879a:	d902      	bls.n	80087a2 <PCD_WriteEmptyTxFifo+0x54>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	61fb      	str	r3, [r7, #28]
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	3303      	adds	r3, #3
 80087a6:	089b      	lsrs	r3, r3, #2
 80087a8:	61bb      	str	r3, [r7, #24]
 80087aa:	e02b      	b.n	8008804 <PCD_WriteEmptyTxFifo+0xb6>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	699a      	ldr	r2, [r3, #24]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6a1b      	ldr	r3, [r3, #32]
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	61fb      	str	r3, [r7, #28]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	69fa      	ldr	r2, [r7, #28]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d902      	bls.n	80087c8 <PCD_WriteEmptyTxFifo+0x7a>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	61fb      	str	r3, [r7, #28]
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	3303      	adds	r3, #3
 80087cc:	089b      	lsrs	r3, r3, #2
 80087ce:	61bb      	str	r3, [r7, #24]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6919      	ldr	r1, [r3, #16]
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	b298      	uxth	r0, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	4603      	mov	r3, r0
 80087e6:	6978      	ldr	r0, [r7, #20]
 80087e8:	f003 f80c 	bl	800b804 <USB_WritePacket>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	691a      	ldr	r2, [r3, #16]
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	441a      	add	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	611a      	str	r2, [r3, #16]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6a1a      	ldr	r2, [r3, #32]
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	441a      	add	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	621a      	str	r2, [r3, #32]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	4413      	add	r3, r2
 800880c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	b29b      	uxth	r3, r3
 8008814:	69ba      	ldr	r2, [r7, #24]
 8008816:	429a      	cmp	r2, r3
 8008818:	d809      	bhi.n	800882e <PCD_WriteEmptyTxFifo+0xe0>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6a1a      	ldr	r2, [r3, #32]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	699b      	ldr	r3, [r3, #24]
 8008822:	429a      	cmp	r2, r3
 8008824:	d203      	bcs.n	800882e <PCD_WriteEmptyTxFifo+0xe0>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	699b      	ldr	r3, [r3, #24]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1be      	bne.n	80087ac <PCD_WriteEmptyTxFifo+0x5e>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	699a      	ldr	r2, [r3, #24]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	429a      	cmp	r2, r3
 8008838:	d811      	bhi.n	800885e <PCD_WriteEmptyTxFifo+0x110>
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	f003 030f 	and.w	r3, r3, #15
 8008840:	2201      	movs	r2, #1
 8008842:	fa02 f303 	lsl.w	r3, r2, r3
 8008846:	60bb      	str	r3, [r7, #8]
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800884e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	43db      	mvns	r3, r3
 8008854:	6939      	ldr	r1, [r7, #16]
 8008856:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800885a:	4013      	ands	r3, r2
 800885c:	634b      	str	r3, [r1, #52]	; 0x34
 800885e:	2300      	movs	r3, #0
 8008860:	4618      	mov	r0, r3
 8008862:	3720      	adds	r7, #32
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <PCD_EP_OutXfrComplete_int>:
 8008868:	b580      	push	{r7, lr}
 800886a:	b088      	sub	sp, #32
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	61fb      	str	r3, [r7, #28]
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	61bb      	str	r3, [r7, #24]
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	333c      	adds	r3, #60	; 0x3c
 8008880:	3304      	adds	r3, #4
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	617b      	str	r3, [r7, #20]
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	015a      	lsls	r2, r3, #5
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	4413      	add	r3, r2
 800888e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	613b      	str	r3, [r7, #16]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d17b      	bne.n	8008996 <PCD_EP_OutXfrComplete_int+0x12e>
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	f003 0308 	and.w	r3, r3, #8
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d015      	beq.n	80088d4 <PCD_EP_OutXfrComplete_int+0x6c>
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	4a61      	ldr	r2, [pc, #388]	; (8008a30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	f240 80b9 	bls.w	8008a24 <PCD_EP_OutXfrComplete_int+0x1bc>
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f000 80b3 	beq.w	8008a24 <PCD_EP_OutXfrComplete_int+0x1bc>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	015a      	lsls	r2, r3, #5
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	4413      	add	r3, r2
 80088c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ca:	461a      	mov	r2, r3
 80088cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088d0:	6093      	str	r3, [r2, #8]
 80088d2:	e0a7      	b.n	8008a24 <PCD_EP_OutXfrComplete_int+0x1bc>
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	f003 0320 	and.w	r3, r3, #32
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d009      	beq.n	80088f2 <PCD_EP_OutXfrComplete_int+0x8a>
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	015a      	lsls	r2, r3, #5
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	4413      	add	r3, r2
 80088e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ea:	461a      	mov	r2, r3
 80088ec:	2320      	movs	r3, #32
 80088ee:	6093      	str	r3, [r2, #8]
 80088f0:	e098      	b.n	8008a24 <PCD_EP_OutXfrComplete_int+0x1bc>
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f040 8093 	bne.w	8008a24 <PCD_EP_OutXfrComplete_int+0x1bc>
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	4a4b      	ldr	r2, [pc, #300]	; (8008a30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d90f      	bls.n	8008926 <PCD_EP_OutXfrComplete_int+0xbe>
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00a      	beq.n	8008926 <PCD_EP_OutXfrComplete_int+0xbe>
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	4413      	add	r3, r2
 8008918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891c:	461a      	mov	r2, r3
 800891e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008922:	6093      	str	r3, [r2, #8]
 8008924:	e07e      	b.n	8008a24 <PCD_EP_OutXfrComplete_int+0x1bc>
 8008926:	683a      	ldr	r2, [r7, #0]
 8008928:	4613      	mov	r3, r2
 800892a:	00db      	lsls	r3, r3, #3
 800892c:	4413      	add	r3, r2
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	4413      	add	r3, r2
 8008938:	3304      	adds	r3, #4
 800893a:	60fb      	str	r3, [r7, #12]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	69da      	ldr	r2, [r3, #28]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	0159      	lsls	r1, r3, #5
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	440b      	add	r3, r1
 8008948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008952:	1ad2      	subs	r2, r2, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	621a      	str	r2, [r3, #32]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d114      	bne.n	8008988 <PCD_EP_OutXfrComplete_int+0x120>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d109      	bne.n	800897a <PCD_EP_OutXfrComplete_int+0x112>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6818      	ldr	r0, [r3, #0]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008970:	461a      	mov	r2, r3
 8008972:	2101      	movs	r1, #1
 8008974:	f003 f9dc 	bl	800bd30 <USB_EP0_OutStart>
 8008978:	e006      	b.n	8008988 <PCD_EP_OutXfrComplete_int+0x120>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	691a      	ldr	r2, [r3, #16]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6a1b      	ldr	r3, [r3, #32]
 8008982:	441a      	add	r2, r3
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	611a      	str	r2, [r3, #16]
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	b2db      	uxtb	r3, r3
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f006 fff0 	bl	800f974 <HAL_PCD_DataOutStageCallback>
 8008994:	e046      	b.n	8008a24 <PCD_EP_OutXfrComplete_int+0x1bc>
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	4a26      	ldr	r2, [pc, #152]	; (8008a34 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d124      	bne.n	80089e8 <PCD_EP_OutXfrComplete_int+0x180>
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00a      	beq.n	80089be <PCD_EP_OutXfrComplete_int+0x156>
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b4:	461a      	mov	r2, r3
 80089b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089ba:	6093      	str	r3, [r2, #8]
 80089bc:	e032      	b.n	8008a24 <PCD_EP_OutXfrComplete_int+0x1bc>
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	f003 0320 	and.w	r3, r3, #32
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d008      	beq.n	80089da <PCD_EP_OutXfrComplete_int+0x172>
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	015a      	lsls	r2, r3, #5
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	4413      	add	r3, r2
 80089d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d4:	461a      	mov	r2, r3
 80089d6:	2320      	movs	r3, #32
 80089d8:	6093      	str	r3, [r2, #8]
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	4619      	mov	r1, r3
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f006 ffc7 	bl	800f974 <HAL_PCD_DataOutStageCallback>
 80089e6:	e01d      	b.n	8008a24 <PCD_EP_OutXfrComplete_int+0x1bc>
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d114      	bne.n	8008a18 <PCD_EP_OutXfrComplete_int+0x1b0>
 80089ee:	6879      	ldr	r1, [r7, #4]
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	4613      	mov	r3, r2
 80089f4:	00db      	lsls	r3, r3, #3
 80089f6:	4413      	add	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	440b      	add	r3, r1
 80089fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d108      	bne.n	8008a18 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6818      	ldr	r0, [r3, #0]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a10:	461a      	mov	r2, r3
 8008a12:	2100      	movs	r1, #0
 8008a14:	f003 f98c 	bl	800bd30 <USB_EP0_OutStart>
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f006 ffa8 	bl	800f974 <HAL_PCD_DataOutStageCallback>
 8008a24:	2300      	movs	r3, #0
 8008a26:	4618      	mov	r0, r3
 8008a28:	3720      	adds	r7, #32
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	4f54300a 	.word	0x4f54300a
 8008a34:	4f54310a 	.word	0x4f54310a

08008a38 <PCD_EP_OutSetupPacket_int>:
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	617b      	str	r3, [r7, #20]
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	613b      	str	r3, [r7, #16]
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	333c      	adds	r3, #60	; 0x3c
 8008a50:	3304      	adds	r3, #4
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	60fb      	str	r3, [r7, #12]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	015a      	lsls	r2, r3, #5
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	60bb      	str	r3, [r7, #8]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	4a15      	ldr	r2, [pc, #84]	; (8008ac0 <PCD_EP_OutSetupPacket_int+0x88>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d90e      	bls.n	8008a8c <PCD_EP_OutSetupPacket_int+0x54>
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d009      	beq.n	8008a8c <PCD_EP_OutSetupPacket_int+0x54>
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	015a      	lsls	r2, r3, #5
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	4413      	add	r3, r2
 8008a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a84:	461a      	mov	r2, r3
 8008a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a8a:	6093      	str	r3, [r2, #8]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f006 ff5f 	bl	800f950 <HAL_PCD_SetupStageCallback>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	4a0a      	ldr	r2, [pc, #40]	; (8008ac0 <PCD_EP_OutSetupPacket_int+0x88>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d90c      	bls.n	8008ab4 <PCD_EP_OutSetupPacket_int+0x7c>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d108      	bne.n	8008ab4 <PCD_EP_OutSetupPacket_int+0x7c>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6818      	ldr	r0, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008aac:	461a      	mov	r2, r3
 8008aae:	2101      	movs	r1, #1
 8008ab0:	f003 f93e 	bl	800bd30 <USB_EP0_OutStart>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3718      	adds	r7, #24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	4f54300a 	.word	0x4f54300a

08008ac4 <HAL_PCDEx_SetTxFiFo>:
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	70fb      	strb	r3, [r7, #3]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	803b      	strh	r3, [r7, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ada:	60bb      	str	r3, [r7, #8]
 8008adc:	78fb      	ldrb	r3, [r7, #3]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d107      	bne.n	8008af2 <HAL_PCDEx_SetTxFiFo+0x2e>
 8008ae2:	883b      	ldrh	r3, [r7, #0]
 8008ae4:	0419      	lsls	r1, r3, #16
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	430a      	orrs	r2, r1
 8008aee:	629a      	str	r2, [r3, #40]	; 0x28
 8008af0:	e028      	b.n	8008b44 <HAL_PCDEx_SetTxFiFo+0x80>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af8:	0c1b      	lsrs	r3, r3, #16
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	4413      	add	r3, r2
 8008afe:	60bb      	str	r3, [r7, #8]
 8008b00:	2300      	movs	r3, #0
 8008b02:	73fb      	strb	r3, [r7, #15]
 8008b04:	e00d      	b.n	8008b22 <HAL_PCDEx_SetTxFiFo+0x5e>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
 8008b0c:	3340      	adds	r3, #64	; 0x40
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4413      	add	r3, r2
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	0c1b      	lsrs	r3, r3, #16
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	4413      	add	r3, r2
 8008b1a:	60bb      	str	r3, [r7, #8]
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	73fb      	strb	r3, [r7, #15]
 8008b22:	7bfa      	ldrb	r2, [r7, #15]
 8008b24:	78fb      	ldrb	r3, [r7, #3]
 8008b26:	3b01      	subs	r3, #1
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d3ec      	bcc.n	8008b06 <HAL_PCDEx_SetTxFiFo+0x42>
 8008b2c:	883b      	ldrh	r3, [r7, #0]
 8008b2e:	0418      	lsls	r0, r3, #16
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6819      	ldr	r1, [r3, #0]
 8008b34:	78fb      	ldrb	r3, [r7, #3]
 8008b36:	3b01      	subs	r3, #1
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	4302      	orrs	r2, r0
 8008b3c:	3340      	adds	r3, #64	; 0x40
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	440b      	add	r3, r1
 8008b42:	605a      	str	r2, [r3, #4]
 8008b44:	2300      	movs	r3, #0
 8008b46:	4618      	mov	r0, r3
 8008b48:	3714      	adds	r7, #20
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr

08008b52 <HAL_PCDEx_SetRxFiFo>:
 8008b52:	b480      	push	{r7}
 8008b54:	b083      	sub	sp, #12
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	807b      	strh	r3, [r7, #2]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	887a      	ldrh	r2, [r7, #2]
 8008b64:	625a      	str	r2, [r3, #36]	; 0x24
 8008b66:	2300      	movs	r3, #0
 8008b68:	4618      	mov	r0, r3
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <HAL_PCDEx_LPM_Callback>:
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	70fb      	strb	r3, [r7, #3]
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <HAL_RCC_OscConfig>:
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d101      	bne.n	8008b9e <HAL_RCC_OscConfig+0x12>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e267      	b.n	800906e <HAL_RCC_OscConfig+0x4e2>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d075      	beq.n	8008c96 <HAL_RCC_OscConfig+0x10a>
 8008baa:	4b88      	ldr	r3, [pc, #544]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f003 030c 	and.w	r3, r3, #12
 8008bb2:	2b04      	cmp	r3, #4
 8008bb4:	d00c      	beq.n	8008bd0 <HAL_RCC_OscConfig+0x44>
 8008bb6:	4b85      	ldr	r3, [pc, #532]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	f003 030c 	and.w	r3, r3, #12
 8008bbe:	2b08      	cmp	r3, #8
 8008bc0:	d112      	bne.n	8008be8 <HAL_RCC_OscConfig+0x5c>
 8008bc2:	4b82      	ldr	r3, [pc, #520]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bce:	d10b      	bne.n	8008be8 <HAL_RCC_OscConfig+0x5c>
 8008bd0:	4b7e      	ldr	r3, [pc, #504]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d05b      	beq.n	8008c94 <HAL_RCC_OscConfig+0x108>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d157      	bne.n	8008c94 <HAL_RCC_OscConfig+0x108>
 8008be4:	2301      	movs	r3, #1
 8008be6:	e242      	b.n	800906e <HAL_RCC_OscConfig+0x4e2>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bf0:	d106      	bne.n	8008c00 <HAL_RCC_OscConfig+0x74>
 8008bf2:	4b76      	ldr	r3, [pc, #472]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a75      	ldr	r2, [pc, #468]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bfc:	6013      	str	r3, [r2, #0]
 8008bfe:	e01d      	b.n	8008c3c <HAL_RCC_OscConfig+0xb0>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c08:	d10c      	bne.n	8008c24 <HAL_RCC_OscConfig+0x98>
 8008c0a:	4b70      	ldr	r3, [pc, #448]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a6f      	ldr	r2, [pc, #444]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c14:	6013      	str	r3, [r2, #0]
 8008c16:	4b6d      	ldr	r3, [pc, #436]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a6c      	ldr	r2, [pc, #432]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c20:	6013      	str	r3, [r2, #0]
 8008c22:	e00b      	b.n	8008c3c <HAL_RCC_OscConfig+0xb0>
 8008c24:	4b69      	ldr	r3, [pc, #420]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a68      	ldr	r2, [pc, #416]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c2e:	6013      	str	r3, [r2, #0]
 8008c30:	4b66      	ldr	r3, [pc, #408]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a65      	ldr	r2, [pc, #404]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d013      	beq.n	8008c6c <HAL_RCC_OscConfig+0xe0>
 8008c44:	f7fb fe6e 	bl	8004924 <HAL_GetTick>
 8008c48:	6138      	str	r0, [r7, #16]
 8008c4a:	e008      	b.n	8008c5e <HAL_RCC_OscConfig+0xd2>
 8008c4c:	f7fb fe6a 	bl	8004924 <HAL_GetTick>
 8008c50:	4602      	mov	r2, r0
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	2b64      	cmp	r3, #100	; 0x64
 8008c58:	d901      	bls.n	8008c5e <HAL_RCC_OscConfig+0xd2>
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e207      	b.n	800906e <HAL_RCC_OscConfig+0x4e2>
 8008c5e:	4b5b      	ldr	r3, [pc, #364]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d0f0      	beq.n	8008c4c <HAL_RCC_OscConfig+0xc0>
 8008c6a:	e014      	b.n	8008c96 <HAL_RCC_OscConfig+0x10a>
 8008c6c:	f7fb fe5a 	bl	8004924 <HAL_GetTick>
 8008c70:	6138      	str	r0, [r7, #16]
 8008c72:	e008      	b.n	8008c86 <HAL_RCC_OscConfig+0xfa>
 8008c74:	f7fb fe56 	bl	8004924 <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	2b64      	cmp	r3, #100	; 0x64
 8008c80:	d901      	bls.n	8008c86 <HAL_RCC_OscConfig+0xfa>
 8008c82:	2303      	movs	r3, #3
 8008c84:	e1f3      	b.n	800906e <HAL_RCC_OscConfig+0x4e2>
 8008c86:	4b51      	ldr	r3, [pc, #324]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1f0      	bne.n	8008c74 <HAL_RCC_OscConfig+0xe8>
 8008c92:	e000      	b.n	8008c96 <HAL_RCC_OscConfig+0x10a>
 8008c94:	bf00      	nop
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0302 	and.w	r3, r3, #2
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d063      	beq.n	8008d6a <HAL_RCC_OscConfig+0x1de>
 8008ca2:	4b4a      	ldr	r3, [pc, #296]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f003 030c 	and.w	r3, r3, #12
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00b      	beq.n	8008cc6 <HAL_RCC_OscConfig+0x13a>
 8008cae:	4b47      	ldr	r3, [pc, #284]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	f003 030c 	and.w	r3, r3, #12
 8008cb6:	2b08      	cmp	r3, #8
 8008cb8:	d11c      	bne.n	8008cf4 <HAL_RCC_OscConfig+0x168>
 8008cba:	4b44      	ldr	r3, [pc, #272]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d116      	bne.n	8008cf4 <HAL_RCC_OscConfig+0x168>
 8008cc6:	4b41      	ldr	r3, [pc, #260]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 0302 	and.w	r3, r3, #2
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d005      	beq.n	8008cde <HAL_RCC_OscConfig+0x152>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d001      	beq.n	8008cde <HAL_RCC_OscConfig+0x152>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e1c7      	b.n	800906e <HAL_RCC_OscConfig+0x4e2>
 8008cde:	4b3b      	ldr	r3, [pc, #236]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	00db      	lsls	r3, r3, #3
 8008cec:	4937      	ldr	r1, [pc, #220]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	600b      	str	r3, [r1, #0]
 8008cf2:	e03a      	b.n	8008d6a <HAL_RCC_OscConfig+0x1de>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d020      	beq.n	8008d3e <HAL_RCC_OscConfig+0x1b2>
 8008cfc:	4b34      	ldr	r3, [pc, #208]	; (8008dd0 <HAL_RCC_OscConfig+0x244>)
 8008cfe:	2201      	movs	r2, #1
 8008d00:	601a      	str	r2, [r3, #0]
 8008d02:	f7fb fe0f 	bl	8004924 <HAL_GetTick>
 8008d06:	6138      	str	r0, [r7, #16]
 8008d08:	e008      	b.n	8008d1c <HAL_RCC_OscConfig+0x190>
 8008d0a:	f7fb fe0b 	bl	8004924 <HAL_GetTick>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d901      	bls.n	8008d1c <HAL_RCC_OscConfig+0x190>
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e1a8      	b.n	800906e <HAL_RCC_OscConfig+0x4e2>
 8008d1c:	4b2b      	ldr	r3, [pc, #172]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 0302 	and.w	r3, r3, #2
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d0f0      	beq.n	8008d0a <HAL_RCC_OscConfig+0x17e>
 8008d28:	4b28      	ldr	r3, [pc, #160]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	00db      	lsls	r3, r3, #3
 8008d36:	4925      	ldr	r1, [pc, #148]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	600b      	str	r3, [r1, #0]
 8008d3c:	e015      	b.n	8008d6a <HAL_RCC_OscConfig+0x1de>
 8008d3e:	4b24      	ldr	r3, [pc, #144]	; (8008dd0 <HAL_RCC_OscConfig+0x244>)
 8008d40:	2200      	movs	r2, #0
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	f7fb fdee 	bl	8004924 <HAL_GetTick>
 8008d48:	6138      	str	r0, [r7, #16]
 8008d4a:	e008      	b.n	8008d5e <HAL_RCC_OscConfig+0x1d2>
 8008d4c:	f7fb fdea 	bl	8004924 <HAL_GetTick>
 8008d50:	4602      	mov	r2, r0
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d901      	bls.n	8008d5e <HAL_RCC_OscConfig+0x1d2>
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e187      	b.n	800906e <HAL_RCC_OscConfig+0x4e2>
 8008d5e:	4b1b      	ldr	r3, [pc, #108]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 0302 	and.w	r3, r3, #2
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1f0      	bne.n	8008d4c <HAL_RCC_OscConfig+0x1c0>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 0308 	and.w	r3, r3, #8
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d036      	beq.n	8008de4 <HAL_RCC_OscConfig+0x258>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d016      	beq.n	8008dac <HAL_RCC_OscConfig+0x220>
 8008d7e:	4b15      	ldr	r3, [pc, #84]	; (8008dd4 <HAL_RCC_OscConfig+0x248>)
 8008d80:	2201      	movs	r2, #1
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	f7fb fdce 	bl	8004924 <HAL_GetTick>
 8008d88:	6138      	str	r0, [r7, #16]
 8008d8a:	e008      	b.n	8008d9e <HAL_RCC_OscConfig+0x212>
 8008d8c:	f7fb fdca 	bl	8004924 <HAL_GetTick>
 8008d90:	4602      	mov	r2, r0
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	d901      	bls.n	8008d9e <HAL_RCC_OscConfig+0x212>
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	e167      	b.n	800906e <HAL_RCC_OscConfig+0x4e2>
 8008d9e:	4b0b      	ldr	r3, [pc, #44]	; (8008dcc <HAL_RCC_OscConfig+0x240>)
 8008da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008da2:	f003 0302 	and.w	r3, r3, #2
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d0f0      	beq.n	8008d8c <HAL_RCC_OscConfig+0x200>
 8008daa:	e01b      	b.n	8008de4 <HAL_RCC_OscConfig+0x258>
 8008dac:	4b09      	ldr	r3, [pc, #36]	; (8008dd4 <HAL_RCC_OscConfig+0x248>)
 8008dae:	2200      	movs	r2, #0
 8008db0:	601a      	str	r2, [r3, #0]
 8008db2:	f7fb fdb7 	bl	8004924 <HAL_GetTick>
 8008db6:	6138      	str	r0, [r7, #16]
 8008db8:	e00e      	b.n	8008dd8 <HAL_RCC_OscConfig+0x24c>
 8008dba:	f7fb fdb3 	bl	8004924 <HAL_GetTick>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d907      	bls.n	8008dd8 <HAL_RCC_OscConfig+0x24c>
 8008dc8:	2303      	movs	r3, #3
 8008dca:	e150      	b.n	800906e <HAL_RCC_OscConfig+0x4e2>
 8008dcc:	40023800 	.word	0x40023800
 8008dd0:	42470000 	.word	0x42470000
 8008dd4:	42470e80 	.word	0x42470e80
 8008dd8:	4b88      	ldr	r3, [pc, #544]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ddc:	f003 0302 	and.w	r3, r3, #2
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1ea      	bne.n	8008dba <HAL_RCC_OscConfig+0x22e>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 0304 	and.w	r3, r3, #4
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 8097 	beq.w	8008f20 <HAL_RCC_OscConfig+0x394>
 8008df2:	2300      	movs	r3, #0
 8008df4:	75fb      	strb	r3, [r7, #23]
 8008df6:	4b81      	ldr	r3, [pc, #516]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10f      	bne.n	8008e22 <HAL_RCC_OscConfig+0x296>
 8008e02:	2300      	movs	r3, #0
 8008e04:	60bb      	str	r3, [r7, #8]
 8008e06:	4b7d      	ldr	r3, [pc, #500]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0a:	4a7c      	ldr	r2, [pc, #496]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e10:	6413      	str	r3, [r2, #64]	; 0x40
 8008e12:	4b7a      	ldr	r3, [pc, #488]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e1a:	60bb      	str	r3, [r7, #8]
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	2301      	movs	r3, #1
 8008e20:	75fb      	strb	r3, [r7, #23]
 8008e22:	4b77      	ldr	r3, [pc, #476]	; (8009000 <HAL_RCC_OscConfig+0x474>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d118      	bne.n	8008e60 <HAL_RCC_OscConfig+0x2d4>
 8008e2e:	4b74      	ldr	r3, [pc, #464]	; (8009000 <HAL_RCC_OscConfig+0x474>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a73      	ldr	r2, [pc, #460]	; (8009000 <HAL_RCC_OscConfig+0x474>)
 8008e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e38:	6013      	str	r3, [r2, #0]
 8008e3a:	f7fb fd73 	bl	8004924 <HAL_GetTick>
 8008e3e:	6138      	str	r0, [r7, #16]
 8008e40:	e008      	b.n	8008e54 <HAL_RCC_OscConfig+0x2c8>
 8008e42:	f7fb fd6f 	bl	8004924 <HAL_GetTick>
 8008e46:	4602      	mov	r2, r0
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d901      	bls.n	8008e54 <HAL_RCC_OscConfig+0x2c8>
 8008e50:	2303      	movs	r3, #3
 8008e52:	e10c      	b.n	800906e <HAL_RCC_OscConfig+0x4e2>
 8008e54:	4b6a      	ldr	r3, [pc, #424]	; (8009000 <HAL_RCC_OscConfig+0x474>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d0f0      	beq.n	8008e42 <HAL_RCC_OscConfig+0x2b6>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d106      	bne.n	8008e76 <HAL_RCC_OscConfig+0x2ea>
 8008e68:	4b64      	ldr	r3, [pc, #400]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e6c:	4a63      	ldr	r2, [pc, #396]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008e6e:	f043 0301 	orr.w	r3, r3, #1
 8008e72:	6713      	str	r3, [r2, #112]	; 0x70
 8008e74:	e01c      	b.n	8008eb0 <HAL_RCC_OscConfig+0x324>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	2b05      	cmp	r3, #5
 8008e7c:	d10c      	bne.n	8008e98 <HAL_RCC_OscConfig+0x30c>
 8008e7e:	4b5f      	ldr	r3, [pc, #380]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e82:	4a5e      	ldr	r2, [pc, #376]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008e84:	f043 0304 	orr.w	r3, r3, #4
 8008e88:	6713      	str	r3, [r2, #112]	; 0x70
 8008e8a:	4b5c      	ldr	r3, [pc, #368]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e8e:	4a5b      	ldr	r2, [pc, #364]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008e90:	f043 0301 	orr.w	r3, r3, #1
 8008e94:	6713      	str	r3, [r2, #112]	; 0x70
 8008e96:	e00b      	b.n	8008eb0 <HAL_RCC_OscConfig+0x324>
 8008e98:	4b58      	ldr	r3, [pc, #352]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e9c:	4a57      	ldr	r2, [pc, #348]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008e9e:	f023 0301 	bic.w	r3, r3, #1
 8008ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8008ea4:	4b55      	ldr	r3, [pc, #340]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea8:	4a54      	ldr	r2, [pc, #336]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008eaa:	f023 0304 	bic.w	r3, r3, #4
 8008eae:	6713      	str	r3, [r2, #112]	; 0x70
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d015      	beq.n	8008ee4 <HAL_RCC_OscConfig+0x358>
 8008eb8:	f7fb fd34 	bl	8004924 <HAL_GetTick>
 8008ebc:	6138      	str	r0, [r7, #16]
 8008ebe:	e00a      	b.n	8008ed6 <HAL_RCC_OscConfig+0x34a>
 8008ec0:	f7fb fd30 	bl	8004924 <HAL_GetTick>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	1ad3      	subs	r3, r2, r3
 8008eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d901      	bls.n	8008ed6 <HAL_RCC_OscConfig+0x34a>
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	e0cb      	b.n	800906e <HAL_RCC_OscConfig+0x4e2>
 8008ed6:	4b49      	ldr	r3, [pc, #292]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eda:	f003 0302 	and.w	r3, r3, #2
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d0ee      	beq.n	8008ec0 <HAL_RCC_OscConfig+0x334>
 8008ee2:	e014      	b.n	8008f0e <HAL_RCC_OscConfig+0x382>
 8008ee4:	f7fb fd1e 	bl	8004924 <HAL_GetTick>
 8008ee8:	6138      	str	r0, [r7, #16]
 8008eea:	e00a      	b.n	8008f02 <HAL_RCC_OscConfig+0x376>
 8008eec:	f7fb fd1a 	bl	8004924 <HAL_GetTick>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d901      	bls.n	8008f02 <HAL_RCC_OscConfig+0x376>
 8008efe:	2303      	movs	r3, #3
 8008f00:	e0b5      	b.n	800906e <HAL_RCC_OscConfig+0x4e2>
 8008f02:	4b3e      	ldr	r3, [pc, #248]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f06:	f003 0302 	and.w	r3, r3, #2
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1ee      	bne.n	8008eec <HAL_RCC_OscConfig+0x360>
 8008f0e:	7dfb      	ldrb	r3, [r7, #23]
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d105      	bne.n	8008f20 <HAL_RCC_OscConfig+0x394>
 8008f14:	4b39      	ldr	r3, [pc, #228]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f18:	4a38      	ldr	r2, [pc, #224]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f000 80a1 	beq.w	800906c <HAL_RCC_OscConfig+0x4e0>
 8008f2a:	4b34      	ldr	r3, [pc, #208]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	f003 030c 	and.w	r3, r3, #12
 8008f32:	2b08      	cmp	r3, #8
 8008f34:	d05c      	beq.n	8008ff0 <HAL_RCC_OscConfig+0x464>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d141      	bne.n	8008fc2 <HAL_RCC_OscConfig+0x436>
 8008f3e:	4b31      	ldr	r3, [pc, #196]	; (8009004 <HAL_RCC_OscConfig+0x478>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	601a      	str	r2, [r3, #0]
 8008f44:	f7fb fcee 	bl	8004924 <HAL_GetTick>
 8008f48:	6138      	str	r0, [r7, #16]
 8008f4a:	e008      	b.n	8008f5e <HAL_RCC_OscConfig+0x3d2>
 8008f4c:	f7fb fcea 	bl	8004924 <HAL_GetTick>
 8008f50:	4602      	mov	r2, r0
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d901      	bls.n	8008f5e <HAL_RCC_OscConfig+0x3d2>
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	e087      	b.n	800906e <HAL_RCC_OscConfig+0x4e2>
 8008f5e:	4b27      	ldr	r3, [pc, #156]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1f0      	bne.n	8008f4c <HAL_RCC_OscConfig+0x3c0>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	69da      	ldr	r2, [r3, #28]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a1b      	ldr	r3, [r3, #32]
 8008f72:	431a      	orrs	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f78:	019b      	lsls	r3, r3, #6
 8008f7a:	431a      	orrs	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f80:	085b      	lsrs	r3, r3, #1
 8008f82:	3b01      	subs	r3, #1
 8008f84:	041b      	lsls	r3, r3, #16
 8008f86:	431a      	orrs	r2, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8c:	061b      	lsls	r3, r3, #24
 8008f8e:	491b      	ldr	r1, [pc, #108]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008f90:	4313      	orrs	r3, r2
 8008f92:	604b      	str	r3, [r1, #4]
 8008f94:	4b1b      	ldr	r3, [pc, #108]	; (8009004 <HAL_RCC_OscConfig+0x478>)
 8008f96:	2201      	movs	r2, #1
 8008f98:	601a      	str	r2, [r3, #0]
 8008f9a:	f7fb fcc3 	bl	8004924 <HAL_GetTick>
 8008f9e:	6138      	str	r0, [r7, #16]
 8008fa0:	e008      	b.n	8008fb4 <HAL_RCC_OscConfig+0x428>
 8008fa2:	f7fb fcbf 	bl	8004924 <HAL_GetTick>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d901      	bls.n	8008fb4 <HAL_RCC_OscConfig+0x428>
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e05c      	b.n	800906e <HAL_RCC_OscConfig+0x4e2>
 8008fb4:	4b11      	ldr	r3, [pc, #68]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d0f0      	beq.n	8008fa2 <HAL_RCC_OscConfig+0x416>
 8008fc0:	e054      	b.n	800906c <HAL_RCC_OscConfig+0x4e0>
 8008fc2:	4b10      	ldr	r3, [pc, #64]	; (8009004 <HAL_RCC_OscConfig+0x478>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	601a      	str	r2, [r3, #0]
 8008fc8:	f7fb fcac 	bl	8004924 <HAL_GetTick>
 8008fcc:	6138      	str	r0, [r7, #16]
 8008fce:	e008      	b.n	8008fe2 <HAL_RCC_OscConfig+0x456>
 8008fd0:	f7fb fca8 	bl	8004924 <HAL_GetTick>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d901      	bls.n	8008fe2 <HAL_RCC_OscConfig+0x456>
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e045      	b.n	800906e <HAL_RCC_OscConfig+0x4e2>
 8008fe2:	4b06      	ldr	r3, [pc, #24]	; (8008ffc <HAL_RCC_OscConfig+0x470>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1f0      	bne.n	8008fd0 <HAL_RCC_OscConfig+0x444>
 8008fee:	e03d      	b.n	800906c <HAL_RCC_OscConfig+0x4e0>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d107      	bne.n	8009008 <HAL_RCC_OscConfig+0x47c>
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e038      	b.n	800906e <HAL_RCC_OscConfig+0x4e2>
 8008ffc:	40023800 	.word	0x40023800
 8009000:	40007000 	.word	0x40007000
 8009004:	42470060 	.word	0x42470060
 8009008:	4b1b      	ldr	r3, [pc, #108]	; (8009078 <HAL_RCC_OscConfig+0x4ec>)
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	60fb      	str	r3, [r7, #12]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	699b      	ldr	r3, [r3, #24]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d028      	beq.n	8009068 <HAL_RCC_OscConfig+0x4dc>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	69db      	ldr	r3, [r3, #28]
 8009020:	429a      	cmp	r2, r3
 8009022:	d121      	bne.n	8009068 <HAL_RCC_OscConfig+0x4dc>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a1b      	ldr	r3, [r3, #32]
 800902e:	429a      	cmp	r2, r3
 8009030:	d11a      	bne.n	8009068 <HAL_RCC_OscConfig+0x4dc>
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009038:	4013      	ands	r3, r2
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800903e:	0192      	lsls	r2, r2, #6
 8009040:	4293      	cmp	r3, r2
 8009042:	d111      	bne.n	8009068 <HAL_RCC_OscConfig+0x4dc>
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800904e:	085b      	lsrs	r3, r3, #1
 8009050:	3b01      	subs	r3, #1
 8009052:	041b      	lsls	r3, r3, #16
 8009054:	429a      	cmp	r2, r3
 8009056:	d107      	bne.n	8009068 <HAL_RCC_OscConfig+0x4dc>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009062:	061b      	lsls	r3, r3, #24
 8009064:	429a      	cmp	r2, r3
 8009066:	d001      	beq.n	800906c <HAL_RCC_OscConfig+0x4e0>
 8009068:	2301      	movs	r3, #1
 800906a:	e000      	b.n	800906e <HAL_RCC_OscConfig+0x4e2>
 800906c:	2300      	movs	r3, #0
 800906e:	4618      	mov	r0, r3
 8009070:	3718      	adds	r7, #24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	40023800 	.word	0x40023800

0800907c <HAL_RCC_ClockConfig>:
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d101      	bne.n	8009090 <HAL_RCC_ClockConfig+0x14>
 800908c:	2301      	movs	r3, #1
 800908e:	e0cc      	b.n	800922a <HAL_RCC_ClockConfig+0x1ae>
 8009090:	4b68      	ldr	r3, [pc, #416]	; (8009234 <HAL_RCC_ClockConfig+0x1b8>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 0307 	and.w	r3, r3, #7
 8009098:	683a      	ldr	r2, [r7, #0]
 800909a:	429a      	cmp	r2, r3
 800909c:	d90c      	bls.n	80090b8 <HAL_RCC_ClockConfig+0x3c>
 800909e:	4b65      	ldr	r3, [pc, #404]	; (8009234 <HAL_RCC_ClockConfig+0x1b8>)
 80090a0:	683a      	ldr	r2, [r7, #0]
 80090a2:	b2d2      	uxtb	r2, r2
 80090a4:	701a      	strb	r2, [r3, #0]
 80090a6:	4b63      	ldr	r3, [pc, #396]	; (8009234 <HAL_RCC_ClockConfig+0x1b8>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 0307 	and.w	r3, r3, #7
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d001      	beq.n	80090b8 <HAL_RCC_ClockConfig+0x3c>
 80090b4:	2301      	movs	r3, #1
 80090b6:	e0b8      	b.n	800922a <HAL_RCC_ClockConfig+0x1ae>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f003 0302 	and.w	r3, r3, #2
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d020      	beq.n	8009106 <HAL_RCC_ClockConfig+0x8a>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0304 	and.w	r3, r3, #4
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d005      	beq.n	80090dc <HAL_RCC_ClockConfig+0x60>
 80090d0:	4b59      	ldr	r3, [pc, #356]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	4a58      	ldr	r2, [pc, #352]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 80090d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80090da:	6093      	str	r3, [r2, #8]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 0308 	and.w	r3, r3, #8
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d005      	beq.n	80090f4 <HAL_RCC_ClockConfig+0x78>
 80090e8:	4b53      	ldr	r3, [pc, #332]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	4a52      	ldr	r2, [pc, #328]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 80090ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80090f2:	6093      	str	r3, [r2, #8]
 80090f4:	4b50      	ldr	r3, [pc, #320]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	494d      	ldr	r1, [pc, #308]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 8009102:	4313      	orrs	r3, r2
 8009104:	608b      	str	r3, [r1, #8]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	2b00      	cmp	r3, #0
 8009110:	d044      	beq.n	800919c <HAL_RCC_ClockConfig+0x120>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d107      	bne.n	800912a <HAL_RCC_ClockConfig+0xae>
 800911a:	4b47      	ldr	r3, [pc, #284]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009122:	2b00      	cmp	r3, #0
 8009124:	d119      	bne.n	800915a <HAL_RCC_ClockConfig+0xde>
 8009126:	2301      	movs	r3, #1
 8009128:	e07f      	b.n	800922a <HAL_RCC_ClockConfig+0x1ae>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	2b02      	cmp	r3, #2
 8009130:	d003      	beq.n	800913a <HAL_RCC_ClockConfig+0xbe>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	2b03      	cmp	r3, #3
 8009138:	d107      	bne.n	800914a <HAL_RCC_ClockConfig+0xce>
 800913a:	4b3f      	ldr	r3, [pc, #252]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009142:	2b00      	cmp	r3, #0
 8009144:	d109      	bne.n	800915a <HAL_RCC_ClockConfig+0xde>
 8009146:	2301      	movs	r3, #1
 8009148:	e06f      	b.n	800922a <HAL_RCC_ClockConfig+0x1ae>
 800914a:	4b3b      	ldr	r3, [pc, #236]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 0302 	and.w	r3, r3, #2
 8009152:	2b00      	cmp	r3, #0
 8009154:	d101      	bne.n	800915a <HAL_RCC_ClockConfig+0xde>
 8009156:	2301      	movs	r3, #1
 8009158:	e067      	b.n	800922a <HAL_RCC_ClockConfig+0x1ae>
 800915a:	4b37      	ldr	r3, [pc, #220]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	f023 0203 	bic.w	r2, r3, #3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	4934      	ldr	r1, [pc, #208]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 8009168:	4313      	orrs	r3, r2
 800916a:	608b      	str	r3, [r1, #8]
 800916c:	f7fb fbda 	bl	8004924 <HAL_GetTick>
 8009170:	60f8      	str	r0, [r7, #12]
 8009172:	e00a      	b.n	800918a <HAL_RCC_ClockConfig+0x10e>
 8009174:	f7fb fbd6 	bl	8004924 <HAL_GetTick>
 8009178:	4602      	mov	r2, r0
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	1ad3      	subs	r3, r2, r3
 800917e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009182:	4293      	cmp	r3, r2
 8009184:	d901      	bls.n	800918a <HAL_RCC_ClockConfig+0x10e>
 8009186:	2303      	movs	r3, #3
 8009188:	e04f      	b.n	800922a <HAL_RCC_ClockConfig+0x1ae>
 800918a:	4b2b      	ldr	r3, [pc, #172]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	f003 020c 	and.w	r2, r3, #12
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	429a      	cmp	r2, r3
 800919a:	d1eb      	bne.n	8009174 <HAL_RCC_ClockConfig+0xf8>
 800919c:	4b25      	ldr	r3, [pc, #148]	; (8009234 <HAL_RCC_ClockConfig+0x1b8>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 0307 	and.w	r3, r3, #7
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d20c      	bcs.n	80091c4 <HAL_RCC_ClockConfig+0x148>
 80091aa:	4b22      	ldr	r3, [pc, #136]	; (8009234 <HAL_RCC_ClockConfig+0x1b8>)
 80091ac:	683a      	ldr	r2, [r7, #0]
 80091ae:	b2d2      	uxtb	r2, r2
 80091b0:	701a      	strb	r2, [r3, #0]
 80091b2:	4b20      	ldr	r3, [pc, #128]	; (8009234 <HAL_RCC_ClockConfig+0x1b8>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 0307 	and.w	r3, r3, #7
 80091ba:	683a      	ldr	r2, [r7, #0]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d001      	beq.n	80091c4 <HAL_RCC_ClockConfig+0x148>
 80091c0:	2301      	movs	r3, #1
 80091c2:	e032      	b.n	800922a <HAL_RCC_ClockConfig+0x1ae>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f003 0304 	and.w	r3, r3, #4
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d008      	beq.n	80091e2 <HAL_RCC_ClockConfig+0x166>
 80091d0:	4b19      	ldr	r3, [pc, #100]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	4916      	ldr	r1, [pc, #88]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 80091de:	4313      	orrs	r3, r2
 80091e0:	608b      	str	r3, [r1, #8]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 0308 	and.w	r3, r3, #8
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d009      	beq.n	8009202 <HAL_RCC_ClockConfig+0x186>
 80091ee:	4b12      	ldr	r3, [pc, #72]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	00db      	lsls	r3, r3, #3
 80091fc:	490e      	ldr	r1, [pc, #56]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 80091fe:	4313      	orrs	r3, r2
 8009200:	608b      	str	r3, [r1, #8]
 8009202:	f000 f821 	bl	8009248 <HAL_RCC_GetSysClockFreq>
 8009206:	4602      	mov	r2, r0
 8009208:	4b0b      	ldr	r3, [pc, #44]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	091b      	lsrs	r3, r3, #4
 800920e:	f003 030f 	and.w	r3, r3, #15
 8009212:	490a      	ldr	r1, [pc, #40]	; (800923c <HAL_RCC_ClockConfig+0x1c0>)
 8009214:	5ccb      	ldrb	r3, [r1, r3]
 8009216:	fa22 f303 	lsr.w	r3, r2, r3
 800921a:	4a09      	ldr	r2, [pc, #36]	; (8009240 <HAL_RCC_ClockConfig+0x1c4>)
 800921c:	6013      	str	r3, [r2, #0]
 800921e:	4b09      	ldr	r3, [pc, #36]	; (8009244 <HAL_RCC_ClockConfig+0x1c8>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4618      	mov	r0, r3
 8009224:	f7fb f8ae 	bl	8004384 <HAL_InitTick>
 8009228:	2300      	movs	r3, #0
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	40023c00 	.word	0x40023c00
 8009238:	40023800 	.word	0x40023800
 800923c:	080147dc 	.word	0x080147dc
 8009240:	20000014 	.word	0x20000014
 8009244:	20000018 	.word	0x20000018

08009248 <HAL_RCC_GetSysClockFreq>:
 8009248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800924c:	b094      	sub	sp, #80	; 0x50
 800924e:	af00      	add	r7, sp, #0
 8009250:	2300      	movs	r3, #0
 8009252:	647b      	str	r3, [r7, #68]	; 0x44
 8009254:	2300      	movs	r3, #0
 8009256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009258:	2300      	movs	r3, #0
 800925a:	643b      	str	r3, [r7, #64]	; 0x40
 800925c:	2300      	movs	r3, #0
 800925e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009260:	4b79      	ldr	r3, [pc, #484]	; (8009448 <HAL_RCC_GetSysClockFreq+0x200>)
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	f003 030c 	and.w	r3, r3, #12
 8009268:	2b08      	cmp	r3, #8
 800926a:	d00d      	beq.n	8009288 <HAL_RCC_GetSysClockFreq+0x40>
 800926c:	2b08      	cmp	r3, #8
 800926e:	f200 80e1 	bhi.w	8009434 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009272:	2b00      	cmp	r3, #0
 8009274:	d002      	beq.n	800927c <HAL_RCC_GetSysClockFreq+0x34>
 8009276:	2b04      	cmp	r3, #4
 8009278:	d003      	beq.n	8009282 <HAL_RCC_GetSysClockFreq+0x3a>
 800927a:	e0db      	b.n	8009434 <HAL_RCC_GetSysClockFreq+0x1ec>
 800927c:	4b73      	ldr	r3, [pc, #460]	; (800944c <HAL_RCC_GetSysClockFreq+0x204>)
 800927e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009280:	e0db      	b.n	800943a <HAL_RCC_GetSysClockFreq+0x1f2>
 8009282:	4b73      	ldr	r3, [pc, #460]	; (8009450 <HAL_RCC_GetSysClockFreq+0x208>)
 8009284:	64bb      	str	r3, [r7, #72]	; 0x48
 8009286:	e0d8      	b.n	800943a <HAL_RCC_GetSysClockFreq+0x1f2>
 8009288:	4b6f      	ldr	r3, [pc, #444]	; (8009448 <HAL_RCC_GetSysClockFreq+0x200>)
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009290:	647b      	str	r3, [r7, #68]	; 0x44
 8009292:	4b6d      	ldr	r3, [pc, #436]	; (8009448 <HAL_RCC_GetSysClockFreq+0x200>)
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800929a:	2b00      	cmp	r3, #0
 800929c:	d063      	beq.n	8009366 <HAL_RCC_GetSysClockFreq+0x11e>
 800929e:	4b6a      	ldr	r3, [pc, #424]	; (8009448 <HAL_RCC_GetSysClockFreq+0x200>)
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	099b      	lsrs	r3, r3, #6
 80092a4:	2200      	movs	r2, #0
 80092a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80092a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80092aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092b0:	633b      	str	r3, [r7, #48]	; 0x30
 80092b2:	2300      	movs	r3, #0
 80092b4:	637b      	str	r3, [r7, #52]	; 0x34
 80092b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80092ba:	4622      	mov	r2, r4
 80092bc:	462b      	mov	r3, r5
 80092be:	f04f 0000 	mov.w	r0, #0
 80092c2:	f04f 0100 	mov.w	r1, #0
 80092c6:	0159      	lsls	r1, r3, #5
 80092c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092cc:	0150      	lsls	r0, r2, #5
 80092ce:	4602      	mov	r2, r0
 80092d0:	460b      	mov	r3, r1
 80092d2:	4621      	mov	r1, r4
 80092d4:	1a51      	subs	r1, r2, r1
 80092d6:	6139      	str	r1, [r7, #16]
 80092d8:	4629      	mov	r1, r5
 80092da:	eb63 0301 	sbc.w	r3, r3, r1
 80092de:	617b      	str	r3, [r7, #20]
 80092e0:	f04f 0200 	mov.w	r2, #0
 80092e4:	f04f 0300 	mov.w	r3, #0
 80092e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80092ec:	4659      	mov	r1, fp
 80092ee:	018b      	lsls	r3, r1, #6
 80092f0:	4651      	mov	r1, sl
 80092f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80092f6:	4651      	mov	r1, sl
 80092f8:	018a      	lsls	r2, r1, #6
 80092fa:	4651      	mov	r1, sl
 80092fc:	ebb2 0801 	subs.w	r8, r2, r1
 8009300:	4659      	mov	r1, fp
 8009302:	eb63 0901 	sbc.w	r9, r3, r1
 8009306:	f04f 0200 	mov.w	r2, #0
 800930a:	f04f 0300 	mov.w	r3, #0
 800930e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009312:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009316:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800931a:	4690      	mov	r8, r2
 800931c:	4699      	mov	r9, r3
 800931e:	4623      	mov	r3, r4
 8009320:	eb18 0303 	adds.w	r3, r8, r3
 8009324:	60bb      	str	r3, [r7, #8]
 8009326:	462b      	mov	r3, r5
 8009328:	eb49 0303 	adc.w	r3, r9, r3
 800932c:	60fb      	str	r3, [r7, #12]
 800932e:	f04f 0200 	mov.w	r2, #0
 8009332:	f04f 0300 	mov.w	r3, #0
 8009336:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800933a:	4629      	mov	r1, r5
 800933c:	024b      	lsls	r3, r1, #9
 800933e:	4621      	mov	r1, r4
 8009340:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009344:	4621      	mov	r1, r4
 8009346:	024a      	lsls	r2, r1, #9
 8009348:	4610      	mov	r0, r2
 800934a:	4619      	mov	r1, r3
 800934c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800934e:	2200      	movs	r2, #0
 8009350:	62bb      	str	r3, [r7, #40]	; 0x28
 8009352:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009354:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009358:	f7f7 fc9e 	bl	8000c98 <__aeabi_uldivmod>
 800935c:	4602      	mov	r2, r0
 800935e:	460b      	mov	r3, r1
 8009360:	4613      	mov	r3, r2
 8009362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009364:	e058      	b.n	8009418 <HAL_RCC_GetSysClockFreq+0x1d0>
 8009366:	4b38      	ldr	r3, [pc, #224]	; (8009448 <HAL_RCC_GetSysClockFreq+0x200>)
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	099b      	lsrs	r3, r3, #6
 800936c:	2200      	movs	r2, #0
 800936e:	4618      	mov	r0, r3
 8009370:	4611      	mov	r1, r2
 8009372:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009376:	623b      	str	r3, [r7, #32]
 8009378:	2300      	movs	r3, #0
 800937a:	627b      	str	r3, [r7, #36]	; 0x24
 800937c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009380:	4642      	mov	r2, r8
 8009382:	464b      	mov	r3, r9
 8009384:	f04f 0000 	mov.w	r0, #0
 8009388:	f04f 0100 	mov.w	r1, #0
 800938c:	0159      	lsls	r1, r3, #5
 800938e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009392:	0150      	lsls	r0, r2, #5
 8009394:	4602      	mov	r2, r0
 8009396:	460b      	mov	r3, r1
 8009398:	4641      	mov	r1, r8
 800939a:	ebb2 0a01 	subs.w	sl, r2, r1
 800939e:	4649      	mov	r1, r9
 80093a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80093a4:	f04f 0200 	mov.w	r2, #0
 80093a8:	f04f 0300 	mov.w	r3, #0
 80093ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80093b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80093b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80093b8:	ebb2 040a 	subs.w	r4, r2, sl
 80093bc:	eb63 050b 	sbc.w	r5, r3, fp
 80093c0:	f04f 0200 	mov.w	r2, #0
 80093c4:	f04f 0300 	mov.w	r3, #0
 80093c8:	00eb      	lsls	r3, r5, #3
 80093ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093ce:	00e2      	lsls	r2, r4, #3
 80093d0:	4614      	mov	r4, r2
 80093d2:	461d      	mov	r5, r3
 80093d4:	4643      	mov	r3, r8
 80093d6:	18e3      	adds	r3, r4, r3
 80093d8:	603b      	str	r3, [r7, #0]
 80093da:	464b      	mov	r3, r9
 80093dc:	eb45 0303 	adc.w	r3, r5, r3
 80093e0:	607b      	str	r3, [r7, #4]
 80093e2:	f04f 0200 	mov.w	r2, #0
 80093e6:	f04f 0300 	mov.w	r3, #0
 80093ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80093ee:	4629      	mov	r1, r5
 80093f0:	028b      	lsls	r3, r1, #10
 80093f2:	4621      	mov	r1, r4
 80093f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80093f8:	4621      	mov	r1, r4
 80093fa:	028a      	lsls	r2, r1, #10
 80093fc:	4610      	mov	r0, r2
 80093fe:	4619      	mov	r1, r3
 8009400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009402:	2200      	movs	r2, #0
 8009404:	61bb      	str	r3, [r7, #24]
 8009406:	61fa      	str	r2, [r7, #28]
 8009408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800940c:	f7f7 fc44 	bl	8000c98 <__aeabi_uldivmod>
 8009410:	4602      	mov	r2, r0
 8009412:	460b      	mov	r3, r1
 8009414:	4613      	mov	r3, r2
 8009416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009418:	4b0b      	ldr	r3, [pc, #44]	; (8009448 <HAL_RCC_GetSysClockFreq+0x200>)
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	0c1b      	lsrs	r3, r3, #16
 800941e:	f003 0303 	and.w	r3, r3, #3
 8009422:	3301      	adds	r3, #1
 8009424:	005b      	lsls	r3, r3, #1
 8009426:	643b      	str	r3, [r7, #64]	; 0x40
 8009428:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800942a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800942c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009430:	64bb      	str	r3, [r7, #72]	; 0x48
 8009432:	e002      	b.n	800943a <HAL_RCC_GetSysClockFreq+0x1f2>
 8009434:	4b05      	ldr	r3, [pc, #20]	; (800944c <HAL_RCC_GetSysClockFreq+0x204>)
 8009436:	64bb      	str	r3, [r7, #72]	; 0x48
 8009438:	bf00      	nop
 800943a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800943c:	4618      	mov	r0, r3
 800943e:	3750      	adds	r7, #80	; 0x50
 8009440:	46bd      	mov	sp, r7
 8009442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009446:	bf00      	nop
 8009448:	40023800 	.word	0x40023800
 800944c:	00f42400 	.word	0x00f42400
 8009450:	007a1200 	.word	0x007a1200

08009454 <HAL_RCC_GetHCLKFreq>:
 8009454:	b480      	push	{r7}
 8009456:	af00      	add	r7, sp, #0
 8009458:	4b03      	ldr	r3, [pc, #12]	; (8009468 <HAL_RCC_GetHCLKFreq+0x14>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4618      	mov	r0, r3
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	20000014 	.word	0x20000014

0800946c <HAL_RCC_GetPCLK1Freq>:
 800946c:	b580      	push	{r7, lr}
 800946e:	af00      	add	r7, sp, #0
 8009470:	f7ff fff0 	bl	8009454 <HAL_RCC_GetHCLKFreq>
 8009474:	4602      	mov	r2, r0
 8009476:	4b05      	ldr	r3, [pc, #20]	; (800948c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	0a9b      	lsrs	r3, r3, #10
 800947c:	f003 0307 	and.w	r3, r3, #7
 8009480:	4903      	ldr	r1, [pc, #12]	; (8009490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009482:	5ccb      	ldrb	r3, [r1, r3]
 8009484:	fa22 f303 	lsr.w	r3, r2, r3
 8009488:	4618      	mov	r0, r3
 800948a:	bd80      	pop	{r7, pc}
 800948c:	40023800 	.word	0x40023800
 8009490:	080147ec 	.word	0x080147ec

08009494 <HAL_RCC_GetPCLK2Freq>:
 8009494:	b580      	push	{r7, lr}
 8009496:	af00      	add	r7, sp, #0
 8009498:	f7ff ffdc 	bl	8009454 <HAL_RCC_GetHCLKFreq>
 800949c:	4602      	mov	r2, r0
 800949e:	4b05      	ldr	r3, [pc, #20]	; (80094b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	0b5b      	lsrs	r3, r3, #13
 80094a4:	f003 0307 	and.w	r3, r3, #7
 80094a8:	4903      	ldr	r1, [pc, #12]	; (80094b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80094aa:	5ccb      	ldrb	r3, [r1, r3]
 80094ac:	fa22 f303 	lsr.w	r3, r2, r3
 80094b0:	4618      	mov	r0, r3
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	40023800 	.word	0x40023800
 80094b8:	080147ec 	.word	0x080147ec

080094bc <HAL_RCC_GetClockConfig>:
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	220f      	movs	r2, #15
 80094ca:	601a      	str	r2, [r3, #0]
 80094cc:	4b12      	ldr	r3, [pc, #72]	; (8009518 <HAL_RCC_GetClockConfig+0x5c>)
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	f003 0203 	and.w	r2, r3, #3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	605a      	str	r2, [r3, #4]
 80094d8:	4b0f      	ldr	r3, [pc, #60]	; (8009518 <HAL_RCC_GetClockConfig+0x5c>)
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	609a      	str	r2, [r3, #8]
 80094e4:	4b0c      	ldr	r3, [pc, #48]	; (8009518 <HAL_RCC_GetClockConfig+0x5c>)
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	60da      	str	r2, [r3, #12]
 80094f0:	4b09      	ldr	r3, [pc, #36]	; (8009518 <HAL_RCC_GetClockConfig+0x5c>)
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	08db      	lsrs	r3, r3, #3
 80094f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	611a      	str	r2, [r3, #16]
 80094fe:	4b07      	ldr	r3, [pc, #28]	; (800951c <HAL_RCC_GetClockConfig+0x60>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 0207 	and.w	r2, r3, #7
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	601a      	str	r2, [r3, #0]
 800950a:	bf00      	nop
 800950c:	370c      	adds	r7, #12
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	40023800 	.word	0x40023800
 800951c:	40023c00 	.word	0x40023c00

08009520 <HAL_SPI_Init>:
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d101      	bne.n	8009532 <HAL_SPI_Init+0x12>
 800952e:	2301      	movs	r3, #1
 8009530:	e07b      	b.n	800962a <HAL_SPI_Init+0x10a>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009536:	2b00      	cmp	r3, #0
 8009538:	d108      	bne.n	800954c <HAL_SPI_Init+0x2c>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009542:	d009      	beq.n	8009558 <HAL_SPI_Init+0x38>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	61da      	str	r2, [r3, #28]
 800954a:	e005      	b.n	8009558 <HAL_SPI_Init+0x38>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	611a      	str	r2, [r3, #16]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	615a      	str	r2, [r3, #20]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	629a      	str	r2, [r3, #40]	; 0x28
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	d106      	bne.n	8009578 <HAL_SPI_Init+0x58>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7fa fc4a 	bl	8003e0c <HAL_SPI_MspInit>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2202      	movs	r2, #2
 800957c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800958e:	601a      	str	r2, [r3, #0]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80095a0:	431a      	orrs	r2, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095aa:	431a      	orrs	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	f003 0302 	and.w	r3, r3, #2
 80095b4:	431a      	orrs	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	f003 0301 	and.w	r3, r3, #1
 80095be:	431a      	orrs	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095c8:	431a      	orrs	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	69db      	ldr	r3, [r3, #28]
 80095ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095d2:	431a      	orrs	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a1b      	ldr	r3, [r3, #32]
 80095d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095dc:	ea42 0103 	orr.w	r1, r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	430a      	orrs	r2, r1
 80095ee:	601a      	str	r2, [r3, #0]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	0c1b      	lsrs	r3, r3, #16
 80095f6:	f003 0104 	and.w	r1, r3, #4
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fe:	f003 0210 	and.w	r2, r3, #16
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	430a      	orrs	r2, r1
 8009608:	605a      	str	r2, [r3, #4]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	69da      	ldr	r2, [r3, #28]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009618:	61da      	str	r2, [r3, #28]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	655a      	str	r2, [r3, #84]	; 0x54
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009628:	2300      	movs	r3, #0
 800962a:	4618      	mov	r0, r3
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <HAL_TIM_Base_Init>:
 8009632:	b580      	push	{r7, lr}
 8009634:	b082      	sub	sp, #8
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <HAL_TIM_Base_Init+0x12>
 8009640:	2301      	movs	r3, #1
 8009642:	e041      	b.n	80096c8 <HAL_TIM_Base_Init+0x96>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800964a:	b2db      	uxtb	r3, r3
 800964c:	2b00      	cmp	r3, #0
 800964e:	d106      	bne.n	800965e <HAL_TIM_Base_Init+0x2c>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f7fb f8a1 	bl	80047a0 <HAL_TIM_Base_MspInit>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2202      	movs	r2, #2
 8009662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	3304      	adds	r3, #4
 800966e:	4619      	mov	r1, r3
 8009670:	4610      	mov	r0, r2
 8009672:	f000 fc53 	bl	8009f1c <TIM_Base_SetConfig>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2201      	movs	r2, #1
 800967a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2201      	movs	r2, #1
 8009692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2201      	movs	r2, #1
 80096a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2201      	movs	r2, #1
 80096ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80096c6:	2300      	movs	r3, #0
 80096c8:	4618      	mov	r0, r3
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <HAL_TIM_Base_Start_IT>:
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d001      	beq.n	80096e8 <HAL_TIM_Base_Start_IT+0x18>
 80096e4:	2301      	movs	r3, #1
 80096e6:	e044      	b.n	8009772 <HAL_TIM_Base_Start_IT+0xa2>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2202      	movs	r2, #2
 80096ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f042 0201 	orr.w	r2, r2, #1
 80096fe:	60da      	str	r2, [r3, #12]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a1e      	ldr	r2, [pc, #120]	; (8009780 <HAL_TIM_Base_Start_IT+0xb0>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d018      	beq.n	800973c <HAL_TIM_Base_Start_IT+0x6c>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009712:	d013      	beq.n	800973c <HAL_TIM_Base_Start_IT+0x6c>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a1a      	ldr	r2, [pc, #104]	; (8009784 <HAL_TIM_Base_Start_IT+0xb4>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d00e      	beq.n	800973c <HAL_TIM_Base_Start_IT+0x6c>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a19      	ldr	r2, [pc, #100]	; (8009788 <HAL_TIM_Base_Start_IT+0xb8>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d009      	beq.n	800973c <HAL_TIM_Base_Start_IT+0x6c>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a17      	ldr	r2, [pc, #92]	; (800978c <HAL_TIM_Base_Start_IT+0xbc>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d004      	beq.n	800973c <HAL_TIM_Base_Start_IT+0x6c>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a16      	ldr	r2, [pc, #88]	; (8009790 <HAL_TIM_Base_Start_IT+0xc0>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d111      	bne.n	8009760 <HAL_TIM_Base_Start_IT+0x90>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	f003 0307 	and.w	r3, r3, #7
 8009746:	60fb      	str	r3, [r7, #12]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b06      	cmp	r3, #6
 800974c:	d010      	beq.n	8009770 <HAL_TIM_Base_Start_IT+0xa0>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f042 0201 	orr.w	r2, r2, #1
 800975c:	601a      	str	r2, [r3, #0]
 800975e:	e007      	b.n	8009770 <HAL_TIM_Base_Start_IT+0xa0>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f042 0201 	orr.w	r2, r2, #1
 800976e:	601a      	str	r2, [r3, #0]
 8009770:	2300      	movs	r3, #0
 8009772:	4618      	mov	r0, r3
 8009774:	3714      	adds	r7, #20
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	40010000 	.word	0x40010000
 8009784:	40000400 	.word	0x40000400
 8009788:	40000800 	.word	0x40000800
 800978c:	40000c00 	.word	0x40000c00
 8009790:	40014000 	.word	0x40014000

08009794 <HAL_TIM_PWM_Init>:
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d101      	bne.n	80097a6 <HAL_TIM_PWM_Init+0x12>
 80097a2:	2301      	movs	r3, #1
 80097a4:	e041      	b.n	800982a <HAL_TIM_PWM_Init+0x96>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d106      	bne.n	80097c0 <HAL_TIM_PWM_Init+0x2c>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f839 	bl	8009832 <HAL_TIM_PWM_MspInit>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2202      	movs	r2, #2
 80097c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	3304      	adds	r3, #4
 80097d0:	4619      	mov	r1, r3
 80097d2:	4610      	mov	r0, r2
 80097d4:	f000 fba2 	bl	8009f1c <TIM_Base_SetConfig>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009828:	2300      	movs	r3, #0
 800982a:	4618      	mov	r0, r3
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <HAL_TIM_PWM_MspInit>:
 8009832:	b480      	push	{r7}
 8009834:	b083      	sub	sp, #12
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	bf00      	nop
 800983c:	370c      	adds	r7, #12
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
	...

08009848 <HAL_TIM_PWM_Start>:
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d109      	bne.n	800986c <HAL_TIM_PWM_Start+0x24>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800985e:	b2db      	uxtb	r3, r3
 8009860:	2b01      	cmp	r3, #1
 8009862:	bf14      	ite	ne
 8009864:	2301      	movne	r3, #1
 8009866:	2300      	moveq	r3, #0
 8009868:	b2db      	uxtb	r3, r3
 800986a:	e022      	b.n	80098b2 <HAL_TIM_PWM_Start+0x6a>
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	2b04      	cmp	r3, #4
 8009870:	d109      	bne.n	8009886 <HAL_TIM_PWM_Start+0x3e>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009878:	b2db      	uxtb	r3, r3
 800987a:	2b01      	cmp	r3, #1
 800987c:	bf14      	ite	ne
 800987e:	2301      	movne	r3, #1
 8009880:	2300      	moveq	r3, #0
 8009882:	b2db      	uxtb	r3, r3
 8009884:	e015      	b.n	80098b2 <HAL_TIM_PWM_Start+0x6a>
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b08      	cmp	r3, #8
 800988a:	d109      	bne.n	80098a0 <HAL_TIM_PWM_Start+0x58>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009892:	b2db      	uxtb	r3, r3
 8009894:	2b01      	cmp	r3, #1
 8009896:	bf14      	ite	ne
 8009898:	2301      	movne	r3, #1
 800989a:	2300      	moveq	r3, #0
 800989c:	b2db      	uxtb	r3, r3
 800989e:	e008      	b.n	80098b2 <HAL_TIM_PWM_Start+0x6a>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	bf14      	ite	ne
 80098ac:	2301      	movne	r3, #1
 80098ae:	2300      	moveq	r3, #0
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <HAL_TIM_PWM_Start+0x72>
 80098b6:	2301      	movs	r3, #1
 80098b8:	e068      	b.n	800998c <HAL_TIM_PWM_Start+0x144>
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d104      	bne.n	80098ca <HAL_TIM_PWM_Start+0x82>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2202      	movs	r2, #2
 80098c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098c8:	e013      	b.n	80098f2 <HAL_TIM_PWM_Start+0xaa>
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2b04      	cmp	r3, #4
 80098ce:	d104      	bne.n	80098da <HAL_TIM_PWM_Start+0x92>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2202      	movs	r2, #2
 80098d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098d8:	e00b      	b.n	80098f2 <HAL_TIM_PWM_Start+0xaa>
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2b08      	cmp	r3, #8
 80098de:	d104      	bne.n	80098ea <HAL_TIM_PWM_Start+0xa2>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2202      	movs	r2, #2
 80098e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098e8:	e003      	b.n	80098f2 <HAL_TIM_PWM_Start+0xaa>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2202      	movs	r2, #2
 80098ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2201      	movs	r2, #1
 80098f8:	6839      	ldr	r1, [r7, #0]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 fdb4 	bl	800a468 <TIM_CCxChannelCmd>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a23      	ldr	r2, [pc, #140]	; (8009994 <HAL_TIM_PWM_Start+0x14c>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d107      	bne.n	800991a <HAL_TIM_PWM_Start+0xd2>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009918:	645a      	str	r2, [r3, #68]	; 0x44
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a1d      	ldr	r2, [pc, #116]	; (8009994 <HAL_TIM_PWM_Start+0x14c>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d018      	beq.n	8009956 <HAL_TIM_PWM_Start+0x10e>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800992c:	d013      	beq.n	8009956 <HAL_TIM_PWM_Start+0x10e>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a19      	ldr	r2, [pc, #100]	; (8009998 <HAL_TIM_PWM_Start+0x150>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d00e      	beq.n	8009956 <HAL_TIM_PWM_Start+0x10e>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a17      	ldr	r2, [pc, #92]	; (800999c <HAL_TIM_PWM_Start+0x154>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d009      	beq.n	8009956 <HAL_TIM_PWM_Start+0x10e>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a16      	ldr	r2, [pc, #88]	; (80099a0 <HAL_TIM_PWM_Start+0x158>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d004      	beq.n	8009956 <HAL_TIM_PWM_Start+0x10e>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a14      	ldr	r2, [pc, #80]	; (80099a4 <HAL_TIM_PWM_Start+0x15c>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d111      	bne.n	800997a <HAL_TIM_PWM_Start+0x132>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	f003 0307 	and.w	r3, r3, #7
 8009960:	60fb      	str	r3, [r7, #12]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2b06      	cmp	r3, #6
 8009966:	d010      	beq.n	800998a <HAL_TIM_PWM_Start+0x142>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f042 0201 	orr.w	r2, r2, #1
 8009976:	601a      	str	r2, [r3, #0]
 8009978:	e007      	b.n	800998a <HAL_TIM_PWM_Start+0x142>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f042 0201 	orr.w	r2, r2, #1
 8009988:	601a      	str	r2, [r3, #0]
 800998a:	2300      	movs	r3, #0
 800998c:	4618      	mov	r0, r3
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	40010000 	.word	0x40010000
 8009998:	40000400 	.word	0x40000400
 800999c:	40000800 	.word	0x40000800
 80099a0:	40000c00 	.word	0x40000c00
 80099a4:	40014000 	.word	0x40014000

080099a8 <HAL_TIM_IRQHandler>:
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	f003 0302 	and.w	r3, r3, #2
 80099ba:	2b02      	cmp	r3, #2
 80099bc:	d122      	bne.n	8009a04 <HAL_TIM_IRQHandler+0x5c>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	f003 0302 	and.w	r3, r3, #2
 80099c8:	2b02      	cmp	r3, #2
 80099ca:	d11b      	bne.n	8009a04 <HAL_TIM_IRQHandler+0x5c>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f06f 0202 	mvn.w	r2, #2
 80099d4:	611a      	str	r2, [r3, #16]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2201      	movs	r2, #1
 80099da:	771a      	strb	r2, [r3, #28]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	f003 0303 	and.w	r3, r3, #3
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d003      	beq.n	80099f2 <HAL_TIM_IRQHandler+0x4a>
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fa77 	bl	8009ede <HAL_TIM_IC_CaptureCallback>
 80099f0:	e005      	b.n	80099fe <HAL_TIM_IRQHandler+0x56>
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fa69 	bl	8009eca <HAL_TIM_OC_DelayElapsedCallback>
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fa7a 	bl	8009ef2 <HAL_TIM_PWM_PulseFinishedCallback>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	771a      	strb	r2, [r3, #28]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	f003 0304 	and.w	r3, r3, #4
 8009a0e:	2b04      	cmp	r3, #4
 8009a10:	d122      	bne.n	8009a58 <HAL_TIM_IRQHandler+0xb0>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	f003 0304 	and.w	r3, r3, #4
 8009a1c:	2b04      	cmp	r3, #4
 8009a1e:	d11b      	bne.n	8009a58 <HAL_TIM_IRQHandler+0xb0>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f06f 0204 	mvn.w	r2, #4
 8009a28:	611a      	str	r2, [r3, #16]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2202      	movs	r2, #2
 8009a2e:	771a      	strb	r2, [r3, #28]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d003      	beq.n	8009a46 <HAL_TIM_IRQHandler+0x9e>
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fa4d 	bl	8009ede <HAL_TIM_IC_CaptureCallback>
 8009a44:	e005      	b.n	8009a52 <HAL_TIM_IRQHandler+0xaa>
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fa3f 	bl	8009eca <HAL_TIM_OC_DelayElapsedCallback>
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 fa50 	bl	8009ef2 <HAL_TIM_PWM_PulseFinishedCallback>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	771a      	strb	r2, [r3, #28]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	691b      	ldr	r3, [r3, #16]
 8009a5e:	f003 0308 	and.w	r3, r3, #8
 8009a62:	2b08      	cmp	r3, #8
 8009a64:	d122      	bne.n	8009aac <HAL_TIM_IRQHandler+0x104>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	f003 0308 	and.w	r3, r3, #8
 8009a70:	2b08      	cmp	r3, #8
 8009a72:	d11b      	bne.n	8009aac <HAL_TIM_IRQHandler+0x104>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f06f 0208 	mvn.w	r2, #8
 8009a7c:	611a      	str	r2, [r3, #16]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2204      	movs	r2, #4
 8009a82:	771a      	strb	r2, [r3, #28]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	69db      	ldr	r3, [r3, #28]
 8009a8a:	f003 0303 	and.w	r3, r3, #3
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d003      	beq.n	8009a9a <HAL_TIM_IRQHandler+0xf2>
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 fa23 	bl	8009ede <HAL_TIM_IC_CaptureCallback>
 8009a98:	e005      	b.n	8009aa6 <HAL_TIM_IRQHandler+0xfe>
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fa15 	bl	8009eca <HAL_TIM_OC_DelayElapsedCallback>
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fa26 	bl	8009ef2 <HAL_TIM_PWM_PulseFinishedCallback>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	771a      	strb	r2, [r3, #28]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	f003 0310 	and.w	r3, r3, #16
 8009ab6:	2b10      	cmp	r3, #16
 8009ab8:	d122      	bne.n	8009b00 <HAL_TIM_IRQHandler+0x158>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	f003 0310 	and.w	r3, r3, #16
 8009ac4:	2b10      	cmp	r3, #16
 8009ac6:	d11b      	bne.n	8009b00 <HAL_TIM_IRQHandler+0x158>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f06f 0210 	mvn.w	r2, #16
 8009ad0:	611a      	str	r2, [r3, #16]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2208      	movs	r2, #8
 8009ad6:	771a      	strb	r2, [r3, #28]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	69db      	ldr	r3, [r3, #28]
 8009ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d003      	beq.n	8009aee <HAL_TIM_IRQHandler+0x146>
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f9f9 	bl	8009ede <HAL_TIM_IC_CaptureCallback>
 8009aec:	e005      	b.n	8009afa <HAL_TIM_IRQHandler+0x152>
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 f9eb 	bl	8009eca <HAL_TIM_OC_DelayElapsedCallback>
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f9fc 	bl	8009ef2 <HAL_TIM_PWM_PulseFinishedCallback>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	771a      	strb	r2, [r3, #28]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	691b      	ldr	r3, [r3, #16]
 8009b06:	f003 0301 	and.w	r3, r3, #1
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d10e      	bne.n	8009b2c <HAL_TIM_IRQHandler+0x184>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	f003 0301 	and.w	r3, r3, #1
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d107      	bne.n	8009b2c <HAL_TIM_IRQHandler+0x184>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f06f 0201 	mvn.w	r2, #1
 8009b24:	611a      	str	r2, [r3, #16]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f7f9 f8b2 	bl	8002c90 <HAL_TIM_PeriodElapsedCallback>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b36:	2b80      	cmp	r3, #128	; 0x80
 8009b38:	d10e      	bne.n	8009b58 <HAL_TIM_IRQHandler+0x1b0>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b44:	2b80      	cmp	r3, #128	; 0x80
 8009b46:	d107      	bne.n	8009b58 <HAL_TIM_IRQHandler+0x1b0>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009b50:	611a      	str	r2, [r3, #16]
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 fd26 	bl	800a5a4 <HAL_TIMEx_BreakCallback>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b62:	2b40      	cmp	r3, #64	; 0x40
 8009b64:	d10e      	bne.n	8009b84 <HAL_TIM_IRQHandler+0x1dc>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b70:	2b40      	cmp	r3, #64	; 0x40
 8009b72:	d107      	bne.n	8009b84 <HAL_TIM_IRQHandler+0x1dc>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b7c:	611a      	str	r2, [r3, #16]
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 f9c1 	bl	8009f06 <HAL_TIM_TriggerCallback>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	f003 0320 	and.w	r3, r3, #32
 8009b8e:	2b20      	cmp	r3, #32
 8009b90:	d10e      	bne.n	8009bb0 <HAL_TIM_IRQHandler+0x208>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	f003 0320 	and.w	r3, r3, #32
 8009b9c:	2b20      	cmp	r3, #32
 8009b9e:	d107      	bne.n	8009bb0 <HAL_TIM_IRQHandler+0x208>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f06f 0220 	mvn.w	r2, #32
 8009ba8:	611a      	str	r2, [r3, #16]
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fcf0 	bl	800a590 <HAL_TIMEx_CommutCallback>
 8009bb0:	bf00      	nop
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <HAL_TIM_PWM_ConfigChannel>:
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b086      	sub	sp, #24
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	607a      	str	r2, [r7, #4]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	75fb      	strb	r3, [r7, #23]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d101      	bne.n	8009bd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009bd2:	2302      	movs	r3, #2
 8009bd4:	e0ae      	b.n	8009d34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2b0c      	cmp	r3, #12
 8009be2:	f200 809f 	bhi.w	8009d24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009be6:	a201      	add	r2, pc, #4	; (adr r2, 8009bec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bec:	08009c21 	.word	0x08009c21
 8009bf0:	08009d25 	.word	0x08009d25
 8009bf4:	08009d25 	.word	0x08009d25
 8009bf8:	08009d25 	.word	0x08009d25
 8009bfc:	08009c61 	.word	0x08009c61
 8009c00:	08009d25 	.word	0x08009d25
 8009c04:	08009d25 	.word	0x08009d25
 8009c08:	08009d25 	.word	0x08009d25
 8009c0c:	08009ca3 	.word	0x08009ca3
 8009c10:	08009d25 	.word	0x08009d25
 8009c14:	08009d25 	.word	0x08009d25
 8009c18:	08009d25 	.word	0x08009d25
 8009c1c:	08009ce3 	.word	0x08009ce3
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	68b9      	ldr	r1, [r7, #8]
 8009c26:	4618      	mov	r0, r3
 8009c28:	f000 f9f8 	bl	800a01c <TIM_OC1_SetConfig>
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	699a      	ldr	r2, [r3, #24]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f042 0208 	orr.w	r2, r2, #8
 8009c3a:	619a      	str	r2, [r3, #24]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	699a      	ldr	r2, [r3, #24]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f022 0204 	bic.w	r2, r2, #4
 8009c4a:	619a      	str	r2, [r3, #24]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	6999      	ldr	r1, [r3, #24]
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	691a      	ldr	r2, [r3, #16]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	430a      	orrs	r2, r1
 8009c5c:	619a      	str	r2, [r3, #24]
 8009c5e:	e064      	b.n	8009d2a <HAL_TIM_PWM_ConfigChannel+0x172>
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	68b9      	ldr	r1, [r7, #8]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 fa3e 	bl	800a0e8 <TIM_OC2_SetConfig>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	699a      	ldr	r2, [r3, #24]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c7a:	619a      	str	r2, [r3, #24]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	699a      	ldr	r2, [r3, #24]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c8a:	619a      	str	r2, [r3, #24]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	6999      	ldr	r1, [r3, #24]
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	021a      	lsls	r2, r3, #8
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	430a      	orrs	r2, r1
 8009c9e:	619a      	str	r2, [r3, #24]
 8009ca0:	e043      	b.n	8009d2a <HAL_TIM_PWM_ConfigChannel+0x172>
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68b9      	ldr	r1, [r7, #8]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f000 fa89 	bl	800a1c0 <TIM_OC3_SetConfig>
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	69da      	ldr	r2, [r3, #28]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f042 0208 	orr.w	r2, r2, #8
 8009cbc:	61da      	str	r2, [r3, #28]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	69da      	ldr	r2, [r3, #28]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f022 0204 	bic.w	r2, r2, #4
 8009ccc:	61da      	str	r2, [r3, #28]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	69d9      	ldr	r1, [r3, #28]
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	691a      	ldr	r2, [r3, #16]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	430a      	orrs	r2, r1
 8009cde:	61da      	str	r2, [r3, #28]
 8009ce0:	e023      	b.n	8009d2a <HAL_TIM_PWM_ConfigChannel+0x172>
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	68b9      	ldr	r1, [r7, #8]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f000 fad3 	bl	800a294 <TIM_OC4_SetConfig>
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	69da      	ldr	r2, [r3, #28]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cfc:	61da      	str	r2, [r3, #28]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	69da      	ldr	r2, [r3, #28]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d0c:	61da      	str	r2, [r3, #28]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	69d9      	ldr	r1, [r3, #28]
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	021a      	lsls	r2, r3, #8
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	430a      	orrs	r2, r1
 8009d20:	61da      	str	r2, [r3, #28]
 8009d22:	e002      	b.n	8009d2a <HAL_TIM_PWM_ConfigChannel+0x172>
 8009d24:	2301      	movs	r3, #1
 8009d26:	75fb      	strb	r3, [r7, #23]
 8009d28:	bf00      	nop
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009d32:	7dfb      	ldrb	r3, [r7, #23]
 8009d34:	4618      	mov	r0, r3
 8009d36:	3718      	adds	r7, #24
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <HAL_TIM_ConfigClockSource>:
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
 8009d46:	2300      	movs	r3, #0
 8009d48:	73fb      	strb	r3, [r7, #15]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d101      	bne.n	8009d58 <HAL_TIM_ConfigClockSource+0x1c>
 8009d54:	2302      	movs	r3, #2
 8009d56:	e0b4      	b.n	8009ec2 <HAL_TIM_ConfigClockSource+0x186>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2202      	movs	r2, #2
 8009d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	60bb      	str	r3, [r7, #8]
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009d76:	60bb      	str	r3, [r7, #8]
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d7e:	60bb      	str	r3, [r7, #8]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	609a      	str	r2, [r3, #8]
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d90:	d03e      	beq.n	8009e10 <HAL_TIM_ConfigClockSource+0xd4>
 8009d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d96:	f200 8087 	bhi.w	8009ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8009d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d9e:	f000 8086 	beq.w	8009eae <HAL_TIM_ConfigClockSource+0x172>
 8009da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009da6:	d87f      	bhi.n	8009ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8009da8:	2b70      	cmp	r3, #112	; 0x70
 8009daa:	d01a      	beq.n	8009de2 <HAL_TIM_ConfigClockSource+0xa6>
 8009dac:	2b70      	cmp	r3, #112	; 0x70
 8009dae:	d87b      	bhi.n	8009ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8009db0:	2b60      	cmp	r3, #96	; 0x60
 8009db2:	d050      	beq.n	8009e56 <HAL_TIM_ConfigClockSource+0x11a>
 8009db4:	2b60      	cmp	r3, #96	; 0x60
 8009db6:	d877      	bhi.n	8009ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8009db8:	2b50      	cmp	r3, #80	; 0x50
 8009dba:	d03c      	beq.n	8009e36 <HAL_TIM_ConfigClockSource+0xfa>
 8009dbc:	2b50      	cmp	r3, #80	; 0x50
 8009dbe:	d873      	bhi.n	8009ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8009dc0:	2b40      	cmp	r3, #64	; 0x40
 8009dc2:	d058      	beq.n	8009e76 <HAL_TIM_ConfigClockSource+0x13a>
 8009dc4:	2b40      	cmp	r3, #64	; 0x40
 8009dc6:	d86f      	bhi.n	8009ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8009dc8:	2b30      	cmp	r3, #48	; 0x30
 8009dca:	d064      	beq.n	8009e96 <HAL_TIM_ConfigClockSource+0x15a>
 8009dcc:	2b30      	cmp	r3, #48	; 0x30
 8009dce:	d86b      	bhi.n	8009ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8009dd0:	2b20      	cmp	r3, #32
 8009dd2:	d060      	beq.n	8009e96 <HAL_TIM_ConfigClockSource+0x15a>
 8009dd4:	2b20      	cmp	r3, #32
 8009dd6:	d867      	bhi.n	8009ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d05c      	beq.n	8009e96 <HAL_TIM_ConfigClockSource+0x15a>
 8009ddc:	2b10      	cmp	r3, #16
 8009dde:	d05a      	beq.n	8009e96 <HAL_TIM_ConfigClockSource+0x15a>
 8009de0:	e062      	b.n	8009ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6818      	ldr	r0, [r3, #0]
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	6899      	ldr	r1, [r3, #8]
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	685a      	ldr	r2, [r3, #4]
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	f000 fb19 	bl	800a428 <TIM_ETR_SetConfig>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	60bb      	str	r3, [r7, #8]
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009e04:	60bb      	str	r3, [r7, #8]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	609a      	str	r2, [r3, #8]
 8009e0e:	e04f      	b.n	8009eb0 <HAL_TIM_ConfigClockSource+0x174>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6818      	ldr	r0, [r3, #0]
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	6899      	ldr	r1, [r3, #8]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	f000 fb02 	bl	800a428 <TIM_ETR_SetConfig>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	689a      	ldr	r2, [r3, #8]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e32:	609a      	str	r2, [r3, #8]
 8009e34:	e03c      	b.n	8009eb0 <HAL_TIM_ConfigClockSource+0x174>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6818      	ldr	r0, [r3, #0]
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	6859      	ldr	r1, [r3, #4]
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	461a      	mov	r2, r3
 8009e44:	f000 fa76 	bl	800a334 <TIM_TI1_ConfigInputStage>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2150      	movs	r1, #80	; 0x50
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f000 facf 	bl	800a3f2 <TIM_ITRx_SetConfig>
 8009e54:	e02c      	b.n	8009eb0 <HAL_TIM_ConfigClockSource+0x174>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6818      	ldr	r0, [r3, #0]
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	6859      	ldr	r1, [r3, #4]
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	461a      	mov	r2, r3
 8009e64:	f000 fa95 	bl	800a392 <TIM_TI2_ConfigInputStage>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2160      	movs	r1, #96	; 0x60
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 fabf 	bl	800a3f2 <TIM_ITRx_SetConfig>
 8009e74:	e01c      	b.n	8009eb0 <HAL_TIM_ConfigClockSource+0x174>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6818      	ldr	r0, [r3, #0]
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	6859      	ldr	r1, [r3, #4]
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	461a      	mov	r2, r3
 8009e84:	f000 fa56 	bl	800a334 <TIM_TI1_ConfigInputStage>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2140      	movs	r1, #64	; 0x40
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 faaf 	bl	800a3f2 <TIM_ITRx_SetConfig>
 8009e94:	e00c      	b.n	8009eb0 <HAL_TIM_ConfigClockSource+0x174>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	f000 faa6 	bl	800a3f2 <TIM_ITRx_SetConfig>
 8009ea6:	e003      	b.n	8009eb0 <HAL_TIM_ConfigClockSource+0x174>
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	73fb      	strb	r3, [r7, #15]
 8009eac:	e000      	b.n	8009eb0 <HAL_TIM_ConfigClockSource+0x174>
 8009eae:	bf00      	nop
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009ec0:	7bfb      	ldrb	r3, [r7, #15]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <HAL_TIM_OC_DelayElapsedCallback>:
 8009eca:	b480      	push	{r7}
 8009ecc:	b083      	sub	sp, #12
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	bf00      	nop
 8009ed4:	370c      	adds	r7, #12
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <HAL_TIM_IC_CaptureCallback>:
 8009ede:	b480      	push	{r7}
 8009ee0:	b083      	sub	sp, #12
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
 8009ee6:	bf00      	nop
 8009ee8:	370c      	adds	r7, #12
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <HAL_TIM_PWM_PulseFinishedCallback>:
 8009ef2:	b480      	push	{r7}
 8009ef4:	b083      	sub	sp, #12
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	bf00      	nop
 8009efc:	370c      	adds	r7, #12
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <HAL_TIM_TriggerCallback>:
 8009f06:	b480      	push	{r7}
 8009f08:	b083      	sub	sp, #12
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	bf00      	nop
 8009f10:	370c      	adds	r7, #12
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
	...

08009f1c <TIM_Base_SetConfig>:
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	60fb      	str	r3, [r7, #12]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a34      	ldr	r2, [pc, #208]	; (800a000 <TIM_Base_SetConfig+0xe4>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d00f      	beq.n	8009f54 <TIM_Base_SetConfig+0x38>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f3a:	d00b      	beq.n	8009f54 <TIM_Base_SetConfig+0x38>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	4a31      	ldr	r2, [pc, #196]	; (800a004 <TIM_Base_SetConfig+0xe8>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d007      	beq.n	8009f54 <TIM_Base_SetConfig+0x38>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a30      	ldr	r2, [pc, #192]	; (800a008 <TIM_Base_SetConfig+0xec>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d003      	beq.n	8009f54 <TIM_Base_SetConfig+0x38>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4a2f      	ldr	r2, [pc, #188]	; (800a00c <TIM_Base_SetConfig+0xf0>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d108      	bne.n	8009f66 <TIM_Base_SetConfig+0x4a>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f5a:	60fb      	str	r3, [r7, #12]
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	60fb      	str	r3, [r7, #12]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	4a25      	ldr	r2, [pc, #148]	; (800a000 <TIM_Base_SetConfig+0xe4>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d01b      	beq.n	8009fa6 <TIM_Base_SetConfig+0x8a>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f74:	d017      	beq.n	8009fa6 <TIM_Base_SetConfig+0x8a>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4a22      	ldr	r2, [pc, #136]	; (800a004 <TIM_Base_SetConfig+0xe8>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d013      	beq.n	8009fa6 <TIM_Base_SetConfig+0x8a>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	4a21      	ldr	r2, [pc, #132]	; (800a008 <TIM_Base_SetConfig+0xec>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d00f      	beq.n	8009fa6 <TIM_Base_SetConfig+0x8a>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	4a20      	ldr	r2, [pc, #128]	; (800a00c <TIM_Base_SetConfig+0xf0>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d00b      	beq.n	8009fa6 <TIM_Base_SetConfig+0x8a>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4a1f      	ldr	r2, [pc, #124]	; (800a010 <TIM_Base_SetConfig+0xf4>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d007      	beq.n	8009fa6 <TIM_Base_SetConfig+0x8a>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	4a1e      	ldr	r2, [pc, #120]	; (800a014 <TIM_Base_SetConfig+0xf8>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d003      	beq.n	8009fa6 <TIM_Base_SetConfig+0x8a>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4a1d      	ldr	r2, [pc, #116]	; (800a018 <TIM_Base_SetConfig+0xfc>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d108      	bne.n	8009fb8 <TIM_Base_SetConfig+0x9c>
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fac:	60fb      	str	r3, [r7, #12]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	60fb      	str	r3, [r7, #12]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	695b      	ldr	r3, [r3, #20]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	60fb      	str	r3, [r7, #12]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	601a      	str	r2, [r3, #0]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	689a      	ldr	r2, [r3, #8]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	62da      	str	r2, [r3, #44]	; 0x2c
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	629a      	str	r2, [r3, #40]	; 0x28
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a08      	ldr	r2, [pc, #32]	; (800a000 <TIM_Base_SetConfig+0xe4>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d103      	bne.n	8009fec <TIM_Base_SetConfig+0xd0>
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	691a      	ldr	r2, [r3, #16]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	631a      	str	r2, [r3, #48]	; 0x30
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	615a      	str	r2, [r3, #20]
 8009ff2:	bf00      	nop
 8009ff4:	3714      	adds	r7, #20
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	40010000 	.word	0x40010000
 800a004:	40000400 	.word	0x40000400
 800a008:	40000800 	.word	0x40000800
 800a00c:	40000c00 	.word	0x40000c00
 800a010:	40014000 	.word	0x40014000
 800a014:	40014400 	.word	0x40014400
 800a018:	40014800 	.word	0x40014800

0800a01c <TIM_OC1_SetConfig>:
 800a01c:	b480      	push	{r7}
 800a01e:	b087      	sub	sp, #28
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a1b      	ldr	r3, [r3, #32]
 800a02a:	f023 0201 	bic.w	r2, r3, #1
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	621a      	str	r2, [r3, #32]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a1b      	ldr	r3, [r3, #32]
 800a036:	617b      	str	r3, [r7, #20]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	613b      	str	r3, [r7, #16]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	699b      	ldr	r3, [r3, #24]
 800a042:	60fb      	str	r3, [r7, #12]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a04a:	60fb      	str	r3, [r7, #12]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f023 0303 	bic.w	r3, r3, #3
 800a052:	60fb      	str	r3, [r7, #12]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	60fb      	str	r3, [r7, #12]
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	f023 0302 	bic.w	r3, r3, #2
 800a064:	617b      	str	r3, [r7, #20]
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	697a      	ldr	r2, [r7, #20]
 800a06c:	4313      	orrs	r3, r2
 800a06e:	617b      	str	r3, [r7, #20]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a1c      	ldr	r2, [pc, #112]	; (800a0e4 <TIM_OC1_SetConfig+0xc8>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d10c      	bne.n	800a092 <TIM_OC1_SetConfig+0x76>
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	f023 0308 	bic.w	r3, r3, #8
 800a07e:	617b      	str	r3, [r7, #20]
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	697a      	ldr	r2, [r7, #20]
 800a086:	4313      	orrs	r3, r2
 800a088:	617b      	str	r3, [r7, #20]
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	f023 0304 	bic.w	r3, r3, #4
 800a090:	617b      	str	r3, [r7, #20]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a13      	ldr	r2, [pc, #76]	; (800a0e4 <TIM_OC1_SetConfig+0xc8>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d111      	bne.n	800a0be <TIM_OC1_SetConfig+0xa2>
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0a0:	613b      	str	r3, [r7, #16]
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0a8:	613b      	str	r3, [r7, #16]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	695b      	ldr	r3, [r3, #20]
 800a0ae:	693a      	ldr	r2, [r7, #16]
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	613b      	str	r3, [r7, #16]
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	693a      	ldr	r2, [r7, #16]
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	613b      	str	r3, [r7, #16]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	693a      	ldr	r2, [r7, #16]
 800a0c2:	605a      	str	r2, [r3, #4]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	619a      	str	r2, [r3, #24]
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	685a      	ldr	r2, [r3, #4]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	635a      	str	r2, [r3, #52]	; 0x34
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	621a      	str	r2, [r3, #32]
 800a0d8:	bf00      	nop
 800a0da:	371c      	adds	r7, #28
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr
 800a0e4:	40010000 	.word	0x40010000

0800a0e8 <TIM_OC2_SetConfig>:
 800a0e8:	b480      	push	{r7}
 800a0ea:	b087      	sub	sp, #28
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a1b      	ldr	r3, [r3, #32]
 800a0f6:	f023 0210 	bic.w	r2, r3, #16
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	621a      	str	r2, [r3, #32]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6a1b      	ldr	r3, [r3, #32]
 800a102:	617b      	str	r3, [r7, #20]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	613b      	str	r3, [r7, #16]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	699b      	ldr	r3, [r3, #24]
 800a10e:	60fb      	str	r3, [r7, #12]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a116:	60fb      	str	r3, [r7, #12]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a11e:	60fb      	str	r3, [r7, #12]
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	021b      	lsls	r3, r3, #8
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	4313      	orrs	r3, r2
 800a12a:	60fb      	str	r3, [r7, #12]
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	f023 0320 	bic.w	r3, r3, #32
 800a132:	617b      	str	r3, [r7, #20]
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	011b      	lsls	r3, r3, #4
 800a13a:	697a      	ldr	r2, [r7, #20]
 800a13c:	4313      	orrs	r3, r2
 800a13e:	617b      	str	r3, [r7, #20]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4a1e      	ldr	r2, [pc, #120]	; (800a1bc <TIM_OC2_SetConfig+0xd4>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d10d      	bne.n	800a164 <TIM_OC2_SetConfig+0x7c>
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a14e:	617b      	str	r3, [r7, #20]
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	011b      	lsls	r3, r3, #4
 800a156:	697a      	ldr	r2, [r7, #20]
 800a158:	4313      	orrs	r3, r2
 800a15a:	617b      	str	r3, [r7, #20]
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a162:	617b      	str	r3, [r7, #20]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a15      	ldr	r2, [pc, #84]	; (800a1bc <TIM_OC2_SetConfig+0xd4>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d113      	bne.n	800a194 <TIM_OC2_SetConfig+0xac>
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a172:	613b      	str	r3, [r7, #16]
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a17a:	613b      	str	r3, [r7, #16]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	695b      	ldr	r3, [r3, #20]
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	693a      	ldr	r2, [r7, #16]
 800a184:	4313      	orrs	r3, r2
 800a186:	613b      	str	r3, [r7, #16]
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	693a      	ldr	r2, [r7, #16]
 800a190:	4313      	orrs	r3, r2
 800a192:	613b      	str	r3, [r7, #16]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	605a      	str	r2, [r3, #4]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	619a      	str	r2, [r3, #24]
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	685a      	ldr	r2, [r3, #4]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	639a      	str	r2, [r3, #56]	; 0x38
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	697a      	ldr	r2, [r7, #20]
 800a1ac:	621a      	str	r2, [r3, #32]
 800a1ae:	bf00      	nop
 800a1b0:	371c      	adds	r7, #28
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	40010000 	.word	0x40010000

0800a1c0 <TIM_OC3_SetConfig>:
 800a1c0:	b480      	push	{r7}
 800a1c2:	b087      	sub	sp, #28
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	621a      	str	r2, [r3, #32]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6a1b      	ldr	r3, [r3, #32]
 800a1da:	617b      	str	r3, [r7, #20]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	613b      	str	r3, [r7, #16]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	69db      	ldr	r3, [r3, #28]
 800a1e6:	60fb      	str	r3, [r7, #12]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ee:	60fb      	str	r3, [r7, #12]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f023 0303 	bic.w	r3, r3, #3
 800a1f6:	60fb      	str	r3, [r7, #12]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	60fb      	str	r3, [r7, #12]
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a208:	617b      	str	r3, [r7, #20]
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	021b      	lsls	r3, r3, #8
 800a210:	697a      	ldr	r2, [r7, #20]
 800a212:	4313      	orrs	r3, r2
 800a214:	617b      	str	r3, [r7, #20]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4a1d      	ldr	r2, [pc, #116]	; (800a290 <TIM_OC3_SetConfig+0xd0>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d10d      	bne.n	800a23a <TIM_OC3_SetConfig+0x7a>
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a224:	617b      	str	r3, [r7, #20]
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	021b      	lsls	r3, r3, #8
 800a22c:	697a      	ldr	r2, [r7, #20]
 800a22e:	4313      	orrs	r3, r2
 800a230:	617b      	str	r3, [r7, #20]
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a238:	617b      	str	r3, [r7, #20]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4a14      	ldr	r2, [pc, #80]	; (800a290 <TIM_OC3_SetConfig+0xd0>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d113      	bne.n	800a26a <TIM_OC3_SetConfig+0xaa>
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a248:	613b      	str	r3, [r7, #16]
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a250:	613b      	str	r3, [r7, #16]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	695b      	ldr	r3, [r3, #20]
 800a256:	011b      	lsls	r3, r3, #4
 800a258:	693a      	ldr	r2, [r7, #16]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	613b      	str	r3, [r7, #16]
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	011b      	lsls	r3, r3, #4
 800a264:	693a      	ldr	r2, [r7, #16]
 800a266:	4313      	orrs	r3, r2
 800a268:	613b      	str	r3, [r7, #16]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	693a      	ldr	r2, [r7, #16]
 800a26e:	605a      	str	r2, [r3, #4]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	61da      	str	r2, [r3, #28]
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	685a      	ldr	r2, [r3, #4]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	63da      	str	r2, [r3, #60]	; 0x3c
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	697a      	ldr	r2, [r7, #20]
 800a282:	621a      	str	r2, [r3, #32]
 800a284:	bf00      	nop
 800a286:	371c      	adds	r7, #28
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr
 800a290:	40010000 	.word	0x40010000

0800a294 <TIM_OC4_SetConfig>:
 800a294:	b480      	push	{r7}
 800a296:	b087      	sub	sp, #28
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	621a      	str	r2, [r3, #32]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a1b      	ldr	r3, [r3, #32]
 800a2ae:	613b      	str	r3, [r7, #16]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	617b      	str	r3, [r7, #20]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	69db      	ldr	r3, [r3, #28]
 800a2ba:	60fb      	str	r3, [r7, #12]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2c2:	60fb      	str	r3, [r7, #12]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2ca:	60fb      	str	r3, [r7, #12]
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	021b      	lsls	r3, r3, #8
 800a2d2:	68fa      	ldr	r2, [r7, #12]
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	60fb      	str	r3, [r7, #12]
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2de:	613b      	str	r3, [r7, #16]
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	031b      	lsls	r3, r3, #12
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	613b      	str	r3, [r7, #16]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a10      	ldr	r2, [pc, #64]	; (800a330 <TIM_OC4_SetConfig+0x9c>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d109      	bne.n	800a308 <TIM_OC4_SetConfig+0x74>
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2fa:	617b      	str	r3, [r7, #20]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	695b      	ldr	r3, [r3, #20]
 800a300:	019b      	lsls	r3, r3, #6
 800a302:	697a      	ldr	r2, [r7, #20]
 800a304:	4313      	orrs	r3, r2
 800a306:	617b      	str	r3, [r7, #20]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	697a      	ldr	r2, [r7, #20]
 800a30c:	605a      	str	r2, [r3, #4]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	61da      	str	r2, [r3, #28]
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	641a      	str	r2, [r3, #64]	; 0x40
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	621a      	str	r2, [r3, #32]
 800a322:	bf00      	nop
 800a324:	371c      	adds	r7, #28
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	40010000 	.word	0x40010000

0800a334 <TIM_TI1_ConfigInputStage>:
 800a334:	b480      	push	{r7}
 800a336:	b087      	sub	sp, #28
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6a1b      	ldr	r3, [r3, #32]
 800a344:	617b      	str	r3, [r7, #20]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6a1b      	ldr	r3, [r3, #32]
 800a34a:	f023 0201 	bic.w	r2, r3, #1
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	621a      	str	r2, [r3, #32]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	613b      	str	r3, [r7, #16]
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a35e:	613b      	str	r3, [r7, #16]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	011b      	lsls	r3, r3, #4
 800a364:	693a      	ldr	r2, [r7, #16]
 800a366:	4313      	orrs	r3, r2
 800a368:	613b      	str	r3, [r7, #16]
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	f023 030a 	bic.w	r3, r3, #10
 800a370:	617b      	str	r3, [r7, #20]
 800a372:	697a      	ldr	r2, [r7, #20]
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	4313      	orrs	r3, r2
 800a378:	617b      	str	r3, [r7, #20]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	693a      	ldr	r2, [r7, #16]
 800a37e:	619a      	str	r2, [r3, #24]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	621a      	str	r2, [r3, #32]
 800a386:	bf00      	nop
 800a388:	371c      	adds	r7, #28
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr

0800a392 <TIM_TI2_ConfigInputStage>:
 800a392:	b480      	push	{r7}
 800a394:	b087      	sub	sp, #28
 800a396:	af00      	add	r7, sp, #0
 800a398:	60f8      	str	r0, [r7, #12]
 800a39a:	60b9      	str	r1, [r7, #8]
 800a39c:	607a      	str	r2, [r7, #4]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6a1b      	ldr	r3, [r3, #32]
 800a3a2:	f023 0210 	bic.w	r2, r3, #16
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	621a      	str	r2, [r3, #32]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	699b      	ldr	r3, [r3, #24]
 800a3ae:	617b      	str	r3, [r7, #20]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	6a1b      	ldr	r3, [r3, #32]
 800a3b4:	613b      	str	r3, [r7, #16]
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3bc:	617b      	str	r3, [r7, #20]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	031b      	lsls	r3, r3, #12
 800a3c2:	697a      	ldr	r2, [r7, #20]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	617b      	str	r3, [r7, #20]
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a3ce:	613b      	str	r3, [r7, #16]
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	011b      	lsls	r3, r3, #4
 800a3d4:	693a      	ldr	r2, [r7, #16]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	613b      	str	r3, [r7, #16]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	697a      	ldr	r2, [r7, #20]
 800a3de:	619a      	str	r2, [r3, #24]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	693a      	ldr	r2, [r7, #16]
 800a3e4:	621a      	str	r2, [r3, #32]
 800a3e6:	bf00      	nop
 800a3e8:	371c      	adds	r7, #28
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <TIM_ITRx_SetConfig>:
 800a3f2:	b480      	push	{r7}
 800a3f4:	b085      	sub	sp, #20
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	6039      	str	r1, [r7, #0]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	60fb      	str	r3, [r7, #12]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a408:	60fb      	str	r3, [r7, #12]
 800a40a:	683a      	ldr	r2, [r7, #0]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	4313      	orrs	r3, r2
 800a410:	f043 0307 	orr.w	r3, r3, #7
 800a414:	60fb      	str	r3, [r7, #12]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	609a      	str	r2, [r3, #8]
 800a41c:	bf00      	nop
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <TIM_ETR_SetConfig>:
 800a428:	b480      	push	{r7}
 800a42a:	b087      	sub	sp, #28
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
 800a434:	603b      	str	r3, [r7, #0]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	617b      	str	r3, [r7, #20]
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a442:	617b      	str	r3, [r7, #20]
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	021a      	lsls	r2, r3, #8
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	431a      	orrs	r2, r3
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	4313      	orrs	r3, r2
 800a450:	697a      	ldr	r2, [r7, #20]
 800a452:	4313      	orrs	r3, r2
 800a454:	617b      	str	r3, [r7, #20]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	697a      	ldr	r2, [r7, #20]
 800a45a:	609a      	str	r2, [r3, #8]
 800a45c:	bf00      	nop
 800a45e:	371c      	adds	r7, #28
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <TIM_CCxChannelCmd>:
 800a468:	b480      	push	{r7}
 800a46a:	b087      	sub	sp, #28
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	607a      	str	r2, [r7, #4]
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	f003 031f 	and.w	r3, r3, #31
 800a47a:	2201      	movs	r2, #1
 800a47c:	fa02 f303 	lsl.w	r3, r2, r3
 800a480:	617b      	str	r3, [r7, #20]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6a1a      	ldr	r2, [r3, #32]
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	43db      	mvns	r3, r3
 800a48a:	401a      	ands	r2, r3
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	621a      	str	r2, [r3, #32]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6a1a      	ldr	r2, [r3, #32]
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	f003 031f 	and.w	r3, r3, #31
 800a49a:	6879      	ldr	r1, [r7, #4]
 800a49c:	fa01 f303 	lsl.w	r3, r1, r3
 800a4a0:	431a      	orrs	r2, r3
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	621a      	str	r2, [r3, #32]
 800a4a6:	bf00      	nop
 800a4a8:	371c      	adds	r7, #28
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr
	...

0800a4b4 <HAL_TIMEx_MasterConfigSynchronization>:
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d101      	bne.n	800a4cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a4c8:	2302      	movs	r3, #2
 800a4ca:	e050      	b.n	800a56e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2202      	movs	r2, #2
 800a4d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	60fb      	str	r3, [r7, #12]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	60bb      	str	r3, [r7, #8]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4f2:	60fb      	str	r3, [r7, #12]
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	60fb      	str	r3, [r7, #12]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	605a      	str	r2, [r3, #4]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a1c      	ldr	r2, [pc, #112]	; (800a57c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d018      	beq.n	800a542 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a518:	d013      	beq.n	800a542 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a18      	ldr	r2, [pc, #96]	; (800a580 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d00e      	beq.n	800a542 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a16      	ldr	r2, [pc, #88]	; (800a584 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d009      	beq.n	800a542 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a15      	ldr	r2, [pc, #84]	; (800a588 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d004      	beq.n	800a542 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a13      	ldr	r2, [pc, #76]	; (800a58c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d10c      	bne.n	800a55c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a548:	60bb      	str	r3, [r7, #8]
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	4313      	orrs	r3, r2
 800a552:	60bb      	str	r3, [r7, #8]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68ba      	ldr	r2, [r7, #8]
 800a55a:	609a      	str	r2, [r3, #8]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a56c:	2300      	movs	r3, #0
 800a56e:	4618      	mov	r0, r3
 800a570:	3714      	adds	r7, #20
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	40010000 	.word	0x40010000
 800a580:	40000400 	.word	0x40000400
 800a584:	40000800 	.word	0x40000800
 800a588:	40000c00 	.word	0x40000c00
 800a58c:	40014000 	.word	0x40014000

0800a590 <HAL_TIMEx_CommutCallback>:
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	bf00      	nop
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <HAL_TIMEx_BreakCallback>:
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <USB_CoreInit>:
 800a5b8:	b084      	sub	sp, #16
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b084      	sub	sp, #16
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	f107 001c 	add.w	r0, r7, #28
 800a5c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d122      	bne.n	800a616 <USB_CoreInit+0x5e>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	639a      	str	r2, [r3, #56]	; 0x38
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	68db      	ldr	r3, [r3, #12]
 800a5e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a5e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	60d3      	str	r3, [r2, #12]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	60da      	str	r2, [r3, #12]
 800a5f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d105      	bne.n	800a60a <USB_CoreInit+0x52>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	60da      	str	r2, [r3, #12]
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f001 fbee 	bl	800bdec <USB_CoreReset>
 800a610:	4603      	mov	r3, r0
 800a612:	73fb      	strb	r3, [r7, #15]
 800a614:	e01a      	b.n	800a64c <USB_CoreInit+0x94>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	60da      	str	r2, [r3, #12]
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f001 fbe2 	bl	800bdec <USB_CoreReset>
 800a628:	4603      	mov	r3, r0
 800a62a:	73fb      	strb	r3, [r7, #15]
 800a62c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d106      	bne.n	800a640 <USB_CoreInit+0x88>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a636:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	639a      	str	r2, [r3, #56]	; 0x38
 800a63e:	e005      	b.n	800a64c <USB_CoreInit+0x94>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a644:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	639a      	str	r2, [r3, #56]	; 0x38
 800a64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d10b      	bne.n	800a66a <USB_CoreInit+0xb2>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	f043 0206 	orr.w	r2, r3, #6
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	609a      	str	r2, [r3, #8]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	f043 0220 	orr.w	r2, r3, #32
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	609a      	str	r2, [r3, #8]
 800a66a:	7bfb      	ldrb	r3, [r7, #15]
 800a66c:	4618      	mov	r0, r3
 800a66e:	3710      	adds	r7, #16
 800a670:	46bd      	mov	sp, r7
 800a672:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a676:	b004      	add	sp, #16
 800a678:	4770      	bx	lr
	...

0800a67c <USB_SetTurnaroundTime>:
 800a67c:	b480      	push	{r7}
 800a67e:	b087      	sub	sp, #28
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	4613      	mov	r3, r2
 800a688:	71fb      	strb	r3, [r7, #7]
 800a68a:	79fb      	ldrb	r3, [r7, #7]
 800a68c:	2b02      	cmp	r3, #2
 800a68e:	d165      	bne.n	800a75c <USB_SetTurnaroundTime+0xe0>
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	4a41      	ldr	r2, [pc, #260]	; (800a798 <USB_SetTurnaroundTime+0x11c>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d906      	bls.n	800a6a6 <USB_SetTurnaroundTime+0x2a>
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	4a40      	ldr	r2, [pc, #256]	; (800a79c <USB_SetTurnaroundTime+0x120>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d202      	bcs.n	800a6a6 <USB_SetTurnaroundTime+0x2a>
 800a6a0:	230f      	movs	r3, #15
 800a6a2:	617b      	str	r3, [r7, #20]
 800a6a4:	e062      	b.n	800a76c <USB_SetTurnaroundTime+0xf0>
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	4a3c      	ldr	r2, [pc, #240]	; (800a79c <USB_SetTurnaroundTime+0x120>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d306      	bcc.n	800a6bc <USB_SetTurnaroundTime+0x40>
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	4a3b      	ldr	r2, [pc, #236]	; (800a7a0 <USB_SetTurnaroundTime+0x124>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d202      	bcs.n	800a6bc <USB_SetTurnaroundTime+0x40>
 800a6b6:	230e      	movs	r3, #14
 800a6b8:	617b      	str	r3, [r7, #20]
 800a6ba:	e057      	b.n	800a76c <USB_SetTurnaroundTime+0xf0>
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	4a38      	ldr	r2, [pc, #224]	; (800a7a0 <USB_SetTurnaroundTime+0x124>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d306      	bcc.n	800a6d2 <USB_SetTurnaroundTime+0x56>
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	4a37      	ldr	r2, [pc, #220]	; (800a7a4 <USB_SetTurnaroundTime+0x128>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d202      	bcs.n	800a6d2 <USB_SetTurnaroundTime+0x56>
 800a6cc:	230d      	movs	r3, #13
 800a6ce:	617b      	str	r3, [r7, #20]
 800a6d0:	e04c      	b.n	800a76c <USB_SetTurnaroundTime+0xf0>
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	4a33      	ldr	r2, [pc, #204]	; (800a7a4 <USB_SetTurnaroundTime+0x128>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d306      	bcc.n	800a6e8 <USB_SetTurnaroundTime+0x6c>
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	4a32      	ldr	r2, [pc, #200]	; (800a7a8 <USB_SetTurnaroundTime+0x12c>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d802      	bhi.n	800a6e8 <USB_SetTurnaroundTime+0x6c>
 800a6e2:	230c      	movs	r3, #12
 800a6e4:	617b      	str	r3, [r7, #20]
 800a6e6:	e041      	b.n	800a76c <USB_SetTurnaroundTime+0xf0>
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	4a2f      	ldr	r2, [pc, #188]	; (800a7a8 <USB_SetTurnaroundTime+0x12c>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d906      	bls.n	800a6fe <USB_SetTurnaroundTime+0x82>
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	4a2e      	ldr	r2, [pc, #184]	; (800a7ac <USB_SetTurnaroundTime+0x130>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d802      	bhi.n	800a6fe <USB_SetTurnaroundTime+0x82>
 800a6f8:	230b      	movs	r3, #11
 800a6fa:	617b      	str	r3, [r7, #20]
 800a6fc:	e036      	b.n	800a76c <USB_SetTurnaroundTime+0xf0>
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	4a2a      	ldr	r2, [pc, #168]	; (800a7ac <USB_SetTurnaroundTime+0x130>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d906      	bls.n	800a714 <USB_SetTurnaroundTime+0x98>
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	4a29      	ldr	r2, [pc, #164]	; (800a7b0 <USB_SetTurnaroundTime+0x134>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d802      	bhi.n	800a714 <USB_SetTurnaroundTime+0x98>
 800a70e:	230a      	movs	r3, #10
 800a710:	617b      	str	r3, [r7, #20]
 800a712:	e02b      	b.n	800a76c <USB_SetTurnaroundTime+0xf0>
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	4a26      	ldr	r2, [pc, #152]	; (800a7b0 <USB_SetTurnaroundTime+0x134>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d906      	bls.n	800a72a <USB_SetTurnaroundTime+0xae>
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	4a25      	ldr	r2, [pc, #148]	; (800a7b4 <USB_SetTurnaroundTime+0x138>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d202      	bcs.n	800a72a <USB_SetTurnaroundTime+0xae>
 800a724:	2309      	movs	r3, #9
 800a726:	617b      	str	r3, [r7, #20]
 800a728:	e020      	b.n	800a76c <USB_SetTurnaroundTime+0xf0>
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	4a21      	ldr	r2, [pc, #132]	; (800a7b4 <USB_SetTurnaroundTime+0x138>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d306      	bcc.n	800a740 <USB_SetTurnaroundTime+0xc4>
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	4a20      	ldr	r2, [pc, #128]	; (800a7b8 <USB_SetTurnaroundTime+0x13c>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d802      	bhi.n	800a740 <USB_SetTurnaroundTime+0xc4>
 800a73a:	2308      	movs	r3, #8
 800a73c:	617b      	str	r3, [r7, #20]
 800a73e:	e015      	b.n	800a76c <USB_SetTurnaroundTime+0xf0>
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	4a1d      	ldr	r2, [pc, #116]	; (800a7b8 <USB_SetTurnaroundTime+0x13c>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d906      	bls.n	800a756 <USB_SetTurnaroundTime+0xda>
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	4a1c      	ldr	r2, [pc, #112]	; (800a7bc <USB_SetTurnaroundTime+0x140>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d202      	bcs.n	800a756 <USB_SetTurnaroundTime+0xda>
 800a750:	2307      	movs	r3, #7
 800a752:	617b      	str	r3, [r7, #20]
 800a754:	e00a      	b.n	800a76c <USB_SetTurnaroundTime+0xf0>
 800a756:	2306      	movs	r3, #6
 800a758:	617b      	str	r3, [r7, #20]
 800a75a:	e007      	b.n	800a76c <USB_SetTurnaroundTime+0xf0>
 800a75c:	79fb      	ldrb	r3, [r7, #7]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d102      	bne.n	800a768 <USB_SetTurnaroundTime+0xec>
 800a762:	2309      	movs	r3, #9
 800a764:	617b      	str	r3, [r7, #20]
 800a766:	e001      	b.n	800a76c <USB_SetTurnaroundTime+0xf0>
 800a768:	2309      	movs	r3, #9
 800a76a:	617b      	str	r3, [r7, #20]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	60da      	str	r2, [r3, #12]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	68da      	ldr	r2, [r3, #12]
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	029b      	lsls	r3, r3, #10
 800a780:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a784:	431a      	orrs	r2, r3
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	60da      	str	r2, [r3, #12]
 800a78a:	2300      	movs	r3, #0
 800a78c:	4618      	mov	r0, r3
 800a78e:	371c      	adds	r7, #28
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr
 800a798:	00d8acbf 	.word	0x00d8acbf
 800a79c:	00e4e1c0 	.word	0x00e4e1c0
 800a7a0:	00f42400 	.word	0x00f42400
 800a7a4:	01067380 	.word	0x01067380
 800a7a8:	011a499f 	.word	0x011a499f
 800a7ac:	01312cff 	.word	0x01312cff
 800a7b0:	014ca43f 	.word	0x014ca43f
 800a7b4:	016e3600 	.word	0x016e3600
 800a7b8:	01a6ab1f 	.word	0x01a6ab1f
 800a7bc:	01e84800 	.word	0x01e84800

0800a7c0 <USB_EnableGlobalInt>:
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	f043 0201 	orr.w	r2, r3, #1
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	609a      	str	r2, [r3, #8]
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	370c      	adds	r7, #12
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr

0800a7e2 <USB_DisableGlobalInt>:
 800a7e2:	b480      	push	{r7}
 800a7e4:	b083      	sub	sp, #12
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	f023 0201 	bic.w	r2, r3, #1
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	609a      	str	r2, [r3, #8]
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <USB_SetCurrentMode>:
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	460b      	mov	r3, r1
 800a80e:	70fb      	strb	r3, [r7, #3]
 800a810:	2300      	movs	r3, #0
 800a812:	60fb      	str	r3, [r7, #12]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	60da      	str	r2, [r3, #12]
 800a820:	78fb      	ldrb	r3, [r7, #3]
 800a822:	2b01      	cmp	r3, #1
 800a824:	d115      	bne.n	800a852 <USB_SetCurrentMode+0x4e>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	60da      	str	r2, [r3, #12]
 800a832:	2001      	movs	r0, #1
 800a834:	f7fa f882 	bl	800493c <HAL_Delay>
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	3301      	adds	r3, #1
 800a83c:	60fb      	str	r3, [r7, #12]
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f001 fa45 	bl	800bcce <USB_GetMode>
 800a844:	4603      	mov	r3, r0
 800a846:	2b01      	cmp	r3, #1
 800a848:	d01e      	beq.n	800a888 <USB_SetCurrentMode+0x84>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2b31      	cmp	r3, #49	; 0x31
 800a84e:	d9f0      	bls.n	800a832 <USB_SetCurrentMode+0x2e>
 800a850:	e01a      	b.n	800a888 <USB_SetCurrentMode+0x84>
 800a852:	78fb      	ldrb	r3, [r7, #3]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d115      	bne.n	800a884 <USB_SetCurrentMode+0x80>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	60da      	str	r2, [r3, #12]
 800a864:	2001      	movs	r0, #1
 800a866:	f7fa f869 	bl	800493c <HAL_Delay>
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	3301      	adds	r3, #1
 800a86e:	60fb      	str	r3, [r7, #12]
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f001 fa2c 	bl	800bcce <USB_GetMode>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d005      	beq.n	800a888 <USB_SetCurrentMode+0x84>
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2b31      	cmp	r3, #49	; 0x31
 800a880:	d9f0      	bls.n	800a864 <USB_SetCurrentMode+0x60>
 800a882:	e001      	b.n	800a888 <USB_SetCurrentMode+0x84>
 800a884:	2301      	movs	r3, #1
 800a886:	e005      	b.n	800a894 <USB_SetCurrentMode+0x90>
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2b32      	cmp	r3, #50	; 0x32
 800a88c:	d101      	bne.n	800a892 <USB_SetCurrentMode+0x8e>
 800a88e:	2301      	movs	r3, #1
 800a890:	e000      	b.n	800a894 <USB_SetCurrentMode+0x90>
 800a892:	2300      	movs	r3, #0
 800a894:	4618      	mov	r0, r3
 800a896:	3710      	adds	r7, #16
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <USB_DevInit>:
 800a89c:	b084      	sub	sp, #16
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b086      	sub	sp, #24
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
 800a8a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a8aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	75fb      	strb	r3, [r7, #23]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	60fb      	str	r3, [r7, #12]
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	613b      	str	r3, [r7, #16]
 800a8ba:	e009      	b.n	800a8d0 <USB_DevInit+0x34>
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	3340      	adds	r3, #64	; 0x40
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	4413      	add	r3, r2
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	605a      	str	r2, [r3, #4]
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	613b      	str	r3, [r7, #16]
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	2b0e      	cmp	r3, #14
 800a8d4:	d9f2      	bls.n	800a8bc <USB_DevInit+0x20>
 800a8d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d11c      	bne.n	800a916 <USB_DevInit+0x7a>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8ea:	f043 0302 	orr.w	r3, r3, #2
 800a8ee:	6053      	str	r3, [r2, #4]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	639a      	str	r2, [r3, #56]	; 0x38
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a900:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	639a      	str	r2, [r3, #56]	; 0x38
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	639a      	str	r2, [r3, #56]	; 0x38
 800a914:	e00b      	b.n	800a92e <USB_DevInit+0x92>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a91a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	639a      	str	r2, [r3, #56]	; 0x38
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a926:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	639a      	str	r2, [r3, #56]	; 0x38
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a934:	461a      	mov	r2, r3
 800a936:	2300      	movs	r3, #0
 800a938:	6013      	str	r3, [r2, #0]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a940:	4619      	mov	r1, r3
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a948:	461a      	mov	r2, r3
 800a94a:	680b      	ldr	r3, [r1, #0]
 800a94c:	6013      	str	r3, [r2, #0]
 800a94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a950:	2b01      	cmp	r3, #1
 800a952:	d10c      	bne.n	800a96e <USB_DevInit+0xd2>
 800a954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a956:	2b00      	cmp	r3, #0
 800a958:	d104      	bne.n	800a964 <USB_DevInit+0xc8>
 800a95a:	2100      	movs	r1, #0
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 f965 	bl	800ac2c <USB_SetDevSpeed>
 800a962:	e008      	b.n	800a976 <USB_DevInit+0xda>
 800a964:	2101      	movs	r1, #1
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f960 	bl	800ac2c <USB_SetDevSpeed>
 800a96c:	e003      	b.n	800a976 <USB_DevInit+0xda>
 800a96e:	2103      	movs	r1, #3
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 f95b 	bl	800ac2c <USB_SetDevSpeed>
 800a976:	2110      	movs	r1, #16
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 f8f3 	bl	800ab64 <USB_FlushTxFifo>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d001      	beq.n	800a988 <USB_DevInit+0xec>
 800a984:	2301      	movs	r3, #1
 800a986:	75fb      	strb	r3, [r7, #23]
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 f91f 	bl	800abcc <USB_FlushRxFifo>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d001      	beq.n	800a998 <USB_DevInit+0xfc>
 800a994:	2301      	movs	r3, #1
 800a996:	75fb      	strb	r3, [r7, #23]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a99e:	461a      	mov	r2, r3
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	6113      	str	r3, [r2, #16]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	6153      	str	r3, [r2, #20]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	61d3      	str	r3, [r2, #28]
 800a9bc:	2300      	movs	r3, #0
 800a9be:	613b      	str	r3, [r7, #16]
 800a9c0:	e043      	b.n	800aa4a <USB_DevInit+0x1ae>
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	015a      	lsls	r2, r3, #5
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9d8:	d118      	bne.n	800aa0c <USB_DevInit+0x170>
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d10a      	bne.n	800a9f6 <USB_DevInit+0x15a>
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	015a      	lsls	r2, r3, #5
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a9f2:	6013      	str	r3, [r2, #0]
 800a9f4:	e013      	b.n	800aa1e <USB_DevInit+0x182>
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	015a      	lsls	r2, r3, #5
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa02:	461a      	mov	r2, r3
 800aa04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa08:	6013      	str	r3, [r2, #0]
 800aa0a:	e008      	b.n	800aa1e <USB_DevInit+0x182>
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	015a      	lsls	r2, r3, #5
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	4413      	add	r3, r2
 800aa14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa18:	461a      	mov	r2, r3
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	6013      	str	r3, [r2, #0]
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	015a      	lsls	r2, r3, #5
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	4413      	add	r3, r2
 800aa26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	6113      	str	r3, [r2, #16]
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	015a      	lsls	r2, r3, #5
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	4413      	add	r3, r2
 800aa38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa42:	6093      	str	r3, [r2, #8]
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	3301      	adds	r3, #1
 800aa48:	613b      	str	r3, [r7, #16]
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4c:	693a      	ldr	r2, [r7, #16]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d3b7      	bcc.n	800a9c2 <USB_DevInit+0x126>
 800aa52:	2300      	movs	r3, #0
 800aa54:	613b      	str	r3, [r7, #16]
 800aa56:	e043      	b.n	800aae0 <USB_DevInit+0x244>
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	015a      	lsls	r2, r3, #5
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	4413      	add	r3, r2
 800aa60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa6e:	d118      	bne.n	800aaa2 <USB_DevInit+0x206>
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d10a      	bne.n	800aa8c <USB_DevInit+0x1f0>
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	015a      	lsls	r2, r3, #5
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa82:	461a      	mov	r2, r3
 800aa84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa88:	6013      	str	r3, [r2, #0]
 800aa8a:	e013      	b.n	800aab4 <USB_DevInit+0x218>
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	015a      	lsls	r2, r3, #5
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	4413      	add	r3, r2
 800aa94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa98:	461a      	mov	r2, r3
 800aa9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa9e:	6013      	str	r3, [r2, #0]
 800aaa0:	e008      	b.n	800aab4 <USB_DevInit+0x218>
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	015a      	lsls	r2, r3, #5
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaae:	461a      	mov	r2, r3
 800aab0:	2300      	movs	r3, #0
 800aab2:	6013      	str	r3, [r2, #0]
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	015a      	lsls	r2, r3, #5
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	4413      	add	r3, r2
 800aabc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aac0:	461a      	mov	r2, r3
 800aac2:	2300      	movs	r3, #0
 800aac4:	6113      	str	r3, [r2, #16]
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	015a      	lsls	r2, r3, #5
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	4413      	add	r3, r2
 800aace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aad2:	461a      	mov	r2, r3
 800aad4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aad8:	6093      	str	r3, [r2, #8]
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	3301      	adds	r3, #1
 800aade:	613b      	str	r3, [r7, #16]
 800aae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae2:	693a      	ldr	r2, [r7, #16]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d3b7      	bcc.n	800aa58 <USB_DevInit+0x1bc>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaee:	691b      	ldr	r3, [r3, #16]
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aaf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aafa:	6113      	str	r3, [r2, #16]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2200      	movs	r2, #0
 800ab00:	619a      	str	r2, [r3, #24]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ab08:	615a      	str	r2, [r3, #20]
 800ab0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d105      	bne.n	800ab1c <USB_DevInit+0x280>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	699b      	ldr	r3, [r3, #24]
 800ab14:	f043 0210 	orr.w	r2, r3, #16
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	619a      	str	r2, [r3, #24]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	699a      	ldr	r2, [r3, #24]
 800ab20:	4b0f      	ldr	r3, [pc, #60]	; (800ab60 <USB_DevInit+0x2c4>)
 800ab22:	4313      	orrs	r3, r2
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	6193      	str	r3, [r2, #24]
 800ab28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d005      	beq.n	800ab3a <USB_DevInit+0x29e>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	f043 0208 	orr.w	r2, r3, #8
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	619a      	str	r2, [r3, #24]
 800ab3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d107      	bne.n	800ab50 <USB_DevInit+0x2b4>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	699b      	ldr	r3, [r3, #24]
 800ab44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab48:	f043 0304 	orr.w	r3, r3, #4
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	6193      	str	r3, [r2, #24]
 800ab50:	7dfb      	ldrb	r3, [r7, #23]
 800ab52:	4618      	mov	r0, r3
 800ab54:	3718      	adds	r7, #24
 800ab56:	46bd      	mov	sp, r7
 800ab58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab5c:	b004      	add	sp, #16
 800ab5e:	4770      	bx	lr
 800ab60:	803c3800 	.word	0x803c3800

0800ab64 <USB_FlushTxFifo>:
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
 800ab6e:	2300      	movs	r3, #0
 800ab70:	60fb      	str	r3, [r7, #12]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	3301      	adds	r3, #1
 800ab76:	60fb      	str	r3, [r7, #12]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	4a13      	ldr	r2, [pc, #76]	; (800abc8 <USB_FlushTxFifo+0x64>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d901      	bls.n	800ab84 <USB_FlushTxFifo+0x20>
 800ab80:	2303      	movs	r3, #3
 800ab82:	e01b      	b.n	800abbc <USB_FlushTxFifo+0x58>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	691b      	ldr	r3, [r3, #16]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	daf2      	bge.n	800ab72 <USB_FlushTxFifo+0xe>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	60fb      	str	r3, [r7, #12]
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	019b      	lsls	r3, r3, #6
 800ab94:	f043 0220 	orr.w	r2, r3, #32
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	611a      	str	r2, [r3, #16]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	60fb      	str	r3, [r7, #12]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	4a08      	ldr	r2, [pc, #32]	; (800abc8 <USB_FlushTxFifo+0x64>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d901      	bls.n	800abae <USB_FlushTxFifo+0x4a>
 800abaa:	2303      	movs	r3, #3
 800abac:	e006      	b.n	800abbc <USB_FlushTxFifo+0x58>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	f003 0320 	and.w	r3, r3, #32
 800abb6:	2b20      	cmp	r3, #32
 800abb8:	d0f0      	beq.n	800ab9c <USB_FlushTxFifo+0x38>
 800abba:	2300      	movs	r3, #0
 800abbc:	4618      	mov	r0, r3
 800abbe:	3714      	adds	r7, #20
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr
 800abc8:	00030d40 	.word	0x00030d40

0800abcc <USB_FlushRxFifo>:
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	2300      	movs	r3, #0
 800abd6:	60fb      	str	r3, [r7, #12]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	3301      	adds	r3, #1
 800abdc:	60fb      	str	r3, [r7, #12]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	4a11      	ldr	r2, [pc, #68]	; (800ac28 <USB_FlushRxFifo+0x5c>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d901      	bls.n	800abea <USB_FlushRxFifo+0x1e>
 800abe6:	2303      	movs	r3, #3
 800abe8:	e018      	b.n	800ac1c <USB_FlushRxFifo+0x50>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	daf2      	bge.n	800abd8 <USB_FlushRxFifo+0xc>
 800abf2:	2300      	movs	r3, #0
 800abf4:	60fb      	str	r3, [r7, #12]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2210      	movs	r2, #16
 800abfa:	611a      	str	r2, [r3, #16]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	3301      	adds	r3, #1
 800ac00:	60fb      	str	r3, [r7, #12]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	4a08      	ldr	r2, [pc, #32]	; (800ac28 <USB_FlushRxFifo+0x5c>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d901      	bls.n	800ac0e <USB_FlushRxFifo+0x42>
 800ac0a:	2303      	movs	r3, #3
 800ac0c:	e006      	b.n	800ac1c <USB_FlushRxFifo+0x50>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	691b      	ldr	r3, [r3, #16]
 800ac12:	f003 0310 	and.w	r3, r3, #16
 800ac16:	2b10      	cmp	r3, #16
 800ac18:	d0f0      	beq.n	800abfc <USB_FlushRxFifo+0x30>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3714      	adds	r7, #20
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr
 800ac28:	00030d40 	.word	0x00030d40

0800ac2c <USB_SetDevSpeed>:
 800ac2c:	b480      	push	{r7}
 800ac2e:	b085      	sub	sp, #20
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	460b      	mov	r3, r1
 800ac36:	70fb      	strb	r3, [r7, #3]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	60fb      	str	r3, [r7, #12]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	78fb      	ldrb	r3, [r7, #3]
 800ac46:	68f9      	ldr	r1, [r7, #12]
 800ac48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	600b      	str	r3, [r1, #0]
 800ac50:	2300      	movs	r3, #0
 800ac52:	4618      	mov	r0, r3
 800ac54:	3714      	adds	r7, #20
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr

0800ac5e <USB_GetDevSpeed>:
 800ac5e:	b480      	push	{r7}
 800ac60:	b087      	sub	sp, #28
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	613b      	str	r3, [r7, #16]
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	f003 0306 	and.w	r3, r3, #6
 800ac76:	60fb      	str	r3, [r7, #12]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d102      	bne.n	800ac84 <USB_GetDevSpeed+0x26>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	75fb      	strb	r3, [r7, #23]
 800ac82:	e00a      	b.n	800ac9a <USB_GetDevSpeed+0x3c>
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	d002      	beq.n	800ac90 <USB_GetDevSpeed+0x32>
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2b06      	cmp	r3, #6
 800ac8e:	d102      	bne.n	800ac96 <USB_GetDevSpeed+0x38>
 800ac90:	2302      	movs	r3, #2
 800ac92:	75fb      	strb	r3, [r7, #23]
 800ac94:	e001      	b.n	800ac9a <USB_GetDevSpeed+0x3c>
 800ac96:	230f      	movs	r3, #15
 800ac98:	75fb      	strb	r3, [r7, #23]
 800ac9a:	7dfb      	ldrb	r3, [r7, #23]
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	371c      	adds	r7, #28
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <USB_ActivateEndpoint>:
 800aca8:	b480      	push	{r7}
 800acaa:	b085      	sub	sp, #20
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	60fb      	str	r3, [r7, #12]
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	60bb      	str	r3, [r7, #8]
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	785b      	ldrb	r3, [r3, #1]
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d13a      	bne.n	800ad3a <USB_ActivateEndpoint+0x92>
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acca:	69da      	ldr	r2, [r3, #28]
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	f003 030f 	and.w	r3, r3, #15
 800acd4:	2101      	movs	r1, #1
 800acd6:	fa01 f303 	lsl.w	r3, r1, r3
 800acda:	b29b      	uxth	r3, r3
 800acdc:	68f9      	ldr	r1, [r7, #12]
 800acde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ace2:	4313      	orrs	r3, r2
 800ace4:	61cb      	str	r3, [r1, #28]
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	015a      	lsls	r2, r3, #5
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	4413      	add	r3, r2
 800acee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d155      	bne.n	800ada8 <USB_ActivateEndpoint+0x100>
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	015a      	lsls	r2, r3, #5
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	4413      	add	r3, r2
 800ad04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	791b      	ldrb	r3, [r3, #4]
 800ad16:	049b      	lsls	r3, r3, #18
 800ad18:	4319      	orrs	r1, r3
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	059b      	lsls	r3, r3, #22
 800ad1e:	430b      	orrs	r3, r1
 800ad20:	4313      	orrs	r3, r2
 800ad22:	68ba      	ldr	r2, [r7, #8]
 800ad24:	0151      	lsls	r1, r2, #5
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	440a      	add	r2, r1
 800ad2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad36:	6013      	str	r3, [r2, #0]
 800ad38:	e036      	b.n	800ada8 <USB_ActivateEndpoint+0x100>
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad40:	69da      	ldr	r2, [r3, #28]
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	f003 030f 	and.w	r3, r3, #15
 800ad4a:	2101      	movs	r1, #1
 800ad4c:	fa01 f303 	lsl.w	r3, r1, r3
 800ad50:	041b      	lsls	r3, r3, #16
 800ad52:	68f9      	ldr	r1, [r7, #12]
 800ad54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	61cb      	str	r3, [r1, #28]
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	015a      	lsls	r2, r3, #5
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	4413      	add	r3, r2
 800ad64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d11a      	bne.n	800ada8 <USB_ActivateEndpoint+0x100>
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	015a      	lsls	r2, r3, #5
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	4413      	add	r3, r2
 800ad7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	f3c3 010a 	ubfx	r1, r3, #0, #11
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	791b      	ldrb	r3, [r3, #4]
 800ad8c:	049b      	lsls	r3, r3, #18
 800ad8e:	430b      	orrs	r3, r1
 800ad90:	4313      	orrs	r3, r2
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	0151      	lsls	r1, r2, #5
 800ad96:	68fa      	ldr	r2, [r7, #12]
 800ad98:	440a      	add	r2, r1
 800ad9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ada2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ada6:	6013      	str	r3, [r2, #0]
 800ada8:	2300      	movs	r3, #0
 800adaa:	4618      	mov	r0, r3
 800adac:	3714      	adds	r7, #20
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
	...

0800adb8 <USB_DeactivateEndpoint>:
 800adb8:	b480      	push	{r7}
 800adba:	b085      	sub	sp, #20
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	60fb      	str	r3, [r7, #12]
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	60bb      	str	r3, [r7, #8]
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	785b      	ldrb	r3, [r3, #1]
 800add0:	2b01      	cmp	r3, #1
 800add2:	d161      	bne.n	800ae98 <USB_DeactivateEndpoint+0xe0>
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	015a      	lsls	r2, r3, #5
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	4413      	add	r3, r2
 800addc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ade6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800adea:	d11f      	bne.n	800ae2c <USB_DeactivateEndpoint+0x74>
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	015a      	lsls	r2, r3, #5
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	4413      	add	r3, r2
 800adf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	68ba      	ldr	r2, [r7, #8]
 800adfc:	0151      	lsls	r1, r2, #5
 800adfe:	68fa      	ldr	r2, [r7, #12]
 800ae00:	440a      	add	r2, r1
 800ae02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ae0a:	6013      	str	r3, [r2, #0]
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	015a      	lsls	r2, r3, #5
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	4413      	add	r3, r2
 800ae14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	68ba      	ldr	r2, [r7, #8]
 800ae1c:	0151      	lsls	r1, r2, #5
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	440a      	add	r2, r1
 800ae22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae2a:	6013      	str	r3, [r2, #0]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	f003 030f 	and.w	r3, r3, #15
 800ae3c:	2101      	movs	r1, #1
 800ae3e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	43db      	mvns	r3, r3
 800ae46:	68f9      	ldr	r1, [r7, #12]
 800ae48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae4c:	4013      	ands	r3, r2
 800ae4e:	63cb      	str	r3, [r1, #60]	; 0x3c
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae56:	69da      	ldr	r2, [r3, #28]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	f003 030f 	and.w	r3, r3, #15
 800ae60:	2101      	movs	r1, #1
 800ae62:	fa01 f303 	lsl.w	r3, r1, r3
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	43db      	mvns	r3, r3
 800ae6a:	68f9      	ldr	r1, [r7, #12]
 800ae6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae70:	4013      	ands	r3, r2
 800ae72:	61cb      	str	r3, [r1, #28]
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	015a      	lsls	r2, r3, #5
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	4413      	add	r3, r2
 800ae7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	0159      	lsls	r1, r3, #5
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	440b      	add	r3, r1
 800ae8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae8e:	4619      	mov	r1, r3
 800ae90:	4b35      	ldr	r3, [pc, #212]	; (800af68 <USB_DeactivateEndpoint+0x1b0>)
 800ae92:	4013      	ands	r3, r2
 800ae94:	600b      	str	r3, [r1, #0]
 800ae96:	e060      	b.n	800af5a <USB_DeactivateEndpoint+0x1a2>
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	015a      	lsls	r2, r3, #5
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	4413      	add	r3, r2
 800aea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aeaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aeae:	d11f      	bne.n	800aef0 <USB_DeactivateEndpoint+0x138>
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	015a      	lsls	r2, r3, #5
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	0151      	lsls	r1, r2, #5
 800aec2:	68fa      	ldr	r2, [r7, #12]
 800aec4:	440a      	add	r2, r1
 800aec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aece:	6013      	str	r3, [r2, #0]
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	015a      	lsls	r2, r3, #5
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	4413      	add	r3, r2
 800aed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	0151      	lsls	r1, r2, #5
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	440a      	add	r2, r1
 800aee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aeee:	6013      	str	r3, [r2, #0]
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	f003 030f 	and.w	r3, r3, #15
 800af00:	2101      	movs	r1, #1
 800af02:	fa01 f303 	lsl.w	r3, r1, r3
 800af06:	041b      	lsls	r3, r3, #16
 800af08:	43db      	mvns	r3, r3
 800af0a:	68f9      	ldr	r1, [r7, #12]
 800af0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af10:	4013      	ands	r3, r2
 800af12:	63cb      	str	r3, [r1, #60]	; 0x3c
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af1a:	69da      	ldr	r2, [r3, #28]
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	f003 030f 	and.w	r3, r3, #15
 800af24:	2101      	movs	r1, #1
 800af26:	fa01 f303 	lsl.w	r3, r1, r3
 800af2a:	041b      	lsls	r3, r3, #16
 800af2c:	43db      	mvns	r3, r3
 800af2e:	68f9      	ldr	r1, [r7, #12]
 800af30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af34:	4013      	ands	r3, r2
 800af36:	61cb      	str	r3, [r1, #28]
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	015a      	lsls	r2, r3, #5
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	4413      	add	r3, r2
 800af40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	0159      	lsls	r1, r3, #5
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	440b      	add	r3, r1
 800af4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af52:	4619      	mov	r1, r3
 800af54:	4b05      	ldr	r3, [pc, #20]	; (800af6c <USB_DeactivateEndpoint+0x1b4>)
 800af56:	4013      	ands	r3, r2
 800af58:	600b      	str	r3, [r1, #0]
 800af5a:	2300      	movs	r3, #0
 800af5c:	4618      	mov	r0, r3
 800af5e:	3714      	adds	r7, #20
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr
 800af68:	ec337800 	.word	0xec337800
 800af6c:	eff37800 	.word	0xeff37800

0800af70 <USB_EPStartXfer>:
 800af70:	b580      	push	{r7, lr}
 800af72:	b08a      	sub	sp, #40	; 0x28
 800af74:	af02      	add	r7, sp, #8
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	4613      	mov	r3, r2
 800af7c:	71fb      	strb	r3, [r7, #7]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	61fb      	str	r3, [r7, #28]
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	61bb      	str	r3, [r7, #24]
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	785b      	ldrb	r3, [r3, #1]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	f040 815c 	bne.w	800b24a <USB_EPStartXfer+0x2da>
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	699b      	ldr	r3, [r3, #24]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d132      	bne.n	800b000 <USB_EPStartXfer+0x90>
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	015a      	lsls	r2, r3, #5
 800af9e:	69fb      	ldr	r3, [r7, #28]
 800afa0:	4413      	add	r3, r2
 800afa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afa6:	691b      	ldr	r3, [r3, #16]
 800afa8:	69ba      	ldr	r2, [r7, #24]
 800afaa:	0151      	lsls	r1, r2, #5
 800afac:	69fa      	ldr	r2, [r7, #28]
 800afae:	440a      	add	r2, r1
 800afb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800afb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800afbc:	6113      	str	r3, [r2, #16]
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	015a      	lsls	r2, r3, #5
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	4413      	add	r3, r2
 800afc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	69ba      	ldr	r2, [r7, #24]
 800afce:	0151      	lsls	r1, r2, #5
 800afd0:	69fa      	ldr	r2, [r7, #28]
 800afd2:	440a      	add	r2, r1
 800afd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800afdc:	6113      	str	r3, [r2, #16]
 800afde:	69bb      	ldr	r3, [r7, #24]
 800afe0:	015a      	lsls	r2, r3, #5
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	4413      	add	r3, r2
 800afe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	69ba      	ldr	r2, [r7, #24]
 800afee:	0151      	lsls	r1, r2, #5
 800aff0:	69fa      	ldr	r2, [r7, #28]
 800aff2:	440a      	add	r2, r1
 800aff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aff8:	0cdb      	lsrs	r3, r3, #19
 800affa:	04db      	lsls	r3, r3, #19
 800affc:	6113      	str	r3, [r2, #16]
 800affe:	e074      	b.n	800b0ea <USB_EPStartXfer+0x17a>
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	015a      	lsls	r2, r3, #5
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	4413      	add	r3, r2
 800b008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b00c:	691b      	ldr	r3, [r3, #16]
 800b00e:	69ba      	ldr	r2, [r7, #24]
 800b010:	0151      	lsls	r1, r2, #5
 800b012:	69fa      	ldr	r2, [r7, #28]
 800b014:	440a      	add	r2, r1
 800b016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b01a:	0cdb      	lsrs	r3, r3, #19
 800b01c:	04db      	lsls	r3, r3, #19
 800b01e:	6113      	str	r3, [r2, #16]
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	015a      	lsls	r2, r3, #5
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	4413      	add	r3, r2
 800b028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	69ba      	ldr	r2, [r7, #24]
 800b030:	0151      	lsls	r1, r2, #5
 800b032:	69fa      	ldr	r2, [r7, #28]
 800b034:	440a      	add	r2, r1
 800b036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b03a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b03e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b042:	6113      	str	r3, [r2, #16]
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	015a      	lsls	r2, r3, #5
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	4413      	add	r3, r2
 800b04c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b050:	691a      	ldr	r2, [r3, #16]
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	6999      	ldr	r1, [r3, #24]
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	440b      	add	r3, r1
 800b05c:	1e59      	subs	r1, r3, #1
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	fbb1 f3f3 	udiv	r3, r1, r3
 800b066:	04d9      	lsls	r1, r3, #19
 800b068:	4b9d      	ldr	r3, [pc, #628]	; (800b2e0 <USB_EPStartXfer+0x370>)
 800b06a:	400b      	ands	r3, r1
 800b06c:	69b9      	ldr	r1, [r7, #24]
 800b06e:	0148      	lsls	r0, r1, #5
 800b070:	69f9      	ldr	r1, [r7, #28]
 800b072:	4401      	add	r1, r0
 800b074:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b078:	4313      	orrs	r3, r2
 800b07a:	610b      	str	r3, [r1, #16]
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	015a      	lsls	r2, r3, #5
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	4413      	add	r3, r2
 800b084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b088:	691a      	ldr	r2, [r3, #16]
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	699b      	ldr	r3, [r3, #24]
 800b08e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b092:	69b9      	ldr	r1, [r7, #24]
 800b094:	0148      	lsls	r0, r1, #5
 800b096:	69f9      	ldr	r1, [r7, #28]
 800b098:	4401      	add	r1, r0
 800b09a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	610b      	str	r3, [r1, #16]
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	791b      	ldrb	r3, [r3, #4]
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d11f      	bne.n	800b0ea <USB_EPStartXfer+0x17a>
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	015a      	lsls	r2, r3, #5
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0b6:	691b      	ldr	r3, [r3, #16]
 800b0b8:	69ba      	ldr	r2, [r7, #24]
 800b0ba:	0151      	lsls	r1, r2, #5
 800b0bc:	69fa      	ldr	r2, [r7, #28]
 800b0be:	440a      	add	r2, r1
 800b0c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b0c8:	6113      	str	r3, [r2, #16]
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	015a      	lsls	r2, r3, #5
 800b0ce:	69fb      	ldr	r3, [r7, #28]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	69ba      	ldr	r2, [r7, #24]
 800b0da:	0151      	lsls	r1, r2, #5
 800b0dc:	69fa      	ldr	r2, [r7, #28]
 800b0de:	440a      	add	r2, r1
 800b0e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b0e8:	6113      	str	r3, [r2, #16]
 800b0ea:	79fb      	ldrb	r3, [r7, #7]
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d14b      	bne.n	800b188 <USB_EPStartXfer+0x218>
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	695b      	ldr	r3, [r3, #20]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d009      	beq.n	800b10c <USB_EPStartXfer+0x19c>
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	015a      	lsls	r2, r3, #5
 800b0fc:	69fb      	ldr	r3, [r7, #28]
 800b0fe:	4413      	add	r3, r2
 800b100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b104:	461a      	mov	r2, r3
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	695b      	ldr	r3, [r3, #20]
 800b10a:	6153      	str	r3, [r2, #20]
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	791b      	ldrb	r3, [r3, #4]
 800b110:	2b01      	cmp	r3, #1
 800b112:	d128      	bne.n	800b166 <USB_EPStartXfer+0x1f6>
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b120:	2b00      	cmp	r3, #0
 800b122:	d110      	bne.n	800b146 <USB_EPStartXfer+0x1d6>
 800b124:	69bb      	ldr	r3, [r7, #24]
 800b126:	015a      	lsls	r2, r3, #5
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	4413      	add	r3, r2
 800b12c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	69ba      	ldr	r2, [r7, #24]
 800b134:	0151      	lsls	r1, r2, #5
 800b136:	69fa      	ldr	r2, [r7, #28]
 800b138:	440a      	add	r2, r1
 800b13a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b13e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b142:	6013      	str	r3, [r2, #0]
 800b144:	e00f      	b.n	800b166 <USB_EPStartXfer+0x1f6>
 800b146:	69bb      	ldr	r3, [r7, #24]
 800b148:	015a      	lsls	r2, r3, #5
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	4413      	add	r3, r2
 800b14e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	69ba      	ldr	r2, [r7, #24]
 800b156:	0151      	lsls	r1, r2, #5
 800b158:	69fa      	ldr	r2, [r7, #28]
 800b15a:	440a      	add	r2, r1
 800b15c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b164:	6013      	str	r3, [r2, #0]
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	015a      	lsls	r2, r3, #5
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	4413      	add	r3, r2
 800b16e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	69ba      	ldr	r2, [r7, #24]
 800b176:	0151      	lsls	r1, r2, #5
 800b178:	69fa      	ldr	r2, [r7, #28]
 800b17a:	440a      	add	r2, r1
 800b17c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b180:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b184:	6013      	str	r3, [r2, #0]
 800b186:	e133      	b.n	800b3f0 <USB_EPStartXfer+0x480>
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	015a      	lsls	r2, r3, #5
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	4413      	add	r3, r2
 800b190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	69ba      	ldr	r2, [r7, #24]
 800b198:	0151      	lsls	r1, r2, #5
 800b19a:	69fa      	ldr	r2, [r7, #28]
 800b19c:	440a      	add	r2, r1
 800b19e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1a6:	6013      	str	r3, [r2, #0]
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	791b      	ldrb	r3, [r3, #4]
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d015      	beq.n	800b1dc <USB_EPStartXfer+0x26c>
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	699b      	ldr	r3, [r3, #24]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f000 811b 	beq.w	800b3f0 <USB_EPStartXfer+0x480>
 800b1ba:	69fb      	ldr	r3, [r7, #28]
 800b1bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	f003 030f 	and.w	r3, r3, #15
 800b1ca:	2101      	movs	r1, #1
 800b1cc:	fa01 f303 	lsl.w	r3, r1, r3
 800b1d0:	69f9      	ldr	r1, [r7, #28]
 800b1d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	634b      	str	r3, [r1, #52]	; 0x34
 800b1da:	e109      	b.n	800b3f0 <USB_EPStartXfer+0x480>
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1e2:	689b      	ldr	r3, [r3, #8]
 800b1e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d110      	bne.n	800b20e <USB_EPStartXfer+0x29e>
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	015a      	lsls	r2, r3, #5
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	4413      	add	r3, r2
 800b1f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	69ba      	ldr	r2, [r7, #24]
 800b1fc:	0151      	lsls	r1, r2, #5
 800b1fe:	69fa      	ldr	r2, [r7, #28]
 800b200:	440a      	add	r2, r1
 800b202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b206:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b20a:	6013      	str	r3, [r2, #0]
 800b20c:	e00f      	b.n	800b22e <USB_EPStartXfer+0x2be>
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	015a      	lsls	r2, r3, #5
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	4413      	add	r3, r2
 800b216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	69ba      	ldr	r2, [r7, #24]
 800b21e:	0151      	lsls	r1, r2, #5
 800b220:	69fa      	ldr	r2, [r7, #28]
 800b222:	440a      	add	r2, r1
 800b224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b22c:	6013      	str	r3, [r2, #0]
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	6919      	ldr	r1, [r3, #16]
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	781a      	ldrb	r2, [r3, #0]
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	699b      	ldr	r3, [r3, #24]
 800b23a:	b298      	uxth	r0, r3
 800b23c:	79fb      	ldrb	r3, [r7, #7]
 800b23e:	9300      	str	r3, [sp, #0]
 800b240:	4603      	mov	r3, r0
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f000 fade 	bl	800b804 <USB_WritePacket>
 800b248:	e0d2      	b.n	800b3f0 <USB_EPStartXfer+0x480>
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	015a      	lsls	r2, r3, #5
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	4413      	add	r3, r2
 800b252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b256:	691b      	ldr	r3, [r3, #16]
 800b258:	69ba      	ldr	r2, [r7, #24]
 800b25a:	0151      	lsls	r1, r2, #5
 800b25c:	69fa      	ldr	r2, [r7, #28]
 800b25e:	440a      	add	r2, r1
 800b260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b264:	0cdb      	lsrs	r3, r3, #19
 800b266:	04db      	lsls	r3, r3, #19
 800b268:	6113      	str	r3, [r2, #16]
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	015a      	lsls	r2, r3, #5
 800b26e:	69fb      	ldr	r3, [r7, #28]
 800b270:	4413      	add	r3, r2
 800b272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b276:	691b      	ldr	r3, [r3, #16]
 800b278:	69ba      	ldr	r2, [r7, #24]
 800b27a:	0151      	lsls	r1, r2, #5
 800b27c:	69fa      	ldr	r2, [r7, #28]
 800b27e:	440a      	add	r2, r1
 800b280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b284:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b288:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b28c:	6113      	str	r3, [r2, #16]
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	699b      	ldr	r3, [r3, #24]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d126      	bne.n	800b2e4 <USB_EPStartXfer+0x374>
 800b296:	69bb      	ldr	r3, [r7, #24]
 800b298:	015a      	lsls	r2, r3, #5
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	4413      	add	r3, r2
 800b29e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2a2:	691a      	ldr	r2, [r3, #16]
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2ac:	69b9      	ldr	r1, [r7, #24]
 800b2ae:	0148      	lsls	r0, r1, #5
 800b2b0:	69f9      	ldr	r1, [r7, #28]
 800b2b2:	4401      	add	r1, r0
 800b2b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	610b      	str	r3, [r1, #16]
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	015a      	lsls	r2, r3, #5
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	69ba      	ldr	r2, [r7, #24]
 800b2cc:	0151      	lsls	r1, r2, #5
 800b2ce:	69fa      	ldr	r2, [r7, #28]
 800b2d0:	440a      	add	r2, r1
 800b2d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2da:	6113      	str	r3, [r2, #16]
 800b2dc:	e03a      	b.n	800b354 <USB_EPStartXfer+0x3e4>
 800b2de:	bf00      	nop
 800b2e0:	1ff80000 	.word	0x1ff80000
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	699a      	ldr	r2, [r3, #24]
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	1e5a      	subs	r2, r3, #1
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2f8:	82fb      	strh	r3, [r7, #22]
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	8afa      	ldrh	r2, [r7, #22]
 800b300:	fb03 f202 	mul.w	r2, r3, r2
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	61da      	str	r2, [r3, #28]
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	015a      	lsls	r2, r3, #5
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	4413      	add	r3, r2
 800b310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b314:	691a      	ldr	r2, [r3, #16]
 800b316:	8afb      	ldrh	r3, [r7, #22]
 800b318:	04d9      	lsls	r1, r3, #19
 800b31a:	4b38      	ldr	r3, [pc, #224]	; (800b3fc <USB_EPStartXfer+0x48c>)
 800b31c:	400b      	ands	r3, r1
 800b31e:	69b9      	ldr	r1, [r7, #24]
 800b320:	0148      	lsls	r0, r1, #5
 800b322:	69f9      	ldr	r1, [r7, #28]
 800b324:	4401      	add	r1, r0
 800b326:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b32a:	4313      	orrs	r3, r2
 800b32c:	610b      	str	r3, [r1, #16]
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	015a      	lsls	r2, r3, #5
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	4413      	add	r3, r2
 800b336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b33a:	691a      	ldr	r2, [r3, #16]
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	69db      	ldr	r3, [r3, #28]
 800b340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b344:	69b9      	ldr	r1, [r7, #24]
 800b346:	0148      	lsls	r0, r1, #5
 800b348:	69f9      	ldr	r1, [r7, #28]
 800b34a:	4401      	add	r1, r0
 800b34c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b350:	4313      	orrs	r3, r2
 800b352:	610b      	str	r3, [r1, #16]
 800b354:	79fb      	ldrb	r3, [r7, #7]
 800b356:	2b01      	cmp	r3, #1
 800b358:	d10d      	bne.n	800b376 <USB_EPStartXfer+0x406>
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	691b      	ldr	r3, [r3, #16]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d009      	beq.n	800b376 <USB_EPStartXfer+0x406>
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	6919      	ldr	r1, [r3, #16]
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	015a      	lsls	r2, r3, #5
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	4413      	add	r3, r2
 800b36e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b372:	460a      	mov	r2, r1
 800b374:	615a      	str	r2, [r3, #20]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	791b      	ldrb	r3, [r3, #4]
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d128      	bne.n	800b3d0 <USB_EPStartXfer+0x460>
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d110      	bne.n	800b3b0 <USB_EPStartXfer+0x440>
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	015a      	lsls	r2, r3, #5
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	4413      	add	r3, r2
 800b396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	69ba      	ldr	r2, [r7, #24]
 800b39e:	0151      	lsls	r1, r2, #5
 800b3a0:	69fa      	ldr	r2, [r7, #28]
 800b3a2:	440a      	add	r2, r1
 800b3a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b3ac:	6013      	str	r3, [r2, #0]
 800b3ae:	e00f      	b.n	800b3d0 <USB_EPStartXfer+0x460>
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	015a      	lsls	r2, r3, #5
 800b3b4:	69fb      	ldr	r3, [r7, #28]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	69ba      	ldr	r2, [r7, #24]
 800b3c0:	0151      	lsls	r1, r2, #5
 800b3c2:	69fa      	ldr	r2, [r7, #28]
 800b3c4:	440a      	add	r2, r1
 800b3c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3ce:	6013      	str	r3, [r2, #0]
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	015a      	lsls	r2, r3, #5
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	69ba      	ldr	r2, [r7, #24]
 800b3e0:	0151      	lsls	r1, r2, #5
 800b3e2:	69fa      	ldr	r2, [r7, #28]
 800b3e4:	440a      	add	r2, r1
 800b3e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3ee:	6013      	str	r3, [r2, #0]
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3720      	adds	r7, #32
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	1ff80000 	.word	0x1ff80000

0800b400 <USB_EP0StartXfer>:
 800b400:	b480      	push	{r7}
 800b402:	b087      	sub	sp, #28
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	4613      	mov	r3, r2
 800b40c:	71fb      	strb	r3, [r7, #7]
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	617b      	str	r3, [r7, #20]
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	613b      	str	r3, [r7, #16]
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	785b      	ldrb	r3, [r3, #1]
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	f040 80ce 	bne.w	800b5be <USB_EP0StartXfer+0x1be>
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	699b      	ldr	r3, [r3, #24]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d132      	bne.n	800b490 <USB_EP0StartXfer+0x90>
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	015a      	lsls	r2, r3, #5
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	4413      	add	r3, r2
 800b432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	693a      	ldr	r2, [r7, #16]
 800b43a:	0151      	lsls	r1, r2, #5
 800b43c:	697a      	ldr	r2, [r7, #20]
 800b43e:	440a      	add	r2, r1
 800b440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b444:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b448:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b44c:	6113      	str	r3, [r2, #16]
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	015a      	lsls	r2, r3, #5
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	4413      	add	r3, r2
 800b456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	693a      	ldr	r2, [r7, #16]
 800b45e:	0151      	lsls	r1, r2, #5
 800b460:	697a      	ldr	r2, [r7, #20]
 800b462:	440a      	add	r2, r1
 800b464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b468:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b46c:	6113      	str	r3, [r2, #16]
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	015a      	lsls	r2, r3, #5
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	4413      	add	r3, r2
 800b476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b47a:	691b      	ldr	r3, [r3, #16]
 800b47c:	693a      	ldr	r2, [r7, #16]
 800b47e:	0151      	lsls	r1, r2, #5
 800b480:	697a      	ldr	r2, [r7, #20]
 800b482:	440a      	add	r2, r1
 800b484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b488:	0cdb      	lsrs	r3, r3, #19
 800b48a:	04db      	lsls	r3, r3, #19
 800b48c:	6113      	str	r3, [r2, #16]
 800b48e:	e04e      	b.n	800b52e <USB_EP0StartXfer+0x12e>
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	015a      	lsls	r2, r3, #5
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	4413      	add	r3, r2
 800b498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b49c:	691b      	ldr	r3, [r3, #16]
 800b49e:	693a      	ldr	r2, [r7, #16]
 800b4a0:	0151      	lsls	r1, r2, #5
 800b4a2:	697a      	ldr	r2, [r7, #20]
 800b4a4:	440a      	add	r2, r1
 800b4a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4aa:	0cdb      	lsrs	r3, r3, #19
 800b4ac:	04db      	lsls	r3, r3, #19
 800b4ae:	6113      	str	r3, [r2, #16]
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	015a      	lsls	r2, r3, #5
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	4413      	add	r3, r2
 800b4b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4bc:	691b      	ldr	r3, [r3, #16]
 800b4be:	693a      	ldr	r2, [r7, #16]
 800b4c0:	0151      	lsls	r1, r2, #5
 800b4c2:	697a      	ldr	r2, [r7, #20]
 800b4c4:	440a      	add	r2, r1
 800b4c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b4ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b4d2:	6113      	str	r3, [r2, #16]
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	699a      	ldr	r2, [r3, #24]
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d903      	bls.n	800b4e8 <USB_EP0StartXfer+0xe8>
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	68da      	ldr	r2, [r3, #12]
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	619a      	str	r2, [r3, #24]
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	015a      	lsls	r2, r3, #5
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4f4:	691b      	ldr	r3, [r3, #16]
 800b4f6:	693a      	ldr	r2, [r7, #16]
 800b4f8:	0151      	lsls	r1, r2, #5
 800b4fa:	697a      	ldr	r2, [r7, #20]
 800b4fc:	440a      	add	r2, r1
 800b4fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b502:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b506:	6113      	str	r3, [r2, #16]
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	015a      	lsls	r2, r3, #5
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	4413      	add	r3, r2
 800b510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b514:	691a      	ldr	r2, [r3, #16]
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	699b      	ldr	r3, [r3, #24]
 800b51a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b51e:	6939      	ldr	r1, [r7, #16]
 800b520:	0148      	lsls	r0, r1, #5
 800b522:	6979      	ldr	r1, [r7, #20]
 800b524:	4401      	add	r1, r0
 800b526:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b52a:	4313      	orrs	r3, r2
 800b52c:	610b      	str	r3, [r1, #16]
 800b52e:	79fb      	ldrb	r3, [r7, #7]
 800b530:	2b01      	cmp	r3, #1
 800b532:	d11e      	bne.n	800b572 <USB_EP0StartXfer+0x172>
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	695b      	ldr	r3, [r3, #20]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d009      	beq.n	800b550 <USB_EP0StartXfer+0x150>
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	015a      	lsls	r2, r3, #5
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	4413      	add	r3, r2
 800b544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b548:	461a      	mov	r2, r3
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	695b      	ldr	r3, [r3, #20]
 800b54e:	6153      	str	r3, [r2, #20]
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	015a      	lsls	r2, r3, #5
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	4413      	add	r3, r2
 800b558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	693a      	ldr	r2, [r7, #16]
 800b560:	0151      	lsls	r1, r2, #5
 800b562:	697a      	ldr	r2, [r7, #20]
 800b564:	440a      	add	r2, r1
 800b566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b56a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b56e:	6013      	str	r3, [r2, #0]
 800b570:	e097      	b.n	800b6a2 <USB_EP0StartXfer+0x2a2>
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	015a      	lsls	r2, r3, #5
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	4413      	add	r3, r2
 800b57a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	693a      	ldr	r2, [r7, #16]
 800b582:	0151      	lsls	r1, r2, #5
 800b584:	697a      	ldr	r2, [r7, #20]
 800b586:	440a      	add	r2, r1
 800b588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b58c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b590:	6013      	str	r3, [r2, #0]
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	699b      	ldr	r3, [r3, #24]
 800b596:	2b00      	cmp	r3, #0
 800b598:	f000 8083 	beq.w	800b6a2 <USB_EP0StartXfer+0x2a2>
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	f003 030f 	and.w	r3, r3, #15
 800b5ac:	2101      	movs	r1, #1
 800b5ae:	fa01 f303 	lsl.w	r3, r1, r3
 800b5b2:	6979      	ldr	r1, [r7, #20]
 800b5b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	634b      	str	r3, [r1, #52]	; 0x34
 800b5bc:	e071      	b.n	800b6a2 <USB_EP0StartXfer+0x2a2>
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	015a      	lsls	r2, r3, #5
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	693a      	ldr	r2, [r7, #16]
 800b5ce:	0151      	lsls	r1, r2, #5
 800b5d0:	697a      	ldr	r2, [r7, #20]
 800b5d2:	440a      	add	r2, r1
 800b5d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5d8:	0cdb      	lsrs	r3, r3, #19
 800b5da:	04db      	lsls	r3, r3, #19
 800b5dc:	6113      	str	r3, [r2, #16]
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	015a      	lsls	r2, r3, #5
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	4413      	add	r3, r2
 800b5e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5ea:	691b      	ldr	r3, [r3, #16]
 800b5ec:	693a      	ldr	r2, [r7, #16]
 800b5ee:	0151      	lsls	r1, r2, #5
 800b5f0:	697a      	ldr	r2, [r7, #20]
 800b5f2:	440a      	add	r2, r1
 800b5f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b5fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b600:	6113      	str	r3, [r2, #16]
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	699b      	ldr	r3, [r3, #24]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d003      	beq.n	800b612 <USB_EP0StartXfer+0x212>
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	68da      	ldr	r2, [r3, #12]
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	619a      	str	r2, [r3, #24]
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	68da      	ldr	r2, [r3, #12]
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	61da      	str	r2, [r3, #28]
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	015a      	lsls	r2, r3, #5
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	4413      	add	r3, r2
 800b622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b626:	691b      	ldr	r3, [r3, #16]
 800b628:	693a      	ldr	r2, [r7, #16]
 800b62a:	0151      	lsls	r1, r2, #5
 800b62c:	697a      	ldr	r2, [r7, #20]
 800b62e:	440a      	add	r2, r1
 800b630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b634:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b638:	6113      	str	r3, [r2, #16]
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	015a      	lsls	r2, r3, #5
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	4413      	add	r3, r2
 800b642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b646:	691a      	ldr	r2, [r3, #16]
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	69db      	ldr	r3, [r3, #28]
 800b64c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b650:	6939      	ldr	r1, [r7, #16]
 800b652:	0148      	lsls	r0, r1, #5
 800b654:	6979      	ldr	r1, [r7, #20]
 800b656:	4401      	add	r1, r0
 800b658:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b65c:	4313      	orrs	r3, r2
 800b65e:	610b      	str	r3, [r1, #16]
 800b660:	79fb      	ldrb	r3, [r7, #7]
 800b662:	2b01      	cmp	r3, #1
 800b664:	d10d      	bne.n	800b682 <USB_EP0StartXfer+0x282>
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	691b      	ldr	r3, [r3, #16]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d009      	beq.n	800b682 <USB_EP0StartXfer+0x282>
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	6919      	ldr	r1, [r3, #16]
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	015a      	lsls	r2, r3, #5
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	4413      	add	r3, r2
 800b67a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b67e:	460a      	mov	r2, r1
 800b680:	615a      	str	r2, [r3, #20]
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	015a      	lsls	r2, r3, #5
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	4413      	add	r3, r2
 800b68a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	693a      	ldr	r2, [r7, #16]
 800b692:	0151      	lsls	r1, r2, #5
 800b694:	697a      	ldr	r2, [r7, #20]
 800b696:	440a      	add	r2, r1
 800b698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b69c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b6a0:	6013      	str	r3, [r2, #0]
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	371c      	adds	r7, #28
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <USB_EPStopXfer>:
 800b6b0:	b480      	push	{r7}
 800b6b2:	b087      	sub	sp, #28
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	60fb      	str	r3, [r7, #12]
 800b6be:	2300      	movs	r3, #0
 800b6c0:	75fb      	strb	r3, [r7, #23]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	613b      	str	r3, [r7, #16]
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	785b      	ldrb	r3, [r3, #1]
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d14a      	bne.n	800b764 <USB_EPStopXfer+0xb4>
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	015a      	lsls	r2, r3, #5
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	4413      	add	r3, r2
 800b6d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6e6:	f040 8086 	bne.w	800b7f6 <USB_EPStopXfer+0x146>
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	015a      	lsls	r2, r3, #5
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	683a      	ldr	r2, [r7, #0]
 800b6fc:	7812      	ldrb	r2, [r2, #0]
 800b6fe:	0151      	lsls	r1, r2, #5
 800b700:	693a      	ldr	r2, [r7, #16]
 800b702:	440a      	add	r2, r1
 800b704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b708:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b70c:	6013      	str	r3, [r2, #0]
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	015a      	lsls	r2, r3, #5
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	4413      	add	r3, r2
 800b718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	683a      	ldr	r2, [r7, #0]
 800b720:	7812      	ldrb	r2, [r2, #0]
 800b722:	0151      	lsls	r1, r2, #5
 800b724:	693a      	ldr	r2, [r7, #16]
 800b726:	440a      	add	r2, r1
 800b728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b72c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b730:	6013      	str	r3, [r2, #0]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	3301      	adds	r3, #1
 800b736:	60fb      	str	r3, [r7, #12]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f242 7210 	movw	r2, #10000	; 0x2710
 800b73e:	4293      	cmp	r3, r2
 800b740:	d902      	bls.n	800b748 <USB_EPStopXfer+0x98>
 800b742:	2301      	movs	r3, #1
 800b744:	75fb      	strb	r3, [r7, #23]
 800b746:	e056      	b.n	800b7f6 <USB_EPStopXfer+0x146>
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	015a      	lsls	r2, r3, #5
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	4413      	add	r3, r2
 800b752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b75c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b760:	d0e7      	beq.n	800b732 <USB_EPStopXfer+0x82>
 800b762:	e048      	b.n	800b7f6 <USB_EPStopXfer+0x146>
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	015a      	lsls	r2, r3, #5
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	4413      	add	r3, r2
 800b76e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b778:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b77c:	d13b      	bne.n	800b7f6 <USB_EPStopXfer+0x146>
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	015a      	lsls	r2, r3, #5
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	4413      	add	r3, r2
 800b788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	7812      	ldrb	r2, [r2, #0]
 800b792:	0151      	lsls	r1, r2, #5
 800b794:	693a      	ldr	r2, [r7, #16]
 800b796:	440a      	add	r2, r1
 800b798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b79c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b7a0:	6013      	str	r3, [r2, #0]
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	015a      	lsls	r2, r3, #5
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	683a      	ldr	r2, [r7, #0]
 800b7b4:	7812      	ldrb	r2, [r2, #0]
 800b7b6:	0151      	lsls	r1, r2, #5
 800b7b8:	693a      	ldr	r2, [r7, #16]
 800b7ba:	440a      	add	r2, r1
 800b7bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7c4:	6013      	str	r3, [r2, #0]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	60fb      	str	r3, [r7, #12]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f242 7210 	movw	r2, #10000	; 0x2710
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d902      	bls.n	800b7dc <USB_EPStopXfer+0x12c>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	75fb      	strb	r3, [r7, #23]
 800b7da:	e00c      	b.n	800b7f6 <USB_EPStopXfer+0x146>
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	015a      	lsls	r2, r3, #5
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7f4:	d0e7      	beq.n	800b7c6 <USB_EPStopXfer+0x116>
 800b7f6:	7dfb      	ldrb	r3, [r7, #23]
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	371c      	adds	r7, #28
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <USB_WritePacket>:
 800b804:	b480      	push	{r7}
 800b806:	b089      	sub	sp, #36	; 0x24
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	60b9      	str	r1, [r7, #8]
 800b80e:	4611      	mov	r1, r2
 800b810:	461a      	mov	r2, r3
 800b812:	460b      	mov	r3, r1
 800b814:	71fb      	strb	r3, [r7, #7]
 800b816:	4613      	mov	r3, r2
 800b818:	80bb      	strh	r3, [r7, #4]
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	617b      	str	r3, [r7, #20]
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	61fb      	str	r3, [r7, #28]
 800b822:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b826:	2b00      	cmp	r3, #0
 800b828:	d123      	bne.n	800b872 <USB_WritePacket+0x6e>
 800b82a:	88bb      	ldrh	r3, [r7, #4]
 800b82c:	3303      	adds	r3, #3
 800b82e:	089b      	lsrs	r3, r3, #2
 800b830:	613b      	str	r3, [r7, #16]
 800b832:	2300      	movs	r3, #0
 800b834:	61bb      	str	r3, [r7, #24]
 800b836:	e018      	b.n	800b86a <USB_WritePacket+0x66>
 800b838:	79fb      	ldrb	r3, [r7, #7]
 800b83a:	031a      	lsls	r2, r3, #12
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	4413      	add	r3, r2
 800b840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b844:	461a      	mov	r2, r3
 800b846:	69fb      	ldr	r3, [r7, #28]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	6013      	str	r3, [r2, #0]
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	3301      	adds	r3, #1
 800b850:	61fb      	str	r3, [r7, #28]
 800b852:	69fb      	ldr	r3, [r7, #28]
 800b854:	3301      	adds	r3, #1
 800b856:	61fb      	str	r3, [r7, #28]
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	3301      	adds	r3, #1
 800b85c:	61fb      	str	r3, [r7, #28]
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	3301      	adds	r3, #1
 800b862:	61fb      	str	r3, [r7, #28]
 800b864:	69bb      	ldr	r3, [r7, #24]
 800b866:	3301      	adds	r3, #1
 800b868:	61bb      	str	r3, [r7, #24]
 800b86a:	69ba      	ldr	r2, [r7, #24]
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d3e2      	bcc.n	800b838 <USB_WritePacket+0x34>
 800b872:	2300      	movs	r3, #0
 800b874:	4618      	mov	r0, r3
 800b876:	3724      	adds	r7, #36	; 0x24
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <USB_ReadPacket>:
 800b880:	b480      	push	{r7}
 800b882:	b08b      	sub	sp, #44	; 0x2c
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	4613      	mov	r3, r2
 800b88c:	80fb      	strh	r3, [r7, #6]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	61bb      	str	r3, [r7, #24]
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	627b      	str	r3, [r7, #36]	; 0x24
 800b896:	88fb      	ldrh	r3, [r7, #6]
 800b898:	089b      	lsrs	r3, r3, #2
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	617b      	str	r3, [r7, #20]
 800b89e:	88fb      	ldrh	r3, [r7, #6]
 800b8a0:	f003 0303 	and.w	r3, r3, #3
 800b8a4:	83fb      	strh	r3, [r7, #30]
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	623b      	str	r3, [r7, #32]
 800b8aa:	e014      	b.n	800b8d6 <USB_ReadPacket+0x56>
 800b8ac:	69bb      	ldr	r3, [r7, #24]
 800b8ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b6:	601a      	str	r2, [r3, #0]
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	627b      	str	r3, [r7, #36]	; 0x24
 800b8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	627b      	str	r3, [r7, #36]	; 0x24
 800b8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	627b      	str	r3, [r7, #36]	; 0x24
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	627b      	str	r3, [r7, #36]	; 0x24
 800b8d0:	6a3b      	ldr	r3, [r7, #32]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	623b      	str	r3, [r7, #32]
 800b8d6:	6a3a      	ldr	r2, [r7, #32]
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d3e6      	bcc.n	800b8ac <USB_ReadPacket+0x2c>
 800b8de:	8bfb      	ldrh	r3, [r7, #30]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d01e      	beq.n	800b922 <USB_ReadPacket+0xa2>
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	623b      	str	r3, [r7, #32]
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	f107 0310 	add.w	r3, r7, #16
 800b8f4:	6812      	ldr	r2, [r2, #0]
 800b8f6:	601a      	str	r2, [r3, #0]
 800b8f8:	693a      	ldr	r2, [r7, #16]
 800b8fa:	6a3b      	ldr	r3, [r7, #32]
 800b8fc:	b2db      	uxtb	r3, r3
 800b8fe:	00db      	lsls	r3, r3, #3
 800b900:	fa22 f303 	lsr.w	r3, r2, r3
 800b904:	b2da      	uxtb	r2, r3
 800b906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b908:	701a      	strb	r2, [r3, #0]
 800b90a:	6a3b      	ldr	r3, [r7, #32]
 800b90c:	3301      	adds	r3, #1
 800b90e:	623b      	str	r3, [r7, #32]
 800b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b912:	3301      	adds	r3, #1
 800b914:	627b      	str	r3, [r7, #36]	; 0x24
 800b916:	8bfb      	ldrh	r3, [r7, #30]
 800b918:	3b01      	subs	r3, #1
 800b91a:	83fb      	strh	r3, [r7, #30]
 800b91c:	8bfb      	ldrh	r3, [r7, #30]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d1ea      	bne.n	800b8f8 <USB_ReadPacket+0x78>
 800b922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b924:	4618      	mov	r0, r3
 800b926:	372c      	adds	r7, #44	; 0x2c
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <USB_EPSetStall>:
 800b930:	b480      	push	{r7}
 800b932:	b085      	sub	sp, #20
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	60fb      	str	r3, [r7, #12]
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	60bb      	str	r3, [r7, #8]
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	785b      	ldrb	r3, [r3, #1]
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d12c      	bne.n	800b9a6 <USB_EPSetStall+0x76>
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	015a      	lsls	r2, r3, #5
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	4413      	add	r3, r2
 800b954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	db12      	blt.n	800b984 <USB_EPSetStall+0x54>
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00f      	beq.n	800b984 <USB_EPSetStall+0x54>
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	015a      	lsls	r2, r3, #5
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	4413      	add	r3, r2
 800b96c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	68ba      	ldr	r2, [r7, #8]
 800b974:	0151      	lsls	r1, r2, #5
 800b976:	68fa      	ldr	r2, [r7, #12]
 800b978:	440a      	add	r2, r1
 800b97a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b97e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b982:	6013      	str	r3, [r2, #0]
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	015a      	lsls	r2, r3, #5
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	4413      	add	r3, r2
 800b98c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	68ba      	ldr	r2, [r7, #8]
 800b994:	0151      	lsls	r1, r2, #5
 800b996:	68fa      	ldr	r2, [r7, #12]
 800b998:	440a      	add	r2, r1
 800b99a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b99e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b9a2:	6013      	str	r3, [r2, #0]
 800b9a4:	e02b      	b.n	800b9fe <USB_EPSetStall+0xce>
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	015a      	lsls	r2, r3, #5
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	db12      	blt.n	800b9de <USB_EPSetStall+0xae>
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d00f      	beq.n	800b9de <USB_EPSetStall+0xae>
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	015a      	lsls	r2, r3, #5
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	4413      	add	r3, r2
 800b9c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	0151      	lsls	r1, r2, #5
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	440a      	add	r2, r1
 800b9d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b9dc:	6013      	str	r3, [r2, #0]
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	015a      	lsls	r2, r3, #5
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	0151      	lsls	r1, r2, #5
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	440a      	add	r2, r1
 800b9f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b9fc:	6013      	str	r3, [r2, #0]
 800b9fe:	2300      	movs	r3, #0
 800ba00:	4618      	mov	r0, r3
 800ba02:	3714      	adds	r7, #20
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <USB_EPClearStall>:
 800ba0c:	b480      	push	{r7}
 800ba0e:	b085      	sub	sp, #20
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	60fb      	str	r3, [r7, #12]
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	60bb      	str	r3, [r7, #8]
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	785b      	ldrb	r3, [r3, #1]
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d128      	bne.n	800ba7a <USB_EPClearStall+0x6e>
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	015a      	lsls	r2, r3, #5
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	4413      	add	r3, r2
 800ba30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	68ba      	ldr	r2, [r7, #8]
 800ba38:	0151      	lsls	r1, r2, #5
 800ba3a:	68fa      	ldr	r2, [r7, #12]
 800ba3c:	440a      	add	r2, r1
 800ba3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba46:	6013      	str	r3, [r2, #0]
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	791b      	ldrb	r3, [r3, #4]
 800ba4c:	2b03      	cmp	r3, #3
 800ba4e:	d003      	beq.n	800ba58 <USB_EPClearStall+0x4c>
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	791b      	ldrb	r3, [r3, #4]
 800ba54:	2b02      	cmp	r3, #2
 800ba56:	d138      	bne.n	800baca <USB_EPClearStall+0xbe>
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	015a      	lsls	r2, r3, #5
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	4413      	add	r3, r2
 800ba60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68ba      	ldr	r2, [r7, #8]
 800ba68:	0151      	lsls	r1, r2, #5
 800ba6a:	68fa      	ldr	r2, [r7, #12]
 800ba6c:	440a      	add	r2, r1
 800ba6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba76:	6013      	str	r3, [r2, #0]
 800ba78:	e027      	b.n	800baca <USB_EPClearStall+0xbe>
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	015a      	lsls	r2, r3, #5
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	4413      	add	r3, r2
 800ba82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	68ba      	ldr	r2, [r7, #8]
 800ba8a:	0151      	lsls	r1, r2, #5
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	440a      	add	r2, r1
 800ba90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba98:	6013      	str	r3, [r2, #0]
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	791b      	ldrb	r3, [r3, #4]
 800ba9e:	2b03      	cmp	r3, #3
 800baa0:	d003      	beq.n	800baaa <USB_EPClearStall+0x9e>
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	791b      	ldrb	r3, [r3, #4]
 800baa6:	2b02      	cmp	r3, #2
 800baa8:	d10f      	bne.n	800baca <USB_EPClearStall+0xbe>
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	015a      	lsls	r2, r3, #5
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	4413      	add	r3, r2
 800bab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	68ba      	ldr	r2, [r7, #8]
 800baba:	0151      	lsls	r1, r2, #5
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	440a      	add	r2, r1
 800bac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bac8:	6013      	str	r3, [r2, #0]
 800baca:	2300      	movs	r3, #0
 800bacc:	4618      	mov	r0, r3
 800bace:	3714      	adds	r7, #20
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr

0800bad8 <USB_SetDevAddress>:
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	460b      	mov	r3, r1
 800bae2:	70fb      	strb	r3, [r7, #3]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	60fb      	str	r3, [r7, #12]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	68fa      	ldr	r2, [r7, #12]
 800baf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800baf6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bafa:	6013      	str	r3, [r2, #0]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	78fb      	ldrb	r3, [r7, #3]
 800bb06:	011b      	lsls	r3, r3, #4
 800bb08:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bb0c:	68f9      	ldr	r1, [r7, #12]
 800bb0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb12:	4313      	orrs	r3, r2
 800bb14:	600b      	str	r3, [r1, #0]
 800bb16:	2300      	movs	r3, #0
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3714      	adds	r7, #20
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr

0800bb24 <USB_DevConnect>:
 800bb24:	b480      	push	{r7}
 800bb26:	b085      	sub	sp, #20
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	60fb      	str	r3, [r7, #12]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bb3e:	f023 0303 	bic.w	r3, r3, #3
 800bb42:	6013      	str	r3, [r2, #0]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb52:	f023 0302 	bic.w	r3, r3, #2
 800bb56:	6053      	str	r3, [r2, #4]
 800bb58:	2300      	movs	r3, #0
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3714      	adds	r7, #20
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr

0800bb66 <USB_DevDisconnect>:
 800bb66:	b480      	push	{r7}
 800bb68:	b085      	sub	sp, #20
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	60fb      	str	r3, [r7, #12]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	68fa      	ldr	r2, [r7, #12]
 800bb7c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bb80:	f023 0303 	bic.w	r3, r3, #3
 800bb84:	6013      	str	r3, [r2, #0]
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb94:	f043 0302 	orr.w	r3, r3, #2
 800bb98:	6053      	str	r3, [r2, #4]
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3714      	adds	r7, #20
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr

0800bba8 <USB_ReadInterrupts>:
 800bba8:	b480      	push	{r7}
 800bbaa:	b085      	sub	sp, #20
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	695b      	ldr	r3, [r3, #20]
 800bbb4:	60fb      	str	r3, [r7, #12]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	699b      	ldr	r3, [r3, #24]
 800bbba:	68fa      	ldr	r2, [r7, #12]
 800bbbc:	4013      	ands	r3, r2
 800bbbe:	60fb      	str	r3, [r7, #12]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3714      	adds	r7, #20
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr

0800bbce <USB_ReadDevAllOutEpInterrupt>:
 800bbce:	b480      	push	{r7}
 800bbd0:	b085      	sub	sp, #20
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	60fb      	str	r3, [r7, #12]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbe0:	699b      	ldr	r3, [r3, #24]
 800bbe2:	60bb      	str	r3, [r7, #8]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbea:	69db      	ldr	r3, [r3, #28]
 800bbec:	68ba      	ldr	r2, [r7, #8]
 800bbee:	4013      	ands	r3, r2
 800bbf0:	60bb      	str	r3, [r7, #8]
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	0c1b      	lsrs	r3, r3, #16
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3714      	adds	r7, #20
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr

0800bc02 <USB_ReadDevAllInEpInterrupt>:
 800bc02:	b480      	push	{r7}
 800bc04:	b085      	sub	sp, #20
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	60fb      	str	r3, [r7, #12]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc14:	699b      	ldr	r3, [r3, #24]
 800bc16:	60bb      	str	r3, [r7, #8]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc1e:	69db      	ldr	r3, [r3, #28]
 800bc20:	68ba      	ldr	r2, [r7, #8]
 800bc22:	4013      	ands	r3, r2
 800bc24:	60bb      	str	r3, [r7, #8]
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3714      	adds	r7, #20
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr

0800bc36 <USB_ReadDevOutEPInterrupt>:
 800bc36:	b480      	push	{r7}
 800bc38:	b085      	sub	sp, #20
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
 800bc3e:	460b      	mov	r3, r1
 800bc40:	70fb      	strb	r3, [r7, #3]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	60fb      	str	r3, [r7, #12]
 800bc46:	78fb      	ldrb	r3, [r7, #3]
 800bc48:	015a      	lsls	r2, r3, #5
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	4413      	add	r3, r2
 800bc4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	60bb      	str	r3, [r7, #8]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc5c:	695b      	ldr	r3, [r3, #20]
 800bc5e:	68ba      	ldr	r2, [r7, #8]
 800bc60:	4013      	ands	r3, r2
 800bc62:	60bb      	str	r3, [r7, #8]
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	4618      	mov	r0, r3
 800bc68:	3714      	adds	r7, #20
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr

0800bc72 <USB_ReadDevInEPInterrupt>:
 800bc72:	b480      	push	{r7}
 800bc74:	b087      	sub	sp, #28
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	70fb      	strb	r3, [r7, #3]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	617b      	str	r3, [r7, #20]
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc88:	691b      	ldr	r3, [r3, #16]
 800bc8a:	613b      	str	r3, [r7, #16]
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc94:	60fb      	str	r3, [r7, #12]
 800bc96:	78fb      	ldrb	r3, [r7, #3]
 800bc98:	f003 030f 	and.w	r3, r3, #15
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	fa22 f303 	lsr.w	r3, r2, r3
 800bca2:	01db      	lsls	r3, r3, #7
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	693a      	ldr	r2, [r7, #16]
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	613b      	str	r3, [r7, #16]
 800bcac:	78fb      	ldrb	r3, [r7, #3]
 800bcae:	015a      	lsls	r2, r3, #5
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	4413      	add	r3, r2
 800bcb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcb8:	689b      	ldr	r3, [r3, #8]
 800bcba:	693a      	ldr	r2, [r7, #16]
 800bcbc:	4013      	ands	r3, r2
 800bcbe:	60bb      	str	r3, [r7, #8]
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	371c      	adds	r7, #28
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr

0800bcce <USB_GetMode>:
 800bcce:	b480      	push	{r7}
 800bcd0:	b083      	sub	sp, #12
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	695b      	ldr	r3, [r3, #20]
 800bcda:	f003 0301 	and.w	r3, r3, #1
 800bcde:	4618      	mov	r0, r3
 800bce0:	370c      	adds	r7, #12
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr

0800bcea <USB_ActivateSetup>:
 800bcea:	b480      	push	{r7}
 800bcec:	b085      	sub	sp, #20
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	60fb      	str	r3, [r7, #12]
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	68fa      	ldr	r2, [r7, #12]
 800bd00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd04:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bd08:	f023 0307 	bic.w	r3, r3, #7
 800bd0c:	6013      	str	r3, [r2, #0]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	68fa      	ldr	r2, [r7, #12]
 800bd18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd20:	6053      	str	r3, [r2, #4]
 800bd22:	2300      	movs	r3, #0
 800bd24:	4618      	mov	r0, r3
 800bd26:	3714      	adds	r7, #20
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <USB_EP0_OutStart>:
 800bd30:	b480      	push	{r7}
 800bd32:	b087      	sub	sp, #28
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	460b      	mov	r3, r1
 800bd3a:	607a      	str	r2, [r7, #4]
 800bd3c:	72fb      	strb	r3, [r7, #11]
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	617b      	str	r3, [r7, #20]
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	333c      	adds	r3, #60	; 0x3c
 800bd46:	3304      	adds	r3, #4
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	613b      	str	r3, [r7, #16]
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	4a26      	ldr	r2, [pc, #152]	; (800bde8 <USB_EP0_OutStart+0xb8>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d90a      	bls.n	800bd6a <USB_EP0_OutStart+0x3a>
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd64:	d101      	bne.n	800bd6a <USB_EP0_OutStart+0x3a>
 800bd66:	2300      	movs	r3, #0
 800bd68:	e037      	b.n	800bdda <USB_EP0_OutStart+0xaa>
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd70:	461a      	mov	r2, r3
 800bd72:	2300      	movs	r3, #0
 800bd74:	6113      	str	r3, [r2, #16]
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd7c:	691b      	ldr	r3, [r3, #16]
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd88:	6113      	str	r3, [r2, #16]
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd90:	691b      	ldr	r3, [r3, #16]
 800bd92:	697a      	ldr	r2, [r7, #20]
 800bd94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd98:	f043 0318 	orr.w	r3, r3, #24
 800bd9c:	6113      	str	r3, [r2, #16]
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	697a      	ldr	r2, [r7, #20]
 800bda8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bdb0:	6113      	str	r3, [r2, #16]
 800bdb2:	7afb      	ldrb	r3, [r7, #11]
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d10f      	bne.n	800bdd8 <USB_EP0_OutStart+0xa8>
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6153      	str	r3, [r2, #20]
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	697a      	ldr	r2, [r7, #20]
 800bdce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdd2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bdd6:	6013      	str	r3, [r2, #0]
 800bdd8:	2300      	movs	r3, #0
 800bdda:	4618      	mov	r0, r3
 800bddc:	371c      	adds	r7, #28
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr
 800bde6:	bf00      	nop
 800bde8:	4f54300a 	.word	0x4f54300a

0800bdec <USB_CoreReset>:
 800bdec:	b480      	push	{r7}
 800bdee:	b085      	sub	sp, #20
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	60fb      	str	r3, [r7, #12]
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	60fb      	str	r3, [r7, #12]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	4a13      	ldr	r2, [pc, #76]	; (800be50 <USB_CoreReset+0x64>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d901      	bls.n	800be0a <USB_CoreReset+0x1e>
 800be06:	2303      	movs	r3, #3
 800be08:	e01b      	b.n	800be42 <USB_CoreReset+0x56>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	691b      	ldr	r3, [r3, #16]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	daf2      	bge.n	800bdf8 <USB_CoreReset+0xc>
 800be12:	2300      	movs	r3, #0
 800be14:	60fb      	str	r3, [r7, #12]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	691b      	ldr	r3, [r3, #16]
 800be1a:	f043 0201 	orr.w	r2, r3, #1
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	611a      	str	r2, [r3, #16]
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	3301      	adds	r3, #1
 800be26:	60fb      	str	r3, [r7, #12]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	4a09      	ldr	r2, [pc, #36]	; (800be50 <USB_CoreReset+0x64>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d901      	bls.n	800be34 <USB_CoreReset+0x48>
 800be30:	2303      	movs	r3, #3
 800be32:	e006      	b.n	800be42 <USB_CoreReset+0x56>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	691b      	ldr	r3, [r3, #16]
 800be38:	f003 0301 	and.w	r3, r3, #1
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d0f0      	beq.n	800be22 <USB_CoreReset+0x36>
 800be40:	2300      	movs	r3, #0
 800be42:	4618      	mov	r0, r3
 800be44:	3714      	adds	r7, #20
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop
 800be50:	00030d40 	.word	0x00030d40

0800be54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	460b      	mov	r3, r1
 800be5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800be60:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800be64:	f003 ffe6 	bl	800fe34 <USBD_static_malloc>
 800be68:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d109      	bne.n	800be84 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	32b0      	adds	r2, #176	; 0xb0
 800be7a:	2100      	movs	r1, #0
 800be7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800be80:	2302      	movs	r3, #2
 800be82:	e0d4      	b.n	800c02e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800be84:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800be88:	2100      	movs	r1, #0
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f004 f961 	bl	8010152 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	32b0      	adds	r2, #176	; 0xb0
 800be9a:	68f9      	ldr	r1, [r7, #12]
 800be9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	32b0      	adds	r2, #176	; 0xb0
 800beaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	7c1b      	ldrb	r3, [r3, #16]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d138      	bne.n	800bf2e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bebc:	4b5e      	ldr	r3, [pc, #376]	; (800c038 <USBD_CDC_Init+0x1e4>)
 800bebe:	7819      	ldrb	r1, [r3, #0]
 800bec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bec4:	2202      	movs	r2, #2
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f003 fe91 	bl	800fbee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800becc:	4b5a      	ldr	r3, [pc, #360]	; (800c038 <USBD_CDC_Init+0x1e4>)
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	f003 020f 	and.w	r2, r3, #15
 800bed4:	6879      	ldr	r1, [r7, #4]
 800bed6:	4613      	mov	r3, r2
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	4413      	add	r3, r2
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	440b      	add	r3, r1
 800bee0:	3324      	adds	r3, #36	; 0x24
 800bee2:	2201      	movs	r2, #1
 800bee4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bee6:	4b55      	ldr	r3, [pc, #340]	; (800c03c <USBD_CDC_Init+0x1e8>)
 800bee8:	7819      	ldrb	r1, [r3, #0]
 800beea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800beee:	2202      	movs	r2, #2
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f003 fe7c 	bl	800fbee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bef6:	4b51      	ldr	r3, [pc, #324]	; (800c03c <USBD_CDC_Init+0x1e8>)
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	f003 020f 	and.w	r2, r3, #15
 800befe:	6879      	ldr	r1, [r7, #4]
 800bf00:	4613      	mov	r3, r2
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	4413      	add	r3, r2
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	440b      	add	r3, r1
 800bf0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf0e:	2201      	movs	r2, #1
 800bf10:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bf12:	4b4b      	ldr	r3, [pc, #300]	; (800c040 <USBD_CDC_Init+0x1ec>)
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	f003 020f 	and.w	r2, r3, #15
 800bf1a:	6879      	ldr	r1, [r7, #4]
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	4413      	add	r3, r2
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	440b      	add	r3, r1
 800bf26:	3326      	adds	r3, #38	; 0x26
 800bf28:	2210      	movs	r2, #16
 800bf2a:	801a      	strh	r2, [r3, #0]
 800bf2c:	e035      	b.n	800bf9a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bf2e:	4b42      	ldr	r3, [pc, #264]	; (800c038 <USBD_CDC_Init+0x1e4>)
 800bf30:	7819      	ldrb	r1, [r3, #0]
 800bf32:	2340      	movs	r3, #64	; 0x40
 800bf34:	2202      	movs	r2, #2
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f003 fe59 	bl	800fbee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bf3c:	4b3e      	ldr	r3, [pc, #248]	; (800c038 <USBD_CDC_Init+0x1e4>)
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	f003 020f 	and.w	r2, r3, #15
 800bf44:	6879      	ldr	r1, [r7, #4]
 800bf46:	4613      	mov	r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	4413      	add	r3, r2
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	440b      	add	r3, r1
 800bf50:	3324      	adds	r3, #36	; 0x24
 800bf52:	2201      	movs	r2, #1
 800bf54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bf56:	4b39      	ldr	r3, [pc, #228]	; (800c03c <USBD_CDC_Init+0x1e8>)
 800bf58:	7819      	ldrb	r1, [r3, #0]
 800bf5a:	2340      	movs	r3, #64	; 0x40
 800bf5c:	2202      	movs	r2, #2
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f003 fe45 	bl	800fbee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bf64:	4b35      	ldr	r3, [pc, #212]	; (800c03c <USBD_CDC_Init+0x1e8>)
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	f003 020f 	and.w	r2, r3, #15
 800bf6c:	6879      	ldr	r1, [r7, #4]
 800bf6e:	4613      	mov	r3, r2
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	4413      	add	r3, r2
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	440b      	add	r3, r1
 800bf78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bf80:	4b2f      	ldr	r3, [pc, #188]	; (800c040 <USBD_CDC_Init+0x1ec>)
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	f003 020f 	and.w	r2, r3, #15
 800bf88:	6879      	ldr	r1, [r7, #4]
 800bf8a:	4613      	mov	r3, r2
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	4413      	add	r3, r2
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	440b      	add	r3, r1
 800bf94:	3326      	adds	r3, #38	; 0x26
 800bf96:	2210      	movs	r2, #16
 800bf98:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bf9a:	4b29      	ldr	r3, [pc, #164]	; (800c040 <USBD_CDC_Init+0x1ec>)
 800bf9c:	7819      	ldrb	r1, [r3, #0]
 800bf9e:	2308      	movs	r3, #8
 800bfa0:	2203      	movs	r2, #3
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f003 fe23 	bl	800fbee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bfa8:	4b25      	ldr	r3, [pc, #148]	; (800c040 <USBD_CDC_Init+0x1ec>)
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	f003 020f 	and.w	r2, r3, #15
 800bfb0:	6879      	ldr	r1, [r7, #4]
 800bfb2:	4613      	mov	r3, r2
 800bfb4:	009b      	lsls	r3, r3, #2
 800bfb6:	4413      	add	r3, r2
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	440b      	add	r3, r1
 800bfbc:	3324      	adds	r3, #36	; 0x24
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	33b0      	adds	r3, #176	; 0xb0
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	4413      	add	r3, r2
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d101      	bne.n	800bffc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bff8:	2302      	movs	r3, #2
 800bffa:	e018      	b.n	800c02e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	7c1b      	ldrb	r3, [r3, #16]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10a      	bne.n	800c01a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c004:	4b0d      	ldr	r3, [pc, #52]	; (800c03c <USBD_CDC_Init+0x1e8>)
 800c006:	7819      	ldrb	r1, [r3, #0]
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c00e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f003 feda 	bl	800fdcc <USBD_LL_PrepareReceive>
 800c018:	e008      	b.n	800c02c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c01a:	4b08      	ldr	r3, [pc, #32]	; (800c03c <USBD_CDC_Init+0x1e8>)
 800c01c:	7819      	ldrb	r1, [r3, #0]
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c024:	2340      	movs	r3, #64	; 0x40
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f003 fed0 	bl	800fdcc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3710      	adds	r7, #16
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	200000a7 	.word	0x200000a7
 800c03c:	200000a8 	.word	0x200000a8
 800c040:	200000a9 	.word	0x200000a9

0800c044 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	460b      	mov	r3, r1
 800c04e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c050:	4b3a      	ldr	r3, [pc, #232]	; (800c13c <USBD_CDC_DeInit+0xf8>)
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	4619      	mov	r1, r3
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f003 fdef 	bl	800fc3a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c05c:	4b37      	ldr	r3, [pc, #220]	; (800c13c <USBD_CDC_DeInit+0xf8>)
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	f003 020f 	and.w	r2, r3, #15
 800c064:	6879      	ldr	r1, [r7, #4]
 800c066:	4613      	mov	r3, r2
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	4413      	add	r3, r2
 800c06c:	009b      	lsls	r3, r3, #2
 800c06e:	440b      	add	r3, r1
 800c070:	3324      	adds	r3, #36	; 0x24
 800c072:	2200      	movs	r2, #0
 800c074:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c076:	4b32      	ldr	r3, [pc, #200]	; (800c140 <USBD_CDC_DeInit+0xfc>)
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	4619      	mov	r1, r3
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f003 fddc 	bl	800fc3a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c082:	4b2f      	ldr	r3, [pc, #188]	; (800c140 <USBD_CDC_DeInit+0xfc>)
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	f003 020f 	and.w	r2, r3, #15
 800c08a:	6879      	ldr	r1, [r7, #4]
 800c08c:	4613      	mov	r3, r2
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	4413      	add	r3, r2
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	440b      	add	r3, r1
 800c096:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c09a:	2200      	movs	r2, #0
 800c09c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c09e:	4b29      	ldr	r3, [pc, #164]	; (800c144 <USBD_CDC_DeInit+0x100>)
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f003 fdc8 	bl	800fc3a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c0aa:	4b26      	ldr	r3, [pc, #152]	; (800c144 <USBD_CDC_DeInit+0x100>)
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	f003 020f 	and.w	r2, r3, #15
 800c0b2:	6879      	ldr	r1, [r7, #4]
 800c0b4:	4613      	mov	r3, r2
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	4413      	add	r3, r2
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	440b      	add	r3, r1
 800c0be:	3324      	adds	r3, #36	; 0x24
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c0c4:	4b1f      	ldr	r3, [pc, #124]	; (800c144 <USBD_CDC_DeInit+0x100>)
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	f003 020f 	and.w	r2, r3, #15
 800c0cc:	6879      	ldr	r1, [r7, #4]
 800c0ce:	4613      	mov	r3, r2
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	4413      	add	r3, r2
 800c0d4:	009b      	lsls	r3, r3, #2
 800c0d6:	440b      	add	r3, r1
 800c0d8:	3326      	adds	r3, #38	; 0x26
 800c0da:	2200      	movs	r2, #0
 800c0dc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	32b0      	adds	r2, #176	; 0xb0
 800c0e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d01f      	beq.n	800c130 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	33b0      	adds	r3, #176	; 0xb0
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	4413      	add	r3, r2
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	32b0      	adds	r2, #176	; 0xb0
 800c10e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c112:	4618      	mov	r0, r3
 800c114:	f003 fe9c 	bl	800fe50 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	32b0      	adds	r2, #176	; 0xb0
 800c122:	2100      	movs	r1, #0
 800c124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c130:	2300      	movs	r3, #0
}
 800c132:	4618      	mov	r0, r3
 800c134:	3708      	adds	r7, #8
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	200000a7 	.word	0x200000a7
 800c140:	200000a8 	.word	0x200000a8
 800c144:	200000a9 	.word	0x200000a9

0800c148 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b086      	sub	sp, #24
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	32b0      	adds	r2, #176	; 0xb0
 800c15c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c160:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c162:	2300      	movs	r3, #0
 800c164:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c166:	2300      	movs	r3, #0
 800c168:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c16a:	2300      	movs	r3, #0
 800c16c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d101      	bne.n	800c178 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c174:	2303      	movs	r3, #3
 800c176:	e0bf      	b.n	800c2f8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c180:	2b00      	cmp	r3, #0
 800c182:	d050      	beq.n	800c226 <USBD_CDC_Setup+0xde>
 800c184:	2b20      	cmp	r3, #32
 800c186:	f040 80af 	bne.w	800c2e8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	88db      	ldrh	r3, [r3, #6]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d03a      	beq.n	800c208 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	b25b      	sxtb	r3, r3
 800c198:	2b00      	cmp	r3, #0
 800c19a:	da1b      	bge.n	800c1d4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	33b0      	adds	r3, #176	; 0xb0
 800c1a6:	009b      	lsls	r3, r3, #2
 800c1a8:	4413      	add	r3, r2
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	689b      	ldr	r3, [r3, #8]
 800c1ae:	683a      	ldr	r2, [r7, #0]
 800c1b0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c1b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c1b4:	683a      	ldr	r2, [r7, #0]
 800c1b6:	88d2      	ldrh	r2, [r2, #6]
 800c1b8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	88db      	ldrh	r3, [r3, #6]
 800c1be:	2b07      	cmp	r3, #7
 800c1c0:	bf28      	it	cs
 800c1c2:	2307      	movcs	r3, #7
 800c1c4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	89fa      	ldrh	r2, [r7, #14]
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f001 fd89 	bl	800dce4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c1d2:	e090      	b.n	800c2f6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	785a      	ldrb	r2, [r3, #1]
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	88db      	ldrh	r3, [r3, #6]
 800c1e2:	2b3f      	cmp	r3, #63	; 0x3f
 800c1e4:	d803      	bhi.n	800c1ee <USBD_CDC_Setup+0xa6>
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	88db      	ldrh	r3, [r3, #6]
 800c1ea:	b2da      	uxtb	r2, r3
 800c1ec:	e000      	b.n	800c1f0 <USBD_CDC_Setup+0xa8>
 800c1ee:	2240      	movs	r2, #64	; 0x40
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c1f6:	6939      	ldr	r1, [r7, #16]
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c1fe:	461a      	mov	r2, r3
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f001 fd9b 	bl	800dd3c <USBD_CtlPrepareRx>
      break;
 800c206:	e076      	b.n	800c2f6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	33b0      	adds	r3, #176	; 0xb0
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	4413      	add	r3, r2
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	683a      	ldr	r2, [r7, #0]
 800c21c:	7850      	ldrb	r0, [r2, #1]
 800c21e:	2200      	movs	r2, #0
 800c220:	6839      	ldr	r1, [r7, #0]
 800c222:	4798      	blx	r3
      break;
 800c224:	e067      	b.n	800c2f6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	785b      	ldrb	r3, [r3, #1]
 800c22a:	2b0b      	cmp	r3, #11
 800c22c:	d851      	bhi.n	800c2d2 <USBD_CDC_Setup+0x18a>
 800c22e:	a201      	add	r2, pc, #4	; (adr r2, 800c234 <USBD_CDC_Setup+0xec>)
 800c230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c234:	0800c265 	.word	0x0800c265
 800c238:	0800c2e1 	.word	0x0800c2e1
 800c23c:	0800c2d3 	.word	0x0800c2d3
 800c240:	0800c2d3 	.word	0x0800c2d3
 800c244:	0800c2d3 	.word	0x0800c2d3
 800c248:	0800c2d3 	.word	0x0800c2d3
 800c24c:	0800c2d3 	.word	0x0800c2d3
 800c250:	0800c2d3 	.word	0x0800c2d3
 800c254:	0800c2d3 	.word	0x0800c2d3
 800c258:	0800c2d3 	.word	0x0800c2d3
 800c25c:	0800c28f 	.word	0x0800c28f
 800c260:	0800c2b9 	.word	0x0800c2b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	2b03      	cmp	r3, #3
 800c26e:	d107      	bne.n	800c280 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c270:	f107 030a 	add.w	r3, r7, #10
 800c274:	2202      	movs	r2, #2
 800c276:	4619      	mov	r1, r3
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f001 fd33 	bl	800dce4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c27e:	e032      	b.n	800c2e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c280:	6839      	ldr	r1, [r7, #0]
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f001 fcbd 	bl	800dc02 <USBD_CtlError>
            ret = USBD_FAIL;
 800c288:	2303      	movs	r3, #3
 800c28a:	75fb      	strb	r3, [r7, #23]
          break;
 800c28c:	e02b      	b.n	800c2e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c294:	b2db      	uxtb	r3, r3
 800c296:	2b03      	cmp	r3, #3
 800c298:	d107      	bne.n	800c2aa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c29a:	f107 030d 	add.w	r3, r7, #13
 800c29e:	2201      	movs	r2, #1
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f001 fd1e 	bl	800dce4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c2a8:	e01d      	b.n	800c2e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c2aa:	6839      	ldr	r1, [r7, #0]
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f001 fca8 	bl	800dc02 <USBD_CtlError>
            ret = USBD_FAIL;
 800c2b2:	2303      	movs	r3, #3
 800c2b4:	75fb      	strb	r3, [r7, #23]
          break;
 800c2b6:	e016      	b.n	800c2e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2be:	b2db      	uxtb	r3, r3
 800c2c0:	2b03      	cmp	r3, #3
 800c2c2:	d00f      	beq.n	800c2e4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c2c4:	6839      	ldr	r1, [r7, #0]
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f001 fc9b 	bl	800dc02 <USBD_CtlError>
            ret = USBD_FAIL;
 800c2cc:	2303      	movs	r3, #3
 800c2ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c2d0:	e008      	b.n	800c2e4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c2d2:	6839      	ldr	r1, [r7, #0]
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f001 fc94 	bl	800dc02 <USBD_CtlError>
          ret = USBD_FAIL;
 800c2da:	2303      	movs	r3, #3
 800c2dc:	75fb      	strb	r3, [r7, #23]
          break;
 800c2de:	e002      	b.n	800c2e6 <USBD_CDC_Setup+0x19e>
          break;
 800c2e0:	bf00      	nop
 800c2e2:	e008      	b.n	800c2f6 <USBD_CDC_Setup+0x1ae>
          break;
 800c2e4:	bf00      	nop
      }
      break;
 800c2e6:	e006      	b.n	800c2f6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c2e8:	6839      	ldr	r1, [r7, #0]
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f001 fc89 	bl	800dc02 <USBD_CtlError>
      ret = USBD_FAIL;
 800c2f0:	2303      	movs	r3, #3
 800c2f2:	75fb      	strb	r3, [r7, #23]
      break;
 800c2f4:	bf00      	nop
  }

  return (uint8_t)ret;
 800c2f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3718      	adds	r7, #24
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	460b      	mov	r3, r1
 800c30a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c312:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	32b0      	adds	r2, #176	; 0xb0
 800c31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d101      	bne.n	800c32a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c326:	2303      	movs	r3, #3
 800c328:	e065      	b.n	800c3f6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	32b0      	adds	r2, #176	; 0xb0
 800c334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c338:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c33a:	78fb      	ldrb	r3, [r7, #3]
 800c33c:	f003 020f 	and.w	r2, r3, #15
 800c340:	6879      	ldr	r1, [r7, #4]
 800c342:	4613      	mov	r3, r2
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	4413      	add	r3, r2
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	440b      	add	r3, r1
 800c34c:	3318      	adds	r3, #24
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d02f      	beq.n	800c3b4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c354:	78fb      	ldrb	r3, [r7, #3]
 800c356:	f003 020f 	and.w	r2, r3, #15
 800c35a:	6879      	ldr	r1, [r7, #4]
 800c35c:	4613      	mov	r3, r2
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	4413      	add	r3, r2
 800c362:	009b      	lsls	r3, r3, #2
 800c364:	440b      	add	r3, r1
 800c366:	3318      	adds	r3, #24
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	78fb      	ldrb	r3, [r7, #3]
 800c36c:	f003 010f 	and.w	r1, r3, #15
 800c370:	68f8      	ldr	r0, [r7, #12]
 800c372:	460b      	mov	r3, r1
 800c374:	00db      	lsls	r3, r3, #3
 800c376:	440b      	add	r3, r1
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	4403      	add	r3, r0
 800c37c:	3348      	adds	r3, #72	; 0x48
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	fbb2 f1f3 	udiv	r1, r2, r3
 800c384:	fb01 f303 	mul.w	r3, r1, r3
 800c388:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d112      	bne.n	800c3b4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c38e:	78fb      	ldrb	r3, [r7, #3]
 800c390:	f003 020f 	and.w	r2, r3, #15
 800c394:	6879      	ldr	r1, [r7, #4]
 800c396:	4613      	mov	r3, r2
 800c398:	009b      	lsls	r3, r3, #2
 800c39a:	4413      	add	r3, r2
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	440b      	add	r3, r1
 800c3a0:	3318      	adds	r3, #24
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c3a6:	78f9      	ldrb	r1, [r7, #3]
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f003 fcec 	bl	800fd8a <USBD_LL_Transmit>
 800c3b2:	e01f      	b.n	800c3f4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	33b0      	adds	r3, #176	; 0xb0
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	4413      	add	r3, r2
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	691b      	ldr	r3, [r3, #16]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d010      	beq.n	800c3f4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	33b0      	adds	r3, #176	; 0xb0
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	4413      	add	r3, r2
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	68ba      	ldr	r2, [r7, #8]
 800c3e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c3ea:	68ba      	ldr	r2, [r7, #8]
 800c3ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c3f0:	78fa      	ldrb	r2, [r7, #3]
 800c3f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c3f4:	2300      	movs	r3, #0
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3710      	adds	r7, #16
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b084      	sub	sp, #16
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
 800c406:	460b      	mov	r3, r1
 800c408:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	32b0      	adds	r2, #176	; 0xb0
 800c414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c418:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	32b0      	adds	r2, #176	; 0xb0
 800c424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d101      	bne.n	800c430 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c42c:	2303      	movs	r3, #3
 800c42e:	e01a      	b.n	800c466 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c430:	78fb      	ldrb	r3, [r7, #3]
 800c432:	4619      	mov	r1, r3
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f003 fcea 	bl	800fe0e <USBD_LL_GetRxDataSize>
 800c43a:	4602      	mov	r2, r0
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	33b0      	adds	r3, #176	; 0xb0
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	4413      	add	r3, r2
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	68db      	ldr	r3, [r3, #12]
 800c454:	68fa      	ldr	r2, [r7, #12]
 800c456:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c45a:	68fa      	ldr	r2, [r7, #12]
 800c45c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c460:	4611      	mov	r1, r2
 800c462:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c464:	2300      	movs	r3, #0
}
 800c466:	4618      	mov	r0, r3
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c46e:	b580      	push	{r7, lr}
 800c470:	b084      	sub	sp, #16
 800c472:	af00      	add	r7, sp, #0
 800c474:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	32b0      	adds	r2, #176	; 0xb0
 800c480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c484:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d101      	bne.n	800c490 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c48c:	2303      	movs	r3, #3
 800c48e:	e025      	b.n	800c4dc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	33b0      	adds	r3, #176	; 0xb0
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	4413      	add	r3, r2
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d01a      	beq.n	800c4da <USBD_CDC_EP0_RxReady+0x6c>
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c4aa:	2bff      	cmp	r3, #255	; 0xff
 800c4ac:	d015      	beq.n	800c4da <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	33b0      	adds	r3, #176	; 0xb0
 800c4b8:	009b      	lsls	r3, r3, #2
 800c4ba:	4413      	add	r3, r2
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	68fa      	ldr	r2, [r7, #12]
 800c4c2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c4c6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c4c8:	68fa      	ldr	r2, [r7, #12]
 800c4ca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c4ce:	b292      	uxth	r2, r2
 800c4d0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	22ff      	movs	r2, #255	; 0xff
 800c4d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c4da:	2300      	movs	r3, #0
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3710      	adds	r7, #16
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b086      	sub	sp, #24
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c4ec:	2182      	movs	r1, #130	; 0x82
 800c4ee:	4818      	ldr	r0, [pc, #96]	; (800c550 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c4f0:	f000 fd4f 	bl	800cf92 <USBD_GetEpDesc>
 800c4f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c4f6:	2101      	movs	r1, #1
 800c4f8:	4815      	ldr	r0, [pc, #84]	; (800c550 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c4fa:	f000 fd4a 	bl	800cf92 <USBD_GetEpDesc>
 800c4fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c500:	2181      	movs	r1, #129	; 0x81
 800c502:	4813      	ldr	r0, [pc, #76]	; (800c550 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c504:	f000 fd45 	bl	800cf92 <USBD_GetEpDesc>
 800c508:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d002      	beq.n	800c516 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	2210      	movs	r2, #16
 800c514:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d006      	beq.n	800c52a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	2200      	movs	r2, #0
 800c520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c524:	711a      	strb	r2, [r3, #4]
 800c526:	2200      	movs	r2, #0
 800c528:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d006      	beq.n	800c53e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2200      	movs	r2, #0
 800c534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c538:	711a      	strb	r2, [r3, #4]
 800c53a:	2200      	movs	r2, #0
 800c53c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2243      	movs	r2, #67	; 0x43
 800c542:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c544:	4b02      	ldr	r3, [pc, #8]	; (800c550 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c546:	4618      	mov	r0, r3
 800c548:	3718      	adds	r7, #24
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	20000064 	.word	0x20000064

0800c554 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b086      	sub	sp, #24
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c55c:	2182      	movs	r1, #130	; 0x82
 800c55e:	4818      	ldr	r0, [pc, #96]	; (800c5c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c560:	f000 fd17 	bl	800cf92 <USBD_GetEpDesc>
 800c564:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c566:	2101      	movs	r1, #1
 800c568:	4815      	ldr	r0, [pc, #84]	; (800c5c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c56a:	f000 fd12 	bl	800cf92 <USBD_GetEpDesc>
 800c56e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c570:	2181      	movs	r1, #129	; 0x81
 800c572:	4813      	ldr	r0, [pc, #76]	; (800c5c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c574:	f000 fd0d 	bl	800cf92 <USBD_GetEpDesc>
 800c578:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d002      	beq.n	800c586 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	2210      	movs	r2, #16
 800c584:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d006      	beq.n	800c59a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	2200      	movs	r2, #0
 800c590:	711a      	strb	r2, [r3, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	f042 0202 	orr.w	r2, r2, #2
 800c598:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d006      	beq.n	800c5ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	711a      	strb	r2, [r3, #4]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	f042 0202 	orr.w	r2, r2, #2
 800c5ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2243      	movs	r2, #67	; 0x43
 800c5b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c5b4:	4b02      	ldr	r3, [pc, #8]	; (800c5c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3718      	adds	r7, #24
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	20000064 	.word	0x20000064

0800c5c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b086      	sub	sp, #24
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c5cc:	2182      	movs	r1, #130	; 0x82
 800c5ce:	4818      	ldr	r0, [pc, #96]	; (800c630 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c5d0:	f000 fcdf 	bl	800cf92 <USBD_GetEpDesc>
 800c5d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c5d6:	2101      	movs	r1, #1
 800c5d8:	4815      	ldr	r0, [pc, #84]	; (800c630 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c5da:	f000 fcda 	bl	800cf92 <USBD_GetEpDesc>
 800c5de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c5e0:	2181      	movs	r1, #129	; 0x81
 800c5e2:	4813      	ldr	r0, [pc, #76]	; (800c630 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c5e4:	f000 fcd5 	bl	800cf92 <USBD_GetEpDesc>
 800c5e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d002      	beq.n	800c5f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	2210      	movs	r2, #16
 800c5f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d006      	beq.n	800c60a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	2200      	movs	r2, #0
 800c600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c604:	711a      	strb	r2, [r3, #4]
 800c606:	2200      	movs	r2, #0
 800c608:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d006      	beq.n	800c61e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2200      	movs	r2, #0
 800c614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c618:	711a      	strb	r2, [r3, #4]
 800c61a:	2200      	movs	r2, #0
 800c61c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2243      	movs	r2, #67	; 0x43
 800c622:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c624:	4b02      	ldr	r3, [pc, #8]	; (800c630 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c626:	4618      	mov	r0, r3
 800c628:	3718      	adds	r7, #24
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	20000064 	.word	0x20000064

0800c634 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	220a      	movs	r2, #10
 800c640:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c642:	4b03      	ldr	r3, [pc, #12]	; (800c650 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c644:	4618      	mov	r0, r3
 800c646:	370c      	adds	r7, #12
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr
 800c650:	20000020 	.word	0x20000020

0800c654 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d101      	bne.n	800c668 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c664:	2303      	movs	r3, #3
 800c666:	e009      	b.n	800c67c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	33b0      	adds	r3, #176	; 0xb0
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	4413      	add	r3, r2
 800c676:	683a      	ldr	r2, [r7, #0]
 800c678:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c67a:	2300      	movs	r3, #0
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	370c      	adds	r7, #12
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c688:	b480      	push	{r7}
 800c68a:	b087      	sub	sp, #28
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	60b9      	str	r1, [r7, #8]
 800c692:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	32b0      	adds	r2, #176	; 0xb0
 800c69e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6a2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d101      	bne.n	800c6ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c6aa:	2303      	movs	r3, #3
 800c6ac:	e008      	b.n	800c6c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	68ba      	ldr	r2, [r7, #8]
 800c6b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c6be:	2300      	movs	r3, #0
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	371c      	adds	r7, #28
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b085      	sub	sp, #20
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	32b0      	adds	r2, #176	; 0xb0
 800c6e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d101      	bne.n	800c6f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c6ec:	2303      	movs	r3, #3
 800c6ee:	e004      	b.n	800c6fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	683a      	ldr	r2, [r7, #0]
 800c6f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c6f8:	2300      	movs	r3, #0
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3714      	adds	r7, #20
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr
	...

0800c708 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	32b0      	adds	r2, #176	; 0xb0
 800c71a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c71e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c720:	2301      	movs	r3, #1
 800c722:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	32b0      	adds	r2, #176	; 0xb0
 800c72e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d101      	bne.n	800c73a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c736:	2303      	movs	r3, #3
 800c738:	e025      	b.n	800c786 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c740:	2b00      	cmp	r3, #0
 800c742:	d11f      	bne.n	800c784 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	2201      	movs	r2, #1
 800c748:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c74c:	4b10      	ldr	r3, [pc, #64]	; (800c790 <USBD_CDC_TransmitPacket+0x88>)
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	f003 020f 	and.w	r2, r3, #15
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	4613      	mov	r3, r2
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	4413      	add	r3, r2
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	4403      	add	r3, r0
 800c766:	3318      	adds	r3, #24
 800c768:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c76a:	4b09      	ldr	r3, [pc, #36]	; (800c790 <USBD_CDC_TransmitPacket+0x88>)
 800c76c:	7819      	ldrb	r1, [r3, #0]
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f003 fb05 	bl	800fd8a <USBD_LL_Transmit>

    ret = USBD_OK;
 800c780:	2300      	movs	r3, #0
 800c782:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c784:	7bfb      	ldrb	r3, [r7, #15]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	200000a7 	.word	0x200000a7

0800c794 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	32b0      	adds	r2, #176	; 0xb0
 800c7a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7aa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	32b0      	adds	r2, #176	; 0xb0
 800c7b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d101      	bne.n	800c7c2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c7be:	2303      	movs	r3, #3
 800c7c0:	e018      	b.n	800c7f4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	7c1b      	ldrb	r3, [r3, #16]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d10a      	bne.n	800c7e0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c7ca:	4b0c      	ldr	r3, [pc, #48]	; (800c7fc <USBD_CDC_ReceivePacket+0x68>)
 800c7cc:	7819      	ldrb	r1, [r3, #0]
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c7d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f003 faf7 	bl	800fdcc <USBD_LL_PrepareReceive>
 800c7de:	e008      	b.n	800c7f2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c7e0:	4b06      	ldr	r3, [pc, #24]	; (800c7fc <USBD_CDC_ReceivePacket+0x68>)
 800c7e2:	7819      	ldrb	r1, [r3, #0]
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c7ea:	2340      	movs	r3, #64	; 0x40
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f003 faed 	bl	800fdcc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c7f2:	2300      	movs	r3, #0
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3710      	adds	r7, #16
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	200000a8 	.word	0x200000a8

0800c800 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b086      	sub	sp, #24
 800c804:	af00      	add	r7, sp, #0
 800c806:	60f8      	str	r0, [r7, #12]
 800c808:	60b9      	str	r1, [r7, #8]
 800c80a:	4613      	mov	r3, r2
 800c80c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d101      	bne.n	800c818 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c814:	2303      	movs	r3, #3
 800c816:	e01f      	b.n	800c858 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2200      	movs	r2, #0
 800c81c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2200      	movs	r2, #0
 800c824:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2200      	movs	r2, #0
 800c82c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d003      	beq.n	800c83e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	68ba      	ldr	r2, [r7, #8]
 800c83a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2201      	movs	r2, #1
 800c842:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	79fa      	ldrb	r2, [r7, #7]
 800c84a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c84c:	68f8      	ldr	r0, [r7, #12]
 800c84e:	f003 f967 	bl	800fb20 <USBD_LL_Init>
 800c852:	4603      	mov	r3, r0
 800c854:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c856:	7dfb      	ldrb	r3, [r7, #23]
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3718      	adds	r7, #24
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c86a:	2300      	movs	r3, #0
 800c86c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d101      	bne.n	800c878 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c874:	2303      	movs	r3, #3
 800c876:	e025      	b.n	800c8c4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	683a      	ldr	r2, [r7, #0]
 800c87c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	32ae      	adds	r2, #174	; 0xae
 800c88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c890:	2b00      	cmp	r3, #0
 800c892:	d00f      	beq.n	800c8b4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	32ae      	adds	r2, #174	; 0xae
 800c89e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a4:	f107 020e 	add.w	r2, r7, #14
 800c8a8:	4610      	mov	r0, r2
 800c8aa:	4798      	blx	r3
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c8ba:	1c5a      	adds	r2, r3, #1
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c8c2:	2300      	movs	r3, #0
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3710      	adds	r7, #16
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f003 f96f 	bl	800fbb8 <USBD_LL_Start>
 800c8da:	4603      	mov	r3, r0
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b083      	sub	sp, #12
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c8ec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	370c      	adds	r7, #12
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr

0800c8fa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b084      	sub	sp, #16
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
 800c902:	460b      	mov	r3, r1
 800c904:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c906:	2300      	movs	r3, #0
 800c908:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c910:	2b00      	cmp	r3, #0
 800c912:	d009      	beq.n	800c928 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	78fa      	ldrb	r2, [r7, #3]
 800c91e:	4611      	mov	r1, r2
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	4798      	blx	r3
 800c924:	4603      	mov	r3, r0
 800c926:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c928:	7bfb      	ldrb	r3, [r7, #15]
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b084      	sub	sp, #16
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
 800c93a:	460b      	mov	r3, r1
 800c93c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c93e:	2300      	movs	r3, #0
 800c940:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	78fa      	ldrb	r2, [r7, #3]
 800c94c:	4611      	mov	r1, r2
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	4798      	blx	r3
 800c952:	4603      	mov	r3, r0
 800c954:	2b00      	cmp	r3, #0
 800c956:	d001      	beq.n	800c95c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c958:	2303      	movs	r3, #3
 800c95a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3710      	adds	r7, #16
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c966:	b580      	push	{r7, lr}
 800c968:	b084      	sub	sp, #16
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
 800c96e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c976:	6839      	ldr	r1, [r7, #0]
 800c978:	4618      	mov	r0, r3
 800c97a:	f001 f908 	bl	800db8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2201      	movs	r2, #1
 800c982:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c98c:	461a      	mov	r2, r3
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c99a:	f003 031f 	and.w	r3, r3, #31
 800c99e:	2b02      	cmp	r3, #2
 800c9a0:	d01a      	beq.n	800c9d8 <USBD_LL_SetupStage+0x72>
 800c9a2:	2b02      	cmp	r3, #2
 800c9a4:	d822      	bhi.n	800c9ec <USBD_LL_SetupStage+0x86>
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d002      	beq.n	800c9b0 <USBD_LL_SetupStage+0x4a>
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d00a      	beq.n	800c9c4 <USBD_LL_SetupStage+0x5e>
 800c9ae:	e01d      	b.n	800c9ec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 fb5f 	bl	800d07c <USBD_StdDevReq>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	73fb      	strb	r3, [r7, #15]
      break;
 800c9c2:	e020      	b.n	800ca06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f000 fbc7 	bl	800d160 <USBD_StdItfReq>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	73fb      	strb	r3, [r7, #15]
      break;
 800c9d6:	e016      	b.n	800ca06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c9de:	4619      	mov	r1, r3
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f000 fc29 	bl	800d238 <USBD_StdEPReq>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	73fb      	strb	r3, [r7, #15]
      break;
 800c9ea:	e00c      	b.n	800ca06 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c9f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f003 f93c 	bl	800fc78 <USBD_LL_StallEP>
 800ca00:	4603      	mov	r3, r0
 800ca02:	73fb      	strb	r3, [r7, #15]
      break;
 800ca04:	bf00      	nop
  }

  return ret;
 800ca06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3710      	adds	r7, #16
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b086      	sub	sp, #24
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	460b      	mov	r3, r1
 800ca1a:	607a      	str	r2, [r7, #4]
 800ca1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ca22:	7afb      	ldrb	r3, [r7, #11]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d16e      	bne.n	800cb06 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ca2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ca36:	2b03      	cmp	r3, #3
 800ca38:	f040 8098 	bne.w	800cb6c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	689a      	ldr	r2, [r3, #8]
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	68db      	ldr	r3, [r3, #12]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d913      	bls.n	800ca70 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	689a      	ldr	r2, [r3, #8]
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	68db      	ldr	r3, [r3, #12]
 800ca50:	1ad2      	subs	r2, r2, r3
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	68da      	ldr	r2, [r3, #12]
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	689b      	ldr	r3, [r3, #8]
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	bf28      	it	cs
 800ca62:	4613      	movcs	r3, r2
 800ca64:	461a      	mov	r2, r3
 800ca66:	6879      	ldr	r1, [r7, #4]
 800ca68:	68f8      	ldr	r0, [r7, #12]
 800ca6a:	f001 f984 	bl	800dd76 <USBD_CtlContinueRx>
 800ca6e:	e07d      	b.n	800cb6c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ca76:	f003 031f 	and.w	r3, r3, #31
 800ca7a:	2b02      	cmp	r3, #2
 800ca7c:	d014      	beq.n	800caa8 <USBD_LL_DataOutStage+0x98>
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	d81d      	bhi.n	800cabe <USBD_LL_DataOutStage+0xae>
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d002      	beq.n	800ca8c <USBD_LL_DataOutStage+0x7c>
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	d003      	beq.n	800ca92 <USBD_LL_DataOutStage+0x82>
 800ca8a:	e018      	b.n	800cabe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	75bb      	strb	r3, [r7, #22]
            break;
 800ca90:	e018      	b.n	800cac4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	68f8      	ldr	r0, [r7, #12]
 800ca9e:	f000 fa5e 	bl	800cf5e <USBD_CoreFindIF>
 800caa2:	4603      	mov	r3, r0
 800caa4:	75bb      	strb	r3, [r7, #22]
            break;
 800caa6:	e00d      	b.n	800cac4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800caae:	b2db      	uxtb	r3, r3
 800cab0:	4619      	mov	r1, r3
 800cab2:	68f8      	ldr	r0, [r7, #12]
 800cab4:	f000 fa60 	bl	800cf78 <USBD_CoreFindEP>
 800cab8:	4603      	mov	r3, r0
 800caba:	75bb      	strb	r3, [r7, #22]
            break;
 800cabc:	e002      	b.n	800cac4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cabe:	2300      	movs	r3, #0
 800cac0:	75bb      	strb	r3, [r7, #22]
            break;
 800cac2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cac4:	7dbb      	ldrb	r3, [r7, #22]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d119      	bne.n	800cafe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	2b03      	cmp	r3, #3
 800cad4:	d113      	bne.n	800cafe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cad6:	7dba      	ldrb	r2, [r7, #22]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	32ae      	adds	r2, #174	; 0xae
 800cadc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cae0:	691b      	ldr	r3, [r3, #16]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00b      	beq.n	800cafe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cae6:	7dba      	ldrb	r2, [r7, #22]
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800caee:	7dba      	ldrb	r2, [r7, #22]
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	32ae      	adds	r2, #174	; 0xae
 800caf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caf8:	691b      	ldr	r3, [r3, #16]
 800cafa:	68f8      	ldr	r0, [r7, #12]
 800cafc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cafe:	68f8      	ldr	r0, [r7, #12]
 800cb00:	f001 f94a 	bl	800dd98 <USBD_CtlSendStatus>
 800cb04:	e032      	b.n	800cb6c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cb06:	7afb      	ldrb	r3, [r7, #11]
 800cb08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	4619      	mov	r1, r3
 800cb10:	68f8      	ldr	r0, [r7, #12]
 800cb12:	f000 fa31 	bl	800cf78 <USBD_CoreFindEP>
 800cb16:	4603      	mov	r3, r0
 800cb18:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb1a:	7dbb      	ldrb	r3, [r7, #22]
 800cb1c:	2bff      	cmp	r3, #255	; 0xff
 800cb1e:	d025      	beq.n	800cb6c <USBD_LL_DataOutStage+0x15c>
 800cb20:	7dbb      	ldrb	r3, [r7, #22]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d122      	bne.n	800cb6c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	2b03      	cmp	r3, #3
 800cb30:	d117      	bne.n	800cb62 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cb32:	7dba      	ldrb	r2, [r7, #22]
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	32ae      	adds	r2, #174	; 0xae
 800cb38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb3c:	699b      	ldr	r3, [r3, #24]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d00f      	beq.n	800cb62 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cb42:	7dba      	ldrb	r2, [r7, #22]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cb4a:	7dba      	ldrb	r2, [r7, #22]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	32ae      	adds	r2, #174	; 0xae
 800cb50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb54:	699b      	ldr	r3, [r3, #24]
 800cb56:	7afa      	ldrb	r2, [r7, #11]
 800cb58:	4611      	mov	r1, r2
 800cb5a:	68f8      	ldr	r0, [r7, #12]
 800cb5c:	4798      	blx	r3
 800cb5e:	4603      	mov	r3, r0
 800cb60:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cb62:	7dfb      	ldrb	r3, [r7, #23]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d001      	beq.n	800cb6c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cb68:	7dfb      	ldrb	r3, [r7, #23]
 800cb6a:	e000      	b.n	800cb6e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cb6c:	2300      	movs	r3, #0
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3718      	adds	r7, #24
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b086      	sub	sp, #24
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	60f8      	str	r0, [r7, #12]
 800cb7e:	460b      	mov	r3, r1
 800cb80:	607a      	str	r2, [r7, #4]
 800cb82:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cb84:	7afb      	ldrb	r3, [r7, #11]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d16f      	bne.n	800cc6a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	3314      	adds	r3, #20
 800cb8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cb96:	2b02      	cmp	r3, #2
 800cb98:	d15a      	bne.n	800cc50 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	689a      	ldr	r2, [r3, #8]
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d914      	bls.n	800cbd0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	689a      	ldr	r2, [r3, #8]
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	1ad2      	subs	r2, r2, r3
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	689b      	ldr	r3, [r3, #8]
 800cbb8:	461a      	mov	r2, r3
 800cbba:	6879      	ldr	r1, [r7, #4]
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f001 f8ac 	bl	800dd1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	2100      	movs	r1, #0
 800cbc8:	68f8      	ldr	r0, [r7, #12]
 800cbca:	f003 f8ff 	bl	800fdcc <USBD_LL_PrepareReceive>
 800cbce:	e03f      	b.n	800cc50 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	68da      	ldr	r2, [r3, #12]
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	689b      	ldr	r3, [r3, #8]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d11c      	bne.n	800cc16 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	685a      	ldr	r2, [r3, #4]
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d316      	bcc.n	800cc16 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	685a      	ldr	r2, [r3, #4]
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d20f      	bcs.n	800cc16 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	2100      	movs	r1, #0
 800cbfa:	68f8      	ldr	r0, [r7, #12]
 800cbfc:	f001 f88d 	bl	800dd1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2200      	movs	r2, #0
 800cc04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc08:	2300      	movs	r3, #0
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	2100      	movs	r1, #0
 800cc0e:	68f8      	ldr	r0, [r7, #12]
 800cc10:	f003 f8dc 	bl	800fdcc <USBD_LL_PrepareReceive>
 800cc14:	e01c      	b.n	800cc50 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	2b03      	cmp	r3, #3
 800cc20:	d10f      	bne.n	800cc42 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc28:	68db      	ldr	r3, [r3, #12]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d009      	beq.n	800cc42 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2200      	movs	r2, #0
 800cc32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc3c:	68db      	ldr	r3, [r3, #12]
 800cc3e:	68f8      	ldr	r0, [r7, #12]
 800cc40:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc42:	2180      	movs	r1, #128	; 0x80
 800cc44:	68f8      	ldr	r0, [r7, #12]
 800cc46:	f003 f817 	bl	800fc78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cc4a:	68f8      	ldr	r0, [r7, #12]
 800cc4c:	f001 f8b7 	bl	800ddbe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d03a      	beq.n	800ccd0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cc5a:	68f8      	ldr	r0, [r7, #12]
 800cc5c:	f7ff fe42 	bl	800c8e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2200      	movs	r2, #0
 800cc64:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cc68:	e032      	b.n	800ccd0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cc6a:	7afb      	ldrb	r3, [r7, #11]
 800cc6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	4619      	mov	r1, r3
 800cc74:	68f8      	ldr	r0, [r7, #12]
 800cc76:	f000 f97f 	bl	800cf78 <USBD_CoreFindEP>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc7e:	7dfb      	ldrb	r3, [r7, #23]
 800cc80:	2bff      	cmp	r3, #255	; 0xff
 800cc82:	d025      	beq.n	800ccd0 <USBD_LL_DataInStage+0x15a>
 800cc84:	7dfb      	ldrb	r3, [r7, #23]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d122      	bne.n	800ccd0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	2b03      	cmp	r3, #3
 800cc94:	d11c      	bne.n	800ccd0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cc96:	7dfa      	ldrb	r2, [r7, #23]
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	32ae      	adds	r2, #174	; 0xae
 800cc9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cca0:	695b      	ldr	r3, [r3, #20]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d014      	beq.n	800ccd0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cca6:	7dfa      	ldrb	r2, [r7, #23]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ccae:	7dfa      	ldrb	r2, [r7, #23]
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	32ae      	adds	r2, #174	; 0xae
 800ccb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccb8:	695b      	ldr	r3, [r3, #20]
 800ccba:	7afa      	ldrb	r2, [r7, #11]
 800ccbc:	4611      	mov	r1, r2
 800ccbe:	68f8      	ldr	r0, [r7, #12]
 800ccc0:	4798      	blx	r3
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ccc6:	7dbb      	ldrb	r3, [r7, #22]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d001      	beq.n	800ccd0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cccc:	7dbb      	ldrb	r3, [r7, #22]
 800ccce:	e000      	b.n	800ccd2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ccd0:	2300      	movs	r3, #0
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3718      	adds	r7, #24
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}

0800ccda <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	b084      	sub	sp, #16
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cce2:	2300      	movs	r3, #0
 800cce4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2201      	movs	r2, #1
 800ccea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d014      	beq.n	800cd40 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d00e      	beq.n	800cd40 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	6852      	ldr	r2, [r2, #4]
 800cd2e:	b2d2      	uxtb	r2, r2
 800cd30:	4611      	mov	r1, r2
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	4798      	blx	r3
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d001      	beq.n	800cd40 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cd3c:	2303      	movs	r3, #3
 800cd3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cd40:	2340      	movs	r3, #64	; 0x40
 800cd42:	2200      	movs	r2, #0
 800cd44:	2100      	movs	r1, #0
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f002 ff51 	bl	800fbee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2201      	movs	r2, #1
 800cd50:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2240      	movs	r2, #64	; 0x40
 800cd58:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cd5c:	2340      	movs	r3, #64	; 0x40
 800cd5e:	2200      	movs	r2, #0
 800cd60:	2180      	movs	r1, #128	; 0x80
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f002 ff43 	bl	800fbee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2240      	movs	r2, #64	; 0x40
 800cd72:	621a      	str	r2, [r3, #32]

  return ret;
 800cd74:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3710      	adds	r7, #16
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cd7e:	b480      	push	{r7}
 800cd80:	b083      	sub	sp, #12
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
 800cd86:	460b      	mov	r3, r1
 800cd88:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	78fa      	ldrb	r2, [r7, #3]
 800cd8e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cd90:	2300      	movs	r3, #0
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	370c      	adds	r7, #12
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr

0800cd9e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cd9e:	b480      	push	{r7}
 800cda0:	b083      	sub	sp, #12
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdac:	b2da      	uxtb	r2, r3
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2204      	movs	r2, #4
 800cdb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cdbc:	2300      	movs	r3, #0
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	370c      	adds	r7, #12
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc8:	4770      	bx	lr

0800cdca <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cdca:	b480      	push	{r7}
 800cdcc:	b083      	sub	sp, #12
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	2b04      	cmp	r3, #4
 800cddc:	d106      	bne.n	800cdec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cde4:	b2da      	uxtb	r2, r3
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cdec:	2300      	movs	r3, #0
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	370c      	adds	r7, #12
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr

0800cdfa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cdfa:	b580      	push	{r7, lr}
 800cdfc:	b082      	sub	sp, #8
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	2b03      	cmp	r3, #3
 800ce0c:	d110      	bne.n	800ce30 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00b      	beq.n	800ce30 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce1e:	69db      	ldr	r3, [r3, #28]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d005      	beq.n	800ce30 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce2a:	69db      	ldr	r3, [r3, #28]
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ce30:	2300      	movs	r3, #0
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3708      	adds	r7, #8
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}

0800ce3a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ce3a:	b580      	push	{r7, lr}
 800ce3c:	b082      	sub	sp, #8
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
 800ce42:	460b      	mov	r3, r1
 800ce44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	32ae      	adds	r2, #174	; 0xae
 800ce50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d101      	bne.n	800ce5c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ce58:	2303      	movs	r3, #3
 800ce5a:	e01c      	b.n	800ce96 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	2b03      	cmp	r3, #3
 800ce66:	d115      	bne.n	800ce94 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	32ae      	adds	r2, #174	; 0xae
 800ce72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce76:	6a1b      	ldr	r3, [r3, #32]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d00b      	beq.n	800ce94 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	32ae      	adds	r2, #174	; 0xae
 800ce86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce8a:	6a1b      	ldr	r3, [r3, #32]
 800ce8c:	78fa      	ldrb	r2, [r7, #3]
 800ce8e:	4611      	mov	r1, r2
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ce94:	2300      	movs	r3, #0
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3708      	adds	r7, #8
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}

0800ce9e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b082      	sub	sp, #8
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
 800cea6:	460b      	mov	r3, r1
 800cea8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	32ae      	adds	r2, #174	; 0xae
 800ceb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d101      	bne.n	800cec0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cebc:	2303      	movs	r3, #3
 800cebe:	e01c      	b.n	800cefa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	2b03      	cmp	r3, #3
 800ceca:	d115      	bne.n	800cef8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	32ae      	adds	r2, #174	; 0xae
 800ced6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00b      	beq.n	800cef8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	32ae      	adds	r2, #174	; 0xae
 800ceea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef0:	78fa      	ldrb	r2, [r7, #3]
 800cef2:	4611      	mov	r1, r2
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cef8:	2300      	movs	r3, #0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3708      	adds	r7, #8
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}

0800cf02 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cf02:	b480      	push	{r7}
 800cf04:	b083      	sub	sp, #12
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cf0a:	2300      	movs	r3, #0
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cf20:	2300      	movs	r3, #0
 800cf22:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2201      	movs	r2, #1
 800cf28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d00e      	beq.n	800cf54 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	6852      	ldr	r2, [r2, #4]
 800cf42:	b2d2      	uxtb	r2, r2
 800cf44:	4611      	mov	r1, r2
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	4798      	blx	r3
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d001      	beq.n	800cf54 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cf50:	2303      	movs	r3, #3
 800cf52:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cf54:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3710      	adds	r7, #16
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}

0800cf5e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cf5e:	b480      	push	{r7}
 800cf60:	b083      	sub	sp, #12
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
 800cf66:	460b      	mov	r3, r1
 800cf68:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cf6a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	370c      	adds	r7, #12
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr

0800cf78 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b083      	sub	sp, #12
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	460b      	mov	r3, r1
 800cf82:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cf84:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	370c      	adds	r7, #12
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr

0800cf92 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cf92:	b580      	push	{r7, lr}
 800cf94:	b086      	sub	sp, #24
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	885b      	ldrh	r3, [r3, #2]
 800cfae:	b29a      	uxth	r2, r3
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d920      	bls.n	800cffc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cfc2:	e013      	b.n	800cfec <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cfc4:	f107 030a 	add.w	r3, r7, #10
 800cfc8:	4619      	mov	r1, r3
 800cfca:	6978      	ldr	r0, [r7, #20]
 800cfcc:	f000 f81b 	bl	800d006 <USBD_GetNextDesc>
 800cfd0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	785b      	ldrb	r3, [r3, #1]
 800cfd6:	2b05      	cmp	r3, #5
 800cfd8:	d108      	bne.n	800cfec <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	789b      	ldrb	r3, [r3, #2]
 800cfe2:	78fa      	ldrb	r2, [r7, #3]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d008      	beq.n	800cffa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	885b      	ldrh	r3, [r3, #2]
 800cff0:	b29a      	uxth	r2, r3
 800cff2:	897b      	ldrh	r3, [r7, #10]
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d8e5      	bhi.n	800cfc4 <USBD_GetEpDesc+0x32>
 800cff8:	e000      	b.n	800cffc <USBD_GetEpDesc+0x6a>
          break;
 800cffa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cffc:	693b      	ldr	r3, [r7, #16]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3718      	adds	r7, #24
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d006:	b480      	push	{r7}
 800d008:	b085      	sub	sp, #20
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
 800d00e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	881a      	ldrh	r2, [r3, #0]
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	4413      	add	r3, r2
 800d020:	b29a      	uxth	r2, r3
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	461a      	mov	r2, r3
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	4413      	add	r3, r2
 800d030:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d032:	68fb      	ldr	r3, [r7, #12]
}
 800d034:	4618      	mov	r0, r3
 800d036:	3714      	adds	r7, #20
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr

0800d040 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d040:	b480      	push	{r7}
 800d042:	b087      	sub	sp, #28
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	3301      	adds	r3, #1
 800d056:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d05e:	8a3b      	ldrh	r3, [r7, #16]
 800d060:	021b      	lsls	r3, r3, #8
 800d062:	b21a      	sxth	r2, r3
 800d064:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d068:	4313      	orrs	r3, r2
 800d06a:	b21b      	sxth	r3, r3
 800d06c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d06e:	89fb      	ldrh	r3, [r7, #14]
}
 800d070:	4618      	mov	r0, r3
 800d072:	371c      	adds	r7, #28
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d086:	2300      	movs	r3, #0
 800d088:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d092:	2b40      	cmp	r3, #64	; 0x40
 800d094:	d005      	beq.n	800d0a2 <USBD_StdDevReq+0x26>
 800d096:	2b40      	cmp	r3, #64	; 0x40
 800d098:	d857      	bhi.n	800d14a <USBD_StdDevReq+0xce>
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00f      	beq.n	800d0be <USBD_StdDevReq+0x42>
 800d09e:	2b20      	cmp	r3, #32
 800d0a0:	d153      	bne.n	800d14a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	32ae      	adds	r2, #174	; 0xae
 800d0ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0b0:	689b      	ldr	r3, [r3, #8]
 800d0b2:	6839      	ldr	r1, [r7, #0]
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	4798      	blx	r3
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	73fb      	strb	r3, [r7, #15]
      break;
 800d0bc:	e04a      	b.n	800d154 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	785b      	ldrb	r3, [r3, #1]
 800d0c2:	2b09      	cmp	r3, #9
 800d0c4:	d83b      	bhi.n	800d13e <USBD_StdDevReq+0xc2>
 800d0c6:	a201      	add	r2, pc, #4	; (adr r2, 800d0cc <USBD_StdDevReq+0x50>)
 800d0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0cc:	0800d121 	.word	0x0800d121
 800d0d0:	0800d135 	.word	0x0800d135
 800d0d4:	0800d13f 	.word	0x0800d13f
 800d0d8:	0800d12b 	.word	0x0800d12b
 800d0dc:	0800d13f 	.word	0x0800d13f
 800d0e0:	0800d0ff 	.word	0x0800d0ff
 800d0e4:	0800d0f5 	.word	0x0800d0f5
 800d0e8:	0800d13f 	.word	0x0800d13f
 800d0ec:	0800d117 	.word	0x0800d117
 800d0f0:	0800d109 	.word	0x0800d109
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d0f4:	6839      	ldr	r1, [r7, #0]
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 fa3c 	bl	800d574 <USBD_GetDescriptor>
          break;
 800d0fc:	e024      	b.n	800d148 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d0fe:	6839      	ldr	r1, [r7, #0]
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f000 fba1 	bl	800d848 <USBD_SetAddress>
          break;
 800d106:	e01f      	b.n	800d148 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d108:	6839      	ldr	r1, [r7, #0]
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 fbe0 	bl	800d8d0 <USBD_SetConfig>
 800d110:	4603      	mov	r3, r0
 800d112:	73fb      	strb	r3, [r7, #15]
          break;
 800d114:	e018      	b.n	800d148 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d116:	6839      	ldr	r1, [r7, #0]
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f000 fc83 	bl	800da24 <USBD_GetConfig>
          break;
 800d11e:	e013      	b.n	800d148 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d120:	6839      	ldr	r1, [r7, #0]
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 fcb4 	bl	800da90 <USBD_GetStatus>
          break;
 800d128:	e00e      	b.n	800d148 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d12a:	6839      	ldr	r1, [r7, #0]
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 fce3 	bl	800daf8 <USBD_SetFeature>
          break;
 800d132:	e009      	b.n	800d148 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d134:	6839      	ldr	r1, [r7, #0]
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f000 fd07 	bl	800db4a <USBD_ClrFeature>
          break;
 800d13c:	e004      	b.n	800d148 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d13e:	6839      	ldr	r1, [r7, #0]
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f000 fd5e 	bl	800dc02 <USBD_CtlError>
          break;
 800d146:	bf00      	nop
      }
      break;
 800d148:	e004      	b.n	800d154 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d14a:	6839      	ldr	r1, [r7, #0]
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 fd58 	bl	800dc02 <USBD_CtlError>
      break;
 800d152:	bf00      	nop
  }

  return ret;
 800d154:	7bfb      	ldrb	r3, [r7, #15]
}
 800d156:	4618      	mov	r0, r3
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop

0800d160 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d16a:	2300      	movs	r3, #0
 800d16c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d176:	2b40      	cmp	r3, #64	; 0x40
 800d178:	d005      	beq.n	800d186 <USBD_StdItfReq+0x26>
 800d17a:	2b40      	cmp	r3, #64	; 0x40
 800d17c:	d852      	bhi.n	800d224 <USBD_StdItfReq+0xc4>
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d001      	beq.n	800d186 <USBD_StdItfReq+0x26>
 800d182:	2b20      	cmp	r3, #32
 800d184:	d14e      	bne.n	800d224 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	3b01      	subs	r3, #1
 800d190:	2b02      	cmp	r3, #2
 800d192:	d840      	bhi.n	800d216 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	889b      	ldrh	r3, [r3, #4]
 800d198:	b2db      	uxtb	r3, r3
 800d19a:	2b01      	cmp	r3, #1
 800d19c:	d836      	bhi.n	800d20c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	889b      	ldrh	r3, [r3, #4]
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f7ff fed9 	bl	800cf5e <USBD_CoreFindIF>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d1b0:	7bbb      	ldrb	r3, [r7, #14]
 800d1b2:	2bff      	cmp	r3, #255	; 0xff
 800d1b4:	d01d      	beq.n	800d1f2 <USBD_StdItfReq+0x92>
 800d1b6:	7bbb      	ldrb	r3, [r7, #14]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d11a      	bne.n	800d1f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d1bc:	7bba      	ldrb	r2, [r7, #14]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	32ae      	adds	r2, #174	; 0xae
 800d1c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1c6:	689b      	ldr	r3, [r3, #8]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d00f      	beq.n	800d1ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d1cc:	7bba      	ldrb	r2, [r7, #14]
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d1d4:	7bba      	ldrb	r2, [r7, #14]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	32ae      	adds	r2, #174	; 0xae
 800d1da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1de:	689b      	ldr	r3, [r3, #8]
 800d1e0:	6839      	ldr	r1, [r7, #0]
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	4798      	blx	r3
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d1ea:	e004      	b.n	800d1f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d1ec:	2303      	movs	r3, #3
 800d1ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d1f0:	e001      	b.n	800d1f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d1f2:	2303      	movs	r3, #3
 800d1f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	88db      	ldrh	r3, [r3, #6]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d110      	bne.n	800d220 <USBD_StdItfReq+0xc0>
 800d1fe:	7bfb      	ldrb	r3, [r7, #15]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d10d      	bne.n	800d220 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f000 fdc7 	bl	800dd98 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d20a:	e009      	b.n	800d220 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d20c:	6839      	ldr	r1, [r7, #0]
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 fcf7 	bl	800dc02 <USBD_CtlError>
          break;
 800d214:	e004      	b.n	800d220 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d216:	6839      	ldr	r1, [r7, #0]
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f000 fcf2 	bl	800dc02 <USBD_CtlError>
          break;
 800d21e:	e000      	b.n	800d222 <USBD_StdItfReq+0xc2>
          break;
 800d220:	bf00      	nop
      }
      break;
 800d222:	e004      	b.n	800d22e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d224:	6839      	ldr	r1, [r7, #0]
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f000 fceb 	bl	800dc02 <USBD_CtlError>
      break;
 800d22c:	bf00      	nop
  }

  return ret;
 800d22e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d230:	4618      	mov	r0, r3
 800d232:	3710      	adds	r7, #16
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d242:	2300      	movs	r3, #0
 800d244:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	889b      	ldrh	r3, [r3, #4]
 800d24a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d254:	2b40      	cmp	r3, #64	; 0x40
 800d256:	d007      	beq.n	800d268 <USBD_StdEPReq+0x30>
 800d258:	2b40      	cmp	r3, #64	; 0x40
 800d25a:	f200 817f 	bhi.w	800d55c <USBD_StdEPReq+0x324>
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d02a      	beq.n	800d2b8 <USBD_StdEPReq+0x80>
 800d262:	2b20      	cmp	r3, #32
 800d264:	f040 817a 	bne.w	800d55c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d268:	7bbb      	ldrb	r3, [r7, #14]
 800d26a:	4619      	mov	r1, r3
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f7ff fe83 	bl	800cf78 <USBD_CoreFindEP>
 800d272:	4603      	mov	r3, r0
 800d274:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d276:	7b7b      	ldrb	r3, [r7, #13]
 800d278:	2bff      	cmp	r3, #255	; 0xff
 800d27a:	f000 8174 	beq.w	800d566 <USBD_StdEPReq+0x32e>
 800d27e:	7b7b      	ldrb	r3, [r7, #13]
 800d280:	2b00      	cmp	r3, #0
 800d282:	f040 8170 	bne.w	800d566 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d286:	7b7a      	ldrb	r2, [r7, #13]
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d28e:	7b7a      	ldrb	r2, [r7, #13]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	32ae      	adds	r2, #174	; 0xae
 800d294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d298:	689b      	ldr	r3, [r3, #8]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	f000 8163 	beq.w	800d566 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d2a0:	7b7a      	ldrb	r2, [r7, #13]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	32ae      	adds	r2, #174	; 0xae
 800d2a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	6839      	ldr	r1, [r7, #0]
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	4798      	blx	r3
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d2b6:	e156      	b.n	800d566 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	785b      	ldrb	r3, [r3, #1]
 800d2bc:	2b03      	cmp	r3, #3
 800d2be:	d008      	beq.n	800d2d2 <USBD_StdEPReq+0x9a>
 800d2c0:	2b03      	cmp	r3, #3
 800d2c2:	f300 8145 	bgt.w	800d550 <USBD_StdEPReq+0x318>
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	f000 809b 	beq.w	800d402 <USBD_StdEPReq+0x1ca>
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	d03c      	beq.n	800d34a <USBD_StdEPReq+0x112>
 800d2d0:	e13e      	b.n	800d550 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	2b02      	cmp	r3, #2
 800d2dc:	d002      	beq.n	800d2e4 <USBD_StdEPReq+0xac>
 800d2de:	2b03      	cmp	r3, #3
 800d2e0:	d016      	beq.n	800d310 <USBD_StdEPReq+0xd8>
 800d2e2:	e02c      	b.n	800d33e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d2e4:	7bbb      	ldrb	r3, [r7, #14]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d00d      	beq.n	800d306 <USBD_StdEPReq+0xce>
 800d2ea:	7bbb      	ldrb	r3, [r7, #14]
 800d2ec:	2b80      	cmp	r3, #128	; 0x80
 800d2ee:	d00a      	beq.n	800d306 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d2f0:	7bbb      	ldrb	r3, [r7, #14]
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f002 fcbf 	bl	800fc78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d2fa:	2180      	movs	r1, #128	; 0x80
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f002 fcbb 	bl	800fc78 <USBD_LL_StallEP>
 800d302:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d304:	e020      	b.n	800d348 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d306:	6839      	ldr	r1, [r7, #0]
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 fc7a 	bl	800dc02 <USBD_CtlError>
              break;
 800d30e:	e01b      	b.n	800d348 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	885b      	ldrh	r3, [r3, #2]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d10e      	bne.n	800d336 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d318:	7bbb      	ldrb	r3, [r7, #14]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d00b      	beq.n	800d336 <USBD_StdEPReq+0xfe>
 800d31e:	7bbb      	ldrb	r3, [r7, #14]
 800d320:	2b80      	cmp	r3, #128	; 0x80
 800d322:	d008      	beq.n	800d336 <USBD_StdEPReq+0xfe>
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	88db      	ldrh	r3, [r3, #6]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d104      	bne.n	800d336 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d32c:	7bbb      	ldrb	r3, [r7, #14]
 800d32e:	4619      	mov	r1, r3
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f002 fca1 	bl	800fc78 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f000 fd2e 	bl	800dd98 <USBD_CtlSendStatus>

              break;
 800d33c:	e004      	b.n	800d348 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d33e:	6839      	ldr	r1, [r7, #0]
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 fc5e 	bl	800dc02 <USBD_CtlError>
              break;
 800d346:	bf00      	nop
          }
          break;
 800d348:	e107      	b.n	800d55a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d350:	b2db      	uxtb	r3, r3
 800d352:	2b02      	cmp	r3, #2
 800d354:	d002      	beq.n	800d35c <USBD_StdEPReq+0x124>
 800d356:	2b03      	cmp	r3, #3
 800d358:	d016      	beq.n	800d388 <USBD_StdEPReq+0x150>
 800d35a:	e04b      	b.n	800d3f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d35c:	7bbb      	ldrb	r3, [r7, #14]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d00d      	beq.n	800d37e <USBD_StdEPReq+0x146>
 800d362:	7bbb      	ldrb	r3, [r7, #14]
 800d364:	2b80      	cmp	r3, #128	; 0x80
 800d366:	d00a      	beq.n	800d37e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d368:	7bbb      	ldrb	r3, [r7, #14]
 800d36a:	4619      	mov	r1, r3
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f002 fc83 	bl	800fc78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d372:	2180      	movs	r1, #128	; 0x80
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f002 fc7f 	bl	800fc78 <USBD_LL_StallEP>
 800d37a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d37c:	e040      	b.n	800d400 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d37e:	6839      	ldr	r1, [r7, #0]
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f000 fc3e 	bl	800dc02 <USBD_CtlError>
              break;
 800d386:	e03b      	b.n	800d400 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	885b      	ldrh	r3, [r3, #2]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d136      	bne.n	800d3fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d390:	7bbb      	ldrb	r3, [r7, #14]
 800d392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d396:	2b00      	cmp	r3, #0
 800d398:	d004      	beq.n	800d3a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d39a:	7bbb      	ldrb	r3, [r7, #14]
 800d39c:	4619      	mov	r1, r3
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f002 fc89 	bl	800fcb6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f000 fcf7 	bl	800dd98 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d3aa:	7bbb      	ldrb	r3, [r7, #14]
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f7ff fde2 	bl	800cf78 <USBD_CoreFindEP>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d3b8:	7b7b      	ldrb	r3, [r7, #13]
 800d3ba:	2bff      	cmp	r3, #255	; 0xff
 800d3bc:	d01f      	beq.n	800d3fe <USBD_StdEPReq+0x1c6>
 800d3be:	7b7b      	ldrb	r3, [r7, #13]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d11c      	bne.n	800d3fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d3c4:	7b7a      	ldrb	r2, [r7, #13]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d3cc:	7b7a      	ldrb	r2, [r7, #13]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	32ae      	adds	r2, #174	; 0xae
 800d3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d010      	beq.n	800d3fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d3dc:	7b7a      	ldrb	r2, [r7, #13]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	32ae      	adds	r2, #174	; 0xae
 800d3e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3e6:	689b      	ldr	r3, [r3, #8]
 800d3e8:	6839      	ldr	r1, [r7, #0]
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	4798      	blx	r3
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d3f2:	e004      	b.n	800d3fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d3f4:	6839      	ldr	r1, [r7, #0]
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 fc03 	bl	800dc02 <USBD_CtlError>
              break;
 800d3fc:	e000      	b.n	800d400 <USBD_StdEPReq+0x1c8>
              break;
 800d3fe:	bf00      	nop
          }
          break;
 800d400:	e0ab      	b.n	800d55a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d408:	b2db      	uxtb	r3, r3
 800d40a:	2b02      	cmp	r3, #2
 800d40c:	d002      	beq.n	800d414 <USBD_StdEPReq+0x1dc>
 800d40e:	2b03      	cmp	r3, #3
 800d410:	d032      	beq.n	800d478 <USBD_StdEPReq+0x240>
 800d412:	e097      	b.n	800d544 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d414:	7bbb      	ldrb	r3, [r7, #14]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d007      	beq.n	800d42a <USBD_StdEPReq+0x1f2>
 800d41a:	7bbb      	ldrb	r3, [r7, #14]
 800d41c:	2b80      	cmp	r3, #128	; 0x80
 800d41e:	d004      	beq.n	800d42a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d420:	6839      	ldr	r1, [r7, #0]
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f000 fbed 	bl	800dc02 <USBD_CtlError>
                break;
 800d428:	e091      	b.n	800d54e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d42a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	da0b      	bge.n	800d44a <USBD_StdEPReq+0x212>
 800d432:	7bbb      	ldrb	r3, [r7, #14]
 800d434:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d438:	4613      	mov	r3, r2
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	4413      	add	r3, r2
 800d43e:	009b      	lsls	r3, r3, #2
 800d440:	3310      	adds	r3, #16
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	4413      	add	r3, r2
 800d446:	3304      	adds	r3, #4
 800d448:	e00b      	b.n	800d462 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d44a:	7bbb      	ldrb	r3, [r7, #14]
 800d44c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d450:	4613      	mov	r3, r2
 800d452:	009b      	lsls	r3, r3, #2
 800d454:	4413      	add	r3, r2
 800d456:	009b      	lsls	r3, r3, #2
 800d458:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d45c:	687a      	ldr	r2, [r7, #4]
 800d45e:	4413      	add	r3, r2
 800d460:	3304      	adds	r3, #4
 800d462:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	2200      	movs	r2, #0
 800d468:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	2202      	movs	r2, #2
 800d46e:	4619      	mov	r1, r3
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 fc37 	bl	800dce4 <USBD_CtlSendData>
              break;
 800d476:	e06a      	b.n	800d54e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d478:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	da11      	bge.n	800d4a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d480:	7bbb      	ldrb	r3, [r7, #14]
 800d482:	f003 020f 	and.w	r2, r3, #15
 800d486:	6879      	ldr	r1, [r7, #4]
 800d488:	4613      	mov	r3, r2
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	4413      	add	r3, r2
 800d48e:	009b      	lsls	r3, r3, #2
 800d490:	440b      	add	r3, r1
 800d492:	3324      	adds	r3, #36	; 0x24
 800d494:	881b      	ldrh	r3, [r3, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d117      	bne.n	800d4ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d49a:	6839      	ldr	r1, [r7, #0]
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f000 fbb0 	bl	800dc02 <USBD_CtlError>
                  break;
 800d4a2:	e054      	b.n	800d54e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d4a4:	7bbb      	ldrb	r3, [r7, #14]
 800d4a6:	f003 020f 	and.w	r2, r3, #15
 800d4aa:	6879      	ldr	r1, [r7, #4]
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	009b      	lsls	r3, r3, #2
 800d4b0:	4413      	add	r3, r2
 800d4b2:	009b      	lsls	r3, r3, #2
 800d4b4:	440b      	add	r3, r1
 800d4b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d4ba:	881b      	ldrh	r3, [r3, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d104      	bne.n	800d4ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d4c0:	6839      	ldr	r1, [r7, #0]
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f000 fb9d 	bl	800dc02 <USBD_CtlError>
                  break;
 800d4c8:	e041      	b.n	800d54e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d4ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	da0b      	bge.n	800d4ea <USBD_StdEPReq+0x2b2>
 800d4d2:	7bbb      	ldrb	r3, [r7, #14]
 800d4d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d4d8:	4613      	mov	r3, r2
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	4413      	add	r3, r2
 800d4de:	009b      	lsls	r3, r3, #2
 800d4e0:	3310      	adds	r3, #16
 800d4e2:	687a      	ldr	r2, [r7, #4]
 800d4e4:	4413      	add	r3, r2
 800d4e6:	3304      	adds	r3, #4
 800d4e8:	e00b      	b.n	800d502 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d4ea:	7bbb      	ldrb	r3, [r7, #14]
 800d4ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d4f0:	4613      	mov	r3, r2
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	4413      	add	r3, r2
 800d4f6:	009b      	lsls	r3, r3, #2
 800d4f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	4413      	add	r3, r2
 800d500:	3304      	adds	r3, #4
 800d502:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d504:	7bbb      	ldrb	r3, [r7, #14]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d002      	beq.n	800d510 <USBD_StdEPReq+0x2d8>
 800d50a:	7bbb      	ldrb	r3, [r7, #14]
 800d50c:	2b80      	cmp	r3, #128	; 0x80
 800d50e:	d103      	bne.n	800d518 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	2200      	movs	r2, #0
 800d514:	601a      	str	r2, [r3, #0]
 800d516:	e00e      	b.n	800d536 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d518:	7bbb      	ldrb	r3, [r7, #14]
 800d51a:	4619      	mov	r1, r3
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f002 fbe9 	bl	800fcf4 <USBD_LL_IsStallEP>
 800d522:	4603      	mov	r3, r0
 800d524:	2b00      	cmp	r3, #0
 800d526:	d003      	beq.n	800d530 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	2201      	movs	r2, #1
 800d52c:	601a      	str	r2, [r3, #0]
 800d52e:	e002      	b.n	800d536 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	2200      	movs	r2, #0
 800d534:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	2202      	movs	r2, #2
 800d53a:	4619      	mov	r1, r3
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f000 fbd1 	bl	800dce4 <USBD_CtlSendData>
              break;
 800d542:	e004      	b.n	800d54e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d544:	6839      	ldr	r1, [r7, #0]
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f000 fb5b 	bl	800dc02 <USBD_CtlError>
              break;
 800d54c:	bf00      	nop
          }
          break;
 800d54e:	e004      	b.n	800d55a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d550:	6839      	ldr	r1, [r7, #0]
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 fb55 	bl	800dc02 <USBD_CtlError>
          break;
 800d558:	bf00      	nop
      }
      break;
 800d55a:	e005      	b.n	800d568 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d55c:	6839      	ldr	r1, [r7, #0]
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 fb4f 	bl	800dc02 <USBD_CtlError>
      break;
 800d564:	e000      	b.n	800d568 <USBD_StdEPReq+0x330>
      break;
 800d566:	bf00      	nop
  }

  return ret;
 800d568:	7bfb      	ldrb	r3, [r7, #15]
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3710      	adds	r7, #16
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}
	...

0800d574 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b084      	sub	sp, #16
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d57e:	2300      	movs	r3, #0
 800d580:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d582:	2300      	movs	r3, #0
 800d584:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d586:	2300      	movs	r3, #0
 800d588:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	885b      	ldrh	r3, [r3, #2]
 800d58e:	0a1b      	lsrs	r3, r3, #8
 800d590:	b29b      	uxth	r3, r3
 800d592:	3b01      	subs	r3, #1
 800d594:	2b06      	cmp	r3, #6
 800d596:	f200 8128 	bhi.w	800d7ea <USBD_GetDescriptor+0x276>
 800d59a:	a201      	add	r2, pc, #4	; (adr r2, 800d5a0 <USBD_GetDescriptor+0x2c>)
 800d59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5a0:	0800d5bd 	.word	0x0800d5bd
 800d5a4:	0800d5d5 	.word	0x0800d5d5
 800d5a8:	0800d615 	.word	0x0800d615
 800d5ac:	0800d7eb 	.word	0x0800d7eb
 800d5b0:	0800d7eb 	.word	0x0800d7eb
 800d5b4:	0800d78b 	.word	0x0800d78b
 800d5b8:	0800d7b7 	.word	0x0800d7b7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	7c12      	ldrb	r2, [r2, #16]
 800d5c8:	f107 0108 	add.w	r1, r7, #8
 800d5cc:	4610      	mov	r0, r2
 800d5ce:	4798      	blx	r3
 800d5d0:	60f8      	str	r0, [r7, #12]
      break;
 800d5d2:	e112      	b.n	800d7fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	7c1b      	ldrb	r3, [r3, #16]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d10d      	bne.n	800d5f8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5e4:	f107 0208 	add.w	r2, r7, #8
 800d5e8:	4610      	mov	r0, r2
 800d5ea:	4798      	blx	r3
 800d5ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	3301      	adds	r3, #1
 800d5f2:	2202      	movs	r2, #2
 800d5f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d5f6:	e100      	b.n	800d7fa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d600:	f107 0208 	add.w	r2, r7, #8
 800d604:	4610      	mov	r0, r2
 800d606:	4798      	blx	r3
 800d608:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	3301      	adds	r3, #1
 800d60e:	2202      	movs	r2, #2
 800d610:	701a      	strb	r2, [r3, #0]
      break;
 800d612:	e0f2      	b.n	800d7fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	885b      	ldrh	r3, [r3, #2]
 800d618:	b2db      	uxtb	r3, r3
 800d61a:	2b05      	cmp	r3, #5
 800d61c:	f200 80ac 	bhi.w	800d778 <USBD_GetDescriptor+0x204>
 800d620:	a201      	add	r2, pc, #4	; (adr r2, 800d628 <USBD_GetDescriptor+0xb4>)
 800d622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d626:	bf00      	nop
 800d628:	0800d641 	.word	0x0800d641
 800d62c:	0800d675 	.word	0x0800d675
 800d630:	0800d6a9 	.word	0x0800d6a9
 800d634:	0800d6dd 	.word	0x0800d6dd
 800d638:	0800d711 	.word	0x0800d711
 800d63c:	0800d745 	.word	0x0800d745
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d00b      	beq.n	800d664 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d652:	685b      	ldr	r3, [r3, #4]
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	7c12      	ldrb	r2, [r2, #16]
 800d658:	f107 0108 	add.w	r1, r7, #8
 800d65c:	4610      	mov	r0, r2
 800d65e:	4798      	blx	r3
 800d660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d662:	e091      	b.n	800d788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d664:	6839      	ldr	r1, [r7, #0]
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 facb 	bl	800dc02 <USBD_CtlError>
            err++;
 800d66c:	7afb      	ldrb	r3, [r7, #11]
 800d66e:	3301      	adds	r3, #1
 800d670:	72fb      	strb	r3, [r7, #11]
          break;
 800d672:	e089      	b.n	800d788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d67a:	689b      	ldr	r3, [r3, #8]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d00b      	beq.n	800d698 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d686:	689b      	ldr	r3, [r3, #8]
 800d688:	687a      	ldr	r2, [r7, #4]
 800d68a:	7c12      	ldrb	r2, [r2, #16]
 800d68c:	f107 0108 	add.w	r1, r7, #8
 800d690:	4610      	mov	r0, r2
 800d692:	4798      	blx	r3
 800d694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d696:	e077      	b.n	800d788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d698:	6839      	ldr	r1, [r7, #0]
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 fab1 	bl	800dc02 <USBD_CtlError>
            err++;
 800d6a0:	7afb      	ldrb	r3, [r7, #11]
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	72fb      	strb	r3, [r7, #11]
          break;
 800d6a6:	e06f      	b.n	800d788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6ae:	68db      	ldr	r3, [r3, #12]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d00b      	beq.n	800d6cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6ba:	68db      	ldr	r3, [r3, #12]
 800d6bc:	687a      	ldr	r2, [r7, #4]
 800d6be:	7c12      	ldrb	r2, [r2, #16]
 800d6c0:	f107 0108 	add.w	r1, r7, #8
 800d6c4:	4610      	mov	r0, r2
 800d6c6:	4798      	blx	r3
 800d6c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6ca:	e05d      	b.n	800d788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d6cc:	6839      	ldr	r1, [r7, #0]
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f000 fa97 	bl	800dc02 <USBD_CtlError>
            err++;
 800d6d4:	7afb      	ldrb	r3, [r7, #11]
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	72fb      	strb	r3, [r7, #11]
          break;
 800d6da:	e055      	b.n	800d788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6e2:	691b      	ldr	r3, [r3, #16]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d00b      	beq.n	800d700 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6ee:	691b      	ldr	r3, [r3, #16]
 800d6f0:	687a      	ldr	r2, [r7, #4]
 800d6f2:	7c12      	ldrb	r2, [r2, #16]
 800d6f4:	f107 0108 	add.w	r1, r7, #8
 800d6f8:	4610      	mov	r0, r2
 800d6fa:	4798      	blx	r3
 800d6fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6fe:	e043      	b.n	800d788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d700:	6839      	ldr	r1, [r7, #0]
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f000 fa7d 	bl	800dc02 <USBD_CtlError>
            err++;
 800d708:	7afb      	ldrb	r3, [r7, #11]
 800d70a:	3301      	adds	r3, #1
 800d70c:	72fb      	strb	r3, [r7, #11]
          break;
 800d70e:	e03b      	b.n	800d788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d716:	695b      	ldr	r3, [r3, #20]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d00b      	beq.n	800d734 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d722:	695b      	ldr	r3, [r3, #20]
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	7c12      	ldrb	r2, [r2, #16]
 800d728:	f107 0108 	add.w	r1, r7, #8
 800d72c:	4610      	mov	r0, r2
 800d72e:	4798      	blx	r3
 800d730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d732:	e029      	b.n	800d788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d734:	6839      	ldr	r1, [r7, #0]
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 fa63 	bl	800dc02 <USBD_CtlError>
            err++;
 800d73c:	7afb      	ldrb	r3, [r7, #11]
 800d73e:	3301      	adds	r3, #1
 800d740:	72fb      	strb	r3, [r7, #11]
          break;
 800d742:	e021      	b.n	800d788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d74a:	699b      	ldr	r3, [r3, #24]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d00b      	beq.n	800d768 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d756:	699b      	ldr	r3, [r3, #24]
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	7c12      	ldrb	r2, [r2, #16]
 800d75c:	f107 0108 	add.w	r1, r7, #8
 800d760:	4610      	mov	r0, r2
 800d762:	4798      	blx	r3
 800d764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d766:	e00f      	b.n	800d788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d768:	6839      	ldr	r1, [r7, #0]
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f000 fa49 	bl	800dc02 <USBD_CtlError>
            err++;
 800d770:	7afb      	ldrb	r3, [r7, #11]
 800d772:	3301      	adds	r3, #1
 800d774:	72fb      	strb	r3, [r7, #11]
          break;
 800d776:	e007      	b.n	800d788 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d778:	6839      	ldr	r1, [r7, #0]
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f000 fa41 	bl	800dc02 <USBD_CtlError>
          err++;
 800d780:	7afb      	ldrb	r3, [r7, #11]
 800d782:	3301      	adds	r3, #1
 800d784:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d786:	bf00      	nop
      }
      break;
 800d788:	e037      	b.n	800d7fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	7c1b      	ldrb	r3, [r3, #16]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d109      	bne.n	800d7a6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d79a:	f107 0208 	add.w	r2, r7, #8
 800d79e:	4610      	mov	r0, r2
 800d7a0:	4798      	blx	r3
 800d7a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d7a4:	e029      	b.n	800d7fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d7a6:	6839      	ldr	r1, [r7, #0]
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f000 fa2a 	bl	800dc02 <USBD_CtlError>
        err++;
 800d7ae:	7afb      	ldrb	r3, [r7, #11]
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	72fb      	strb	r3, [r7, #11]
      break;
 800d7b4:	e021      	b.n	800d7fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	7c1b      	ldrb	r3, [r3, #16]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d10d      	bne.n	800d7da <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7c6:	f107 0208 	add.w	r2, r7, #8
 800d7ca:	4610      	mov	r0, r2
 800d7cc:	4798      	blx	r3
 800d7ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	2207      	movs	r2, #7
 800d7d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d7d8:	e00f      	b.n	800d7fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d7da:	6839      	ldr	r1, [r7, #0]
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f000 fa10 	bl	800dc02 <USBD_CtlError>
        err++;
 800d7e2:	7afb      	ldrb	r3, [r7, #11]
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	72fb      	strb	r3, [r7, #11]
      break;
 800d7e8:	e007      	b.n	800d7fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d7ea:	6839      	ldr	r1, [r7, #0]
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f000 fa08 	bl	800dc02 <USBD_CtlError>
      err++;
 800d7f2:	7afb      	ldrb	r3, [r7, #11]
 800d7f4:	3301      	adds	r3, #1
 800d7f6:	72fb      	strb	r3, [r7, #11]
      break;
 800d7f8:	bf00      	nop
  }

  if (err != 0U)
 800d7fa:	7afb      	ldrb	r3, [r7, #11]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d11e      	bne.n	800d83e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	88db      	ldrh	r3, [r3, #6]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d016      	beq.n	800d836 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d808:	893b      	ldrh	r3, [r7, #8]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d00e      	beq.n	800d82c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	88da      	ldrh	r2, [r3, #6]
 800d812:	893b      	ldrh	r3, [r7, #8]
 800d814:	4293      	cmp	r3, r2
 800d816:	bf28      	it	cs
 800d818:	4613      	movcs	r3, r2
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d81e:	893b      	ldrh	r3, [r7, #8]
 800d820:	461a      	mov	r2, r3
 800d822:	68f9      	ldr	r1, [r7, #12]
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f000 fa5d 	bl	800dce4 <USBD_CtlSendData>
 800d82a:	e009      	b.n	800d840 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d82c:	6839      	ldr	r1, [r7, #0]
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f000 f9e7 	bl	800dc02 <USBD_CtlError>
 800d834:	e004      	b.n	800d840 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 faae 	bl	800dd98 <USBD_CtlSendStatus>
 800d83c:	e000      	b.n	800d840 <USBD_GetDescriptor+0x2cc>
    return;
 800d83e:	bf00      	nop
  }
}
 800d840:	3710      	adds	r7, #16
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop

0800d848 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	889b      	ldrh	r3, [r3, #4]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d131      	bne.n	800d8be <USBD_SetAddress+0x76>
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	88db      	ldrh	r3, [r3, #6]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d12d      	bne.n	800d8be <USBD_SetAddress+0x76>
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	885b      	ldrh	r3, [r3, #2]
 800d866:	2b7f      	cmp	r3, #127	; 0x7f
 800d868:	d829      	bhi.n	800d8be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	885b      	ldrh	r3, [r3, #2]
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d874:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	2b03      	cmp	r3, #3
 800d880:	d104      	bne.n	800d88c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d882:	6839      	ldr	r1, [r7, #0]
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 f9bc 	bl	800dc02 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d88a:	e01d      	b.n	800d8c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	7bfa      	ldrb	r2, [r7, #15]
 800d890:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d894:	7bfb      	ldrb	r3, [r7, #15]
 800d896:	4619      	mov	r1, r3
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f002 fa57 	bl	800fd4c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f000 fa7a 	bl	800dd98 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d8a4:	7bfb      	ldrb	r3, [r7, #15]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d004      	beq.n	800d8b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2202      	movs	r2, #2
 800d8ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8b2:	e009      	b.n	800d8c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8bc:	e004      	b.n	800d8c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d8be:	6839      	ldr	r1, [r7, #0]
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f000 f99e 	bl	800dc02 <USBD_CtlError>
  }
}
 800d8c6:	bf00      	nop
 800d8c8:	bf00      	nop
 800d8ca:	3710      	adds	r7, #16
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	885b      	ldrh	r3, [r3, #2]
 800d8e2:	b2da      	uxtb	r2, r3
 800d8e4:	4b4e      	ldr	r3, [pc, #312]	; (800da20 <USBD_SetConfig+0x150>)
 800d8e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d8e8:	4b4d      	ldr	r3, [pc, #308]	; (800da20 <USBD_SetConfig+0x150>)
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d905      	bls.n	800d8fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d8f0:	6839      	ldr	r1, [r7, #0]
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 f985 	bl	800dc02 <USBD_CtlError>
    return USBD_FAIL;
 800d8f8:	2303      	movs	r3, #3
 800d8fa:	e08c      	b.n	800da16 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d902:	b2db      	uxtb	r3, r3
 800d904:	2b02      	cmp	r3, #2
 800d906:	d002      	beq.n	800d90e <USBD_SetConfig+0x3e>
 800d908:	2b03      	cmp	r3, #3
 800d90a:	d029      	beq.n	800d960 <USBD_SetConfig+0x90>
 800d90c:	e075      	b.n	800d9fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d90e:	4b44      	ldr	r3, [pc, #272]	; (800da20 <USBD_SetConfig+0x150>)
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d020      	beq.n	800d958 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d916:	4b42      	ldr	r3, [pc, #264]	; (800da20 <USBD_SetConfig+0x150>)
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	461a      	mov	r2, r3
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d920:	4b3f      	ldr	r3, [pc, #252]	; (800da20 <USBD_SetConfig+0x150>)
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	4619      	mov	r1, r3
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f7fe ffe7 	bl	800c8fa <USBD_SetClassConfig>
 800d92c:	4603      	mov	r3, r0
 800d92e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d930:	7bfb      	ldrb	r3, [r7, #15]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d008      	beq.n	800d948 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d936:	6839      	ldr	r1, [r7, #0]
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f000 f962 	bl	800dc02 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2202      	movs	r2, #2
 800d942:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d946:	e065      	b.n	800da14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f000 fa25 	bl	800dd98 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2203      	movs	r2, #3
 800d952:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d956:	e05d      	b.n	800da14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f000 fa1d 	bl	800dd98 <USBD_CtlSendStatus>
      break;
 800d95e:	e059      	b.n	800da14 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d960:	4b2f      	ldr	r3, [pc, #188]	; (800da20 <USBD_SetConfig+0x150>)
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d112      	bne.n	800d98e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2202      	movs	r2, #2
 800d96c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d970:	4b2b      	ldr	r3, [pc, #172]	; (800da20 <USBD_SetConfig+0x150>)
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	461a      	mov	r2, r3
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d97a:	4b29      	ldr	r3, [pc, #164]	; (800da20 <USBD_SetConfig+0x150>)
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	4619      	mov	r1, r3
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f7fe ffd6 	bl	800c932 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f000 fa06 	bl	800dd98 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d98c:	e042      	b.n	800da14 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d98e:	4b24      	ldr	r3, [pc, #144]	; (800da20 <USBD_SetConfig+0x150>)
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	461a      	mov	r2, r3
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	429a      	cmp	r2, r3
 800d99a:	d02a      	beq.n	800d9f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	685b      	ldr	r3, [r3, #4]
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	4619      	mov	r1, r3
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f7fe ffc4 	bl	800c932 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d9aa:	4b1d      	ldr	r3, [pc, #116]	; (800da20 <USBD_SetConfig+0x150>)
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d9b4:	4b1a      	ldr	r3, [pc, #104]	; (800da20 <USBD_SetConfig+0x150>)
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f7fe ff9d 	bl	800c8fa <USBD_SetClassConfig>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d9c4:	7bfb      	ldrb	r3, [r7, #15]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00f      	beq.n	800d9ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d9ca:	6839      	ldr	r1, [r7, #0]
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f000 f918 	bl	800dc02 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	b2db      	uxtb	r3, r3
 800d9d8:	4619      	mov	r1, r3
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f7fe ffa9 	bl	800c932 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2202      	movs	r2, #2
 800d9e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d9e8:	e014      	b.n	800da14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 f9d4 	bl	800dd98 <USBD_CtlSendStatus>
      break;
 800d9f0:	e010      	b.n	800da14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 f9d0 	bl	800dd98 <USBD_CtlSendStatus>
      break;
 800d9f8:	e00c      	b.n	800da14 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d9fa:	6839      	ldr	r1, [r7, #0]
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f000 f900 	bl	800dc02 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800da02:	4b07      	ldr	r3, [pc, #28]	; (800da20 <USBD_SetConfig+0x150>)
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	4619      	mov	r1, r3
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f7fe ff92 	bl	800c932 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800da0e:	2303      	movs	r3, #3
 800da10:	73fb      	strb	r3, [r7, #15]
      break;
 800da12:	bf00      	nop
  }

  return ret;
 800da14:	7bfb      	ldrb	r3, [r7, #15]
}
 800da16:	4618      	mov	r0, r3
 800da18:	3710      	adds	r7, #16
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	20000d18 	.word	0x20000d18

0800da24 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	88db      	ldrh	r3, [r3, #6]
 800da32:	2b01      	cmp	r3, #1
 800da34:	d004      	beq.n	800da40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800da36:	6839      	ldr	r1, [r7, #0]
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f000 f8e2 	bl	800dc02 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800da3e:	e023      	b.n	800da88 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da46:	b2db      	uxtb	r3, r3
 800da48:	2b02      	cmp	r3, #2
 800da4a:	dc02      	bgt.n	800da52 <USBD_GetConfig+0x2e>
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	dc03      	bgt.n	800da58 <USBD_GetConfig+0x34>
 800da50:	e015      	b.n	800da7e <USBD_GetConfig+0x5a>
 800da52:	2b03      	cmp	r3, #3
 800da54:	d00b      	beq.n	800da6e <USBD_GetConfig+0x4a>
 800da56:	e012      	b.n	800da7e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2200      	movs	r2, #0
 800da5c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	3308      	adds	r3, #8
 800da62:	2201      	movs	r2, #1
 800da64:	4619      	mov	r1, r3
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f000 f93c 	bl	800dce4 <USBD_CtlSendData>
        break;
 800da6c:	e00c      	b.n	800da88 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	3304      	adds	r3, #4
 800da72:	2201      	movs	r2, #1
 800da74:	4619      	mov	r1, r3
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 f934 	bl	800dce4 <USBD_CtlSendData>
        break;
 800da7c:	e004      	b.n	800da88 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800da7e:	6839      	ldr	r1, [r7, #0]
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f000 f8be 	bl	800dc02 <USBD_CtlError>
        break;
 800da86:	bf00      	nop
}
 800da88:	bf00      	nop
 800da8a:	3708      	adds	r7, #8
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	3b01      	subs	r3, #1
 800daa4:	2b02      	cmp	r3, #2
 800daa6:	d81e      	bhi.n	800dae6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	88db      	ldrh	r3, [r3, #6]
 800daac:	2b02      	cmp	r3, #2
 800daae:	d004      	beq.n	800daba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dab0:	6839      	ldr	r1, [r7, #0]
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f000 f8a5 	bl	800dc02 <USBD_CtlError>
        break;
 800dab8:	e01a      	b.n	800daf0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2201      	movs	r2, #1
 800dabe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d005      	beq.n	800dad6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	68db      	ldr	r3, [r3, #12]
 800dace:	f043 0202 	orr.w	r2, r3, #2
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	330c      	adds	r3, #12
 800dada:	2202      	movs	r2, #2
 800dadc:	4619      	mov	r1, r3
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f000 f900 	bl	800dce4 <USBD_CtlSendData>
      break;
 800dae4:	e004      	b.n	800daf0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dae6:	6839      	ldr	r1, [r7, #0]
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 f88a 	bl	800dc02 <USBD_CtlError>
      break;
 800daee:	bf00      	nop
  }
}
 800daf0:	bf00      	nop
 800daf2:	3708      	adds	r7, #8
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
 800db00:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	885b      	ldrh	r3, [r3, #2]
 800db06:	2b01      	cmp	r3, #1
 800db08:	d107      	bne.n	800db1a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2201      	movs	r2, #1
 800db0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f000 f940 	bl	800dd98 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800db18:	e013      	b.n	800db42 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	885b      	ldrh	r3, [r3, #2]
 800db1e:	2b02      	cmp	r3, #2
 800db20:	d10b      	bne.n	800db3a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	889b      	ldrh	r3, [r3, #4]
 800db26:	0a1b      	lsrs	r3, r3, #8
 800db28:	b29b      	uxth	r3, r3
 800db2a:	b2da      	uxtb	r2, r3
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f000 f930 	bl	800dd98 <USBD_CtlSendStatus>
}
 800db38:	e003      	b.n	800db42 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800db3a:	6839      	ldr	r1, [r7, #0]
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f000 f860 	bl	800dc02 <USBD_CtlError>
}
 800db42:	bf00      	nop
 800db44:	3708      	adds	r7, #8
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}

0800db4a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db4a:	b580      	push	{r7, lr}
 800db4c:	b082      	sub	sp, #8
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]
 800db52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	3b01      	subs	r3, #1
 800db5e:	2b02      	cmp	r3, #2
 800db60:	d80b      	bhi.n	800db7a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	885b      	ldrh	r3, [r3, #2]
 800db66:	2b01      	cmp	r3, #1
 800db68:	d10c      	bne.n	800db84 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2200      	movs	r2, #0
 800db6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 f910 	bl	800dd98 <USBD_CtlSendStatus>
      }
      break;
 800db78:	e004      	b.n	800db84 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800db7a:	6839      	ldr	r1, [r7, #0]
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f000 f840 	bl	800dc02 <USBD_CtlError>
      break;
 800db82:	e000      	b.n	800db86 <USBD_ClrFeature+0x3c>
      break;
 800db84:	bf00      	nop
  }
}
 800db86:	bf00      	nop
 800db88:	3708      	adds	r7, #8
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}

0800db8e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800db8e:	b580      	push	{r7, lr}
 800db90:	b084      	sub	sp, #16
 800db92:	af00      	add	r7, sp, #0
 800db94:	6078      	str	r0, [r7, #4]
 800db96:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	781a      	ldrb	r2, [r3, #0]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	3301      	adds	r3, #1
 800dba8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	781a      	ldrb	r2, [r3, #0]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dbb8:	68f8      	ldr	r0, [r7, #12]
 800dbba:	f7ff fa41 	bl	800d040 <SWAPBYTE>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	3301      	adds	r3, #1
 800dbca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	3301      	adds	r3, #1
 800dbd0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dbd2:	68f8      	ldr	r0, [r7, #12]
 800dbd4:	f7ff fa34 	bl	800d040 <SWAPBYTE>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	461a      	mov	r2, r3
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	3301      	adds	r3, #1
 800dbea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dbec:	68f8      	ldr	r0, [r7, #12]
 800dbee:	f7ff fa27 	bl	800d040 <SWAPBYTE>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	80da      	strh	r2, [r3, #6]
}
 800dbfa:	bf00      	nop
 800dbfc:	3710      	adds	r7, #16
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b082      	sub	sp, #8
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
 800dc0a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc0c:	2180      	movs	r1, #128	; 0x80
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f002 f832 	bl	800fc78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dc14:	2100      	movs	r1, #0
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f002 f82e 	bl	800fc78 <USBD_LL_StallEP>
}
 800dc1c:	bf00      	nop
 800dc1e:	3708      	adds	r7, #8
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b086      	sub	sp, #24
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	60f8      	str	r0, [r7, #12]
 800dc2c:	60b9      	str	r1, [r7, #8]
 800dc2e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dc30:	2300      	movs	r3, #0
 800dc32:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d036      	beq.n	800dca8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dc3e:	6938      	ldr	r0, [r7, #16]
 800dc40:	f000 f836 	bl	800dcb0 <USBD_GetLen>
 800dc44:	4603      	mov	r3, r0
 800dc46:	3301      	adds	r3, #1
 800dc48:	b29b      	uxth	r3, r3
 800dc4a:	005b      	lsls	r3, r3, #1
 800dc4c:	b29a      	uxth	r2, r3
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dc52:	7dfb      	ldrb	r3, [r7, #23]
 800dc54:	68ba      	ldr	r2, [r7, #8]
 800dc56:	4413      	add	r3, r2
 800dc58:	687a      	ldr	r2, [r7, #4]
 800dc5a:	7812      	ldrb	r2, [r2, #0]
 800dc5c:	701a      	strb	r2, [r3, #0]
  idx++;
 800dc5e:	7dfb      	ldrb	r3, [r7, #23]
 800dc60:	3301      	adds	r3, #1
 800dc62:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dc64:	7dfb      	ldrb	r3, [r7, #23]
 800dc66:	68ba      	ldr	r2, [r7, #8]
 800dc68:	4413      	add	r3, r2
 800dc6a:	2203      	movs	r2, #3
 800dc6c:	701a      	strb	r2, [r3, #0]
  idx++;
 800dc6e:	7dfb      	ldrb	r3, [r7, #23]
 800dc70:	3301      	adds	r3, #1
 800dc72:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dc74:	e013      	b.n	800dc9e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dc76:	7dfb      	ldrb	r3, [r7, #23]
 800dc78:	68ba      	ldr	r2, [r7, #8]
 800dc7a:	4413      	add	r3, r2
 800dc7c:	693a      	ldr	r2, [r7, #16]
 800dc7e:	7812      	ldrb	r2, [r2, #0]
 800dc80:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	3301      	adds	r3, #1
 800dc86:	613b      	str	r3, [r7, #16]
    idx++;
 800dc88:	7dfb      	ldrb	r3, [r7, #23]
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dc8e:	7dfb      	ldrb	r3, [r7, #23]
 800dc90:	68ba      	ldr	r2, [r7, #8]
 800dc92:	4413      	add	r3, r2
 800dc94:	2200      	movs	r2, #0
 800dc96:	701a      	strb	r2, [r3, #0]
    idx++;
 800dc98:	7dfb      	ldrb	r3, [r7, #23]
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d1e7      	bne.n	800dc76 <USBD_GetString+0x52>
 800dca6:	e000      	b.n	800dcaa <USBD_GetString+0x86>
    return;
 800dca8:	bf00      	nop
  }
}
 800dcaa:	3718      	adds	r7, #24
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}

0800dcb0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b085      	sub	sp, #20
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dcc0:	e005      	b.n	800dcce <USBD_GetLen+0x1e>
  {
    len++;
 800dcc2:	7bfb      	ldrb	r3, [r7, #15]
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	3301      	adds	r3, #1
 800dccc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d1f5      	bne.n	800dcc2 <USBD_GetLen+0x12>
  }

  return len;
 800dcd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3714      	adds	r7, #20
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce2:	4770      	bx	lr

0800dce4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b084      	sub	sp, #16
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	60f8      	str	r0, [r7, #12]
 800dcec:	60b9      	str	r1, [r7, #8]
 800dcee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2202      	movs	r2, #2
 800dcf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	687a      	ldr	r2, [r7, #4]
 800dd02:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	68ba      	ldr	r2, [r7, #8]
 800dd08:	2100      	movs	r1, #0
 800dd0a:	68f8      	ldr	r0, [r7, #12]
 800dd0c:	f002 f83d 	bl	800fd8a <USBD_LL_Transmit>

  return USBD_OK;
 800dd10:	2300      	movs	r3, #0
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3710      	adds	r7, #16
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}

0800dd1a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dd1a:	b580      	push	{r7, lr}
 800dd1c:	b084      	sub	sp, #16
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	60f8      	str	r0, [r7, #12]
 800dd22:	60b9      	str	r1, [r7, #8]
 800dd24:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	68ba      	ldr	r2, [r7, #8]
 800dd2a:	2100      	movs	r1, #0
 800dd2c:	68f8      	ldr	r0, [r7, #12]
 800dd2e:	f002 f82c 	bl	800fd8a <USBD_LL_Transmit>

  return USBD_OK;
 800dd32:	2300      	movs	r3, #0
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3710      	adds	r7, #16
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b084      	sub	sp, #16
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	60f8      	str	r0, [r7, #12]
 800dd44:	60b9      	str	r1, [r7, #8]
 800dd46:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2203      	movs	r2, #3
 800dd4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	687a      	ldr	r2, [r7, #4]
 800dd5c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	68ba      	ldr	r2, [r7, #8]
 800dd64:	2100      	movs	r1, #0
 800dd66:	68f8      	ldr	r0, [r7, #12]
 800dd68:	f002 f830 	bl	800fdcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd6c:	2300      	movs	r3, #0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3710      	adds	r7, #16
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}

0800dd76 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dd76:	b580      	push	{r7, lr}
 800dd78:	b084      	sub	sp, #16
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	60f8      	str	r0, [r7, #12]
 800dd7e:	60b9      	str	r1, [r7, #8]
 800dd80:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	68ba      	ldr	r2, [r7, #8]
 800dd86:	2100      	movs	r1, #0
 800dd88:	68f8      	ldr	r0, [r7, #12]
 800dd8a:	f002 f81f 	bl	800fdcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd8e:	2300      	movs	r3, #0
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3710      	adds	r7, #16
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2204      	movs	r2, #4
 800dda4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dda8:	2300      	movs	r3, #0
 800ddaa:	2200      	movs	r2, #0
 800ddac:	2100      	movs	r1, #0
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f001 ffeb 	bl	800fd8a <USBD_LL_Transmit>

  return USBD_OK;
 800ddb4:	2300      	movs	r3, #0
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3708      	adds	r7, #8
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}

0800ddbe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ddbe:	b580      	push	{r7, lr}
 800ddc0:	b082      	sub	sp, #8
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2205      	movs	r2, #5
 800ddca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ddce:	2300      	movs	r3, #0
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	2100      	movs	r1, #0
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f001 fff9 	bl	800fdcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ddda:	2300      	movs	r3, #0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <makeFreeRtosPriority>:
 800dde4:	b480      	push	{r7}
 800dde6:	b085      	sub	sp, #20
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	4603      	mov	r3, r0
 800ddec:	80fb      	strh	r3, [r7, #6]
 800ddee:	2300      	movs	r3, #0
 800ddf0:	60fb      	str	r3, [r7, #12]
 800ddf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ddf6:	2b84      	cmp	r3, #132	; 0x84
 800ddf8:	d005      	beq.n	800de06 <makeFreeRtosPriority+0x22>
 800ddfa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	4413      	add	r3, r2
 800de02:	3303      	adds	r3, #3
 800de04:	60fb      	str	r3, [r7, #12]
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	4618      	mov	r0, r3
 800de0a:	3714      	adds	r7, #20
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr

0800de14 <osKernelStart>:
 800de14:	b580      	push	{r7, lr}
 800de16:	af00      	add	r7, sp, #0
 800de18:	f000 fafe 	bl	800e418 <vTaskStartScheduler>
 800de1c:	2300      	movs	r3, #0
 800de1e:	4618      	mov	r0, r3
 800de20:	bd80      	pop	{r7, pc}

0800de22 <osThreadCreate>:
 800de22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de24:	b089      	sub	sp, #36	; 0x24
 800de26:	af04      	add	r7, sp, #16
 800de28:	6078      	str	r0, [r7, #4]
 800de2a:	6039      	str	r1, [r7, #0]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	695b      	ldr	r3, [r3, #20]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d020      	beq.n	800de76 <osThreadCreate+0x54>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	699b      	ldr	r3, [r3, #24]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d01c      	beq.n	800de76 <osThreadCreate+0x54>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	685c      	ldr	r4, [r3, #4]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681d      	ldr	r5, [r3, #0]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	691e      	ldr	r6, [r3, #16]
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800de4e:	4618      	mov	r0, r3
 800de50:	f7ff ffc8 	bl	800dde4 <makeFreeRtosPriority>
 800de54:	4601      	mov	r1, r0
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	695b      	ldr	r3, [r3, #20]
 800de5a:	687a      	ldr	r2, [r7, #4]
 800de5c:	6992      	ldr	r2, [r2, #24]
 800de5e:	9202      	str	r2, [sp, #8]
 800de60:	9301      	str	r3, [sp, #4]
 800de62:	9100      	str	r1, [sp, #0]
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	4632      	mov	r2, r6
 800de68:	4629      	mov	r1, r5
 800de6a:	4620      	mov	r0, r4
 800de6c:	f000 f8ed 	bl	800e04a <xTaskCreateStatic>
 800de70:	4603      	mov	r3, r0
 800de72:	60fb      	str	r3, [r7, #12]
 800de74:	e01c      	b.n	800deb0 <osThreadCreate+0x8e>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	685c      	ldr	r4, [r3, #4]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681d      	ldr	r5, [r3, #0]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	691b      	ldr	r3, [r3, #16]
 800de82:	b29e      	uxth	r6, r3
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7ff ffaa 	bl	800dde4 <makeFreeRtosPriority>
 800de90:	4602      	mov	r2, r0
 800de92:	f107 030c 	add.w	r3, r7, #12
 800de96:	9301      	str	r3, [sp, #4]
 800de98:	9200      	str	r2, [sp, #0]
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	4632      	mov	r2, r6
 800de9e:	4629      	mov	r1, r5
 800dea0:	4620      	mov	r0, r4
 800dea2:	f000 f92f 	bl	800e104 <xTaskCreate>
 800dea6:	4603      	mov	r3, r0
 800dea8:	2b01      	cmp	r3, #1
 800deaa:	d001      	beq.n	800deb0 <osThreadCreate+0x8e>
 800deac:	2300      	movs	r3, #0
 800deae:	e000      	b.n	800deb2 <osThreadCreate+0x90>
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	4618      	mov	r0, r3
 800deb4:	3714      	adds	r7, #20
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800deba <osDelay>:
 800deba:	b580      	push	{r7, lr}
 800debc:	b084      	sub	sp, #16
 800debe:	af00      	add	r7, sp, #0
 800dec0:	6078      	str	r0, [r7, #4]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	60fb      	str	r3, [r7, #12]
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d001      	beq.n	800ded0 <osDelay+0x16>
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	e000      	b.n	800ded2 <osDelay+0x18>
 800ded0:	2301      	movs	r3, #1
 800ded2:	4618      	mov	r0, r3
 800ded4:	f000 fa6c 	bl	800e3b0 <vTaskDelay>
 800ded8:	2300      	movs	r3, #0
 800deda:	4618      	mov	r0, r3
 800dedc:	3710      	adds	r7, #16
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}

0800dee2 <vListInitialise>:
 800dee2:	b480      	push	{r7}
 800dee4:	b083      	sub	sp, #12
 800dee6:	af00      	add	r7, sp, #0
 800dee8:	6078      	str	r0, [r7, #4]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f103 0208 	add.w	r2, r3, #8
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	605a      	str	r2, [r3, #4]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f04f 32ff 	mov.w	r2, #4294967295
 800defa:	609a      	str	r2, [r3, #8]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f103 0208 	add.w	r2, r3, #8
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	60da      	str	r2, [r3, #12]
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f103 0208 	add.w	r2, r3, #8
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	611a      	str	r2, [r3, #16]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2200      	movs	r2, #0
 800df14:	601a      	str	r2, [r3, #0]
 800df16:	bf00      	nop
 800df18:	370c      	adds	r7, #12
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr

0800df22 <vListInitialiseItem>:
 800df22:	b480      	push	{r7}
 800df24:	b083      	sub	sp, #12
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2200      	movs	r2, #0
 800df2e:	611a      	str	r2, [r3, #16]
 800df30:	bf00      	nop
 800df32:	370c      	adds	r7, #12
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr

0800df3c <vListInsertEnd>:
 800df3c:	b480      	push	{r7}
 800df3e:	b085      	sub	sp, #20
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	6039      	str	r1, [r7, #0]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	60fb      	str	r3, [r7, #12]
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	68fa      	ldr	r2, [r7, #12]
 800df50:	605a      	str	r2, [r3, #4]
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	689a      	ldr	r2, [r3, #8]
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	609a      	str	r2, [r3, #8]
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	689b      	ldr	r3, [r3, #8]
 800df5e:	683a      	ldr	r2, [r7, #0]
 800df60:	605a      	str	r2, [r3, #4]
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	683a      	ldr	r2, [r7, #0]
 800df66:	609a      	str	r2, [r3, #8]
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	687a      	ldr	r2, [r7, #4]
 800df6c:	611a      	str	r2, [r3, #16]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	1c5a      	adds	r2, r3, #1
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	601a      	str	r2, [r3, #0]
 800df78:	bf00      	nop
 800df7a:	3714      	adds	r7, #20
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr

0800df84 <vListInsert>:
 800df84:	b480      	push	{r7}
 800df86:	b085      	sub	sp, #20
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	6039      	str	r1, [r7, #0]
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	60bb      	str	r3, [r7, #8]
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df9a:	d103      	bne.n	800dfa4 <vListInsert+0x20>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	691b      	ldr	r3, [r3, #16]
 800dfa0:	60fb      	str	r3, [r7, #12]
 800dfa2:	e00c      	b.n	800dfbe <vListInsert+0x3a>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	3308      	adds	r3, #8
 800dfa8:	60fb      	str	r3, [r7, #12]
 800dfaa:	e002      	b.n	800dfb2 <vListInsert+0x2e>
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	685b      	ldr	r3, [r3, #4]
 800dfb0:	60fb      	str	r3, [r7, #12]
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	685b      	ldr	r3, [r3, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	68ba      	ldr	r2, [r7, #8]
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d2f6      	bcs.n	800dfac <vListInsert+0x28>
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	685a      	ldr	r2, [r3, #4]
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	605a      	str	r2, [r3, #4]
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	683a      	ldr	r2, [r7, #0]
 800dfcc:	609a      	str	r2, [r3, #8]
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	68fa      	ldr	r2, [r7, #12]
 800dfd2:	609a      	str	r2, [r3, #8]
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	683a      	ldr	r2, [r7, #0]
 800dfd8:	605a      	str	r2, [r3, #4]
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	687a      	ldr	r2, [r7, #4]
 800dfde:	611a      	str	r2, [r3, #16]
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	1c5a      	adds	r2, r3, #1
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	601a      	str	r2, [r3, #0]
 800dfea:	bf00      	nop
 800dfec:	3714      	adds	r7, #20
 800dfee:	46bd      	mov	sp, r7
 800dff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff4:	4770      	bx	lr

0800dff6 <uxListRemove>:
 800dff6:	b480      	push	{r7}
 800dff8:	b085      	sub	sp, #20
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	6078      	str	r0, [r7, #4]
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	691b      	ldr	r3, [r3, #16]
 800e002:	60fb      	str	r3, [r7, #12]
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	685b      	ldr	r3, [r3, #4]
 800e008:	687a      	ldr	r2, [r7, #4]
 800e00a:	6892      	ldr	r2, [r2, #8]
 800e00c:	609a      	str	r2, [r3, #8]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	689b      	ldr	r3, [r3, #8]
 800e012:	687a      	ldr	r2, [r7, #4]
 800e014:	6852      	ldr	r2, [r2, #4]
 800e016:	605a      	str	r2, [r3, #4]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	687a      	ldr	r2, [r7, #4]
 800e01e:	429a      	cmp	r2, r3
 800e020:	d103      	bne.n	800e02a <uxListRemove+0x34>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	689a      	ldr	r2, [r3, #8]
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	605a      	str	r2, [r3, #4]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2200      	movs	r2, #0
 800e02e:	611a      	str	r2, [r3, #16]
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	1e5a      	subs	r2, r3, #1
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	601a      	str	r2, [r3, #0]
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	4618      	mov	r0, r3
 800e040:	3714      	adds	r7, #20
 800e042:	46bd      	mov	sp, r7
 800e044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e048:	4770      	bx	lr

0800e04a <xTaskCreateStatic>:
 800e04a:	b580      	push	{r7, lr}
 800e04c:	b08e      	sub	sp, #56	; 0x38
 800e04e:	af04      	add	r7, sp, #16
 800e050:	60f8      	str	r0, [r7, #12]
 800e052:	60b9      	str	r1, [r7, #8]
 800e054:	607a      	str	r2, [r7, #4]
 800e056:	603b      	str	r3, [r7, #0]
 800e058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d10a      	bne.n	800e074 <xTaskCreateStatic+0x2a>
 800e05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e062:	f383 8811 	msr	BASEPRI, r3
 800e066:	f3bf 8f6f 	isb	sy
 800e06a:	f3bf 8f4f 	dsb	sy
 800e06e:	623b      	str	r3, [r7, #32]
 800e070:	bf00      	nop
 800e072:	e7fe      	b.n	800e072 <xTaskCreateStatic+0x28>
 800e074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e076:	2b00      	cmp	r3, #0
 800e078:	d10a      	bne.n	800e090 <xTaskCreateStatic+0x46>
 800e07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e07e:	f383 8811 	msr	BASEPRI, r3
 800e082:	f3bf 8f6f 	isb	sy
 800e086:	f3bf 8f4f 	dsb	sy
 800e08a:	61fb      	str	r3, [r7, #28]
 800e08c:	bf00      	nop
 800e08e:	e7fe      	b.n	800e08e <xTaskCreateStatic+0x44>
 800e090:	23b8      	movs	r3, #184	; 0xb8
 800e092:	613b      	str	r3, [r7, #16]
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	2bb8      	cmp	r3, #184	; 0xb8
 800e098:	d00a      	beq.n	800e0b0 <xTaskCreateStatic+0x66>
 800e09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e09e:	f383 8811 	msr	BASEPRI, r3
 800e0a2:	f3bf 8f6f 	isb	sy
 800e0a6:	f3bf 8f4f 	dsb	sy
 800e0aa:	61bb      	str	r3, [r7, #24]
 800e0ac:	bf00      	nop
 800e0ae:	e7fe      	b.n	800e0ae <xTaskCreateStatic+0x64>
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d01e      	beq.n	800e0f6 <xTaskCreateStatic+0xac>
 800e0b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d01b      	beq.n	800e0f6 <xTaskCreateStatic+0xac>
 800e0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c0:	627b      	str	r3, [r7, #36]	; 0x24
 800e0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0c6:	631a      	str	r2, [r3, #48]	; 0x30
 800e0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ca:	2202      	movs	r2, #2
 800e0cc:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	9303      	str	r3, [sp, #12]
 800e0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d6:	9302      	str	r3, [sp, #8]
 800e0d8:	f107 0314 	add.w	r3, r7, #20
 800e0dc:	9301      	str	r3, [sp, #4]
 800e0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e0:	9300      	str	r3, [sp, #0]
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	68b9      	ldr	r1, [r7, #8]
 800e0e8:	68f8      	ldr	r0, [r7, #12]
 800e0ea:	f000 f851 	bl	800e190 <prvInitialiseNewTask>
 800e0ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0f0:	f000 f8f4 	bl	800e2dc <prvAddNewTaskToReadyList>
 800e0f4:	e001      	b.n	800e0fa <xTaskCreateStatic+0xb0>
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	617b      	str	r3, [r7, #20]
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3728      	adds	r7, #40	; 0x28
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <xTaskCreate>:
 800e104:	b580      	push	{r7, lr}
 800e106:	b08c      	sub	sp, #48	; 0x30
 800e108:	af04      	add	r7, sp, #16
 800e10a:	60f8      	str	r0, [r7, #12]
 800e10c:	60b9      	str	r1, [r7, #8]
 800e10e:	603b      	str	r3, [r7, #0]
 800e110:	4613      	mov	r3, r2
 800e112:	80fb      	strh	r3, [r7, #6]
 800e114:	88fb      	ldrh	r3, [r7, #6]
 800e116:	009b      	lsls	r3, r3, #2
 800e118:	4618      	mov	r0, r3
 800e11a:	f000 ff2d 	bl	800ef78 <pvPortMalloc>
 800e11e:	6178      	str	r0, [r7, #20]
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d00e      	beq.n	800e144 <xTaskCreate+0x40>
 800e126:	20b8      	movs	r0, #184	; 0xb8
 800e128:	f000 ff26 	bl	800ef78 <pvPortMalloc>
 800e12c:	61f8      	str	r0, [r7, #28]
 800e12e:	69fb      	ldr	r3, [r7, #28]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d003      	beq.n	800e13c <xTaskCreate+0x38>
 800e134:	69fb      	ldr	r3, [r7, #28]
 800e136:	697a      	ldr	r2, [r7, #20]
 800e138:	631a      	str	r2, [r3, #48]	; 0x30
 800e13a:	e005      	b.n	800e148 <xTaskCreate+0x44>
 800e13c:	6978      	ldr	r0, [r7, #20]
 800e13e:	f000 ffeb 	bl	800f118 <vPortFree>
 800e142:	e001      	b.n	800e148 <xTaskCreate+0x44>
 800e144:	2300      	movs	r3, #0
 800e146:	61fb      	str	r3, [r7, #28]
 800e148:	69fb      	ldr	r3, [r7, #28]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d017      	beq.n	800e17e <xTaskCreate+0x7a>
 800e14e:	69fb      	ldr	r3, [r7, #28]
 800e150:	2200      	movs	r2, #0
 800e152:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 800e156:	88fa      	ldrh	r2, [r7, #6]
 800e158:	2300      	movs	r3, #0
 800e15a:	9303      	str	r3, [sp, #12]
 800e15c:	69fb      	ldr	r3, [r7, #28]
 800e15e:	9302      	str	r3, [sp, #8]
 800e160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e162:	9301      	str	r3, [sp, #4]
 800e164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e166:	9300      	str	r3, [sp, #0]
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	68b9      	ldr	r1, [r7, #8]
 800e16c:	68f8      	ldr	r0, [r7, #12]
 800e16e:	f000 f80f 	bl	800e190 <prvInitialiseNewTask>
 800e172:	69f8      	ldr	r0, [r7, #28]
 800e174:	f000 f8b2 	bl	800e2dc <prvAddNewTaskToReadyList>
 800e178:	2301      	movs	r3, #1
 800e17a:	61bb      	str	r3, [r7, #24]
 800e17c:	e002      	b.n	800e184 <xTaskCreate+0x80>
 800e17e:	f04f 33ff 	mov.w	r3, #4294967295
 800e182:	61bb      	str	r3, [r7, #24]
 800e184:	69bb      	ldr	r3, [r7, #24]
 800e186:	4618      	mov	r0, r3
 800e188:	3720      	adds	r7, #32
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
	...

0800e190 <prvInitialiseNewTask>:
 800e190:	b580      	push	{r7, lr}
 800e192:	b088      	sub	sp, #32
 800e194:	af00      	add	r7, sp, #0
 800e196:	60f8      	str	r0, [r7, #12]
 800e198:	60b9      	str	r1, [r7, #8]
 800e19a:	607a      	str	r2, [r7, #4]
 800e19c:	603b      	str	r3, [r7, #0]
 800e19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	21a5      	movs	r1, #165	; 0xa5
 800e1aa:	f001 ffd2 	bl	8010152 <memset>
 800e1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e1b8:	3b01      	subs	r3, #1
 800e1ba:	009b      	lsls	r3, r3, #2
 800e1bc:	4413      	add	r3, r2
 800e1be:	61bb      	str	r3, [r7, #24]
 800e1c0:	69bb      	ldr	r3, [r7, #24]
 800e1c2:	f023 0307 	bic.w	r3, r3, #7
 800e1c6:	61bb      	str	r3, [r7, #24]
 800e1c8:	69bb      	ldr	r3, [r7, #24]
 800e1ca:	f003 0307 	and.w	r3, r3, #7
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d00a      	beq.n	800e1e8 <prvInitialiseNewTask+0x58>
 800e1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d6:	f383 8811 	msr	BASEPRI, r3
 800e1da:	f3bf 8f6f 	isb	sy
 800e1de:	f3bf 8f4f 	dsb	sy
 800e1e2:	617b      	str	r3, [r7, #20]
 800e1e4:	bf00      	nop
 800e1e6:	e7fe      	b.n	800e1e6 <prvInitialiseNewTask+0x56>
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d01f      	beq.n	800e22e <prvInitialiseNewTask+0x9e>
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	61fb      	str	r3, [r7, #28]
 800e1f2:	e012      	b.n	800e21a <prvInitialiseNewTask+0x8a>
 800e1f4:	68ba      	ldr	r2, [r7, #8]
 800e1f6:	69fb      	ldr	r3, [r7, #28]
 800e1f8:	4413      	add	r3, r2
 800e1fa:	7819      	ldrb	r1, [r3, #0]
 800e1fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1fe:	69fb      	ldr	r3, [r7, #28]
 800e200:	4413      	add	r3, r2
 800e202:	3334      	adds	r3, #52	; 0x34
 800e204:	460a      	mov	r2, r1
 800e206:	701a      	strb	r2, [r3, #0]
 800e208:	68ba      	ldr	r2, [r7, #8]
 800e20a:	69fb      	ldr	r3, [r7, #28]
 800e20c:	4413      	add	r3, r2
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d006      	beq.n	800e222 <prvInitialiseNewTask+0x92>
 800e214:	69fb      	ldr	r3, [r7, #28]
 800e216:	3301      	adds	r3, #1
 800e218:	61fb      	str	r3, [r7, #28]
 800e21a:	69fb      	ldr	r3, [r7, #28]
 800e21c:	2b13      	cmp	r3, #19
 800e21e:	d9e9      	bls.n	800e1f4 <prvInitialiseNewTask+0x64>
 800e220:	e000      	b.n	800e224 <prvInitialiseNewTask+0x94>
 800e222:	bf00      	nop
 800e224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e226:	2200      	movs	r2, #0
 800e228:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800e22c:	e003      	b.n	800e236 <prvInitialiseNewTask+0xa6>
 800e22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e230:	2200      	movs	r2, #0
 800e232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800e236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e238:	2b06      	cmp	r3, #6
 800e23a:	d901      	bls.n	800e240 <prvInitialiseNewTask+0xb0>
 800e23c:	2306      	movs	r3, #6
 800e23e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e244:	62da      	str	r2, [r3, #44]	; 0x2c
 800e246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e24a:	649a      	str	r2, [r3, #72]	; 0x48
 800e24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e24e:	2200      	movs	r2, #0
 800e250:	64da      	str	r2, [r3, #76]	; 0x4c
 800e252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e254:	3304      	adds	r3, #4
 800e256:	4618      	mov	r0, r3
 800e258:	f7ff fe63 	bl	800df22 <vListInitialiseItem>
 800e25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25e:	3318      	adds	r3, #24
 800e260:	4618      	mov	r0, r3
 800e262:	f7ff fe5e 	bl	800df22 <vListInitialiseItem>
 800e266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e26a:	611a      	str	r2, [r3, #16]
 800e26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26e:	f1c3 0207 	rsb	r2, r3, #7
 800e272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e274:	619a      	str	r2, [r3, #24]
 800e276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e27a:	625a      	str	r2, [r3, #36]	; 0x24
 800e27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e27e:	2200      	movs	r2, #0
 800e280:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800e284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e286:	2200      	movs	r2, #0
 800e288:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 800e28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e28e:	3350      	adds	r3, #80	; 0x50
 800e290:	2260      	movs	r2, #96	; 0x60
 800e292:	2100      	movs	r1, #0
 800e294:	4618      	mov	r0, r3
 800e296:	f001 ff5c 	bl	8010152 <memset>
 800e29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e29c:	4a0c      	ldr	r2, [pc, #48]	; (800e2d0 <prvInitialiseNewTask+0x140>)
 800e29e:	655a      	str	r2, [r3, #84]	; 0x54
 800e2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a2:	4a0c      	ldr	r2, [pc, #48]	; (800e2d4 <prvInitialiseNewTask+0x144>)
 800e2a4:	659a      	str	r2, [r3, #88]	; 0x58
 800e2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a8:	4a0b      	ldr	r2, [pc, #44]	; (800e2d8 <prvInitialiseNewTask+0x148>)
 800e2aa:	65da      	str	r2, [r3, #92]	; 0x5c
 800e2ac:	683a      	ldr	r2, [r7, #0]
 800e2ae:	68f9      	ldr	r1, [r7, #12]
 800e2b0:	69b8      	ldr	r0, [r7, #24]
 800e2b2:	f000 fc4f 	bl	800eb54 <pxPortInitialiseStack>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ba:	601a      	str	r2, [r3, #0]
 800e2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d002      	beq.n	800e2c8 <prvInitialiseNewTask+0x138>
 800e2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2c6:	601a      	str	r2, [r3, #0]
 800e2c8:	bf00      	nop
 800e2ca:	3720      	adds	r7, #32
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	0801481c 	.word	0x0801481c
 800e2d4:	0801483c 	.word	0x0801483c
 800e2d8:	080147fc 	.word	0x080147fc

0800e2dc <prvAddNewTaskToReadyList>:
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	f000 fd66 	bl	800edb4 <vPortEnterCritical>
 800e2e8:	4b2a      	ldr	r3, [pc, #168]	; (800e394 <prvAddNewTaskToReadyList+0xb8>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	4a29      	ldr	r2, [pc, #164]	; (800e394 <prvAddNewTaskToReadyList+0xb8>)
 800e2f0:	6013      	str	r3, [r2, #0]
 800e2f2:	4b29      	ldr	r3, [pc, #164]	; (800e398 <prvAddNewTaskToReadyList+0xbc>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d109      	bne.n	800e30e <prvAddNewTaskToReadyList+0x32>
 800e2fa:	4a27      	ldr	r2, [pc, #156]	; (800e398 <prvAddNewTaskToReadyList+0xbc>)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6013      	str	r3, [r2, #0]
 800e300:	4b24      	ldr	r3, [pc, #144]	; (800e394 <prvAddNewTaskToReadyList+0xb8>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2b01      	cmp	r3, #1
 800e306:	d110      	bne.n	800e32a <prvAddNewTaskToReadyList+0x4e>
 800e308:	f000 fafc 	bl	800e904 <prvInitialiseTaskLists>
 800e30c:	e00d      	b.n	800e32a <prvAddNewTaskToReadyList+0x4e>
 800e30e:	4b23      	ldr	r3, [pc, #140]	; (800e39c <prvAddNewTaskToReadyList+0xc0>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d109      	bne.n	800e32a <prvAddNewTaskToReadyList+0x4e>
 800e316:	4b20      	ldr	r3, [pc, #128]	; (800e398 <prvAddNewTaskToReadyList+0xbc>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e320:	429a      	cmp	r2, r3
 800e322:	d802      	bhi.n	800e32a <prvAddNewTaskToReadyList+0x4e>
 800e324:	4a1c      	ldr	r2, [pc, #112]	; (800e398 <prvAddNewTaskToReadyList+0xbc>)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6013      	str	r3, [r2, #0]
 800e32a:	4b1d      	ldr	r3, [pc, #116]	; (800e3a0 <prvAddNewTaskToReadyList+0xc4>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	3301      	adds	r3, #1
 800e330:	4a1b      	ldr	r2, [pc, #108]	; (800e3a0 <prvAddNewTaskToReadyList+0xc4>)
 800e332:	6013      	str	r3, [r2, #0]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e338:	2201      	movs	r2, #1
 800e33a:	409a      	lsls	r2, r3
 800e33c:	4b19      	ldr	r3, [pc, #100]	; (800e3a4 <prvAddNewTaskToReadyList+0xc8>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4313      	orrs	r3, r2
 800e342:	4a18      	ldr	r2, [pc, #96]	; (800e3a4 <prvAddNewTaskToReadyList+0xc8>)
 800e344:	6013      	str	r3, [r2, #0]
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e34a:	4613      	mov	r3, r2
 800e34c:	009b      	lsls	r3, r3, #2
 800e34e:	4413      	add	r3, r2
 800e350:	009b      	lsls	r3, r3, #2
 800e352:	4a15      	ldr	r2, [pc, #84]	; (800e3a8 <prvAddNewTaskToReadyList+0xcc>)
 800e354:	441a      	add	r2, r3
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	3304      	adds	r3, #4
 800e35a:	4619      	mov	r1, r3
 800e35c:	4610      	mov	r0, r2
 800e35e:	f7ff fded 	bl	800df3c <vListInsertEnd>
 800e362:	f000 fd57 	bl	800ee14 <vPortExitCritical>
 800e366:	4b0d      	ldr	r3, [pc, #52]	; (800e39c <prvAddNewTaskToReadyList+0xc0>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d00e      	beq.n	800e38c <prvAddNewTaskToReadyList+0xb0>
 800e36e:	4b0a      	ldr	r3, [pc, #40]	; (800e398 <prvAddNewTaskToReadyList+0xbc>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e378:	429a      	cmp	r2, r3
 800e37a:	d207      	bcs.n	800e38c <prvAddNewTaskToReadyList+0xb0>
 800e37c:	4b0b      	ldr	r3, [pc, #44]	; (800e3ac <prvAddNewTaskToReadyList+0xd0>)
 800e37e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e382:	601a      	str	r2, [r3, #0]
 800e384:	f3bf 8f4f 	dsb	sy
 800e388:	f3bf 8f6f 	isb	sy
 800e38c:	bf00      	nop
 800e38e:	3708      	adds	r7, #8
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}
 800e394:	20000e1c 	.word	0x20000e1c
 800e398:	20000d1c 	.word	0x20000d1c
 800e39c:	20000e28 	.word	0x20000e28
 800e3a0:	20000e38 	.word	0x20000e38
 800e3a4:	20000e24 	.word	0x20000e24
 800e3a8:	20000d20 	.word	0x20000d20
 800e3ac:	e000ed04 	.word	0xe000ed04

0800e3b0 <vTaskDelay>:
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b084      	sub	sp, #16
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	60fb      	str	r3, [r7, #12]
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d017      	beq.n	800e3f2 <vTaskDelay+0x42>
 800e3c2:	4b13      	ldr	r3, [pc, #76]	; (800e410 <vTaskDelay+0x60>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d00a      	beq.n	800e3e0 <vTaskDelay+0x30>
 800e3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ce:	f383 8811 	msr	BASEPRI, r3
 800e3d2:	f3bf 8f6f 	isb	sy
 800e3d6:	f3bf 8f4f 	dsb	sy
 800e3da:	60bb      	str	r3, [r7, #8]
 800e3dc:	bf00      	nop
 800e3de:	e7fe      	b.n	800e3de <vTaskDelay+0x2e>
 800e3e0:	f000 f884 	bl	800e4ec <vTaskSuspendAll>
 800e3e4:	2100      	movs	r1, #0
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f000 fb4e 	bl	800ea88 <prvAddCurrentTaskToDelayedList>
 800e3ec:	f000 f88c 	bl	800e508 <xTaskResumeAll>
 800e3f0:	60f8      	str	r0, [r7, #12]
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d107      	bne.n	800e408 <vTaskDelay+0x58>
 800e3f8:	4b06      	ldr	r3, [pc, #24]	; (800e414 <vTaskDelay+0x64>)
 800e3fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3fe:	601a      	str	r2, [r3, #0]
 800e400:	f3bf 8f4f 	dsb	sy
 800e404:	f3bf 8f6f 	isb	sy
 800e408:	bf00      	nop
 800e40a:	3710      	adds	r7, #16
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	20000e44 	.word	0x20000e44
 800e414:	e000ed04 	.word	0xe000ed04

0800e418 <vTaskStartScheduler>:
 800e418:	b580      	push	{r7, lr}
 800e41a:	b08a      	sub	sp, #40	; 0x28
 800e41c:	af04      	add	r7, sp, #16
 800e41e:	2300      	movs	r3, #0
 800e420:	60bb      	str	r3, [r7, #8]
 800e422:	2300      	movs	r3, #0
 800e424:	607b      	str	r3, [r7, #4]
 800e426:	463a      	mov	r2, r7
 800e428:	1d39      	adds	r1, r7, #4
 800e42a:	f107 0308 	add.w	r3, r7, #8
 800e42e:	4618      	mov	r0, r3
 800e430:	f7f2 ff6a 	bl	8001308 <vApplicationGetIdleTaskMemory>
 800e434:	6839      	ldr	r1, [r7, #0]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	68ba      	ldr	r2, [r7, #8]
 800e43a:	9202      	str	r2, [sp, #8]
 800e43c:	9301      	str	r3, [sp, #4]
 800e43e:	2300      	movs	r3, #0
 800e440:	9300      	str	r3, [sp, #0]
 800e442:	2300      	movs	r3, #0
 800e444:	460a      	mov	r2, r1
 800e446:	4921      	ldr	r1, [pc, #132]	; (800e4cc <vTaskStartScheduler+0xb4>)
 800e448:	4821      	ldr	r0, [pc, #132]	; (800e4d0 <vTaskStartScheduler+0xb8>)
 800e44a:	f7ff fdfe 	bl	800e04a <xTaskCreateStatic>
 800e44e:	4603      	mov	r3, r0
 800e450:	4a20      	ldr	r2, [pc, #128]	; (800e4d4 <vTaskStartScheduler+0xbc>)
 800e452:	6013      	str	r3, [r2, #0]
 800e454:	4b1f      	ldr	r3, [pc, #124]	; (800e4d4 <vTaskStartScheduler+0xbc>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d002      	beq.n	800e462 <vTaskStartScheduler+0x4a>
 800e45c:	2301      	movs	r3, #1
 800e45e:	617b      	str	r3, [r7, #20]
 800e460:	e001      	b.n	800e466 <vTaskStartScheduler+0x4e>
 800e462:	2300      	movs	r3, #0
 800e464:	617b      	str	r3, [r7, #20]
 800e466:	697b      	ldr	r3, [r7, #20]
 800e468:	2b01      	cmp	r3, #1
 800e46a:	d11b      	bne.n	800e4a4 <vTaskStartScheduler+0x8c>
 800e46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e470:	f383 8811 	msr	BASEPRI, r3
 800e474:	f3bf 8f6f 	isb	sy
 800e478:	f3bf 8f4f 	dsb	sy
 800e47c:	613b      	str	r3, [r7, #16]
 800e47e:	bf00      	nop
 800e480:	4b15      	ldr	r3, [pc, #84]	; (800e4d8 <vTaskStartScheduler+0xc0>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	3350      	adds	r3, #80	; 0x50
 800e486:	4a15      	ldr	r2, [pc, #84]	; (800e4dc <vTaskStartScheduler+0xc4>)
 800e488:	6013      	str	r3, [r2, #0]
 800e48a:	4b15      	ldr	r3, [pc, #84]	; (800e4e0 <vTaskStartScheduler+0xc8>)
 800e48c:	f04f 32ff 	mov.w	r2, #4294967295
 800e490:	601a      	str	r2, [r3, #0]
 800e492:	4b14      	ldr	r3, [pc, #80]	; (800e4e4 <vTaskStartScheduler+0xcc>)
 800e494:	2201      	movs	r2, #1
 800e496:	601a      	str	r2, [r3, #0]
 800e498:	4b13      	ldr	r3, [pc, #76]	; (800e4e8 <vTaskStartScheduler+0xd0>)
 800e49a:	2200      	movs	r2, #0
 800e49c:	601a      	str	r2, [r3, #0]
 800e49e:	f000 fbe7 	bl	800ec70 <xPortStartScheduler>
 800e4a2:	e00e      	b.n	800e4c2 <vTaskStartScheduler+0xaa>
 800e4a4:	697b      	ldr	r3, [r7, #20]
 800e4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4aa:	d10a      	bne.n	800e4c2 <vTaskStartScheduler+0xaa>
 800e4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b0:	f383 8811 	msr	BASEPRI, r3
 800e4b4:	f3bf 8f6f 	isb	sy
 800e4b8:	f3bf 8f4f 	dsb	sy
 800e4bc:	60fb      	str	r3, [r7, #12]
 800e4be:	bf00      	nop
 800e4c0:	e7fe      	b.n	800e4c0 <vTaskStartScheduler+0xa8>
 800e4c2:	bf00      	nop
 800e4c4:	3718      	adds	r7, #24
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	080132bc 	.word	0x080132bc
 800e4d0:	0800e8d1 	.word	0x0800e8d1
 800e4d4:	20000e40 	.word	0x20000e40
 800e4d8:	20000d1c 	.word	0x20000d1c
 800e4dc:	20000114 	.word	0x20000114
 800e4e0:	20000e3c 	.word	0x20000e3c
 800e4e4:	20000e28 	.word	0x20000e28
 800e4e8:	20000e20 	.word	0x20000e20

0800e4ec <vTaskSuspendAll>:
 800e4ec:	b480      	push	{r7}
 800e4ee:	af00      	add	r7, sp, #0
 800e4f0:	4b04      	ldr	r3, [pc, #16]	; (800e504 <vTaskSuspendAll+0x18>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	4a03      	ldr	r2, [pc, #12]	; (800e504 <vTaskSuspendAll+0x18>)
 800e4f8:	6013      	str	r3, [r2, #0]
 800e4fa:	bf00      	nop
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr
 800e504:	20000e44 	.word	0x20000e44

0800e508 <xTaskResumeAll>:
 800e508:	b580      	push	{r7, lr}
 800e50a:	b084      	sub	sp, #16
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	2300      	movs	r3, #0
 800e510:	60fb      	str	r3, [r7, #12]
 800e512:	2300      	movs	r3, #0
 800e514:	60bb      	str	r3, [r7, #8]
 800e516:	4b41      	ldr	r3, [pc, #260]	; (800e61c <xTaskResumeAll+0x114>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d10a      	bne.n	800e534 <xTaskResumeAll+0x2c>
 800e51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e522:	f383 8811 	msr	BASEPRI, r3
 800e526:	f3bf 8f6f 	isb	sy
 800e52a:	f3bf 8f4f 	dsb	sy
 800e52e:	603b      	str	r3, [r7, #0]
 800e530:	bf00      	nop
 800e532:	e7fe      	b.n	800e532 <xTaskResumeAll+0x2a>
 800e534:	f000 fc3e 	bl	800edb4 <vPortEnterCritical>
 800e538:	4b38      	ldr	r3, [pc, #224]	; (800e61c <xTaskResumeAll+0x114>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	3b01      	subs	r3, #1
 800e53e:	4a37      	ldr	r2, [pc, #220]	; (800e61c <xTaskResumeAll+0x114>)
 800e540:	6013      	str	r3, [r2, #0]
 800e542:	4b36      	ldr	r3, [pc, #216]	; (800e61c <xTaskResumeAll+0x114>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d161      	bne.n	800e60e <xTaskResumeAll+0x106>
 800e54a:	4b35      	ldr	r3, [pc, #212]	; (800e620 <xTaskResumeAll+0x118>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d05d      	beq.n	800e60e <xTaskResumeAll+0x106>
 800e552:	e02e      	b.n	800e5b2 <xTaskResumeAll+0xaa>
 800e554:	4b33      	ldr	r3, [pc, #204]	; (800e624 <xTaskResumeAll+0x11c>)
 800e556:	68db      	ldr	r3, [r3, #12]
 800e558:	68db      	ldr	r3, [r3, #12]
 800e55a:	60fb      	str	r3, [r7, #12]
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	3318      	adds	r3, #24
 800e560:	4618      	mov	r0, r3
 800e562:	f7ff fd48 	bl	800dff6 <uxListRemove>
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	3304      	adds	r3, #4
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7ff fd43 	bl	800dff6 <uxListRemove>
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e574:	2201      	movs	r2, #1
 800e576:	409a      	lsls	r2, r3
 800e578:	4b2b      	ldr	r3, [pc, #172]	; (800e628 <xTaskResumeAll+0x120>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4313      	orrs	r3, r2
 800e57e:	4a2a      	ldr	r2, [pc, #168]	; (800e628 <xTaskResumeAll+0x120>)
 800e580:	6013      	str	r3, [r2, #0]
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e586:	4613      	mov	r3, r2
 800e588:	009b      	lsls	r3, r3, #2
 800e58a:	4413      	add	r3, r2
 800e58c:	009b      	lsls	r3, r3, #2
 800e58e:	4a27      	ldr	r2, [pc, #156]	; (800e62c <xTaskResumeAll+0x124>)
 800e590:	441a      	add	r2, r3
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	3304      	adds	r3, #4
 800e596:	4619      	mov	r1, r3
 800e598:	4610      	mov	r0, r2
 800e59a:	f7ff fccf 	bl	800df3c <vListInsertEnd>
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5a2:	4b23      	ldr	r3, [pc, #140]	; (800e630 <xTaskResumeAll+0x128>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d302      	bcc.n	800e5b2 <xTaskResumeAll+0xaa>
 800e5ac:	4b21      	ldr	r3, [pc, #132]	; (800e634 <xTaskResumeAll+0x12c>)
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	601a      	str	r2, [r3, #0]
 800e5b2:	4b1c      	ldr	r3, [pc, #112]	; (800e624 <xTaskResumeAll+0x11c>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d1cc      	bne.n	800e554 <xTaskResumeAll+0x4c>
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d001      	beq.n	800e5c4 <xTaskResumeAll+0xbc>
 800e5c0:	f000 fa42 	bl	800ea48 <prvResetNextTaskUnblockTime>
 800e5c4:	4b1c      	ldr	r3, [pc, #112]	; (800e638 <xTaskResumeAll+0x130>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	607b      	str	r3, [r7, #4]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d010      	beq.n	800e5f2 <xTaskResumeAll+0xea>
 800e5d0:	f000 f836 	bl	800e640 <xTaskIncrementTick>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d002      	beq.n	800e5e0 <xTaskResumeAll+0xd8>
 800e5da:	4b16      	ldr	r3, [pc, #88]	; (800e634 <xTaskResumeAll+0x12c>)
 800e5dc:	2201      	movs	r2, #1
 800e5de:	601a      	str	r2, [r3, #0]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	3b01      	subs	r3, #1
 800e5e4:	607b      	str	r3, [r7, #4]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d1f1      	bne.n	800e5d0 <xTaskResumeAll+0xc8>
 800e5ec:	4b12      	ldr	r3, [pc, #72]	; (800e638 <xTaskResumeAll+0x130>)
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	601a      	str	r2, [r3, #0]
 800e5f2:	4b10      	ldr	r3, [pc, #64]	; (800e634 <xTaskResumeAll+0x12c>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d009      	beq.n	800e60e <xTaskResumeAll+0x106>
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	60bb      	str	r3, [r7, #8]
 800e5fe:	4b0f      	ldr	r3, [pc, #60]	; (800e63c <xTaskResumeAll+0x134>)
 800e600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e604:	601a      	str	r2, [r3, #0]
 800e606:	f3bf 8f4f 	dsb	sy
 800e60a:	f3bf 8f6f 	isb	sy
 800e60e:	f000 fc01 	bl	800ee14 <vPortExitCritical>
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	4618      	mov	r0, r3
 800e616:	3710      	adds	r7, #16
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}
 800e61c:	20000e44 	.word	0x20000e44
 800e620:	20000e1c 	.word	0x20000e1c
 800e624:	20000ddc 	.word	0x20000ddc
 800e628:	20000e24 	.word	0x20000e24
 800e62c:	20000d20 	.word	0x20000d20
 800e630:	20000d1c 	.word	0x20000d1c
 800e634:	20000e30 	.word	0x20000e30
 800e638:	20000e2c 	.word	0x20000e2c
 800e63c:	e000ed04 	.word	0xe000ed04

0800e640 <xTaskIncrementTick>:
 800e640:	b580      	push	{r7, lr}
 800e642:	b086      	sub	sp, #24
 800e644:	af00      	add	r7, sp, #0
 800e646:	2300      	movs	r3, #0
 800e648:	617b      	str	r3, [r7, #20]
 800e64a:	4b52      	ldr	r3, [pc, #328]	; (800e794 <xTaskIncrementTick+0x154>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	f040 8094 	bne.w	800e77c <xTaskIncrementTick+0x13c>
 800e654:	4b50      	ldr	r3, [pc, #320]	; (800e798 <xTaskIncrementTick+0x158>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	3301      	adds	r3, #1
 800e65a:	613b      	str	r3, [r7, #16]
 800e65c:	4a4e      	ldr	r2, [pc, #312]	; (800e798 <xTaskIncrementTick+0x158>)
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	6013      	str	r3, [r2, #0]
 800e662:	693b      	ldr	r3, [r7, #16]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d120      	bne.n	800e6aa <xTaskIncrementTick+0x6a>
 800e668:	4b4c      	ldr	r3, [pc, #304]	; (800e79c <xTaskIncrementTick+0x15c>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d00a      	beq.n	800e688 <xTaskIncrementTick+0x48>
 800e672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e676:	f383 8811 	msr	BASEPRI, r3
 800e67a:	f3bf 8f6f 	isb	sy
 800e67e:	f3bf 8f4f 	dsb	sy
 800e682:	603b      	str	r3, [r7, #0]
 800e684:	bf00      	nop
 800e686:	e7fe      	b.n	800e686 <xTaskIncrementTick+0x46>
 800e688:	4b44      	ldr	r3, [pc, #272]	; (800e79c <xTaskIncrementTick+0x15c>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	60fb      	str	r3, [r7, #12]
 800e68e:	4b44      	ldr	r3, [pc, #272]	; (800e7a0 <xTaskIncrementTick+0x160>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	4a42      	ldr	r2, [pc, #264]	; (800e79c <xTaskIncrementTick+0x15c>)
 800e694:	6013      	str	r3, [r2, #0]
 800e696:	4a42      	ldr	r2, [pc, #264]	; (800e7a0 <xTaskIncrementTick+0x160>)
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	6013      	str	r3, [r2, #0]
 800e69c:	4b41      	ldr	r3, [pc, #260]	; (800e7a4 <xTaskIncrementTick+0x164>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	4a40      	ldr	r2, [pc, #256]	; (800e7a4 <xTaskIncrementTick+0x164>)
 800e6a4:	6013      	str	r3, [r2, #0]
 800e6a6:	f000 f9cf 	bl	800ea48 <prvResetNextTaskUnblockTime>
 800e6aa:	4b3f      	ldr	r3, [pc, #252]	; (800e7a8 <xTaskIncrementTick+0x168>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	693a      	ldr	r2, [r7, #16]
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d348      	bcc.n	800e746 <xTaskIncrementTick+0x106>
 800e6b4:	4b39      	ldr	r3, [pc, #228]	; (800e79c <xTaskIncrementTick+0x15c>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d104      	bne.n	800e6c8 <xTaskIncrementTick+0x88>
 800e6be:	4b3a      	ldr	r3, [pc, #232]	; (800e7a8 <xTaskIncrementTick+0x168>)
 800e6c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e6c4:	601a      	str	r2, [r3, #0]
 800e6c6:	e03e      	b.n	800e746 <xTaskIncrementTick+0x106>
 800e6c8:	4b34      	ldr	r3, [pc, #208]	; (800e79c <xTaskIncrementTick+0x15c>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	68db      	ldr	r3, [r3, #12]
 800e6ce:	68db      	ldr	r3, [r3, #12]
 800e6d0:	60bb      	str	r3, [r7, #8]
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	685b      	ldr	r3, [r3, #4]
 800e6d6:	607b      	str	r3, [r7, #4]
 800e6d8:	693a      	ldr	r2, [r7, #16]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d203      	bcs.n	800e6e8 <xTaskIncrementTick+0xa8>
 800e6e0:	4a31      	ldr	r2, [pc, #196]	; (800e7a8 <xTaskIncrementTick+0x168>)
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6013      	str	r3, [r2, #0]
 800e6e6:	e02e      	b.n	800e746 <xTaskIncrementTick+0x106>
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	3304      	adds	r3, #4
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f7ff fc82 	bl	800dff6 <uxListRemove>
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d004      	beq.n	800e704 <xTaskIncrementTick+0xc4>
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	3318      	adds	r3, #24
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7ff fc79 	bl	800dff6 <uxListRemove>
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e708:	2201      	movs	r2, #1
 800e70a:	409a      	lsls	r2, r3
 800e70c:	4b27      	ldr	r3, [pc, #156]	; (800e7ac <xTaskIncrementTick+0x16c>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4313      	orrs	r3, r2
 800e712:	4a26      	ldr	r2, [pc, #152]	; (800e7ac <xTaskIncrementTick+0x16c>)
 800e714:	6013      	str	r3, [r2, #0]
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e71a:	4613      	mov	r3, r2
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	4413      	add	r3, r2
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	4a23      	ldr	r2, [pc, #140]	; (800e7b0 <xTaskIncrementTick+0x170>)
 800e724:	441a      	add	r2, r3
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	3304      	adds	r3, #4
 800e72a:	4619      	mov	r1, r3
 800e72c:	4610      	mov	r0, r2
 800e72e:	f7ff fc05 	bl	800df3c <vListInsertEnd>
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e736:	4b1f      	ldr	r3, [pc, #124]	; (800e7b4 <xTaskIncrementTick+0x174>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e73c:	429a      	cmp	r2, r3
 800e73e:	d3b9      	bcc.n	800e6b4 <xTaskIncrementTick+0x74>
 800e740:	2301      	movs	r3, #1
 800e742:	617b      	str	r3, [r7, #20]
 800e744:	e7b6      	b.n	800e6b4 <xTaskIncrementTick+0x74>
 800e746:	4b1b      	ldr	r3, [pc, #108]	; (800e7b4 <xTaskIncrementTick+0x174>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e74c:	4918      	ldr	r1, [pc, #96]	; (800e7b0 <xTaskIncrementTick+0x170>)
 800e74e:	4613      	mov	r3, r2
 800e750:	009b      	lsls	r3, r3, #2
 800e752:	4413      	add	r3, r2
 800e754:	009b      	lsls	r3, r3, #2
 800e756:	440b      	add	r3, r1
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	d901      	bls.n	800e762 <xTaskIncrementTick+0x122>
 800e75e:	2301      	movs	r3, #1
 800e760:	617b      	str	r3, [r7, #20]
 800e762:	4b15      	ldr	r3, [pc, #84]	; (800e7b8 <xTaskIncrementTick+0x178>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d101      	bne.n	800e76e <xTaskIncrementTick+0x12e>
 800e76a:	f7f2 fdb4 	bl	80012d6 <vApplicationTickHook>
 800e76e:	4b13      	ldr	r3, [pc, #76]	; (800e7bc <xTaskIncrementTick+0x17c>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d009      	beq.n	800e78a <xTaskIncrementTick+0x14a>
 800e776:	2301      	movs	r3, #1
 800e778:	617b      	str	r3, [r7, #20]
 800e77a:	e006      	b.n	800e78a <xTaskIncrementTick+0x14a>
 800e77c:	4b0e      	ldr	r3, [pc, #56]	; (800e7b8 <xTaskIncrementTick+0x178>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	3301      	adds	r3, #1
 800e782:	4a0d      	ldr	r2, [pc, #52]	; (800e7b8 <xTaskIncrementTick+0x178>)
 800e784:	6013      	str	r3, [r2, #0]
 800e786:	f7f2 fda6 	bl	80012d6 <vApplicationTickHook>
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	4618      	mov	r0, r3
 800e78e:	3718      	adds	r7, #24
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}
 800e794:	20000e44 	.word	0x20000e44
 800e798:	20000e20 	.word	0x20000e20
 800e79c:	20000dd4 	.word	0x20000dd4
 800e7a0:	20000dd8 	.word	0x20000dd8
 800e7a4:	20000e34 	.word	0x20000e34
 800e7a8:	20000e3c 	.word	0x20000e3c
 800e7ac:	20000e24 	.word	0x20000e24
 800e7b0:	20000d20 	.word	0x20000d20
 800e7b4:	20000d1c 	.word	0x20000d1c
 800e7b8:	20000e2c 	.word	0x20000e2c
 800e7bc:	20000e30 	.word	0x20000e30

0800e7c0 <vTaskSwitchContext>:
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b088      	sub	sp, #32
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	4b3c      	ldr	r3, [pc, #240]	; (800e8b8 <vTaskSwitchContext+0xf8>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d003      	beq.n	800e7d6 <vTaskSwitchContext+0x16>
 800e7ce:	4b3b      	ldr	r3, [pc, #236]	; (800e8bc <vTaskSwitchContext+0xfc>)
 800e7d0:	2201      	movs	r2, #1
 800e7d2:	601a      	str	r2, [r3, #0]
 800e7d4:	e06b      	b.n	800e8ae <vTaskSwitchContext+0xee>
 800e7d6:	4b39      	ldr	r3, [pc, #228]	; (800e8bc <vTaskSwitchContext+0xfc>)
 800e7d8:	2200      	movs	r2, #0
 800e7da:	601a      	str	r2, [r3, #0]
 800e7dc:	4b38      	ldr	r3, [pc, #224]	; (800e8c0 <vTaskSwitchContext+0x100>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7e2:	61fb      	str	r3, [r7, #28]
 800e7e4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800e7e8:	61bb      	str	r3, [r7, #24]
 800e7ea:	69fb      	ldr	r3, [r7, #28]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	69ba      	ldr	r2, [r7, #24]
 800e7f0:	429a      	cmp	r2, r3
 800e7f2:	d111      	bne.n	800e818 <vTaskSwitchContext+0x58>
 800e7f4:	69fb      	ldr	r3, [r7, #28]
 800e7f6:	3304      	adds	r3, #4
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	69ba      	ldr	r2, [r7, #24]
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d10b      	bne.n	800e818 <vTaskSwitchContext+0x58>
 800e800:	69fb      	ldr	r3, [r7, #28]
 800e802:	3308      	adds	r3, #8
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	69ba      	ldr	r2, [r7, #24]
 800e808:	429a      	cmp	r2, r3
 800e80a:	d105      	bne.n	800e818 <vTaskSwitchContext+0x58>
 800e80c:	69fb      	ldr	r3, [r7, #28]
 800e80e:	330c      	adds	r3, #12
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	69ba      	ldr	r2, [r7, #24]
 800e814:	429a      	cmp	r2, r3
 800e816:	d008      	beq.n	800e82a <vTaskSwitchContext+0x6a>
 800e818:	4b29      	ldr	r3, [pc, #164]	; (800e8c0 <vTaskSwitchContext+0x100>)
 800e81a:	681a      	ldr	r2, [r3, #0]
 800e81c:	4b28      	ldr	r3, [pc, #160]	; (800e8c0 <vTaskSwitchContext+0x100>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	3334      	adds	r3, #52	; 0x34
 800e822:	4619      	mov	r1, r3
 800e824:	4610      	mov	r0, r2
 800e826:	f7f2 fd5d 	bl	80012e4 <vApplicationStackOverflowHook>
 800e82a:	4b26      	ldr	r3, [pc, #152]	; (800e8c4 <vTaskSwitchContext+0x104>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	60fb      	str	r3, [r7, #12]
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	fab3 f383 	clz	r3, r3
 800e836:	72fb      	strb	r3, [r7, #11]
 800e838:	7afb      	ldrb	r3, [r7, #11]
 800e83a:	f1c3 031f 	rsb	r3, r3, #31
 800e83e:	617b      	str	r3, [r7, #20]
 800e840:	4921      	ldr	r1, [pc, #132]	; (800e8c8 <vTaskSwitchContext+0x108>)
 800e842:	697a      	ldr	r2, [r7, #20]
 800e844:	4613      	mov	r3, r2
 800e846:	009b      	lsls	r3, r3, #2
 800e848:	4413      	add	r3, r2
 800e84a:	009b      	lsls	r3, r3, #2
 800e84c:	440b      	add	r3, r1
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d10a      	bne.n	800e86a <vTaskSwitchContext+0xaa>
 800e854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e858:	f383 8811 	msr	BASEPRI, r3
 800e85c:	f3bf 8f6f 	isb	sy
 800e860:	f3bf 8f4f 	dsb	sy
 800e864:	607b      	str	r3, [r7, #4]
 800e866:	bf00      	nop
 800e868:	e7fe      	b.n	800e868 <vTaskSwitchContext+0xa8>
 800e86a:	697a      	ldr	r2, [r7, #20]
 800e86c:	4613      	mov	r3, r2
 800e86e:	009b      	lsls	r3, r3, #2
 800e870:	4413      	add	r3, r2
 800e872:	009b      	lsls	r3, r3, #2
 800e874:	4a14      	ldr	r2, [pc, #80]	; (800e8c8 <vTaskSwitchContext+0x108>)
 800e876:	4413      	add	r3, r2
 800e878:	613b      	str	r3, [r7, #16]
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	685a      	ldr	r2, [r3, #4]
 800e880:	693b      	ldr	r3, [r7, #16]
 800e882:	605a      	str	r2, [r3, #4]
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	685a      	ldr	r2, [r3, #4]
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	3308      	adds	r3, #8
 800e88c:	429a      	cmp	r2, r3
 800e88e:	d104      	bne.n	800e89a <vTaskSwitchContext+0xda>
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	685a      	ldr	r2, [r3, #4]
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	605a      	str	r2, [r3, #4]
 800e89a:	693b      	ldr	r3, [r7, #16]
 800e89c:	685b      	ldr	r3, [r3, #4]
 800e89e:	68db      	ldr	r3, [r3, #12]
 800e8a0:	4a07      	ldr	r2, [pc, #28]	; (800e8c0 <vTaskSwitchContext+0x100>)
 800e8a2:	6013      	str	r3, [r2, #0]
 800e8a4:	4b06      	ldr	r3, [pc, #24]	; (800e8c0 <vTaskSwitchContext+0x100>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	3350      	adds	r3, #80	; 0x50
 800e8aa:	4a08      	ldr	r2, [pc, #32]	; (800e8cc <vTaskSwitchContext+0x10c>)
 800e8ac:	6013      	str	r3, [r2, #0]
 800e8ae:	bf00      	nop
 800e8b0:	3720      	adds	r7, #32
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	20000e44 	.word	0x20000e44
 800e8bc:	20000e30 	.word	0x20000e30
 800e8c0:	20000d1c 	.word	0x20000d1c
 800e8c4:	20000e24 	.word	0x20000e24
 800e8c8:	20000d20 	.word	0x20000d20
 800e8cc:	20000114 	.word	0x20000114

0800e8d0 <prvIdleTask>:
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	f000 f854 	bl	800e984 <prvCheckTasksWaitingTermination>
 800e8dc:	4b07      	ldr	r3, [pc, #28]	; (800e8fc <prvIdleTask+0x2c>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	2b01      	cmp	r3, #1
 800e8e2:	d907      	bls.n	800e8f4 <prvIdleTask+0x24>
 800e8e4:	4b06      	ldr	r3, [pc, #24]	; (800e900 <prvIdleTask+0x30>)
 800e8e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8ea:	601a      	str	r2, [r3, #0]
 800e8ec:	f3bf 8f4f 	dsb	sy
 800e8f0:	f3bf 8f6f 	isb	sy
 800e8f4:	f7f2 fce8 	bl	80012c8 <vApplicationIdleHook>
 800e8f8:	e7ee      	b.n	800e8d8 <prvIdleTask+0x8>
 800e8fa:	bf00      	nop
 800e8fc:	20000d20 	.word	0x20000d20
 800e900:	e000ed04 	.word	0xe000ed04

0800e904 <prvInitialiseTaskLists>:
 800e904:	b580      	push	{r7, lr}
 800e906:	b082      	sub	sp, #8
 800e908:	af00      	add	r7, sp, #0
 800e90a:	2300      	movs	r3, #0
 800e90c:	607b      	str	r3, [r7, #4]
 800e90e:	e00c      	b.n	800e92a <prvInitialiseTaskLists+0x26>
 800e910:	687a      	ldr	r2, [r7, #4]
 800e912:	4613      	mov	r3, r2
 800e914:	009b      	lsls	r3, r3, #2
 800e916:	4413      	add	r3, r2
 800e918:	009b      	lsls	r3, r3, #2
 800e91a:	4a12      	ldr	r2, [pc, #72]	; (800e964 <prvInitialiseTaskLists+0x60>)
 800e91c:	4413      	add	r3, r2
 800e91e:	4618      	mov	r0, r3
 800e920:	f7ff fadf 	bl	800dee2 <vListInitialise>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	3301      	adds	r3, #1
 800e928:	607b      	str	r3, [r7, #4]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2b06      	cmp	r3, #6
 800e92e:	d9ef      	bls.n	800e910 <prvInitialiseTaskLists+0xc>
 800e930:	480d      	ldr	r0, [pc, #52]	; (800e968 <prvInitialiseTaskLists+0x64>)
 800e932:	f7ff fad6 	bl	800dee2 <vListInitialise>
 800e936:	480d      	ldr	r0, [pc, #52]	; (800e96c <prvInitialiseTaskLists+0x68>)
 800e938:	f7ff fad3 	bl	800dee2 <vListInitialise>
 800e93c:	480c      	ldr	r0, [pc, #48]	; (800e970 <prvInitialiseTaskLists+0x6c>)
 800e93e:	f7ff fad0 	bl	800dee2 <vListInitialise>
 800e942:	480c      	ldr	r0, [pc, #48]	; (800e974 <prvInitialiseTaskLists+0x70>)
 800e944:	f7ff facd 	bl	800dee2 <vListInitialise>
 800e948:	480b      	ldr	r0, [pc, #44]	; (800e978 <prvInitialiseTaskLists+0x74>)
 800e94a:	f7ff faca 	bl	800dee2 <vListInitialise>
 800e94e:	4b0b      	ldr	r3, [pc, #44]	; (800e97c <prvInitialiseTaskLists+0x78>)
 800e950:	4a05      	ldr	r2, [pc, #20]	; (800e968 <prvInitialiseTaskLists+0x64>)
 800e952:	601a      	str	r2, [r3, #0]
 800e954:	4b0a      	ldr	r3, [pc, #40]	; (800e980 <prvInitialiseTaskLists+0x7c>)
 800e956:	4a05      	ldr	r2, [pc, #20]	; (800e96c <prvInitialiseTaskLists+0x68>)
 800e958:	601a      	str	r2, [r3, #0]
 800e95a:	bf00      	nop
 800e95c:	3708      	adds	r7, #8
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	20000d20 	.word	0x20000d20
 800e968:	20000dac 	.word	0x20000dac
 800e96c:	20000dc0 	.word	0x20000dc0
 800e970:	20000ddc 	.word	0x20000ddc
 800e974:	20000df0 	.word	0x20000df0
 800e978:	20000e08 	.word	0x20000e08
 800e97c:	20000dd4 	.word	0x20000dd4
 800e980:	20000dd8 	.word	0x20000dd8

0800e984 <prvCheckTasksWaitingTermination>:
 800e984:	b580      	push	{r7, lr}
 800e986:	b082      	sub	sp, #8
 800e988:	af00      	add	r7, sp, #0
 800e98a:	e019      	b.n	800e9c0 <prvCheckTasksWaitingTermination+0x3c>
 800e98c:	f000 fa12 	bl	800edb4 <vPortEnterCritical>
 800e990:	4b10      	ldr	r3, [pc, #64]	; (800e9d4 <prvCheckTasksWaitingTermination+0x50>)
 800e992:	68db      	ldr	r3, [r3, #12]
 800e994:	68db      	ldr	r3, [r3, #12]
 800e996:	607b      	str	r3, [r7, #4]
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	3304      	adds	r3, #4
 800e99c:	4618      	mov	r0, r3
 800e99e:	f7ff fb2a 	bl	800dff6 <uxListRemove>
 800e9a2:	4b0d      	ldr	r3, [pc, #52]	; (800e9d8 <prvCheckTasksWaitingTermination+0x54>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	3b01      	subs	r3, #1
 800e9a8:	4a0b      	ldr	r2, [pc, #44]	; (800e9d8 <prvCheckTasksWaitingTermination+0x54>)
 800e9aa:	6013      	str	r3, [r2, #0]
 800e9ac:	4b0b      	ldr	r3, [pc, #44]	; (800e9dc <prvCheckTasksWaitingTermination+0x58>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	3b01      	subs	r3, #1
 800e9b2:	4a0a      	ldr	r2, [pc, #40]	; (800e9dc <prvCheckTasksWaitingTermination+0x58>)
 800e9b4:	6013      	str	r3, [r2, #0]
 800e9b6:	f000 fa2d 	bl	800ee14 <vPortExitCritical>
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f000 f810 	bl	800e9e0 <prvDeleteTCB>
 800e9c0:	4b06      	ldr	r3, [pc, #24]	; (800e9dc <prvCheckTasksWaitingTermination+0x58>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d1e1      	bne.n	800e98c <prvCheckTasksWaitingTermination+0x8>
 800e9c8:	bf00      	nop
 800e9ca:	bf00      	nop
 800e9cc:	3708      	adds	r7, #8
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	20000df0 	.word	0x20000df0
 800e9d8:	20000e1c 	.word	0x20000e1c
 800e9dc:	20000e04 	.word	0x20000e04

0800e9e0 <prvDeleteTCB>:
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b084      	sub	sp, #16
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	3350      	adds	r3, #80	; 0x50
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f002 f953 	bl	8010c98 <_reclaim_reent>
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d108      	bne.n	800ea0e <prvDeleteTCB+0x2e>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea00:	4618      	mov	r0, r3
 800ea02:	f000 fb89 	bl	800f118 <vPortFree>
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f000 fb86 	bl	800f118 <vPortFree>
 800ea0c:	e018      	b.n	800ea40 <prvDeleteTCB+0x60>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800ea14:	2b01      	cmp	r3, #1
 800ea16:	d103      	bne.n	800ea20 <prvDeleteTCB+0x40>
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f000 fb7d 	bl	800f118 <vPortFree>
 800ea1e:	e00f      	b.n	800ea40 <prvDeleteTCB+0x60>
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800ea26:	2b02      	cmp	r3, #2
 800ea28:	d00a      	beq.n	800ea40 <prvDeleteTCB+0x60>
 800ea2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea2e:	f383 8811 	msr	BASEPRI, r3
 800ea32:	f3bf 8f6f 	isb	sy
 800ea36:	f3bf 8f4f 	dsb	sy
 800ea3a:	60fb      	str	r3, [r7, #12]
 800ea3c:	bf00      	nop
 800ea3e:	e7fe      	b.n	800ea3e <prvDeleteTCB+0x5e>
 800ea40:	bf00      	nop
 800ea42:	3710      	adds	r7, #16
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}

0800ea48 <prvResetNextTaskUnblockTime>:
 800ea48:	b480      	push	{r7}
 800ea4a:	b083      	sub	sp, #12
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	4b0c      	ldr	r3, [pc, #48]	; (800ea80 <prvResetNextTaskUnblockTime+0x38>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d104      	bne.n	800ea62 <prvResetNextTaskUnblockTime+0x1a>
 800ea58:	4b0a      	ldr	r3, [pc, #40]	; (800ea84 <prvResetNextTaskUnblockTime+0x3c>)
 800ea5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea5e:	601a      	str	r2, [r3, #0]
 800ea60:	e008      	b.n	800ea74 <prvResetNextTaskUnblockTime+0x2c>
 800ea62:	4b07      	ldr	r3, [pc, #28]	; (800ea80 <prvResetNextTaskUnblockTime+0x38>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	68db      	ldr	r3, [r3, #12]
 800ea68:	68db      	ldr	r3, [r3, #12]
 800ea6a:	607b      	str	r3, [r7, #4]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	4a04      	ldr	r2, [pc, #16]	; (800ea84 <prvResetNextTaskUnblockTime+0x3c>)
 800ea72:	6013      	str	r3, [r2, #0]
 800ea74:	bf00      	nop
 800ea76:	370c      	adds	r7, #12
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr
 800ea80:	20000dd4 	.word	0x20000dd4
 800ea84:	20000e3c 	.word	0x20000e3c

0800ea88 <prvAddCurrentTaskToDelayedList>:
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b084      	sub	sp, #16
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
 800ea90:	6039      	str	r1, [r7, #0]
 800ea92:	4b29      	ldr	r3, [pc, #164]	; (800eb38 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	60fb      	str	r3, [r7, #12]
 800ea98:	4b28      	ldr	r3, [pc, #160]	; (800eb3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	3304      	adds	r3, #4
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f7ff faa9 	bl	800dff6 <uxListRemove>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d10b      	bne.n	800eac2 <prvAddCurrentTaskToDelayedList+0x3a>
 800eaaa:	4b24      	ldr	r3, [pc, #144]	; (800eb3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eab0:	2201      	movs	r2, #1
 800eab2:	fa02 f303 	lsl.w	r3, r2, r3
 800eab6:	43da      	mvns	r2, r3
 800eab8:	4b21      	ldr	r3, [pc, #132]	; (800eb40 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	4013      	ands	r3, r2
 800eabe:	4a20      	ldr	r2, [pc, #128]	; (800eb40 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eac0:	6013      	str	r3, [r2, #0]
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eac8:	d10a      	bne.n	800eae0 <prvAddCurrentTaskToDelayedList+0x58>
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d007      	beq.n	800eae0 <prvAddCurrentTaskToDelayedList+0x58>
 800ead0:	4b1a      	ldr	r3, [pc, #104]	; (800eb3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	3304      	adds	r3, #4
 800ead6:	4619      	mov	r1, r3
 800ead8:	481a      	ldr	r0, [pc, #104]	; (800eb44 <prvAddCurrentTaskToDelayedList+0xbc>)
 800eada:	f7ff fa2f 	bl	800df3c <vListInsertEnd>
 800eade:	e026      	b.n	800eb2e <prvAddCurrentTaskToDelayedList+0xa6>
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	4413      	add	r3, r2
 800eae6:	60bb      	str	r3, [r7, #8]
 800eae8:	4b14      	ldr	r3, [pc, #80]	; (800eb3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	68ba      	ldr	r2, [r7, #8]
 800eaee:	605a      	str	r2, [r3, #4]
 800eaf0:	68ba      	ldr	r2, [r7, #8]
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d209      	bcs.n	800eb0c <prvAddCurrentTaskToDelayedList+0x84>
 800eaf8:	4b13      	ldr	r3, [pc, #76]	; (800eb48 <prvAddCurrentTaskToDelayedList+0xc0>)
 800eafa:	681a      	ldr	r2, [r3, #0]
 800eafc:	4b0f      	ldr	r3, [pc, #60]	; (800eb3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	3304      	adds	r3, #4
 800eb02:	4619      	mov	r1, r3
 800eb04:	4610      	mov	r0, r2
 800eb06:	f7ff fa3d 	bl	800df84 <vListInsert>
 800eb0a:	e010      	b.n	800eb2e <prvAddCurrentTaskToDelayedList+0xa6>
 800eb0c:	4b0f      	ldr	r3, [pc, #60]	; (800eb4c <prvAddCurrentTaskToDelayedList+0xc4>)
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	4b0a      	ldr	r3, [pc, #40]	; (800eb3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	3304      	adds	r3, #4
 800eb16:	4619      	mov	r1, r3
 800eb18:	4610      	mov	r0, r2
 800eb1a:	f7ff fa33 	bl	800df84 <vListInsert>
 800eb1e:	4b0c      	ldr	r3, [pc, #48]	; (800eb50 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	68ba      	ldr	r2, [r7, #8]
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d202      	bcs.n	800eb2e <prvAddCurrentTaskToDelayedList+0xa6>
 800eb28:	4a09      	ldr	r2, [pc, #36]	; (800eb50 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	6013      	str	r3, [r2, #0]
 800eb2e:	bf00      	nop
 800eb30:	3710      	adds	r7, #16
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}
 800eb36:	bf00      	nop
 800eb38:	20000e20 	.word	0x20000e20
 800eb3c:	20000d1c 	.word	0x20000d1c
 800eb40:	20000e24 	.word	0x20000e24
 800eb44:	20000e08 	.word	0x20000e08
 800eb48:	20000dd8 	.word	0x20000dd8
 800eb4c:	20000dd4 	.word	0x20000dd4
 800eb50:	20000e3c 	.word	0x20000e3c

0800eb54 <pxPortInitialiseStack>:
 800eb54:	b480      	push	{r7}
 800eb56:	b085      	sub	sp, #20
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	60f8      	str	r0, [r7, #12]
 800eb5c:	60b9      	str	r1, [r7, #8]
 800eb5e:	607a      	str	r2, [r7, #4]
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	3b04      	subs	r3, #4
 800eb64:	60fb      	str	r3, [r7, #12]
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800eb6c:	601a      	str	r2, [r3, #0]
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	3b04      	subs	r3, #4
 800eb72:	60fb      	str	r3, [r7, #12]
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	f023 0201 	bic.w	r2, r3, #1
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	601a      	str	r2, [r3, #0]
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	3b04      	subs	r3, #4
 800eb82:	60fb      	str	r3, [r7, #12]
 800eb84:	4a0c      	ldr	r2, [pc, #48]	; (800ebb8 <pxPortInitialiseStack+0x64>)
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	601a      	str	r2, [r3, #0]
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	3b14      	subs	r3, #20
 800eb8e:	60fb      	str	r3, [r7, #12]
 800eb90:	687a      	ldr	r2, [r7, #4]
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	601a      	str	r2, [r3, #0]
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	3b04      	subs	r3, #4
 800eb9a:	60fb      	str	r3, [r7, #12]
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	f06f 0202 	mvn.w	r2, #2
 800eba2:	601a      	str	r2, [r3, #0]
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	3b20      	subs	r3, #32
 800eba8:	60fb      	str	r3, [r7, #12]
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	4618      	mov	r0, r3
 800ebae:	3714      	adds	r7, #20
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr
 800ebb8:	0800ebbd 	.word	0x0800ebbd

0800ebbc <prvTaskExitError>:
 800ebbc:	b480      	push	{r7}
 800ebbe:	b085      	sub	sp, #20
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	607b      	str	r3, [r7, #4]
 800ebc6:	4b12      	ldr	r3, [pc, #72]	; (800ec10 <prvTaskExitError+0x54>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebce:	d00a      	beq.n	800ebe6 <prvTaskExitError+0x2a>
 800ebd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd4:	f383 8811 	msr	BASEPRI, r3
 800ebd8:	f3bf 8f6f 	isb	sy
 800ebdc:	f3bf 8f4f 	dsb	sy
 800ebe0:	60fb      	str	r3, [r7, #12]
 800ebe2:	bf00      	nop
 800ebe4:	e7fe      	b.n	800ebe4 <prvTaskExitError+0x28>
 800ebe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebea:	f383 8811 	msr	BASEPRI, r3
 800ebee:	f3bf 8f6f 	isb	sy
 800ebf2:	f3bf 8f4f 	dsb	sy
 800ebf6:	60bb      	str	r3, [r7, #8]
 800ebf8:	bf00      	nop
 800ebfa:	bf00      	nop
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d0fc      	beq.n	800ebfc <prvTaskExitError+0x40>
 800ec02:	bf00      	nop
 800ec04:	bf00      	nop
 800ec06:	3714      	adds	r7, #20
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr
 800ec10:	200000ac 	.word	0x200000ac
	...

0800ec20 <SVC_Handler>:
 800ec20:	4b07      	ldr	r3, [pc, #28]	; (800ec40 <pxCurrentTCBConst2>)
 800ec22:	6819      	ldr	r1, [r3, #0]
 800ec24:	6808      	ldr	r0, [r1, #0]
 800ec26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec2a:	f380 8809 	msr	PSP, r0
 800ec2e:	f3bf 8f6f 	isb	sy
 800ec32:	f04f 0000 	mov.w	r0, #0
 800ec36:	f380 8811 	msr	BASEPRI, r0
 800ec3a:	4770      	bx	lr
 800ec3c:	f3af 8000 	nop.w

0800ec40 <pxCurrentTCBConst2>:
 800ec40:	20000d1c 	.word	0x20000d1c
 800ec44:	bf00      	nop
 800ec46:	bf00      	nop

0800ec48 <prvPortStartFirstTask>:
 800ec48:	4808      	ldr	r0, [pc, #32]	; (800ec6c <prvPortStartFirstTask+0x24>)
 800ec4a:	6800      	ldr	r0, [r0, #0]
 800ec4c:	6800      	ldr	r0, [r0, #0]
 800ec4e:	f380 8808 	msr	MSP, r0
 800ec52:	f04f 0000 	mov.w	r0, #0
 800ec56:	f380 8814 	msr	CONTROL, r0
 800ec5a:	b662      	cpsie	i
 800ec5c:	b661      	cpsie	f
 800ec5e:	f3bf 8f4f 	dsb	sy
 800ec62:	f3bf 8f6f 	isb	sy
 800ec66:	df00      	svc	0
 800ec68:	bf00      	nop
 800ec6a:	bf00      	nop
 800ec6c:	e000ed08 	.word	0xe000ed08

0800ec70 <xPortStartScheduler>:
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b086      	sub	sp, #24
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	4b46      	ldr	r3, [pc, #280]	; (800ed90 <xPortStartScheduler+0x120>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	4a46      	ldr	r2, [pc, #280]	; (800ed94 <xPortStartScheduler+0x124>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d10a      	bne.n	800ec96 <xPortStartScheduler+0x26>
 800ec80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec84:	f383 8811 	msr	BASEPRI, r3
 800ec88:	f3bf 8f6f 	isb	sy
 800ec8c:	f3bf 8f4f 	dsb	sy
 800ec90:	613b      	str	r3, [r7, #16]
 800ec92:	bf00      	nop
 800ec94:	e7fe      	b.n	800ec94 <xPortStartScheduler+0x24>
 800ec96:	4b3e      	ldr	r3, [pc, #248]	; (800ed90 <xPortStartScheduler+0x120>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	4a3f      	ldr	r2, [pc, #252]	; (800ed98 <xPortStartScheduler+0x128>)
 800ec9c:	4293      	cmp	r3, r2
 800ec9e:	d10a      	bne.n	800ecb6 <xPortStartScheduler+0x46>
 800eca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca4:	f383 8811 	msr	BASEPRI, r3
 800eca8:	f3bf 8f6f 	isb	sy
 800ecac:	f3bf 8f4f 	dsb	sy
 800ecb0:	60fb      	str	r3, [r7, #12]
 800ecb2:	bf00      	nop
 800ecb4:	e7fe      	b.n	800ecb4 <xPortStartScheduler+0x44>
 800ecb6:	4b39      	ldr	r3, [pc, #228]	; (800ed9c <xPortStartScheduler+0x12c>)
 800ecb8:	617b      	str	r3, [r7, #20]
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	781b      	ldrb	r3, [r3, #0]
 800ecbe:	b2db      	uxtb	r3, r3
 800ecc0:	607b      	str	r3, [r7, #4]
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	22ff      	movs	r2, #255	; 0xff
 800ecc6:	701a      	strb	r2, [r3, #0]
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	781b      	ldrb	r3, [r3, #0]
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	70fb      	strb	r3, [r7, #3]
 800ecd0:	78fb      	ldrb	r3, [r7, #3]
 800ecd2:	b2db      	uxtb	r3, r3
 800ecd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ecd8:	b2da      	uxtb	r2, r3
 800ecda:	4b31      	ldr	r3, [pc, #196]	; (800eda0 <xPortStartScheduler+0x130>)
 800ecdc:	701a      	strb	r2, [r3, #0]
 800ecde:	4b31      	ldr	r3, [pc, #196]	; (800eda4 <xPortStartScheduler+0x134>)
 800ece0:	2207      	movs	r2, #7
 800ece2:	601a      	str	r2, [r3, #0]
 800ece4:	e009      	b.n	800ecfa <xPortStartScheduler+0x8a>
 800ece6:	4b2f      	ldr	r3, [pc, #188]	; (800eda4 <xPortStartScheduler+0x134>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	3b01      	subs	r3, #1
 800ecec:	4a2d      	ldr	r2, [pc, #180]	; (800eda4 <xPortStartScheduler+0x134>)
 800ecee:	6013      	str	r3, [r2, #0]
 800ecf0:	78fb      	ldrb	r3, [r7, #3]
 800ecf2:	b2db      	uxtb	r3, r3
 800ecf4:	005b      	lsls	r3, r3, #1
 800ecf6:	b2db      	uxtb	r3, r3
 800ecf8:	70fb      	strb	r3, [r7, #3]
 800ecfa:	78fb      	ldrb	r3, [r7, #3]
 800ecfc:	b2db      	uxtb	r3, r3
 800ecfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed02:	2b80      	cmp	r3, #128	; 0x80
 800ed04:	d0ef      	beq.n	800ece6 <xPortStartScheduler+0x76>
 800ed06:	4b27      	ldr	r3, [pc, #156]	; (800eda4 <xPortStartScheduler+0x134>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f1c3 0307 	rsb	r3, r3, #7
 800ed0e:	2b04      	cmp	r3, #4
 800ed10:	d00a      	beq.n	800ed28 <xPortStartScheduler+0xb8>
 800ed12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed16:	f383 8811 	msr	BASEPRI, r3
 800ed1a:	f3bf 8f6f 	isb	sy
 800ed1e:	f3bf 8f4f 	dsb	sy
 800ed22:	60bb      	str	r3, [r7, #8]
 800ed24:	bf00      	nop
 800ed26:	e7fe      	b.n	800ed26 <xPortStartScheduler+0xb6>
 800ed28:	4b1e      	ldr	r3, [pc, #120]	; (800eda4 <xPortStartScheduler+0x134>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	021b      	lsls	r3, r3, #8
 800ed2e:	4a1d      	ldr	r2, [pc, #116]	; (800eda4 <xPortStartScheduler+0x134>)
 800ed30:	6013      	str	r3, [r2, #0]
 800ed32:	4b1c      	ldr	r3, [pc, #112]	; (800eda4 <xPortStartScheduler+0x134>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ed3a:	4a1a      	ldr	r2, [pc, #104]	; (800eda4 <xPortStartScheduler+0x134>)
 800ed3c:	6013      	str	r3, [r2, #0]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	b2da      	uxtb	r2, r3
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	701a      	strb	r2, [r3, #0]
 800ed46:	4b18      	ldr	r3, [pc, #96]	; (800eda8 <xPortStartScheduler+0x138>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	4a17      	ldr	r2, [pc, #92]	; (800eda8 <xPortStartScheduler+0x138>)
 800ed4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ed50:	6013      	str	r3, [r2, #0]
 800ed52:	4b15      	ldr	r3, [pc, #84]	; (800eda8 <xPortStartScheduler+0x138>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	4a14      	ldr	r2, [pc, #80]	; (800eda8 <xPortStartScheduler+0x138>)
 800ed58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ed5c:	6013      	str	r3, [r2, #0]
 800ed5e:	f000 f8dd 	bl	800ef1c <vPortSetupTimerInterrupt>
 800ed62:	4b12      	ldr	r3, [pc, #72]	; (800edac <xPortStartScheduler+0x13c>)
 800ed64:	2200      	movs	r2, #0
 800ed66:	601a      	str	r2, [r3, #0]
 800ed68:	f000 f8fc 	bl	800ef64 <vPortEnableVFP>
 800ed6c:	4b10      	ldr	r3, [pc, #64]	; (800edb0 <xPortStartScheduler+0x140>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	4a0f      	ldr	r2, [pc, #60]	; (800edb0 <xPortStartScheduler+0x140>)
 800ed72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ed76:	6013      	str	r3, [r2, #0]
 800ed78:	f7ff ff66 	bl	800ec48 <prvPortStartFirstTask>
 800ed7c:	f7ff fd20 	bl	800e7c0 <vTaskSwitchContext>
 800ed80:	f7ff ff1c 	bl	800ebbc <prvTaskExitError>
 800ed84:	2300      	movs	r3, #0
 800ed86:	4618      	mov	r0, r3
 800ed88:	3718      	adds	r7, #24
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}
 800ed8e:	bf00      	nop
 800ed90:	e000ed00 	.word	0xe000ed00
 800ed94:	410fc271 	.word	0x410fc271
 800ed98:	410fc270 	.word	0x410fc270
 800ed9c:	e000e400 	.word	0xe000e400
 800eda0:	20000e48 	.word	0x20000e48
 800eda4:	20000e4c 	.word	0x20000e4c
 800eda8:	e000ed20 	.word	0xe000ed20
 800edac:	200000ac 	.word	0x200000ac
 800edb0:	e000ef34 	.word	0xe000ef34

0800edb4 <vPortEnterCritical>:
 800edb4:	b480      	push	{r7}
 800edb6:	b083      	sub	sp, #12
 800edb8:	af00      	add	r7, sp, #0
 800edba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edbe:	f383 8811 	msr	BASEPRI, r3
 800edc2:	f3bf 8f6f 	isb	sy
 800edc6:	f3bf 8f4f 	dsb	sy
 800edca:	607b      	str	r3, [r7, #4]
 800edcc:	bf00      	nop
 800edce:	4b0f      	ldr	r3, [pc, #60]	; (800ee0c <vPortEnterCritical+0x58>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	3301      	adds	r3, #1
 800edd4:	4a0d      	ldr	r2, [pc, #52]	; (800ee0c <vPortEnterCritical+0x58>)
 800edd6:	6013      	str	r3, [r2, #0]
 800edd8:	4b0c      	ldr	r3, [pc, #48]	; (800ee0c <vPortEnterCritical+0x58>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	2b01      	cmp	r3, #1
 800edde:	d10f      	bne.n	800ee00 <vPortEnterCritical+0x4c>
 800ede0:	4b0b      	ldr	r3, [pc, #44]	; (800ee10 <vPortEnterCritical+0x5c>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	b2db      	uxtb	r3, r3
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d00a      	beq.n	800ee00 <vPortEnterCritical+0x4c>
 800edea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edee:	f383 8811 	msr	BASEPRI, r3
 800edf2:	f3bf 8f6f 	isb	sy
 800edf6:	f3bf 8f4f 	dsb	sy
 800edfa:	603b      	str	r3, [r7, #0]
 800edfc:	bf00      	nop
 800edfe:	e7fe      	b.n	800edfe <vPortEnterCritical+0x4a>
 800ee00:	bf00      	nop
 800ee02:	370c      	adds	r7, #12
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr
 800ee0c:	200000ac 	.word	0x200000ac
 800ee10:	e000ed04 	.word	0xe000ed04

0800ee14 <vPortExitCritical>:
 800ee14:	b480      	push	{r7}
 800ee16:	b083      	sub	sp, #12
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	4b12      	ldr	r3, [pc, #72]	; (800ee64 <vPortExitCritical+0x50>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d10a      	bne.n	800ee38 <vPortExitCritical+0x24>
 800ee22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee26:	f383 8811 	msr	BASEPRI, r3
 800ee2a:	f3bf 8f6f 	isb	sy
 800ee2e:	f3bf 8f4f 	dsb	sy
 800ee32:	607b      	str	r3, [r7, #4]
 800ee34:	bf00      	nop
 800ee36:	e7fe      	b.n	800ee36 <vPortExitCritical+0x22>
 800ee38:	4b0a      	ldr	r3, [pc, #40]	; (800ee64 <vPortExitCritical+0x50>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	3b01      	subs	r3, #1
 800ee3e:	4a09      	ldr	r2, [pc, #36]	; (800ee64 <vPortExitCritical+0x50>)
 800ee40:	6013      	str	r3, [r2, #0]
 800ee42:	4b08      	ldr	r3, [pc, #32]	; (800ee64 <vPortExitCritical+0x50>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d105      	bne.n	800ee56 <vPortExitCritical+0x42>
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	603b      	str	r3, [r7, #0]
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	f383 8811 	msr	BASEPRI, r3
 800ee54:	bf00      	nop
 800ee56:	bf00      	nop
 800ee58:	370c      	adds	r7, #12
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee60:	4770      	bx	lr
 800ee62:	bf00      	nop
 800ee64:	200000ac 	.word	0x200000ac
	...

0800ee70 <PendSV_Handler>:
 800ee70:	f3ef 8009 	mrs	r0, PSP
 800ee74:	f3bf 8f6f 	isb	sy
 800ee78:	4b15      	ldr	r3, [pc, #84]	; (800eed0 <pxCurrentTCBConst>)
 800ee7a:	681a      	ldr	r2, [r3, #0]
 800ee7c:	f01e 0f10 	tst.w	lr, #16
 800ee80:	bf08      	it	eq
 800ee82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ee86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee8a:	6010      	str	r0, [r2, #0]
 800ee8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ee90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ee94:	f380 8811 	msr	BASEPRI, r0
 800ee98:	f3bf 8f4f 	dsb	sy
 800ee9c:	f3bf 8f6f 	isb	sy
 800eea0:	f7ff fc8e 	bl	800e7c0 <vTaskSwitchContext>
 800eea4:	f04f 0000 	mov.w	r0, #0
 800eea8:	f380 8811 	msr	BASEPRI, r0
 800eeac:	bc09      	pop	{r0, r3}
 800eeae:	6819      	ldr	r1, [r3, #0]
 800eeb0:	6808      	ldr	r0, [r1, #0]
 800eeb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeb6:	f01e 0f10 	tst.w	lr, #16
 800eeba:	bf08      	it	eq
 800eebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eec0:	f380 8809 	msr	PSP, r0
 800eec4:	f3bf 8f6f 	isb	sy
 800eec8:	4770      	bx	lr
 800eeca:	bf00      	nop
 800eecc:	f3af 8000 	nop.w

0800eed0 <pxCurrentTCBConst>:
 800eed0:	20000d1c 	.word	0x20000d1c
 800eed4:	bf00      	nop
 800eed6:	bf00      	nop

0800eed8 <SysTick_Handler>:
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b082      	sub	sp, #8
 800eedc:	af00      	add	r7, sp, #0
 800eede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee2:	f383 8811 	msr	BASEPRI, r3
 800eee6:	f3bf 8f6f 	isb	sy
 800eeea:	f3bf 8f4f 	dsb	sy
 800eeee:	607b      	str	r3, [r7, #4]
 800eef0:	bf00      	nop
 800eef2:	f7ff fba5 	bl	800e640 <xTaskIncrementTick>
 800eef6:	4603      	mov	r3, r0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d003      	beq.n	800ef04 <SysTick_Handler+0x2c>
 800eefc:	4b06      	ldr	r3, [pc, #24]	; (800ef18 <SysTick_Handler+0x40>)
 800eefe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef02:	601a      	str	r2, [r3, #0]
 800ef04:	2300      	movs	r3, #0
 800ef06:	603b      	str	r3, [r7, #0]
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	f383 8811 	msr	BASEPRI, r3
 800ef0e:	bf00      	nop
 800ef10:	bf00      	nop
 800ef12:	3708      	adds	r7, #8
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	e000ed04 	.word	0xe000ed04

0800ef1c <vPortSetupTimerInterrupt>:
 800ef1c:	b480      	push	{r7}
 800ef1e:	af00      	add	r7, sp, #0
 800ef20:	4b0b      	ldr	r3, [pc, #44]	; (800ef50 <vPortSetupTimerInterrupt+0x34>)
 800ef22:	2200      	movs	r2, #0
 800ef24:	601a      	str	r2, [r3, #0]
 800ef26:	4b0b      	ldr	r3, [pc, #44]	; (800ef54 <vPortSetupTimerInterrupt+0x38>)
 800ef28:	2200      	movs	r2, #0
 800ef2a:	601a      	str	r2, [r3, #0]
 800ef2c:	4b0a      	ldr	r3, [pc, #40]	; (800ef58 <vPortSetupTimerInterrupt+0x3c>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	4a0a      	ldr	r2, [pc, #40]	; (800ef5c <vPortSetupTimerInterrupt+0x40>)
 800ef32:	fba2 2303 	umull	r2, r3, r2, r3
 800ef36:	099b      	lsrs	r3, r3, #6
 800ef38:	4a09      	ldr	r2, [pc, #36]	; (800ef60 <vPortSetupTimerInterrupt+0x44>)
 800ef3a:	3b01      	subs	r3, #1
 800ef3c:	6013      	str	r3, [r2, #0]
 800ef3e:	4b04      	ldr	r3, [pc, #16]	; (800ef50 <vPortSetupTimerInterrupt+0x34>)
 800ef40:	2207      	movs	r2, #7
 800ef42:	601a      	str	r2, [r3, #0]
 800ef44:	bf00      	nop
 800ef46:	46bd      	mov	sp, r7
 800ef48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4c:	4770      	bx	lr
 800ef4e:	bf00      	nop
 800ef50:	e000e010 	.word	0xe000e010
 800ef54:	e000e018 	.word	0xe000e018
 800ef58:	20000014 	.word	0x20000014
 800ef5c:	10624dd3 	.word	0x10624dd3
 800ef60:	e000e014 	.word	0xe000e014

0800ef64 <vPortEnableVFP>:
 800ef64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ef74 <vPortEnableVFP+0x10>
 800ef68:	6801      	ldr	r1, [r0, #0]
 800ef6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ef6e:	6001      	str	r1, [r0, #0]
 800ef70:	4770      	bx	lr
 800ef72:	bf00      	nop
 800ef74:	e000ed88 	.word	0xe000ed88

0800ef78 <pvPortMalloc>:
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b08a      	sub	sp, #40	; 0x28
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	2300      	movs	r3, #0
 800ef82:	61fb      	str	r3, [r7, #28]
 800ef84:	f7ff fab2 	bl	800e4ec <vTaskSuspendAll>
 800ef88:	4b5d      	ldr	r3, [pc, #372]	; (800f100 <pvPortMalloc+0x188>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d101      	bne.n	800ef94 <pvPortMalloc+0x1c>
 800ef90:	f000 f924 	bl	800f1dc <prvHeapInit>
 800ef94:	4b5b      	ldr	r3, [pc, #364]	; (800f104 <pvPortMalloc+0x18c>)
 800ef96:	681a      	ldr	r2, [r3, #0]
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	4013      	ands	r3, r2
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	f040 8093 	bne.w	800f0c8 <pvPortMalloc+0x150>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d01d      	beq.n	800efe4 <pvPortMalloc+0x6c>
 800efa8:	2208      	movs	r2, #8
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	4413      	add	r3, r2
 800efae:	607b      	str	r3, [r7, #4]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f003 0307 	and.w	r3, r3, #7
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d014      	beq.n	800efe4 <pvPortMalloc+0x6c>
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f023 0307 	bic.w	r3, r3, #7
 800efc0:	3308      	adds	r3, #8
 800efc2:	607b      	str	r3, [r7, #4]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f003 0307 	and.w	r3, r3, #7
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d00a      	beq.n	800efe4 <pvPortMalloc+0x6c>
 800efce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd2:	f383 8811 	msr	BASEPRI, r3
 800efd6:	f3bf 8f6f 	isb	sy
 800efda:	f3bf 8f4f 	dsb	sy
 800efde:	617b      	str	r3, [r7, #20]
 800efe0:	bf00      	nop
 800efe2:	e7fe      	b.n	800efe2 <pvPortMalloc+0x6a>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d06e      	beq.n	800f0c8 <pvPortMalloc+0x150>
 800efea:	4b47      	ldr	r3, [pc, #284]	; (800f108 <pvPortMalloc+0x190>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d869      	bhi.n	800f0c8 <pvPortMalloc+0x150>
 800eff4:	4b45      	ldr	r3, [pc, #276]	; (800f10c <pvPortMalloc+0x194>)
 800eff6:	623b      	str	r3, [r7, #32]
 800eff8:	4b44      	ldr	r3, [pc, #272]	; (800f10c <pvPortMalloc+0x194>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	627b      	str	r3, [r7, #36]	; 0x24
 800effe:	e004      	b.n	800f00a <pvPortMalloc+0x92>
 800f000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f002:	623b      	str	r3, [r7, #32]
 800f004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	627b      	str	r3, [r7, #36]	; 0x24
 800f00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	687a      	ldr	r2, [r7, #4]
 800f010:	429a      	cmp	r2, r3
 800f012:	d903      	bls.n	800f01c <pvPortMalloc+0xa4>
 800f014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d1f1      	bne.n	800f000 <pvPortMalloc+0x88>
 800f01c:	4b38      	ldr	r3, [pc, #224]	; (800f100 <pvPortMalloc+0x188>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f022:	429a      	cmp	r2, r3
 800f024:	d050      	beq.n	800f0c8 <pvPortMalloc+0x150>
 800f026:	6a3b      	ldr	r3, [r7, #32]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	2208      	movs	r2, #8
 800f02c:	4413      	add	r3, r2
 800f02e:	61fb      	str	r3, [r7, #28]
 800f030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f032:	681a      	ldr	r2, [r3, #0]
 800f034:	6a3b      	ldr	r3, [r7, #32]
 800f036:	601a      	str	r2, [r3, #0]
 800f038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03a:	685a      	ldr	r2, [r3, #4]
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	1ad2      	subs	r2, r2, r3
 800f040:	2308      	movs	r3, #8
 800f042:	005b      	lsls	r3, r3, #1
 800f044:	429a      	cmp	r2, r3
 800f046:	d91f      	bls.n	800f088 <pvPortMalloc+0x110>
 800f048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	4413      	add	r3, r2
 800f04e:	61bb      	str	r3, [r7, #24]
 800f050:	69bb      	ldr	r3, [r7, #24]
 800f052:	f003 0307 	and.w	r3, r3, #7
 800f056:	2b00      	cmp	r3, #0
 800f058:	d00a      	beq.n	800f070 <pvPortMalloc+0xf8>
 800f05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f05e:	f383 8811 	msr	BASEPRI, r3
 800f062:	f3bf 8f6f 	isb	sy
 800f066:	f3bf 8f4f 	dsb	sy
 800f06a:	613b      	str	r3, [r7, #16]
 800f06c:	bf00      	nop
 800f06e:	e7fe      	b.n	800f06e <pvPortMalloc+0xf6>
 800f070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f072:	685a      	ldr	r2, [r3, #4]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	1ad2      	subs	r2, r2, r3
 800f078:	69bb      	ldr	r3, [r7, #24]
 800f07a:	605a      	str	r2, [r3, #4]
 800f07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07e:	687a      	ldr	r2, [r7, #4]
 800f080:	605a      	str	r2, [r3, #4]
 800f082:	69b8      	ldr	r0, [r7, #24]
 800f084:	f000 f90c 	bl	800f2a0 <prvInsertBlockIntoFreeList>
 800f088:	4b1f      	ldr	r3, [pc, #124]	; (800f108 <pvPortMalloc+0x190>)
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	1ad3      	subs	r3, r2, r3
 800f092:	4a1d      	ldr	r2, [pc, #116]	; (800f108 <pvPortMalloc+0x190>)
 800f094:	6013      	str	r3, [r2, #0]
 800f096:	4b1c      	ldr	r3, [pc, #112]	; (800f108 <pvPortMalloc+0x190>)
 800f098:	681a      	ldr	r2, [r3, #0]
 800f09a:	4b1d      	ldr	r3, [pc, #116]	; (800f110 <pvPortMalloc+0x198>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d203      	bcs.n	800f0aa <pvPortMalloc+0x132>
 800f0a2:	4b19      	ldr	r3, [pc, #100]	; (800f108 <pvPortMalloc+0x190>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	4a1a      	ldr	r2, [pc, #104]	; (800f110 <pvPortMalloc+0x198>)
 800f0a8:	6013      	str	r3, [r2, #0]
 800f0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ac:	685a      	ldr	r2, [r3, #4]
 800f0ae:	4b15      	ldr	r3, [pc, #84]	; (800f104 <pvPortMalloc+0x18c>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	431a      	orrs	r2, r3
 800f0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b6:	605a      	str	r2, [r3, #4]
 800f0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	601a      	str	r2, [r3, #0]
 800f0be:	4b15      	ldr	r3, [pc, #84]	; (800f114 <pvPortMalloc+0x19c>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	4a13      	ldr	r2, [pc, #76]	; (800f114 <pvPortMalloc+0x19c>)
 800f0c6:	6013      	str	r3, [r2, #0]
 800f0c8:	f7ff fa1e 	bl	800e508 <xTaskResumeAll>
 800f0cc:	69fb      	ldr	r3, [r7, #28]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d101      	bne.n	800f0d6 <pvPortMalloc+0x15e>
 800f0d2:	f7f2 f912 	bl	80012fa <vApplicationMallocFailedHook>
 800f0d6:	69fb      	ldr	r3, [r7, #28]
 800f0d8:	f003 0307 	and.w	r3, r3, #7
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d00a      	beq.n	800f0f6 <pvPortMalloc+0x17e>
 800f0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e4:	f383 8811 	msr	BASEPRI, r3
 800f0e8:	f3bf 8f6f 	isb	sy
 800f0ec:	f3bf 8f4f 	dsb	sy
 800f0f0:	60fb      	str	r3, [r7, #12]
 800f0f2:	bf00      	nop
 800f0f4:	e7fe      	b.n	800f0f4 <pvPortMalloc+0x17c>
 800f0f6:	69fb      	ldr	r3, [r7, #28]
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3728      	adds	r7, #40	; 0x28
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}
 800f100:	20004a58 	.word	0x20004a58
 800f104:	20004a6c 	.word	0x20004a6c
 800f108:	20004a5c 	.word	0x20004a5c
 800f10c:	20004a50 	.word	0x20004a50
 800f110:	20004a60 	.word	0x20004a60
 800f114:	20004a64 	.word	0x20004a64

0800f118 <vPortFree>:
 800f118:	b580      	push	{r7, lr}
 800f11a:	b086      	sub	sp, #24
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	617b      	str	r3, [r7, #20]
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d04d      	beq.n	800f1c6 <vPortFree+0xae>
 800f12a:	2308      	movs	r3, #8
 800f12c:	425b      	negs	r3, r3
 800f12e:	697a      	ldr	r2, [r7, #20]
 800f130:	4413      	add	r3, r2
 800f132:	617b      	str	r3, [r7, #20]
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	613b      	str	r3, [r7, #16]
 800f138:	693b      	ldr	r3, [r7, #16]
 800f13a:	685a      	ldr	r2, [r3, #4]
 800f13c:	4b24      	ldr	r3, [pc, #144]	; (800f1d0 <vPortFree+0xb8>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	4013      	ands	r3, r2
 800f142:	2b00      	cmp	r3, #0
 800f144:	d10a      	bne.n	800f15c <vPortFree+0x44>
 800f146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f14a:	f383 8811 	msr	BASEPRI, r3
 800f14e:	f3bf 8f6f 	isb	sy
 800f152:	f3bf 8f4f 	dsb	sy
 800f156:	60fb      	str	r3, [r7, #12]
 800f158:	bf00      	nop
 800f15a:	e7fe      	b.n	800f15a <vPortFree+0x42>
 800f15c:	693b      	ldr	r3, [r7, #16]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d00a      	beq.n	800f17a <vPortFree+0x62>
 800f164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f168:	f383 8811 	msr	BASEPRI, r3
 800f16c:	f3bf 8f6f 	isb	sy
 800f170:	f3bf 8f4f 	dsb	sy
 800f174:	60bb      	str	r3, [r7, #8]
 800f176:	bf00      	nop
 800f178:	e7fe      	b.n	800f178 <vPortFree+0x60>
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	685a      	ldr	r2, [r3, #4]
 800f17e:	4b14      	ldr	r3, [pc, #80]	; (800f1d0 <vPortFree+0xb8>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	4013      	ands	r3, r2
 800f184:	2b00      	cmp	r3, #0
 800f186:	d01e      	beq.n	800f1c6 <vPortFree+0xae>
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d11a      	bne.n	800f1c6 <vPortFree+0xae>
 800f190:	693b      	ldr	r3, [r7, #16]
 800f192:	685a      	ldr	r2, [r3, #4]
 800f194:	4b0e      	ldr	r3, [pc, #56]	; (800f1d0 <vPortFree+0xb8>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	43db      	mvns	r3, r3
 800f19a:	401a      	ands	r2, r3
 800f19c:	693b      	ldr	r3, [r7, #16]
 800f19e:	605a      	str	r2, [r3, #4]
 800f1a0:	f7ff f9a4 	bl	800e4ec <vTaskSuspendAll>
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	685a      	ldr	r2, [r3, #4]
 800f1a8:	4b0a      	ldr	r3, [pc, #40]	; (800f1d4 <vPortFree+0xbc>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	4413      	add	r3, r2
 800f1ae:	4a09      	ldr	r2, [pc, #36]	; (800f1d4 <vPortFree+0xbc>)
 800f1b0:	6013      	str	r3, [r2, #0]
 800f1b2:	6938      	ldr	r0, [r7, #16]
 800f1b4:	f000 f874 	bl	800f2a0 <prvInsertBlockIntoFreeList>
 800f1b8:	4b07      	ldr	r3, [pc, #28]	; (800f1d8 <vPortFree+0xc0>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	3301      	adds	r3, #1
 800f1be:	4a06      	ldr	r2, [pc, #24]	; (800f1d8 <vPortFree+0xc0>)
 800f1c0:	6013      	str	r3, [r2, #0]
 800f1c2:	f7ff f9a1 	bl	800e508 <xTaskResumeAll>
 800f1c6:	bf00      	nop
 800f1c8:	3718      	adds	r7, #24
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}
 800f1ce:	bf00      	nop
 800f1d0:	20004a6c 	.word	0x20004a6c
 800f1d4:	20004a5c 	.word	0x20004a5c
 800f1d8:	20004a68 	.word	0x20004a68

0800f1dc <prvHeapInit>:
 800f1dc:	b480      	push	{r7}
 800f1de:	b085      	sub	sp, #20
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f1e6:	60bb      	str	r3, [r7, #8]
 800f1e8:	4b27      	ldr	r3, [pc, #156]	; (800f288 <prvHeapInit+0xac>)
 800f1ea:	60fb      	str	r3, [r7, #12]
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	f003 0307 	and.w	r3, r3, #7
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d00c      	beq.n	800f210 <prvHeapInit+0x34>
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	3307      	adds	r3, #7
 800f1fa:	60fb      	str	r3, [r7, #12]
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f023 0307 	bic.w	r3, r3, #7
 800f202:	60fb      	str	r3, [r7, #12]
 800f204:	68ba      	ldr	r2, [r7, #8]
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	1ad3      	subs	r3, r2, r3
 800f20a:	4a1f      	ldr	r2, [pc, #124]	; (800f288 <prvHeapInit+0xac>)
 800f20c:	4413      	add	r3, r2
 800f20e:	60bb      	str	r3, [r7, #8]
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	607b      	str	r3, [r7, #4]
 800f214:	4a1d      	ldr	r2, [pc, #116]	; (800f28c <prvHeapInit+0xb0>)
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6013      	str	r3, [r2, #0]
 800f21a:	4b1c      	ldr	r3, [pc, #112]	; (800f28c <prvHeapInit+0xb0>)
 800f21c:	2200      	movs	r2, #0
 800f21e:	605a      	str	r2, [r3, #4]
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	68ba      	ldr	r2, [r7, #8]
 800f224:	4413      	add	r3, r2
 800f226:	60fb      	str	r3, [r7, #12]
 800f228:	2208      	movs	r2, #8
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	1a9b      	subs	r3, r3, r2
 800f22e:	60fb      	str	r3, [r7, #12]
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	f023 0307 	bic.w	r3, r3, #7
 800f236:	60fb      	str	r3, [r7, #12]
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	4a15      	ldr	r2, [pc, #84]	; (800f290 <prvHeapInit+0xb4>)
 800f23c:	6013      	str	r3, [r2, #0]
 800f23e:	4b14      	ldr	r3, [pc, #80]	; (800f290 <prvHeapInit+0xb4>)
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	2200      	movs	r2, #0
 800f244:	605a      	str	r2, [r3, #4]
 800f246:	4b12      	ldr	r3, [pc, #72]	; (800f290 <prvHeapInit+0xb4>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	2200      	movs	r2, #0
 800f24c:	601a      	str	r2, [r3, #0]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	603b      	str	r3, [r7, #0]
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	68fa      	ldr	r2, [r7, #12]
 800f256:	1ad2      	subs	r2, r2, r3
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	605a      	str	r2, [r3, #4]
 800f25c:	4b0c      	ldr	r3, [pc, #48]	; (800f290 <prvHeapInit+0xb4>)
 800f25e:	681a      	ldr	r2, [r3, #0]
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	601a      	str	r2, [r3, #0]
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	685b      	ldr	r3, [r3, #4]
 800f268:	4a0a      	ldr	r2, [pc, #40]	; (800f294 <prvHeapInit+0xb8>)
 800f26a:	6013      	str	r3, [r2, #0]
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	4a09      	ldr	r2, [pc, #36]	; (800f298 <prvHeapInit+0xbc>)
 800f272:	6013      	str	r3, [r2, #0]
 800f274:	4b09      	ldr	r3, [pc, #36]	; (800f29c <prvHeapInit+0xc0>)
 800f276:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f27a:	601a      	str	r2, [r3, #0]
 800f27c:	bf00      	nop
 800f27e:	3714      	adds	r7, #20
 800f280:	46bd      	mov	sp, r7
 800f282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f286:	4770      	bx	lr
 800f288:	20000e50 	.word	0x20000e50
 800f28c:	20004a50 	.word	0x20004a50
 800f290:	20004a58 	.word	0x20004a58
 800f294:	20004a60 	.word	0x20004a60
 800f298:	20004a5c 	.word	0x20004a5c
 800f29c:	20004a6c 	.word	0x20004a6c

0800f2a0 <prvInsertBlockIntoFreeList>:
 800f2a0:	b480      	push	{r7}
 800f2a2:	b085      	sub	sp, #20
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	4b28      	ldr	r3, [pc, #160]	; (800f34c <prvInsertBlockIntoFreeList+0xac>)
 800f2aa:	60fb      	str	r3, [r7, #12]
 800f2ac:	e002      	b.n	800f2b4 <prvInsertBlockIntoFreeList+0x14>
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	60fb      	str	r3, [r7, #12]
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	687a      	ldr	r2, [r7, #4]
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d8f7      	bhi.n	800f2ae <prvInsertBlockIntoFreeList+0xe>
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	60bb      	str	r3, [r7, #8]
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	685b      	ldr	r3, [r3, #4]
 800f2c6:	68ba      	ldr	r2, [r7, #8]
 800f2c8:	4413      	add	r3, r2
 800f2ca:	687a      	ldr	r2, [r7, #4]
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	d108      	bne.n	800f2e2 <prvInsertBlockIntoFreeList+0x42>
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	685a      	ldr	r2, [r3, #4]
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	685b      	ldr	r3, [r3, #4]
 800f2d8:	441a      	add	r2, r3
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	605a      	str	r2, [r3, #4]
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	607b      	str	r3, [r7, #4]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	60bb      	str	r3, [r7, #8]
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	68ba      	ldr	r2, [r7, #8]
 800f2ec:	441a      	add	r2, r3
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	d118      	bne.n	800f328 <prvInsertBlockIntoFreeList+0x88>
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	681a      	ldr	r2, [r3, #0]
 800f2fa:	4b15      	ldr	r3, [pc, #84]	; (800f350 <prvInsertBlockIntoFreeList+0xb0>)
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d00d      	beq.n	800f31e <prvInsertBlockIntoFreeList+0x7e>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	685a      	ldr	r2, [r3, #4]
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	685b      	ldr	r3, [r3, #4]
 800f30c:	441a      	add	r2, r3
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	605a      	str	r2, [r3, #4]
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	681a      	ldr	r2, [r3, #0]
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	601a      	str	r2, [r3, #0]
 800f31c:	e008      	b.n	800f330 <prvInsertBlockIntoFreeList+0x90>
 800f31e:	4b0c      	ldr	r3, [pc, #48]	; (800f350 <prvInsertBlockIntoFreeList+0xb0>)
 800f320:	681a      	ldr	r2, [r3, #0]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	601a      	str	r2, [r3, #0]
 800f326:	e003      	b.n	800f330 <prvInsertBlockIntoFreeList+0x90>
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	681a      	ldr	r2, [r3, #0]
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	601a      	str	r2, [r3, #0]
 800f330:	68fa      	ldr	r2, [r7, #12]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	429a      	cmp	r2, r3
 800f336:	d002      	beq.n	800f33e <prvInsertBlockIntoFreeList+0x9e>
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	687a      	ldr	r2, [r7, #4]
 800f33c:	601a      	str	r2, [r3, #0]
 800f33e:	bf00      	nop
 800f340:	3714      	adds	r7, #20
 800f342:	46bd      	mov	sp, r7
 800f344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f348:	4770      	bx	lr
 800f34a:	bf00      	nop
 800f34c:	20004a50 	.word	0x20004a50
 800f350:	20004a58 	.word	0x20004a58

0800f354 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f358:	2200      	movs	r2, #0
 800f35a:	4912      	ldr	r1, [pc, #72]	; (800f3a4 <MX_USB_DEVICE_Init+0x50>)
 800f35c:	4812      	ldr	r0, [pc, #72]	; (800f3a8 <MX_USB_DEVICE_Init+0x54>)
 800f35e:	f7fd fa4f 	bl	800c800 <USBD_Init>
 800f362:	4603      	mov	r3, r0
 800f364:	2b00      	cmp	r3, #0
 800f366:	d001      	beq.n	800f36c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f368:	f7f3 fca4 	bl	8002cb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f36c:	490f      	ldr	r1, [pc, #60]	; (800f3ac <MX_USB_DEVICE_Init+0x58>)
 800f36e:	480e      	ldr	r0, [pc, #56]	; (800f3a8 <MX_USB_DEVICE_Init+0x54>)
 800f370:	f7fd fa76 	bl	800c860 <USBD_RegisterClass>
 800f374:	4603      	mov	r3, r0
 800f376:	2b00      	cmp	r3, #0
 800f378:	d001      	beq.n	800f37e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f37a:	f7f3 fc9b 	bl	8002cb4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f37e:	490c      	ldr	r1, [pc, #48]	; (800f3b0 <MX_USB_DEVICE_Init+0x5c>)
 800f380:	4809      	ldr	r0, [pc, #36]	; (800f3a8 <MX_USB_DEVICE_Init+0x54>)
 800f382:	f7fd f967 	bl	800c654 <USBD_CDC_RegisterInterface>
 800f386:	4603      	mov	r3, r0
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d001      	beq.n	800f390 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f38c:	f7f3 fc92 	bl	8002cb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f390:	4805      	ldr	r0, [pc, #20]	; (800f3a8 <MX_USB_DEVICE_Init+0x54>)
 800f392:	f7fd fa9b 	bl	800c8cc <USBD_Start>
 800f396:	4603      	mov	r3, r0
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d001      	beq.n	800f3a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f39c:	f7f3 fc8a 	bl	8002cb4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f3a0:	bf00      	nop
 800f3a2:	bd80      	pop	{r7, pc}
 800f3a4:	200000c4 	.word	0x200000c4
 800f3a8:	20004a70 	.word	0x20004a70
 800f3ac:	2000002c 	.word	0x2000002c
 800f3b0:	200000b0 	.word	0x200000b0

0800f3b4 <CDC_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	4905      	ldr	r1, [pc, #20]	; (800f3d0 <CDC_Init_FS+0x1c>)
 800f3bc:	4805      	ldr	r0, [pc, #20]	; (800f3d4 <CDC_Init_FS+0x20>)
 800f3be:	f7fd f963 	bl	800c688 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f3c2:	4905      	ldr	r1, [pc, #20]	; (800f3d8 <CDC_Init_FS+0x24>)
 800f3c4:	4803      	ldr	r0, [pc, #12]	; (800f3d4 <CDC_Init_FS+0x20>)
 800f3c6:	f7fd f981 	bl	800c6cc <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800f3ca:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	bd80      	pop	{r7, pc}
 800f3d0:	20005150 	.word	0x20005150
 800f3d4:	20004a70 	.word	0x20004a70
 800f3d8:	20004d50 	.word	0x20004d50

0800f3dc <CDC_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void)
{
 800f3dc:	b480      	push	{r7}
 800f3de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 800f3e0:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ea:	4770      	bx	lr

0800f3ec <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800f3ec:	b480      	push	{r7}
 800f3ee:	b083      	sub	sp, #12
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	6039      	str	r1, [r7, #0]
 800f3f6:	71fb      	strb	r3, [r7, #7]
 800f3f8:	4613      	mov	r3, r2
 800f3fa:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd)
 800f3fc:	79fb      	ldrb	r3, [r7, #7]
 800f3fe:	2b23      	cmp	r3, #35	; 0x23
 800f400:	f200 808c 	bhi.w	800f51c <CDC_Control_FS+0x130>
 800f404:	a201      	add	r2, pc, #4	; (adr r2, 800f40c <CDC_Control_FS+0x20>)
 800f406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f40a:	bf00      	nop
 800f40c:	0800f51d 	.word	0x0800f51d
 800f410:	0800f51d 	.word	0x0800f51d
 800f414:	0800f51d 	.word	0x0800f51d
 800f418:	0800f51d 	.word	0x0800f51d
 800f41c:	0800f51d 	.word	0x0800f51d
 800f420:	0800f51d 	.word	0x0800f51d
 800f424:	0800f51d 	.word	0x0800f51d
 800f428:	0800f51d 	.word	0x0800f51d
 800f42c:	0800f51d 	.word	0x0800f51d
 800f430:	0800f51d 	.word	0x0800f51d
 800f434:	0800f51d 	.word	0x0800f51d
 800f438:	0800f51d 	.word	0x0800f51d
 800f43c:	0800f51d 	.word	0x0800f51d
 800f440:	0800f51d 	.word	0x0800f51d
 800f444:	0800f51d 	.word	0x0800f51d
 800f448:	0800f51d 	.word	0x0800f51d
 800f44c:	0800f51d 	.word	0x0800f51d
 800f450:	0800f51d 	.word	0x0800f51d
 800f454:	0800f51d 	.word	0x0800f51d
 800f458:	0800f51d 	.word	0x0800f51d
 800f45c:	0800f51d 	.word	0x0800f51d
 800f460:	0800f51d 	.word	0x0800f51d
 800f464:	0800f51d 	.word	0x0800f51d
 800f468:	0800f51d 	.word	0x0800f51d
 800f46c:	0800f51d 	.word	0x0800f51d
 800f470:	0800f51d 	.word	0x0800f51d
 800f474:	0800f51d 	.word	0x0800f51d
 800f478:	0800f51d 	.word	0x0800f51d
 800f47c:	0800f51d 	.word	0x0800f51d
 800f480:	0800f51d 	.word	0x0800f51d
 800f484:	0800f51d 	.word	0x0800f51d
 800f488:	0800f51d 	.word	0x0800f51d
 800f48c:	0800f49d 	.word	0x0800f49d
 800f490:	0800f4d7 	.word	0x0800f4d7
 800f494:	0800f51d 	.word	0x0800f51d
 800f498:	0800f51d 	.word	0x0800f51d
			/*                                        3 - Mark                             */
			/*                                        4 - Space                            */
			/* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
			/*******************************************************************************/
		case CDC_SET_LINE_CODING:
			tempBuffer[0] = pbuf[0];
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	781a      	ldrb	r2, [r3, #0]
 800f4a0:	4b22      	ldr	r3, [pc, #136]	; (800f52c <CDC_Control_FS+0x140>)
 800f4a2:	701a      	strb	r2, [r3, #0]
			tempBuffer[1] = pbuf[1];
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	785a      	ldrb	r2, [r3, #1]
 800f4a8:	4b20      	ldr	r3, [pc, #128]	; (800f52c <CDC_Control_FS+0x140>)
 800f4aa:	705a      	strb	r2, [r3, #1]
			tempBuffer[2] = pbuf[2];
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	789a      	ldrb	r2, [r3, #2]
 800f4b0:	4b1e      	ldr	r3, [pc, #120]	; (800f52c <CDC_Control_FS+0x140>)
 800f4b2:	709a      	strb	r2, [r3, #2]
			tempBuffer[3] = pbuf[3];
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	78da      	ldrb	r2, [r3, #3]
 800f4b8:	4b1c      	ldr	r3, [pc, #112]	; (800f52c <CDC_Control_FS+0x140>)
 800f4ba:	70da      	strb	r2, [r3, #3]
			tempBuffer[4] = pbuf[4];
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	791a      	ldrb	r2, [r3, #4]
 800f4c0:	4b1a      	ldr	r3, [pc, #104]	; (800f52c <CDC_Control_FS+0x140>)
 800f4c2:	711a      	strb	r2, [r3, #4]
			tempBuffer[5] = pbuf[5];
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	795a      	ldrb	r2, [r3, #5]
 800f4c8:	4b18      	ldr	r3, [pc, #96]	; (800f52c <CDC_Control_FS+0x140>)
 800f4ca:	715a      	strb	r2, [r3, #5]
			tempBuffer[6] = pbuf[6];
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	799a      	ldrb	r2, [r3, #6]
 800f4d0:	4b16      	ldr	r3, [pc, #88]	; (800f52c <CDC_Control_FS+0x140>)
 800f4d2:	719a      	strb	r2, [r3, #6]
			break;
 800f4d4:	e023      	b.n	800f51e <CDC_Control_FS+0x132>

		case CDC_GET_LINE_CODING:
			pbuf[0] = tempBuffer[0];
 800f4d6:	4b15      	ldr	r3, [pc, #84]	; (800f52c <CDC_Control_FS+0x140>)
 800f4d8:	781a      	ldrb	r2, [r3, #0]
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	701a      	strb	r2, [r3, #0]
			pbuf[1] = tempBuffer[1];
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	4a12      	ldr	r2, [pc, #72]	; (800f52c <CDC_Control_FS+0x140>)
 800f4e4:	7852      	ldrb	r2, [r2, #1]
 800f4e6:	701a      	strb	r2, [r3, #0]
			pbuf[2] = tempBuffer[2];
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	3302      	adds	r3, #2
 800f4ec:	4a0f      	ldr	r2, [pc, #60]	; (800f52c <CDC_Control_FS+0x140>)
 800f4ee:	7892      	ldrb	r2, [r2, #2]
 800f4f0:	701a      	strb	r2, [r3, #0]
			pbuf[3] = tempBuffer[3];
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	3303      	adds	r3, #3
 800f4f6:	4a0d      	ldr	r2, [pc, #52]	; (800f52c <CDC_Control_FS+0x140>)
 800f4f8:	78d2      	ldrb	r2, [r2, #3]
 800f4fa:	701a      	strb	r2, [r3, #0]
			pbuf[4] = tempBuffer[4];
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	3304      	adds	r3, #4
 800f500:	4a0a      	ldr	r2, [pc, #40]	; (800f52c <CDC_Control_FS+0x140>)
 800f502:	7912      	ldrb	r2, [r2, #4]
 800f504:	701a      	strb	r2, [r3, #0]
			pbuf[5] = tempBuffer[5];
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	3305      	adds	r3, #5
 800f50a:	4a08      	ldr	r2, [pc, #32]	; (800f52c <CDC_Control_FS+0x140>)
 800f50c:	7952      	ldrb	r2, [r2, #5]
 800f50e:	701a      	strb	r2, [r3, #0]
			pbuf[6] = tempBuffer[6];
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	3306      	adds	r3, #6
 800f514:	4a05      	ldr	r2, [pc, #20]	; (800f52c <CDC_Control_FS+0x140>)
 800f516:	7992      	ldrb	r2, [r2, #6]
 800f518:	701a      	strb	r2, [r3, #0]
			break;
 800f51a:	e000      	b.n	800f51e <CDC_Control_FS+0x132>
		case CDC_SEND_BREAK:

			break;

		default:
			break;
 800f51c:	bf00      	nop
	}

	return (USBD_OK);
 800f51e:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 800f520:	4618      	mov	r0, r3
 800f522:	370c      	adds	r7, #12
 800f524:	46bd      	mov	sp, r7
 800f526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52a:	4770      	bx	lr
 800f52c:	20005550 	.word	0x20005550

0800f530 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b082      	sub	sp, #8
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f53a:	6879      	ldr	r1, [r7, #4]
 800f53c:	4809      	ldr	r0, [pc, #36]	; (800f564 <CDC_Receive_FS+0x34>)
 800f53e:	f7fd f8c5 	bl	800c6cc <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f542:	4808      	ldr	r0, [pc, #32]	; (800f564 <CDC_Receive_FS+0x34>)
 800f544:	f7fd f926 	bl	800c794 <USBD_CDC_ReceivePacket>
	UserRxBufferFS[APP_RX_DATA_SIZE] = 0;
 800f548:	4b07      	ldr	r3, [pc, #28]	; (800f568 <CDC_Receive_FS+0x38>)
 800f54a:	2200      	movs	r2, #0
 800f54c:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	USBReceiveHandler(UserRxBufferFS, Len);
 800f550:	6839      	ldr	r1, [r7, #0]
 800f552:	4805      	ldr	r0, [pc, #20]	; (800f568 <CDC_Receive_FS+0x38>)
 800f554:	f000 f842 	bl	800f5dc <USBReceiveHandler>
	return (USBD_OK);
 800f558:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	3708      	adds	r7, #8
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}
 800f562:	bf00      	nop
 800f564:	20004a70 	.word	0x20004a70
 800f568:	20004d50 	.word	0x20004d50

0800f56c <CDC_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b084      	sub	sp, #16
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	460b      	mov	r3, r1
 800f576:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 800f578:	2300      	movs	r3, #0
 800f57a:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 800f57c:	4b0d      	ldr	r3, [pc, #52]	; (800f5b4 <CDC_Transmit_FS+0x48>)
 800f57e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f582:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0)
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d001      	beq.n	800f592 <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 800f58e:	2301      	movs	r3, #1
 800f590:	e00b      	b.n	800f5aa <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f592:	887b      	ldrh	r3, [r7, #2]
 800f594:	461a      	mov	r2, r3
 800f596:	6879      	ldr	r1, [r7, #4]
 800f598:	4806      	ldr	r0, [pc, #24]	; (800f5b4 <CDC_Transmit_FS+0x48>)
 800f59a:	f7fd f875 	bl	800c688 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f59e:	4805      	ldr	r0, [pc, #20]	; (800f5b4 <CDC_Transmit_FS+0x48>)
 800f5a0:	f7fd f8b2 	bl	800c708 <USBD_CDC_TransmitPacket>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 800f5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	3710      	adds	r7, #16
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}
 800f5b2:	bf00      	nop
 800f5b4:	20004a70 	.word	0x20004a70

0800f5b8 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	b087      	sub	sp, #28
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	60f8      	str	r0, [r7, #12]
 800f5c0:	60b9      	str	r1, [r7, #8]
 800f5c2:	4613      	mov	r3, r2
 800f5c4:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 800f5ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	371c      	adds	r7, #28
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d8:	4770      	bx	lr
	...

0800f5dc <USBReceiveHandler>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void USBReceiveHandler(uint8_t *buf, uint32_t *len)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b082      	sub	sp, #8
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
 800f5e4:	6039      	str	r1, [r7, #0]
	USBRXDataBuffer = buf;
 800f5e6:	4a19      	ldr	r2, [pc, #100]	; (800f64c <USBReceiveHandler+0x70>)
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6013      	str	r3, [r2, #0]
	USBRXDataLength = *len;
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	b2da      	uxtb	r2, r3
 800f5f2:	4b17      	ldr	r3, [pc, #92]	; (800f650 <USBReceiveHandler+0x74>)
 800f5f4:	701a      	strb	r2, [r3, #0]
	USBRXDataReady = 1;
 800f5f6:	4b17      	ldr	r3, [pc, #92]	; (800f654 <USBReceiveHandler+0x78>)
 800f5f8:	2201      	movs	r2, #1
 800f5fa:	701a      	strb	r2, [r3, #0]
//	printf("test=%s\r\n", USBRXDataBuffer);
//	sprintf("%0.1fC", *USBRXDataBuffer);
//	CDC_Transmit_FS((uint8_t*) (USBRXDataBuffer), USBRXDataLength);
	switch (USB_State)
 800f5fc:	4b16      	ldr	r3, [pc, #88]	; (800f658 <USBReceiveHandler+0x7c>)
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d002      	beq.n	800f60a <USBReceiveHandler+0x2e>
 800f604:	2b01      	cmp	r3, #1
 800f606:	d016      	beq.n	800f636 <USBReceiveHandler+0x5a>
		case USB_APP:
			g_regMapUpdateFlag = 1;
			USB_State = USB_START;
			break;
	}
}
 800f608:	e01c      	b.n	800f644 <USBReceiveHandler+0x68>
			if (USBRXDataBuffer[0] == '*' && USBRXDataBuffer[2] == '#')
 800f60a:	4b10      	ldr	r3, [pc, #64]	; (800f64c <USBReceiveHandler+0x70>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	781b      	ldrb	r3, [r3, #0]
 800f610:	2b2a      	cmp	r3, #42	; 0x2a
 800f612:	d10c      	bne.n	800f62e <USBReceiveHandler+0x52>
 800f614:	4b0d      	ldr	r3, [pc, #52]	; (800f64c <USBReceiveHandler+0x70>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	3302      	adds	r3, #2
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	2b23      	cmp	r3, #35	; 0x23
 800f61e:	d106      	bne.n	800f62e <USBReceiveHandler+0x52>
				USB_State = USB_APP;
 800f620:	4b0d      	ldr	r3, [pc, #52]	; (800f658 <USBReceiveHandler+0x7c>)
 800f622:	2201      	movs	r2, #1
 800f624:	701a      	strb	r2, [r3, #0]
				printf("ACK\r\n");
 800f626:	480d      	ldr	r0, [pc, #52]	; (800f65c <USBReceiveHandler+0x80>)
 800f628:	f001 fb20 	bl	8010c6c <puts>
			break;
 800f62c:	e00a      	b.n	800f644 <USBReceiveHandler+0x68>
				USB_State = USB_START;
 800f62e:	4b0a      	ldr	r3, [pc, #40]	; (800f658 <USBReceiveHandler+0x7c>)
 800f630:	2200      	movs	r2, #0
 800f632:	701a      	strb	r2, [r3, #0]
			break;
 800f634:	e006      	b.n	800f644 <USBReceiveHandler+0x68>
			g_regMapUpdateFlag = 1;
 800f636:	4b0a      	ldr	r3, [pc, #40]	; (800f660 <USBReceiveHandler+0x84>)
 800f638:	2201      	movs	r2, #1
 800f63a:	701a      	strb	r2, [r3, #0]
			USB_State = USB_START;
 800f63c:	4b06      	ldr	r3, [pc, #24]	; (800f658 <USBReceiveHandler+0x7c>)
 800f63e:	2200      	movs	r2, #0
 800f640:	701a      	strb	r2, [r3, #0]
			break;
 800f642:	bf00      	nop
}
 800f644:	bf00      	nop
 800f646:	3708      	adds	r7, #8
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}
 800f64c:	2000069c 	.word	0x2000069c
 800f650:	20000699 	.word	0x20000699
 800f654:	20000698 	.word	0x20000698
 800f658:	20004d4c 	.word	0x20004d4c
 800f65c:	080132c4 	.word	0x080132c4
 800f660:	200006a0 	.word	0x200006a0

0800f664 <_write>:

int _write(int file, char *ptr, int len)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b084      	sub	sp, #16
 800f668:	af00      	add	r7, sp, #0
 800f66a:	60f8      	str	r0, [r7, #12]
 800f66c:	60b9      	str	r1, [r7, #8]
 800f66e:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	b29b      	uxth	r3, r3
 800f674:	4619      	mov	r1, r3
 800f676:	68b8      	ldr	r0, [r7, #8]
 800f678:	f7ff ff78 	bl	800f56c <CDC_Transmit_FS>
	return len;
 800f67c:	687b      	ldr	r3, [r7, #4]
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3710      	adds	r7, #16
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}
	...

0800f688 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f688:	b480      	push	{r7}
 800f68a:	b083      	sub	sp, #12
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	4603      	mov	r3, r0
 800f690:	6039      	str	r1, [r7, #0]
 800f692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	2212      	movs	r2, #18
 800f698:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f69a:	4b03      	ldr	r3, [pc, #12]	; (800f6a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	370c      	adds	r7, #12
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a6:	4770      	bx	lr
 800f6a8:	200000e0 	.word	0x200000e0

0800f6ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b083      	sub	sp, #12
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	6039      	str	r1, [r7, #0]
 800f6b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	2204      	movs	r2, #4
 800f6bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f6be:	4b03      	ldr	r3, [pc, #12]	; (800f6cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	370c      	adds	r7, #12
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr
 800f6cc:	200000f4 	.word	0x200000f4

0800f6d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b082      	sub	sp, #8
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	6039      	str	r1, [r7, #0]
 800f6da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f6dc:	79fb      	ldrb	r3, [r7, #7]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d105      	bne.n	800f6ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f6e2:	683a      	ldr	r2, [r7, #0]
 800f6e4:	4907      	ldr	r1, [pc, #28]	; (800f704 <USBD_FS_ProductStrDescriptor+0x34>)
 800f6e6:	4808      	ldr	r0, [pc, #32]	; (800f708 <USBD_FS_ProductStrDescriptor+0x38>)
 800f6e8:	f7fe fa9c 	bl	800dc24 <USBD_GetString>
 800f6ec:	e004      	b.n	800f6f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f6ee:	683a      	ldr	r2, [r7, #0]
 800f6f0:	4904      	ldr	r1, [pc, #16]	; (800f704 <USBD_FS_ProductStrDescriptor+0x34>)
 800f6f2:	4805      	ldr	r0, [pc, #20]	; (800f708 <USBD_FS_ProductStrDescriptor+0x38>)
 800f6f4:	f7fe fa96 	bl	800dc24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f6f8:	4b02      	ldr	r3, [pc, #8]	; (800f704 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	3708      	adds	r7, #8
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd80      	pop	{r7, pc}
 800f702:	bf00      	nop
 800f704:	20005558 	.word	0x20005558
 800f708:	080132cc 	.word	0x080132cc

0800f70c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b082      	sub	sp, #8
 800f710:	af00      	add	r7, sp, #0
 800f712:	4603      	mov	r3, r0
 800f714:	6039      	str	r1, [r7, #0]
 800f716:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f718:	683a      	ldr	r2, [r7, #0]
 800f71a:	4904      	ldr	r1, [pc, #16]	; (800f72c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f71c:	4804      	ldr	r0, [pc, #16]	; (800f730 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f71e:	f7fe fa81 	bl	800dc24 <USBD_GetString>
  return USBD_StrDesc;
 800f722:	4b02      	ldr	r3, [pc, #8]	; (800f72c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f724:	4618      	mov	r0, r3
 800f726:	3708      	adds	r7, #8
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}
 800f72c:	20005558 	.word	0x20005558
 800f730:	080132e4 	.word	0x080132e4

0800f734 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b082      	sub	sp, #8
 800f738:	af00      	add	r7, sp, #0
 800f73a:	4603      	mov	r3, r0
 800f73c:	6039      	str	r1, [r7, #0]
 800f73e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	221a      	movs	r2, #26
 800f744:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f746:	f000 f843 	bl	800f7d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f74a:	4b02      	ldr	r3, [pc, #8]	; (800f754 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3708      	adds	r7, #8
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}
 800f754:	200000f8 	.word	0x200000f8

0800f758 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	4603      	mov	r3, r0
 800f760:	6039      	str	r1, [r7, #0]
 800f762:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f764:	79fb      	ldrb	r3, [r7, #7]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d105      	bne.n	800f776 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f76a:	683a      	ldr	r2, [r7, #0]
 800f76c:	4907      	ldr	r1, [pc, #28]	; (800f78c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f76e:	4808      	ldr	r0, [pc, #32]	; (800f790 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f770:	f7fe fa58 	bl	800dc24 <USBD_GetString>
 800f774:	e004      	b.n	800f780 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f776:	683a      	ldr	r2, [r7, #0]
 800f778:	4904      	ldr	r1, [pc, #16]	; (800f78c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f77a:	4805      	ldr	r0, [pc, #20]	; (800f790 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f77c:	f7fe fa52 	bl	800dc24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f780:	4b02      	ldr	r3, [pc, #8]	; (800f78c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f782:	4618      	mov	r0, r3
 800f784:	3708      	adds	r7, #8
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}
 800f78a:	bf00      	nop
 800f78c:	20005558 	.word	0x20005558
 800f790:	080132f8 	.word	0x080132f8

0800f794 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	af00      	add	r7, sp, #0
 800f79a:	4603      	mov	r3, r0
 800f79c:	6039      	str	r1, [r7, #0]
 800f79e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f7a0:	79fb      	ldrb	r3, [r7, #7]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d105      	bne.n	800f7b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f7a6:	683a      	ldr	r2, [r7, #0]
 800f7a8:	4907      	ldr	r1, [pc, #28]	; (800f7c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f7aa:	4808      	ldr	r0, [pc, #32]	; (800f7cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f7ac:	f7fe fa3a 	bl	800dc24 <USBD_GetString>
 800f7b0:	e004      	b.n	800f7bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f7b2:	683a      	ldr	r2, [r7, #0]
 800f7b4:	4904      	ldr	r1, [pc, #16]	; (800f7c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f7b6:	4805      	ldr	r0, [pc, #20]	; (800f7cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f7b8:	f7fe fa34 	bl	800dc24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f7bc:	4b02      	ldr	r3, [pc, #8]	; (800f7c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3708      	adds	r7, #8
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	bf00      	nop
 800f7c8:	20005558 	.word	0x20005558
 800f7cc:	08013304 	.word	0x08013304

0800f7d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b084      	sub	sp, #16
 800f7d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f7d6:	4b0f      	ldr	r3, [pc, #60]	; (800f814 <Get_SerialNum+0x44>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f7dc:	4b0e      	ldr	r3, [pc, #56]	; (800f818 <Get_SerialNum+0x48>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f7e2:	4b0e      	ldr	r3, [pc, #56]	; (800f81c <Get_SerialNum+0x4c>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f7e8:	68fa      	ldr	r2, [r7, #12]
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	4413      	add	r3, r2
 800f7ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d009      	beq.n	800f80a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f7f6:	2208      	movs	r2, #8
 800f7f8:	4909      	ldr	r1, [pc, #36]	; (800f820 <Get_SerialNum+0x50>)
 800f7fa:	68f8      	ldr	r0, [r7, #12]
 800f7fc:	f000 f814 	bl	800f828 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f800:	2204      	movs	r2, #4
 800f802:	4908      	ldr	r1, [pc, #32]	; (800f824 <Get_SerialNum+0x54>)
 800f804:	68b8      	ldr	r0, [r7, #8]
 800f806:	f000 f80f 	bl	800f828 <IntToUnicode>
  }
}
 800f80a:	bf00      	nop
 800f80c:	3710      	adds	r7, #16
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}
 800f812:	bf00      	nop
 800f814:	1fff7a10 	.word	0x1fff7a10
 800f818:	1fff7a14 	.word	0x1fff7a14
 800f81c:	1fff7a18 	.word	0x1fff7a18
 800f820:	200000fa 	.word	0x200000fa
 800f824:	2000010a 	.word	0x2000010a

0800f828 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f828:	b480      	push	{r7}
 800f82a:	b087      	sub	sp, #28
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	60f8      	str	r0, [r7, #12]
 800f830:	60b9      	str	r1, [r7, #8]
 800f832:	4613      	mov	r3, r2
 800f834:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f836:	2300      	movs	r3, #0
 800f838:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f83a:	2300      	movs	r3, #0
 800f83c:	75fb      	strb	r3, [r7, #23]
 800f83e:	e027      	b.n	800f890 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	0f1b      	lsrs	r3, r3, #28
 800f844:	2b09      	cmp	r3, #9
 800f846:	d80b      	bhi.n	800f860 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	0f1b      	lsrs	r3, r3, #28
 800f84c:	b2da      	uxtb	r2, r3
 800f84e:	7dfb      	ldrb	r3, [r7, #23]
 800f850:	005b      	lsls	r3, r3, #1
 800f852:	4619      	mov	r1, r3
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	440b      	add	r3, r1
 800f858:	3230      	adds	r2, #48	; 0x30
 800f85a:	b2d2      	uxtb	r2, r2
 800f85c:	701a      	strb	r2, [r3, #0]
 800f85e:	e00a      	b.n	800f876 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	0f1b      	lsrs	r3, r3, #28
 800f864:	b2da      	uxtb	r2, r3
 800f866:	7dfb      	ldrb	r3, [r7, #23]
 800f868:	005b      	lsls	r3, r3, #1
 800f86a:	4619      	mov	r1, r3
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	440b      	add	r3, r1
 800f870:	3237      	adds	r2, #55	; 0x37
 800f872:	b2d2      	uxtb	r2, r2
 800f874:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	011b      	lsls	r3, r3, #4
 800f87a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f87c:	7dfb      	ldrb	r3, [r7, #23]
 800f87e:	005b      	lsls	r3, r3, #1
 800f880:	3301      	adds	r3, #1
 800f882:	68ba      	ldr	r2, [r7, #8]
 800f884:	4413      	add	r3, r2
 800f886:	2200      	movs	r2, #0
 800f888:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f88a:	7dfb      	ldrb	r3, [r7, #23]
 800f88c:	3301      	adds	r3, #1
 800f88e:	75fb      	strb	r3, [r7, #23]
 800f890:	7dfa      	ldrb	r2, [r7, #23]
 800f892:	79fb      	ldrb	r3, [r7, #7]
 800f894:	429a      	cmp	r2, r3
 800f896:	d3d3      	bcc.n	800f840 <IntToUnicode+0x18>
  }
}
 800f898:	bf00      	nop
 800f89a:	bf00      	nop
 800f89c:	371c      	adds	r7, #28
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a4:	4770      	bx	lr
	...

0800f8a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b08a      	sub	sp, #40	; 0x28
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f8b0:	f107 0314 	add.w	r3, r7, #20
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	601a      	str	r2, [r3, #0]
 800f8b8:	605a      	str	r2, [r3, #4]
 800f8ba:	609a      	str	r2, [r3, #8]
 800f8bc:	60da      	str	r2, [r3, #12]
 800f8be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f8c8:	d13a      	bne.n	800f940 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	613b      	str	r3, [r7, #16]
 800f8ce:	4b1e      	ldr	r3, [pc, #120]	; (800f948 <HAL_PCD_MspInit+0xa0>)
 800f8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8d2:	4a1d      	ldr	r2, [pc, #116]	; (800f948 <HAL_PCD_MspInit+0xa0>)
 800f8d4:	f043 0301 	orr.w	r3, r3, #1
 800f8d8:	6313      	str	r3, [r2, #48]	; 0x30
 800f8da:	4b1b      	ldr	r3, [pc, #108]	; (800f948 <HAL_PCD_MspInit+0xa0>)
 800f8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8de:	f003 0301 	and.w	r3, r3, #1
 800f8e2:	613b      	str	r3, [r7, #16]
 800f8e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f8e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f8ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8ec:	2302      	movs	r3, #2
 800f8ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f8f4:	2303      	movs	r3, #3
 800f8f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f8f8:	230a      	movs	r3, #10
 800f8fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f8fc:	f107 0314 	add.w	r3, r7, #20
 800f900:	4619      	mov	r1, r3
 800f902:	4812      	ldr	r0, [pc, #72]	; (800f94c <HAL_PCD_MspInit+0xa4>)
 800f904:	f7f6 f89e 	bl	8005a44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f908:	4b0f      	ldr	r3, [pc, #60]	; (800f948 <HAL_PCD_MspInit+0xa0>)
 800f90a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f90c:	4a0e      	ldr	r2, [pc, #56]	; (800f948 <HAL_PCD_MspInit+0xa0>)
 800f90e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f912:	6353      	str	r3, [r2, #52]	; 0x34
 800f914:	2300      	movs	r3, #0
 800f916:	60fb      	str	r3, [r7, #12]
 800f918:	4b0b      	ldr	r3, [pc, #44]	; (800f948 <HAL_PCD_MspInit+0xa0>)
 800f91a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f91c:	4a0a      	ldr	r2, [pc, #40]	; (800f948 <HAL_PCD_MspInit+0xa0>)
 800f91e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f922:	6453      	str	r3, [r2, #68]	; 0x44
 800f924:	4b08      	ldr	r3, [pc, #32]	; (800f948 <HAL_PCD_MspInit+0xa0>)
 800f926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f92c:	60fb      	str	r3, [r7, #12]
 800f92e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f930:	2200      	movs	r2, #0
 800f932:	2105      	movs	r1, #5
 800f934:	2043      	movs	r0, #67	; 0x43
 800f936:	f7f5 fce6 	bl	8005306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f93a:	2043      	movs	r0, #67	; 0x43
 800f93c:	f7f5 fcff 	bl	800533e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f940:	bf00      	nop
 800f942:	3728      	adds	r7, #40	; 0x28
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}
 800f948:	40023800 	.word	0x40023800
 800f94c:	40020000 	.word	0x40020000

0800f950 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b082      	sub	sp, #8
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f964:	4619      	mov	r1, r3
 800f966:	4610      	mov	r0, r2
 800f968:	f7fc fffd 	bl	800c966 <USBD_LL_SetupStage>
}
 800f96c:	bf00      	nop
 800f96e:	3708      	adds	r7, #8
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}

0800f974 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b082      	sub	sp, #8
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
 800f97c:	460b      	mov	r3, r1
 800f97e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f986:	78fa      	ldrb	r2, [r7, #3]
 800f988:	6879      	ldr	r1, [r7, #4]
 800f98a:	4613      	mov	r3, r2
 800f98c:	00db      	lsls	r3, r3, #3
 800f98e:	4413      	add	r3, r2
 800f990:	009b      	lsls	r3, r3, #2
 800f992:	440b      	add	r3, r1
 800f994:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f998:	681a      	ldr	r2, [r3, #0]
 800f99a:	78fb      	ldrb	r3, [r7, #3]
 800f99c:	4619      	mov	r1, r3
 800f99e:	f7fd f837 	bl	800ca10 <USBD_LL_DataOutStage>
}
 800f9a2:	bf00      	nop
 800f9a4:	3708      	adds	r7, #8
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}

0800f9aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9aa:	b580      	push	{r7, lr}
 800f9ac:	b082      	sub	sp, #8
 800f9ae:	af00      	add	r7, sp, #0
 800f9b0:	6078      	str	r0, [r7, #4]
 800f9b2:	460b      	mov	r3, r1
 800f9b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f9bc:	78fa      	ldrb	r2, [r7, #3]
 800f9be:	6879      	ldr	r1, [r7, #4]
 800f9c0:	4613      	mov	r3, r2
 800f9c2:	00db      	lsls	r3, r3, #3
 800f9c4:	4413      	add	r3, r2
 800f9c6:	009b      	lsls	r3, r3, #2
 800f9c8:	440b      	add	r3, r1
 800f9ca:	334c      	adds	r3, #76	; 0x4c
 800f9cc:	681a      	ldr	r2, [r3, #0]
 800f9ce:	78fb      	ldrb	r3, [r7, #3]
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	f7fd f8d0 	bl	800cb76 <USBD_LL_DataInStage>
}
 800f9d6:	bf00      	nop
 800f9d8:	3708      	adds	r7, #8
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}

0800f9de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9de:	b580      	push	{r7, lr}
 800f9e0:	b082      	sub	sp, #8
 800f9e2:	af00      	add	r7, sp, #0
 800f9e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f7fd fa04 	bl	800cdfa <USBD_LL_SOF>
}
 800f9f2:	bf00      	nop
 800f9f4:	3708      	adds	r7, #8
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}

0800f9fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9fa:	b580      	push	{r7, lr}
 800f9fc:	b084      	sub	sp, #16
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fa02:	2301      	movs	r3, #1
 800fa04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	68db      	ldr	r3, [r3, #12]
 800fa0a:	2b02      	cmp	r3, #2
 800fa0c:	d001      	beq.n	800fa12 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800fa0e:	f7f3 f951 	bl	8002cb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa18:	7bfa      	ldrb	r2, [r7, #15]
 800fa1a:	4611      	mov	r1, r2
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7fd f9ae 	bl	800cd7e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f7fd f956 	bl	800ccda <USBD_LL_Reset>
}
 800fa2e:	bf00      	nop
 800fa30:	3710      	adds	r7, #16
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
	...

0800fa38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b082      	sub	sp, #8
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7fd f9a9 	bl	800cd9e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	687a      	ldr	r2, [r7, #4]
 800fa58:	6812      	ldr	r2, [r2, #0]
 800fa5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fa5e:	f043 0301 	orr.w	r3, r3, #1
 800fa62:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6a1b      	ldr	r3, [r3, #32]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d005      	beq.n	800fa78 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fa6c:	4b04      	ldr	r3, [pc, #16]	; (800fa80 <HAL_PCD_SuspendCallback+0x48>)
 800fa6e:	691b      	ldr	r3, [r3, #16]
 800fa70:	4a03      	ldr	r2, [pc, #12]	; (800fa80 <HAL_PCD_SuspendCallback+0x48>)
 800fa72:	f043 0306 	orr.w	r3, r3, #6
 800fa76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fa78:	bf00      	nop
 800fa7a:	3708      	adds	r7, #8
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}
 800fa80:	e000ed00 	.word	0xe000ed00

0800fa84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7fd f999 	bl	800cdca <USBD_LL_Resume>
}
 800fa98:	bf00      	nop
 800fa9a:	3708      	adds	r7, #8
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}

0800faa0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b082      	sub	sp, #8
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	460b      	mov	r3, r1
 800faaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fab2:	78fa      	ldrb	r2, [r7, #3]
 800fab4:	4611      	mov	r1, r2
 800fab6:	4618      	mov	r0, r3
 800fab8:	f7fd f9f1 	bl	800ce9e <USBD_LL_IsoOUTIncomplete>
}
 800fabc:	bf00      	nop
 800fabe:	3708      	adds	r7, #8
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	460b      	mov	r3, r1
 800face:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fad6:	78fa      	ldrb	r2, [r7, #3]
 800fad8:	4611      	mov	r1, r2
 800fada:	4618      	mov	r0, r3
 800fadc:	f7fd f9ad 	bl	800ce3a <USBD_LL_IsoINIncomplete>
}
 800fae0:	bf00      	nop
 800fae2:	3708      	adds	r7, #8
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}

0800fae8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b082      	sub	sp, #8
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7fd fa03 	bl	800cf02 <USBD_LL_DevConnected>
}
 800fafc:	bf00      	nop
 800fafe:	3708      	adds	r7, #8
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}

0800fb04 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b082      	sub	sp, #8
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7fd fa00 	bl	800cf18 <USBD_LL_DevDisconnected>
}
 800fb18:	bf00      	nop
 800fb1a:	3708      	adds	r7, #8
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}

0800fb20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b082      	sub	sp, #8
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d13c      	bne.n	800fbaa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fb30:	4a20      	ldr	r2, [pc, #128]	; (800fbb4 <USBD_LL_Init+0x94>)
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4a1e      	ldr	r2, [pc, #120]	; (800fbb4 <USBD_LL_Init+0x94>)
 800fb3c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fb40:	4b1c      	ldr	r3, [pc, #112]	; (800fbb4 <USBD_LL_Init+0x94>)
 800fb42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fb46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800fb48:	4b1a      	ldr	r3, [pc, #104]	; (800fbb4 <USBD_LL_Init+0x94>)
 800fb4a:	2204      	movs	r2, #4
 800fb4c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fb4e:	4b19      	ldr	r3, [pc, #100]	; (800fbb4 <USBD_LL_Init+0x94>)
 800fb50:	2202      	movs	r2, #2
 800fb52:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fb54:	4b17      	ldr	r3, [pc, #92]	; (800fbb4 <USBD_LL_Init+0x94>)
 800fb56:	2200      	movs	r2, #0
 800fb58:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fb5a:	4b16      	ldr	r3, [pc, #88]	; (800fbb4 <USBD_LL_Init+0x94>)
 800fb5c:	2202      	movs	r2, #2
 800fb5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fb60:	4b14      	ldr	r3, [pc, #80]	; (800fbb4 <USBD_LL_Init+0x94>)
 800fb62:	2200      	movs	r2, #0
 800fb64:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fb66:	4b13      	ldr	r3, [pc, #76]	; (800fbb4 <USBD_LL_Init+0x94>)
 800fb68:	2200      	movs	r2, #0
 800fb6a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fb6c:	4b11      	ldr	r3, [pc, #68]	; (800fbb4 <USBD_LL_Init+0x94>)
 800fb6e:	2200      	movs	r2, #0
 800fb70:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fb72:	4b10      	ldr	r3, [pc, #64]	; (800fbb4 <USBD_LL_Init+0x94>)
 800fb74:	2200      	movs	r2, #0
 800fb76:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fb78:	4b0e      	ldr	r3, [pc, #56]	; (800fbb4 <USBD_LL_Init+0x94>)
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fb7e:	480d      	ldr	r0, [pc, #52]	; (800fbb4 <USBD_LL_Init+0x94>)
 800fb80:	f7f7 fd87 	bl	8007692 <HAL_PCD_Init>
 800fb84:	4603      	mov	r3, r0
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d001      	beq.n	800fb8e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fb8a:	f7f3 f893 	bl	8002cb4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fb8e:	2180      	movs	r1, #128	; 0x80
 800fb90:	4808      	ldr	r0, [pc, #32]	; (800fbb4 <USBD_LL_Init+0x94>)
 800fb92:	f7f8 ffde 	bl	8008b52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fb96:	2240      	movs	r2, #64	; 0x40
 800fb98:	2100      	movs	r1, #0
 800fb9a:	4806      	ldr	r0, [pc, #24]	; (800fbb4 <USBD_LL_Init+0x94>)
 800fb9c:	f7f8 ff92 	bl	8008ac4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fba0:	2280      	movs	r2, #128	; 0x80
 800fba2:	2101      	movs	r1, #1
 800fba4:	4803      	ldr	r0, [pc, #12]	; (800fbb4 <USBD_LL_Init+0x94>)
 800fba6:	f7f8 ff8d 	bl	8008ac4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fbaa:	2300      	movs	r3, #0
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	3708      	adds	r7, #8
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}
 800fbb4:	20005758 	.word	0x20005758

0800fbb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b084      	sub	sp, #16
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7f7 fe7c 	bl	80078cc <HAL_PCD_Start>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbd8:	7bfb      	ldrb	r3, [r7, #15]
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f000 f942 	bl	800fe64 <USBD_Get_USB_Status>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbe4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3710      	adds	r7, #16
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd80      	pop	{r7, pc}

0800fbee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fbee:	b580      	push	{r7, lr}
 800fbf0:	b084      	sub	sp, #16
 800fbf2:	af00      	add	r7, sp, #0
 800fbf4:	6078      	str	r0, [r7, #4]
 800fbf6:	4608      	mov	r0, r1
 800fbf8:	4611      	mov	r1, r2
 800fbfa:	461a      	mov	r2, r3
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	70fb      	strb	r3, [r7, #3]
 800fc00:	460b      	mov	r3, r1
 800fc02:	70bb      	strb	r3, [r7, #2]
 800fc04:	4613      	mov	r3, r2
 800fc06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc08:	2300      	movs	r3, #0
 800fc0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fc16:	78bb      	ldrb	r3, [r7, #2]
 800fc18:	883a      	ldrh	r2, [r7, #0]
 800fc1a:	78f9      	ldrb	r1, [r7, #3]
 800fc1c:	f7f8 fb4d 	bl	80082ba <HAL_PCD_EP_Open>
 800fc20:	4603      	mov	r3, r0
 800fc22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc24:	7bfb      	ldrb	r3, [r7, #15]
 800fc26:	4618      	mov	r0, r3
 800fc28:	f000 f91c 	bl	800fe64 <USBD_Get_USB_Status>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc30:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3710      	adds	r7, #16
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}

0800fc3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc3a:	b580      	push	{r7, lr}
 800fc3c:	b084      	sub	sp, #16
 800fc3e:	af00      	add	r7, sp, #0
 800fc40:	6078      	str	r0, [r7, #4]
 800fc42:	460b      	mov	r3, r1
 800fc44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc46:	2300      	movs	r3, #0
 800fc48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc54:	78fa      	ldrb	r2, [r7, #3]
 800fc56:	4611      	mov	r1, r2
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7f8 fb96 	bl	800838a <HAL_PCD_EP_Close>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc62:	7bfb      	ldrb	r3, [r7, #15]
 800fc64:	4618      	mov	r0, r3
 800fc66:	f000 f8fd 	bl	800fe64 <USBD_Get_USB_Status>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3710      	adds	r7, #16
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}

0800fc78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b084      	sub	sp, #16
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	460b      	mov	r3, r1
 800fc82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc84:	2300      	movs	r3, #0
 800fc86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc92:	78fa      	ldrb	r2, [r7, #3]
 800fc94:	4611      	mov	r1, r2
 800fc96:	4618      	mov	r0, r3
 800fc98:	f7f8 fc6e 	bl	8008578 <HAL_PCD_EP_SetStall>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fca0:	7bfb      	ldrb	r3, [r7, #15]
 800fca2:	4618      	mov	r0, r3
 800fca4:	f000 f8de 	bl	800fe64 <USBD_Get_USB_Status>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcac:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcae:	4618      	mov	r0, r3
 800fcb0:	3710      	adds	r7, #16
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}

0800fcb6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fcb6:	b580      	push	{r7, lr}
 800fcb8:	b084      	sub	sp, #16
 800fcba:	af00      	add	r7, sp, #0
 800fcbc:	6078      	str	r0, [r7, #4]
 800fcbe:	460b      	mov	r3, r1
 800fcc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fcd0:	78fa      	ldrb	r2, [r7, #3]
 800fcd2:	4611      	mov	r1, r2
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f7f8 fcb3 	bl	8008640 <HAL_PCD_EP_ClrStall>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcde:	7bfb      	ldrb	r3, [r7, #15]
 800fce0:	4618      	mov	r0, r3
 800fce2:	f000 f8bf 	bl	800fe64 <USBD_Get_USB_Status>
 800fce6:	4603      	mov	r3, r0
 800fce8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcea:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3710      	adds	r7, #16
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b085      	sub	sp, #20
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	460b      	mov	r3, r1
 800fcfe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fd08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	da0b      	bge.n	800fd28 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fd10:	78fb      	ldrb	r3, [r7, #3]
 800fd12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd16:	68f9      	ldr	r1, [r7, #12]
 800fd18:	4613      	mov	r3, r2
 800fd1a:	00db      	lsls	r3, r3, #3
 800fd1c:	4413      	add	r3, r2
 800fd1e:	009b      	lsls	r3, r3, #2
 800fd20:	440b      	add	r3, r1
 800fd22:	333e      	adds	r3, #62	; 0x3e
 800fd24:	781b      	ldrb	r3, [r3, #0]
 800fd26:	e00b      	b.n	800fd40 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fd28:	78fb      	ldrb	r3, [r7, #3]
 800fd2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd2e:	68f9      	ldr	r1, [r7, #12]
 800fd30:	4613      	mov	r3, r2
 800fd32:	00db      	lsls	r3, r3, #3
 800fd34:	4413      	add	r3, r2
 800fd36:	009b      	lsls	r3, r3, #2
 800fd38:	440b      	add	r3, r1
 800fd3a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fd3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	3714      	adds	r7, #20
 800fd44:	46bd      	mov	sp, r7
 800fd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4a:	4770      	bx	lr

0800fd4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b084      	sub	sp, #16
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	460b      	mov	r3, r1
 800fd56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd58:	2300      	movs	r3, #0
 800fd5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd66:	78fa      	ldrb	r2, [r7, #3]
 800fd68:	4611      	mov	r1, r2
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7f8 fa80 	bl	8008270 <HAL_PCD_SetAddress>
 800fd70:	4603      	mov	r3, r0
 800fd72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd74:	7bfb      	ldrb	r3, [r7, #15]
 800fd76:	4618      	mov	r0, r3
 800fd78:	f000 f874 	bl	800fe64 <USBD_Get_USB_Status>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd80:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3710      	adds	r7, #16
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}

0800fd8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fd8a:	b580      	push	{r7, lr}
 800fd8c:	b086      	sub	sp, #24
 800fd8e:	af00      	add	r7, sp, #0
 800fd90:	60f8      	str	r0, [r7, #12]
 800fd92:	607a      	str	r2, [r7, #4]
 800fd94:	603b      	str	r3, [r7, #0]
 800fd96:	460b      	mov	r3, r1
 800fd98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fda8:	7af9      	ldrb	r1, [r7, #11]
 800fdaa:	683b      	ldr	r3, [r7, #0]
 800fdac:	687a      	ldr	r2, [r7, #4]
 800fdae:	f7f8 fb99 	bl	80084e4 <HAL_PCD_EP_Transmit>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdb6:	7dfb      	ldrb	r3, [r7, #23]
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f000 f853 	bl	800fe64 <USBD_Get_USB_Status>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fdc2:	7dbb      	ldrb	r3, [r7, #22]
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	3718      	adds	r7, #24
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}

0800fdcc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b086      	sub	sp, #24
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	60f8      	str	r0, [r7, #12]
 800fdd4:	607a      	str	r2, [r7, #4]
 800fdd6:	603b      	str	r3, [r7, #0]
 800fdd8:	460b      	mov	r3, r1
 800fdda:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fddc:	2300      	movs	r3, #0
 800fdde:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fde0:	2300      	movs	r3, #0
 800fde2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fdea:	7af9      	ldrb	r1, [r7, #11]
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	687a      	ldr	r2, [r7, #4]
 800fdf0:	f7f8 fb15 	bl	800841e <HAL_PCD_EP_Receive>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdf8:	7dfb      	ldrb	r3, [r7, #23]
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f000 f832 	bl	800fe64 <USBD_Get_USB_Status>
 800fe00:	4603      	mov	r3, r0
 800fe02:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fe04:	7dbb      	ldrb	r3, [r7, #22]
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	3718      	adds	r7, #24
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}

0800fe0e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe0e:	b580      	push	{r7, lr}
 800fe10:	b082      	sub	sp, #8
 800fe12:	af00      	add	r7, sp, #0
 800fe14:	6078      	str	r0, [r7, #4]
 800fe16:	460b      	mov	r3, r1
 800fe18:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fe20:	78fa      	ldrb	r2, [r7, #3]
 800fe22:	4611      	mov	r1, r2
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7f8 fb45 	bl	80084b4 <HAL_PCD_EP_GetRxCount>
 800fe2a:	4603      	mov	r3, r0
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	3708      	adds	r7, #8
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fe34:	b480      	push	{r7}
 800fe36:	b083      	sub	sp, #12
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fe3c:	4b03      	ldr	r3, [pc, #12]	; (800fe4c <USBD_static_malloc+0x18>)
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	370c      	adds	r7, #12
 800fe42:	46bd      	mov	sp, r7
 800fe44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe48:	4770      	bx	lr
 800fe4a:	bf00      	nop
 800fe4c:	20005c64 	.word	0x20005c64

0800fe50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fe50:	b480      	push	{r7}
 800fe52:	b083      	sub	sp, #12
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]

}
 800fe58:	bf00      	nop
 800fe5a:	370c      	adds	r7, #12
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe62:	4770      	bx	lr

0800fe64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fe64:	b480      	push	{r7}
 800fe66:	b085      	sub	sp, #20
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fe72:	79fb      	ldrb	r3, [r7, #7]
 800fe74:	2b03      	cmp	r3, #3
 800fe76:	d817      	bhi.n	800fea8 <USBD_Get_USB_Status+0x44>
 800fe78:	a201      	add	r2, pc, #4	; (adr r2, 800fe80 <USBD_Get_USB_Status+0x1c>)
 800fe7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe7e:	bf00      	nop
 800fe80:	0800fe91 	.word	0x0800fe91
 800fe84:	0800fe97 	.word	0x0800fe97
 800fe88:	0800fe9d 	.word	0x0800fe9d
 800fe8c:	0800fea3 	.word	0x0800fea3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fe90:	2300      	movs	r3, #0
 800fe92:	73fb      	strb	r3, [r7, #15]
    break;
 800fe94:	e00b      	b.n	800feae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fe96:	2303      	movs	r3, #3
 800fe98:	73fb      	strb	r3, [r7, #15]
    break;
 800fe9a:	e008      	b.n	800feae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	73fb      	strb	r3, [r7, #15]
    break;
 800fea0:	e005      	b.n	800feae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fea2:	2303      	movs	r3, #3
 800fea4:	73fb      	strb	r3, [r7, #15]
    break;
 800fea6:	e002      	b.n	800feae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fea8:	2303      	movs	r3, #3
 800feaa:	73fb      	strb	r3, [r7, #15]
    break;
 800feac:	bf00      	nop
  }
  return usb_status;
 800feae:	7bfb      	ldrb	r3, [r7, #15]
}
 800feb0:	4618      	mov	r0, r3
 800feb2:	3714      	adds	r7, #20
 800feb4:	46bd      	mov	sp, r7
 800feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feba:	4770      	bx	lr

0800febc <__errno>:
 800febc:	4b01      	ldr	r3, [pc, #4]	; (800fec4 <__errno+0x8>)
 800febe:	6818      	ldr	r0, [r3, #0]
 800fec0:	4770      	bx	lr
 800fec2:	bf00      	nop
 800fec4:	20000114 	.word	0x20000114

0800fec8 <std>:
 800fec8:	2300      	movs	r3, #0
 800feca:	b510      	push	{r4, lr}
 800fecc:	4604      	mov	r4, r0
 800fece:	e9c0 3300 	strd	r3, r3, [r0]
 800fed2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fed6:	6083      	str	r3, [r0, #8]
 800fed8:	8181      	strh	r1, [r0, #12]
 800feda:	6643      	str	r3, [r0, #100]	; 0x64
 800fedc:	81c2      	strh	r2, [r0, #14]
 800fede:	6183      	str	r3, [r0, #24]
 800fee0:	4619      	mov	r1, r3
 800fee2:	2208      	movs	r2, #8
 800fee4:	305c      	adds	r0, #92	; 0x5c
 800fee6:	f000 f934 	bl	8010152 <memset>
 800feea:	4b05      	ldr	r3, [pc, #20]	; (800ff00 <std+0x38>)
 800feec:	6263      	str	r3, [r4, #36]	; 0x24
 800feee:	4b05      	ldr	r3, [pc, #20]	; (800ff04 <std+0x3c>)
 800fef0:	62a3      	str	r3, [r4, #40]	; 0x28
 800fef2:	4b05      	ldr	r3, [pc, #20]	; (800ff08 <std+0x40>)
 800fef4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fef6:	4b05      	ldr	r3, [pc, #20]	; (800ff0c <std+0x44>)
 800fef8:	6224      	str	r4, [r4, #32]
 800fefa:	6323      	str	r3, [r4, #48]	; 0x30
 800fefc:	bd10      	pop	{r4, pc}
 800fefe:	bf00      	nop
 800ff00:	08010db1 	.word	0x08010db1
 800ff04:	08010dd3 	.word	0x08010dd3
 800ff08:	08010e0b 	.word	0x08010e0b
 800ff0c:	08010e2f 	.word	0x08010e2f

0800ff10 <_cleanup_r>:
 800ff10:	4901      	ldr	r1, [pc, #4]	; (800ff18 <_cleanup_r+0x8>)
 800ff12:	f000 b8af 	b.w	8010074 <_fwalk_reent>
 800ff16:	bf00      	nop
 800ff18:	08011f19 	.word	0x08011f19

0800ff1c <__sfmoreglue>:
 800ff1c:	b570      	push	{r4, r5, r6, lr}
 800ff1e:	2268      	movs	r2, #104	; 0x68
 800ff20:	1e4d      	subs	r5, r1, #1
 800ff22:	4355      	muls	r5, r2
 800ff24:	460e      	mov	r6, r1
 800ff26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ff2a:	f000 f93b 	bl	80101a4 <_malloc_r>
 800ff2e:	4604      	mov	r4, r0
 800ff30:	b140      	cbz	r0, 800ff44 <__sfmoreglue+0x28>
 800ff32:	2100      	movs	r1, #0
 800ff34:	e9c0 1600 	strd	r1, r6, [r0]
 800ff38:	300c      	adds	r0, #12
 800ff3a:	60a0      	str	r0, [r4, #8]
 800ff3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ff40:	f000 f907 	bl	8010152 <memset>
 800ff44:	4620      	mov	r0, r4
 800ff46:	bd70      	pop	{r4, r5, r6, pc}

0800ff48 <__sfp_lock_acquire>:
 800ff48:	4801      	ldr	r0, [pc, #4]	; (800ff50 <__sfp_lock_acquire+0x8>)
 800ff4a:	f000 b8d8 	b.w	80100fe <__retarget_lock_acquire_recursive>
 800ff4e:	bf00      	nop
 800ff50:	20005e85 	.word	0x20005e85

0800ff54 <__sfp_lock_release>:
 800ff54:	4801      	ldr	r0, [pc, #4]	; (800ff5c <__sfp_lock_release+0x8>)
 800ff56:	f000 b8d3 	b.w	8010100 <__retarget_lock_release_recursive>
 800ff5a:	bf00      	nop
 800ff5c:	20005e85 	.word	0x20005e85

0800ff60 <__sinit_lock_acquire>:
 800ff60:	4801      	ldr	r0, [pc, #4]	; (800ff68 <__sinit_lock_acquire+0x8>)
 800ff62:	f000 b8cc 	b.w	80100fe <__retarget_lock_acquire_recursive>
 800ff66:	bf00      	nop
 800ff68:	20005e86 	.word	0x20005e86

0800ff6c <__sinit_lock_release>:
 800ff6c:	4801      	ldr	r0, [pc, #4]	; (800ff74 <__sinit_lock_release+0x8>)
 800ff6e:	f000 b8c7 	b.w	8010100 <__retarget_lock_release_recursive>
 800ff72:	bf00      	nop
 800ff74:	20005e86 	.word	0x20005e86

0800ff78 <__sinit>:
 800ff78:	b510      	push	{r4, lr}
 800ff7a:	4604      	mov	r4, r0
 800ff7c:	f7ff fff0 	bl	800ff60 <__sinit_lock_acquire>
 800ff80:	69a3      	ldr	r3, [r4, #24]
 800ff82:	b11b      	cbz	r3, 800ff8c <__sinit+0x14>
 800ff84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff88:	f7ff bff0 	b.w	800ff6c <__sinit_lock_release>
 800ff8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ff90:	6523      	str	r3, [r4, #80]	; 0x50
 800ff92:	4b13      	ldr	r3, [pc, #76]	; (800ffe0 <__sinit+0x68>)
 800ff94:	4a13      	ldr	r2, [pc, #76]	; (800ffe4 <__sinit+0x6c>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	62a2      	str	r2, [r4, #40]	; 0x28
 800ff9a:	42a3      	cmp	r3, r4
 800ff9c:	bf04      	itt	eq
 800ff9e:	2301      	moveq	r3, #1
 800ffa0:	61a3      	streq	r3, [r4, #24]
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	f000 f820 	bl	800ffe8 <__sfp>
 800ffa8:	6060      	str	r0, [r4, #4]
 800ffaa:	4620      	mov	r0, r4
 800ffac:	f000 f81c 	bl	800ffe8 <__sfp>
 800ffb0:	60a0      	str	r0, [r4, #8]
 800ffb2:	4620      	mov	r0, r4
 800ffb4:	f000 f818 	bl	800ffe8 <__sfp>
 800ffb8:	2200      	movs	r2, #0
 800ffba:	60e0      	str	r0, [r4, #12]
 800ffbc:	2104      	movs	r1, #4
 800ffbe:	6860      	ldr	r0, [r4, #4]
 800ffc0:	f7ff ff82 	bl	800fec8 <std>
 800ffc4:	68a0      	ldr	r0, [r4, #8]
 800ffc6:	2201      	movs	r2, #1
 800ffc8:	2109      	movs	r1, #9
 800ffca:	f7ff ff7d 	bl	800fec8 <std>
 800ffce:	68e0      	ldr	r0, [r4, #12]
 800ffd0:	2202      	movs	r2, #2
 800ffd2:	2112      	movs	r1, #18
 800ffd4:	f7ff ff78 	bl	800fec8 <std>
 800ffd8:	2301      	movs	r3, #1
 800ffda:	61a3      	str	r3, [r4, #24]
 800ffdc:	e7d2      	b.n	800ff84 <__sinit+0xc>
 800ffde:	bf00      	nop
 800ffe0:	0801485c 	.word	0x0801485c
 800ffe4:	0800ff11 	.word	0x0800ff11

0800ffe8 <__sfp>:
 800ffe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffea:	4607      	mov	r7, r0
 800ffec:	f7ff ffac 	bl	800ff48 <__sfp_lock_acquire>
 800fff0:	4b1e      	ldr	r3, [pc, #120]	; (801006c <__sfp+0x84>)
 800fff2:	681e      	ldr	r6, [r3, #0]
 800fff4:	69b3      	ldr	r3, [r6, #24]
 800fff6:	b913      	cbnz	r3, 800fffe <__sfp+0x16>
 800fff8:	4630      	mov	r0, r6
 800fffa:	f7ff ffbd 	bl	800ff78 <__sinit>
 800fffe:	3648      	adds	r6, #72	; 0x48
 8010000:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010004:	3b01      	subs	r3, #1
 8010006:	d503      	bpl.n	8010010 <__sfp+0x28>
 8010008:	6833      	ldr	r3, [r6, #0]
 801000a:	b30b      	cbz	r3, 8010050 <__sfp+0x68>
 801000c:	6836      	ldr	r6, [r6, #0]
 801000e:	e7f7      	b.n	8010000 <__sfp+0x18>
 8010010:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010014:	b9d5      	cbnz	r5, 801004c <__sfp+0x64>
 8010016:	4b16      	ldr	r3, [pc, #88]	; (8010070 <__sfp+0x88>)
 8010018:	60e3      	str	r3, [r4, #12]
 801001a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801001e:	6665      	str	r5, [r4, #100]	; 0x64
 8010020:	f000 f86c 	bl	80100fc <__retarget_lock_init_recursive>
 8010024:	f7ff ff96 	bl	800ff54 <__sfp_lock_release>
 8010028:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801002c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010030:	6025      	str	r5, [r4, #0]
 8010032:	61a5      	str	r5, [r4, #24]
 8010034:	2208      	movs	r2, #8
 8010036:	4629      	mov	r1, r5
 8010038:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801003c:	f000 f889 	bl	8010152 <memset>
 8010040:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010044:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010048:	4620      	mov	r0, r4
 801004a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801004c:	3468      	adds	r4, #104	; 0x68
 801004e:	e7d9      	b.n	8010004 <__sfp+0x1c>
 8010050:	2104      	movs	r1, #4
 8010052:	4638      	mov	r0, r7
 8010054:	f7ff ff62 	bl	800ff1c <__sfmoreglue>
 8010058:	4604      	mov	r4, r0
 801005a:	6030      	str	r0, [r6, #0]
 801005c:	2800      	cmp	r0, #0
 801005e:	d1d5      	bne.n	801000c <__sfp+0x24>
 8010060:	f7ff ff78 	bl	800ff54 <__sfp_lock_release>
 8010064:	230c      	movs	r3, #12
 8010066:	603b      	str	r3, [r7, #0]
 8010068:	e7ee      	b.n	8010048 <__sfp+0x60>
 801006a:	bf00      	nop
 801006c:	0801485c 	.word	0x0801485c
 8010070:	ffff0001 	.word	0xffff0001

08010074 <_fwalk_reent>:
 8010074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010078:	4606      	mov	r6, r0
 801007a:	4688      	mov	r8, r1
 801007c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010080:	2700      	movs	r7, #0
 8010082:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010086:	f1b9 0901 	subs.w	r9, r9, #1
 801008a:	d505      	bpl.n	8010098 <_fwalk_reent+0x24>
 801008c:	6824      	ldr	r4, [r4, #0]
 801008e:	2c00      	cmp	r4, #0
 8010090:	d1f7      	bne.n	8010082 <_fwalk_reent+0xe>
 8010092:	4638      	mov	r0, r7
 8010094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010098:	89ab      	ldrh	r3, [r5, #12]
 801009a:	2b01      	cmp	r3, #1
 801009c:	d907      	bls.n	80100ae <_fwalk_reent+0x3a>
 801009e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80100a2:	3301      	adds	r3, #1
 80100a4:	d003      	beq.n	80100ae <_fwalk_reent+0x3a>
 80100a6:	4629      	mov	r1, r5
 80100a8:	4630      	mov	r0, r6
 80100aa:	47c0      	blx	r8
 80100ac:	4307      	orrs	r7, r0
 80100ae:	3568      	adds	r5, #104	; 0x68
 80100b0:	e7e9      	b.n	8010086 <_fwalk_reent+0x12>
	...

080100b4 <__libc_init_array>:
 80100b4:	b570      	push	{r4, r5, r6, lr}
 80100b6:	4d0d      	ldr	r5, [pc, #52]	; (80100ec <__libc_init_array+0x38>)
 80100b8:	4c0d      	ldr	r4, [pc, #52]	; (80100f0 <__libc_init_array+0x3c>)
 80100ba:	1b64      	subs	r4, r4, r5
 80100bc:	10a4      	asrs	r4, r4, #2
 80100be:	2600      	movs	r6, #0
 80100c0:	42a6      	cmp	r6, r4
 80100c2:	d109      	bne.n	80100d8 <__libc_init_array+0x24>
 80100c4:	4d0b      	ldr	r5, [pc, #44]	; (80100f4 <__libc_init_array+0x40>)
 80100c6:	4c0c      	ldr	r4, [pc, #48]	; (80100f8 <__libc_init_array+0x44>)
 80100c8:	f002 ff94 	bl	8012ff4 <_init>
 80100cc:	1b64      	subs	r4, r4, r5
 80100ce:	10a4      	asrs	r4, r4, #2
 80100d0:	2600      	movs	r6, #0
 80100d2:	42a6      	cmp	r6, r4
 80100d4:	d105      	bne.n	80100e2 <__libc_init_array+0x2e>
 80100d6:	bd70      	pop	{r4, r5, r6, pc}
 80100d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80100dc:	4798      	blx	r3
 80100de:	3601      	adds	r6, #1
 80100e0:	e7ee      	b.n	80100c0 <__libc_init_array+0xc>
 80100e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80100e6:	4798      	blx	r3
 80100e8:	3601      	adds	r6, #1
 80100ea:	e7f2      	b.n	80100d2 <__libc_init_array+0x1e>
 80100ec:	08014be4 	.word	0x08014be4
 80100f0:	08014be4 	.word	0x08014be4
 80100f4:	08014be4 	.word	0x08014be4
 80100f8:	08014be8 	.word	0x08014be8

080100fc <__retarget_lock_init_recursive>:
 80100fc:	4770      	bx	lr

080100fe <__retarget_lock_acquire_recursive>:
 80100fe:	4770      	bx	lr

08010100 <__retarget_lock_release_recursive>:
 8010100:	4770      	bx	lr

08010102 <memcpy>:
 8010102:	440a      	add	r2, r1
 8010104:	4291      	cmp	r1, r2
 8010106:	f100 33ff 	add.w	r3, r0, #4294967295
 801010a:	d100      	bne.n	801010e <memcpy+0xc>
 801010c:	4770      	bx	lr
 801010e:	b510      	push	{r4, lr}
 8010110:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010114:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010118:	4291      	cmp	r1, r2
 801011a:	d1f9      	bne.n	8010110 <memcpy+0xe>
 801011c:	bd10      	pop	{r4, pc}

0801011e <memmove>:
 801011e:	4288      	cmp	r0, r1
 8010120:	b510      	push	{r4, lr}
 8010122:	eb01 0402 	add.w	r4, r1, r2
 8010126:	d902      	bls.n	801012e <memmove+0x10>
 8010128:	4284      	cmp	r4, r0
 801012a:	4623      	mov	r3, r4
 801012c:	d807      	bhi.n	801013e <memmove+0x20>
 801012e:	1e43      	subs	r3, r0, #1
 8010130:	42a1      	cmp	r1, r4
 8010132:	d008      	beq.n	8010146 <memmove+0x28>
 8010134:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010138:	f803 2f01 	strb.w	r2, [r3, #1]!
 801013c:	e7f8      	b.n	8010130 <memmove+0x12>
 801013e:	4402      	add	r2, r0
 8010140:	4601      	mov	r1, r0
 8010142:	428a      	cmp	r2, r1
 8010144:	d100      	bne.n	8010148 <memmove+0x2a>
 8010146:	bd10      	pop	{r4, pc}
 8010148:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801014c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010150:	e7f7      	b.n	8010142 <memmove+0x24>

08010152 <memset>:
 8010152:	4402      	add	r2, r0
 8010154:	4603      	mov	r3, r0
 8010156:	4293      	cmp	r3, r2
 8010158:	d100      	bne.n	801015c <memset+0xa>
 801015a:	4770      	bx	lr
 801015c:	f803 1b01 	strb.w	r1, [r3], #1
 8010160:	e7f9      	b.n	8010156 <memset+0x4>
	...

08010164 <sbrk_aligned>:
 8010164:	b570      	push	{r4, r5, r6, lr}
 8010166:	4e0e      	ldr	r6, [pc, #56]	; (80101a0 <sbrk_aligned+0x3c>)
 8010168:	460c      	mov	r4, r1
 801016a:	6831      	ldr	r1, [r6, #0]
 801016c:	4605      	mov	r5, r0
 801016e:	b911      	cbnz	r1, 8010176 <sbrk_aligned+0x12>
 8010170:	f000 fdee 	bl	8010d50 <_sbrk_r>
 8010174:	6030      	str	r0, [r6, #0]
 8010176:	4621      	mov	r1, r4
 8010178:	4628      	mov	r0, r5
 801017a:	f000 fde9 	bl	8010d50 <_sbrk_r>
 801017e:	1c43      	adds	r3, r0, #1
 8010180:	d00a      	beq.n	8010198 <sbrk_aligned+0x34>
 8010182:	1cc4      	adds	r4, r0, #3
 8010184:	f024 0403 	bic.w	r4, r4, #3
 8010188:	42a0      	cmp	r0, r4
 801018a:	d007      	beq.n	801019c <sbrk_aligned+0x38>
 801018c:	1a21      	subs	r1, r4, r0
 801018e:	4628      	mov	r0, r5
 8010190:	f000 fdde 	bl	8010d50 <_sbrk_r>
 8010194:	3001      	adds	r0, #1
 8010196:	d101      	bne.n	801019c <sbrk_aligned+0x38>
 8010198:	f04f 34ff 	mov.w	r4, #4294967295
 801019c:	4620      	mov	r0, r4
 801019e:	bd70      	pop	{r4, r5, r6, pc}
 80101a0:	20005e8c 	.word	0x20005e8c

080101a4 <_malloc_r>:
 80101a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101a8:	1ccd      	adds	r5, r1, #3
 80101aa:	f025 0503 	bic.w	r5, r5, #3
 80101ae:	3508      	adds	r5, #8
 80101b0:	2d0c      	cmp	r5, #12
 80101b2:	bf38      	it	cc
 80101b4:	250c      	movcc	r5, #12
 80101b6:	2d00      	cmp	r5, #0
 80101b8:	4607      	mov	r7, r0
 80101ba:	db01      	blt.n	80101c0 <_malloc_r+0x1c>
 80101bc:	42a9      	cmp	r1, r5
 80101be:	d905      	bls.n	80101cc <_malloc_r+0x28>
 80101c0:	230c      	movs	r3, #12
 80101c2:	603b      	str	r3, [r7, #0]
 80101c4:	2600      	movs	r6, #0
 80101c6:	4630      	mov	r0, r6
 80101c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101cc:	4e2e      	ldr	r6, [pc, #184]	; (8010288 <_malloc_r+0xe4>)
 80101ce:	f001 ff63 	bl	8012098 <__malloc_lock>
 80101d2:	6833      	ldr	r3, [r6, #0]
 80101d4:	461c      	mov	r4, r3
 80101d6:	bb34      	cbnz	r4, 8010226 <_malloc_r+0x82>
 80101d8:	4629      	mov	r1, r5
 80101da:	4638      	mov	r0, r7
 80101dc:	f7ff ffc2 	bl	8010164 <sbrk_aligned>
 80101e0:	1c43      	adds	r3, r0, #1
 80101e2:	4604      	mov	r4, r0
 80101e4:	d14d      	bne.n	8010282 <_malloc_r+0xde>
 80101e6:	6834      	ldr	r4, [r6, #0]
 80101e8:	4626      	mov	r6, r4
 80101ea:	2e00      	cmp	r6, #0
 80101ec:	d140      	bne.n	8010270 <_malloc_r+0xcc>
 80101ee:	6823      	ldr	r3, [r4, #0]
 80101f0:	4631      	mov	r1, r6
 80101f2:	4638      	mov	r0, r7
 80101f4:	eb04 0803 	add.w	r8, r4, r3
 80101f8:	f000 fdaa 	bl	8010d50 <_sbrk_r>
 80101fc:	4580      	cmp	r8, r0
 80101fe:	d13a      	bne.n	8010276 <_malloc_r+0xd2>
 8010200:	6821      	ldr	r1, [r4, #0]
 8010202:	3503      	adds	r5, #3
 8010204:	1a6d      	subs	r5, r5, r1
 8010206:	f025 0503 	bic.w	r5, r5, #3
 801020a:	3508      	adds	r5, #8
 801020c:	2d0c      	cmp	r5, #12
 801020e:	bf38      	it	cc
 8010210:	250c      	movcc	r5, #12
 8010212:	4629      	mov	r1, r5
 8010214:	4638      	mov	r0, r7
 8010216:	f7ff ffa5 	bl	8010164 <sbrk_aligned>
 801021a:	3001      	adds	r0, #1
 801021c:	d02b      	beq.n	8010276 <_malloc_r+0xd2>
 801021e:	6823      	ldr	r3, [r4, #0]
 8010220:	442b      	add	r3, r5
 8010222:	6023      	str	r3, [r4, #0]
 8010224:	e00e      	b.n	8010244 <_malloc_r+0xa0>
 8010226:	6822      	ldr	r2, [r4, #0]
 8010228:	1b52      	subs	r2, r2, r5
 801022a:	d41e      	bmi.n	801026a <_malloc_r+0xc6>
 801022c:	2a0b      	cmp	r2, #11
 801022e:	d916      	bls.n	801025e <_malloc_r+0xba>
 8010230:	1961      	adds	r1, r4, r5
 8010232:	42a3      	cmp	r3, r4
 8010234:	6025      	str	r5, [r4, #0]
 8010236:	bf18      	it	ne
 8010238:	6059      	strne	r1, [r3, #4]
 801023a:	6863      	ldr	r3, [r4, #4]
 801023c:	bf08      	it	eq
 801023e:	6031      	streq	r1, [r6, #0]
 8010240:	5162      	str	r2, [r4, r5]
 8010242:	604b      	str	r3, [r1, #4]
 8010244:	4638      	mov	r0, r7
 8010246:	f104 060b 	add.w	r6, r4, #11
 801024a:	f001 ff2b 	bl	80120a4 <__malloc_unlock>
 801024e:	f026 0607 	bic.w	r6, r6, #7
 8010252:	1d23      	adds	r3, r4, #4
 8010254:	1af2      	subs	r2, r6, r3
 8010256:	d0b6      	beq.n	80101c6 <_malloc_r+0x22>
 8010258:	1b9b      	subs	r3, r3, r6
 801025a:	50a3      	str	r3, [r4, r2]
 801025c:	e7b3      	b.n	80101c6 <_malloc_r+0x22>
 801025e:	6862      	ldr	r2, [r4, #4]
 8010260:	42a3      	cmp	r3, r4
 8010262:	bf0c      	ite	eq
 8010264:	6032      	streq	r2, [r6, #0]
 8010266:	605a      	strne	r2, [r3, #4]
 8010268:	e7ec      	b.n	8010244 <_malloc_r+0xa0>
 801026a:	4623      	mov	r3, r4
 801026c:	6864      	ldr	r4, [r4, #4]
 801026e:	e7b2      	b.n	80101d6 <_malloc_r+0x32>
 8010270:	4634      	mov	r4, r6
 8010272:	6876      	ldr	r6, [r6, #4]
 8010274:	e7b9      	b.n	80101ea <_malloc_r+0x46>
 8010276:	230c      	movs	r3, #12
 8010278:	603b      	str	r3, [r7, #0]
 801027a:	4638      	mov	r0, r7
 801027c:	f001 ff12 	bl	80120a4 <__malloc_unlock>
 8010280:	e7a1      	b.n	80101c6 <_malloc_r+0x22>
 8010282:	6025      	str	r5, [r4, #0]
 8010284:	e7de      	b.n	8010244 <_malloc_r+0xa0>
 8010286:	bf00      	nop
 8010288:	20005e88 	.word	0x20005e88

0801028c <__cvt>:
 801028c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010290:	ec55 4b10 	vmov	r4, r5, d0
 8010294:	2d00      	cmp	r5, #0
 8010296:	460e      	mov	r6, r1
 8010298:	4619      	mov	r1, r3
 801029a:	462b      	mov	r3, r5
 801029c:	bfbb      	ittet	lt
 801029e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80102a2:	461d      	movlt	r5, r3
 80102a4:	2300      	movge	r3, #0
 80102a6:	232d      	movlt	r3, #45	; 0x2d
 80102a8:	700b      	strb	r3, [r1, #0]
 80102aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80102b0:	4691      	mov	r9, r2
 80102b2:	f023 0820 	bic.w	r8, r3, #32
 80102b6:	bfbc      	itt	lt
 80102b8:	4622      	movlt	r2, r4
 80102ba:	4614      	movlt	r4, r2
 80102bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80102c0:	d005      	beq.n	80102ce <__cvt+0x42>
 80102c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80102c6:	d100      	bne.n	80102ca <__cvt+0x3e>
 80102c8:	3601      	adds	r6, #1
 80102ca:	2102      	movs	r1, #2
 80102cc:	e000      	b.n	80102d0 <__cvt+0x44>
 80102ce:	2103      	movs	r1, #3
 80102d0:	ab03      	add	r3, sp, #12
 80102d2:	9301      	str	r3, [sp, #4]
 80102d4:	ab02      	add	r3, sp, #8
 80102d6:	9300      	str	r3, [sp, #0]
 80102d8:	ec45 4b10 	vmov	d0, r4, r5
 80102dc:	4653      	mov	r3, sl
 80102de:	4632      	mov	r2, r6
 80102e0:	f000 ffa6 	bl	8011230 <_dtoa_r>
 80102e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80102e8:	4607      	mov	r7, r0
 80102ea:	d102      	bne.n	80102f2 <__cvt+0x66>
 80102ec:	f019 0f01 	tst.w	r9, #1
 80102f0:	d022      	beq.n	8010338 <__cvt+0xac>
 80102f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80102f6:	eb07 0906 	add.w	r9, r7, r6
 80102fa:	d110      	bne.n	801031e <__cvt+0x92>
 80102fc:	783b      	ldrb	r3, [r7, #0]
 80102fe:	2b30      	cmp	r3, #48	; 0x30
 8010300:	d10a      	bne.n	8010318 <__cvt+0x8c>
 8010302:	2200      	movs	r2, #0
 8010304:	2300      	movs	r3, #0
 8010306:	4620      	mov	r0, r4
 8010308:	4629      	mov	r1, r5
 801030a:	f7f0 fbe5 	bl	8000ad8 <__aeabi_dcmpeq>
 801030e:	b918      	cbnz	r0, 8010318 <__cvt+0x8c>
 8010310:	f1c6 0601 	rsb	r6, r6, #1
 8010314:	f8ca 6000 	str.w	r6, [sl]
 8010318:	f8da 3000 	ldr.w	r3, [sl]
 801031c:	4499      	add	r9, r3
 801031e:	2200      	movs	r2, #0
 8010320:	2300      	movs	r3, #0
 8010322:	4620      	mov	r0, r4
 8010324:	4629      	mov	r1, r5
 8010326:	f7f0 fbd7 	bl	8000ad8 <__aeabi_dcmpeq>
 801032a:	b108      	cbz	r0, 8010330 <__cvt+0xa4>
 801032c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010330:	2230      	movs	r2, #48	; 0x30
 8010332:	9b03      	ldr	r3, [sp, #12]
 8010334:	454b      	cmp	r3, r9
 8010336:	d307      	bcc.n	8010348 <__cvt+0xbc>
 8010338:	9b03      	ldr	r3, [sp, #12]
 801033a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801033c:	1bdb      	subs	r3, r3, r7
 801033e:	4638      	mov	r0, r7
 8010340:	6013      	str	r3, [r2, #0]
 8010342:	b004      	add	sp, #16
 8010344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010348:	1c59      	adds	r1, r3, #1
 801034a:	9103      	str	r1, [sp, #12]
 801034c:	701a      	strb	r2, [r3, #0]
 801034e:	e7f0      	b.n	8010332 <__cvt+0xa6>

08010350 <__exponent>:
 8010350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010352:	4603      	mov	r3, r0
 8010354:	2900      	cmp	r1, #0
 8010356:	bfb8      	it	lt
 8010358:	4249      	neglt	r1, r1
 801035a:	f803 2b02 	strb.w	r2, [r3], #2
 801035e:	bfb4      	ite	lt
 8010360:	222d      	movlt	r2, #45	; 0x2d
 8010362:	222b      	movge	r2, #43	; 0x2b
 8010364:	2909      	cmp	r1, #9
 8010366:	7042      	strb	r2, [r0, #1]
 8010368:	dd2a      	ble.n	80103c0 <__exponent+0x70>
 801036a:	f10d 0407 	add.w	r4, sp, #7
 801036e:	46a4      	mov	ip, r4
 8010370:	270a      	movs	r7, #10
 8010372:	46a6      	mov	lr, r4
 8010374:	460a      	mov	r2, r1
 8010376:	fb91 f6f7 	sdiv	r6, r1, r7
 801037a:	fb07 1516 	mls	r5, r7, r6, r1
 801037e:	3530      	adds	r5, #48	; 0x30
 8010380:	2a63      	cmp	r2, #99	; 0x63
 8010382:	f104 34ff 	add.w	r4, r4, #4294967295
 8010386:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801038a:	4631      	mov	r1, r6
 801038c:	dcf1      	bgt.n	8010372 <__exponent+0x22>
 801038e:	3130      	adds	r1, #48	; 0x30
 8010390:	f1ae 0502 	sub.w	r5, lr, #2
 8010394:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010398:	1c44      	adds	r4, r0, #1
 801039a:	4629      	mov	r1, r5
 801039c:	4561      	cmp	r1, ip
 801039e:	d30a      	bcc.n	80103b6 <__exponent+0x66>
 80103a0:	f10d 0209 	add.w	r2, sp, #9
 80103a4:	eba2 020e 	sub.w	r2, r2, lr
 80103a8:	4565      	cmp	r5, ip
 80103aa:	bf88      	it	hi
 80103ac:	2200      	movhi	r2, #0
 80103ae:	4413      	add	r3, r2
 80103b0:	1a18      	subs	r0, r3, r0
 80103b2:	b003      	add	sp, #12
 80103b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80103ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80103be:	e7ed      	b.n	801039c <__exponent+0x4c>
 80103c0:	2330      	movs	r3, #48	; 0x30
 80103c2:	3130      	adds	r1, #48	; 0x30
 80103c4:	7083      	strb	r3, [r0, #2]
 80103c6:	70c1      	strb	r1, [r0, #3]
 80103c8:	1d03      	adds	r3, r0, #4
 80103ca:	e7f1      	b.n	80103b0 <__exponent+0x60>

080103cc <_printf_float>:
 80103cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103d0:	ed2d 8b02 	vpush	{d8}
 80103d4:	b08d      	sub	sp, #52	; 0x34
 80103d6:	460c      	mov	r4, r1
 80103d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80103dc:	4616      	mov	r6, r2
 80103de:	461f      	mov	r7, r3
 80103e0:	4605      	mov	r5, r0
 80103e2:	f001 fdd5 	bl	8011f90 <_localeconv_r>
 80103e6:	f8d0 a000 	ldr.w	sl, [r0]
 80103ea:	4650      	mov	r0, sl
 80103ec:	f7ef fef8 	bl	80001e0 <strlen>
 80103f0:	2300      	movs	r3, #0
 80103f2:	930a      	str	r3, [sp, #40]	; 0x28
 80103f4:	6823      	ldr	r3, [r4, #0]
 80103f6:	9305      	str	r3, [sp, #20]
 80103f8:	f8d8 3000 	ldr.w	r3, [r8]
 80103fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010400:	3307      	adds	r3, #7
 8010402:	f023 0307 	bic.w	r3, r3, #7
 8010406:	f103 0208 	add.w	r2, r3, #8
 801040a:	f8c8 2000 	str.w	r2, [r8]
 801040e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010412:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010416:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801041a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801041e:	9307      	str	r3, [sp, #28]
 8010420:	f8cd 8018 	str.w	r8, [sp, #24]
 8010424:	ee08 0a10 	vmov	s16, r0
 8010428:	4b9f      	ldr	r3, [pc, #636]	; (80106a8 <_printf_float+0x2dc>)
 801042a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801042e:	f04f 32ff 	mov.w	r2, #4294967295
 8010432:	f7f0 fb83 	bl	8000b3c <__aeabi_dcmpun>
 8010436:	bb88      	cbnz	r0, 801049c <_printf_float+0xd0>
 8010438:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801043c:	4b9a      	ldr	r3, [pc, #616]	; (80106a8 <_printf_float+0x2dc>)
 801043e:	f04f 32ff 	mov.w	r2, #4294967295
 8010442:	f7f0 fb5d 	bl	8000b00 <__aeabi_dcmple>
 8010446:	bb48      	cbnz	r0, 801049c <_printf_float+0xd0>
 8010448:	2200      	movs	r2, #0
 801044a:	2300      	movs	r3, #0
 801044c:	4640      	mov	r0, r8
 801044e:	4649      	mov	r1, r9
 8010450:	f7f0 fb4c 	bl	8000aec <__aeabi_dcmplt>
 8010454:	b110      	cbz	r0, 801045c <_printf_float+0x90>
 8010456:	232d      	movs	r3, #45	; 0x2d
 8010458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801045c:	4b93      	ldr	r3, [pc, #588]	; (80106ac <_printf_float+0x2e0>)
 801045e:	4894      	ldr	r0, [pc, #592]	; (80106b0 <_printf_float+0x2e4>)
 8010460:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010464:	bf94      	ite	ls
 8010466:	4698      	movls	r8, r3
 8010468:	4680      	movhi	r8, r0
 801046a:	2303      	movs	r3, #3
 801046c:	6123      	str	r3, [r4, #16]
 801046e:	9b05      	ldr	r3, [sp, #20]
 8010470:	f023 0204 	bic.w	r2, r3, #4
 8010474:	6022      	str	r2, [r4, #0]
 8010476:	f04f 0900 	mov.w	r9, #0
 801047a:	9700      	str	r7, [sp, #0]
 801047c:	4633      	mov	r3, r6
 801047e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010480:	4621      	mov	r1, r4
 8010482:	4628      	mov	r0, r5
 8010484:	f000 f9d8 	bl	8010838 <_printf_common>
 8010488:	3001      	adds	r0, #1
 801048a:	f040 8090 	bne.w	80105ae <_printf_float+0x1e2>
 801048e:	f04f 30ff 	mov.w	r0, #4294967295
 8010492:	b00d      	add	sp, #52	; 0x34
 8010494:	ecbd 8b02 	vpop	{d8}
 8010498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801049c:	4642      	mov	r2, r8
 801049e:	464b      	mov	r3, r9
 80104a0:	4640      	mov	r0, r8
 80104a2:	4649      	mov	r1, r9
 80104a4:	f7f0 fb4a 	bl	8000b3c <__aeabi_dcmpun>
 80104a8:	b140      	cbz	r0, 80104bc <_printf_float+0xf0>
 80104aa:	464b      	mov	r3, r9
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	bfbc      	itt	lt
 80104b0:	232d      	movlt	r3, #45	; 0x2d
 80104b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80104b6:	487f      	ldr	r0, [pc, #508]	; (80106b4 <_printf_float+0x2e8>)
 80104b8:	4b7f      	ldr	r3, [pc, #508]	; (80106b8 <_printf_float+0x2ec>)
 80104ba:	e7d1      	b.n	8010460 <_printf_float+0x94>
 80104bc:	6863      	ldr	r3, [r4, #4]
 80104be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80104c2:	9206      	str	r2, [sp, #24]
 80104c4:	1c5a      	adds	r2, r3, #1
 80104c6:	d13f      	bne.n	8010548 <_printf_float+0x17c>
 80104c8:	2306      	movs	r3, #6
 80104ca:	6063      	str	r3, [r4, #4]
 80104cc:	9b05      	ldr	r3, [sp, #20]
 80104ce:	6861      	ldr	r1, [r4, #4]
 80104d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80104d4:	2300      	movs	r3, #0
 80104d6:	9303      	str	r3, [sp, #12]
 80104d8:	ab0a      	add	r3, sp, #40	; 0x28
 80104da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80104de:	ab09      	add	r3, sp, #36	; 0x24
 80104e0:	ec49 8b10 	vmov	d0, r8, r9
 80104e4:	9300      	str	r3, [sp, #0]
 80104e6:	6022      	str	r2, [r4, #0]
 80104e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80104ec:	4628      	mov	r0, r5
 80104ee:	f7ff fecd 	bl	801028c <__cvt>
 80104f2:	9b06      	ldr	r3, [sp, #24]
 80104f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80104f6:	2b47      	cmp	r3, #71	; 0x47
 80104f8:	4680      	mov	r8, r0
 80104fa:	d108      	bne.n	801050e <_printf_float+0x142>
 80104fc:	1cc8      	adds	r0, r1, #3
 80104fe:	db02      	blt.n	8010506 <_printf_float+0x13a>
 8010500:	6863      	ldr	r3, [r4, #4]
 8010502:	4299      	cmp	r1, r3
 8010504:	dd41      	ble.n	801058a <_printf_float+0x1be>
 8010506:	f1ab 0b02 	sub.w	fp, fp, #2
 801050a:	fa5f fb8b 	uxtb.w	fp, fp
 801050e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010512:	d820      	bhi.n	8010556 <_printf_float+0x18a>
 8010514:	3901      	subs	r1, #1
 8010516:	465a      	mov	r2, fp
 8010518:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801051c:	9109      	str	r1, [sp, #36]	; 0x24
 801051e:	f7ff ff17 	bl	8010350 <__exponent>
 8010522:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010524:	1813      	adds	r3, r2, r0
 8010526:	2a01      	cmp	r2, #1
 8010528:	4681      	mov	r9, r0
 801052a:	6123      	str	r3, [r4, #16]
 801052c:	dc02      	bgt.n	8010534 <_printf_float+0x168>
 801052e:	6822      	ldr	r2, [r4, #0]
 8010530:	07d2      	lsls	r2, r2, #31
 8010532:	d501      	bpl.n	8010538 <_printf_float+0x16c>
 8010534:	3301      	adds	r3, #1
 8010536:	6123      	str	r3, [r4, #16]
 8010538:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801053c:	2b00      	cmp	r3, #0
 801053e:	d09c      	beq.n	801047a <_printf_float+0xae>
 8010540:	232d      	movs	r3, #45	; 0x2d
 8010542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010546:	e798      	b.n	801047a <_printf_float+0xae>
 8010548:	9a06      	ldr	r2, [sp, #24]
 801054a:	2a47      	cmp	r2, #71	; 0x47
 801054c:	d1be      	bne.n	80104cc <_printf_float+0x100>
 801054e:	2b00      	cmp	r3, #0
 8010550:	d1bc      	bne.n	80104cc <_printf_float+0x100>
 8010552:	2301      	movs	r3, #1
 8010554:	e7b9      	b.n	80104ca <_printf_float+0xfe>
 8010556:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801055a:	d118      	bne.n	801058e <_printf_float+0x1c2>
 801055c:	2900      	cmp	r1, #0
 801055e:	6863      	ldr	r3, [r4, #4]
 8010560:	dd0b      	ble.n	801057a <_printf_float+0x1ae>
 8010562:	6121      	str	r1, [r4, #16]
 8010564:	b913      	cbnz	r3, 801056c <_printf_float+0x1a0>
 8010566:	6822      	ldr	r2, [r4, #0]
 8010568:	07d0      	lsls	r0, r2, #31
 801056a:	d502      	bpl.n	8010572 <_printf_float+0x1a6>
 801056c:	3301      	adds	r3, #1
 801056e:	440b      	add	r3, r1
 8010570:	6123      	str	r3, [r4, #16]
 8010572:	65a1      	str	r1, [r4, #88]	; 0x58
 8010574:	f04f 0900 	mov.w	r9, #0
 8010578:	e7de      	b.n	8010538 <_printf_float+0x16c>
 801057a:	b913      	cbnz	r3, 8010582 <_printf_float+0x1b6>
 801057c:	6822      	ldr	r2, [r4, #0]
 801057e:	07d2      	lsls	r2, r2, #31
 8010580:	d501      	bpl.n	8010586 <_printf_float+0x1ba>
 8010582:	3302      	adds	r3, #2
 8010584:	e7f4      	b.n	8010570 <_printf_float+0x1a4>
 8010586:	2301      	movs	r3, #1
 8010588:	e7f2      	b.n	8010570 <_printf_float+0x1a4>
 801058a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801058e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010590:	4299      	cmp	r1, r3
 8010592:	db05      	blt.n	80105a0 <_printf_float+0x1d4>
 8010594:	6823      	ldr	r3, [r4, #0]
 8010596:	6121      	str	r1, [r4, #16]
 8010598:	07d8      	lsls	r0, r3, #31
 801059a:	d5ea      	bpl.n	8010572 <_printf_float+0x1a6>
 801059c:	1c4b      	adds	r3, r1, #1
 801059e:	e7e7      	b.n	8010570 <_printf_float+0x1a4>
 80105a0:	2900      	cmp	r1, #0
 80105a2:	bfd4      	ite	le
 80105a4:	f1c1 0202 	rsble	r2, r1, #2
 80105a8:	2201      	movgt	r2, #1
 80105aa:	4413      	add	r3, r2
 80105ac:	e7e0      	b.n	8010570 <_printf_float+0x1a4>
 80105ae:	6823      	ldr	r3, [r4, #0]
 80105b0:	055a      	lsls	r2, r3, #21
 80105b2:	d407      	bmi.n	80105c4 <_printf_float+0x1f8>
 80105b4:	6923      	ldr	r3, [r4, #16]
 80105b6:	4642      	mov	r2, r8
 80105b8:	4631      	mov	r1, r6
 80105ba:	4628      	mov	r0, r5
 80105bc:	47b8      	blx	r7
 80105be:	3001      	adds	r0, #1
 80105c0:	d12c      	bne.n	801061c <_printf_float+0x250>
 80105c2:	e764      	b.n	801048e <_printf_float+0xc2>
 80105c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80105c8:	f240 80e0 	bls.w	801078c <_printf_float+0x3c0>
 80105cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80105d0:	2200      	movs	r2, #0
 80105d2:	2300      	movs	r3, #0
 80105d4:	f7f0 fa80 	bl	8000ad8 <__aeabi_dcmpeq>
 80105d8:	2800      	cmp	r0, #0
 80105da:	d034      	beq.n	8010646 <_printf_float+0x27a>
 80105dc:	4a37      	ldr	r2, [pc, #220]	; (80106bc <_printf_float+0x2f0>)
 80105de:	2301      	movs	r3, #1
 80105e0:	4631      	mov	r1, r6
 80105e2:	4628      	mov	r0, r5
 80105e4:	47b8      	blx	r7
 80105e6:	3001      	adds	r0, #1
 80105e8:	f43f af51 	beq.w	801048e <_printf_float+0xc2>
 80105ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80105f0:	429a      	cmp	r2, r3
 80105f2:	db02      	blt.n	80105fa <_printf_float+0x22e>
 80105f4:	6823      	ldr	r3, [r4, #0]
 80105f6:	07d8      	lsls	r0, r3, #31
 80105f8:	d510      	bpl.n	801061c <_printf_float+0x250>
 80105fa:	ee18 3a10 	vmov	r3, s16
 80105fe:	4652      	mov	r2, sl
 8010600:	4631      	mov	r1, r6
 8010602:	4628      	mov	r0, r5
 8010604:	47b8      	blx	r7
 8010606:	3001      	adds	r0, #1
 8010608:	f43f af41 	beq.w	801048e <_printf_float+0xc2>
 801060c:	f04f 0800 	mov.w	r8, #0
 8010610:	f104 091a 	add.w	r9, r4, #26
 8010614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010616:	3b01      	subs	r3, #1
 8010618:	4543      	cmp	r3, r8
 801061a:	dc09      	bgt.n	8010630 <_printf_float+0x264>
 801061c:	6823      	ldr	r3, [r4, #0]
 801061e:	079b      	lsls	r3, r3, #30
 8010620:	f100 8105 	bmi.w	801082e <_printf_float+0x462>
 8010624:	68e0      	ldr	r0, [r4, #12]
 8010626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010628:	4298      	cmp	r0, r3
 801062a:	bfb8      	it	lt
 801062c:	4618      	movlt	r0, r3
 801062e:	e730      	b.n	8010492 <_printf_float+0xc6>
 8010630:	2301      	movs	r3, #1
 8010632:	464a      	mov	r2, r9
 8010634:	4631      	mov	r1, r6
 8010636:	4628      	mov	r0, r5
 8010638:	47b8      	blx	r7
 801063a:	3001      	adds	r0, #1
 801063c:	f43f af27 	beq.w	801048e <_printf_float+0xc2>
 8010640:	f108 0801 	add.w	r8, r8, #1
 8010644:	e7e6      	b.n	8010614 <_printf_float+0x248>
 8010646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010648:	2b00      	cmp	r3, #0
 801064a:	dc39      	bgt.n	80106c0 <_printf_float+0x2f4>
 801064c:	4a1b      	ldr	r2, [pc, #108]	; (80106bc <_printf_float+0x2f0>)
 801064e:	2301      	movs	r3, #1
 8010650:	4631      	mov	r1, r6
 8010652:	4628      	mov	r0, r5
 8010654:	47b8      	blx	r7
 8010656:	3001      	adds	r0, #1
 8010658:	f43f af19 	beq.w	801048e <_printf_float+0xc2>
 801065c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010660:	4313      	orrs	r3, r2
 8010662:	d102      	bne.n	801066a <_printf_float+0x29e>
 8010664:	6823      	ldr	r3, [r4, #0]
 8010666:	07d9      	lsls	r1, r3, #31
 8010668:	d5d8      	bpl.n	801061c <_printf_float+0x250>
 801066a:	ee18 3a10 	vmov	r3, s16
 801066e:	4652      	mov	r2, sl
 8010670:	4631      	mov	r1, r6
 8010672:	4628      	mov	r0, r5
 8010674:	47b8      	blx	r7
 8010676:	3001      	adds	r0, #1
 8010678:	f43f af09 	beq.w	801048e <_printf_float+0xc2>
 801067c:	f04f 0900 	mov.w	r9, #0
 8010680:	f104 0a1a 	add.w	sl, r4, #26
 8010684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010686:	425b      	negs	r3, r3
 8010688:	454b      	cmp	r3, r9
 801068a:	dc01      	bgt.n	8010690 <_printf_float+0x2c4>
 801068c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801068e:	e792      	b.n	80105b6 <_printf_float+0x1ea>
 8010690:	2301      	movs	r3, #1
 8010692:	4652      	mov	r2, sl
 8010694:	4631      	mov	r1, r6
 8010696:	4628      	mov	r0, r5
 8010698:	47b8      	blx	r7
 801069a:	3001      	adds	r0, #1
 801069c:	f43f aef7 	beq.w	801048e <_printf_float+0xc2>
 80106a0:	f109 0901 	add.w	r9, r9, #1
 80106a4:	e7ee      	b.n	8010684 <_printf_float+0x2b8>
 80106a6:	bf00      	nop
 80106a8:	7fefffff 	.word	0x7fefffff
 80106ac:	08014860 	.word	0x08014860
 80106b0:	08014864 	.word	0x08014864
 80106b4:	0801486c 	.word	0x0801486c
 80106b8:	08014868 	.word	0x08014868
 80106bc:	08014870 	.word	0x08014870
 80106c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80106c4:	429a      	cmp	r2, r3
 80106c6:	bfa8      	it	ge
 80106c8:	461a      	movge	r2, r3
 80106ca:	2a00      	cmp	r2, #0
 80106cc:	4691      	mov	r9, r2
 80106ce:	dc37      	bgt.n	8010740 <_printf_float+0x374>
 80106d0:	f04f 0b00 	mov.w	fp, #0
 80106d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80106d8:	f104 021a 	add.w	r2, r4, #26
 80106dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80106de:	9305      	str	r3, [sp, #20]
 80106e0:	eba3 0309 	sub.w	r3, r3, r9
 80106e4:	455b      	cmp	r3, fp
 80106e6:	dc33      	bgt.n	8010750 <_printf_float+0x384>
 80106e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80106ec:	429a      	cmp	r2, r3
 80106ee:	db3b      	blt.n	8010768 <_printf_float+0x39c>
 80106f0:	6823      	ldr	r3, [r4, #0]
 80106f2:	07da      	lsls	r2, r3, #31
 80106f4:	d438      	bmi.n	8010768 <_printf_float+0x39c>
 80106f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106f8:	9a05      	ldr	r2, [sp, #20]
 80106fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80106fc:	1a9a      	subs	r2, r3, r2
 80106fe:	eba3 0901 	sub.w	r9, r3, r1
 8010702:	4591      	cmp	r9, r2
 8010704:	bfa8      	it	ge
 8010706:	4691      	movge	r9, r2
 8010708:	f1b9 0f00 	cmp.w	r9, #0
 801070c:	dc35      	bgt.n	801077a <_printf_float+0x3ae>
 801070e:	f04f 0800 	mov.w	r8, #0
 8010712:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010716:	f104 0a1a 	add.w	sl, r4, #26
 801071a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801071e:	1a9b      	subs	r3, r3, r2
 8010720:	eba3 0309 	sub.w	r3, r3, r9
 8010724:	4543      	cmp	r3, r8
 8010726:	f77f af79 	ble.w	801061c <_printf_float+0x250>
 801072a:	2301      	movs	r3, #1
 801072c:	4652      	mov	r2, sl
 801072e:	4631      	mov	r1, r6
 8010730:	4628      	mov	r0, r5
 8010732:	47b8      	blx	r7
 8010734:	3001      	adds	r0, #1
 8010736:	f43f aeaa 	beq.w	801048e <_printf_float+0xc2>
 801073a:	f108 0801 	add.w	r8, r8, #1
 801073e:	e7ec      	b.n	801071a <_printf_float+0x34e>
 8010740:	4613      	mov	r3, r2
 8010742:	4631      	mov	r1, r6
 8010744:	4642      	mov	r2, r8
 8010746:	4628      	mov	r0, r5
 8010748:	47b8      	blx	r7
 801074a:	3001      	adds	r0, #1
 801074c:	d1c0      	bne.n	80106d0 <_printf_float+0x304>
 801074e:	e69e      	b.n	801048e <_printf_float+0xc2>
 8010750:	2301      	movs	r3, #1
 8010752:	4631      	mov	r1, r6
 8010754:	4628      	mov	r0, r5
 8010756:	9205      	str	r2, [sp, #20]
 8010758:	47b8      	blx	r7
 801075a:	3001      	adds	r0, #1
 801075c:	f43f ae97 	beq.w	801048e <_printf_float+0xc2>
 8010760:	9a05      	ldr	r2, [sp, #20]
 8010762:	f10b 0b01 	add.w	fp, fp, #1
 8010766:	e7b9      	b.n	80106dc <_printf_float+0x310>
 8010768:	ee18 3a10 	vmov	r3, s16
 801076c:	4652      	mov	r2, sl
 801076e:	4631      	mov	r1, r6
 8010770:	4628      	mov	r0, r5
 8010772:	47b8      	blx	r7
 8010774:	3001      	adds	r0, #1
 8010776:	d1be      	bne.n	80106f6 <_printf_float+0x32a>
 8010778:	e689      	b.n	801048e <_printf_float+0xc2>
 801077a:	9a05      	ldr	r2, [sp, #20]
 801077c:	464b      	mov	r3, r9
 801077e:	4442      	add	r2, r8
 8010780:	4631      	mov	r1, r6
 8010782:	4628      	mov	r0, r5
 8010784:	47b8      	blx	r7
 8010786:	3001      	adds	r0, #1
 8010788:	d1c1      	bne.n	801070e <_printf_float+0x342>
 801078a:	e680      	b.n	801048e <_printf_float+0xc2>
 801078c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801078e:	2a01      	cmp	r2, #1
 8010790:	dc01      	bgt.n	8010796 <_printf_float+0x3ca>
 8010792:	07db      	lsls	r3, r3, #31
 8010794:	d538      	bpl.n	8010808 <_printf_float+0x43c>
 8010796:	2301      	movs	r3, #1
 8010798:	4642      	mov	r2, r8
 801079a:	4631      	mov	r1, r6
 801079c:	4628      	mov	r0, r5
 801079e:	47b8      	blx	r7
 80107a0:	3001      	adds	r0, #1
 80107a2:	f43f ae74 	beq.w	801048e <_printf_float+0xc2>
 80107a6:	ee18 3a10 	vmov	r3, s16
 80107aa:	4652      	mov	r2, sl
 80107ac:	4631      	mov	r1, r6
 80107ae:	4628      	mov	r0, r5
 80107b0:	47b8      	blx	r7
 80107b2:	3001      	adds	r0, #1
 80107b4:	f43f ae6b 	beq.w	801048e <_printf_float+0xc2>
 80107b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80107bc:	2200      	movs	r2, #0
 80107be:	2300      	movs	r3, #0
 80107c0:	f7f0 f98a 	bl	8000ad8 <__aeabi_dcmpeq>
 80107c4:	b9d8      	cbnz	r0, 80107fe <_printf_float+0x432>
 80107c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107c8:	f108 0201 	add.w	r2, r8, #1
 80107cc:	3b01      	subs	r3, #1
 80107ce:	4631      	mov	r1, r6
 80107d0:	4628      	mov	r0, r5
 80107d2:	47b8      	blx	r7
 80107d4:	3001      	adds	r0, #1
 80107d6:	d10e      	bne.n	80107f6 <_printf_float+0x42a>
 80107d8:	e659      	b.n	801048e <_printf_float+0xc2>
 80107da:	2301      	movs	r3, #1
 80107dc:	4652      	mov	r2, sl
 80107de:	4631      	mov	r1, r6
 80107e0:	4628      	mov	r0, r5
 80107e2:	47b8      	blx	r7
 80107e4:	3001      	adds	r0, #1
 80107e6:	f43f ae52 	beq.w	801048e <_printf_float+0xc2>
 80107ea:	f108 0801 	add.w	r8, r8, #1
 80107ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107f0:	3b01      	subs	r3, #1
 80107f2:	4543      	cmp	r3, r8
 80107f4:	dcf1      	bgt.n	80107da <_printf_float+0x40e>
 80107f6:	464b      	mov	r3, r9
 80107f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80107fc:	e6dc      	b.n	80105b8 <_printf_float+0x1ec>
 80107fe:	f04f 0800 	mov.w	r8, #0
 8010802:	f104 0a1a 	add.w	sl, r4, #26
 8010806:	e7f2      	b.n	80107ee <_printf_float+0x422>
 8010808:	2301      	movs	r3, #1
 801080a:	4642      	mov	r2, r8
 801080c:	e7df      	b.n	80107ce <_printf_float+0x402>
 801080e:	2301      	movs	r3, #1
 8010810:	464a      	mov	r2, r9
 8010812:	4631      	mov	r1, r6
 8010814:	4628      	mov	r0, r5
 8010816:	47b8      	blx	r7
 8010818:	3001      	adds	r0, #1
 801081a:	f43f ae38 	beq.w	801048e <_printf_float+0xc2>
 801081e:	f108 0801 	add.w	r8, r8, #1
 8010822:	68e3      	ldr	r3, [r4, #12]
 8010824:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010826:	1a5b      	subs	r3, r3, r1
 8010828:	4543      	cmp	r3, r8
 801082a:	dcf0      	bgt.n	801080e <_printf_float+0x442>
 801082c:	e6fa      	b.n	8010624 <_printf_float+0x258>
 801082e:	f04f 0800 	mov.w	r8, #0
 8010832:	f104 0919 	add.w	r9, r4, #25
 8010836:	e7f4      	b.n	8010822 <_printf_float+0x456>

08010838 <_printf_common>:
 8010838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801083c:	4616      	mov	r6, r2
 801083e:	4699      	mov	r9, r3
 8010840:	688a      	ldr	r2, [r1, #8]
 8010842:	690b      	ldr	r3, [r1, #16]
 8010844:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010848:	4293      	cmp	r3, r2
 801084a:	bfb8      	it	lt
 801084c:	4613      	movlt	r3, r2
 801084e:	6033      	str	r3, [r6, #0]
 8010850:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010854:	4607      	mov	r7, r0
 8010856:	460c      	mov	r4, r1
 8010858:	b10a      	cbz	r2, 801085e <_printf_common+0x26>
 801085a:	3301      	adds	r3, #1
 801085c:	6033      	str	r3, [r6, #0]
 801085e:	6823      	ldr	r3, [r4, #0]
 8010860:	0699      	lsls	r1, r3, #26
 8010862:	bf42      	ittt	mi
 8010864:	6833      	ldrmi	r3, [r6, #0]
 8010866:	3302      	addmi	r3, #2
 8010868:	6033      	strmi	r3, [r6, #0]
 801086a:	6825      	ldr	r5, [r4, #0]
 801086c:	f015 0506 	ands.w	r5, r5, #6
 8010870:	d106      	bne.n	8010880 <_printf_common+0x48>
 8010872:	f104 0a19 	add.w	sl, r4, #25
 8010876:	68e3      	ldr	r3, [r4, #12]
 8010878:	6832      	ldr	r2, [r6, #0]
 801087a:	1a9b      	subs	r3, r3, r2
 801087c:	42ab      	cmp	r3, r5
 801087e:	dc26      	bgt.n	80108ce <_printf_common+0x96>
 8010880:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010884:	1e13      	subs	r3, r2, #0
 8010886:	6822      	ldr	r2, [r4, #0]
 8010888:	bf18      	it	ne
 801088a:	2301      	movne	r3, #1
 801088c:	0692      	lsls	r2, r2, #26
 801088e:	d42b      	bmi.n	80108e8 <_printf_common+0xb0>
 8010890:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010894:	4649      	mov	r1, r9
 8010896:	4638      	mov	r0, r7
 8010898:	47c0      	blx	r8
 801089a:	3001      	adds	r0, #1
 801089c:	d01e      	beq.n	80108dc <_printf_common+0xa4>
 801089e:	6823      	ldr	r3, [r4, #0]
 80108a0:	68e5      	ldr	r5, [r4, #12]
 80108a2:	6832      	ldr	r2, [r6, #0]
 80108a4:	f003 0306 	and.w	r3, r3, #6
 80108a8:	2b04      	cmp	r3, #4
 80108aa:	bf08      	it	eq
 80108ac:	1aad      	subeq	r5, r5, r2
 80108ae:	68a3      	ldr	r3, [r4, #8]
 80108b0:	6922      	ldr	r2, [r4, #16]
 80108b2:	bf0c      	ite	eq
 80108b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80108b8:	2500      	movne	r5, #0
 80108ba:	4293      	cmp	r3, r2
 80108bc:	bfc4      	itt	gt
 80108be:	1a9b      	subgt	r3, r3, r2
 80108c0:	18ed      	addgt	r5, r5, r3
 80108c2:	2600      	movs	r6, #0
 80108c4:	341a      	adds	r4, #26
 80108c6:	42b5      	cmp	r5, r6
 80108c8:	d11a      	bne.n	8010900 <_printf_common+0xc8>
 80108ca:	2000      	movs	r0, #0
 80108cc:	e008      	b.n	80108e0 <_printf_common+0xa8>
 80108ce:	2301      	movs	r3, #1
 80108d0:	4652      	mov	r2, sl
 80108d2:	4649      	mov	r1, r9
 80108d4:	4638      	mov	r0, r7
 80108d6:	47c0      	blx	r8
 80108d8:	3001      	adds	r0, #1
 80108da:	d103      	bne.n	80108e4 <_printf_common+0xac>
 80108dc:	f04f 30ff 	mov.w	r0, #4294967295
 80108e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108e4:	3501      	adds	r5, #1
 80108e6:	e7c6      	b.n	8010876 <_printf_common+0x3e>
 80108e8:	18e1      	adds	r1, r4, r3
 80108ea:	1c5a      	adds	r2, r3, #1
 80108ec:	2030      	movs	r0, #48	; 0x30
 80108ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80108f2:	4422      	add	r2, r4
 80108f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80108f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80108fc:	3302      	adds	r3, #2
 80108fe:	e7c7      	b.n	8010890 <_printf_common+0x58>
 8010900:	2301      	movs	r3, #1
 8010902:	4622      	mov	r2, r4
 8010904:	4649      	mov	r1, r9
 8010906:	4638      	mov	r0, r7
 8010908:	47c0      	blx	r8
 801090a:	3001      	adds	r0, #1
 801090c:	d0e6      	beq.n	80108dc <_printf_common+0xa4>
 801090e:	3601      	adds	r6, #1
 8010910:	e7d9      	b.n	80108c6 <_printf_common+0x8e>
	...

08010914 <_printf_i>:
 8010914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010918:	7e0f      	ldrb	r7, [r1, #24]
 801091a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801091c:	2f78      	cmp	r7, #120	; 0x78
 801091e:	4691      	mov	r9, r2
 8010920:	4680      	mov	r8, r0
 8010922:	460c      	mov	r4, r1
 8010924:	469a      	mov	sl, r3
 8010926:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801092a:	d807      	bhi.n	801093c <_printf_i+0x28>
 801092c:	2f62      	cmp	r7, #98	; 0x62
 801092e:	d80a      	bhi.n	8010946 <_printf_i+0x32>
 8010930:	2f00      	cmp	r7, #0
 8010932:	f000 80d8 	beq.w	8010ae6 <_printf_i+0x1d2>
 8010936:	2f58      	cmp	r7, #88	; 0x58
 8010938:	f000 80a3 	beq.w	8010a82 <_printf_i+0x16e>
 801093c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010940:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010944:	e03a      	b.n	80109bc <_printf_i+0xa8>
 8010946:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801094a:	2b15      	cmp	r3, #21
 801094c:	d8f6      	bhi.n	801093c <_printf_i+0x28>
 801094e:	a101      	add	r1, pc, #4	; (adr r1, 8010954 <_printf_i+0x40>)
 8010950:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010954:	080109ad 	.word	0x080109ad
 8010958:	080109c1 	.word	0x080109c1
 801095c:	0801093d 	.word	0x0801093d
 8010960:	0801093d 	.word	0x0801093d
 8010964:	0801093d 	.word	0x0801093d
 8010968:	0801093d 	.word	0x0801093d
 801096c:	080109c1 	.word	0x080109c1
 8010970:	0801093d 	.word	0x0801093d
 8010974:	0801093d 	.word	0x0801093d
 8010978:	0801093d 	.word	0x0801093d
 801097c:	0801093d 	.word	0x0801093d
 8010980:	08010acd 	.word	0x08010acd
 8010984:	080109f1 	.word	0x080109f1
 8010988:	08010aaf 	.word	0x08010aaf
 801098c:	0801093d 	.word	0x0801093d
 8010990:	0801093d 	.word	0x0801093d
 8010994:	08010aef 	.word	0x08010aef
 8010998:	0801093d 	.word	0x0801093d
 801099c:	080109f1 	.word	0x080109f1
 80109a0:	0801093d 	.word	0x0801093d
 80109a4:	0801093d 	.word	0x0801093d
 80109a8:	08010ab7 	.word	0x08010ab7
 80109ac:	682b      	ldr	r3, [r5, #0]
 80109ae:	1d1a      	adds	r2, r3, #4
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	602a      	str	r2, [r5, #0]
 80109b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80109b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80109bc:	2301      	movs	r3, #1
 80109be:	e0a3      	b.n	8010b08 <_printf_i+0x1f4>
 80109c0:	6820      	ldr	r0, [r4, #0]
 80109c2:	6829      	ldr	r1, [r5, #0]
 80109c4:	0606      	lsls	r6, r0, #24
 80109c6:	f101 0304 	add.w	r3, r1, #4
 80109ca:	d50a      	bpl.n	80109e2 <_printf_i+0xce>
 80109cc:	680e      	ldr	r6, [r1, #0]
 80109ce:	602b      	str	r3, [r5, #0]
 80109d0:	2e00      	cmp	r6, #0
 80109d2:	da03      	bge.n	80109dc <_printf_i+0xc8>
 80109d4:	232d      	movs	r3, #45	; 0x2d
 80109d6:	4276      	negs	r6, r6
 80109d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80109dc:	485e      	ldr	r0, [pc, #376]	; (8010b58 <_printf_i+0x244>)
 80109de:	230a      	movs	r3, #10
 80109e0:	e019      	b.n	8010a16 <_printf_i+0x102>
 80109e2:	680e      	ldr	r6, [r1, #0]
 80109e4:	602b      	str	r3, [r5, #0]
 80109e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80109ea:	bf18      	it	ne
 80109ec:	b236      	sxthne	r6, r6
 80109ee:	e7ef      	b.n	80109d0 <_printf_i+0xbc>
 80109f0:	682b      	ldr	r3, [r5, #0]
 80109f2:	6820      	ldr	r0, [r4, #0]
 80109f4:	1d19      	adds	r1, r3, #4
 80109f6:	6029      	str	r1, [r5, #0]
 80109f8:	0601      	lsls	r1, r0, #24
 80109fa:	d501      	bpl.n	8010a00 <_printf_i+0xec>
 80109fc:	681e      	ldr	r6, [r3, #0]
 80109fe:	e002      	b.n	8010a06 <_printf_i+0xf2>
 8010a00:	0646      	lsls	r6, r0, #25
 8010a02:	d5fb      	bpl.n	80109fc <_printf_i+0xe8>
 8010a04:	881e      	ldrh	r6, [r3, #0]
 8010a06:	4854      	ldr	r0, [pc, #336]	; (8010b58 <_printf_i+0x244>)
 8010a08:	2f6f      	cmp	r7, #111	; 0x6f
 8010a0a:	bf0c      	ite	eq
 8010a0c:	2308      	moveq	r3, #8
 8010a0e:	230a      	movne	r3, #10
 8010a10:	2100      	movs	r1, #0
 8010a12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010a16:	6865      	ldr	r5, [r4, #4]
 8010a18:	60a5      	str	r5, [r4, #8]
 8010a1a:	2d00      	cmp	r5, #0
 8010a1c:	bfa2      	ittt	ge
 8010a1e:	6821      	ldrge	r1, [r4, #0]
 8010a20:	f021 0104 	bicge.w	r1, r1, #4
 8010a24:	6021      	strge	r1, [r4, #0]
 8010a26:	b90e      	cbnz	r6, 8010a2c <_printf_i+0x118>
 8010a28:	2d00      	cmp	r5, #0
 8010a2a:	d04d      	beq.n	8010ac8 <_printf_i+0x1b4>
 8010a2c:	4615      	mov	r5, r2
 8010a2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010a32:	fb03 6711 	mls	r7, r3, r1, r6
 8010a36:	5dc7      	ldrb	r7, [r0, r7]
 8010a38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010a3c:	4637      	mov	r7, r6
 8010a3e:	42bb      	cmp	r3, r7
 8010a40:	460e      	mov	r6, r1
 8010a42:	d9f4      	bls.n	8010a2e <_printf_i+0x11a>
 8010a44:	2b08      	cmp	r3, #8
 8010a46:	d10b      	bne.n	8010a60 <_printf_i+0x14c>
 8010a48:	6823      	ldr	r3, [r4, #0]
 8010a4a:	07de      	lsls	r6, r3, #31
 8010a4c:	d508      	bpl.n	8010a60 <_printf_i+0x14c>
 8010a4e:	6923      	ldr	r3, [r4, #16]
 8010a50:	6861      	ldr	r1, [r4, #4]
 8010a52:	4299      	cmp	r1, r3
 8010a54:	bfde      	ittt	le
 8010a56:	2330      	movle	r3, #48	; 0x30
 8010a58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010a5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010a60:	1b52      	subs	r2, r2, r5
 8010a62:	6122      	str	r2, [r4, #16]
 8010a64:	f8cd a000 	str.w	sl, [sp]
 8010a68:	464b      	mov	r3, r9
 8010a6a:	aa03      	add	r2, sp, #12
 8010a6c:	4621      	mov	r1, r4
 8010a6e:	4640      	mov	r0, r8
 8010a70:	f7ff fee2 	bl	8010838 <_printf_common>
 8010a74:	3001      	adds	r0, #1
 8010a76:	d14c      	bne.n	8010b12 <_printf_i+0x1fe>
 8010a78:	f04f 30ff 	mov.w	r0, #4294967295
 8010a7c:	b004      	add	sp, #16
 8010a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a82:	4835      	ldr	r0, [pc, #212]	; (8010b58 <_printf_i+0x244>)
 8010a84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010a88:	6829      	ldr	r1, [r5, #0]
 8010a8a:	6823      	ldr	r3, [r4, #0]
 8010a8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010a90:	6029      	str	r1, [r5, #0]
 8010a92:	061d      	lsls	r5, r3, #24
 8010a94:	d514      	bpl.n	8010ac0 <_printf_i+0x1ac>
 8010a96:	07df      	lsls	r7, r3, #31
 8010a98:	bf44      	itt	mi
 8010a9a:	f043 0320 	orrmi.w	r3, r3, #32
 8010a9e:	6023      	strmi	r3, [r4, #0]
 8010aa0:	b91e      	cbnz	r6, 8010aaa <_printf_i+0x196>
 8010aa2:	6823      	ldr	r3, [r4, #0]
 8010aa4:	f023 0320 	bic.w	r3, r3, #32
 8010aa8:	6023      	str	r3, [r4, #0]
 8010aaa:	2310      	movs	r3, #16
 8010aac:	e7b0      	b.n	8010a10 <_printf_i+0xfc>
 8010aae:	6823      	ldr	r3, [r4, #0]
 8010ab0:	f043 0320 	orr.w	r3, r3, #32
 8010ab4:	6023      	str	r3, [r4, #0]
 8010ab6:	2378      	movs	r3, #120	; 0x78
 8010ab8:	4828      	ldr	r0, [pc, #160]	; (8010b5c <_printf_i+0x248>)
 8010aba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010abe:	e7e3      	b.n	8010a88 <_printf_i+0x174>
 8010ac0:	0659      	lsls	r1, r3, #25
 8010ac2:	bf48      	it	mi
 8010ac4:	b2b6      	uxthmi	r6, r6
 8010ac6:	e7e6      	b.n	8010a96 <_printf_i+0x182>
 8010ac8:	4615      	mov	r5, r2
 8010aca:	e7bb      	b.n	8010a44 <_printf_i+0x130>
 8010acc:	682b      	ldr	r3, [r5, #0]
 8010ace:	6826      	ldr	r6, [r4, #0]
 8010ad0:	6961      	ldr	r1, [r4, #20]
 8010ad2:	1d18      	adds	r0, r3, #4
 8010ad4:	6028      	str	r0, [r5, #0]
 8010ad6:	0635      	lsls	r5, r6, #24
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	d501      	bpl.n	8010ae0 <_printf_i+0x1cc>
 8010adc:	6019      	str	r1, [r3, #0]
 8010ade:	e002      	b.n	8010ae6 <_printf_i+0x1d2>
 8010ae0:	0670      	lsls	r0, r6, #25
 8010ae2:	d5fb      	bpl.n	8010adc <_printf_i+0x1c8>
 8010ae4:	8019      	strh	r1, [r3, #0]
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	6123      	str	r3, [r4, #16]
 8010aea:	4615      	mov	r5, r2
 8010aec:	e7ba      	b.n	8010a64 <_printf_i+0x150>
 8010aee:	682b      	ldr	r3, [r5, #0]
 8010af0:	1d1a      	adds	r2, r3, #4
 8010af2:	602a      	str	r2, [r5, #0]
 8010af4:	681d      	ldr	r5, [r3, #0]
 8010af6:	6862      	ldr	r2, [r4, #4]
 8010af8:	2100      	movs	r1, #0
 8010afa:	4628      	mov	r0, r5
 8010afc:	f7ef fb78 	bl	80001f0 <memchr>
 8010b00:	b108      	cbz	r0, 8010b06 <_printf_i+0x1f2>
 8010b02:	1b40      	subs	r0, r0, r5
 8010b04:	6060      	str	r0, [r4, #4]
 8010b06:	6863      	ldr	r3, [r4, #4]
 8010b08:	6123      	str	r3, [r4, #16]
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b10:	e7a8      	b.n	8010a64 <_printf_i+0x150>
 8010b12:	6923      	ldr	r3, [r4, #16]
 8010b14:	462a      	mov	r2, r5
 8010b16:	4649      	mov	r1, r9
 8010b18:	4640      	mov	r0, r8
 8010b1a:	47d0      	blx	sl
 8010b1c:	3001      	adds	r0, #1
 8010b1e:	d0ab      	beq.n	8010a78 <_printf_i+0x164>
 8010b20:	6823      	ldr	r3, [r4, #0]
 8010b22:	079b      	lsls	r3, r3, #30
 8010b24:	d413      	bmi.n	8010b4e <_printf_i+0x23a>
 8010b26:	68e0      	ldr	r0, [r4, #12]
 8010b28:	9b03      	ldr	r3, [sp, #12]
 8010b2a:	4298      	cmp	r0, r3
 8010b2c:	bfb8      	it	lt
 8010b2e:	4618      	movlt	r0, r3
 8010b30:	e7a4      	b.n	8010a7c <_printf_i+0x168>
 8010b32:	2301      	movs	r3, #1
 8010b34:	4632      	mov	r2, r6
 8010b36:	4649      	mov	r1, r9
 8010b38:	4640      	mov	r0, r8
 8010b3a:	47d0      	blx	sl
 8010b3c:	3001      	adds	r0, #1
 8010b3e:	d09b      	beq.n	8010a78 <_printf_i+0x164>
 8010b40:	3501      	adds	r5, #1
 8010b42:	68e3      	ldr	r3, [r4, #12]
 8010b44:	9903      	ldr	r1, [sp, #12]
 8010b46:	1a5b      	subs	r3, r3, r1
 8010b48:	42ab      	cmp	r3, r5
 8010b4a:	dcf2      	bgt.n	8010b32 <_printf_i+0x21e>
 8010b4c:	e7eb      	b.n	8010b26 <_printf_i+0x212>
 8010b4e:	2500      	movs	r5, #0
 8010b50:	f104 0619 	add.w	r6, r4, #25
 8010b54:	e7f5      	b.n	8010b42 <_printf_i+0x22e>
 8010b56:	bf00      	nop
 8010b58:	08014872 	.word	0x08014872
 8010b5c:	08014883 	.word	0x08014883

08010b60 <iprintf>:
 8010b60:	b40f      	push	{r0, r1, r2, r3}
 8010b62:	4b0a      	ldr	r3, [pc, #40]	; (8010b8c <iprintf+0x2c>)
 8010b64:	b513      	push	{r0, r1, r4, lr}
 8010b66:	681c      	ldr	r4, [r3, #0]
 8010b68:	b124      	cbz	r4, 8010b74 <iprintf+0x14>
 8010b6a:	69a3      	ldr	r3, [r4, #24]
 8010b6c:	b913      	cbnz	r3, 8010b74 <iprintf+0x14>
 8010b6e:	4620      	mov	r0, r4
 8010b70:	f7ff fa02 	bl	800ff78 <__sinit>
 8010b74:	ab05      	add	r3, sp, #20
 8010b76:	9a04      	ldr	r2, [sp, #16]
 8010b78:	68a1      	ldr	r1, [r4, #8]
 8010b7a:	9301      	str	r3, [sp, #4]
 8010b7c:	4620      	mov	r0, r4
 8010b7e:	f002 f803 	bl	8012b88 <_vfiprintf_r>
 8010b82:	b002      	add	sp, #8
 8010b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b88:	b004      	add	sp, #16
 8010b8a:	4770      	bx	lr
 8010b8c:	20000114 	.word	0x20000114

08010b90 <_puts_r>:
 8010b90:	b570      	push	{r4, r5, r6, lr}
 8010b92:	460e      	mov	r6, r1
 8010b94:	4605      	mov	r5, r0
 8010b96:	b118      	cbz	r0, 8010ba0 <_puts_r+0x10>
 8010b98:	6983      	ldr	r3, [r0, #24]
 8010b9a:	b90b      	cbnz	r3, 8010ba0 <_puts_r+0x10>
 8010b9c:	f7ff f9ec 	bl	800ff78 <__sinit>
 8010ba0:	69ab      	ldr	r3, [r5, #24]
 8010ba2:	68ac      	ldr	r4, [r5, #8]
 8010ba4:	b913      	cbnz	r3, 8010bac <_puts_r+0x1c>
 8010ba6:	4628      	mov	r0, r5
 8010ba8:	f7ff f9e6 	bl	800ff78 <__sinit>
 8010bac:	4b2c      	ldr	r3, [pc, #176]	; (8010c60 <_puts_r+0xd0>)
 8010bae:	429c      	cmp	r4, r3
 8010bb0:	d120      	bne.n	8010bf4 <_puts_r+0x64>
 8010bb2:	686c      	ldr	r4, [r5, #4]
 8010bb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010bb6:	07db      	lsls	r3, r3, #31
 8010bb8:	d405      	bmi.n	8010bc6 <_puts_r+0x36>
 8010bba:	89a3      	ldrh	r3, [r4, #12]
 8010bbc:	0598      	lsls	r0, r3, #22
 8010bbe:	d402      	bmi.n	8010bc6 <_puts_r+0x36>
 8010bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010bc2:	f7ff fa9c 	bl	80100fe <__retarget_lock_acquire_recursive>
 8010bc6:	89a3      	ldrh	r3, [r4, #12]
 8010bc8:	0719      	lsls	r1, r3, #28
 8010bca:	d51d      	bpl.n	8010c08 <_puts_r+0x78>
 8010bcc:	6923      	ldr	r3, [r4, #16]
 8010bce:	b1db      	cbz	r3, 8010c08 <_puts_r+0x78>
 8010bd0:	3e01      	subs	r6, #1
 8010bd2:	68a3      	ldr	r3, [r4, #8]
 8010bd4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010bd8:	3b01      	subs	r3, #1
 8010bda:	60a3      	str	r3, [r4, #8]
 8010bdc:	bb39      	cbnz	r1, 8010c2e <_puts_r+0x9e>
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	da38      	bge.n	8010c54 <_puts_r+0xc4>
 8010be2:	4622      	mov	r2, r4
 8010be4:	210a      	movs	r1, #10
 8010be6:	4628      	mov	r0, r5
 8010be8:	f000 f9b2 	bl	8010f50 <__swbuf_r>
 8010bec:	3001      	adds	r0, #1
 8010bee:	d011      	beq.n	8010c14 <_puts_r+0x84>
 8010bf0:	250a      	movs	r5, #10
 8010bf2:	e011      	b.n	8010c18 <_puts_r+0x88>
 8010bf4:	4b1b      	ldr	r3, [pc, #108]	; (8010c64 <_puts_r+0xd4>)
 8010bf6:	429c      	cmp	r4, r3
 8010bf8:	d101      	bne.n	8010bfe <_puts_r+0x6e>
 8010bfa:	68ac      	ldr	r4, [r5, #8]
 8010bfc:	e7da      	b.n	8010bb4 <_puts_r+0x24>
 8010bfe:	4b1a      	ldr	r3, [pc, #104]	; (8010c68 <_puts_r+0xd8>)
 8010c00:	429c      	cmp	r4, r3
 8010c02:	bf08      	it	eq
 8010c04:	68ec      	ldreq	r4, [r5, #12]
 8010c06:	e7d5      	b.n	8010bb4 <_puts_r+0x24>
 8010c08:	4621      	mov	r1, r4
 8010c0a:	4628      	mov	r0, r5
 8010c0c:	f000 fa04 	bl	8011018 <__swsetup_r>
 8010c10:	2800      	cmp	r0, #0
 8010c12:	d0dd      	beq.n	8010bd0 <_puts_r+0x40>
 8010c14:	f04f 35ff 	mov.w	r5, #4294967295
 8010c18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c1a:	07da      	lsls	r2, r3, #31
 8010c1c:	d405      	bmi.n	8010c2a <_puts_r+0x9a>
 8010c1e:	89a3      	ldrh	r3, [r4, #12]
 8010c20:	059b      	lsls	r3, r3, #22
 8010c22:	d402      	bmi.n	8010c2a <_puts_r+0x9a>
 8010c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c26:	f7ff fa6b 	bl	8010100 <__retarget_lock_release_recursive>
 8010c2a:	4628      	mov	r0, r5
 8010c2c:	bd70      	pop	{r4, r5, r6, pc}
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	da04      	bge.n	8010c3c <_puts_r+0xac>
 8010c32:	69a2      	ldr	r2, [r4, #24]
 8010c34:	429a      	cmp	r2, r3
 8010c36:	dc06      	bgt.n	8010c46 <_puts_r+0xb6>
 8010c38:	290a      	cmp	r1, #10
 8010c3a:	d004      	beq.n	8010c46 <_puts_r+0xb6>
 8010c3c:	6823      	ldr	r3, [r4, #0]
 8010c3e:	1c5a      	adds	r2, r3, #1
 8010c40:	6022      	str	r2, [r4, #0]
 8010c42:	7019      	strb	r1, [r3, #0]
 8010c44:	e7c5      	b.n	8010bd2 <_puts_r+0x42>
 8010c46:	4622      	mov	r2, r4
 8010c48:	4628      	mov	r0, r5
 8010c4a:	f000 f981 	bl	8010f50 <__swbuf_r>
 8010c4e:	3001      	adds	r0, #1
 8010c50:	d1bf      	bne.n	8010bd2 <_puts_r+0x42>
 8010c52:	e7df      	b.n	8010c14 <_puts_r+0x84>
 8010c54:	6823      	ldr	r3, [r4, #0]
 8010c56:	250a      	movs	r5, #10
 8010c58:	1c5a      	adds	r2, r3, #1
 8010c5a:	6022      	str	r2, [r4, #0]
 8010c5c:	701d      	strb	r5, [r3, #0]
 8010c5e:	e7db      	b.n	8010c18 <_puts_r+0x88>
 8010c60:	0801481c 	.word	0x0801481c
 8010c64:	0801483c 	.word	0x0801483c
 8010c68:	080147fc 	.word	0x080147fc

08010c6c <puts>:
 8010c6c:	4b02      	ldr	r3, [pc, #8]	; (8010c78 <puts+0xc>)
 8010c6e:	4601      	mov	r1, r0
 8010c70:	6818      	ldr	r0, [r3, #0]
 8010c72:	f7ff bf8d 	b.w	8010b90 <_puts_r>
 8010c76:	bf00      	nop
 8010c78:	20000114 	.word	0x20000114

08010c7c <cleanup_glue>:
 8010c7c:	b538      	push	{r3, r4, r5, lr}
 8010c7e:	460c      	mov	r4, r1
 8010c80:	6809      	ldr	r1, [r1, #0]
 8010c82:	4605      	mov	r5, r0
 8010c84:	b109      	cbz	r1, 8010c8a <cleanup_glue+0xe>
 8010c86:	f7ff fff9 	bl	8010c7c <cleanup_glue>
 8010c8a:	4621      	mov	r1, r4
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c92:	f001 bda7 	b.w	80127e4 <_free_r>
	...

08010c98 <_reclaim_reent>:
 8010c98:	4b2c      	ldr	r3, [pc, #176]	; (8010d4c <_reclaim_reent+0xb4>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	4283      	cmp	r3, r0
 8010c9e:	b570      	push	{r4, r5, r6, lr}
 8010ca0:	4604      	mov	r4, r0
 8010ca2:	d051      	beq.n	8010d48 <_reclaim_reent+0xb0>
 8010ca4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010ca6:	b143      	cbz	r3, 8010cba <_reclaim_reent+0x22>
 8010ca8:	68db      	ldr	r3, [r3, #12]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d14a      	bne.n	8010d44 <_reclaim_reent+0xac>
 8010cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010cb0:	6819      	ldr	r1, [r3, #0]
 8010cb2:	b111      	cbz	r1, 8010cba <_reclaim_reent+0x22>
 8010cb4:	4620      	mov	r0, r4
 8010cb6:	f001 fd95 	bl	80127e4 <_free_r>
 8010cba:	6961      	ldr	r1, [r4, #20]
 8010cbc:	b111      	cbz	r1, 8010cc4 <_reclaim_reent+0x2c>
 8010cbe:	4620      	mov	r0, r4
 8010cc0:	f001 fd90 	bl	80127e4 <_free_r>
 8010cc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010cc6:	b111      	cbz	r1, 8010cce <_reclaim_reent+0x36>
 8010cc8:	4620      	mov	r0, r4
 8010cca:	f001 fd8b 	bl	80127e4 <_free_r>
 8010cce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010cd0:	b111      	cbz	r1, 8010cd8 <_reclaim_reent+0x40>
 8010cd2:	4620      	mov	r0, r4
 8010cd4:	f001 fd86 	bl	80127e4 <_free_r>
 8010cd8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010cda:	b111      	cbz	r1, 8010ce2 <_reclaim_reent+0x4a>
 8010cdc:	4620      	mov	r0, r4
 8010cde:	f001 fd81 	bl	80127e4 <_free_r>
 8010ce2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010ce4:	b111      	cbz	r1, 8010cec <_reclaim_reent+0x54>
 8010ce6:	4620      	mov	r0, r4
 8010ce8:	f001 fd7c 	bl	80127e4 <_free_r>
 8010cec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8010cee:	b111      	cbz	r1, 8010cf6 <_reclaim_reent+0x5e>
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	f001 fd77 	bl	80127e4 <_free_r>
 8010cf6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010cf8:	b111      	cbz	r1, 8010d00 <_reclaim_reent+0x68>
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	f001 fd72 	bl	80127e4 <_free_r>
 8010d00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d02:	b111      	cbz	r1, 8010d0a <_reclaim_reent+0x72>
 8010d04:	4620      	mov	r0, r4
 8010d06:	f001 fd6d 	bl	80127e4 <_free_r>
 8010d0a:	69a3      	ldr	r3, [r4, #24]
 8010d0c:	b1e3      	cbz	r3, 8010d48 <_reclaim_reent+0xb0>
 8010d0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010d10:	4620      	mov	r0, r4
 8010d12:	4798      	blx	r3
 8010d14:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010d16:	b1b9      	cbz	r1, 8010d48 <_reclaim_reent+0xb0>
 8010d18:	4620      	mov	r0, r4
 8010d1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d1e:	f7ff bfad 	b.w	8010c7c <cleanup_glue>
 8010d22:	5949      	ldr	r1, [r1, r5]
 8010d24:	b941      	cbnz	r1, 8010d38 <_reclaim_reent+0xa0>
 8010d26:	3504      	adds	r5, #4
 8010d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d2a:	2d80      	cmp	r5, #128	; 0x80
 8010d2c:	68d9      	ldr	r1, [r3, #12]
 8010d2e:	d1f8      	bne.n	8010d22 <_reclaim_reent+0x8a>
 8010d30:	4620      	mov	r0, r4
 8010d32:	f001 fd57 	bl	80127e4 <_free_r>
 8010d36:	e7ba      	b.n	8010cae <_reclaim_reent+0x16>
 8010d38:	680e      	ldr	r6, [r1, #0]
 8010d3a:	4620      	mov	r0, r4
 8010d3c:	f001 fd52 	bl	80127e4 <_free_r>
 8010d40:	4631      	mov	r1, r6
 8010d42:	e7ef      	b.n	8010d24 <_reclaim_reent+0x8c>
 8010d44:	2500      	movs	r5, #0
 8010d46:	e7ef      	b.n	8010d28 <_reclaim_reent+0x90>
 8010d48:	bd70      	pop	{r4, r5, r6, pc}
 8010d4a:	bf00      	nop
 8010d4c:	20000114 	.word	0x20000114

08010d50 <_sbrk_r>:
 8010d50:	b538      	push	{r3, r4, r5, lr}
 8010d52:	4d06      	ldr	r5, [pc, #24]	; (8010d6c <_sbrk_r+0x1c>)
 8010d54:	2300      	movs	r3, #0
 8010d56:	4604      	mov	r4, r0
 8010d58:	4608      	mov	r0, r1
 8010d5a:	602b      	str	r3, [r5, #0]
 8010d5c:	f7f3 fc54 	bl	8004608 <_sbrk>
 8010d60:	1c43      	adds	r3, r0, #1
 8010d62:	d102      	bne.n	8010d6a <_sbrk_r+0x1a>
 8010d64:	682b      	ldr	r3, [r5, #0]
 8010d66:	b103      	cbz	r3, 8010d6a <_sbrk_r+0x1a>
 8010d68:	6023      	str	r3, [r4, #0]
 8010d6a:	bd38      	pop	{r3, r4, r5, pc}
 8010d6c:	20005e90 	.word	0x20005e90

08010d70 <siprintf>:
 8010d70:	b40e      	push	{r1, r2, r3}
 8010d72:	b500      	push	{lr}
 8010d74:	b09c      	sub	sp, #112	; 0x70
 8010d76:	ab1d      	add	r3, sp, #116	; 0x74
 8010d78:	9002      	str	r0, [sp, #8]
 8010d7a:	9006      	str	r0, [sp, #24]
 8010d7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010d80:	4809      	ldr	r0, [pc, #36]	; (8010da8 <siprintf+0x38>)
 8010d82:	9107      	str	r1, [sp, #28]
 8010d84:	9104      	str	r1, [sp, #16]
 8010d86:	4909      	ldr	r1, [pc, #36]	; (8010dac <siprintf+0x3c>)
 8010d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d8c:	9105      	str	r1, [sp, #20]
 8010d8e:	6800      	ldr	r0, [r0, #0]
 8010d90:	9301      	str	r3, [sp, #4]
 8010d92:	a902      	add	r1, sp, #8
 8010d94:	f001 fdce 	bl	8012934 <_svfiprintf_r>
 8010d98:	9b02      	ldr	r3, [sp, #8]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	701a      	strb	r2, [r3, #0]
 8010d9e:	b01c      	add	sp, #112	; 0x70
 8010da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010da4:	b003      	add	sp, #12
 8010da6:	4770      	bx	lr
 8010da8:	20000114 	.word	0x20000114
 8010dac:	ffff0208 	.word	0xffff0208

08010db0 <__sread>:
 8010db0:	b510      	push	{r4, lr}
 8010db2:	460c      	mov	r4, r1
 8010db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010db8:	f002 f816 	bl	8012de8 <_read_r>
 8010dbc:	2800      	cmp	r0, #0
 8010dbe:	bfab      	itete	ge
 8010dc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010dc2:	89a3      	ldrhlt	r3, [r4, #12]
 8010dc4:	181b      	addge	r3, r3, r0
 8010dc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010dca:	bfac      	ite	ge
 8010dcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8010dce:	81a3      	strhlt	r3, [r4, #12]
 8010dd0:	bd10      	pop	{r4, pc}

08010dd2 <__swrite>:
 8010dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dd6:	461f      	mov	r7, r3
 8010dd8:	898b      	ldrh	r3, [r1, #12]
 8010dda:	05db      	lsls	r3, r3, #23
 8010ddc:	4605      	mov	r5, r0
 8010dde:	460c      	mov	r4, r1
 8010de0:	4616      	mov	r6, r2
 8010de2:	d505      	bpl.n	8010df0 <__swrite+0x1e>
 8010de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010de8:	2302      	movs	r3, #2
 8010dea:	2200      	movs	r2, #0
 8010dec:	f001 f8d4 	bl	8011f98 <_lseek_r>
 8010df0:	89a3      	ldrh	r3, [r4, #12]
 8010df2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010df6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010dfa:	81a3      	strh	r3, [r4, #12]
 8010dfc:	4632      	mov	r2, r6
 8010dfe:	463b      	mov	r3, r7
 8010e00:	4628      	mov	r0, r5
 8010e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e06:	f000 b8f5 	b.w	8010ff4 <_write_r>

08010e0a <__sseek>:
 8010e0a:	b510      	push	{r4, lr}
 8010e0c:	460c      	mov	r4, r1
 8010e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e12:	f001 f8c1 	bl	8011f98 <_lseek_r>
 8010e16:	1c43      	adds	r3, r0, #1
 8010e18:	89a3      	ldrh	r3, [r4, #12]
 8010e1a:	bf15      	itete	ne
 8010e1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8010e1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010e22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010e26:	81a3      	strheq	r3, [r4, #12]
 8010e28:	bf18      	it	ne
 8010e2a:	81a3      	strhne	r3, [r4, #12]
 8010e2c:	bd10      	pop	{r4, pc}

08010e2e <__sclose>:
 8010e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e32:	f000 b95f 	b.w	80110f4 <_close_r>
	...

08010e38 <_strtol_l.constprop.0>:
 8010e38:	2b01      	cmp	r3, #1
 8010e3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e3e:	d001      	beq.n	8010e44 <_strtol_l.constprop.0+0xc>
 8010e40:	2b24      	cmp	r3, #36	; 0x24
 8010e42:	d906      	bls.n	8010e52 <_strtol_l.constprop.0+0x1a>
 8010e44:	f7ff f83a 	bl	800febc <__errno>
 8010e48:	2316      	movs	r3, #22
 8010e4a:	6003      	str	r3, [r0, #0]
 8010e4c:	2000      	movs	r0, #0
 8010e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010f38 <_strtol_l.constprop.0+0x100>
 8010e56:	460d      	mov	r5, r1
 8010e58:	462e      	mov	r6, r5
 8010e5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010e5e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010e62:	f017 0708 	ands.w	r7, r7, #8
 8010e66:	d1f7      	bne.n	8010e58 <_strtol_l.constprop.0+0x20>
 8010e68:	2c2d      	cmp	r4, #45	; 0x2d
 8010e6a:	d132      	bne.n	8010ed2 <_strtol_l.constprop.0+0x9a>
 8010e6c:	782c      	ldrb	r4, [r5, #0]
 8010e6e:	2701      	movs	r7, #1
 8010e70:	1cb5      	adds	r5, r6, #2
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d05b      	beq.n	8010f2e <_strtol_l.constprop.0+0xf6>
 8010e76:	2b10      	cmp	r3, #16
 8010e78:	d109      	bne.n	8010e8e <_strtol_l.constprop.0+0x56>
 8010e7a:	2c30      	cmp	r4, #48	; 0x30
 8010e7c:	d107      	bne.n	8010e8e <_strtol_l.constprop.0+0x56>
 8010e7e:	782c      	ldrb	r4, [r5, #0]
 8010e80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010e84:	2c58      	cmp	r4, #88	; 0x58
 8010e86:	d14d      	bne.n	8010f24 <_strtol_l.constprop.0+0xec>
 8010e88:	786c      	ldrb	r4, [r5, #1]
 8010e8a:	2310      	movs	r3, #16
 8010e8c:	3502      	adds	r5, #2
 8010e8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010e92:	f108 38ff 	add.w	r8, r8, #4294967295
 8010e96:	f04f 0c00 	mov.w	ip, #0
 8010e9a:	fbb8 f9f3 	udiv	r9, r8, r3
 8010e9e:	4666      	mov	r6, ip
 8010ea0:	fb03 8a19 	mls	sl, r3, r9, r8
 8010ea4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010ea8:	f1be 0f09 	cmp.w	lr, #9
 8010eac:	d816      	bhi.n	8010edc <_strtol_l.constprop.0+0xa4>
 8010eae:	4674      	mov	r4, lr
 8010eb0:	42a3      	cmp	r3, r4
 8010eb2:	dd24      	ble.n	8010efe <_strtol_l.constprop.0+0xc6>
 8010eb4:	f1bc 0f00 	cmp.w	ip, #0
 8010eb8:	db1e      	blt.n	8010ef8 <_strtol_l.constprop.0+0xc0>
 8010eba:	45b1      	cmp	r9, r6
 8010ebc:	d31c      	bcc.n	8010ef8 <_strtol_l.constprop.0+0xc0>
 8010ebe:	d101      	bne.n	8010ec4 <_strtol_l.constprop.0+0x8c>
 8010ec0:	45a2      	cmp	sl, r4
 8010ec2:	db19      	blt.n	8010ef8 <_strtol_l.constprop.0+0xc0>
 8010ec4:	fb06 4603 	mla	r6, r6, r3, r4
 8010ec8:	f04f 0c01 	mov.w	ip, #1
 8010ecc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010ed0:	e7e8      	b.n	8010ea4 <_strtol_l.constprop.0+0x6c>
 8010ed2:	2c2b      	cmp	r4, #43	; 0x2b
 8010ed4:	bf04      	itt	eq
 8010ed6:	782c      	ldrbeq	r4, [r5, #0]
 8010ed8:	1cb5      	addeq	r5, r6, #2
 8010eda:	e7ca      	b.n	8010e72 <_strtol_l.constprop.0+0x3a>
 8010edc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010ee0:	f1be 0f19 	cmp.w	lr, #25
 8010ee4:	d801      	bhi.n	8010eea <_strtol_l.constprop.0+0xb2>
 8010ee6:	3c37      	subs	r4, #55	; 0x37
 8010ee8:	e7e2      	b.n	8010eb0 <_strtol_l.constprop.0+0x78>
 8010eea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010eee:	f1be 0f19 	cmp.w	lr, #25
 8010ef2:	d804      	bhi.n	8010efe <_strtol_l.constprop.0+0xc6>
 8010ef4:	3c57      	subs	r4, #87	; 0x57
 8010ef6:	e7db      	b.n	8010eb0 <_strtol_l.constprop.0+0x78>
 8010ef8:	f04f 3cff 	mov.w	ip, #4294967295
 8010efc:	e7e6      	b.n	8010ecc <_strtol_l.constprop.0+0x94>
 8010efe:	f1bc 0f00 	cmp.w	ip, #0
 8010f02:	da05      	bge.n	8010f10 <_strtol_l.constprop.0+0xd8>
 8010f04:	2322      	movs	r3, #34	; 0x22
 8010f06:	6003      	str	r3, [r0, #0]
 8010f08:	4646      	mov	r6, r8
 8010f0a:	b942      	cbnz	r2, 8010f1e <_strtol_l.constprop.0+0xe6>
 8010f0c:	4630      	mov	r0, r6
 8010f0e:	e79e      	b.n	8010e4e <_strtol_l.constprop.0+0x16>
 8010f10:	b107      	cbz	r7, 8010f14 <_strtol_l.constprop.0+0xdc>
 8010f12:	4276      	negs	r6, r6
 8010f14:	2a00      	cmp	r2, #0
 8010f16:	d0f9      	beq.n	8010f0c <_strtol_l.constprop.0+0xd4>
 8010f18:	f1bc 0f00 	cmp.w	ip, #0
 8010f1c:	d000      	beq.n	8010f20 <_strtol_l.constprop.0+0xe8>
 8010f1e:	1e69      	subs	r1, r5, #1
 8010f20:	6011      	str	r1, [r2, #0]
 8010f22:	e7f3      	b.n	8010f0c <_strtol_l.constprop.0+0xd4>
 8010f24:	2430      	movs	r4, #48	; 0x30
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d1b1      	bne.n	8010e8e <_strtol_l.constprop.0+0x56>
 8010f2a:	2308      	movs	r3, #8
 8010f2c:	e7af      	b.n	8010e8e <_strtol_l.constprop.0+0x56>
 8010f2e:	2c30      	cmp	r4, #48	; 0x30
 8010f30:	d0a5      	beq.n	8010e7e <_strtol_l.constprop.0+0x46>
 8010f32:	230a      	movs	r3, #10
 8010f34:	e7ab      	b.n	8010e8e <_strtol_l.constprop.0+0x56>
 8010f36:	bf00      	nop
 8010f38:	08014895 	.word	0x08014895

08010f3c <strtol>:
 8010f3c:	4613      	mov	r3, r2
 8010f3e:	460a      	mov	r2, r1
 8010f40:	4601      	mov	r1, r0
 8010f42:	4802      	ldr	r0, [pc, #8]	; (8010f4c <strtol+0x10>)
 8010f44:	6800      	ldr	r0, [r0, #0]
 8010f46:	f7ff bf77 	b.w	8010e38 <_strtol_l.constprop.0>
 8010f4a:	bf00      	nop
 8010f4c:	20000114 	.word	0x20000114

08010f50 <__swbuf_r>:
 8010f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f52:	460e      	mov	r6, r1
 8010f54:	4614      	mov	r4, r2
 8010f56:	4605      	mov	r5, r0
 8010f58:	b118      	cbz	r0, 8010f62 <__swbuf_r+0x12>
 8010f5a:	6983      	ldr	r3, [r0, #24]
 8010f5c:	b90b      	cbnz	r3, 8010f62 <__swbuf_r+0x12>
 8010f5e:	f7ff f80b 	bl	800ff78 <__sinit>
 8010f62:	4b21      	ldr	r3, [pc, #132]	; (8010fe8 <__swbuf_r+0x98>)
 8010f64:	429c      	cmp	r4, r3
 8010f66:	d12b      	bne.n	8010fc0 <__swbuf_r+0x70>
 8010f68:	686c      	ldr	r4, [r5, #4]
 8010f6a:	69a3      	ldr	r3, [r4, #24]
 8010f6c:	60a3      	str	r3, [r4, #8]
 8010f6e:	89a3      	ldrh	r3, [r4, #12]
 8010f70:	071a      	lsls	r2, r3, #28
 8010f72:	d52f      	bpl.n	8010fd4 <__swbuf_r+0x84>
 8010f74:	6923      	ldr	r3, [r4, #16]
 8010f76:	b36b      	cbz	r3, 8010fd4 <__swbuf_r+0x84>
 8010f78:	6923      	ldr	r3, [r4, #16]
 8010f7a:	6820      	ldr	r0, [r4, #0]
 8010f7c:	1ac0      	subs	r0, r0, r3
 8010f7e:	6963      	ldr	r3, [r4, #20]
 8010f80:	b2f6      	uxtb	r6, r6
 8010f82:	4283      	cmp	r3, r0
 8010f84:	4637      	mov	r7, r6
 8010f86:	dc04      	bgt.n	8010f92 <__swbuf_r+0x42>
 8010f88:	4621      	mov	r1, r4
 8010f8a:	4628      	mov	r0, r5
 8010f8c:	f000 ffc4 	bl	8011f18 <_fflush_r>
 8010f90:	bb30      	cbnz	r0, 8010fe0 <__swbuf_r+0x90>
 8010f92:	68a3      	ldr	r3, [r4, #8]
 8010f94:	3b01      	subs	r3, #1
 8010f96:	60a3      	str	r3, [r4, #8]
 8010f98:	6823      	ldr	r3, [r4, #0]
 8010f9a:	1c5a      	adds	r2, r3, #1
 8010f9c:	6022      	str	r2, [r4, #0]
 8010f9e:	701e      	strb	r6, [r3, #0]
 8010fa0:	6963      	ldr	r3, [r4, #20]
 8010fa2:	3001      	adds	r0, #1
 8010fa4:	4283      	cmp	r3, r0
 8010fa6:	d004      	beq.n	8010fb2 <__swbuf_r+0x62>
 8010fa8:	89a3      	ldrh	r3, [r4, #12]
 8010faa:	07db      	lsls	r3, r3, #31
 8010fac:	d506      	bpl.n	8010fbc <__swbuf_r+0x6c>
 8010fae:	2e0a      	cmp	r6, #10
 8010fb0:	d104      	bne.n	8010fbc <__swbuf_r+0x6c>
 8010fb2:	4621      	mov	r1, r4
 8010fb4:	4628      	mov	r0, r5
 8010fb6:	f000 ffaf 	bl	8011f18 <_fflush_r>
 8010fba:	b988      	cbnz	r0, 8010fe0 <__swbuf_r+0x90>
 8010fbc:	4638      	mov	r0, r7
 8010fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fc0:	4b0a      	ldr	r3, [pc, #40]	; (8010fec <__swbuf_r+0x9c>)
 8010fc2:	429c      	cmp	r4, r3
 8010fc4:	d101      	bne.n	8010fca <__swbuf_r+0x7a>
 8010fc6:	68ac      	ldr	r4, [r5, #8]
 8010fc8:	e7cf      	b.n	8010f6a <__swbuf_r+0x1a>
 8010fca:	4b09      	ldr	r3, [pc, #36]	; (8010ff0 <__swbuf_r+0xa0>)
 8010fcc:	429c      	cmp	r4, r3
 8010fce:	bf08      	it	eq
 8010fd0:	68ec      	ldreq	r4, [r5, #12]
 8010fd2:	e7ca      	b.n	8010f6a <__swbuf_r+0x1a>
 8010fd4:	4621      	mov	r1, r4
 8010fd6:	4628      	mov	r0, r5
 8010fd8:	f000 f81e 	bl	8011018 <__swsetup_r>
 8010fdc:	2800      	cmp	r0, #0
 8010fde:	d0cb      	beq.n	8010f78 <__swbuf_r+0x28>
 8010fe0:	f04f 37ff 	mov.w	r7, #4294967295
 8010fe4:	e7ea      	b.n	8010fbc <__swbuf_r+0x6c>
 8010fe6:	bf00      	nop
 8010fe8:	0801481c 	.word	0x0801481c
 8010fec:	0801483c 	.word	0x0801483c
 8010ff0:	080147fc 	.word	0x080147fc

08010ff4 <_write_r>:
 8010ff4:	b538      	push	{r3, r4, r5, lr}
 8010ff6:	4d07      	ldr	r5, [pc, #28]	; (8011014 <_write_r+0x20>)
 8010ff8:	4604      	mov	r4, r0
 8010ffa:	4608      	mov	r0, r1
 8010ffc:	4611      	mov	r1, r2
 8010ffe:	2200      	movs	r2, #0
 8011000:	602a      	str	r2, [r5, #0]
 8011002:	461a      	mov	r2, r3
 8011004:	f7fe fb2e 	bl	800f664 <_write>
 8011008:	1c43      	adds	r3, r0, #1
 801100a:	d102      	bne.n	8011012 <_write_r+0x1e>
 801100c:	682b      	ldr	r3, [r5, #0]
 801100e:	b103      	cbz	r3, 8011012 <_write_r+0x1e>
 8011010:	6023      	str	r3, [r4, #0]
 8011012:	bd38      	pop	{r3, r4, r5, pc}
 8011014:	20005e90 	.word	0x20005e90

08011018 <__swsetup_r>:
 8011018:	4b32      	ldr	r3, [pc, #200]	; (80110e4 <__swsetup_r+0xcc>)
 801101a:	b570      	push	{r4, r5, r6, lr}
 801101c:	681d      	ldr	r5, [r3, #0]
 801101e:	4606      	mov	r6, r0
 8011020:	460c      	mov	r4, r1
 8011022:	b125      	cbz	r5, 801102e <__swsetup_r+0x16>
 8011024:	69ab      	ldr	r3, [r5, #24]
 8011026:	b913      	cbnz	r3, 801102e <__swsetup_r+0x16>
 8011028:	4628      	mov	r0, r5
 801102a:	f7fe ffa5 	bl	800ff78 <__sinit>
 801102e:	4b2e      	ldr	r3, [pc, #184]	; (80110e8 <__swsetup_r+0xd0>)
 8011030:	429c      	cmp	r4, r3
 8011032:	d10f      	bne.n	8011054 <__swsetup_r+0x3c>
 8011034:	686c      	ldr	r4, [r5, #4]
 8011036:	89a3      	ldrh	r3, [r4, #12]
 8011038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801103c:	0719      	lsls	r1, r3, #28
 801103e:	d42c      	bmi.n	801109a <__swsetup_r+0x82>
 8011040:	06dd      	lsls	r5, r3, #27
 8011042:	d411      	bmi.n	8011068 <__swsetup_r+0x50>
 8011044:	2309      	movs	r3, #9
 8011046:	6033      	str	r3, [r6, #0]
 8011048:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801104c:	81a3      	strh	r3, [r4, #12]
 801104e:	f04f 30ff 	mov.w	r0, #4294967295
 8011052:	e03e      	b.n	80110d2 <__swsetup_r+0xba>
 8011054:	4b25      	ldr	r3, [pc, #148]	; (80110ec <__swsetup_r+0xd4>)
 8011056:	429c      	cmp	r4, r3
 8011058:	d101      	bne.n	801105e <__swsetup_r+0x46>
 801105a:	68ac      	ldr	r4, [r5, #8]
 801105c:	e7eb      	b.n	8011036 <__swsetup_r+0x1e>
 801105e:	4b24      	ldr	r3, [pc, #144]	; (80110f0 <__swsetup_r+0xd8>)
 8011060:	429c      	cmp	r4, r3
 8011062:	bf08      	it	eq
 8011064:	68ec      	ldreq	r4, [r5, #12]
 8011066:	e7e6      	b.n	8011036 <__swsetup_r+0x1e>
 8011068:	0758      	lsls	r0, r3, #29
 801106a:	d512      	bpl.n	8011092 <__swsetup_r+0x7a>
 801106c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801106e:	b141      	cbz	r1, 8011082 <__swsetup_r+0x6a>
 8011070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011074:	4299      	cmp	r1, r3
 8011076:	d002      	beq.n	801107e <__swsetup_r+0x66>
 8011078:	4630      	mov	r0, r6
 801107a:	f001 fbb3 	bl	80127e4 <_free_r>
 801107e:	2300      	movs	r3, #0
 8011080:	6363      	str	r3, [r4, #52]	; 0x34
 8011082:	89a3      	ldrh	r3, [r4, #12]
 8011084:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011088:	81a3      	strh	r3, [r4, #12]
 801108a:	2300      	movs	r3, #0
 801108c:	6063      	str	r3, [r4, #4]
 801108e:	6923      	ldr	r3, [r4, #16]
 8011090:	6023      	str	r3, [r4, #0]
 8011092:	89a3      	ldrh	r3, [r4, #12]
 8011094:	f043 0308 	orr.w	r3, r3, #8
 8011098:	81a3      	strh	r3, [r4, #12]
 801109a:	6923      	ldr	r3, [r4, #16]
 801109c:	b94b      	cbnz	r3, 80110b2 <__swsetup_r+0x9a>
 801109e:	89a3      	ldrh	r3, [r4, #12]
 80110a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80110a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110a8:	d003      	beq.n	80110b2 <__swsetup_r+0x9a>
 80110aa:	4621      	mov	r1, r4
 80110ac:	4630      	mov	r0, r6
 80110ae:	f000 ffab 	bl	8012008 <__smakebuf_r>
 80110b2:	89a0      	ldrh	r0, [r4, #12]
 80110b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110b8:	f010 0301 	ands.w	r3, r0, #1
 80110bc:	d00a      	beq.n	80110d4 <__swsetup_r+0xbc>
 80110be:	2300      	movs	r3, #0
 80110c0:	60a3      	str	r3, [r4, #8]
 80110c2:	6963      	ldr	r3, [r4, #20]
 80110c4:	425b      	negs	r3, r3
 80110c6:	61a3      	str	r3, [r4, #24]
 80110c8:	6923      	ldr	r3, [r4, #16]
 80110ca:	b943      	cbnz	r3, 80110de <__swsetup_r+0xc6>
 80110cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80110d0:	d1ba      	bne.n	8011048 <__swsetup_r+0x30>
 80110d2:	bd70      	pop	{r4, r5, r6, pc}
 80110d4:	0781      	lsls	r1, r0, #30
 80110d6:	bf58      	it	pl
 80110d8:	6963      	ldrpl	r3, [r4, #20]
 80110da:	60a3      	str	r3, [r4, #8]
 80110dc:	e7f4      	b.n	80110c8 <__swsetup_r+0xb0>
 80110de:	2000      	movs	r0, #0
 80110e0:	e7f7      	b.n	80110d2 <__swsetup_r+0xba>
 80110e2:	bf00      	nop
 80110e4:	20000114 	.word	0x20000114
 80110e8:	0801481c 	.word	0x0801481c
 80110ec:	0801483c 	.word	0x0801483c
 80110f0:	080147fc 	.word	0x080147fc

080110f4 <_close_r>:
 80110f4:	b538      	push	{r3, r4, r5, lr}
 80110f6:	4d06      	ldr	r5, [pc, #24]	; (8011110 <_close_r+0x1c>)
 80110f8:	2300      	movs	r3, #0
 80110fa:	4604      	mov	r4, r0
 80110fc:	4608      	mov	r0, r1
 80110fe:	602b      	str	r3, [r5, #0]
 8011100:	f7f3 fa4d 	bl	800459e <_close>
 8011104:	1c43      	adds	r3, r0, #1
 8011106:	d102      	bne.n	801110e <_close_r+0x1a>
 8011108:	682b      	ldr	r3, [r5, #0]
 801110a:	b103      	cbz	r3, 801110e <_close_r+0x1a>
 801110c:	6023      	str	r3, [r4, #0]
 801110e:	bd38      	pop	{r3, r4, r5, pc}
 8011110:	20005e90 	.word	0x20005e90

08011114 <quorem>:
 8011114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011118:	6903      	ldr	r3, [r0, #16]
 801111a:	690c      	ldr	r4, [r1, #16]
 801111c:	42a3      	cmp	r3, r4
 801111e:	4607      	mov	r7, r0
 8011120:	f2c0 8081 	blt.w	8011226 <quorem+0x112>
 8011124:	3c01      	subs	r4, #1
 8011126:	f101 0814 	add.w	r8, r1, #20
 801112a:	f100 0514 	add.w	r5, r0, #20
 801112e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011132:	9301      	str	r3, [sp, #4]
 8011134:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011138:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801113c:	3301      	adds	r3, #1
 801113e:	429a      	cmp	r2, r3
 8011140:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011144:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011148:	fbb2 f6f3 	udiv	r6, r2, r3
 801114c:	d331      	bcc.n	80111b2 <quorem+0x9e>
 801114e:	f04f 0e00 	mov.w	lr, #0
 8011152:	4640      	mov	r0, r8
 8011154:	46ac      	mov	ip, r5
 8011156:	46f2      	mov	sl, lr
 8011158:	f850 2b04 	ldr.w	r2, [r0], #4
 801115c:	b293      	uxth	r3, r2
 801115e:	fb06 e303 	mla	r3, r6, r3, lr
 8011162:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011166:	b29b      	uxth	r3, r3
 8011168:	ebaa 0303 	sub.w	r3, sl, r3
 801116c:	f8dc a000 	ldr.w	sl, [ip]
 8011170:	0c12      	lsrs	r2, r2, #16
 8011172:	fa13 f38a 	uxtah	r3, r3, sl
 8011176:	fb06 e202 	mla	r2, r6, r2, lr
 801117a:	9300      	str	r3, [sp, #0]
 801117c:	9b00      	ldr	r3, [sp, #0]
 801117e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011182:	b292      	uxth	r2, r2
 8011184:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011188:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801118c:	f8bd 3000 	ldrh.w	r3, [sp]
 8011190:	4581      	cmp	r9, r0
 8011192:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011196:	f84c 3b04 	str.w	r3, [ip], #4
 801119a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801119e:	d2db      	bcs.n	8011158 <quorem+0x44>
 80111a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80111a4:	b92b      	cbnz	r3, 80111b2 <quorem+0x9e>
 80111a6:	9b01      	ldr	r3, [sp, #4]
 80111a8:	3b04      	subs	r3, #4
 80111aa:	429d      	cmp	r5, r3
 80111ac:	461a      	mov	r2, r3
 80111ae:	d32e      	bcc.n	801120e <quorem+0xfa>
 80111b0:	613c      	str	r4, [r7, #16]
 80111b2:	4638      	mov	r0, r7
 80111b4:	f001 f9fe 	bl	80125b4 <__mcmp>
 80111b8:	2800      	cmp	r0, #0
 80111ba:	db24      	blt.n	8011206 <quorem+0xf2>
 80111bc:	3601      	adds	r6, #1
 80111be:	4628      	mov	r0, r5
 80111c0:	f04f 0c00 	mov.w	ip, #0
 80111c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80111c8:	f8d0 e000 	ldr.w	lr, [r0]
 80111cc:	b293      	uxth	r3, r2
 80111ce:	ebac 0303 	sub.w	r3, ip, r3
 80111d2:	0c12      	lsrs	r2, r2, #16
 80111d4:	fa13 f38e 	uxtah	r3, r3, lr
 80111d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80111dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80111e0:	b29b      	uxth	r3, r3
 80111e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80111e6:	45c1      	cmp	r9, r8
 80111e8:	f840 3b04 	str.w	r3, [r0], #4
 80111ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80111f0:	d2e8      	bcs.n	80111c4 <quorem+0xb0>
 80111f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80111f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80111fa:	b922      	cbnz	r2, 8011206 <quorem+0xf2>
 80111fc:	3b04      	subs	r3, #4
 80111fe:	429d      	cmp	r5, r3
 8011200:	461a      	mov	r2, r3
 8011202:	d30a      	bcc.n	801121a <quorem+0x106>
 8011204:	613c      	str	r4, [r7, #16]
 8011206:	4630      	mov	r0, r6
 8011208:	b003      	add	sp, #12
 801120a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801120e:	6812      	ldr	r2, [r2, #0]
 8011210:	3b04      	subs	r3, #4
 8011212:	2a00      	cmp	r2, #0
 8011214:	d1cc      	bne.n	80111b0 <quorem+0x9c>
 8011216:	3c01      	subs	r4, #1
 8011218:	e7c7      	b.n	80111aa <quorem+0x96>
 801121a:	6812      	ldr	r2, [r2, #0]
 801121c:	3b04      	subs	r3, #4
 801121e:	2a00      	cmp	r2, #0
 8011220:	d1f0      	bne.n	8011204 <quorem+0xf0>
 8011222:	3c01      	subs	r4, #1
 8011224:	e7eb      	b.n	80111fe <quorem+0xea>
 8011226:	2000      	movs	r0, #0
 8011228:	e7ee      	b.n	8011208 <quorem+0xf4>
 801122a:	0000      	movs	r0, r0
 801122c:	0000      	movs	r0, r0
	...

08011230 <_dtoa_r>:
 8011230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011234:	ed2d 8b04 	vpush	{d8-d9}
 8011238:	ec57 6b10 	vmov	r6, r7, d0
 801123c:	b093      	sub	sp, #76	; 0x4c
 801123e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011240:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011244:	9106      	str	r1, [sp, #24]
 8011246:	ee10 aa10 	vmov	sl, s0
 801124a:	4604      	mov	r4, r0
 801124c:	9209      	str	r2, [sp, #36]	; 0x24
 801124e:	930c      	str	r3, [sp, #48]	; 0x30
 8011250:	46bb      	mov	fp, r7
 8011252:	b975      	cbnz	r5, 8011272 <_dtoa_r+0x42>
 8011254:	2010      	movs	r0, #16
 8011256:	f000 ff17 	bl	8012088 <malloc>
 801125a:	4602      	mov	r2, r0
 801125c:	6260      	str	r0, [r4, #36]	; 0x24
 801125e:	b920      	cbnz	r0, 801126a <_dtoa_r+0x3a>
 8011260:	4ba7      	ldr	r3, [pc, #668]	; (8011500 <_dtoa_r+0x2d0>)
 8011262:	21ea      	movs	r1, #234	; 0xea
 8011264:	48a7      	ldr	r0, [pc, #668]	; (8011504 <_dtoa_r+0x2d4>)
 8011266:	f001 fdd1 	bl	8012e0c <__assert_func>
 801126a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801126e:	6005      	str	r5, [r0, #0]
 8011270:	60c5      	str	r5, [r0, #12]
 8011272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011274:	6819      	ldr	r1, [r3, #0]
 8011276:	b151      	cbz	r1, 801128e <_dtoa_r+0x5e>
 8011278:	685a      	ldr	r2, [r3, #4]
 801127a:	604a      	str	r2, [r1, #4]
 801127c:	2301      	movs	r3, #1
 801127e:	4093      	lsls	r3, r2
 8011280:	608b      	str	r3, [r1, #8]
 8011282:	4620      	mov	r0, r4
 8011284:	f000 ff54 	bl	8012130 <_Bfree>
 8011288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801128a:	2200      	movs	r2, #0
 801128c:	601a      	str	r2, [r3, #0]
 801128e:	1e3b      	subs	r3, r7, #0
 8011290:	bfaa      	itet	ge
 8011292:	2300      	movge	r3, #0
 8011294:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011298:	f8c8 3000 	strge.w	r3, [r8]
 801129c:	4b9a      	ldr	r3, [pc, #616]	; (8011508 <_dtoa_r+0x2d8>)
 801129e:	bfbc      	itt	lt
 80112a0:	2201      	movlt	r2, #1
 80112a2:	f8c8 2000 	strlt.w	r2, [r8]
 80112a6:	ea33 030b 	bics.w	r3, r3, fp
 80112aa:	d11b      	bne.n	80112e4 <_dtoa_r+0xb4>
 80112ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80112ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80112b2:	6013      	str	r3, [r2, #0]
 80112b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80112b8:	4333      	orrs	r3, r6
 80112ba:	f000 8592 	beq.w	8011de2 <_dtoa_r+0xbb2>
 80112be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80112c0:	b963      	cbnz	r3, 80112dc <_dtoa_r+0xac>
 80112c2:	4b92      	ldr	r3, [pc, #584]	; (801150c <_dtoa_r+0x2dc>)
 80112c4:	e022      	b.n	801130c <_dtoa_r+0xdc>
 80112c6:	4b92      	ldr	r3, [pc, #584]	; (8011510 <_dtoa_r+0x2e0>)
 80112c8:	9301      	str	r3, [sp, #4]
 80112ca:	3308      	adds	r3, #8
 80112cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80112ce:	6013      	str	r3, [r2, #0]
 80112d0:	9801      	ldr	r0, [sp, #4]
 80112d2:	b013      	add	sp, #76	; 0x4c
 80112d4:	ecbd 8b04 	vpop	{d8-d9}
 80112d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112dc:	4b8b      	ldr	r3, [pc, #556]	; (801150c <_dtoa_r+0x2dc>)
 80112de:	9301      	str	r3, [sp, #4]
 80112e0:	3303      	adds	r3, #3
 80112e2:	e7f3      	b.n	80112cc <_dtoa_r+0x9c>
 80112e4:	2200      	movs	r2, #0
 80112e6:	2300      	movs	r3, #0
 80112e8:	4650      	mov	r0, sl
 80112ea:	4659      	mov	r1, fp
 80112ec:	f7ef fbf4 	bl	8000ad8 <__aeabi_dcmpeq>
 80112f0:	ec4b ab19 	vmov	d9, sl, fp
 80112f4:	4680      	mov	r8, r0
 80112f6:	b158      	cbz	r0, 8011310 <_dtoa_r+0xe0>
 80112f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80112fa:	2301      	movs	r3, #1
 80112fc:	6013      	str	r3, [r2, #0]
 80112fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011300:	2b00      	cmp	r3, #0
 8011302:	f000 856b 	beq.w	8011ddc <_dtoa_r+0xbac>
 8011306:	4883      	ldr	r0, [pc, #524]	; (8011514 <_dtoa_r+0x2e4>)
 8011308:	6018      	str	r0, [r3, #0]
 801130a:	1e43      	subs	r3, r0, #1
 801130c:	9301      	str	r3, [sp, #4]
 801130e:	e7df      	b.n	80112d0 <_dtoa_r+0xa0>
 8011310:	ec4b ab10 	vmov	d0, sl, fp
 8011314:	aa10      	add	r2, sp, #64	; 0x40
 8011316:	a911      	add	r1, sp, #68	; 0x44
 8011318:	4620      	mov	r0, r4
 801131a:	f001 f9f1 	bl	8012700 <__d2b>
 801131e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011322:	ee08 0a10 	vmov	s16, r0
 8011326:	2d00      	cmp	r5, #0
 8011328:	f000 8084 	beq.w	8011434 <_dtoa_r+0x204>
 801132c:	ee19 3a90 	vmov	r3, s19
 8011330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011334:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011338:	4656      	mov	r6, sl
 801133a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801133e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011342:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011346:	4b74      	ldr	r3, [pc, #464]	; (8011518 <_dtoa_r+0x2e8>)
 8011348:	2200      	movs	r2, #0
 801134a:	4630      	mov	r0, r6
 801134c:	4639      	mov	r1, r7
 801134e:	f7ee ffa3 	bl	8000298 <__aeabi_dsub>
 8011352:	a365      	add	r3, pc, #404	; (adr r3, 80114e8 <_dtoa_r+0x2b8>)
 8011354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011358:	f7ef f956 	bl	8000608 <__aeabi_dmul>
 801135c:	a364      	add	r3, pc, #400	; (adr r3, 80114f0 <_dtoa_r+0x2c0>)
 801135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011362:	f7ee ff9b 	bl	800029c <__adddf3>
 8011366:	4606      	mov	r6, r0
 8011368:	4628      	mov	r0, r5
 801136a:	460f      	mov	r7, r1
 801136c:	f7ef f8e2 	bl	8000534 <__aeabi_i2d>
 8011370:	a361      	add	r3, pc, #388	; (adr r3, 80114f8 <_dtoa_r+0x2c8>)
 8011372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011376:	f7ef f947 	bl	8000608 <__aeabi_dmul>
 801137a:	4602      	mov	r2, r0
 801137c:	460b      	mov	r3, r1
 801137e:	4630      	mov	r0, r6
 8011380:	4639      	mov	r1, r7
 8011382:	f7ee ff8b 	bl	800029c <__adddf3>
 8011386:	4606      	mov	r6, r0
 8011388:	460f      	mov	r7, r1
 801138a:	f7ef fbed 	bl	8000b68 <__aeabi_d2iz>
 801138e:	2200      	movs	r2, #0
 8011390:	9000      	str	r0, [sp, #0]
 8011392:	2300      	movs	r3, #0
 8011394:	4630      	mov	r0, r6
 8011396:	4639      	mov	r1, r7
 8011398:	f7ef fba8 	bl	8000aec <__aeabi_dcmplt>
 801139c:	b150      	cbz	r0, 80113b4 <_dtoa_r+0x184>
 801139e:	9800      	ldr	r0, [sp, #0]
 80113a0:	f7ef f8c8 	bl	8000534 <__aeabi_i2d>
 80113a4:	4632      	mov	r2, r6
 80113a6:	463b      	mov	r3, r7
 80113a8:	f7ef fb96 	bl	8000ad8 <__aeabi_dcmpeq>
 80113ac:	b910      	cbnz	r0, 80113b4 <_dtoa_r+0x184>
 80113ae:	9b00      	ldr	r3, [sp, #0]
 80113b0:	3b01      	subs	r3, #1
 80113b2:	9300      	str	r3, [sp, #0]
 80113b4:	9b00      	ldr	r3, [sp, #0]
 80113b6:	2b16      	cmp	r3, #22
 80113b8:	d85a      	bhi.n	8011470 <_dtoa_r+0x240>
 80113ba:	9a00      	ldr	r2, [sp, #0]
 80113bc:	4b57      	ldr	r3, [pc, #348]	; (801151c <_dtoa_r+0x2ec>)
 80113be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80113c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c6:	ec51 0b19 	vmov	r0, r1, d9
 80113ca:	f7ef fb8f 	bl	8000aec <__aeabi_dcmplt>
 80113ce:	2800      	cmp	r0, #0
 80113d0:	d050      	beq.n	8011474 <_dtoa_r+0x244>
 80113d2:	9b00      	ldr	r3, [sp, #0]
 80113d4:	3b01      	subs	r3, #1
 80113d6:	9300      	str	r3, [sp, #0]
 80113d8:	2300      	movs	r3, #0
 80113da:	930b      	str	r3, [sp, #44]	; 0x2c
 80113dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80113de:	1b5d      	subs	r5, r3, r5
 80113e0:	1e6b      	subs	r3, r5, #1
 80113e2:	9305      	str	r3, [sp, #20]
 80113e4:	bf45      	ittet	mi
 80113e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80113ea:	9304      	strmi	r3, [sp, #16]
 80113ec:	2300      	movpl	r3, #0
 80113ee:	2300      	movmi	r3, #0
 80113f0:	bf4c      	ite	mi
 80113f2:	9305      	strmi	r3, [sp, #20]
 80113f4:	9304      	strpl	r3, [sp, #16]
 80113f6:	9b00      	ldr	r3, [sp, #0]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	db3d      	blt.n	8011478 <_dtoa_r+0x248>
 80113fc:	9b05      	ldr	r3, [sp, #20]
 80113fe:	9a00      	ldr	r2, [sp, #0]
 8011400:	920a      	str	r2, [sp, #40]	; 0x28
 8011402:	4413      	add	r3, r2
 8011404:	9305      	str	r3, [sp, #20]
 8011406:	2300      	movs	r3, #0
 8011408:	9307      	str	r3, [sp, #28]
 801140a:	9b06      	ldr	r3, [sp, #24]
 801140c:	2b09      	cmp	r3, #9
 801140e:	f200 8089 	bhi.w	8011524 <_dtoa_r+0x2f4>
 8011412:	2b05      	cmp	r3, #5
 8011414:	bfc4      	itt	gt
 8011416:	3b04      	subgt	r3, #4
 8011418:	9306      	strgt	r3, [sp, #24]
 801141a:	9b06      	ldr	r3, [sp, #24]
 801141c:	f1a3 0302 	sub.w	r3, r3, #2
 8011420:	bfcc      	ite	gt
 8011422:	2500      	movgt	r5, #0
 8011424:	2501      	movle	r5, #1
 8011426:	2b03      	cmp	r3, #3
 8011428:	f200 8087 	bhi.w	801153a <_dtoa_r+0x30a>
 801142c:	e8df f003 	tbb	[pc, r3]
 8011430:	59383a2d 	.word	0x59383a2d
 8011434:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011438:	441d      	add	r5, r3
 801143a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801143e:	2b20      	cmp	r3, #32
 8011440:	bfc1      	itttt	gt
 8011442:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011446:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801144a:	fa0b f303 	lslgt.w	r3, fp, r3
 801144e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011452:	bfda      	itte	le
 8011454:	f1c3 0320 	rsble	r3, r3, #32
 8011458:	fa06 f003 	lslle.w	r0, r6, r3
 801145c:	4318      	orrgt	r0, r3
 801145e:	f7ef f859 	bl	8000514 <__aeabi_ui2d>
 8011462:	2301      	movs	r3, #1
 8011464:	4606      	mov	r6, r0
 8011466:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801146a:	3d01      	subs	r5, #1
 801146c:	930e      	str	r3, [sp, #56]	; 0x38
 801146e:	e76a      	b.n	8011346 <_dtoa_r+0x116>
 8011470:	2301      	movs	r3, #1
 8011472:	e7b2      	b.n	80113da <_dtoa_r+0x1aa>
 8011474:	900b      	str	r0, [sp, #44]	; 0x2c
 8011476:	e7b1      	b.n	80113dc <_dtoa_r+0x1ac>
 8011478:	9b04      	ldr	r3, [sp, #16]
 801147a:	9a00      	ldr	r2, [sp, #0]
 801147c:	1a9b      	subs	r3, r3, r2
 801147e:	9304      	str	r3, [sp, #16]
 8011480:	4253      	negs	r3, r2
 8011482:	9307      	str	r3, [sp, #28]
 8011484:	2300      	movs	r3, #0
 8011486:	930a      	str	r3, [sp, #40]	; 0x28
 8011488:	e7bf      	b.n	801140a <_dtoa_r+0x1da>
 801148a:	2300      	movs	r3, #0
 801148c:	9308      	str	r3, [sp, #32]
 801148e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011490:	2b00      	cmp	r3, #0
 8011492:	dc55      	bgt.n	8011540 <_dtoa_r+0x310>
 8011494:	2301      	movs	r3, #1
 8011496:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801149a:	461a      	mov	r2, r3
 801149c:	9209      	str	r2, [sp, #36]	; 0x24
 801149e:	e00c      	b.n	80114ba <_dtoa_r+0x28a>
 80114a0:	2301      	movs	r3, #1
 80114a2:	e7f3      	b.n	801148c <_dtoa_r+0x25c>
 80114a4:	2300      	movs	r3, #0
 80114a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114a8:	9308      	str	r3, [sp, #32]
 80114aa:	9b00      	ldr	r3, [sp, #0]
 80114ac:	4413      	add	r3, r2
 80114ae:	9302      	str	r3, [sp, #8]
 80114b0:	3301      	adds	r3, #1
 80114b2:	2b01      	cmp	r3, #1
 80114b4:	9303      	str	r3, [sp, #12]
 80114b6:	bfb8      	it	lt
 80114b8:	2301      	movlt	r3, #1
 80114ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80114bc:	2200      	movs	r2, #0
 80114be:	6042      	str	r2, [r0, #4]
 80114c0:	2204      	movs	r2, #4
 80114c2:	f102 0614 	add.w	r6, r2, #20
 80114c6:	429e      	cmp	r6, r3
 80114c8:	6841      	ldr	r1, [r0, #4]
 80114ca:	d93d      	bls.n	8011548 <_dtoa_r+0x318>
 80114cc:	4620      	mov	r0, r4
 80114ce:	f000 fdef 	bl	80120b0 <_Balloc>
 80114d2:	9001      	str	r0, [sp, #4]
 80114d4:	2800      	cmp	r0, #0
 80114d6:	d13b      	bne.n	8011550 <_dtoa_r+0x320>
 80114d8:	4b11      	ldr	r3, [pc, #68]	; (8011520 <_dtoa_r+0x2f0>)
 80114da:	4602      	mov	r2, r0
 80114dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80114e0:	e6c0      	b.n	8011264 <_dtoa_r+0x34>
 80114e2:	2301      	movs	r3, #1
 80114e4:	e7df      	b.n	80114a6 <_dtoa_r+0x276>
 80114e6:	bf00      	nop
 80114e8:	636f4361 	.word	0x636f4361
 80114ec:	3fd287a7 	.word	0x3fd287a7
 80114f0:	8b60c8b3 	.word	0x8b60c8b3
 80114f4:	3fc68a28 	.word	0x3fc68a28
 80114f8:	509f79fb 	.word	0x509f79fb
 80114fc:	3fd34413 	.word	0x3fd34413
 8011500:	080149a2 	.word	0x080149a2
 8011504:	080149b9 	.word	0x080149b9
 8011508:	7ff00000 	.word	0x7ff00000
 801150c:	0801499e 	.word	0x0801499e
 8011510:	08014995 	.word	0x08014995
 8011514:	08014871 	.word	0x08014871
 8011518:	3ff80000 	.word	0x3ff80000
 801151c:	08014ab0 	.word	0x08014ab0
 8011520:	08014a14 	.word	0x08014a14
 8011524:	2501      	movs	r5, #1
 8011526:	2300      	movs	r3, #0
 8011528:	9306      	str	r3, [sp, #24]
 801152a:	9508      	str	r5, [sp, #32]
 801152c:	f04f 33ff 	mov.w	r3, #4294967295
 8011530:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011534:	2200      	movs	r2, #0
 8011536:	2312      	movs	r3, #18
 8011538:	e7b0      	b.n	801149c <_dtoa_r+0x26c>
 801153a:	2301      	movs	r3, #1
 801153c:	9308      	str	r3, [sp, #32]
 801153e:	e7f5      	b.n	801152c <_dtoa_r+0x2fc>
 8011540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011542:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011546:	e7b8      	b.n	80114ba <_dtoa_r+0x28a>
 8011548:	3101      	adds	r1, #1
 801154a:	6041      	str	r1, [r0, #4]
 801154c:	0052      	lsls	r2, r2, #1
 801154e:	e7b8      	b.n	80114c2 <_dtoa_r+0x292>
 8011550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011552:	9a01      	ldr	r2, [sp, #4]
 8011554:	601a      	str	r2, [r3, #0]
 8011556:	9b03      	ldr	r3, [sp, #12]
 8011558:	2b0e      	cmp	r3, #14
 801155a:	f200 809d 	bhi.w	8011698 <_dtoa_r+0x468>
 801155e:	2d00      	cmp	r5, #0
 8011560:	f000 809a 	beq.w	8011698 <_dtoa_r+0x468>
 8011564:	9b00      	ldr	r3, [sp, #0]
 8011566:	2b00      	cmp	r3, #0
 8011568:	dd32      	ble.n	80115d0 <_dtoa_r+0x3a0>
 801156a:	4ab7      	ldr	r2, [pc, #732]	; (8011848 <_dtoa_r+0x618>)
 801156c:	f003 030f 	and.w	r3, r3, #15
 8011570:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011574:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011578:	9b00      	ldr	r3, [sp, #0]
 801157a:	05d8      	lsls	r0, r3, #23
 801157c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011580:	d516      	bpl.n	80115b0 <_dtoa_r+0x380>
 8011582:	4bb2      	ldr	r3, [pc, #712]	; (801184c <_dtoa_r+0x61c>)
 8011584:	ec51 0b19 	vmov	r0, r1, d9
 8011588:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801158c:	f7ef f966 	bl	800085c <__aeabi_ddiv>
 8011590:	f007 070f 	and.w	r7, r7, #15
 8011594:	4682      	mov	sl, r0
 8011596:	468b      	mov	fp, r1
 8011598:	2503      	movs	r5, #3
 801159a:	4eac      	ldr	r6, [pc, #688]	; (801184c <_dtoa_r+0x61c>)
 801159c:	b957      	cbnz	r7, 80115b4 <_dtoa_r+0x384>
 801159e:	4642      	mov	r2, r8
 80115a0:	464b      	mov	r3, r9
 80115a2:	4650      	mov	r0, sl
 80115a4:	4659      	mov	r1, fp
 80115a6:	f7ef f959 	bl	800085c <__aeabi_ddiv>
 80115aa:	4682      	mov	sl, r0
 80115ac:	468b      	mov	fp, r1
 80115ae:	e028      	b.n	8011602 <_dtoa_r+0x3d2>
 80115b0:	2502      	movs	r5, #2
 80115b2:	e7f2      	b.n	801159a <_dtoa_r+0x36a>
 80115b4:	07f9      	lsls	r1, r7, #31
 80115b6:	d508      	bpl.n	80115ca <_dtoa_r+0x39a>
 80115b8:	4640      	mov	r0, r8
 80115ba:	4649      	mov	r1, r9
 80115bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80115c0:	f7ef f822 	bl	8000608 <__aeabi_dmul>
 80115c4:	3501      	adds	r5, #1
 80115c6:	4680      	mov	r8, r0
 80115c8:	4689      	mov	r9, r1
 80115ca:	107f      	asrs	r7, r7, #1
 80115cc:	3608      	adds	r6, #8
 80115ce:	e7e5      	b.n	801159c <_dtoa_r+0x36c>
 80115d0:	f000 809b 	beq.w	801170a <_dtoa_r+0x4da>
 80115d4:	9b00      	ldr	r3, [sp, #0]
 80115d6:	4f9d      	ldr	r7, [pc, #628]	; (801184c <_dtoa_r+0x61c>)
 80115d8:	425e      	negs	r6, r3
 80115da:	4b9b      	ldr	r3, [pc, #620]	; (8011848 <_dtoa_r+0x618>)
 80115dc:	f006 020f 	and.w	r2, r6, #15
 80115e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80115e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115e8:	ec51 0b19 	vmov	r0, r1, d9
 80115ec:	f7ef f80c 	bl	8000608 <__aeabi_dmul>
 80115f0:	1136      	asrs	r6, r6, #4
 80115f2:	4682      	mov	sl, r0
 80115f4:	468b      	mov	fp, r1
 80115f6:	2300      	movs	r3, #0
 80115f8:	2502      	movs	r5, #2
 80115fa:	2e00      	cmp	r6, #0
 80115fc:	d17a      	bne.n	80116f4 <_dtoa_r+0x4c4>
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d1d3      	bne.n	80115aa <_dtoa_r+0x37a>
 8011602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011604:	2b00      	cmp	r3, #0
 8011606:	f000 8082 	beq.w	801170e <_dtoa_r+0x4de>
 801160a:	4b91      	ldr	r3, [pc, #580]	; (8011850 <_dtoa_r+0x620>)
 801160c:	2200      	movs	r2, #0
 801160e:	4650      	mov	r0, sl
 8011610:	4659      	mov	r1, fp
 8011612:	f7ef fa6b 	bl	8000aec <__aeabi_dcmplt>
 8011616:	2800      	cmp	r0, #0
 8011618:	d079      	beq.n	801170e <_dtoa_r+0x4de>
 801161a:	9b03      	ldr	r3, [sp, #12]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d076      	beq.n	801170e <_dtoa_r+0x4de>
 8011620:	9b02      	ldr	r3, [sp, #8]
 8011622:	2b00      	cmp	r3, #0
 8011624:	dd36      	ble.n	8011694 <_dtoa_r+0x464>
 8011626:	9b00      	ldr	r3, [sp, #0]
 8011628:	4650      	mov	r0, sl
 801162a:	4659      	mov	r1, fp
 801162c:	1e5f      	subs	r7, r3, #1
 801162e:	2200      	movs	r2, #0
 8011630:	4b88      	ldr	r3, [pc, #544]	; (8011854 <_dtoa_r+0x624>)
 8011632:	f7ee ffe9 	bl	8000608 <__aeabi_dmul>
 8011636:	9e02      	ldr	r6, [sp, #8]
 8011638:	4682      	mov	sl, r0
 801163a:	468b      	mov	fp, r1
 801163c:	3501      	adds	r5, #1
 801163e:	4628      	mov	r0, r5
 8011640:	f7ee ff78 	bl	8000534 <__aeabi_i2d>
 8011644:	4652      	mov	r2, sl
 8011646:	465b      	mov	r3, fp
 8011648:	f7ee ffde 	bl	8000608 <__aeabi_dmul>
 801164c:	4b82      	ldr	r3, [pc, #520]	; (8011858 <_dtoa_r+0x628>)
 801164e:	2200      	movs	r2, #0
 8011650:	f7ee fe24 	bl	800029c <__adddf3>
 8011654:	46d0      	mov	r8, sl
 8011656:	46d9      	mov	r9, fp
 8011658:	4682      	mov	sl, r0
 801165a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801165e:	2e00      	cmp	r6, #0
 8011660:	d158      	bne.n	8011714 <_dtoa_r+0x4e4>
 8011662:	4b7e      	ldr	r3, [pc, #504]	; (801185c <_dtoa_r+0x62c>)
 8011664:	2200      	movs	r2, #0
 8011666:	4640      	mov	r0, r8
 8011668:	4649      	mov	r1, r9
 801166a:	f7ee fe15 	bl	8000298 <__aeabi_dsub>
 801166e:	4652      	mov	r2, sl
 8011670:	465b      	mov	r3, fp
 8011672:	4680      	mov	r8, r0
 8011674:	4689      	mov	r9, r1
 8011676:	f7ef fa57 	bl	8000b28 <__aeabi_dcmpgt>
 801167a:	2800      	cmp	r0, #0
 801167c:	f040 8295 	bne.w	8011baa <_dtoa_r+0x97a>
 8011680:	4652      	mov	r2, sl
 8011682:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011686:	4640      	mov	r0, r8
 8011688:	4649      	mov	r1, r9
 801168a:	f7ef fa2f 	bl	8000aec <__aeabi_dcmplt>
 801168e:	2800      	cmp	r0, #0
 8011690:	f040 8289 	bne.w	8011ba6 <_dtoa_r+0x976>
 8011694:	ec5b ab19 	vmov	sl, fp, d9
 8011698:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801169a:	2b00      	cmp	r3, #0
 801169c:	f2c0 8148 	blt.w	8011930 <_dtoa_r+0x700>
 80116a0:	9a00      	ldr	r2, [sp, #0]
 80116a2:	2a0e      	cmp	r2, #14
 80116a4:	f300 8144 	bgt.w	8011930 <_dtoa_r+0x700>
 80116a8:	4b67      	ldr	r3, [pc, #412]	; (8011848 <_dtoa_r+0x618>)
 80116aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80116b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	f280 80d5 	bge.w	8011864 <_dtoa_r+0x634>
 80116ba:	9b03      	ldr	r3, [sp, #12]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	f300 80d1 	bgt.w	8011864 <_dtoa_r+0x634>
 80116c2:	f040 826f 	bne.w	8011ba4 <_dtoa_r+0x974>
 80116c6:	4b65      	ldr	r3, [pc, #404]	; (801185c <_dtoa_r+0x62c>)
 80116c8:	2200      	movs	r2, #0
 80116ca:	4640      	mov	r0, r8
 80116cc:	4649      	mov	r1, r9
 80116ce:	f7ee ff9b 	bl	8000608 <__aeabi_dmul>
 80116d2:	4652      	mov	r2, sl
 80116d4:	465b      	mov	r3, fp
 80116d6:	f7ef fa1d 	bl	8000b14 <__aeabi_dcmpge>
 80116da:	9e03      	ldr	r6, [sp, #12]
 80116dc:	4637      	mov	r7, r6
 80116de:	2800      	cmp	r0, #0
 80116e0:	f040 8245 	bne.w	8011b6e <_dtoa_r+0x93e>
 80116e4:	9d01      	ldr	r5, [sp, #4]
 80116e6:	2331      	movs	r3, #49	; 0x31
 80116e8:	f805 3b01 	strb.w	r3, [r5], #1
 80116ec:	9b00      	ldr	r3, [sp, #0]
 80116ee:	3301      	adds	r3, #1
 80116f0:	9300      	str	r3, [sp, #0]
 80116f2:	e240      	b.n	8011b76 <_dtoa_r+0x946>
 80116f4:	07f2      	lsls	r2, r6, #31
 80116f6:	d505      	bpl.n	8011704 <_dtoa_r+0x4d4>
 80116f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80116fc:	f7ee ff84 	bl	8000608 <__aeabi_dmul>
 8011700:	3501      	adds	r5, #1
 8011702:	2301      	movs	r3, #1
 8011704:	1076      	asrs	r6, r6, #1
 8011706:	3708      	adds	r7, #8
 8011708:	e777      	b.n	80115fa <_dtoa_r+0x3ca>
 801170a:	2502      	movs	r5, #2
 801170c:	e779      	b.n	8011602 <_dtoa_r+0x3d2>
 801170e:	9f00      	ldr	r7, [sp, #0]
 8011710:	9e03      	ldr	r6, [sp, #12]
 8011712:	e794      	b.n	801163e <_dtoa_r+0x40e>
 8011714:	9901      	ldr	r1, [sp, #4]
 8011716:	4b4c      	ldr	r3, [pc, #304]	; (8011848 <_dtoa_r+0x618>)
 8011718:	4431      	add	r1, r6
 801171a:	910d      	str	r1, [sp, #52]	; 0x34
 801171c:	9908      	ldr	r1, [sp, #32]
 801171e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011722:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011726:	2900      	cmp	r1, #0
 8011728:	d043      	beq.n	80117b2 <_dtoa_r+0x582>
 801172a:	494d      	ldr	r1, [pc, #308]	; (8011860 <_dtoa_r+0x630>)
 801172c:	2000      	movs	r0, #0
 801172e:	f7ef f895 	bl	800085c <__aeabi_ddiv>
 8011732:	4652      	mov	r2, sl
 8011734:	465b      	mov	r3, fp
 8011736:	f7ee fdaf 	bl	8000298 <__aeabi_dsub>
 801173a:	9d01      	ldr	r5, [sp, #4]
 801173c:	4682      	mov	sl, r0
 801173e:	468b      	mov	fp, r1
 8011740:	4649      	mov	r1, r9
 8011742:	4640      	mov	r0, r8
 8011744:	f7ef fa10 	bl	8000b68 <__aeabi_d2iz>
 8011748:	4606      	mov	r6, r0
 801174a:	f7ee fef3 	bl	8000534 <__aeabi_i2d>
 801174e:	4602      	mov	r2, r0
 8011750:	460b      	mov	r3, r1
 8011752:	4640      	mov	r0, r8
 8011754:	4649      	mov	r1, r9
 8011756:	f7ee fd9f 	bl	8000298 <__aeabi_dsub>
 801175a:	3630      	adds	r6, #48	; 0x30
 801175c:	f805 6b01 	strb.w	r6, [r5], #1
 8011760:	4652      	mov	r2, sl
 8011762:	465b      	mov	r3, fp
 8011764:	4680      	mov	r8, r0
 8011766:	4689      	mov	r9, r1
 8011768:	f7ef f9c0 	bl	8000aec <__aeabi_dcmplt>
 801176c:	2800      	cmp	r0, #0
 801176e:	d163      	bne.n	8011838 <_dtoa_r+0x608>
 8011770:	4642      	mov	r2, r8
 8011772:	464b      	mov	r3, r9
 8011774:	4936      	ldr	r1, [pc, #216]	; (8011850 <_dtoa_r+0x620>)
 8011776:	2000      	movs	r0, #0
 8011778:	f7ee fd8e 	bl	8000298 <__aeabi_dsub>
 801177c:	4652      	mov	r2, sl
 801177e:	465b      	mov	r3, fp
 8011780:	f7ef f9b4 	bl	8000aec <__aeabi_dcmplt>
 8011784:	2800      	cmp	r0, #0
 8011786:	f040 80b5 	bne.w	80118f4 <_dtoa_r+0x6c4>
 801178a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801178c:	429d      	cmp	r5, r3
 801178e:	d081      	beq.n	8011694 <_dtoa_r+0x464>
 8011790:	4b30      	ldr	r3, [pc, #192]	; (8011854 <_dtoa_r+0x624>)
 8011792:	2200      	movs	r2, #0
 8011794:	4650      	mov	r0, sl
 8011796:	4659      	mov	r1, fp
 8011798:	f7ee ff36 	bl	8000608 <__aeabi_dmul>
 801179c:	4b2d      	ldr	r3, [pc, #180]	; (8011854 <_dtoa_r+0x624>)
 801179e:	4682      	mov	sl, r0
 80117a0:	468b      	mov	fp, r1
 80117a2:	4640      	mov	r0, r8
 80117a4:	4649      	mov	r1, r9
 80117a6:	2200      	movs	r2, #0
 80117a8:	f7ee ff2e 	bl	8000608 <__aeabi_dmul>
 80117ac:	4680      	mov	r8, r0
 80117ae:	4689      	mov	r9, r1
 80117b0:	e7c6      	b.n	8011740 <_dtoa_r+0x510>
 80117b2:	4650      	mov	r0, sl
 80117b4:	4659      	mov	r1, fp
 80117b6:	f7ee ff27 	bl	8000608 <__aeabi_dmul>
 80117ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117bc:	9d01      	ldr	r5, [sp, #4]
 80117be:	930f      	str	r3, [sp, #60]	; 0x3c
 80117c0:	4682      	mov	sl, r0
 80117c2:	468b      	mov	fp, r1
 80117c4:	4649      	mov	r1, r9
 80117c6:	4640      	mov	r0, r8
 80117c8:	f7ef f9ce 	bl	8000b68 <__aeabi_d2iz>
 80117cc:	4606      	mov	r6, r0
 80117ce:	f7ee feb1 	bl	8000534 <__aeabi_i2d>
 80117d2:	3630      	adds	r6, #48	; 0x30
 80117d4:	4602      	mov	r2, r0
 80117d6:	460b      	mov	r3, r1
 80117d8:	4640      	mov	r0, r8
 80117da:	4649      	mov	r1, r9
 80117dc:	f7ee fd5c 	bl	8000298 <__aeabi_dsub>
 80117e0:	f805 6b01 	strb.w	r6, [r5], #1
 80117e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117e6:	429d      	cmp	r5, r3
 80117e8:	4680      	mov	r8, r0
 80117ea:	4689      	mov	r9, r1
 80117ec:	f04f 0200 	mov.w	r2, #0
 80117f0:	d124      	bne.n	801183c <_dtoa_r+0x60c>
 80117f2:	4b1b      	ldr	r3, [pc, #108]	; (8011860 <_dtoa_r+0x630>)
 80117f4:	4650      	mov	r0, sl
 80117f6:	4659      	mov	r1, fp
 80117f8:	f7ee fd50 	bl	800029c <__adddf3>
 80117fc:	4602      	mov	r2, r0
 80117fe:	460b      	mov	r3, r1
 8011800:	4640      	mov	r0, r8
 8011802:	4649      	mov	r1, r9
 8011804:	f7ef f990 	bl	8000b28 <__aeabi_dcmpgt>
 8011808:	2800      	cmp	r0, #0
 801180a:	d173      	bne.n	80118f4 <_dtoa_r+0x6c4>
 801180c:	4652      	mov	r2, sl
 801180e:	465b      	mov	r3, fp
 8011810:	4913      	ldr	r1, [pc, #76]	; (8011860 <_dtoa_r+0x630>)
 8011812:	2000      	movs	r0, #0
 8011814:	f7ee fd40 	bl	8000298 <__aeabi_dsub>
 8011818:	4602      	mov	r2, r0
 801181a:	460b      	mov	r3, r1
 801181c:	4640      	mov	r0, r8
 801181e:	4649      	mov	r1, r9
 8011820:	f7ef f964 	bl	8000aec <__aeabi_dcmplt>
 8011824:	2800      	cmp	r0, #0
 8011826:	f43f af35 	beq.w	8011694 <_dtoa_r+0x464>
 801182a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801182c:	1e6b      	subs	r3, r5, #1
 801182e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011830:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011834:	2b30      	cmp	r3, #48	; 0x30
 8011836:	d0f8      	beq.n	801182a <_dtoa_r+0x5fa>
 8011838:	9700      	str	r7, [sp, #0]
 801183a:	e049      	b.n	80118d0 <_dtoa_r+0x6a0>
 801183c:	4b05      	ldr	r3, [pc, #20]	; (8011854 <_dtoa_r+0x624>)
 801183e:	f7ee fee3 	bl	8000608 <__aeabi_dmul>
 8011842:	4680      	mov	r8, r0
 8011844:	4689      	mov	r9, r1
 8011846:	e7bd      	b.n	80117c4 <_dtoa_r+0x594>
 8011848:	08014ab0 	.word	0x08014ab0
 801184c:	08014a88 	.word	0x08014a88
 8011850:	3ff00000 	.word	0x3ff00000
 8011854:	40240000 	.word	0x40240000
 8011858:	401c0000 	.word	0x401c0000
 801185c:	40140000 	.word	0x40140000
 8011860:	3fe00000 	.word	0x3fe00000
 8011864:	9d01      	ldr	r5, [sp, #4]
 8011866:	4656      	mov	r6, sl
 8011868:	465f      	mov	r7, fp
 801186a:	4642      	mov	r2, r8
 801186c:	464b      	mov	r3, r9
 801186e:	4630      	mov	r0, r6
 8011870:	4639      	mov	r1, r7
 8011872:	f7ee fff3 	bl	800085c <__aeabi_ddiv>
 8011876:	f7ef f977 	bl	8000b68 <__aeabi_d2iz>
 801187a:	4682      	mov	sl, r0
 801187c:	f7ee fe5a 	bl	8000534 <__aeabi_i2d>
 8011880:	4642      	mov	r2, r8
 8011882:	464b      	mov	r3, r9
 8011884:	f7ee fec0 	bl	8000608 <__aeabi_dmul>
 8011888:	4602      	mov	r2, r0
 801188a:	460b      	mov	r3, r1
 801188c:	4630      	mov	r0, r6
 801188e:	4639      	mov	r1, r7
 8011890:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011894:	f7ee fd00 	bl	8000298 <__aeabi_dsub>
 8011898:	f805 6b01 	strb.w	r6, [r5], #1
 801189c:	9e01      	ldr	r6, [sp, #4]
 801189e:	9f03      	ldr	r7, [sp, #12]
 80118a0:	1bae      	subs	r6, r5, r6
 80118a2:	42b7      	cmp	r7, r6
 80118a4:	4602      	mov	r2, r0
 80118a6:	460b      	mov	r3, r1
 80118a8:	d135      	bne.n	8011916 <_dtoa_r+0x6e6>
 80118aa:	f7ee fcf7 	bl	800029c <__adddf3>
 80118ae:	4642      	mov	r2, r8
 80118b0:	464b      	mov	r3, r9
 80118b2:	4606      	mov	r6, r0
 80118b4:	460f      	mov	r7, r1
 80118b6:	f7ef f937 	bl	8000b28 <__aeabi_dcmpgt>
 80118ba:	b9d0      	cbnz	r0, 80118f2 <_dtoa_r+0x6c2>
 80118bc:	4642      	mov	r2, r8
 80118be:	464b      	mov	r3, r9
 80118c0:	4630      	mov	r0, r6
 80118c2:	4639      	mov	r1, r7
 80118c4:	f7ef f908 	bl	8000ad8 <__aeabi_dcmpeq>
 80118c8:	b110      	cbz	r0, 80118d0 <_dtoa_r+0x6a0>
 80118ca:	f01a 0f01 	tst.w	sl, #1
 80118ce:	d110      	bne.n	80118f2 <_dtoa_r+0x6c2>
 80118d0:	4620      	mov	r0, r4
 80118d2:	ee18 1a10 	vmov	r1, s16
 80118d6:	f000 fc2b 	bl	8012130 <_Bfree>
 80118da:	2300      	movs	r3, #0
 80118dc:	9800      	ldr	r0, [sp, #0]
 80118de:	702b      	strb	r3, [r5, #0]
 80118e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80118e2:	3001      	adds	r0, #1
 80118e4:	6018      	str	r0, [r3, #0]
 80118e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	f43f acf1 	beq.w	80112d0 <_dtoa_r+0xa0>
 80118ee:	601d      	str	r5, [r3, #0]
 80118f0:	e4ee      	b.n	80112d0 <_dtoa_r+0xa0>
 80118f2:	9f00      	ldr	r7, [sp, #0]
 80118f4:	462b      	mov	r3, r5
 80118f6:	461d      	mov	r5, r3
 80118f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80118fc:	2a39      	cmp	r2, #57	; 0x39
 80118fe:	d106      	bne.n	801190e <_dtoa_r+0x6de>
 8011900:	9a01      	ldr	r2, [sp, #4]
 8011902:	429a      	cmp	r2, r3
 8011904:	d1f7      	bne.n	80118f6 <_dtoa_r+0x6c6>
 8011906:	9901      	ldr	r1, [sp, #4]
 8011908:	2230      	movs	r2, #48	; 0x30
 801190a:	3701      	adds	r7, #1
 801190c:	700a      	strb	r2, [r1, #0]
 801190e:	781a      	ldrb	r2, [r3, #0]
 8011910:	3201      	adds	r2, #1
 8011912:	701a      	strb	r2, [r3, #0]
 8011914:	e790      	b.n	8011838 <_dtoa_r+0x608>
 8011916:	4ba6      	ldr	r3, [pc, #664]	; (8011bb0 <_dtoa_r+0x980>)
 8011918:	2200      	movs	r2, #0
 801191a:	f7ee fe75 	bl	8000608 <__aeabi_dmul>
 801191e:	2200      	movs	r2, #0
 8011920:	2300      	movs	r3, #0
 8011922:	4606      	mov	r6, r0
 8011924:	460f      	mov	r7, r1
 8011926:	f7ef f8d7 	bl	8000ad8 <__aeabi_dcmpeq>
 801192a:	2800      	cmp	r0, #0
 801192c:	d09d      	beq.n	801186a <_dtoa_r+0x63a>
 801192e:	e7cf      	b.n	80118d0 <_dtoa_r+0x6a0>
 8011930:	9a08      	ldr	r2, [sp, #32]
 8011932:	2a00      	cmp	r2, #0
 8011934:	f000 80d7 	beq.w	8011ae6 <_dtoa_r+0x8b6>
 8011938:	9a06      	ldr	r2, [sp, #24]
 801193a:	2a01      	cmp	r2, #1
 801193c:	f300 80ba 	bgt.w	8011ab4 <_dtoa_r+0x884>
 8011940:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011942:	2a00      	cmp	r2, #0
 8011944:	f000 80b2 	beq.w	8011aac <_dtoa_r+0x87c>
 8011948:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801194c:	9e07      	ldr	r6, [sp, #28]
 801194e:	9d04      	ldr	r5, [sp, #16]
 8011950:	9a04      	ldr	r2, [sp, #16]
 8011952:	441a      	add	r2, r3
 8011954:	9204      	str	r2, [sp, #16]
 8011956:	9a05      	ldr	r2, [sp, #20]
 8011958:	2101      	movs	r1, #1
 801195a:	441a      	add	r2, r3
 801195c:	4620      	mov	r0, r4
 801195e:	9205      	str	r2, [sp, #20]
 8011960:	f000 fc9e 	bl	80122a0 <__i2b>
 8011964:	4607      	mov	r7, r0
 8011966:	2d00      	cmp	r5, #0
 8011968:	dd0c      	ble.n	8011984 <_dtoa_r+0x754>
 801196a:	9b05      	ldr	r3, [sp, #20]
 801196c:	2b00      	cmp	r3, #0
 801196e:	dd09      	ble.n	8011984 <_dtoa_r+0x754>
 8011970:	42ab      	cmp	r3, r5
 8011972:	9a04      	ldr	r2, [sp, #16]
 8011974:	bfa8      	it	ge
 8011976:	462b      	movge	r3, r5
 8011978:	1ad2      	subs	r2, r2, r3
 801197a:	9204      	str	r2, [sp, #16]
 801197c:	9a05      	ldr	r2, [sp, #20]
 801197e:	1aed      	subs	r5, r5, r3
 8011980:	1ad3      	subs	r3, r2, r3
 8011982:	9305      	str	r3, [sp, #20]
 8011984:	9b07      	ldr	r3, [sp, #28]
 8011986:	b31b      	cbz	r3, 80119d0 <_dtoa_r+0x7a0>
 8011988:	9b08      	ldr	r3, [sp, #32]
 801198a:	2b00      	cmp	r3, #0
 801198c:	f000 80af 	beq.w	8011aee <_dtoa_r+0x8be>
 8011990:	2e00      	cmp	r6, #0
 8011992:	dd13      	ble.n	80119bc <_dtoa_r+0x78c>
 8011994:	4639      	mov	r1, r7
 8011996:	4632      	mov	r2, r6
 8011998:	4620      	mov	r0, r4
 801199a:	f000 fd41 	bl	8012420 <__pow5mult>
 801199e:	ee18 2a10 	vmov	r2, s16
 80119a2:	4601      	mov	r1, r0
 80119a4:	4607      	mov	r7, r0
 80119a6:	4620      	mov	r0, r4
 80119a8:	f000 fc90 	bl	80122cc <__multiply>
 80119ac:	ee18 1a10 	vmov	r1, s16
 80119b0:	4680      	mov	r8, r0
 80119b2:	4620      	mov	r0, r4
 80119b4:	f000 fbbc 	bl	8012130 <_Bfree>
 80119b8:	ee08 8a10 	vmov	s16, r8
 80119bc:	9b07      	ldr	r3, [sp, #28]
 80119be:	1b9a      	subs	r2, r3, r6
 80119c0:	d006      	beq.n	80119d0 <_dtoa_r+0x7a0>
 80119c2:	ee18 1a10 	vmov	r1, s16
 80119c6:	4620      	mov	r0, r4
 80119c8:	f000 fd2a 	bl	8012420 <__pow5mult>
 80119cc:	ee08 0a10 	vmov	s16, r0
 80119d0:	2101      	movs	r1, #1
 80119d2:	4620      	mov	r0, r4
 80119d4:	f000 fc64 	bl	80122a0 <__i2b>
 80119d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119da:	2b00      	cmp	r3, #0
 80119dc:	4606      	mov	r6, r0
 80119de:	f340 8088 	ble.w	8011af2 <_dtoa_r+0x8c2>
 80119e2:	461a      	mov	r2, r3
 80119e4:	4601      	mov	r1, r0
 80119e6:	4620      	mov	r0, r4
 80119e8:	f000 fd1a 	bl	8012420 <__pow5mult>
 80119ec:	9b06      	ldr	r3, [sp, #24]
 80119ee:	2b01      	cmp	r3, #1
 80119f0:	4606      	mov	r6, r0
 80119f2:	f340 8081 	ble.w	8011af8 <_dtoa_r+0x8c8>
 80119f6:	f04f 0800 	mov.w	r8, #0
 80119fa:	6933      	ldr	r3, [r6, #16]
 80119fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011a00:	6918      	ldr	r0, [r3, #16]
 8011a02:	f000 fbfd 	bl	8012200 <__hi0bits>
 8011a06:	f1c0 0020 	rsb	r0, r0, #32
 8011a0a:	9b05      	ldr	r3, [sp, #20]
 8011a0c:	4418      	add	r0, r3
 8011a0e:	f010 001f 	ands.w	r0, r0, #31
 8011a12:	f000 8092 	beq.w	8011b3a <_dtoa_r+0x90a>
 8011a16:	f1c0 0320 	rsb	r3, r0, #32
 8011a1a:	2b04      	cmp	r3, #4
 8011a1c:	f340 808a 	ble.w	8011b34 <_dtoa_r+0x904>
 8011a20:	f1c0 001c 	rsb	r0, r0, #28
 8011a24:	9b04      	ldr	r3, [sp, #16]
 8011a26:	4403      	add	r3, r0
 8011a28:	9304      	str	r3, [sp, #16]
 8011a2a:	9b05      	ldr	r3, [sp, #20]
 8011a2c:	4403      	add	r3, r0
 8011a2e:	4405      	add	r5, r0
 8011a30:	9305      	str	r3, [sp, #20]
 8011a32:	9b04      	ldr	r3, [sp, #16]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	dd07      	ble.n	8011a48 <_dtoa_r+0x818>
 8011a38:	ee18 1a10 	vmov	r1, s16
 8011a3c:	461a      	mov	r2, r3
 8011a3e:	4620      	mov	r0, r4
 8011a40:	f000 fd48 	bl	80124d4 <__lshift>
 8011a44:	ee08 0a10 	vmov	s16, r0
 8011a48:	9b05      	ldr	r3, [sp, #20]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	dd05      	ble.n	8011a5a <_dtoa_r+0x82a>
 8011a4e:	4631      	mov	r1, r6
 8011a50:	461a      	mov	r2, r3
 8011a52:	4620      	mov	r0, r4
 8011a54:	f000 fd3e 	bl	80124d4 <__lshift>
 8011a58:	4606      	mov	r6, r0
 8011a5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d06e      	beq.n	8011b3e <_dtoa_r+0x90e>
 8011a60:	ee18 0a10 	vmov	r0, s16
 8011a64:	4631      	mov	r1, r6
 8011a66:	f000 fda5 	bl	80125b4 <__mcmp>
 8011a6a:	2800      	cmp	r0, #0
 8011a6c:	da67      	bge.n	8011b3e <_dtoa_r+0x90e>
 8011a6e:	9b00      	ldr	r3, [sp, #0]
 8011a70:	3b01      	subs	r3, #1
 8011a72:	ee18 1a10 	vmov	r1, s16
 8011a76:	9300      	str	r3, [sp, #0]
 8011a78:	220a      	movs	r2, #10
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	4620      	mov	r0, r4
 8011a7e:	f000 fb79 	bl	8012174 <__multadd>
 8011a82:	9b08      	ldr	r3, [sp, #32]
 8011a84:	ee08 0a10 	vmov	s16, r0
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	f000 81b1 	beq.w	8011df0 <_dtoa_r+0xbc0>
 8011a8e:	2300      	movs	r3, #0
 8011a90:	4639      	mov	r1, r7
 8011a92:	220a      	movs	r2, #10
 8011a94:	4620      	mov	r0, r4
 8011a96:	f000 fb6d 	bl	8012174 <__multadd>
 8011a9a:	9b02      	ldr	r3, [sp, #8]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	4607      	mov	r7, r0
 8011aa0:	f300 808e 	bgt.w	8011bc0 <_dtoa_r+0x990>
 8011aa4:	9b06      	ldr	r3, [sp, #24]
 8011aa6:	2b02      	cmp	r3, #2
 8011aa8:	dc51      	bgt.n	8011b4e <_dtoa_r+0x91e>
 8011aaa:	e089      	b.n	8011bc0 <_dtoa_r+0x990>
 8011aac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011aae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011ab2:	e74b      	b.n	801194c <_dtoa_r+0x71c>
 8011ab4:	9b03      	ldr	r3, [sp, #12]
 8011ab6:	1e5e      	subs	r6, r3, #1
 8011ab8:	9b07      	ldr	r3, [sp, #28]
 8011aba:	42b3      	cmp	r3, r6
 8011abc:	bfbf      	itttt	lt
 8011abe:	9b07      	ldrlt	r3, [sp, #28]
 8011ac0:	9607      	strlt	r6, [sp, #28]
 8011ac2:	1af2      	sublt	r2, r6, r3
 8011ac4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011ac6:	bfb6      	itet	lt
 8011ac8:	189b      	addlt	r3, r3, r2
 8011aca:	1b9e      	subge	r6, r3, r6
 8011acc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011ace:	9b03      	ldr	r3, [sp, #12]
 8011ad0:	bfb8      	it	lt
 8011ad2:	2600      	movlt	r6, #0
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	bfb7      	itett	lt
 8011ad8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011adc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011ae0:	1a9d      	sublt	r5, r3, r2
 8011ae2:	2300      	movlt	r3, #0
 8011ae4:	e734      	b.n	8011950 <_dtoa_r+0x720>
 8011ae6:	9e07      	ldr	r6, [sp, #28]
 8011ae8:	9d04      	ldr	r5, [sp, #16]
 8011aea:	9f08      	ldr	r7, [sp, #32]
 8011aec:	e73b      	b.n	8011966 <_dtoa_r+0x736>
 8011aee:	9a07      	ldr	r2, [sp, #28]
 8011af0:	e767      	b.n	80119c2 <_dtoa_r+0x792>
 8011af2:	9b06      	ldr	r3, [sp, #24]
 8011af4:	2b01      	cmp	r3, #1
 8011af6:	dc18      	bgt.n	8011b2a <_dtoa_r+0x8fa>
 8011af8:	f1ba 0f00 	cmp.w	sl, #0
 8011afc:	d115      	bne.n	8011b2a <_dtoa_r+0x8fa>
 8011afe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011b02:	b993      	cbnz	r3, 8011b2a <_dtoa_r+0x8fa>
 8011b04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011b08:	0d1b      	lsrs	r3, r3, #20
 8011b0a:	051b      	lsls	r3, r3, #20
 8011b0c:	b183      	cbz	r3, 8011b30 <_dtoa_r+0x900>
 8011b0e:	9b04      	ldr	r3, [sp, #16]
 8011b10:	3301      	adds	r3, #1
 8011b12:	9304      	str	r3, [sp, #16]
 8011b14:	9b05      	ldr	r3, [sp, #20]
 8011b16:	3301      	adds	r3, #1
 8011b18:	9305      	str	r3, [sp, #20]
 8011b1a:	f04f 0801 	mov.w	r8, #1
 8011b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	f47f af6a 	bne.w	80119fa <_dtoa_r+0x7ca>
 8011b26:	2001      	movs	r0, #1
 8011b28:	e76f      	b.n	8011a0a <_dtoa_r+0x7da>
 8011b2a:	f04f 0800 	mov.w	r8, #0
 8011b2e:	e7f6      	b.n	8011b1e <_dtoa_r+0x8ee>
 8011b30:	4698      	mov	r8, r3
 8011b32:	e7f4      	b.n	8011b1e <_dtoa_r+0x8ee>
 8011b34:	f43f af7d 	beq.w	8011a32 <_dtoa_r+0x802>
 8011b38:	4618      	mov	r0, r3
 8011b3a:	301c      	adds	r0, #28
 8011b3c:	e772      	b.n	8011a24 <_dtoa_r+0x7f4>
 8011b3e:	9b03      	ldr	r3, [sp, #12]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	dc37      	bgt.n	8011bb4 <_dtoa_r+0x984>
 8011b44:	9b06      	ldr	r3, [sp, #24]
 8011b46:	2b02      	cmp	r3, #2
 8011b48:	dd34      	ble.n	8011bb4 <_dtoa_r+0x984>
 8011b4a:	9b03      	ldr	r3, [sp, #12]
 8011b4c:	9302      	str	r3, [sp, #8]
 8011b4e:	9b02      	ldr	r3, [sp, #8]
 8011b50:	b96b      	cbnz	r3, 8011b6e <_dtoa_r+0x93e>
 8011b52:	4631      	mov	r1, r6
 8011b54:	2205      	movs	r2, #5
 8011b56:	4620      	mov	r0, r4
 8011b58:	f000 fb0c 	bl	8012174 <__multadd>
 8011b5c:	4601      	mov	r1, r0
 8011b5e:	4606      	mov	r6, r0
 8011b60:	ee18 0a10 	vmov	r0, s16
 8011b64:	f000 fd26 	bl	80125b4 <__mcmp>
 8011b68:	2800      	cmp	r0, #0
 8011b6a:	f73f adbb 	bgt.w	80116e4 <_dtoa_r+0x4b4>
 8011b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b70:	9d01      	ldr	r5, [sp, #4]
 8011b72:	43db      	mvns	r3, r3
 8011b74:	9300      	str	r3, [sp, #0]
 8011b76:	f04f 0800 	mov.w	r8, #0
 8011b7a:	4631      	mov	r1, r6
 8011b7c:	4620      	mov	r0, r4
 8011b7e:	f000 fad7 	bl	8012130 <_Bfree>
 8011b82:	2f00      	cmp	r7, #0
 8011b84:	f43f aea4 	beq.w	80118d0 <_dtoa_r+0x6a0>
 8011b88:	f1b8 0f00 	cmp.w	r8, #0
 8011b8c:	d005      	beq.n	8011b9a <_dtoa_r+0x96a>
 8011b8e:	45b8      	cmp	r8, r7
 8011b90:	d003      	beq.n	8011b9a <_dtoa_r+0x96a>
 8011b92:	4641      	mov	r1, r8
 8011b94:	4620      	mov	r0, r4
 8011b96:	f000 facb 	bl	8012130 <_Bfree>
 8011b9a:	4639      	mov	r1, r7
 8011b9c:	4620      	mov	r0, r4
 8011b9e:	f000 fac7 	bl	8012130 <_Bfree>
 8011ba2:	e695      	b.n	80118d0 <_dtoa_r+0x6a0>
 8011ba4:	2600      	movs	r6, #0
 8011ba6:	4637      	mov	r7, r6
 8011ba8:	e7e1      	b.n	8011b6e <_dtoa_r+0x93e>
 8011baa:	9700      	str	r7, [sp, #0]
 8011bac:	4637      	mov	r7, r6
 8011bae:	e599      	b.n	80116e4 <_dtoa_r+0x4b4>
 8011bb0:	40240000 	.word	0x40240000
 8011bb4:	9b08      	ldr	r3, [sp, #32]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	f000 80ca 	beq.w	8011d50 <_dtoa_r+0xb20>
 8011bbc:	9b03      	ldr	r3, [sp, #12]
 8011bbe:	9302      	str	r3, [sp, #8]
 8011bc0:	2d00      	cmp	r5, #0
 8011bc2:	dd05      	ble.n	8011bd0 <_dtoa_r+0x9a0>
 8011bc4:	4639      	mov	r1, r7
 8011bc6:	462a      	mov	r2, r5
 8011bc8:	4620      	mov	r0, r4
 8011bca:	f000 fc83 	bl	80124d4 <__lshift>
 8011bce:	4607      	mov	r7, r0
 8011bd0:	f1b8 0f00 	cmp.w	r8, #0
 8011bd4:	d05b      	beq.n	8011c8e <_dtoa_r+0xa5e>
 8011bd6:	6879      	ldr	r1, [r7, #4]
 8011bd8:	4620      	mov	r0, r4
 8011bda:	f000 fa69 	bl	80120b0 <_Balloc>
 8011bde:	4605      	mov	r5, r0
 8011be0:	b928      	cbnz	r0, 8011bee <_dtoa_r+0x9be>
 8011be2:	4b87      	ldr	r3, [pc, #540]	; (8011e00 <_dtoa_r+0xbd0>)
 8011be4:	4602      	mov	r2, r0
 8011be6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011bea:	f7ff bb3b 	b.w	8011264 <_dtoa_r+0x34>
 8011bee:	693a      	ldr	r2, [r7, #16]
 8011bf0:	3202      	adds	r2, #2
 8011bf2:	0092      	lsls	r2, r2, #2
 8011bf4:	f107 010c 	add.w	r1, r7, #12
 8011bf8:	300c      	adds	r0, #12
 8011bfa:	f7fe fa82 	bl	8010102 <memcpy>
 8011bfe:	2201      	movs	r2, #1
 8011c00:	4629      	mov	r1, r5
 8011c02:	4620      	mov	r0, r4
 8011c04:	f000 fc66 	bl	80124d4 <__lshift>
 8011c08:	9b01      	ldr	r3, [sp, #4]
 8011c0a:	f103 0901 	add.w	r9, r3, #1
 8011c0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011c12:	4413      	add	r3, r2
 8011c14:	9305      	str	r3, [sp, #20]
 8011c16:	f00a 0301 	and.w	r3, sl, #1
 8011c1a:	46b8      	mov	r8, r7
 8011c1c:	9304      	str	r3, [sp, #16]
 8011c1e:	4607      	mov	r7, r0
 8011c20:	4631      	mov	r1, r6
 8011c22:	ee18 0a10 	vmov	r0, s16
 8011c26:	f7ff fa75 	bl	8011114 <quorem>
 8011c2a:	4641      	mov	r1, r8
 8011c2c:	9002      	str	r0, [sp, #8]
 8011c2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011c32:	ee18 0a10 	vmov	r0, s16
 8011c36:	f000 fcbd 	bl	80125b4 <__mcmp>
 8011c3a:	463a      	mov	r2, r7
 8011c3c:	9003      	str	r0, [sp, #12]
 8011c3e:	4631      	mov	r1, r6
 8011c40:	4620      	mov	r0, r4
 8011c42:	f000 fcd3 	bl	80125ec <__mdiff>
 8011c46:	68c2      	ldr	r2, [r0, #12]
 8011c48:	f109 3bff 	add.w	fp, r9, #4294967295
 8011c4c:	4605      	mov	r5, r0
 8011c4e:	bb02      	cbnz	r2, 8011c92 <_dtoa_r+0xa62>
 8011c50:	4601      	mov	r1, r0
 8011c52:	ee18 0a10 	vmov	r0, s16
 8011c56:	f000 fcad 	bl	80125b4 <__mcmp>
 8011c5a:	4602      	mov	r2, r0
 8011c5c:	4629      	mov	r1, r5
 8011c5e:	4620      	mov	r0, r4
 8011c60:	9207      	str	r2, [sp, #28]
 8011c62:	f000 fa65 	bl	8012130 <_Bfree>
 8011c66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011c6a:	ea43 0102 	orr.w	r1, r3, r2
 8011c6e:	9b04      	ldr	r3, [sp, #16]
 8011c70:	430b      	orrs	r3, r1
 8011c72:	464d      	mov	r5, r9
 8011c74:	d10f      	bne.n	8011c96 <_dtoa_r+0xa66>
 8011c76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011c7a:	d02a      	beq.n	8011cd2 <_dtoa_r+0xaa2>
 8011c7c:	9b03      	ldr	r3, [sp, #12]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	dd02      	ble.n	8011c88 <_dtoa_r+0xa58>
 8011c82:	9b02      	ldr	r3, [sp, #8]
 8011c84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011c88:	f88b a000 	strb.w	sl, [fp]
 8011c8c:	e775      	b.n	8011b7a <_dtoa_r+0x94a>
 8011c8e:	4638      	mov	r0, r7
 8011c90:	e7ba      	b.n	8011c08 <_dtoa_r+0x9d8>
 8011c92:	2201      	movs	r2, #1
 8011c94:	e7e2      	b.n	8011c5c <_dtoa_r+0xa2c>
 8011c96:	9b03      	ldr	r3, [sp, #12]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	db04      	blt.n	8011ca6 <_dtoa_r+0xa76>
 8011c9c:	9906      	ldr	r1, [sp, #24]
 8011c9e:	430b      	orrs	r3, r1
 8011ca0:	9904      	ldr	r1, [sp, #16]
 8011ca2:	430b      	orrs	r3, r1
 8011ca4:	d122      	bne.n	8011cec <_dtoa_r+0xabc>
 8011ca6:	2a00      	cmp	r2, #0
 8011ca8:	ddee      	ble.n	8011c88 <_dtoa_r+0xa58>
 8011caa:	ee18 1a10 	vmov	r1, s16
 8011cae:	2201      	movs	r2, #1
 8011cb0:	4620      	mov	r0, r4
 8011cb2:	f000 fc0f 	bl	80124d4 <__lshift>
 8011cb6:	4631      	mov	r1, r6
 8011cb8:	ee08 0a10 	vmov	s16, r0
 8011cbc:	f000 fc7a 	bl	80125b4 <__mcmp>
 8011cc0:	2800      	cmp	r0, #0
 8011cc2:	dc03      	bgt.n	8011ccc <_dtoa_r+0xa9c>
 8011cc4:	d1e0      	bne.n	8011c88 <_dtoa_r+0xa58>
 8011cc6:	f01a 0f01 	tst.w	sl, #1
 8011cca:	d0dd      	beq.n	8011c88 <_dtoa_r+0xa58>
 8011ccc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011cd0:	d1d7      	bne.n	8011c82 <_dtoa_r+0xa52>
 8011cd2:	2339      	movs	r3, #57	; 0x39
 8011cd4:	f88b 3000 	strb.w	r3, [fp]
 8011cd8:	462b      	mov	r3, r5
 8011cda:	461d      	mov	r5, r3
 8011cdc:	3b01      	subs	r3, #1
 8011cde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011ce2:	2a39      	cmp	r2, #57	; 0x39
 8011ce4:	d071      	beq.n	8011dca <_dtoa_r+0xb9a>
 8011ce6:	3201      	adds	r2, #1
 8011ce8:	701a      	strb	r2, [r3, #0]
 8011cea:	e746      	b.n	8011b7a <_dtoa_r+0x94a>
 8011cec:	2a00      	cmp	r2, #0
 8011cee:	dd07      	ble.n	8011d00 <_dtoa_r+0xad0>
 8011cf0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011cf4:	d0ed      	beq.n	8011cd2 <_dtoa_r+0xaa2>
 8011cf6:	f10a 0301 	add.w	r3, sl, #1
 8011cfa:	f88b 3000 	strb.w	r3, [fp]
 8011cfe:	e73c      	b.n	8011b7a <_dtoa_r+0x94a>
 8011d00:	9b05      	ldr	r3, [sp, #20]
 8011d02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011d06:	4599      	cmp	r9, r3
 8011d08:	d047      	beq.n	8011d9a <_dtoa_r+0xb6a>
 8011d0a:	ee18 1a10 	vmov	r1, s16
 8011d0e:	2300      	movs	r3, #0
 8011d10:	220a      	movs	r2, #10
 8011d12:	4620      	mov	r0, r4
 8011d14:	f000 fa2e 	bl	8012174 <__multadd>
 8011d18:	45b8      	cmp	r8, r7
 8011d1a:	ee08 0a10 	vmov	s16, r0
 8011d1e:	f04f 0300 	mov.w	r3, #0
 8011d22:	f04f 020a 	mov.w	r2, #10
 8011d26:	4641      	mov	r1, r8
 8011d28:	4620      	mov	r0, r4
 8011d2a:	d106      	bne.n	8011d3a <_dtoa_r+0xb0a>
 8011d2c:	f000 fa22 	bl	8012174 <__multadd>
 8011d30:	4680      	mov	r8, r0
 8011d32:	4607      	mov	r7, r0
 8011d34:	f109 0901 	add.w	r9, r9, #1
 8011d38:	e772      	b.n	8011c20 <_dtoa_r+0x9f0>
 8011d3a:	f000 fa1b 	bl	8012174 <__multadd>
 8011d3e:	4639      	mov	r1, r7
 8011d40:	4680      	mov	r8, r0
 8011d42:	2300      	movs	r3, #0
 8011d44:	220a      	movs	r2, #10
 8011d46:	4620      	mov	r0, r4
 8011d48:	f000 fa14 	bl	8012174 <__multadd>
 8011d4c:	4607      	mov	r7, r0
 8011d4e:	e7f1      	b.n	8011d34 <_dtoa_r+0xb04>
 8011d50:	9b03      	ldr	r3, [sp, #12]
 8011d52:	9302      	str	r3, [sp, #8]
 8011d54:	9d01      	ldr	r5, [sp, #4]
 8011d56:	ee18 0a10 	vmov	r0, s16
 8011d5a:	4631      	mov	r1, r6
 8011d5c:	f7ff f9da 	bl	8011114 <quorem>
 8011d60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011d64:	9b01      	ldr	r3, [sp, #4]
 8011d66:	f805 ab01 	strb.w	sl, [r5], #1
 8011d6a:	1aea      	subs	r2, r5, r3
 8011d6c:	9b02      	ldr	r3, [sp, #8]
 8011d6e:	4293      	cmp	r3, r2
 8011d70:	dd09      	ble.n	8011d86 <_dtoa_r+0xb56>
 8011d72:	ee18 1a10 	vmov	r1, s16
 8011d76:	2300      	movs	r3, #0
 8011d78:	220a      	movs	r2, #10
 8011d7a:	4620      	mov	r0, r4
 8011d7c:	f000 f9fa 	bl	8012174 <__multadd>
 8011d80:	ee08 0a10 	vmov	s16, r0
 8011d84:	e7e7      	b.n	8011d56 <_dtoa_r+0xb26>
 8011d86:	9b02      	ldr	r3, [sp, #8]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	bfc8      	it	gt
 8011d8c:	461d      	movgt	r5, r3
 8011d8e:	9b01      	ldr	r3, [sp, #4]
 8011d90:	bfd8      	it	le
 8011d92:	2501      	movle	r5, #1
 8011d94:	441d      	add	r5, r3
 8011d96:	f04f 0800 	mov.w	r8, #0
 8011d9a:	ee18 1a10 	vmov	r1, s16
 8011d9e:	2201      	movs	r2, #1
 8011da0:	4620      	mov	r0, r4
 8011da2:	f000 fb97 	bl	80124d4 <__lshift>
 8011da6:	4631      	mov	r1, r6
 8011da8:	ee08 0a10 	vmov	s16, r0
 8011dac:	f000 fc02 	bl	80125b4 <__mcmp>
 8011db0:	2800      	cmp	r0, #0
 8011db2:	dc91      	bgt.n	8011cd8 <_dtoa_r+0xaa8>
 8011db4:	d102      	bne.n	8011dbc <_dtoa_r+0xb8c>
 8011db6:	f01a 0f01 	tst.w	sl, #1
 8011dba:	d18d      	bne.n	8011cd8 <_dtoa_r+0xaa8>
 8011dbc:	462b      	mov	r3, r5
 8011dbe:	461d      	mov	r5, r3
 8011dc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011dc4:	2a30      	cmp	r2, #48	; 0x30
 8011dc6:	d0fa      	beq.n	8011dbe <_dtoa_r+0xb8e>
 8011dc8:	e6d7      	b.n	8011b7a <_dtoa_r+0x94a>
 8011dca:	9a01      	ldr	r2, [sp, #4]
 8011dcc:	429a      	cmp	r2, r3
 8011dce:	d184      	bne.n	8011cda <_dtoa_r+0xaaa>
 8011dd0:	9b00      	ldr	r3, [sp, #0]
 8011dd2:	3301      	adds	r3, #1
 8011dd4:	9300      	str	r3, [sp, #0]
 8011dd6:	2331      	movs	r3, #49	; 0x31
 8011dd8:	7013      	strb	r3, [r2, #0]
 8011dda:	e6ce      	b.n	8011b7a <_dtoa_r+0x94a>
 8011ddc:	4b09      	ldr	r3, [pc, #36]	; (8011e04 <_dtoa_r+0xbd4>)
 8011dde:	f7ff ba95 	b.w	801130c <_dtoa_r+0xdc>
 8011de2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	f47f aa6e 	bne.w	80112c6 <_dtoa_r+0x96>
 8011dea:	4b07      	ldr	r3, [pc, #28]	; (8011e08 <_dtoa_r+0xbd8>)
 8011dec:	f7ff ba8e 	b.w	801130c <_dtoa_r+0xdc>
 8011df0:	9b02      	ldr	r3, [sp, #8]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	dcae      	bgt.n	8011d54 <_dtoa_r+0xb24>
 8011df6:	9b06      	ldr	r3, [sp, #24]
 8011df8:	2b02      	cmp	r3, #2
 8011dfa:	f73f aea8 	bgt.w	8011b4e <_dtoa_r+0x91e>
 8011dfe:	e7a9      	b.n	8011d54 <_dtoa_r+0xb24>
 8011e00:	08014a14 	.word	0x08014a14
 8011e04:	08014870 	.word	0x08014870
 8011e08:	08014995 	.word	0x08014995

08011e0c <__sflush_r>:
 8011e0c:	898a      	ldrh	r2, [r1, #12]
 8011e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e12:	4605      	mov	r5, r0
 8011e14:	0710      	lsls	r0, r2, #28
 8011e16:	460c      	mov	r4, r1
 8011e18:	d458      	bmi.n	8011ecc <__sflush_r+0xc0>
 8011e1a:	684b      	ldr	r3, [r1, #4]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	dc05      	bgt.n	8011e2c <__sflush_r+0x20>
 8011e20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	dc02      	bgt.n	8011e2c <__sflush_r+0x20>
 8011e26:	2000      	movs	r0, #0
 8011e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e2e:	2e00      	cmp	r6, #0
 8011e30:	d0f9      	beq.n	8011e26 <__sflush_r+0x1a>
 8011e32:	2300      	movs	r3, #0
 8011e34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011e38:	682f      	ldr	r7, [r5, #0]
 8011e3a:	602b      	str	r3, [r5, #0]
 8011e3c:	d032      	beq.n	8011ea4 <__sflush_r+0x98>
 8011e3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011e40:	89a3      	ldrh	r3, [r4, #12]
 8011e42:	075a      	lsls	r2, r3, #29
 8011e44:	d505      	bpl.n	8011e52 <__sflush_r+0x46>
 8011e46:	6863      	ldr	r3, [r4, #4]
 8011e48:	1ac0      	subs	r0, r0, r3
 8011e4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011e4c:	b10b      	cbz	r3, 8011e52 <__sflush_r+0x46>
 8011e4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011e50:	1ac0      	subs	r0, r0, r3
 8011e52:	2300      	movs	r3, #0
 8011e54:	4602      	mov	r2, r0
 8011e56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e58:	6a21      	ldr	r1, [r4, #32]
 8011e5a:	4628      	mov	r0, r5
 8011e5c:	47b0      	blx	r6
 8011e5e:	1c43      	adds	r3, r0, #1
 8011e60:	89a3      	ldrh	r3, [r4, #12]
 8011e62:	d106      	bne.n	8011e72 <__sflush_r+0x66>
 8011e64:	6829      	ldr	r1, [r5, #0]
 8011e66:	291d      	cmp	r1, #29
 8011e68:	d82c      	bhi.n	8011ec4 <__sflush_r+0xb8>
 8011e6a:	4a2a      	ldr	r2, [pc, #168]	; (8011f14 <__sflush_r+0x108>)
 8011e6c:	40ca      	lsrs	r2, r1
 8011e6e:	07d6      	lsls	r6, r2, #31
 8011e70:	d528      	bpl.n	8011ec4 <__sflush_r+0xb8>
 8011e72:	2200      	movs	r2, #0
 8011e74:	6062      	str	r2, [r4, #4]
 8011e76:	04d9      	lsls	r1, r3, #19
 8011e78:	6922      	ldr	r2, [r4, #16]
 8011e7a:	6022      	str	r2, [r4, #0]
 8011e7c:	d504      	bpl.n	8011e88 <__sflush_r+0x7c>
 8011e7e:	1c42      	adds	r2, r0, #1
 8011e80:	d101      	bne.n	8011e86 <__sflush_r+0x7a>
 8011e82:	682b      	ldr	r3, [r5, #0]
 8011e84:	b903      	cbnz	r3, 8011e88 <__sflush_r+0x7c>
 8011e86:	6560      	str	r0, [r4, #84]	; 0x54
 8011e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e8a:	602f      	str	r7, [r5, #0]
 8011e8c:	2900      	cmp	r1, #0
 8011e8e:	d0ca      	beq.n	8011e26 <__sflush_r+0x1a>
 8011e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e94:	4299      	cmp	r1, r3
 8011e96:	d002      	beq.n	8011e9e <__sflush_r+0x92>
 8011e98:	4628      	mov	r0, r5
 8011e9a:	f000 fca3 	bl	80127e4 <_free_r>
 8011e9e:	2000      	movs	r0, #0
 8011ea0:	6360      	str	r0, [r4, #52]	; 0x34
 8011ea2:	e7c1      	b.n	8011e28 <__sflush_r+0x1c>
 8011ea4:	6a21      	ldr	r1, [r4, #32]
 8011ea6:	2301      	movs	r3, #1
 8011ea8:	4628      	mov	r0, r5
 8011eaa:	47b0      	blx	r6
 8011eac:	1c41      	adds	r1, r0, #1
 8011eae:	d1c7      	bne.n	8011e40 <__sflush_r+0x34>
 8011eb0:	682b      	ldr	r3, [r5, #0]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d0c4      	beq.n	8011e40 <__sflush_r+0x34>
 8011eb6:	2b1d      	cmp	r3, #29
 8011eb8:	d001      	beq.n	8011ebe <__sflush_r+0xb2>
 8011eba:	2b16      	cmp	r3, #22
 8011ebc:	d101      	bne.n	8011ec2 <__sflush_r+0xb6>
 8011ebe:	602f      	str	r7, [r5, #0]
 8011ec0:	e7b1      	b.n	8011e26 <__sflush_r+0x1a>
 8011ec2:	89a3      	ldrh	r3, [r4, #12]
 8011ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ec8:	81a3      	strh	r3, [r4, #12]
 8011eca:	e7ad      	b.n	8011e28 <__sflush_r+0x1c>
 8011ecc:	690f      	ldr	r7, [r1, #16]
 8011ece:	2f00      	cmp	r7, #0
 8011ed0:	d0a9      	beq.n	8011e26 <__sflush_r+0x1a>
 8011ed2:	0793      	lsls	r3, r2, #30
 8011ed4:	680e      	ldr	r6, [r1, #0]
 8011ed6:	bf08      	it	eq
 8011ed8:	694b      	ldreq	r3, [r1, #20]
 8011eda:	600f      	str	r7, [r1, #0]
 8011edc:	bf18      	it	ne
 8011ede:	2300      	movne	r3, #0
 8011ee0:	eba6 0807 	sub.w	r8, r6, r7
 8011ee4:	608b      	str	r3, [r1, #8]
 8011ee6:	f1b8 0f00 	cmp.w	r8, #0
 8011eea:	dd9c      	ble.n	8011e26 <__sflush_r+0x1a>
 8011eec:	6a21      	ldr	r1, [r4, #32]
 8011eee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011ef0:	4643      	mov	r3, r8
 8011ef2:	463a      	mov	r2, r7
 8011ef4:	4628      	mov	r0, r5
 8011ef6:	47b0      	blx	r6
 8011ef8:	2800      	cmp	r0, #0
 8011efa:	dc06      	bgt.n	8011f0a <__sflush_r+0xfe>
 8011efc:	89a3      	ldrh	r3, [r4, #12]
 8011efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f02:	81a3      	strh	r3, [r4, #12]
 8011f04:	f04f 30ff 	mov.w	r0, #4294967295
 8011f08:	e78e      	b.n	8011e28 <__sflush_r+0x1c>
 8011f0a:	4407      	add	r7, r0
 8011f0c:	eba8 0800 	sub.w	r8, r8, r0
 8011f10:	e7e9      	b.n	8011ee6 <__sflush_r+0xda>
 8011f12:	bf00      	nop
 8011f14:	20400001 	.word	0x20400001

08011f18 <_fflush_r>:
 8011f18:	b538      	push	{r3, r4, r5, lr}
 8011f1a:	690b      	ldr	r3, [r1, #16]
 8011f1c:	4605      	mov	r5, r0
 8011f1e:	460c      	mov	r4, r1
 8011f20:	b913      	cbnz	r3, 8011f28 <_fflush_r+0x10>
 8011f22:	2500      	movs	r5, #0
 8011f24:	4628      	mov	r0, r5
 8011f26:	bd38      	pop	{r3, r4, r5, pc}
 8011f28:	b118      	cbz	r0, 8011f32 <_fflush_r+0x1a>
 8011f2a:	6983      	ldr	r3, [r0, #24]
 8011f2c:	b90b      	cbnz	r3, 8011f32 <_fflush_r+0x1a>
 8011f2e:	f7fe f823 	bl	800ff78 <__sinit>
 8011f32:	4b14      	ldr	r3, [pc, #80]	; (8011f84 <_fflush_r+0x6c>)
 8011f34:	429c      	cmp	r4, r3
 8011f36:	d11b      	bne.n	8011f70 <_fflush_r+0x58>
 8011f38:	686c      	ldr	r4, [r5, #4]
 8011f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d0ef      	beq.n	8011f22 <_fflush_r+0xa>
 8011f42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011f44:	07d0      	lsls	r0, r2, #31
 8011f46:	d404      	bmi.n	8011f52 <_fflush_r+0x3a>
 8011f48:	0599      	lsls	r1, r3, #22
 8011f4a:	d402      	bmi.n	8011f52 <_fflush_r+0x3a>
 8011f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f4e:	f7fe f8d6 	bl	80100fe <__retarget_lock_acquire_recursive>
 8011f52:	4628      	mov	r0, r5
 8011f54:	4621      	mov	r1, r4
 8011f56:	f7ff ff59 	bl	8011e0c <__sflush_r>
 8011f5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011f5c:	07da      	lsls	r2, r3, #31
 8011f5e:	4605      	mov	r5, r0
 8011f60:	d4e0      	bmi.n	8011f24 <_fflush_r+0xc>
 8011f62:	89a3      	ldrh	r3, [r4, #12]
 8011f64:	059b      	lsls	r3, r3, #22
 8011f66:	d4dd      	bmi.n	8011f24 <_fflush_r+0xc>
 8011f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f6a:	f7fe f8c9 	bl	8010100 <__retarget_lock_release_recursive>
 8011f6e:	e7d9      	b.n	8011f24 <_fflush_r+0xc>
 8011f70:	4b05      	ldr	r3, [pc, #20]	; (8011f88 <_fflush_r+0x70>)
 8011f72:	429c      	cmp	r4, r3
 8011f74:	d101      	bne.n	8011f7a <_fflush_r+0x62>
 8011f76:	68ac      	ldr	r4, [r5, #8]
 8011f78:	e7df      	b.n	8011f3a <_fflush_r+0x22>
 8011f7a:	4b04      	ldr	r3, [pc, #16]	; (8011f8c <_fflush_r+0x74>)
 8011f7c:	429c      	cmp	r4, r3
 8011f7e:	bf08      	it	eq
 8011f80:	68ec      	ldreq	r4, [r5, #12]
 8011f82:	e7da      	b.n	8011f3a <_fflush_r+0x22>
 8011f84:	0801481c 	.word	0x0801481c
 8011f88:	0801483c 	.word	0x0801483c
 8011f8c:	080147fc 	.word	0x080147fc

08011f90 <_localeconv_r>:
 8011f90:	4800      	ldr	r0, [pc, #0]	; (8011f94 <_localeconv_r+0x4>)
 8011f92:	4770      	bx	lr
 8011f94:	20000268 	.word	0x20000268

08011f98 <_lseek_r>:
 8011f98:	b538      	push	{r3, r4, r5, lr}
 8011f9a:	4d07      	ldr	r5, [pc, #28]	; (8011fb8 <_lseek_r+0x20>)
 8011f9c:	4604      	mov	r4, r0
 8011f9e:	4608      	mov	r0, r1
 8011fa0:	4611      	mov	r1, r2
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	602a      	str	r2, [r5, #0]
 8011fa6:	461a      	mov	r2, r3
 8011fa8:	f7f2 fb20 	bl	80045ec <_lseek>
 8011fac:	1c43      	adds	r3, r0, #1
 8011fae:	d102      	bne.n	8011fb6 <_lseek_r+0x1e>
 8011fb0:	682b      	ldr	r3, [r5, #0]
 8011fb2:	b103      	cbz	r3, 8011fb6 <_lseek_r+0x1e>
 8011fb4:	6023      	str	r3, [r4, #0]
 8011fb6:	bd38      	pop	{r3, r4, r5, pc}
 8011fb8:	20005e90 	.word	0x20005e90

08011fbc <__swhatbuf_r>:
 8011fbc:	b570      	push	{r4, r5, r6, lr}
 8011fbe:	460e      	mov	r6, r1
 8011fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fc4:	2900      	cmp	r1, #0
 8011fc6:	b096      	sub	sp, #88	; 0x58
 8011fc8:	4614      	mov	r4, r2
 8011fca:	461d      	mov	r5, r3
 8011fcc:	da08      	bge.n	8011fe0 <__swhatbuf_r+0x24>
 8011fce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	602a      	str	r2, [r5, #0]
 8011fd6:	061a      	lsls	r2, r3, #24
 8011fd8:	d410      	bmi.n	8011ffc <__swhatbuf_r+0x40>
 8011fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011fde:	e00e      	b.n	8011ffe <__swhatbuf_r+0x42>
 8011fe0:	466a      	mov	r2, sp
 8011fe2:	f000 ff43 	bl	8012e6c <_fstat_r>
 8011fe6:	2800      	cmp	r0, #0
 8011fe8:	dbf1      	blt.n	8011fce <__swhatbuf_r+0x12>
 8011fea:	9a01      	ldr	r2, [sp, #4]
 8011fec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011ff0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011ff4:	425a      	negs	r2, r3
 8011ff6:	415a      	adcs	r2, r3
 8011ff8:	602a      	str	r2, [r5, #0]
 8011ffa:	e7ee      	b.n	8011fda <__swhatbuf_r+0x1e>
 8011ffc:	2340      	movs	r3, #64	; 0x40
 8011ffe:	2000      	movs	r0, #0
 8012000:	6023      	str	r3, [r4, #0]
 8012002:	b016      	add	sp, #88	; 0x58
 8012004:	bd70      	pop	{r4, r5, r6, pc}
	...

08012008 <__smakebuf_r>:
 8012008:	898b      	ldrh	r3, [r1, #12]
 801200a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801200c:	079d      	lsls	r5, r3, #30
 801200e:	4606      	mov	r6, r0
 8012010:	460c      	mov	r4, r1
 8012012:	d507      	bpl.n	8012024 <__smakebuf_r+0x1c>
 8012014:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012018:	6023      	str	r3, [r4, #0]
 801201a:	6123      	str	r3, [r4, #16]
 801201c:	2301      	movs	r3, #1
 801201e:	6163      	str	r3, [r4, #20]
 8012020:	b002      	add	sp, #8
 8012022:	bd70      	pop	{r4, r5, r6, pc}
 8012024:	ab01      	add	r3, sp, #4
 8012026:	466a      	mov	r2, sp
 8012028:	f7ff ffc8 	bl	8011fbc <__swhatbuf_r>
 801202c:	9900      	ldr	r1, [sp, #0]
 801202e:	4605      	mov	r5, r0
 8012030:	4630      	mov	r0, r6
 8012032:	f7fe f8b7 	bl	80101a4 <_malloc_r>
 8012036:	b948      	cbnz	r0, 801204c <__smakebuf_r+0x44>
 8012038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801203c:	059a      	lsls	r2, r3, #22
 801203e:	d4ef      	bmi.n	8012020 <__smakebuf_r+0x18>
 8012040:	f023 0303 	bic.w	r3, r3, #3
 8012044:	f043 0302 	orr.w	r3, r3, #2
 8012048:	81a3      	strh	r3, [r4, #12]
 801204a:	e7e3      	b.n	8012014 <__smakebuf_r+0xc>
 801204c:	4b0d      	ldr	r3, [pc, #52]	; (8012084 <__smakebuf_r+0x7c>)
 801204e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012050:	89a3      	ldrh	r3, [r4, #12]
 8012052:	6020      	str	r0, [r4, #0]
 8012054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012058:	81a3      	strh	r3, [r4, #12]
 801205a:	9b00      	ldr	r3, [sp, #0]
 801205c:	6163      	str	r3, [r4, #20]
 801205e:	9b01      	ldr	r3, [sp, #4]
 8012060:	6120      	str	r0, [r4, #16]
 8012062:	b15b      	cbz	r3, 801207c <__smakebuf_r+0x74>
 8012064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012068:	4630      	mov	r0, r6
 801206a:	f000 ff11 	bl	8012e90 <_isatty_r>
 801206e:	b128      	cbz	r0, 801207c <__smakebuf_r+0x74>
 8012070:	89a3      	ldrh	r3, [r4, #12]
 8012072:	f023 0303 	bic.w	r3, r3, #3
 8012076:	f043 0301 	orr.w	r3, r3, #1
 801207a:	81a3      	strh	r3, [r4, #12]
 801207c:	89a0      	ldrh	r0, [r4, #12]
 801207e:	4305      	orrs	r5, r0
 8012080:	81a5      	strh	r5, [r4, #12]
 8012082:	e7cd      	b.n	8012020 <__smakebuf_r+0x18>
 8012084:	0800ff11 	.word	0x0800ff11

08012088 <malloc>:
 8012088:	4b02      	ldr	r3, [pc, #8]	; (8012094 <malloc+0xc>)
 801208a:	4601      	mov	r1, r0
 801208c:	6818      	ldr	r0, [r3, #0]
 801208e:	f7fe b889 	b.w	80101a4 <_malloc_r>
 8012092:	bf00      	nop
 8012094:	20000114 	.word	0x20000114

08012098 <__malloc_lock>:
 8012098:	4801      	ldr	r0, [pc, #4]	; (80120a0 <__malloc_lock+0x8>)
 801209a:	f7fe b830 	b.w	80100fe <__retarget_lock_acquire_recursive>
 801209e:	bf00      	nop
 80120a0:	20005e84 	.word	0x20005e84

080120a4 <__malloc_unlock>:
 80120a4:	4801      	ldr	r0, [pc, #4]	; (80120ac <__malloc_unlock+0x8>)
 80120a6:	f7fe b82b 	b.w	8010100 <__retarget_lock_release_recursive>
 80120aa:	bf00      	nop
 80120ac:	20005e84 	.word	0x20005e84

080120b0 <_Balloc>:
 80120b0:	b570      	push	{r4, r5, r6, lr}
 80120b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80120b4:	4604      	mov	r4, r0
 80120b6:	460d      	mov	r5, r1
 80120b8:	b976      	cbnz	r6, 80120d8 <_Balloc+0x28>
 80120ba:	2010      	movs	r0, #16
 80120bc:	f7ff ffe4 	bl	8012088 <malloc>
 80120c0:	4602      	mov	r2, r0
 80120c2:	6260      	str	r0, [r4, #36]	; 0x24
 80120c4:	b920      	cbnz	r0, 80120d0 <_Balloc+0x20>
 80120c6:	4b18      	ldr	r3, [pc, #96]	; (8012128 <_Balloc+0x78>)
 80120c8:	4818      	ldr	r0, [pc, #96]	; (801212c <_Balloc+0x7c>)
 80120ca:	2166      	movs	r1, #102	; 0x66
 80120cc:	f000 fe9e 	bl	8012e0c <__assert_func>
 80120d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80120d4:	6006      	str	r6, [r0, #0]
 80120d6:	60c6      	str	r6, [r0, #12]
 80120d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80120da:	68f3      	ldr	r3, [r6, #12]
 80120dc:	b183      	cbz	r3, 8012100 <_Balloc+0x50>
 80120de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80120e0:	68db      	ldr	r3, [r3, #12]
 80120e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80120e6:	b9b8      	cbnz	r0, 8012118 <_Balloc+0x68>
 80120e8:	2101      	movs	r1, #1
 80120ea:	fa01 f605 	lsl.w	r6, r1, r5
 80120ee:	1d72      	adds	r2, r6, #5
 80120f0:	0092      	lsls	r2, r2, #2
 80120f2:	4620      	mov	r0, r4
 80120f4:	f000 fb60 	bl	80127b8 <_calloc_r>
 80120f8:	b160      	cbz	r0, 8012114 <_Balloc+0x64>
 80120fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80120fe:	e00e      	b.n	801211e <_Balloc+0x6e>
 8012100:	2221      	movs	r2, #33	; 0x21
 8012102:	2104      	movs	r1, #4
 8012104:	4620      	mov	r0, r4
 8012106:	f000 fb57 	bl	80127b8 <_calloc_r>
 801210a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801210c:	60f0      	str	r0, [r6, #12]
 801210e:	68db      	ldr	r3, [r3, #12]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d1e4      	bne.n	80120de <_Balloc+0x2e>
 8012114:	2000      	movs	r0, #0
 8012116:	bd70      	pop	{r4, r5, r6, pc}
 8012118:	6802      	ldr	r2, [r0, #0]
 801211a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801211e:	2300      	movs	r3, #0
 8012120:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012124:	e7f7      	b.n	8012116 <_Balloc+0x66>
 8012126:	bf00      	nop
 8012128:	080149a2 	.word	0x080149a2
 801212c:	08014a25 	.word	0x08014a25

08012130 <_Bfree>:
 8012130:	b570      	push	{r4, r5, r6, lr}
 8012132:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012134:	4605      	mov	r5, r0
 8012136:	460c      	mov	r4, r1
 8012138:	b976      	cbnz	r6, 8012158 <_Bfree+0x28>
 801213a:	2010      	movs	r0, #16
 801213c:	f7ff ffa4 	bl	8012088 <malloc>
 8012140:	4602      	mov	r2, r0
 8012142:	6268      	str	r0, [r5, #36]	; 0x24
 8012144:	b920      	cbnz	r0, 8012150 <_Bfree+0x20>
 8012146:	4b09      	ldr	r3, [pc, #36]	; (801216c <_Bfree+0x3c>)
 8012148:	4809      	ldr	r0, [pc, #36]	; (8012170 <_Bfree+0x40>)
 801214a:	218a      	movs	r1, #138	; 0x8a
 801214c:	f000 fe5e 	bl	8012e0c <__assert_func>
 8012150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012154:	6006      	str	r6, [r0, #0]
 8012156:	60c6      	str	r6, [r0, #12]
 8012158:	b13c      	cbz	r4, 801216a <_Bfree+0x3a>
 801215a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801215c:	6862      	ldr	r2, [r4, #4]
 801215e:	68db      	ldr	r3, [r3, #12]
 8012160:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012164:	6021      	str	r1, [r4, #0]
 8012166:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801216a:	bd70      	pop	{r4, r5, r6, pc}
 801216c:	080149a2 	.word	0x080149a2
 8012170:	08014a25 	.word	0x08014a25

08012174 <__multadd>:
 8012174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012178:	690d      	ldr	r5, [r1, #16]
 801217a:	4607      	mov	r7, r0
 801217c:	460c      	mov	r4, r1
 801217e:	461e      	mov	r6, r3
 8012180:	f101 0c14 	add.w	ip, r1, #20
 8012184:	2000      	movs	r0, #0
 8012186:	f8dc 3000 	ldr.w	r3, [ip]
 801218a:	b299      	uxth	r1, r3
 801218c:	fb02 6101 	mla	r1, r2, r1, r6
 8012190:	0c1e      	lsrs	r6, r3, #16
 8012192:	0c0b      	lsrs	r3, r1, #16
 8012194:	fb02 3306 	mla	r3, r2, r6, r3
 8012198:	b289      	uxth	r1, r1
 801219a:	3001      	adds	r0, #1
 801219c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80121a0:	4285      	cmp	r5, r0
 80121a2:	f84c 1b04 	str.w	r1, [ip], #4
 80121a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80121aa:	dcec      	bgt.n	8012186 <__multadd+0x12>
 80121ac:	b30e      	cbz	r6, 80121f2 <__multadd+0x7e>
 80121ae:	68a3      	ldr	r3, [r4, #8]
 80121b0:	42ab      	cmp	r3, r5
 80121b2:	dc19      	bgt.n	80121e8 <__multadd+0x74>
 80121b4:	6861      	ldr	r1, [r4, #4]
 80121b6:	4638      	mov	r0, r7
 80121b8:	3101      	adds	r1, #1
 80121ba:	f7ff ff79 	bl	80120b0 <_Balloc>
 80121be:	4680      	mov	r8, r0
 80121c0:	b928      	cbnz	r0, 80121ce <__multadd+0x5a>
 80121c2:	4602      	mov	r2, r0
 80121c4:	4b0c      	ldr	r3, [pc, #48]	; (80121f8 <__multadd+0x84>)
 80121c6:	480d      	ldr	r0, [pc, #52]	; (80121fc <__multadd+0x88>)
 80121c8:	21b5      	movs	r1, #181	; 0xb5
 80121ca:	f000 fe1f 	bl	8012e0c <__assert_func>
 80121ce:	6922      	ldr	r2, [r4, #16]
 80121d0:	3202      	adds	r2, #2
 80121d2:	f104 010c 	add.w	r1, r4, #12
 80121d6:	0092      	lsls	r2, r2, #2
 80121d8:	300c      	adds	r0, #12
 80121da:	f7fd ff92 	bl	8010102 <memcpy>
 80121de:	4621      	mov	r1, r4
 80121e0:	4638      	mov	r0, r7
 80121e2:	f7ff ffa5 	bl	8012130 <_Bfree>
 80121e6:	4644      	mov	r4, r8
 80121e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80121ec:	3501      	adds	r5, #1
 80121ee:	615e      	str	r6, [r3, #20]
 80121f0:	6125      	str	r5, [r4, #16]
 80121f2:	4620      	mov	r0, r4
 80121f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121f8:	08014a14 	.word	0x08014a14
 80121fc:	08014a25 	.word	0x08014a25

08012200 <__hi0bits>:
 8012200:	0c03      	lsrs	r3, r0, #16
 8012202:	041b      	lsls	r3, r3, #16
 8012204:	b9d3      	cbnz	r3, 801223c <__hi0bits+0x3c>
 8012206:	0400      	lsls	r0, r0, #16
 8012208:	2310      	movs	r3, #16
 801220a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801220e:	bf04      	itt	eq
 8012210:	0200      	lsleq	r0, r0, #8
 8012212:	3308      	addeq	r3, #8
 8012214:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012218:	bf04      	itt	eq
 801221a:	0100      	lsleq	r0, r0, #4
 801221c:	3304      	addeq	r3, #4
 801221e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012222:	bf04      	itt	eq
 8012224:	0080      	lsleq	r0, r0, #2
 8012226:	3302      	addeq	r3, #2
 8012228:	2800      	cmp	r0, #0
 801222a:	db05      	blt.n	8012238 <__hi0bits+0x38>
 801222c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012230:	f103 0301 	add.w	r3, r3, #1
 8012234:	bf08      	it	eq
 8012236:	2320      	moveq	r3, #32
 8012238:	4618      	mov	r0, r3
 801223a:	4770      	bx	lr
 801223c:	2300      	movs	r3, #0
 801223e:	e7e4      	b.n	801220a <__hi0bits+0xa>

08012240 <__lo0bits>:
 8012240:	6803      	ldr	r3, [r0, #0]
 8012242:	f013 0207 	ands.w	r2, r3, #7
 8012246:	4601      	mov	r1, r0
 8012248:	d00b      	beq.n	8012262 <__lo0bits+0x22>
 801224a:	07da      	lsls	r2, r3, #31
 801224c:	d423      	bmi.n	8012296 <__lo0bits+0x56>
 801224e:	0798      	lsls	r0, r3, #30
 8012250:	bf49      	itett	mi
 8012252:	085b      	lsrmi	r3, r3, #1
 8012254:	089b      	lsrpl	r3, r3, #2
 8012256:	2001      	movmi	r0, #1
 8012258:	600b      	strmi	r3, [r1, #0]
 801225a:	bf5c      	itt	pl
 801225c:	600b      	strpl	r3, [r1, #0]
 801225e:	2002      	movpl	r0, #2
 8012260:	4770      	bx	lr
 8012262:	b298      	uxth	r0, r3
 8012264:	b9a8      	cbnz	r0, 8012292 <__lo0bits+0x52>
 8012266:	0c1b      	lsrs	r3, r3, #16
 8012268:	2010      	movs	r0, #16
 801226a:	b2da      	uxtb	r2, r3
 801226c:	b90a      	cbnz	r2, 8012272 <__lo0bits+0x32>
 801226e:	3008      	adds	r0, #8
 8012270:	0a1b      	lsrs	r3, r3, #8
 8012272:	071a      	lsls	r2, r3, #28
 8012274:	bf04      	itt	eq
 8012276:	091b      	lsreq	r3, r3, #4
 8012278:	3004      	addeq	r0, #4
 801227a:	079a      	lsls	r2, r3, #30
 801227c:	bf04      	itt	eq
 801227e:	089b      	lsreq	r3, r3, #2
 8012280:	3002      	addeq	r0, #2
 8012282:	07da      	lsls	r2, r3, #31
 8012284:	d403      	bmi.n	801228e <__lo0bits+0x4e>
 8012286:	085b      	lsrs	r3, r3, #1
 8012288:	f100 0001 	add.w	r0, r0, #1
 801228c:	d005      	beq.n	801229a <__lo0bits+0x5a>
 801228e:	600b      	str	r3, [r1, #0]
 8012290:	4770      	bx	lr
 8012292:	4610      	mov	r0, r2
 8012294:	e7e9      	b.n	801226a <__lo0bits+0x2a>
 8012296:	2000      	movs	r0, #0
 8012298:	4770      	bx	lr
 801229a:	2020      	movs	r0, #32
 801229c:	4770      	bx	lr
	...

080122a0 <__i2b>:
 80122a0:	b510      	push	{r4, lr}
 80122a2:	460c      	mov	r4, r1
 80122a4:	2101      	movs	r1, #1
 80122a6:	f7ff ff03 	bl	80120b0 <_Balloc>
 80122aa:	4602      	mov	r2, r0
 80122ac:	b928      	cbnz	r0, 80122ba <__i2b+0x1a>
 80122ae:	4b05      	ldr	r3, [pc, #20]	; (80122c4 <__i2b+0x24>)
 80122b0:	4805      	ldr	r0, [pc, #20]	; (80122c8 <__i2b+0x28>)
 80122b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80122b6:	f000 fda9 	bl	8012e0c <__assert_func>
 80122ba:	2301      	movs	r3, #1
 80122bc:	6144      	str	r4, [r0, #20]
 80122be:	6103      	str	r3, [r0, #16]
 80122c0:	bd10      	pop	{r4, pc}
 80122c2:	bf00      	nop
 80122c4:	08014a14 	.word	0x08014a14
 80122c8:	08014a25 	.word	0x08014a25

080122cc <__multiply>:
 80122cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122d0:	4691      	mov	r9, r2
 80122d2:	690a      	ldr	r2, [r1, #16]
 80122d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80122d8:	429a      	cmp	r2, r3
 80122da:	bfb8      	it	lt
 80122dc:	460b      	movlt	r3, r1
 80122de:	460c      	mov	r4, r1
 80122e0:	bfbc      	itt	lt
 80122e2:	464c      	movlt	r4, r9
 80122e4:	4699      	movlt	r9, r3
 80122e6:	6927      	ldr	r7, [r4, #16]
 80122e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80122ec:	68a3      	ldr	r3, [r4, #8]
 80122ee:	6861      	ldr	r1, [r4, #4]
 80122f0:	eb07 060a 	add.w	r6, r7, sl
 80122f4:	42b3      	cmp	r3, r6
 80122f6:	b085      	sub	sp, #20
 80122f8:	bfb8      	it	lt
 80122fa:	3101      	addlt	r1, #1
 80122fc:	f7ff fed8 	bl	80120b0 <_Balloc>
 8012300:	b930      	cbnz	r0, 8012310 <__multiply+0x44>
 8012302:	4602      	mov	r2, r0
 8012304:	4b44      	ldr	r3, [pc, #272]	; (8012418 <__multiply+0x14c>)
 8012306:	4845      	ldr	r0, [pc, #276]	; (801241c <__multiply+0x150>)
 8012308:	f240 115d 	movw	r1, #349	; 0x15d
 801230c:	f000 fd7e 	bl	8012e0c <__assert_func>
 8012310:	f100 0514 	add.w	r5, r0, #20
 8012314:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012318:	462b      	mov	r3, r5
 801231a:	2200      	movs	r2, #0
 801231c:	4543      	cmp	r3, r8
 801231e:	d321      	bcc.n	8012364 <__multiply+0x98>
 8012320:	f104 0314 	add.w	r3, r4, #20
 8012324:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012328:	f109 0314 	add.w	r3, r9, #20
 801232c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012330:	9202      	str	r2, [sp, #8]
 8012332:	1b3a      	subs	r2, r7, r4
 8012334:	3a15      	subs	r2, #21
 8012336:	f022 0203 	bic.w	r2, r2, #3
 801233a:	3204      	adds	r2, #4
 801233c:	f104 0115 	add.w	r1, r4, #21
 8012340:	428f      	cmp	r7, r1
 8012342:	bf38      	it	cc
 8012344:	2204      	movcc	r2, #4
 8012346:	9201      	str	r2, [sp, #4]
 8012348:	9a02      	ldr	r2, [sp, #8]
 801234a:	9303      	str	r3, [sp, #12]
 801234c:	429a      	cmp	r2, r3
 801234e:	d80c      	bhi.n	801236a <__multiply+0x9e>
 8012350:	2e00      	cmp	r6, #0
 8012352:	dd03      	ble.n	801235c <__multiply+0x90>
 8012354:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012358:	2b00      	cmp	r3, #0
 801235a:	d05a      	beq.n	8012412 <__multiply+0x146>
 801235c:	6106      	str	r6, [r0, #16]
 801235e:	b005      	add	sp, #20
 8012360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012364:	f843 2b04 	str.w	r2, [r3], #4
 8012368:	e7d8      	b.n	801231c <__multiply+0x50>
 801236a:	f8b3 a000 	ldrh.w	sl, [r3]
 801236e:	f1ba 0f00 	cmp.w	sl, #0
 8012372:	d024      	beq.n	80123be <__multiply+0xf2>
 8012374:	f104 0e14 	add.w	lr, r4, #20
 8012378:	46a9      	mov	r9, r5
 801237a:	f04f 0c00 	mov.w	ip, #0
 801237e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012382:	f8d9 1000 	ldr.w	r1, [r9]
 8012386:	fa1f fb82 	uxth.w	fp, r2
 801238a:	b289      	uxth	r1, r1
 801238c:	fb0a 110b 	mla	r1, sl, fp, r1
 8012390:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012394:	f8d9 2000 	ldr.w	r2, [r9]
 8012398:	4461      	add	r1, ip
 801239a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801239e:	fb0a c20b 	mla	r2, sl, fp, ip
 80123a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80123a6:	b289      	uxth	r1, r1
 80123a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80123ac:	4577      	cmp	r7, lr
 80123ae:	f849 1b04 	str.w	r1, [r9], #4
 80123b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80123b6:	d8e2      	bhi.n	801237e <__multiply+0xb2>
 80123b8:	9a01      	ldr	r2, [sp, #4]
 80123ba:	f845 c002 	str.w	ip, [r5, r2]
 80123be:	9a03      	ldr	r2, [sp, #12]
 80123c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80123c4:	3304      	adds	r3, #4
 80123c6:	f1b9 0f00 	cmp.w	r9, #0
 80123ca:	d020      	beq.n	801240e <__multiply+0x142>
 80123cc:	6829      	ldr	r1, [r5, #0]
 80123ce:	f104 0c14 	add.w	ip, r4, #20
 80123d2:	46ae      	mov	lr, r5
 80123d4:	f04f 0a00 	mov.w	sl, #0
 80123d8:	f8bc b000 	ldrh.w	fp, [ip]
 80123dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80123e0:	fb09 220b 	mla	r2, r9, fp, r2
 80123e4:	4492      	add	sl, r2
 80123e6:	b289      	uxth	r1, r1
 80123e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80123ec:	f84e 1b04 	str.w	r1, [lr], #4
 80123f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80123f4:	f8be 1000 	ldrh.w	r1, [lr]
 80123f8:	0c12      	lsrs	r2, r2, #16
 80123fa:	fb09 1102 	mla	r1, r9, r2, r1
 80123fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012402:	4567      	cmp	r7, ip
 8012404:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012408:	d8e6      	bhi.n	80123d8 <__multiply+0x10c>
 801240a:	9a01      	ldr	r2, [sp, #4]
 801240c:	50a9      	str	r1, [r5, r2]
 801240e:	3504      	adds	r5, #4
 8012410:	e79a      	b.n	8012348 <__multiply+0x7c>
 8012412:	3e01      	subs	r6, #1
 8012414:	e79c      	b.n	8012350 <__multiply+0x84>
 8012416:	bf00      	nop
 8012418:	08014a14 	.word	0x08014a14
 801241c:	08014a25 	.word	0x08014a25

08012420 <__pow5mult>:
 8012420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012424:	4615      	mov	r5, r2
 8012426:	f012 0203 	ands.w	r2, r2, #3
 801242a:	4606      	mov	r6, r0
 801242c:	460f      	mov	r7, r1
 801242e:	d007      	beq.n	8012440 <__pow5mult+0x20>
 8012430:	4c25      	ldr	r4, [pc, #148]	; (80124c8 <__pow5mult+0xa8>)
 8012432:	3a01      	subs	r2, #1
 8012434:	2300      	movs	r3, #0
 8012436:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801243a:	f7ff fe9b 	bl	8012174 <__multadd>
 801243e:	4607      	mov	r7, r0
 8012440:	10ad      	asrs	r5, r5, #2
 8012442:	d03d      	beq.n	80124c0 <__pow5mult+0xa0>
 8012444:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012446:	b97c      	cbnz	r4, 8012468 <__pow5mult+0x48>
 8012448:	2010      	movs	r0, #16
 801244a:	f7ff fe1d 	bl	8012088 <malloc>
 801244e:	4602      	mov	r2, r0
 8012450:	6270      	str	r0, [r6, #36]	; 0x24
 8012452:	b928      	cbnz	r0, 8012460 <__pow5mult+0x40>
 8012454:	4b1d      	ldr	r3, [pc, #116]	; (80124cc <__pow5mult+0xac>)
 8012456:	481e      	ldr	r0, [pc, #120]	; (80124d0 <__pow5mult+0xb0>)
 8012458:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801245c:	f000 fcd6 	bl	8012e0c <__assert_func>
 8012460:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012464:	6004      	str	r4, [r0, #0]
 8012466:	60c4      	str	r4, [r0, #12]
 8012468:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801246c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012470:	b94c      	cbnz	r4, 8012486 <__pow5mult+0x66>
 8012472:	f240 2171 	movw	r1, #625	; 0x271
 8012476:	4630      	mov	r0, r6
 8012478:	f7ff ff12 	bl	80122a0 <__i2b>
 801247c:	2300      	movs	r3, #0
 801247e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012482:	4604      	mov	r4, r0
 8012484:	6003      	str	r3, [r0, #0]
 8012486:	f04f 0900 	mov.w	r9, #0
 801248a:	07eb      	lsls	r3, r5, #31
 801248c:	d50a      	bpl.n	80124a4 <__pow5mult+0x84>
 801248e:	4639      	mov	r1, r7
 8012490:	4622      	mov	r2, r4
 8012492:	4630      	mov	r0, r6
 8012494:	f7ff ff1a 	bl	80122cc <__multiply>
 8012498:	4639      	mov	r1, r7
 801249a:	4680      	mov	r8, r0
 801249c:	4630      	mov	r0, r6
 801249e:	f7ff fe47 	bl	8012130 <_Bfree>
 80124a2:	4647      	mov	r7, r8
 80124a4:	106d      	asrs	r5, r5, #1
 80124a6:	d00b      	beq.n	80124c0 <__pow5mult+0xa0>
 80124a8:	6820      	ldr	r0, [r4, #0]
 80124aa:	b938      	cbnz	r0, 80124bc <__pow5mult+0x9c>
 80124ac:	4622      	mov	r2, r4
 80124ae:	4621      	mov	r1, r4
 80124b0:	4630      	mov	r0, r6
 80124b2:	f7ff ff0b 	bl	80122cc <__multiply>
 80124b6:	6020      	str	r0, [r4, #0]
 80124b8:	f8c0 9000 	str.w	r9, [r0]
 80124bc:	4604      	mov	r4, r0
 80124be:	e7e4      	b.n	801248a <__pow5mult+0x6a>
 80124c0:	4638      	mov	r0, r7
 80124c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124c6:	bf00      	nop
 80124c8:	08014b78 	.word	0x08014b78
 80124cc:	080149a2 	.word	0x080149a2
 80124d0:	08014a25 	.word	0x08014a25

080124d4 <__lshift>:
 80124d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124d8:	460c      	mov	r4, r1
 80124da:	6849      	ldr	r1, [r1, #4]
 80124dc:	6923      	ldr	r3, [r4, #16]
 80124de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80124e2:	68a3      	ldr	r3, [r4, #8]
 80124e4:	4607      	mov	r7, r0
 80124e6:	4691      	mov	r9, r2
 80124e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80124ec:	f108 0601 	add.w	r6, r8, #1
 80124f0:	42b3      	cmp	r3, r6
 80124f2:	db0b      	blt.n	801250c <__lshift+0x38>
 80124f4:	4638      	mov	r0, r7
 80124f6:	f7ff fddb 	bl	80120b0 <_Balloc>
 80124fa:	4605      	mov	r5, r0
 80124fc:	b948      	cbnz	r0, 8012512 <__lshift+0x3e>
 80124fe:	4602      	mov	r2, r0
 8012500:	4b2a      	ldr	r3, [pc, #168]	; (80125ac <__lshift+0xd8>)
 8012502:	482b      	ldr	r0, [pc, #172]	; (80125b0 <__lshift+0xdc>)
 8012504:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012508:	f000 fc80 	bl	8012e0c <__assert_func>
 801250c:	3101      	adds	r1, #1
 801250e:	005b      	lsls	r3, r3, #1
 8012510:	e7ee      	b.n	80124f0 <__lshift+0x1c>
 8012512:	2300      	movs	r3, #0
 8012514:	f100 0114 	add.w	r1, r0, #20
 8012518:	f100 0210 	add.w	r2, r0, #16
 801251c:	4618      	mov	r0, r3
 801251e:	4553      	cmp	r3, sl
 8012520:	db37      	blt.n	8012592 <__lshift+0xbe>
 8012522:	6920      	ldr	r0, [r4, #16]
 8012524:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012528:	f104 0314 	add.w	r3, r4, #20
 801252c:	f019 091f 	ands.w	r9, r9, #31
 8012530:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012534:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012538:	d02f      	beq.n	801259a <__lshift+0xc6>
 801253a:	f1c9 0e20 	rsb	lr, r9, #32
 801253e:	468a      	mov	sl, r1
 8012540:	f04f 0c00 	mov.w	ip, #0
 8012544:	681a      	ldr	r2, [r3, #0]
 8012546:	fa02 f209 	lsl.w	r2, r2, r9
 801254a:	ea42 020c 	orr.w	r2, r2, ip
 801254e:	f84a 2b04 	str.w	r2, [sl], #4
 8012552:	f853 2b04 	ldr.w	r2, [r3], #4
 8012556:	4298      	cmp	r0, r3
 8012558:	fa22 fc0e 	lsr.w	ip, r2, lr
 801255c:	d8f2      	bhi.n	8012544 <__lshift+0x70>
 801255e:	1b03      	subs	r3, r0, r4
 8012560:	3b15      	subs	r3, #21
 8012562:	f023 0303 	bic.w	r3, r3, #3
 8012566:	3304      	adds	r3, #4
 8012568:	f104 0215 	add.w	r2, r4, #21
 801256c:	4290      	cmp	r0, r2
 801256e:	bf38      	it	cc
 8012570:	2304      	movcc	r3, #4
 8012572:	f841 c003 	str.w	ip, [r1, r3]
 8012576:	f1bc 0f00 	cmp.w	ip, #0
 801257a:	d001      	beq.n	8012580 <__lshift+0xac>
 801257c:	f108 0602 	add.w	r6, r8, #2
 8012580:	3e01      	subs	r6, #1
 8012582:	4638      	mov	r0, r7
 8012584:	612e      	str	r6, [r5, #16]
 8012586:	4621      	mov	r1, r4
 8012588:	f7ff fdd2 	bl	8012130 <_Bfree>
 801258c:	4628      	mov	r0, r5
 801258e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012592:	f842 0f04 	str.w	r0, [r2, #4]!
 8012596:	3301      	adds	r3, #1
 8012598:	e7c1      	b.n	801251e <__lshift+0x4a>
 801259a:	3904      	subs	r1, #4
 801259c:	f853 2b04 	ldr.w	r2, [r3], #4
 80125a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80125a4:	4298      	cmp	r0, r3
 80125a6:	d8f9      	bhi.n	801259c <__lshift+0xc8>
 80125a8:	e7ea      	b.n	8012580 <__lshift+0xac>
 80125aa:	bf00      	nop
 80125ac:	08014a14 	.word	0x08014a14
 80125b0:	08014a25 	.word	0x08014a25

080125b4 <__mcmp>:
 80125b4:	b530      	push	{r4, r5, lr}
 80125b6:	6902      	ldr	r2, [r0, #16]
 80125b8:	690c      	ldr	r4, [r1, #16]
 80125ba:	1b12      	subs	r2, r2, r4
 80125bc:	d10e      	bne.n	80125dc <__mcmp+0x28>
 80125be:	f100 0314 	add.w	r3, r0, #20
 80125c2:	3114      	adds	r1, #20
 80125c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80125c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80125cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80125d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80125d4:	42a5      	cmp	r5, r4
 80125d6:	d003      	beq.n	80125e0 <__mcmp+0x2c>
 80125d8:	d305      	bcc.n	80125e6 <__mcmp+0x32>
 80125da:	2201      	movs	r2, #1
 80125dc:	4610      	mov	r0, r2
 80125de:	bd30      	pop	{r4, r5, pc}
 80125e0:	4283      	cmp	r3, r0
 80125e2:	d3f3      	bcc.n	80125cc <__mcmp+0x18>
 80125e4:	e7fa      	b.n	80125dc <__mcmp+0x28>
 80125e6:	f04f 32ff 	mov.w	r2, #4294967295
 80125ea:	e7f7      	b.n	80125dc <__mcmp+0x28>

080125ec <__mdiff>:
 80125ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125f0:	460c      	mov	r4, r1
 80125f2:	4606      	mov	r6, r0
 80125f4:	4611      	mov	r1, r2
 80125f6:	4620      	mov	r0, r4
 80125f8:	4690      	mov	r8, r2
 80125fa:	f7ff ffdb 	bl	80125b4 <__mcmp>
 80125fe:	1e05      	subs	r5, r0, #0
 8012600:	d110      	bne.n	8012624 <__mdiff+0x38>
 8012602:	4629      	mov	r1, r5
 8012604:	4630      	mov	r0, r6
 8012606:	f7ff fd53 	bl	80120b0 <_Balloc>
 801260a:	b930      	cbnz	r0, 801261a <__mdiff+0x2e>
 801260c:	4b3a      	ldr	r3, [pc, #232]	; (80126f8 <__mdiff+0x10c>)
 801260e:	4602      	mov	r2, r0
 8012610:	f240 2132 	movw	r1, #562	; 0x232
 8012614:	4839      	ldr	r0, [pc, #228]	; (80126fc <__mdiff+0x110>)
 8012616:	f000 fbf9 	bl	8012e0c <__assert_func>
 801261a:	2301      	movs	r3, #1
 801261c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012620:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012624:	bfa4      	itt	ge
 8012626:	4643      	movge	r3, r8
 8012628:	46a0      	movge	r8, r4
 801262a:	4630      	mov	r0, r6
 801262c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012630:	bfa6      	itte	ge
 8012632:	461c      	movge	r4, r3
 8012634:	2500      	movge	r5, #0
 8012636:	2501      	movlt	r5, #1
 8012638:	f7ff fd3a 	bl	80120b0 <_Balloc>
 801263c:	b920      	cbnz	r0, 8012648 <__mdiff+0x5c>
 801263e:	4b2e      	ldr	r3, [pc, #184]	; (80126f8 <__mdiff+0x10c>)
 8012640:	4602      	mov	r2, r0
 8012642:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012646:	e7e5      	b.n	8012614 <__mdiff+0x28>
 8012648:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801264c:	6926      	ldr	r6, [r4, #16]
 801264e:	60c5      	str	r5, [r0, #12]
 8012650:	f104 0914 	add.w	r9, r4, #20
 8012654:	f108 0514 	add.w	r5, r8, #20
 8012658:	f100 0e14 	add.w	lr, r0, #20
 801265c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012660:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012664:	f108 0210 	add.w	r2, r8, #16
 8012668:	46f2      	mov	sl, lr
 801266a:	2100      	movs	r1, #0
 801266c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012670:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012674:	fa1f f883 	uxth.w	r8, r3
 8012678:	fa11 f18b 	uxtah	r1, r1, fp
 801267c:	0c1b      	lsrs	r3, r3, #16
 801267e:	eba1 0808 	sub.w	r8, r1, r8
 8012682:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012686:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801268a:	fa1f f888 	uxth.w	r8, r8
 801268e:	1419      	asrs	r1, r3, #16
 8012690:	454e      	cmp	r6, r9
 8012692:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012696:	f84a 3b04 	str.w	r3, [sl], #4
 801269a:	d8e7      	bhi.n	801266c <__mdiff+0x80>
 801269c:	1b33      	subs	r3, r6, r4
 801269e:	3b15      	subs	r3, #21
 80126a0:	f023 0303 	bic.w	r3, r3, #3
 80126a4:	3304      	adds	r3, #4
 80126a6:	3415      	adds	r4, #21
 80126a8:	42a6      	cmp	r6, r4
 80126aa:	bf38      	it	cc
 80126ac:	2304      	movcc	r3, #4
 80126ae:	441d      	add	r5, r3
 80126b0:	4473      	add	r3, lr
 80126b2:	469e      	mov	lr, r3
 80126b4:	462e      	mov	r6, r5
 80126b6:	4566      	cmp	r6, ip
 80126b8:	d30e      	bcc.n	80126d8 <__mdiff+0xec>
 80126ba:	f10c 0203 	add.w	r2, ip, #3
 80126be:	1b52      	subs	r2, r2, r5
 80126c0:	f022 0203 	bic.w	r2, r2, #3
 80126c4:	3d03      	subs	r5, #3
 80126c6:	45ac      	cmp	ip, r5
 80126c8:	bf38      	it	cc
 80126ca:	2200      	movcc	r2, #0
 80126cc:	441a      	add	r2, r3
 80126ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80126d2:	b17b      	cbz	r3, 80126f4 <__mdiff+0x108>
 80126d4:	6107      	str	r7, [r0, #16]
 80126d6:	e7a3      	b.n	8012620 <__mdiff+0x34>
 80126d8:	f856 8b04 	ldr.w	r8, [r6], #4
 80126dc:	fa11 f288 	uxtah	r2, r1, r8
 80126e0:	1414      	asrs	r4, r2, #16
 80126e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80126e6:	b292      	uxth	r2, r2
 80126e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80126ec:	f84e 2b04 	str.w	r2, [lr], #4
 80126f0:	1421      	asrs	r1, r4, #16
 80126f2:	e7e0      	b.n	80126b6 <__mdiff+0xca>
 80126f4:	3f01      	subs	r7, #1
 80126f6:	e7ea      	b.n	80126ce <__mdiff+0xe2>
 80126f8:	08014a14 	.word	0x08014a14
 80126fc:	08014a25 	.word	0x08014a25

08012700 <__d2b>:
 8012700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012704:	4689      	mov	r9, r1
 8012706:	2101      	movs	r1, #1
 8012708:	ec57 6b10 	vmov	r6, r7, d0
 801270c:	4690      	mov	r8, r2
 801270e:	f7ff fccf 	bl	80120b0 <_Balloc>
 8012712:	4604      	mov	r4, r0
 8012714:	b930      	cbnz	r0, 8012724 <__d2b+0x24>
 8012716:	4602      	mov	r2, r0
 8012718:	4b25      	ldr	r3, [pc, #148]	; (80127b0 <__d2b+0xb0>)
 801271a:	4826      	ldr	r0, [pc, #152]	; (80127b4 <__d2b+0xb4>)
 801271c:	f240 310a 	movw	r1, #778	; 0x30a
 8012720:	f000 fb74 	bl	8012e0c <__assert_func>
 8012724:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012728:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801272c:	bb35      	cbnz	r5, 801277c <__d2b+0x7c>
 801272e:	2e00      	cmp	r6, #0
 8012730:	9301      	str	r3, [sp, #4]
 8012732:	d028      	beq.n	8012786 <__d2b+0x86>
 8012734:	4668      	mov	r0, sp
 8012736:	9600      	str	r6, [sp, #0]
 8012738:	f7ff fd82 	bl	8012240 <__lo0bits>
 801273c:	9900      	ldr	r1, [sp, #0]
 801273e:	b300      	cbz	r0, 8012782 <__d2b+0x82>
 8012740:	9a01      	ldr	r2, [sp, #4]
 8012742:	f1c0 0320 	rsb	r3, r0, #32
 8012746:	fa02 f303 	lsl.w	r3, r2, r3
 801274a:	430b      	orrs	r3, r1
 801274c:	40c2      	lsrs	r2, r0
 801274e:	6163      	str	r3, [r4, #20]
 8012750:	9201      	str	r2, [sp, #4]
 8012752:	9b01      	ldr	r3, [sp, #4]
 8012754:	61a3      	str	r3, [r4, #24]
 8012756:	2b00      	cmp	r3, #0
 8012758:	bf14      	ite	ne
 801275a:	2202      	movne	r2, #2
 801275c:	2201      	moveq	r2, #1
 801275e:	6122      	str	r2, [r4, #16]
 8012760:	b1d5      	cbz	r5, 8012798 <__d2b+0x98>
 8012762:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012766:	4405      	add	r5, r0
 8012768:	f8c9 5000 	str.w	r5, [r9]
 801276c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012770:	f8c8 0000 	str.w	r0, [r8]
 8012774:	4620      	mov	r0, r4
 8012776:	b003      	add	sp, #12
 8012778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801277c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012780:	e7d5      	b.n	801272e <__d2b+0x2e>
 8012782:	6161      	str	r1, [r4, #20]
 8012784:	e7e5      	b.n	8012752 <__d2b+0x52>
 8012786:	a801      	add	r0, sp, #4
 8012788:	f7ff fd5a 	bl	8012240 <__lo0bits>
 801278c:	9b01      	ldr	r3, [sp, #4]
 801278e:	6163      	str	r3, [r4, #20]
 8012790:	2201      	movs	r2, #1
 8012792:	6122      	str	r2, [r4, #16]
 8012794:	3020      	adds	r0, #32
 8012796:	e7e3      	b.n	8012760 <__d2b+0x60>
 8012798:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801279c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80127a0:	f8c9 0000 	str.w	r0, [r9]
 80127a4:	6918      	ldr	r0, [r3, #16]
 80127a6:	f7ff fd2b 	bl	8012200 <__hi0bits>
 80127aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80127ae:	e7df      	b.n	8012770 <__d2b+0x70>
 80127b0:	08014a14 	.word	0x08014a14
 80127b4:	08014a25 	.word	0x08014a25

080127b8 <_calloc_r>:
 80127b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80127ba:	fba1 2402 	umull	r2, r4, r1, r2
 80127be:	b94c      	cbnz	r4, 80127d4 <_calloc_r+0x1c>
 80127c0:	4611      	mov	r1, r2
 80127c2:	9201      	str	r2, [sp, #4]
 80127c4:	f7fd fcee 	bl	80101a4 <_malloc_r>
 80127c8:	9a01      	ldr	r2, [sp, #4]
 80127ca:	4605      	mov	r5, r0
 80127cc:	b930      	cbnz	r0, 80127dc <_calloc_r+0x24>
 80127ce:	4628      	mov	r0, r5
 80127d0:	b003      	add	sp, #12
 80127d2:	bd30      	pop	{r4, r5, pc}
 80127d4:	220c      	movs	r2, #12
 80127d6:	6002      	str	r2, [r0, #0]
 80127d8:	2500      	movs	r5, #0
 80127da:	e7f8      	b.n	80127ce <_calloc_r+0x16>
 80127dc:	4621      	mov	r1, r4
 80127de:	f7fd fcb8 	bl	8010152 <memset>
 80127e2:	e7f4      	b.n	80127ce <_calloc_r+0x16>

080127e4 <_free_r>:
 80127e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80127e6:	2900      	cmp	r1, #0
 80127e8:	d044      	beq.n	8012874 <_free_r+0x90>
 80127ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127ee:	9001      	str	r0, [sp, #4]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	f1a1 0404 	sub.w	r4, r1, #4
 80127f6:	bfb8      	it	lt
 80127f8:	18e4      	addlt	r4, r4, r3
 80127fa:	f7ff fc4d 	bl	8012098 <__malloc_lock>
 80127fe:	4a1e      	ldr	r2, [pc, #120]	; (8012878 <_free_r+0x94>)
 8012800:	9801      	ldr	r0, [sp, #4]
 8012802:	6813      	ldr	r3, [r2, #0]
 8012804:	b933      	cbnz	r3, 8012814 <_free_r+0x30>
 8012806:	6063      	str	r3, [r4, #4]
 8012808:	6014      	str	r4, [r2, #0]
 801280a:	b003      	add	sp, #12
 801280c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012810:	f7ff bc48 	b.w	80120a4 <__malloc_unlock>
 8012814:	42a3      	cmp	r3, r4
 8012816:	d908      	bls.n	801282a <_free_r+0x46>
 8012818:	6825      	ldr	r5, [r4, #0]
 801281a:	1961      	adds	r1, r4, r5
 801281c:	428b      	cmp	r3, r1
 801281e:	bf01      	itttt	eq
 8012820:	6819      	ldreq	r1, [r3, #0]
 8012822:	685b      	ldreq	r3, [r3, #4]
 8012824:	1949      	addeq	r1, r1, r5
 8012826:	6021      	streq	r1, [r4, #0]
 8012828:	e7ed      	b.n	8012806 <_free_r+0x22>
 801282a:	461a      	mov	r2, r3
 801282c:	685b      	ldr	r3, [r3, #4]
 801282e:	b10b      	cbz	r3, 8012834 <_free_r+0x50>
 8012830:	42a3      	cmp	r3, r4
 8012832:	d9fa      	bls.n	801282a <_free_r+0x46>
 8012834:	6811      	ldr	r1, [r2, #0]
 8012836:	1855      	adds	r5, r2, r1
 8012838:	42a5      	cmp	r5, r4
 801283a:	d10b      	bne.n	8012854 <_free_r+0x70>
 801283c:	6824      	ldr	r4, [r4, #0]
 801283e:	4421      	add	r1, r4
 8012840:	1854      	adds	r4, r2, r1
 8012842:	42a3      	cmp	r3, r4
 8012844:	6011      	str	r1, [r2, #0]
 8012846:	d1e0      	bne.n	801280a <_free_r+0x26>
 8012848:	681c      	ldr	r4, [r3, #0]
 801284a:	685b      	ldr	r3, [r3, #4]
 801284c:	6053      	str	r3, [r2, #4]
 801284e:	4421      	add	r1, r4
 8012850:	6011      	str	r1, [r2, #0]
 8012852:	e7da      	b.n	801280a <_free_r+0x26>
 8012854:	d902      	bls.n	801285c <_free_r+0x78>
 8012856:	230c      	movs	r3, #12
 8012858:	6003      	str	r3, [r0, #0]
 801285a:	e7d6      	b.n	801280a <_free_r+0x26>
 801285c:	6825      	ldr	r5, [r4, #0]
 801285e:	1961      	adds	r1, r4, r5
 8012860:	428b      	cmp	r3, r1
 8012862:	bf04      	itt	eq
 8012864:	6819      	ldreq	r1, [r3, #0]
 8012866:	685b      	ldreq	r3, [r3, #4]
 8012868:	6063      	str	r3, [r4, #4]
 801286a:	bf04      	itt	eq
 801286c:	1949      	addeq	r1, r1, r5
 801286e:	6021      	streq	r1, [r4, #0]
 8012870:	6054      	str	r4, [r2, #4]
 8012872:	e7ca      	b.n	801280a <_free_r+0x26>
 8012874:	b003      	add	sp, #12
 8012876:	bd30      	pop	{r4, r5, pc}
 8012878:	20005e88 	.word	0x20005e88

0801287c <__ssputs_r>:
 801287c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012880:	688e      	ldr	r6, [r1, #8]
 8012882:	429e      	cmp	r6, r3
 8012884:	4682      	mov	sl, r0
 8012886:	460c      	mov	r4, r1
 8012888:	4690      	mov	r8, r2
 801288a:	461f      	mov	r7, r3
 801288c:	d838      	bhi.n	8012900 <__ssputs_r+0x84>
 801288e:	898a      	ldrh	r2, [r1, #12]
 8012890:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012894:	d032      	beq.n	80128fc <__ssputs_r+0x80>
 8012896:	6825      	ldr	r5, [r4, #0]
 8012898:	6909      	ldr	r1, [r1, #16]
 801289a:	eba5 0901 	sub.w	r9, r5, r1
 801289e:	6965      	ldr	r5, [r4, #20]
 80128a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80128a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80128a8:	3301      	adds	r3, #1
 80128aa:	444b      	add	r3, r9
 80128ac:	106d      	asrs	r5, r5, #1
 80128ae:	429d      	cmp	r5, r3
 80128b0:	bf38      	it	cc
 80128b2:	461d      	movcc	r5, r3
 80128b4:	0553      	lsls	r3, r2, #21
 80128b6:	d531      	bpl.n	801291c <__ssputs_r+0xa0>
 80128b8:	4629      	mov	r1, r5
 80128ba:	f7fd fc73 	bl	80101a4 <_malloc_r>
 80128be:	4606      	mov	r6, r0
 80128c0:	b950      	cbnz	r0, 80128d8 <__ssputs_r+0x5c>
 80128c2:	230c      	movs	r3, #12
 80128c4:	f8ca 3000 	str.w	r3, [sl]
 80128c8:	89a3      	ldrh	r3, [r4, #12]
 80128ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128ce:	81a3      	strh	r3, [r4, #12]
 80128d0:	f04f 30ff 	mov.w	r0, #4294967295
 80128d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128d8:	6921      	ldr	r1, [r4, #16]
 80128da:	464a      	mov	r2, r9
 80128dc:	f7fd fc11 	bl	8010102 <memcpy>
 80128e0:	89a3      	ldrh	r3, [r4, #12]
 80128e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80128e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128ea:	81a3      	strh	r3, [r4, #12]
 80128ec:	6126      	str	r6, [r4, #16]
 80128ee:	6165      	str	r5, [r4, #20]
 80128f0:	444e      	add	r6, r9
 80128f2:	eba5 0509 	sub.w	r5, r5, r9
 80128f6:	6026      	str	r6, [r4, #0]
 80128f8:	60a5      	str	r5, [r4, #8]
 80128fa:	463e      	mov	r6, r7
 80128fc:	42be      	cmp	r6, r7
 80128fe:	d900      	bls.n	8012902 <__ssputs_r+0x86>
 8012900:	463e      	mov	r6, r7
 8012902:	6820      	ldr	r0, [r4, #0]
 8012904:	4632      	mov	r2, r6
 8012906:	4641      	mov	r1, r8
 8012908:	f7fd fc09 	bl	801011e <memmove>
 801290c:	68a3      	ldr	r3, [r4, #8]
 801290e:	1b9b      	subs	r3, r3, r6
 8012910:	60a3      	str	r3, [r4, #8]
 8012912:	6823      	ldr	r3, [r4, #0]
 8012914:	4433      	add	r3, r6
 8012916:	6023      	str	r3, [r4, #0]
 8012918:	2000      	movs	r0, #0
 801291a:	e7db      	b.n	80128d4 <__ssputs_r+0x58>
 801291c:	462a      	mov	r2, r5
 801291e:	f000 fad9 	bl	8012ed4 <_realloc_r>
 8012922:	4606      	mov	r6, r0
 8012924:	2800      	cmp	r0, #0
 8012926:	d1e1      	bne.n	80128ec <__ssputs_r+0x70>
 8012928:	6921      	ldr	r1, [r4, #16]
 801292a:	4650      	mov	r0, sl
 801292c:	f7ff ff5a 	bl	80127e4 <_free_r>
 8012930:	e7c7      	b.n	80128c2 <__ssputs_r+0x46>
	...

08012934 <_svfiprintf_r>:
 8012934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012938:	4698      	mov	r8, r3
 801293a:	898b      	ldrh	r3, [r1, #12]
 801293c:	061b      	lsls	r3, r3, #24
 801293e:	b09d      	sub	sp, #116	; 0x74
 8012940:	4607      	mov	r7, r0
 8012942:	460d      	mov	r5, r1
 8012944:	4614      	mov	r4, r2
 8012946:	d50e      	bpl.n	8012966 <_svfiprintf_r+0x32>
 8012948:	690b      	ldr	r3, [r1, #16]
 801294a:	b963      	cbnz	r3, 8012966 <_svfiprintf_r+0x32>
 801294c:	2140      	movs	r1, #64	; 0x40
 801294e:	f7fd fc29 	bl	80101a4 <_malloc_r>
 8012952:	6028      	str	r0, [r5, #0]
 8012954:	6128      	str	r0, [r5, #16]
 8012956:	b920      	cbnz	r0, 8012962 <_svfiprintf_r+0x2e>
 8012958:	230c      	movs	r3, #12
 801295a:	603b      	str	r3, [r7, #0]
 801295c:	f04f 30ff 	mov.w	r0, #4294967295
 8012960:	e0d1      	b.n	8012b06 <_svfiprintf_r+0x1d2>
 8012962:	2340      	movs	r3, #64	; 0x40
 8012964:	616b      	str	r3, [r5, #20]
 8012966:	2300      	movs	r3, #0
 8012968:	9309      	str	r3, [sp, #36]	; 0x24
 801296a:	2320      	movs	r3, #32
 801296c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012970:	f8cd 800c 	str.w	r8, [sp, #12]
 8012974:	2330      	movs	r3, #48	; 0x30
 8012976:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012b20 <_svfiprintf_r+0x1ec>
 801297a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801297e:	f04f 0901 	mov.w	r9, #1
 8012982:	4623      	mov	r3, r4
 8012984:	469a      	mov	sl, r3
 8012986:	f813 2b01 	ldrb.w	r2, [r3], #1
 801298a:	b10a      	cbz	r2, 8012990 <_svfiprintf_r+0x5c>
 801298c:	2a25      	cmp	r2, #37	; 0x25
 801298e:	d1f9      	bne.n	8012984 <_svfiprintf_r+0x50>
 8012990:	ebba 0b04 	subs.w	fp, sl, r4
 8012994:	d00b      	beq.n	80129ae <_svfiprintf_r+0x7a>
 8012996:	465b      	mov	r3, fp
 8012998:	4622      	mov	r2, r4
 801299a:	4629      	mov	r1, r5
 801299c:	4638      	mov	r0, r7
 801299e:	f7ff ff6d 	bl	801287c <__ssputs_r>
 80129a2:	3001      	adds	r0, #1
 80129a4:	f000 80aa 	beq.w	8012afc <_svfiprintf_r+0x1c8>
 80129a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129aa:	445a      	add	r2, fp
 80129ac:	9209      	str	r2, [sp, #36]	; 0x24
 80129ae:	f89a 3000 	ldrb.w	r3, [sl]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	f000 80a2 	beq.w	8012afc <_svfiprintf_r+0x1c8>
 80129b8:	2300      	movs	r3, #0
 80129ba:	f04f 32ff 	mov.w	r2, #4294967295
 80129be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80129c2:	f10a 0a01 	add.w	sl, sl, #1
 80129c6:	9304      	str	r3, [sp, #16]
 80129c8:	9307      	str	r3, [sp, #28]
 80129ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80129ce:	931a      	str	r3, [sp, #104]	; 0x68
 80129d0:	4654      	mov	r4, sl
 80129d2:	2205      	movs	r2, #5
 80129d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129d8:	4851      	ldr	r0, [pc, #324]	; (8012b20 <_svfiprintf_r+0x1ec>)
 80129da:	f7ed fc09 	bl	80001f0 <memchr>
 80129de:	9a04      	ldr	r2, [sp, #16]
 80129e0:	b9d8      	cbnz	r0, 8012a1a <_svfiprintf_r+0xe6>
 80129e2:	06d0      	lsls	r0, r2, #27
 80129e4:	bf44      	itt	mi
 80129e6:	2320      	movmi	r3, #32
 80129e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80129ec:	0711      	lsls	r1, r2, #28
 80129ee:	bf44      	itt	mi
 80129f0:	232b      	movmi	r3, #43	; 0x2b
 80129f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80129f6:	f89a 3000 	ldrb.w	r3, [sl]
 80129fa:	2b2a      	cmp	r3, #42	; 0x2a
 80129fc:	d015      	beq.n	8012a2a <_svfiprintf_r+0xf6>
 80129fe:	9a07      	ldr	r2, [sp, #28]
 8012a00:	4654      	mov	r4, sl
 8012a02:	2000      	movs	r0, #0
 8012a04:	f04f 0c0a 	mov.w	ip, #10
 8012a08:	4621      	mov	r1, r4
 8012a0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a0e:	3b30      	subs	r3, #48	; 0x30
 8012a10:	2b09      	cmp	r3, #9
 8012a12:	d94e      	bls.n	8012ab2 <_svfiprintf_r+0x17e>
 8012a14:	b1b0      	cbz	r0, 8012a44 <_svfiprintf_r+0x110>
 8012a16:	9207      	str	r2, [sp, #28]
 8012a18:	e014      	b.n	8012a44 <_svfiprintf_r+0x110>
 8012a1a:	eba0 0308 	sub.w	r3, r0, r8
 8012a1e:	fa09 f303 	lsl.w	r3, r9, r3
 8012a22:	4313      	orrs	r3, r2
 8012a24:	9304      	str	r3, [sp, #16]
 8012a26:	46a2      	mov	sl, r4
 8012a28:	e7d2      	b.n	80129d0 <_svfiprintf_r+0x9c>
 8012a2a:	9b03      	ldr	r3, [sp, #12]
 8012a2c:	1d19      	adds	r1, r3, #4
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	9103      	str	r1, [sp, #12]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	bfbb      	ittet	lt
 8012a36:	425b      	neglt	r3, r3
 8012a38:	f042 0202 	orrlt.w	r2, r2, #2
 8012a3c:	9307      	strge	r3, [sp, #28]
 8012a3e:	9307      	strlt	r3, [sp, #28]
 8012a40:	bfb8      	it	lt
 8012a42:	9204      	strlt	r2, [sp, #16]
 8012a44:	7823      	ldrb	r3, [r4, #0]
 8012a46:	2b2e      	cmp	r3, #46	; 0x2e
 8012a48:	d10c      	bne.n	8012a64 <_svfiprintf_r+0x130>
 8012a4a:	7863      	ldrb	r3, [r4, #1]
 8012a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8012a4e:	d135      	bne.n	8012abc <_svfiprintf_r+0x188>
 8012a50:	9b03      	ldr	r3, [sp, #12]
 8012a52:	1d1a      	adds	r2, r3, #4
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	9203      	str	r2, [sp, #12]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	bfb8      	it	lt
 8012a5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012a60:	3402      	adds	r4, #2
 8012a62:	9305      	str	r3, [sp, #20]
 8012a64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012b30 <_svfiprintf_r+0x1fc>
 8012a68:	7821      	ldrb	r1, [r4, #0]
 8012a6a:	2203      	movs	r2, #3
 8012a6c:	4650      	mov	r0, sl
 8012a6e:	f7ed fbbf 	bl	80001f0 <memchr>
 8012a72:	b140      	cbz	r0, 8012a86 <_svfiprintf_r+0x152>
 8012a74:	2340      	movs	r3, #64	; 0x40
 8012a76:	eba0 000a 	sub.w	r0, r0, sl
 8012a7a:	fa03 f000 	lsl.w	r0, r3, r0
 8012a7e:	9b04      	ldr	r3, [sp, #16]
 8012a80:	4303      	orrs	r3, r0
 8012a82:	3401      	adds	r4, #1
 8012a84:	9304      	str	r3, [sp, #16]
 8012a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a8a:	4826      	ldr	r0, [pc, #152]	; (8012b24 <_svfiprintf_r+0x1f0>)
 8012a8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012a90:	2206      	movs	r2, #6
 8012a92:	f7ed fbad 	bl	80001f0 <memchr>
 8012a96:	2800      	cmp	r0, #0
 8012a98:	d038      	beq.n	8012b0c <_svfiprintf_r+0x1d8>
 8012a9a:	4b23      	ldr	r3, [pc, #140]	; (8012b28 <_svfiprintf_r+0x1f4>)
 8012a9c:	bb1b      	cbnz	r3, 8012ae6 <_svfiprintf_r+0x1b2>
 8012a9e:	9b03      	ldr	r3, [sp, #12]
 8012aa0:	3307      	adds	r3, #7
 8012aa2:	f023 0307 	bic.w	r3, r3, #7
 8012aa6:	3308      	adds	r3, #8
 8012aa8:	9303      	str	r3, [sp, #12]
 8012aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012aac:	4433      	add	r3, r6
 8012aae:	9309      	str	r3, [sp, #36]	; 0x24
 8012ab0:	e767      	b.n	8012982 <_svfiprintf_r+0x4e>
 8012ab2:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ab6:	460c      	mov	r4, r1
 8012ab8:	2001      	movs	r0, #1
 8012aba:	e7a5      	b.n	8012a08 <_svfiprintf_r+0xd4>
 8012abc:	2300      	movs	r3, #0
 8012abe:	3401      	adds	r4, #1
 8012ac0:	9305      	str	r3, [sp, #20]
 8012ac2:	4619      	mov	r1, r3
 8012ac4:	f04f 0c0a 	mov.w	ip, #10
 8012ac8:	4620      	mov	r0, r4
 8012aca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ace:	3a30      	subs	r2, #48	; 0x30
 8012ad0:	2a09      	cmp	r2, #9
 8012ad2:	d903      	bls.n	8012adc <_svfiprintf_r+0x1a8>
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d0c5      	beq.n	8012a64 <_svfiprintf_r+0x130>
 8012ad8:	9105      	str	r1, [sp, #20]
 8012ada:	e7c3      	b.n	8012a64 <_svfiprintf_r+0x130>
 8012adc:	fb0c 2101 	mla	r1, ip, r1, r2
 8012ae0:	4604      	mov	r4, r0
 8012ae2:	2301      	movs	r3, #1
 8012ae4:	e7f0      	b.n	8012ac8 <_svfiprintf_r+0x194>
 8012ae6:	ab03      	add	r3, sp, #12
 8012ae8:	9300      	str	r3, [sp, #0]
 8012aea:	462a      	mov	r2, r5
 8012aec:	4b0f      	ldr	r3, [pc, #60]	; (8012b2c <_svfiprintf_r+0x1f8>)
 8012aee:	a904      	add	r1, sp, #16
 8012af0:	4638      	mov	r0, r7
 8012af2:	f7fd fc6b 	bl	80103cc <_printf_float>
 8012af6:	1c42      	adds	r2, r0, #1
 8012af8:	4606      	mov	r6, r0
 8012afa:	d1d6      	bne.n	8012aaa <_svfiprintf_r+0x176>
 8012afc:	89ab      	ldrh	r3, [r5, #12]
 8012afe:	065b      	lsls	r3, r3, #25
 8012b00:	f53f af2c 	bmi.w	801295c <_svfiprintf_r+0x28>
 8012b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b06:	b01d      	add	sp, #116	; 0x74
 8012b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b0c:	ab03      	add	r3, sp, #12
 8012b0e:	9300      	str	r3, [sp, #0]
 8012b10:	462a      	mov	r2, r5
 8012b12:	4b06      	ldr	r3, [pc, #24]	; (8012b2c <_svfiprintf_r+0x1f8>)
 8012b14:	a904      	add	r1, sp, #16
 8012b16:	4638      	mov	r0, r7
 8012b18:	f7fd fefc 	bl	8010914 <_printf_i>
 8012b1c:	e7eb      	b.n	8012af6 <_svfiprintf_r+0x1c2>
 8012b1e:	bf00      	nop
 8012b20:	08014b84 	.word	0x08014b84
 8012b24:	08014b8e 	.word	0x08014b8e
 8012b28:	080103cd 	.word	0x080103cd
 8012b2c:	0801287d 	.word	0x0801287d
 8012b30:	08014b8a 	.word	0x08014b8a

08012b34 <__sfputc_r>:
 8012b34:	6893      	ldr	r3, [r2, #8]
 8012b36:	3b01      	subs	r3, #1
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	b410      	push	{r4}
 8012b3c:	6093      	str	r3, [r2, #8]
 8012b3e:	da08      	bge.n	8012b52 <__sfputc_r+0x1e>
 8012b40:	6994      	ldr	r4, [r2, #24]
 8012b42:	42a3      	cmp	r3, r4
 8012b44:	db01      	blt.n	8012b4a <__sfputc_r+0x16>
 8012b46:	290a      	cmp	r1, #10
 8012b48:	d103      	bne.n	8012b52 <__sfputc_r+0x1e>
 8012b4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b4e:	f7fe b9ff 	b.w	8010f50 <__swbuf_r>
 8012b52:	6813      	ldr	r3, [r2, #0]
 8012b54:	1c58      	adds	r0, r3, #1
 8012b56:	6010      	str	r0, [r2, #0]
 8012b58:	7019      	strb	r1, [r3, #0]
 8012b5a:	4608      	mov	r0, r1
 8012b5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b60:	4770      	bx	lr

08012b62 <__sfputs_r>:
 8012b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b64:	4606      	mov	r6, r0
 8012b66:	460f      	mov	r7, r1
 8012b68:	4614      	mov	r4, r2
 8012b6a:	18d5      	adds	r5, r2, r3
 8012b6c:	42ac      	cmp	r4, r5
 8012b6e:	d101      	bne.n	8012b74 <__sfputs_r+0x12>
 8012b70:	2000      	movs	r0, #0
 8012b72:	e007      	b.n	8012b84 <__sfputs_r+0x22>
 8012b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b78:	463a      	mov	r2, r7
 8012b7a:	4630      	mov	r0, r6
 8012b7c:	f7ff ffda 	bl	8012b34 <__sfputc_r>
 8012b80:	1c43      	adds	r3, r0, #1
 8012b82:	d1f3      	bne.n	8012b6c <__sfputs_r+0xa>
 8012b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012b88 <_vfiprintf_r>:
 8012b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b8c:	460d      	mov	r5, r1
 8012b8e:	b09d      	sub	sp, #116	; 0x74
 8012b90:	4614      	mov	r4, r2
 8012b92:	4698      	mov	r8, r3
 8012b94:	4606      	mov	r6, r0
 8012b96:	b118      	cbz	r0, 8012ba0 <_vfiprintf_r+0x18>
 8012b98:	6983      	ldr	r3, [r0, #24]
 8012b9a:	b90b      	cbnz	r3, 8012ba0 <_vfiprintf_r+0x18>
 8012b9c:	f7fd f9ec 	bl	800ff78 <__sinit>
 8012ba0:	4b89      	ldr	r3, [pc, #548]	; (8012dc8 <_vfiprintf_r+0x240>)
 8012ba2:	429d      	cmp	r5, r3
 8012ba4:	d11b      	bne.n	8012bde <_vfiprintf_r+0x56>
 8012ba6:	6875      	ldr	r5, [r6, #4]
 8012ba8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012baa:	07d9      	lsls	r1, r3, #31
 8012bac:	d405      	bmi.n	8012bba <_vfiprintf_r+0x32>
 8012bae:	89ab      	ldrh	r3, [r5, #12]
 8012bb0:	059a      	lsls	r2, r3, #22
 8012bb2:	d402      	bmi.n	8012bba <_vfiprintf_r+0x32>
 8012bb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012bb6:	f7fd faa2 	bl	80100fe <__retarget_lock_acquire_recursive>
 8012bba:	89ab      	ldrh	r3, [r5, #12]
 8012bbc:	071b      	lsls	r3, r3, #28
 8012bbe:	d501      	bpl.n	8012bc4 <_vfiprintf_r+0x3c>
 8012bc0:	692b      	ldr	r3, [r5, #16]
 8012bc2:	b9eb      	cbnz	r3, 8012c00 <_vfiprintf_r+0x78>
 8012bc4:	4629      	mov	r1, r5
 8012bc6:	4630      	mov	r0, r6
 8012bc8:	f7fe fa26 	bl	8011018 <__swsetup_r>
 8012bcc:	b1c0      	cbz	r0, 8012c00 <_vfiprintf_r+0x78>
 8012bce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012bd0:	07dc      	lsls	r4, r3, #31
 8012bd2:	d50e      	bpl.n	8012bf2 <_vfiprintf_r+0x6a>
 8012bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8012bd8:	b01d      	add	sp, #116	; 0x74
 8012bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bde:	4b7b      	ldr	r3, [pc, #492]	; (8012dcc <_vfiprintf_r+0x244>)
 8012be0:	429d      	cmp	r5, r3
 8012be2:	d101      	bne.n	8012be8 <_vfiprintf_r+0x60>
 8012be4:	68b5      	ldr	r5, [r6, #8]
 8012be6:	e7df      	b.n	8012ba8 <_vfiprintf_r+0x20>
 8012be8:	4b79      	ldr	r3, [pc, #484]	; (8012dd0 <_vfiprintf_r+0x248>)
 8012bea:	429d      	cmp	r5, r3
 8012bec:	bf08      	it	eq
 8012bee:	68f5      	ldreq	r5, [r6, #12]
 8012bf0:	e7da      	b.n	8012ba8 <_vfiprintf_r+0x20>
 8012bf2:	89ab      	ldrh	r3, [r5, #12]
 8012bf4:	0598      	lsls	r0, r3, #22
 8012bf6:	d4ed      	bmi.n	8012bd4 <_vfiprintf_r+0x4c>
 8012bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012bfa:	f7fd fa81 	bl	8010100 <__retarget_lock_release_recursive>
 8012bfe:	e7e9      	b.n	8012bd4 <_vfiprintf_r+0x4c>
 8012c00:	2300      	movs	r3, #0
 8012c02:	9309      	str	r3, [sp, #36]	; 0x24
 8012c04:	2320      	movs	r3, #32
 8012c06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c0e:	2330      	movs	r3, #48	; 0x30
 8012c10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012dd4 <_vfiprintf_r+0x24c>
 8012c14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c18:	f04f 0901 	mov.w	r9, #1
 8012c1c:	4623      	mov	r3, r4
 8012c1e:	469a      	mov	sl, r3
 8012c20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c24:	b10a      	cbz	r2, 8012c2a <_vfiprintf_r+0xa2>
 8012c26:	2a25      	cmp	r2, #37	; 0x25
 8012c28:	d1f9      	bne.n	8012c1e <_vfiprintf_r+0x96>
 8012c2a:	ebba 0b04 	subs.w	fp, sl, r4
 8012c2e:	d00b      	beq.n	8012c48 <_vfiprintf_r+0xc0>
 8012c30:	465b      	mov	r3, fp
 8012c32:	4622      	mov	r2, r4
 8012c34:	4629      	mov	r1, r5
 8012c36:	4630      	mov	r0, r6
 8012c38:	f7ff ff93 	bl	8012b62 <__sfputs_r>
 8012c3c:	3001      	adds	r0, #1
 8012c3e:	f000 80aa 	beq.w	8012d96 <_vfiprintf_r+0x20e>
 8012c42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c44:	445a      	add	r2, fp
 8012c46:	9209      	str	r2, [sp, #36]	; 0x24
 8012c48:	f89a 3000 	ldrb.w	r3, [sl]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	f000 80a2 	beq.w	8012d96 <_vfiprintf_r+0x20e>
 8012c52:	2300      	movs	r3, #0
 8012c54:	f04f 32ff 	mov.w	r2, #4294967295
 8012c58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c5c:	f10a 0a01 	add.w	sl, sl, #1
 8012c60:	9304      	str	r3, [sp, #16]
 8012c62:	9307      	str	r3, [sp, #28]
 8012c64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c68:	931a      	str	r3, [sp, #104]	; 0x68
 8012c6a:	4654      	mov	r4, sl
 8012c6c:	2205      	movs	r2, #5
 8012c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c72:	4858      	ldr	r0, [pc, #352]	; (8012dd4 <_vfiprintf_r+0x24c>)
 8012c74:	f7ed fabc 	bl	80001f0 <memchr>
 8012c78:	9a04      	ldr	r2, [sp, #16]
 8012c7a:	b9d8      	cbnz	r0, 8012cb4 <_vfiprintf_r+0x12c>
 8012c7c:	06d1      	lsls	r1, r2, #27
 8012c7e:	bf44      	itt	mi
 8012c80:	2320      	movmi	r3, #32
 8012c82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c86:	0713      	lsls	r3, r2, #28
 8012c88:	bf44      	itt	mi
 8012c8a:	232b      	movmi	r3, #43	; 0x2b
 8012c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c90:	f89a 3000 	ldrb.w	r3, [sl]
 8012c94:	2b2a      	cmp	r3, #42	; 0x2a
 8012c96:	d015      	beq.n	8012cc4 <_vfiprintf_r+0x13c>
 8012c98:	9a07      	ldr	r2, [sp, #28]
 8012c9a:	4654      	mov	r4, sl
 8012c9c:	2000      	movs	r0, #0
 8012c9e:	f04f 0c0a 	mov.w	ip, #10
 8012ca2:	4621      	mov	r1, r4
 8012ca4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ca8:	3b30      	subs	r3, #48	; 0x30
 8012caa:	2b09      	cmp	r3, #9
 8012cac:	d94e      	bls.n	8012d4c <_vfiprintf_r+0x1c4>
 8012cae:	b1b0      	cbz	r0, 8012cde <_vfiprintf_r+0x156>
 8012cb0:	9207      	str	r2, [sp, #28]
 8012cb2:	e014      	b.n	8012cde <_vfiprintf_r+0x156>
 8012cb4:	eba0 0308 	sub.w	r3, r0, r8
 8012cb8:	fa09 f303 	lsl.w	r3, r9, r3
 8012cbc:	4313      	orrs	r3, r2
 8012cbe:	9304      	str	r3, [sp, #16]
 8012cc0:	46a2      	mov	sl, r4
 8012cc2:	e7d2      	b.n	8012c6a <_vfiprintf_r+0xe2>
 8012cc4:	9b03      	ldr	r3, [sp, #12]
 8012cc6:	1d19      	adds	r1, r3, #4
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	9103      	str	r1, [sp, #12]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	bfbb      	ittet	lt
 8012cd0:	425b      	neglt	r3, r3
 8012cd2:	f042 0202 	orrlt.w	r2, r2, #2
 8012cd6:	9307      	strge	r3, [sp, #28]
 8012cd8:	9307      	strlt	r3, [sp, #28]
 8012cda:	bfb8      	it	lt
 8012cdc:	9204      	strlt	r2, [sp, #16]
 8012cde:	7823      	ldrb	r3, [r4, #0]
 8012ce0:	2b2e      	cmp	r3, #46	; 0x2e
 8012ce2:	d10c      	bne.n	8012cfe <_vfiprintf_r+0x176>
 8012ce4:	7863      	ldrb	r3, [r4, #1]
 8012ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8012ce8:	d135      	bne.n	8012d56 <_vfiprintf_r+0x1ce>
 8012cea:	9b03      	ldr	r3, [sp, #12]
 8012cec:	1d1a      	adds	r2, r3, #4
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	9203      	str	r2, [sp, #12]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	bfb8      	it	lt
 8012cf6:	f04f 33ff 	movlt.w	r3, #4294967295
 8012cfa:	3402      	adds	r4, #2
 8012cfc:	9305      	str	r3, [sp, #20]
 8012cfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012de4 <_vfiprintf_r+0x25c>
 8012d02:	7821      	ldrb	r1, [r4, #0]
 8012d04:	2203      	movs	r2, #3
 8012d06:	4650      	mov	r0, sl
 8012d08:	f7ed fa72 	bl	80001f0 <memchr>
 8012d0c:	b140      	cbz	r0, 8012d20 <_vfiprintf_r+0x198>
 8012d0e:	2340      	movs	r3, #64	; 0x40
 8012d10:	eba0 000a 	sub.w	r0, r0, sl
 8012d14:	fa03 f000 	lsl.w	r0, r3, r0
 8012d18:	9b04      	ldr	r3, [sp, #16]
 8012d1a:	4303      	orrs	r3, r0
 8012d1c:	3401      	adds	r4, #1
 8012d1e:	9304      	str	r3, [sp, #16]
 8012d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d24:	482c      	ldr	r0, [pc, #176]	; (8012dd8 <_vfiprintf_r+0x250>)
 8012d26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d2a:	2206      	movs	r2, #6
 8012d2c:	f7ed fa60 	bl	80001f0 <memchr>
 8012d30:	2800      	cmp	r0, #0
 8012d32:	d03f      	beq.n	8012db4 <_vfiprintf_r+0x22c>
 8012d34:	4b29      	ldr	r3, [pc, #164]	; (8012ddc <_vfiprintf_r+0x254>)
 8012d36:	bb1b      	cbnz	r3, 8012d80 <_vfiprintf_r+0x1f8>
 8012d38:	9b03      	ldr	r3, [sp, #12]
 8012d3a:	3307      	adds	r3, #7
 8012d3c:	f023 0307 	bic.w	r3, r3, #7
 8012d40:	3308      	adds	r3, #8
 8012d42:	9303      	str	r3, [sp, #12]
 8012d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d46:	443b      	add	r3, r7
 8012d48:	9309      	str	r3, [sp, #36]	; 0x24
 8012d4a:	e767      	b.n	8012c1c <_vfiprintf_r+0x94>
 8012d4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d50:	460c      	mov	r4, r1
 8012d52:	2001      	movs	r0, #1
 8012d54:	e7a5      	b.n	8012ca2 <_vfiprintf_r+0x11a>
 8012d56:	2300      	movs	r3, #0
 8012d58:	3401      	adds	r4, #1
 8012d5a:	9305      	str	r3, [sp, #20]
 8012d5c:	4619      	mov	r1, r3
 8012d5e:	f04f 0c0a 	mov.w	ip, #10
 8012d62:	4620      	mov	r0, r4
 8012d64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d68:	3a30      	subs	r2, #48	; 0x30
 8012d6a:	2a09      	cmp	r2, #9
 8012d6c:	d903      	bls.n	8012d76 <_vfiprintf_r+0x1ee>
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d0c5      	beq.n	8012cfe <_vfiprintf_r+0x176>
 8012d72:	9105      	str	r1, [sp, #20]
 8012d74:	e7c3      	b.n	8012cfe <_vfiprintf_r+0x176>
 8012d76:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	e7f0      	b.n	8012d62 <_vfiprintf_r+0x1da>
 8012d80:	ab03      	add	r3, sp, #12
 8012d82:	9300      	str	r3, [sp, #0]
 8012d84:	462a      	mov	r2, r5
 8012d86:	4b16      	ldr	r3, [pc, #88]	; (8012de0 <_vfiprintf_r+0x258>)
 8012d88:	a904      	add	r1, sp, #16
 8012d8a:	4630      	mov	r0, r6
 8012d8c:	f7fd fb1e 	bl	80103cc <_printf_float>
 8012d90:	4607      	mov	r7, r0
 8012d92:	1c78      	adds	r0, r7, #1
 8012d94:	d1d6      	bne.n	8012d44 <_vfiprintf_r+0x1bc>
 8012d96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d98:	07d9      	lsls	r1, r3, #31
 8012d9a:	d405      	bmi.n	8012da8 <_vfiprintf_r+0x220>
 8012d9c:	89ab      	ldrh	r3, [r5, #12]
 8012d9e:	059a      	lsls	r2, r3, #22
 8012da0:	d402      	bmi.n	8012da8 <_vfiprintf_r+0x220>
 8012da2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012da4:	f7fd f9ac 	bl	8010100 <__retarget_lock_release_recursive>
 8012da8:	89ab      	ldrh	r3, [r5, #12]
 8012daa:	065b      	lsls	r3, r3, #25
 8012dac:	f53f af12 	bmi.w	8012bd4 <_vfiprintf_r+0x4c>
 8012db0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012db2:	e711      	b.n	8012bd8 <_vfiprintf_r+0x50>
 8012db4:	ab03      	add	r3, sp, #12
 8012db6:	9300      	str	r3, [sp, #0]
 8012db8:	462a      	mov	r2, r5
 8012dba:	4b09      	ldr	r3, [pc, #36]	; (8012de0 <_vfiprintf_r+0x258>)
 8012dbc:	a904      	add	r1, sp, #16
 8012dbe:	4630      	mov	r0, r6
 8012dc0:	f7fd fda8 	bl	8010914 <_printf_i>
 8012dc4:	e7e4      	b.n	8012d90 <_vfiprintf_r+0x208>
 8012dc6:	bf00      	nop
 8012dc8:	0801481c 	.word	0x0801481c
 8012dcc:	0801483c 	.word	0x0801483c
 8012dd0:	080147fc 	.word	0x080147fc
 8012dd4:	08014b84 	.word	0x08014b84
 8012dd8:	08014b8e 	.word	0x08014b8e
 8012ddc:	080103cd 	.word	0x080103cd
 8012de0:	08012b63 	.word	0x08012b63
 8012de4:	08014b8a 	.word	0x08014b8a

08012de8 <_read_r>:
 8012de8:	b538      	push	{r3, r4, r5, lr}
 8012dea:	4d07      	ldr	r5, [pc, #28]	; (8012e08 <_read_r+0x20>)
 8012dec:	4604      	mov	r4, r0
 8012dee:	4608      	mov	r0, r1
 8012df0:	4611      	mov	r1, r2
 8012df2:	2200      	movs	r2, #0
 8012df4:	602a      	str	r2, [r5, #0]
 8012df6:	461a      	mov	r2, r3
 8012df8:	f7f1 fbb4 	bl	8004564 <_read>
 8012dfc:	1c43      	adds	r3, r0, #1
 8012dfe:	d102      	bne.n	8012e06 <_read_r+0x1e>
 8012e00:	682b      	ldr	r3, [r5, #0]
 8012e02:	b103      	cbz	r3, 8012e06 <_read_r+0x1e>
 8012e04:	6023      	str	r3, [r4, #0]
 8012e06:	bd38      	pop	{r3, r4, r5, pc}
 8012e08:	20005e90 	.word	0x20005e90

08012e0c <__assert_func>:
 8012e0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012e0e:	4614      	mov	r4, r2
 8012e10:	461a      	mov	r2, r3
 8012e12:	4b09      	ldr	r3, [pc, #36]	; (8012e38 <__assert_func+0x2c>)
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	4605      	mov	r5, r0
 8012e18:	68d8      	ldr	r0, [r3, #12]
 8012e1a:	b14c      	cbz	r4, 8012e30 <__assert_func+0x24>
 8012e1c:	4b07      	ldr	r3, [pc, #28]	; (8012e3c <__assert_func+0x30>)
 8012e1e:	9100      	str	r1, [sp, #0]
 8012e20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012e24:	4906      	ldr	r1, [pc, #24]	; (8012e40 <__assert_func+0x34>)
 8012e26:	462b      	mov	r3, r5
 8012e28:	f000 f80e 	bl	8012e48 <fiprintf>
 8012e2c:	f000 f88e 	bl	8012f4c <abort>
 8012e30:	4b04      	ldr	r3, [pc, #16]	; (8012e44 <__assert_func+0x38>)
 8012e32:	461c      	mov	r4, r3
 8012e34:	e7f3      	b.n	8012e1e <__assert_func+0x12>
 8012e36:	bf00      	nop
 8012e38:	20000114 	.word	0x20000114
 8012e3c:	08014b95 	.word	0x08014b95
 8012e40:	08014ba2 	.word	0x08014ba2
 8012e44:	08014bd0 	.word	0x08014bd0

08012e48 <fiprintf>:
 8012e48:	b40e      	push	{r1, r2, r3}
 8012e4a:	b503      	push	{r0, r1, lr}
 8012e4c:	4601      	mov	r1, r0
 8012e4e:	ab03      	add	r3, sp, #12
 8012e50:	4805      	ldr	r0, [pc, #20]	; (8012e68 <fiprintf+0x20>)
 8012e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e56:	6800      	ldr	r0, [r0, #0]
 8012e58:	9301      	str	r3, [sp, #4]
 8012e5a:	f7ff fe95 	bl	8012b88 <_vfiprintf_r>
 8012e5e:	b002      	add	sp, #8
 8012e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e64:	b003      	add	sp, #12
 8012e66:	4770      	bx	lr
 8012e68:	20000114 	.word	0x20000114

08012e6c <_fstat_r>:
 8012e6c:	b538      	push	{r3, r4, r5, lr}
 8012e6e:	4d07      	ldr	r5, [pc, #28]	; (8012e8c <_fstat_r+0x20>)
 8012e70:	2300      	movs	r3, #0
 8012e72:	4604      	mov	r4, r0
 8012e74:	4608      	mov	r0, r1
 8012e76:	4611      	mov	r1, r2
 8012e78:	602b      	str	r3, [r5, #0]
 8012e7a:	f7f1 fb9c 	bl	80045b6 <_fstat>
 8012e7e:	1c43      	adds	r3, r0, #1
 8012e80:	d102      	bne.n	8012e88 <_fstat_r+0x1c>
 8012e82:	682b      	ldr	r3, [r5, #0]
 8012e84:	b103      	cbz	r3, 8012e88 <_fstat_r+0x1c>
 8012e86:	6023      	str	r3, [r4, #0]
 8012e88:	bd38      	pop	{r3, r4, r5, pc}
 8012e8a:	bf00      	nop
 8012e8c:	20005e90 	.word	0x20005e90

08012e90 <_isatty_r>:
 8012e90:	b538      	push	{r3, r4, r5, lr}
 8012e92:	4d06      	ldr	r5, [pc, #24]	; (8012eac <_isatty_r+0x1c>)
 8012e94:	2300      	movs	r3, #0
 8012e96:	4604      	mov	r4, r0
 8012e98:	4608      	mov	r0, r1
 8012e9a:	602b      	str	r3, [r5, #0]
 8012e9c:	f7f1 fb9b 	bl	80045d6 <_isatty>
 8012ea0:	1c43      	adds	r3, r0, #1
 8012ea2:	d102      	bne.n	8012eaa <_isatty_r+0x1a>
 8012ea4:	682b      	ldr	r3, [r5, #0]
 8012ea6:	b103      	cbz	r3, 8012eaa <_isatty_r+0x1a>
 8012ea8:	6023      	str	r3, [r4, #0]
 8012eaa:	bd38      	pop	{r3, r4, r5, pc}
 8012eac:	20005e90 	.word	0x20005e90

08012eb0 <__ascii_mbtowc>:
 8012eb0:	b082      	sub	sp, #8
 8012eb2:	b901      	cbnz	r1, 8012eb6 <__ascii_mbtowc+0x6>
 8012eb4:	a901      	add	r1, sp, #4
 8012eb6:	b142      	cbz	r2, 8012eca <__ascii_mbtowc+0x1a>
 8012eb8:	b14b      	cbz	r3, 8012ece <__ascii_mbtowc+0x1e>
 8012eba:	7813      	ldrb	r3, [r2, #0]
 8012ebc:	600b      	str	r3, [r1, #0]
 8012ebe:	7812      	ldrb	r2, [r2, #0]
 8012ec0:	1e10      	subs	r0, r2, #0
 8012ec2:	bf18      	it	ne
 8012ec4:	2001      	movne	r0, #1
 8012ec6:	b002      	add	sp, #8
 8012ec8:	4770      	bx	lr
 8012eca:	4610      	mov	r0, r2
 8012ecc:	e7fb      	b.n	8012ec6 <__ascii_mbtowc+0x16>
 8012ece:	f06f 0001 	mvn.w	r0, #1
 8012ed2:	e7f8      	b.n	8012ec6 <__ascii_mbtowc+0x16>

08012ed4 <_realloc_r>:
 8012ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ed8:	4680      	mov	r8, r0
 8012eda:	4614      	mov	r4, r2
 8012edc:	460e      	mov	r6, r1
 8012ede:	b921      	cbnz	r1, 8012eea <_realloc_r+0x16>
 8012ee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ee4:	4611      	mov	r1, r2
 8012ee6:	f7fd b95d 	b.w	80101a4 <_malloc_r>
 8012eea:	b92a      	cbnz	r2, 8012ef8 <_realloc_r+0x24>
 8012eec:	f7ff fc7a 	bl	80127e4 <_free_r>
 8012ef0:	4625      	mov	r5, r4
 8012ef2:	4628      	mov	r0, r5
 8012ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ef8:	f000 f82f 	bl	8012f5a <_malloc_usable_size_r>
 8012efc:	4284      	cmp	r4, r0
 8012efe:	4607      	mov	r7, r0
 8012f00:	d802      	bhi.n	8012f08 <_realloc_r+0x34>
 8012f02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012f06:	d812      	bhi.n	8012f2e <_realloc_r+0x5a>
 8012f08:	4621      	mov	r1, r4
 8012f0a:	4640      	mov	r0, r8
 8012f0c:	f7fd f94a 	bl	80101a4 <_malloc_r>
 8012f10:	4605      	mov	r5, r0
 8012f12:	2800      	cmp	r0, #0
 8012f14:	d0ed      	beq.n	8012ef2 <_realloc_r+0x1e>
 8012f16:	42bc      	cmp	r4, r7
 8012f18:	4622      	mov	r2, r4
 8012f1a:	4631      	mov	r1, r6
 8012f1c:	bf28      	it	cs
 8012f1e:	463a      	movcs	r2, r7
 8012f20:	f7fd f8ef 	bl	8010102 <memcpy>
 8012f24:	4631      	mov	r1, r6
 8012f26:	4640      	mov	r0, r8
 8012f28:	f7ff fc5c 	bl	80127e4 <_free_r>
 8012f2c:	e7e1      	b.n	8012ef2 <_realloc_r+0x1e>
 8012f2e:	4635      	mov	r5, r6
 8012f30:	e7df      	b.n	8012ef2 <_realloc_r+0x1e>

08012f32 <__ascii_wctomb>:
 8012f32:	b149      	cbz	r1, 8012f48 <__ascii_wctomb+0x16>
 8012f34:	2aff      	cmp	r2, #255	; 0xff
 8012f36:	bf85      	ittet	hi
 8012f38:	238a      	movhi	r3, #138	; 0x8a
 8012f3a:	6003      	strhi	r3, [r0, #0]
 8012f3c:	700a      	strbls	r2, [r1, #0]
 8012f3e:	f04f 30ff 	movhi.w	r0, #4294967295
 8012f42:	bf98      	it	ls
 8012f44:	2001      	movls	r0, #1
 8012f46:	4770      	bx	lr
 8012f48:	4608      	mov	r0, r1
 8012f4a:	4770      	bx	lr

08012f4c <abort>:
 8012f4c:	b508      	push	{r3, lr}
 8012f4e:	2006      	movs	r0, #6
 8012f50:	f000 f834 	bl	8012fbc <raise>
 8012f54:	2001      	movs	r0, #1
 8012f56:	f7f1 fafb 	bl	8004550 <_exit>

08012f5a <_malloc_usable_size_r>:
 8012f5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f5e:	1f18      	subs	r0, r3, #4
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	bfbc      	itt	lt
 8012f64:	580b      	ldrlt	r3, [r1, r0]
 8012f66:	18c0      	addlt	r0, r0, r3
 8012f68:	4770      	bx	lr

08012f6a <_raise_r>:
 8012f6a:	291f      	cmp	r1, #31
 8012f6c:	b538      	push	{r3, r4, r5, lr}
 8012f6e:	4604      	mov	r4, r0
 8012f70:	460d      	mov	r5, r1
 8012f72:	d904      	bls.n	8012f7e <_raise_r+0x14>
 8012f74:	2316      	movs	r3, #22
 8012f76:	6003      	str	r3, [r0, #0]
 8012f78:	f04f 30ff 	mov.w	r0, #4294967295
 8012f7c:	bd38      	pop	{r3, r4, r5, pc}
 8012f7e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012f80:	b112      	cbz	r2, 8012f88 <_raise_r+0x1e>
 8012f82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012f86:	b94b      	cbnz	r3, 8012f9c <_raise_r+0x32>
 8012f88:	4620      	mov	r0, r4
 8012f8a:	f000 f831 	bl	8012ff0 <_getpid_r>
 8012f8e:	462a      	mov	r2, r5
 8012f90:	4601      	mov	r1, r0
 8012f92:	4620      	mov	r0, r4
 8012f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f98:	f000 b818 	b.w	8012fcc <_kill_r>
 8012f9c:	2b01      	cmp	r3, #1
 8012f9e:	d00a      	beq.n	8012fb6 <_raise_r+0x4c>
 8012fa0:	1c59      	adds	r1, r3, #1
 8012fa2:	d103      	bne.n	8012fac <_raise_r+0x42>
 8012fa4:	2316      	movs	r3, #22
 8012fa6:	6003      	str	r3, [r0, #0]
 8012fa8:	2001      	movs	r0, #1
 8012faa:	e7e7      	b.n	8012f7c <_raise_r+0x12>
 8012fac:	2400      	movs	r4, #0
 8012fae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012fb2:	4628      	mov	r0, r5
 8012fb4:	4798      	blx	r3
 8012fb6:	2000      	movs	r0, #0
 8012fb8:	e7e0      	b.n	8012f7c <_raise_r+0x12>
	...

08012fbc <raise>:
 8012fbc:	4b02      	ldr	r3, [pc, #8]	; (8012fc8 <raise+0xc>)
 8012fbe:	4601      	mov	r1, r0
 8012fc0:	6818      	ldr	r0, [r3, #0]
 8012fc2:	f7ff bfd2 	b.w	8012f6a <_raise_r>
 8012fc6:	bf00      	nop
 8012fc8:	20000114 	.word	0x20000114

08012fcc <_kill_r>:
 8012fcc:	b538      	push	{r3, r4, r5, lr}
 8012fce:	4d07      	ldr	r5, [pc, #28]	; (8012fec <_kill_r+0x20>)
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	4604      	mov	r4, r0
 8012fd4:	4608      	mov	r0, r1
 8012fd6:	4611      	mov	r1, r2
 8012fd8:	602b      	str	r3, [r5, #0]
 8012fda:	f7f1 faa9 	bl	8004530 <_kill>
 8012fde:	1c43      	adds	r3, r0, #1
 8012fe0:	d102      	bne.n	8012fe8 <_kill_r+0x1c>
 8012fe2:	682b      	ldr	r3, [r5, #0]
 8012fe4:	b103      	cbz	r3, 8012fe8 <_kill_r+0x1c>
 8012fe6:	6023      	str	r3, [r4, #0]
 8012fe8:	bd38      	pop	{r3, r4, r5, pc}
 8012fea:	bf00      	nop
 8012fec:	20005e90 	.word	0x20005e90

08012ff0 <_getpid_r>:
 8012ff0:	f7f1 ba96 	b.w	8004520 <_getpid>

08012ff4 <_init>:
 8012ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ff6:	bf00      	nop
 8012ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ffa:	bc08      	pop	{r3}
 8012ffc:	469e      	mov	lr, r3
 8012ffe:	4770      	bx	lr

08013000 <_fini>:
 8013000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013002:	bf00      	nop
 8013004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013006:	bc08      	pop	{r3}
 8013008:	469e      	mov	lr, r3
 801300a:	4770      	bx	lr
