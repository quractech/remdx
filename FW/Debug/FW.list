
FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bcc  08013040  08013040  00023040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014c0c  08014c0c  000302e4  2**0
                  CONTENTS
  4 .ARM          00000008  08014c0c  08014c0c  00024c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014c14  08014c14  000302e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014c14  08014c14  00024c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014c18  08014c18  00024c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  08014c1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005bb0  200002e4  08014f00  000302e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005e94  08014f00  00035e94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b321  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006999  00000000  00000000  0005b635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002308  00000000  00000000  00061fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fe8  00000000  00000000  000642d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024bf2  00000000  00000000  000662c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032464  00000000  00000000  0008aeb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac379  00000000  00000000  000bd316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016968f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1ac  00000000  00000000  001696e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e4 	.word	0x200002e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013024 	.word	0x08013024

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e8 	.word	0x200002e8
 80001dc:	08013024 	.word	0x08013024

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig =
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000fae:	4b38      	ldr	r3, [pc, #224]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fb0:	4a38      	ldr	r2, [pc, #224]	; (8001094 <MX_ADC1_Init+0xf8>)
 8000fb2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fb4:	4b36      	ldr	r3, [pc, #216]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fba:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fbc:	4b34      	ldr	r3, [pc, #208]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000fc2:	4b33      	ldr	r3, [pc, #204]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000fc8:	4b31      	ldr	r3, [pc, #196]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fce:	4b30      	ldr	r3, [pc, #192]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fde:	4a2e      	ldr	r2, [pc, #184]	; (8001098 <MX_ADC1_Init+0xfc>)
 8000fe0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe2:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 4;
 8000fe8:	4b29      	ldr	r3, [pc, #164]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000fea:	2204      	movs	r2, #4
 8000fec:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fee:	4b28      	ldr	r3, [pc, #160]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ff6:	4b26      	ldr	r3, [pc, #152]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ffc:	4824      	ldr	r0, [pc, #144]	; (8001090 <MX_ADC1_Init+0xf4>)
 8000ffe:	f003 fcdd 	bl	80049bc <HAL_ADC_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8001008:	f001 fe6e 	bl	8002ce8 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 800100c:	2308      	movs	r3, #8
 800100e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001010:	2301      	movs	r3, #1
 8001012:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001014:	2306      	movs	r3, #6
 8001016:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001018:	463b      	mov	r3, r7
 800101a:	4619      	mov	r1, r3
 800101c:	481c      	ldr	r0, [pc, #112]	; (8001090 <MX_ADC1_Init+0xf4>)
 800101e:	f003 fe1f 	bl	8004c60 <HAL_ADC_ConfigChannel>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8001028:	f001 fe5e 	bl	8002ce8 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800102c:	2309      	movs	r3, #9
 800102e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8001030:	2302      	movs	r3, #2
 8001032:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	4619      	mov	r1, r3
 8001038:	4815      	ldr	r0, [pc, #84]	; (8001090 <MX_ADC1_Init+0xf4>)
 800103a:	f003 fe11 	bl	8004c60 <HAL_ADC_ConfigChannel>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 8001044:	f001 fe50 	bl	8002ce8 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001048:	2310      	movs	r3, #16
 800104a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 800104c:	2303      	movs	r3, #3
 800104e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001050:	2307      	movs	r3, #7
 8001052:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001054:	463b      	mov	r3, r7
 8001056:	4619      	mov	r1, r3
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_ADC1_Init+0xf4>)
 800105a:	f003 fe01 	bl	8004c60 <HAL_ADC_ConfigChannel>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC1_Init+0xcc>
	{
		Error_Handler();
 8001064:	f001 fe40 	bl	8002ce8 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001068:	2311      	movs	r3, #17
 800106a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 800106c:	2304      	movs	r3, #4
 800106e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001070:	2306      	movs	r3, #6
 8001072:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_ADC1_Init+0xf4>)
 800107a:	f003 fdf1 	bl	8004c60 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0xec>
	{
		Error_Handler();
 8001084:	f001 fe30 	bl	8002ce8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000300 	.word	0x20000300
 8001094:	40012000 	.word	0x40012000
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (adcHandle->Instance == ADC1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <HAL_ADC_MspInit+0xdc>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d158      	bne.n	8001170 <HAL_ADC_MspInit+0xd4>
	{
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a2d      	ldr	r2, [pc, #180]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a26      	ldr	r2, [pc, #152]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
		/**ADC1 GPIO Configuration
		 PB0     ------> ADC1_IN8
		 PB1     ------> ADC1_IN9
		 */
		GPIO_InitStruct.Pin = ANA_IN0_Pin | ANA_IN1_Pin;
 80010f6:	2303      	movs	r3, #3
 80010f8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	481d      	ldr	r0, [pc, #116]	; (8001180 <HAL_ADC_MspInit+0xe4>)
 800110a:	f004 fcb7 	bl	8005a7c <HAL_GPIO_Init>

		/* ADC1 DMA Init */
		/* ADC1 Init */
		hdma_adc1.Instance = DMA2_Stream0;
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001110:	4a1d      	ldr	r2, [pc, #116]	; (8001188 <HAL_ADC_MspInit+0xec>)
 8001112:	601a      	str	r2, [r3, #0]
		hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111a:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001120:	4b18      	ldr	r3, [pc, #96]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001126:	4b17      	ldr	r3, [pc, #92]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001128:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112c:	611a      	str	r2, [r3, #16]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001130:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001134:	615a      	str	r2, [r3, #20]
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001138:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800113c:	619a      	str	r2, [r3, #24]
		hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001140:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001144:	61da      	str	r2, [r3, #28]
		hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001148:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800114c:	621a      	str	r2, [r3, #32]
		hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001156:	f004 f921 	bl	800539c <HAL_DMA_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_ADC_MspInit+0xc8>
		{
			Error_Handler();
 8001160:	f001 fdc2 	bl	8002ce8 <Error_Handler>
		}

		__HAL_LINKDMA(adcHandle, DMA_Handle, hdma_adc1);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001168:	639a      	str	r2, [r3, #56]	; 0x38
 800116a:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6393      	str	r3, [r2, #56]	; 0x38

		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 8001170:	bf00      	nop
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40012000 	.word	0x40012000
 800117c:	40023800 	.word	0x40023800
 8001180:	40020400 	.word	0x40020400
 8001184:	20000348 	.word	0x20000348
 8001188:	40026410 	.word	0x40026410

0800118c <adcRead>:
	}
}

/* USER CODE BEGIN 1 */
uint32_t adcRead(uint16_t channel)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]
	return adc_data[channel];
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <adcRead+0x20>)
 800119a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	200006a8 	.word	0x200006a8

080011b0 <EEPROMWriteByte>:
	float floatVariable = thing.a;
	return floatVariable;
}

void EEPROMWriteByte(uint16_t page, uint16_t offset, uint8_t *data)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af04      	add	r7, sp, #16
 80011b6:	4603      	mov	r3, r0
 80011b8:	603a      	str	r2, [r7, #0]
 80011ba:	80fb      	strh	r3, [r7, #6]
 80011bc:	460b      	mov	r3, r1
 80011be:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2120      	movs	r1, #32
 80011c4:	4817      	ldr	r0, [pc, #92]	; (8001224 <EEPROMWriteByte+0x74>)
 80011c6:	f004 fdf5 	bl	8005db4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80011ca:	2001      	movs	r0, #1
 80011cc:	f003 fbd2 	bl	8004974 <HAL_Delay>
	int paddrposition = 6;
 80011d0:	2306      	movs	r3, #6
 80011d2:	617b      	str	r3, [r7, #20]
	uint16_t startPage = page;
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	827b      	strh	r3, [r7, #18]
	uint16_t endPage = page;
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	823b      	strh	r3, [r7, #16]
	uint16_t MemAddress = ((startPage << paddrposition) | offset);
 80011dc:	8a7a      	ldrh	r2, [r7, #18]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	81fb      	strh	r3, [r7, #14]

	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data, 1, 1000);
 80011f0:	89fa      	ldrh	r2, [r7, #14]
 80011f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	2301      	movs	r3, #1
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	463b      	mov	r3, r7
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2302      	movs	r3, #2
 8001202:	21a0      	movs	r1, #160	; 0xa0
 8001204:	4808      	ldr	r0, [pc, #32]	; (8001228 <EEPROMWriteByte+0x78>)
 8001206:	f005 fa95 	bl	8006734 <HAL_I2C_Mem_Write>
	HAL_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, SET);
 800120a:	2201      	movs	r2, #1
 800120c:	2120      	movs	r1, #32
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <EEPROMWriteByte+0x74>)
 8001210:	f004 fdd0 	bl	8005db4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001214:	2001      	movs	r0, #1
 8001216:	f003 fbad 	bl	8004974 <HAL_Delay>
}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40020400 	.word	0x40020400
 8001228:	200006d0 	.word	0x200006d0

0800122c <EEPROMReadByte>:
		HAL_Delay(1);
	}
}

uint8_t EEPROMReadByte(uint16_t page, uint16_t offset)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af04      	add	r7, sp, #16
 8001232:	4603      	mov	r3, r0
 8001234:	460a      	mov	r2, r1
 8001236:	80fb      	strh	r3, [r7, #6]
 8001238:	4613      	mov	r3, r2
 800123a:	80bb      	strh	r3, [r7, #4]
	uint8_t *data;
	int paddrposition = 6;
 800123c:	2306      	movs	r3, #6
 800123e:	617b      	str	r3, [r7, #20]
	uint16_t startPage = page;
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	827b      	strh	r3, [r7, #18]
	uint16_t endPage = page;
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	823b      	strh	r3, [r7, #16]
	uint16_t MemAddress = ((startPage << paddrposition) | offset);
 8001248:	8a7a      	ldrh	r2, [r7, #18]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	b21a      	sxth	r2, r3
 8001252:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001256:	4313      	orrs	r3, r2
 8001258:	b21b      	sxth	r3, r3
 800125a:	81fb      	strh	r3, [r7, #14]

	HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data, 1, 1000);
 800125c:	89fa      	ldrh	r2, [r7, #14]
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	2301      	movs	r3, #1
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2302      	movs	r3, #2
 8001270:	21a0      	movs	r1, #160	; 0xa0
 8001272:	4804      	ldr	r0, [pc, #16]	; (8001284 <EEPROMReadByte+0x58>)
 8001274:	f005 fb58 	bl	8006928 <HAL_I2C_Mem_Read>
	return data;
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	b2db      	uxtb	r3, r3
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200006d0 	.word	0x200006d0

08001288 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_DMA_Init+0x3c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <MX_DMA_Init+0x3c>)
 8001298:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_DMA_Init+0x3c>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2105      	movs	r1, #5
 80012ae:	2038      	movs	r0, #56	; 0x38
 80012b0:	f004 f845 	bl	800533e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012b4:	2038      	movs	r0, #56	; 0x38
 80012b6:	f004 f85e 	bl	8005376 <HAL_NVIC_EnableIRQ>

}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800

080012c8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
	/* This function will be called by each tick interrupt if
	 configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
	 added here, but the tick hook is called from an interrupt context, so
	 code must not attempt to block, and only the interrupt safe FreeRTOS API
	 functions can be used (those that end in FromISR()). */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
	 demo application. If heap_1.c or heap_2.c are used, then the size of the
	 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	 to query the size of free heap space that remains (although it does not
	 provide information on how the remaining heap might be fragmented). */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer,
		uint32_t *pulIdleTaskStackSize)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4a07      	ldr	r2, [pc, #28]	; (8001334 <vApplicationGetIdleTaskMemory+0x2c>)
 8001318:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	4a06      	ldr	r2, [pc, #24]	; (8001338 <vApplicationGetIdleTaskMemory+0x30>)
 800131e:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	200003e0 	.word	0x200003e0
 8001338:	20000498 	.word	0x20000498

0800133c <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 800133c:	b5b0      	push	{r4, r5, r7, lr}
 800133e:	b0aa      	sub	sp, #168	; 0xa8
 8001340:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of LED1Task */
	osThreadDef(LED1Task, startLED1Task, osPriorityNormal, 0, 128);
 8001342:	4b3a      	ldr	r3, [pc, #232]	; (800142c <MX_FREERTOS_Init+0xf0>)
 8001344:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001348:	461d      	mov	r5, r3
 800134a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800134c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800134e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001352:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	LED1TaskHandle = osThreadCreate(osThread(LED1Task), NULL);
 8001356:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f00c fd7c 	bl	800de5a <osThreadCreate>
 8001362:	4603      	mov	r3, r0
 8001364:	4a32      	ldr	r2, [pc, #200]	; (8001430 <MX_FREERTOS_Init+0xf4>)
 8001366:	6013      	str	r3, [r2, #0]

	/* definition and creation of USBTask */
	osThreadDef(USBTask, startUSBTask, osPriorityNormal, 0, 256);
 8001368:	4b32      	ldr	r3, [pc, #200]	; (8001434 <MX_FREERTOS_Init+0xf8>)
 800136a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800136e:	461d      	mov	r5, r3
 8001370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001374:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001378:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	USBTaskHandle = osThreadCreate(osThread(USBTask), NULL);
 800137c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f00c fd69 	bl	800de5a <osThreadCreate>
 8001388:	4603      	mov	r3, r0
 800138a:	4a2b      	ldr	r2, [pc, #172]	; (8001438 <MX_FREERTOS_Init+0xfc>)
 800138c:	6013      	str	r3, [r2, #0]

	/* definition and creation of OLEDUpdateTask */
	osThreadDef(OLEDUpdateTask, startOLEDUpdateTask, osPriorityLow, 0, 256);
 800138e:	4b2b      	ldr	r3, [pc, #172]	; (800143c <MX_FREERTOS_Init+0x100>)
 8001390:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001394:	461d      	mov	r5, r3
 8001396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800139a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800139e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	OLEDUpdateTaskHandle = osThreadCreate(osThread(OLEDUpdateTask), NULL);
 80013a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f00c fd56 	bl	800de5a <osThreadCreate>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a23      	ldr	r2, [pc, #140]	; (8001440 <MX_FREERTOS_Init+0x104>)
 80013b2:	6013      	str	r3, [r2, #0]

	/* definition and creation of fetchReadingTask */
	osThreadDef(fetchReadingTask, startFetchReadingTask, osPriorityHigh, 0, 512);
 80013b4:	4b23      	ldr	r3, [pc, #140]	; (8001444 <MX_FREERTOS_Init+0x108>)
 80013b6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80013ba:	461d      	mov	r5, r3
 80013bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	fetchReadingTaskHandle = osThreadCreate(osThread(fetchReadingTask), NULL);
 80013c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00c fd43 	bl	800de5a <osThreadCreate>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a1c      	ldr	r2, [pc, #112]	; (8001448 <MX_FREERTOS_Init+0x10c>)
 80013d8:	6013      	str	r3, [r2, #0]

	/* definition and creation of regUpdateTask */
	osThreadDef(regUpdateTask, startRegUpdateTask, osPriorityAboveNormal, 0, 256);
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <MX_FREERTOS_Init+0x110>)
 80013dc:	f107 041c 	add.w	r4, r7, #28
 80013e0:	461d      	mov	r5, r3
 80013e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	regUpdateTaskHandle = osThreadCreate(osThread(regUpdateTask), NULL);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f00c fd30 	bl	800de5a <osThreadCreate>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a14      	ldr	r2, [pc, #80]	; (8001450 <MX_FREERTOS_Init+0x114>)
 80013fe:	6013      	str	r3, [r2, #0]

	/* definition and creation of LED2Task */
	osThreadDef(LED2Task, startLED2Task, osPriorityIdle, 0, 128);
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_FREERTOS_Init+0x118>)
 8001402:	463c      	mov	r4, r7
 8001404:	461d      	mov	r5, r3
 8001406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800140e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	LED2TaskHandle = osThreadCreate(osThread(LED2Task), NULL);
 8001412:	463b      	mov	r3, r7
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f00c fd1f 	bl	800de5a <osThreadCreate>
 800141c:	4603      	mov	r3, r0
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <MX_FREERTOS_Init+0x11c>)
 8001420:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 8001422:	bf00      	nop
 8001424:	37a8      	adds	r7, #168	; 0xa8
 8001426:	46bd      	mov	sp, r7
 8001428:	bdb0      	pop	{r4, r5, r7, pc}
 800142a:	bf00      	nop
 800142c:	08013094 	.word	0x08013094
 8001430:	200003c8 	.word	0x200003c8
 8001434:	080130b0 	.word	0x080130b0
 8001438:	200003cc 	.word	0x200003cc
 800143c:	080130cc 	.word	0x080130cc
 8001440:	200003d0 	.word	0x200003d0
 8001444:	080130e8 	.word	0x080130e8
 8001448:	200003d4 	.word	0x200003d4
 800144c:	08013104 	.word	0x08013104
 8001450:	200003d8 	.word	0x200003d8
 8001454:	08013120 	.word	0x08013120
 8001458:	200003dc 	.word	0x200003dc

0800145c <startLED1Task>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startLED1Task */
void startLED1Task(void const *argument)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
//	MX_USB_DEVICE_Init();
	/* USER CODE BEGIN startLED1Task */
	/* Infinite loop */
	for (;;)
	{
		if (newSetupData.setRegister.blink_led1 == 1)
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <startLED1Task+0x50>)
 8001466:	7edb      	ldrb	r3, [r3, #27]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d108      	bne.n	800147e <startLED1Task+0x22>
		{
			newSetupData.setRegister.set_led1 = 0;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <startLED1Task+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	765a      	strb	r2, [r3, #25]
			led1Blink(newSetupData.setRegister.led1_blink_rate);
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <startLED1Task+0x50>)
 8001474:	8b9b      	ldrh	r3, [r3, #28]
 8001476:	4618      	mov	r0, r3
 8001478:	f001 f9c2 	bl	8002800 <led1Blink>
 800147c:	e7f2      	b.n	8001464 <startLED1Task+0x8>
		}
		else if (newSetupData.setRegister.set_led1 == 1 && newSetupData.setRegister.blink_led1 == 0)
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <startLED1Task+0x50>)
 8001480:	7e5b      	ldrb	r3, [r3, #25]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d10a      	bne.n	800149c <startLED1Task+0x40>
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <startLED1Task+0x50>)
 8001488:	7edb      	ldrb	r3, [r3, #27]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d106      	bne.n	800149c <startLED1Task+0x40>
		{
			led1On();
 800148e:	f001 f987 	bl	80027a0 <led1On>
			osDelay(LED1UpdateTime);
 8001492:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001496:	f00c fd2c 	bl	800def2 <osDelay>
		{
 800149a:	e005      	b.n	80014a8 <startLED1Task+0x4c>
		}
		else
		{
			led1Off();
 800149c:	f001 f998 	bl	80027d0 <led1Off>
			osDelay(LED1UpdateTime);
 80014a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014a4:	f00c fd25 	bl	800def2 <osDelay>
		if (newSetupData.setRegister.blink_led1 == 1)
 80014a8:	e7dc      	b.n	8001464 <startLED1Task+0x8>
 80014aa:	bf00      	nop
 80014ac:	20000724 	.word	0x20000724

080014b0 <startUSBTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUSBTask */
void startUSBTask(void const *argument)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startUSBTask */
	/* Infinite loop */
	for (;;)
	{
//		printf("g_regMapUpdateFlag=%d\r\n", g_regMapUpdateFlag);
		streamMeasurements(&newSetupData, &lm75adAmbTemp, &channel1Data, &channel2Data);
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <startUSBTask+0x1c>)
 80014ba:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <startUSBTask+0x20>)
 80014bc:	4905      	ldr	r1, [pc, #20]	; (80014d4 <startUSBTask+0x24>)
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <startUSBTask+0x28>)
 80014c0:	f000 fca4 	bl	8001e0c <streamMeasurements>
//		printf("id0 = %d\r\n", newSetupData.setRegister.id0);
		osDelay(USBUpdateTime);
 80014c4:	2064      	movs	r0, #100	; 0x64
 80014c6:	f00c fd14 	bl	800def2 <osDelay>
	{
 80014ca:	e7f5      	b.n	80014b8 <startUSBTask+0x8>
 80014cc:	200003b8 	.word	0x200003b8
 80014d0:	200003a8 	.word	0x200003a8
 80014d4:	200006a4 	.word	0x200006a4
 80014d8:	20000724 	.word	0x20000724

080014dc <startOLEDUpdateTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startOLEDUpdateTask */
void startOLEDUpdateTask(void const *argument)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startOLEDUpdateTask */
	/* Infinite loop */
	for (;;)
	{
		displayEfficiency(1, &channel1Data, &channel2Data, &lm75adAmbTemp);
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <startOLEDUpdateTask+0x20>)
 80014e6:	4a06      	ldr	r2, [pc, #24]	; (8001500 <startOLEDUpdateTask+0x24>)
 80014e8:	4906      	ldr	r1, [pc, #24]	; (8001504 <startOLEDUpdateTask+0x28>)
 80014ea:	2001      	movs	r0, #1
 80014ec:	f000 f9e2 	bl	80018b4 <displayEfficiency>
		osDelay(OLEDUpdateTime);
 80014f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014f4:	f00c fcfd 	bl	800def2 <osDelay>
	{
 80014f8:	e7f4      	b.n	80014e4 <startOLEDUpdateTask+0x8>
 80014fa:	bf00      	nop
 80014fc:	200006a4 	.word	0x200006a4
 8001500:	200003b8 	.word	0x200003b8
 8001504:	200003a8 	.word	0x200003a8

08001508 <startFetchReadingTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startFetchReadingTask */
void startFetchReadingTask(void const *argument)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startFetchReadingTask */
	/* Infinite loop */
	for (;;)
	{
		lm75adAmbTemp = lm75ad_getTempValue(&hi2c1, LM75AD_ADDRESS, lm75adAmbTemp);
 8001510:	4b4b      	ldr	r3, [pc, #300]	; (8001640 <startFetchReadingTask+0x138>)
 8001512:	edd3 7a00 	vldr	s15, [r3]
 8001516:	eeb0 0a67 	vmov.f32	s0, s15
 800151a:	2190      	movs	r1, #144	; 0x90
 800151c:	4849      	ldr	r0, [pc, #292]	; (8001644 <startFetchReadingTask+0x13c>)
 800151e:	f001 fa75 	bl	8002a0c <lm75ad_getTempValue>
 8001522:	eef0 7a40 	vmov.f32	s15, s0
 8001526:	4b46      	ldr	r3, [pc, #280]	; (8001640 <startFetchReadingTask+0x138>)
 8001528:	edc3 7a00 	vstr	s15, [r3]
		ina226_getResult(&channel1Data, &hi2c1, CH1_ADDRESS);
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	4945      	ldr	r1, [pc, #276]	; (8001644 <startFetchReadingTask+0x13c>)
 8001530:	4845      	ldr	r0, [pc, #276]	; (8001648 <startFetchReadingTask+0x140>)
 8001532:	f001 f831 	bl	8002598 <ina226_getResult>
		ina226_getResult(&channel2Data, &hi2c1, CH2_ADDRESS);
 8001536:	2282      	movs	r2, #130	; 0x82
 8001538:	4942      	ldr	r1, [pc, #264]	; (8001644 <startFetchReadingTask+0x13c>)
 800153a:	4844      	ldr	r0, [pc, #272]	; (800164c <startFetchReadingTask+0x144>)
 800153c:	f001 f82c 	bl	8002598 <ina226_getResult>
		stm32Temp = (VSENSE * adcRead(MCU_TEMP_ADC_CHANNEL) - V25) / Avg_Slope + 25.0;
 8001540:	2002      	movs	r0, #2
 8001542:	f7ff fe23 	bl	800118c <adcRead>
 8001546:	4603      	mov	r3, r0
 8001548:	4618      	mov	r0, r3
 800154a:	f7fe fff3 	bl	8000534 <__aeabi_i2d>
 800154e:	a336      	add	r3, pc, #216	; (adr r3, 8001628 <startFetchReadingTask+0x120>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7ff f858 	bl	8000608 <__aeabi_dmul>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	a333      	add	r3, pc, #204	; (adr r3, 8001630 <startFetchReadingTask+0x128>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	f7fe fe97 	bl	8000298 <__aeabi_dsub>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	a331      	add	r3, pc, #196	; (adr r3, 8001638 <startFetchReadingTask+0x130>)
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	f7ff f970 	bl	800085c <__aeabi_ddiv>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	4b31      	ldr	r3, [pc, #196]	; (8001650 <startFetchReadingTask+0x148>)
 800158a:	f7fe fe87 	bl	800029c <__adddf3>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fb2f 	bl	8000bf8 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	4a2d      	ldr	r2, [pc, #180]	; (8001654 <startFetchReadingTask+0x14c>)
 800159e:	6013      	str	r3, [r2, #0]
		stm32Vref = (VSENSE) * adcRead(MCU_INT_REF_ADC_CHANNEL);
 80015a0:	2003      	movs	r0, #3
 80015a2:	f7ff fdf3 	bl	800118c <adcRead>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe ffc3 	bl	8000534 <__aeabi_i2d>
 80015ae:	a31e      	add	r3, pc, #120	; (adr r3, 8001628 <startFetchReadingTask+0x120>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7ff f828 	bl	8000608 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fb1a 	bl	8000bf8 <__aeabi_d2f>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4a24      	ldr	r2, [pc, #144]	; (8001658 <startFetchReadingTask+0x150>)
 80015c8:	6013      	str	r3, [r2, #0]

		ina_in0 = (VSENSE) * adcRead(INA_IN0_ADC_CHANNEL);
 80015ca:	2000      	movs	r0, #0
 80015cc:	f7ff fdde 	bl	800118c <adcRead>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ffae 	bl	8000534 <__aeabi_i2d>
 80015d8:	a313      	add	r3, pc, #76	; (adr r3, 8001628 <startFetchReadingTask+0x120>)
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f7ff f813 	bl	8000608 <__aeabi_dmul>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff fb05 	bl	8000bf8 <__aeabi_d2f>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4a1a      	ldr	r2, [pc, #104]	; (800165c <startFetchReadingTask+0x154>)
 80015f2:	6013      	str	r3, [r2, #0]

		ina_in1 = VSENSE * adcRead(INA_IN1_ADC_CHANNEL);
 80015f4:	2001      	movs	r0, #1
 80015f6:	f7ff fdc9 	bl	800118c <adcRead>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ff99 	bl	8000534 <__aeabi_i2d>
 8001602:	a309      	add	r3, pc, #36	; (adr r3, 8001628 <startFetchReadingTask+0x120>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f7fe fffe 	bl	8000608 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f7ff faf0 	bl	8000bf8 <__aeabi_d2f>
 8001618:	4603      	mov	r3, r0
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <startFetchReadingTask+0x158>)
 800161c:	6013      	str	r3, [r2, #0]
//		stm32Vref = (VSENSE) * adcRead(3);
//
//		ina_in0 = (VSENSE) * adcRead(0);
//
//		ina_in1 = VSENSE * adcRead(1);
		osDelay(100);
 800161e:	2064      	movs	r0, #100	; 0x64
 8001620:	f00c fc67 	bl	800def2 <osDelay>
	{
 8001624:	e774      	b.n	8001510 <startFetchReadingTask+0x8>
 8001626:	bf00      	nop
 8001628:	c6a7ef9e 	.word	0xc6a7ef9e
 800162c:	3f4a374b 	.word	0x3f4a374b
 8001630:	851eb852 	.word	0x851eb852
 8001634:	3fe851eb 	.word	0x3fe851eb
 8001638:	47ae147b 	.word	0x47ae147b
 800163c:	3f647ae1 	.word	0x3f647ae1
 8001640:	200006a4 	.word	0x200006a4
 8001644:	200006d0 	.word	0x200006d0
 8001648:	200003a8 	.word	0x200003a8
 800164c:	200003b8 	.word	0x200003b8
 8001650:	40390000 	.word	0x40390000
 8001654:	200006c0 	.word	0x200006c0
 8001658:	200006c4 	.word	0x200006c4
 800165c:	200006c8 	.word	0x200006c8
 8001660:	200006cc 	.word	0x200006cc

08001664 <startRegUpdateTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startRegUpdateTask */
void startRegUpdateTask(void const *argument)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startRegUpdateTask */
	/* Infinite loop */
	for (;;)
	{
		if (g_regMapUpdateFlag)
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <startRegUpdateTask+0x44>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d007      	beq.n	8001684 <startRegUpdateTask+0x20>
		{
			registerMap(USBRXDataBuffer);
 8001674:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <startRegUpdateTask+0x48>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f001 fb99 	bl	8002db0 <registerMap>
			g_regMapUpdateFlag = 0;
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <startRegUpdateTask+0x44>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
		}
		if (g_HWUpdateFlag)
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <startRegUpdateTask+0x4c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <startRegUpdateTask+0x3a>
		{
			configHW(&newSetupData, g_HWUpdateFlag);
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <startRegUpdateTask+0x4c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	4808      	ldr	r0, [pc, #32]	; (80016b4 <startRegUpdateTask+0x50>)
 8001694:	f000 fb6c 	bl	8001d70 <configHW>
			g_HWUpdateFlag = 0;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <startRegUpdateTask+0x4c>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
		}

		osDelay(100);
 800169e:	2064      	movs	r0, #100	; 0x64
 80016a0:	f00c fc27 	bl	800def2 <osDelay>
		if (g_regMapUpdateFlag)
 80016a4:	e7e2      	b.n	800166c <startRegUpdateTask+0x8>
 80016a6:	bf00      	nop
 80016a8:	200006a0 	.word	0x200006a0
 80016ac:	2000069c 	.word	0x2000069c
 80016b0:	200006b8 	.word	0x200006b8
 80016b4:	20000724 	.word	0x20000724

080016b8 <startLED2Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startLED2Task */
void startLED2Task(void const *argument)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startLED2Task */
	/* Infinite loop */
	for (;;)
	{
		if (newSetupData.setRegister.blink_led2 == 1)
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <startLED2Task+0x58>)
 80016c2:	7f9b      	ldrb	r3, [r3, #30]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d10c      	bne.n	80016e2 <startLED2Task+0x2a>
		{
			newSetupData.setRegister.set_led2 = 0;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <startLED2Task+0x58>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	769a      	strb	r2, [r3, #26]
//			led2Blink(newSetupData.setRegister.led2_blink_rate);
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80016ce:	2110      	movs	r1, #16
 80016d0:	4810      	ldr	r0, [pc, #64]	; (8001714 <startLED2Task+0x5c>)
 80016d2:	f004 fb88 	bl	8005de6 <HAL_GPIO_TogglePin>
			osDelay(newSetupData.setRegister.led2_blink_rate);
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <startLED2Task+0x58>)
 80016d8:	8c1b      	ldrh	r3, [r3, #32]
 80016da:	4618      	mov	r0, r3
 80016dc:	f00c fc09 	bl	800def2 <osDelay>
 80016e0:	e7ee      	b.n	80016c0 <startLED2Task+0x8>
		}
		else if (newSetupData.setRegister.set_led2 == 1 && newSetupData.setRegister.blink_led2 == 0)
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <startLED2Task+0x58>)
 80016e4:	7e9b      	ldrb	r3, [r3, #26]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d10a      	bne.n	8001700 <startLED2Task+0x48>
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <startLED2Task+0x58>)
 80016ec:	7f9b      	ldrb	r3, [r3, #30]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d106      	bne.n	8001700 <startLED2Task+0x48>
		{
			led2On();
 80016f2:	f001 f861 	bl	80027b8 <led2On>
			osDelay(LED2UpdateTime);
 80016f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016fa:	f00c fbfa 	bl	800def2 <osDelay>
		{
 80016fe:	e005      	b.n	800170c <startLED2Task+0x54>
		}
		else
		{
			led2Off();
 8001700:	f001 f872 	bl	80027e8 <led2Off>
			osDelay(LED2UpdateTime);
 8001704:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001708:	f00c fbf3 	bl	800def2 <osDelay>
		if (newSetupData.setRegister.blink_led2 == 1)
 800170c:	e7d8      	b.n	80016c0 <startLED2Task+0x8>
 800170e:	bf00      	nop
 8001710:	20000724 	.word	0x20000724
 8001714:	40020000 	.word	0x40020000

08001718 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b5c      	ldr	r3, [pc, #368]	; (80018a4 <MX_GPIO_Init+0x18c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a5b      	ldr	r2, [pc, #364]	; (80018a4 <MX_GPIO_Init+0x18c>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b59      	ldr	r3, [pc, #356]	; (80018a4 <MX_GPIO_Init+0x18c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b55      	ldr	r3, [pc, #340]	; (80018a4 <MX_GPIO_Init+0x18c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a54      	ldr	r2, [pc, #336]	; (80018a4 <MX_GPIO_Init+0x18c>)
 8001754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b52      	ldr	r3, [pc, #328]	; (80018a4 <MX_GPIO_Init+0x18c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	4b4e      	ldr	r3, [pc, #312]	; (80018a4 <MX_GPIO_Init+0x18c>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a4d      	ldr	r2, [pc, #308]	; (80018a4 <MX_GPIO_Init+0x18c>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b4b      	ldr	r3, [pc, #300]	; (80018a4 <MX_GPIO_Init+0x18c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	4b47      	ldr	r3, [pc, #284]	; (80018a4 <MX_GPIO_Init+0x18c>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a46      	ldr	r2, [pc, #280]	; (80018a4 <MX_GPIO_Init+0x18c>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b44      	ldr	r3, [pc, #272]	; (80018a4 <MX_GPIO_Init+0x18c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|SDCard_CS_Pin|Auto_off_dis_Pin, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	f248 4110 	movw	r1, #33808	; 0x8410
 80017a4:	4840      	ldr	r0, [pc, #256]	; (80018a8 <MX_GPIO_Init+0x190>)
 80017a6:	f004 fb05 	bl	8005db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|EEPROM_WP_Pin, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80017b0:	483e      	ldr	r0, [pc, #248]	; (80018ac <MX_GPIO_Init+0x194>)
 80017b2:	f004 faff 	bl	8005db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIG_OUT0_Pin|DIG_OUT1_Pin, GPIO_PIN_SET);
 80017b6:	2201      	movs	r2, #1
 80017b8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80017bc:	483b      	ldr	r0, [pc, #236]	; (80018ac <MX_GPIO_Init+0x194>)
 80017be:	f004 faf9 	bl	8005db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = INT_OUT_Pin|INT_IN_Pin|TEMP_IRQ_Pin;
 80017c2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80017c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4619      	mov	r1, r3
 80017d8:	4835      	ldr	r0, [pc, #212]	; (80018b0 <MX_GPIO_Init+0x198>)
 80017da:	f004 f94f 	bl	8005a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80017de:	2310      	movs	r3, #16
 80017e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017e6:	2301      	movs	r3, #1
 80017e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	482c      	ldr	r0, [pc, #176]	; (80018a8 <MX_GPIO_Init+0x190>)
 80017f6:	f004 f941 	bl	8005a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|DIG_OUT0_Pin|DIG_OUT1_Pin|EEPROM_WP_Pin;
 80017fa:	f243 4320 	movw	r3, #13344	; 0x3420
 80017fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	2301      	movs	r3, #1
 8001802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	4826      	ldr	r0, [pc, #152]	; (80018ac <MX_GPIO_Init+0x194>)
 8001814:	f004 f932 	bl	8005a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIG_IN0_Pin|DIG_IN1_Pin;
 8001818:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800181c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	481f      	ldr	r0, [pc, #124]	; (80018ac <MX_GPIO_Init+0x194>)
 800182e:	f004 f925 	bl	8005a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SDCard_CS_Pin|Auto_off_dis_Pin;
 8001832:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	4817      	ldr	r0, [pc, #92]	; (80018a8 <MX_GPIO_Init+0x190>)
 800184c:	f004 f916 	bl	8005a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = INT_IN0_Pin|INT_IN1_Pin;
 8001850:	2318      	movs	r3, #24
 8001852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001854:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	4811      	ldr	r0, [pc, #68]	; (80018ac <MX_GPIO_Init+0x194>)
 8001866:	f004 f909 	bl	8005a7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2105      	movs	r1, #5
 800186e:	2009      	movs	r0, #9
 8001870:	f003 fd65 	bl	800533e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001874:	2009      	movs	r0, #9
 8001876:	f003 fd7e 	bl	8005376 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2105      	movs	r1, #5
 800187e:	200a      	movs	r0, #10
 8001880:	f003 fd5d 	bl	800533e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001884:	200a      	movs	r0, #10
 8001886:	f003 fd76 	bl	8005376 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2105      	movs	r1, #5
 800188e:	2028      	movs	r0, #40	; 0x28
 8001890:	f003 fd55 	bl	800533e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001894:	2028      	movs	r0, #40	; 0x28
 8001896:	f003 fd6e 	bl	8005376 <HAL_NVIC_EnableIRQ>

}
 800189a:	bf00      	nop
 800189c:	3728      	adds	r7, #40	; 0x28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020000 	.word	0x40020000
 80018ac:	40020400 	.word	0x40020400
 80018b0:	40020800 	.word	0x40020800

080018b4 <displayEfficiency>:
 */

#include "hw.h"

void displayEfficiency(uint8_t en_disp, Ina226Data_t *ch1Data, Ina226Data_t *ch2Data, float *temp_data)
{
 80018b4:	b5b0      	push	{r4, r5, r7, lr}
 80018b6:	b08e      	sub	sp, #56	; 0x38
 80018b8:	af02      	add	r7, sp, #8
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	4603      	mov	r3, r0
 80018c2:	73fb      	strb	r3, [r7, #15]
	char str[28];
	if (en_disp == 1)
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	f040 818a 	bne.w	8001be0 <displayEfficiency+0x32c>
	{
		ssd1306_SetDisplayOn(1);
 80018cc:	2001      	movs	r0, #1
 80018ce:	f002 fd2b 	bl	8004328 <ssd1306_SetDisplayOn>
		ssd1306_Fill(Black);
 80018d2:	2000      	movs	r0, #0
 80018d4:	f002 fba2 	bl	800401c <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 80018d8:	2100      	movs	r1, #0
 80018da:	2000      	movs	r0, #0
 80018dc:	f002 fcf8 	bl	80042d0 <ssd1306_SetCursor>
		sprintf(str, "%0.1fC|%0.1f%%", *temp_data, ((ch2Data->power / ch1Data->power) * 100));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fe37 	bl	8000558 <__aeabi_f2d>
 80018ea:	4604      	mov	r4, r0
 80018ec:	460d      	mov	r5, r1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	edd3 6a03 	vldr	s13, [r3, #12]
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	ed93 7a03 	vldr	s14, [r3, #12]
 80018fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018fe:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8001bf0 <displayEfficiency+0x33c>
 8001902:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001906:	ee17 0a90 	vmov	r0, s15
 800190a:	f7fe fe25 	bl	8000558 <__aeabi_f2d>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	f107 0014 	add.w	r0, r7, #20
 8001916:	e9cd 2300 	strd	r2, r3, [sp]
 800191a:	4622      	mov	r2, r4
 800191c:	462b      	mov	r3, r5
 800191e:	49b5      	ldr	r1, [pc, #724]	; (8001bf4 <displayEfficiency+0x340>)
 8001920:	f00f fa3e 	bl	8010da0 <siprintf>
		ssd1306_WriteString(str, Font_11x18, White);
 8001924:	4ab4      	ldr	r2, [pc, #720]	; (8001bf8 <displayEfficiency+0x344>)
 8001926:	f107 0014 	add.w	r0, r7, #20
 800192a:	2301      	movs	r3, #1
 800192c:	ca06      	ldmia	r2, {r1, r2}
 800192e:	f002 fca9 	bl	8004284 <ssd1306_WriteString>

		ssd1306_SetCursor(0, 24);
 8001932:	2118      	movs	r1, #24
 8001934:	2000      	movs	r0, #0
 8001936:	f002 fccb 	bl	80042d0 <ssd1306_SetCursor>
		(ch1Data->vbus >= 1 ? sprintf(str, "%0.3f", ch1Data->vbus) : sprintf(str, "%0.3f", ch1Data->vbus));
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001940:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001944:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194c:	db0c      	blt.n	8001968 <displayEfficiency+0xb4>
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fe00 	bl	8000558 <__aeabi_f2d>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	f107 0014 	add.w	r0, r7, #20
 8001960:	49a6      	ldr	r1, [pc, #664]	; (8001bfc <displayEfficiency+0x348>)
 8001962:	f00f fa1d 	bl	8010da0 <siprintf>
 8001966:	e00b      	b.n	8001980 <displayEfficiency+0xcc>
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fdf3 	bl	8000558 <__aeabi_f2d>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	f107 0014 	add.w	r0, r7, #20
 800197a:	49a0      	ldr	r1, [pc, #640]	; (8001bfc <displayEfficiency+0x348>)
 800197c:	f00f fa10 	bl	8010da0 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 8001980:	4a9f      	ldr	r2, [pc, #636]	; (8001c00 <displayEfficiency+0x34c>)
 8001982:	f107 0014 	add.w	r0, r7, #20
 8001986:	2301      	movs	r3, #1
 8001988:	ca06      	ldmia	r2, {r1, r2}
 800198a:	f002 fc7b 	bl	8004284 <ssd1306_WriteString>

		ssd1306_SetCursor(((SSD1306_WIDTH - 10) / 2 - 6), 24);
 800198e:	2118      	movs	r1, #24
 8001990:	2035      	movs	r0, #53	; 0x35
 8001992:	f002 fc9d 	bl	80042d0 <ssd1306_SetCursor>
		sprintf(str, "%0.3f", ch2Data->vbus);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fddc 	bl	8000558 <__aeabi_f2d>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	f107 0014 	add.w	r0, r7, #20
 80019a8:	4994      	ldr	r1, [pc, #592]	; (8001bfc <displayEfficiency+0x348>)
 80019aa:	f00f f9f9 	bl	8010da0 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 80019ae:	4a94      	ldr	r2, [pc, #592]	; (8001c00 <displayEfficiency+0x34c>)
 80019b0:	f107 0014 	add.w	r0, r7, #20
 80019b4:	2301      	movs	r3, #1
 80019b6:	ca06      	ldmia	r2, {r1, r2}
 80019b8:	f002 fc64 	bl	8004284 <ssd1306_WriteString>

		ssd1306_SetCursor((SSD1306_WIDTH - 20), 24);
 80019bc:	2118      	movs	r1, #24
 80019be:	206c      	movs	r0, #108	; 0x6c
 80019c0:	f002 fc86 	bl	80042d0 <ssd1306_SetCursor>
		ssd1306_WriteString("V", Font_7x10, White);
 80019c4:	4a8e      	ldr	r2, [pc, #568]	; (8001c00 <displayEfficiency+0x34c>)
 80019c6:	2301      	movs	r3, #1
 80019c8:	ca06      	ldmia	r2, {r1, r2}
 80019ca:	488e      	ldr	r0, [pc, #568]	; (8001c04 <displayEfficiency+0x350>)
 80019cc:	f002 fc5a 	bl	8004284 <ssd1306_WriteString>

		ssd1306_SetCursor(0, 34);
 80019d0:	2122      	movs	r1, #34	; 0x22
 80019d2:	2000      	movs	r0, #0
 80019d4:	f002 fc7c 	bl	80042d0 <ssd1306_SetCursor>
		(ch1Data->current < 1 ? sprintf(str, "%0.1f", ch1Data->current * 1e3) : sprintf(str, "%0.3f", ch1Data->current));
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ea:	d511      	bpl.n	8001a10 <displayEfficiency+0x15c>
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fdb1 	bl	8000558 <__aeabi_f2d>
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	4b83      	ldr	r3, [pc, #524]	; (8001c08 <displayEfficiency+0x354>)
 80019fc:	f7fe fe04 	bl	8000608 <__aeabi_dmul>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	f107 0014 	add.w	r0, r7, #20
 8001a08:	4980      	ldr	r1, [pc, #512]	; (8001c0c <displayEfficiency+0x358>)
 8001a0a:	f00f f9c9 	bl	8010da0 <siprintf>
 8001a0e:	e00b      	b.n	8001a28 <displayEfficiency+0x174>
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fd9f 	bl	8000558 <__aeabi_f2d>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	f107 0014 	add.w	r0, r7, #20
 8001a22:	4976      	ldr	r1, [pc, #472]	; (8001bfc <displayEfficiency+0x348>)
 8001a24:	f00f f9bc 	bl	8010da0 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 8001a28:	4a75      	ldr	r2, [pc, #468]	; (8001c00 <displayEfficiency+0x34c>)
 8001a2a:	f107 0014 	add.w	r0, r7, #20
 8001a2e:	2301      	movs	r3, #1
 8001a30:	ca06      	ldmia	r2, {r1, r2}
 8001a32:	f002 fc27 	bl	8004284 <ssd1306_WriteString>

		ssd1306_SetCursor(((SSD1306_WIDTH - 10) / 2 - 6), 34);
 8001a36:	2122      	movs	r1, #34	; 0x22
 8001a38:	2035      	movs	r0, #53	; 0x35
 8001a3a:	f002 fc49 	bl	80042d0 <ssd1306_SetCursor>
		(ch2Data->current < 1 ? sprintf(str, "%0.1f", ch2Data->current * 1e3) : sprintf(str, "%0.3f", ch2Data->current));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a50:	d511      	bpl.n	8001a76 <displayEfficiency+0x1c2>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fd7e 	bl	8000558 <__aeabi_f2d>
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	4b69      	ldr	r3, [pc, #420]	; (8001c08 <displayEfficiency+0x354>)
 8001a62:	f7fe fdd1 	bl	8000608 <__aeabi_dmul>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	f107 0014 	add.w	r0, r7, #20
 8001a6e:	4967      	ldr	r1, [pc, #412]	; (8001c0c <displayEfficiency+0x358>)
 8001a70:	f00f f996 	bl	8010da0 <siprintf>
 8001a74:	e00b      	b.n	8001a8e <displayEfficiency+0x1da>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fd6c 	bl	8000558 <__aeabi_f2d>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	f107 0014 	add.w	r0, r7, #20
 8001a88:	495c      	ldr	r1, [pc, #368]	; (8001bfc <displayEfficiency+0x348>)
 8001a8a:	f00f f989 	bl	8010da0 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 8001a8e:	4a5c      	ldr	r2, [pc, #368]	; (8001c00 <displayEfficiency+0x34c>)
 8001a90:	f107 0014 	add.w	r0, r7, #20
 8001a94:	2301      	movs	r3, #1
 8001a96:	ca06      	ldmia	r2, {r1, r2}
 8001a98:	f002 fbf4 	bl	8004284 <ssd1306_WriteString>

		ssd1306_SetCursor((SSD1306_WIDTH - 20), 34);
 8001a9c:	2122      	movs	r1, #34	; 0x22
 8001a9e:	206c      	movs	r0, #108	; 0x6c
 8001aa0:	f002 fc16 	bl	80042d0 <ssd1306_SetCursor>
		(ch1Data->current > 1 && ch2Data->current > 1) ?
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	edd3 7a00 	vldr	s15, [r3]
				ssd1306_WriteString("A", Font_7x10, White) : ssd1306_WriteString("mA", Font_7x10, White);
 8001aaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001aae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab6:	dd10      	ble.n	8001ada <displayEfficiency+0x226>
		(ch1Data->current > 1 && ch2Data->current > 1) ?
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aca:	dd06      	ble.n	8001ada <displayEfficiency+0x226>
				ssd1306_WriteString("A", Font_7x10, White) : ssd1306_WriteString("mA", Font_7x10, White);
 8001acc:	4a4c      	ldr	r2, [pc, #304]	; (8001c00 <displayEfficiency+0x34c>)
 8001ace:	2301      	movs	r3, #1
 8001ad0:	ca06      	ldmia	r2, {r1, r2}
 8001ad2:	484f      	ldr	r0, [pc, #316]	; (8001c10 <displayEfficiency+0x35c>)
 8001ad4:	f002 fbd6 	bl	8004284 <ssd1306_WriteString>
 8001ad8:	e005      	b.n	8001ae6 <displayEfficiency+0x232>
 8001ada:	4a49      	ldr	r2, [pc, #292]	; (8001c00 <displayEfficiency+0x34c>)
 8001adc:	2301      	movs	r3, #1
 8001ade:	ca06      	ldmia	r2, {r1, r2}
 8001ae0:	484c      	ldr	r0, [pc, #304]	; (8001c14 <displayEfficiency+0x360>)
 8001ae2:	f002 fbcf 	bl	8004284 <ssd1306_WriteString>

		ssd1306_SetCursor(0, 44);
 8001ae6:	212c      	movs	r1, #44	; 0x2c
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f002 fbf1 	bl	80042d0 <ssd1306_SetCursor>
		sprintf(str, "%0.3f", ch1Data->vshunt * 1e3);
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fd30 	bl	8000558 <__aeabi_f2d>
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	4b42      	ldr	r3, [pc, #264]	; (8001c08 <displayEfficiency+0x354>)
 8001afe:	f7fe fd83 	bl	8000608 <__aeabi_dmul>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	f107 0014 	add.w	r0, r7, #20
 8001b0a:	493c      	ldr	r1, [pc, #240]	; (8001bfc <displayEfficiency+0x348>)
 8001b0c:	f00f f948 	bl	8010da0 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 8001b10:	4a3b      	ldr	r2, [pc, #236]	; (8001c00 <displayEfficiency+0x34c>)
 8001b12:	f107 0014 	add.w	r0, r7, #20
 8001b16:	2301      	movs	r3, #1
 8001b18:	ca06      	ldmia	r2, {r1, r2}
 8001b1a:	f002 fbb3 	bl	8004284 <ssd1306_WriteString>

		ssd1306_SetCursor(((SSD1306_WIDTH - 10) / 2 - 6), 44);
 8001b1e:	212c      	movs	r1, #44	; 0x2c
 8001b20:	2035      	movs	r0, #53	; 0x35
 8001b22:	f002 fbd5 	bl	80042d0 <ssd1306_SetCursor>
		sprintf(str, "%0.3f", ch2Data->vshunt * 1e3);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fd14 	bl	8000558 <__aeabi_f2d>
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	4b34      	ldr	r3, [pc, #208]	; (8001c08 <displayEfficiency+0x354>)
 8001b36:	f7fe fd67 	bl	8000608 <__aeabi_dmul>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	f107 0014 	add.w	r0, r7, #20
 8001b42:	492e      	ldr	r1, [pc, #184]	; (8001bfc <displayEfficiency+0x348>)
 8001b44:	f00f f92c 	bl	8010da0 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 8001b48:	4a2d      	ldr	r2, [pc, #180]	; (8001c00 <displayEfficiency+0x34c>)
 8001b4a:	f107 0014 	add.w	r0, r7, #20
 8001b4e:	2301      	movs	r3, #1
 8001b50:	ca06      	ldmia	r2, {r1, r2}
 8001b52:	f002 fb97 	bl	8004284 <ssd1306_WriteString>

		ssd1306_SetCursor((SSD1306_WIDTH - 20), 44);
 8001b56:	212c      	movs	r1, #44	; 0x2c
 8001b58:	206c      	movs	r0, #108	; 0x6c
 8001b5a:	f002 fbb9 	bl	80042d0 <ssd1306_SetCursor>
		ssd1306_WriteString("mV", Font_7x10, White);
 8001b5e:	4a28      	ldr	r2, [pc, #160]	; (8001c00 <displayEfficiency+0x34c>)
 8001b60:	2301      	movs	r3, #1
 8001b62:	ca06      	ldmia	r2, {r1, r2}
 8001b64:	482c      	ldr	r0, [pc, #176]	; (8001c18 <displayEfficiency+0x364>)
 8001b66:	f002 fb8d 	bl	8004284 <ssd1306_WriteString>

		ssd1306_SetCursor(0, 54);
 8001b6a:	2136      	movs	r1, #54	; 0x36
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f002 fbaf 	bl	80042d0 <ssd1306_SetCursor>
		sprintf(str, "%0.3f", ch1Data->power);
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fcee 	bl	8000558 <__aeabi_f2d>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	f107 0014 	add.w	r0, r7, #20
 8001b84:	491d      	ldr	r1, [pc, #116]	; (8001bfc <displayEfficiency+0x348>)
 8001b86:	f00f f90b 	bl	8010da0 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 8001b8a:	4a1d      	ldr	r2, [pc, #116]	; (8001c00 <displayEfficiency+0x34c>)
 8001b8c:	f107 0014 	add.w	r0, r7, #20
 8001b90:	2301      	movs	r3, #1
 8001b92:	ca06      	ldmia	r2, {r1, r2}
 8001b94:	f002 fb76 	bl	8004284 <ssd1306_WriteString>

		ssd1306_SetCursor(((SSD1306_WIDTH - 10) / 2 - 6), 54);
 8001b98:	2136      	movs	r1, #54	; 0x36
 8001b9a:	2035      	movs	r0, #53	; 0x35
 8001b9c:	f002 fb98 	bl	80042d0 <ssd1306_SetCursor>
		sprintf(str, "%0.3f", ch2Data->power);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fcd7 	bl	8000558 <__aeabi_f2d>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	f107 0014 	add.w	r0, r7, #20
 8001bb2:	4912      	ldr	r1, [pc, #72]	; (8001bfc <displayEfficiency+0x348>)
 8001bb4:	f00f f8f4 	bl	8010da0 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 8001bb8:	4a11      	ldr	r2, [pc, #68]	; (8001c00 <displayEfficiency+0x34c>)
 8001bba:	f107 0014 	add.w	r0, r7, #20
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	ca06      	ldmia	r2, {r1, r2}
 8001bc2:	f002 fb5f 	bl	8004284 <ssd1306_WriteString>

		ssd1306_SetCursor((SSD1306_WIDTH - 20), 54);
 8001bc6:	2136      	movs	r1, #54	; 0x36
 8001bc8:	206c      	movs	r0, #108	; 0x6c
 8001bca:	f002 fb81 	bl	80042d0 <ssd1306_SetCursor>
		ssd1306_WriteString("W", Font_7x10, White);
 8001bce:	4a0c      	ldr	r2, [pc, #48]	; (8001c00 <displayEfficiency+0x34c>)
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	ca06      	ldmia	r2, {r1, r2}
 8001bd4:	4811      	ldr	r0, [pc, #68]	; (8001c1c <displayEfficiency+0x368>)
 8001bd6:	f002 fb55 	bl	8004284 <ssd1306_WriteString>

		ssd1306_UpdateScreen();
 8001bda:	f002 fa43 	bl	8004064 <ssd1306_UpdateScreen>
	}
	else
	{
		ssd1306_SetDisplayOn(0);
	}
}
 8001bde:	e002      	b.n	8001be6 <displayEfficiency+0x332>
		ssd1306_SetDisplayOn(0);
 8001be0:	2000      	movs	r0, #0
 8001be2:	f002 fba1 	bl	8004328 <ssd1306_SetDisplayOn>
}
 8001be6:	bf00      	nop
 8001be8:	3730      	adds	r7, #48	; 0x30
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bdb0      	pop	{r4, r5, r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	42c80000 	.word	0x42c80000
 8001bf4:	0801313c 	.word	0x0801313c
 8001bf8:	2000000c 	.word	0x2000000c
 8001bfc:	0801314c 	.word	0x0801314c
 8001c00:	20000004 	.word	0x20000004
 8001c04:	08013154 	.word	0x08013154
 8001c08:	408f4000 	.word	0x408f4000
 8001c0c:	08013158 	.word	0x08013158
 8001c10:	08013160 	.word	0x08013160
 8001c14:	08013164 	.word	0x08013164
 8001c18:	08013168 	.word	0x08013168
 8001c1c:	0801316c 	.word	0x0801316c

08001c20 <digRead>:

uint8_t digRead(uint8_t dig_pin)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
	if (dig_pin == 0)
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10b      	bne.n	8001c48 <digRead+0x28>
	{
		if (HAL_GPIO_ReadPin(DIG_IN0_GPIO_Port, DIG_IN0_Pin) == GPIO_PIN_RESET)
 8001c30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c34:	480e      	ldr	r0, [pc, #56]	; (8001c70 <digRead+0x50>)
 8001c36:	f004 f8a5 	bl	8005d84 <HAL_GPIO_ReadPin>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <digRead+0x24>
			return 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	e011      	b.n	8001c68 <digRead+0x48>
		else
			return 1;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e00f      	b.n	8001c68 <digRead+0x48>
	}
	else if (dig_pin == 1)
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d10b      	bne.n	8001c66 <digRead+0x46>
	{
		if (HAL_GPIO_ReadPin(DIG_IN1_GPIO_Port, DIG_IN1_Pin) == GPIO_PIN_RESET)
 8001c4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c52:	4807      	ldr	r0, [pc, #28]	; (8001c70 <digRead+0x50>)
 8001c54:	f004 f896 	bl	8005d84 <HAL_GPIO_ReadPin>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <digRead+0x42>
			return 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e002      	b.n	8001c68 <digRead+0x48>
		else
			return 1;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <digRead+0x48>
	}
	else
		return 0;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40020400 	.word	0x40020400

08001c74 <digitalWrite>:

void digitalWrite(uint8_t dig_pin, uint8_t value)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	460a      	mov	r2, r1
 8001c7e:	71fb      	strb	r3, [r7, #7]
 8001c80:	4613      	mov	r3, r2
 8001c82:	71bb      	strb	r3, [r7, #6]
	if (dig_pin == 0)
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d110      	bne.n	8001cac <digitalWrite+0x38>
	{
		if (value == 1)
 8001c8a:	79bb      	ldrb	r3, [r7, #6]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d106      	bne.n	8001c9e <digitalWrite+0x2a>
			HAL_GPIO_WritePin(DIG_OUT0_GPIO_Port, DIG_OUT0_Pin, RESET);
 8001c90:	2200      	movs	r2, #0
 8001c92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c96:	4811      	ldr	r0, [pc, #68]	; (8001cdc <digitalWrite+0x68>)
 8001c98:	f004 f88c 	bl	8005db4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_OUT1_GPIO_Port, DIG_OUT1_Pin, RESET);
		else
			HAL_GPIO_WritePin(DIG_OUT1_GPIO_Port, DIG_OUT1_Pin, SET);
	}

}
 8001c9c:	e019      	b.n	8001cd2 <digitalWrite+0x5e>
			HAL_GPIO_WritePin(DIG_OUT0_GPIO_Port, DIG_OUT0_Pin, SET);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ca4:	480d      	ldr	r0, [pc, #52]	; (8001cdc <digitalWrite+0x68>)
 8001ca6:	f004 f885 	bl	8005db4 <HAL_GPIO_WritePin>
}
 8001caa:	e012      	b.n	8001cd2 <digitalWrite+0x5e>
	else if (dig_pin == 1)
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d10f      	bne.n	8001cd2 <digitalWrite+0x5e>
		if (value == 1)
 8001cb2:	79bb      	ldrb	r3, [r7, #6]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d106      	bne.n	8001cc6 <digitalWrite+0x52>
			HAL_GPIO_WritePin(DIG_OUT1_GPIO_Port, DIG_OUT1_Pin, RESET);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cbe:	4807      	ldr	r0, [pc, #28]	; (8001cdc <digitalWrite+0x68>)
 8001cc0:	f004 f878 	bl	8005db4 <HAL_GPIO_WritePin>
}
 8001cc4:	e005      	b.n	8001cd2 <digitalWrite+0x5e>
			HAL_GPIO_WritePin(DIG_OUT1_GPIO_Port, DIG_OUT1_Pin, SET);
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ccc:	4803      	ldr	r0, [pc, #12]	; (8001cdc <digitalWrite+0x68>)
 8001cce:	f004 f871 	bl	8005db4 <HAL_GPIO_WritePin>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40020400 	.word	0x40020400

08001ce0 <restartMCU>:

void restartMCU(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 8001ce4:	f003 fb55 	bl	8005392 <HAL_NVIC_SystemReset>
}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}

08001cec <saveUserConfigData>:

void saveUserConfigData(uint16_t page, RegisterData_t *inputBuffer)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	6039      	str	r1, [r7, #0]
 8001cf6:	80fb      	strh	r3, [r7, #6]
//	EEPROMPageErase(page);
	for (uint8_t offset = 0; offset < NO_REGISTERS; offset++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	73fb      	strb	r3, [r7, #15]
 8001cfc:	e010      	b.n	8001d20 <saveUserConfigData+0x34>
	{
		EEPROMWriteByte(page, offset, (inputBuffer + offset)->value);
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	b299      	uxth	r1, r3
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	4413      	add	r3, r2
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fa4e 	bl	80011b0 <EEPROMWriteByte>
		HAL_Delay(1);
 8001d14:	2001      	movs	r0, #1
 8001d16:	f002 fe2d 	bl	8004974 <HAL_Delay>
	for (uint8_t offset = 0; offset < NO_REGISTERS; offset++)
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	2b1f      	cmp	r3, #31
 8001d24:	d9eb      	bls.n	8001cfe <saveUserConfigData+0x12>
	}
}
 8001d26:	bf00      	nop
 8001d28:	bf00      	nop
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <getSavedUserConfigData>:

void getSavedUserConfigData(uint16_t page, RegisterData_t *outBuffer)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	80fb      	strh	r3, [r7, #6]
	for (uint8_t offset = 0; offset < NO_REGISTERS; offset++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	73fb      	strb	r3, [r7, #15]
 8001d40:	e00d      	b.n	8001d5e <getSavedUserConfigData+0x2e>
	{
		(outBuffer + offset)->value = EEPROMReadByte(page, offset);
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	b299      	uxth	r1, r3
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	18d4      	adds	r4, r2, r3
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fa6c 	bl	800122c <EEPROMReadByte>
 8001d54:	4603      	mov	r3, r0
 8001d56:	7023      	strb	r3, [r4, #0]
	for (uint8_t offset = 0; offset < NO_REGISTERS; offset++)
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	2b1f      	cmp	r3, #31
 8001d62:	d9ee      	bls.n	8001d42 <getSavedUserConfigData+0x12>
	}

}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd90      	pop	{r4, r7, pc}
	...

08001d70 <configHW>:

void configHW(SetupData_t *setupData, uint8_t update)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	70fb      	strb	r3, [r7, #3]
	if (update == 1)
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d113      	bne.n	8001daa <configHW+0x3a>
	{
		digitalWrite(DIG_OUT0, setupData->setRegister.set_dig_out0);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7ff ff72 	bl	8001c74 <digitalWrite>
		digitalWrite(DIG_OUT1, setupData->setRegister.set_dig_out1);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001d96:	4619      	mov	r1, r3
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f7ff ff6b 	bl	8001c74 <digitalWrite>

//	enableLED(setupData);

		enablePWM(setupData);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f80a 	bl	8001db8 <enablePWM>

//		disablePowerSaveMode(setupData);
		g_HWUpdateFlag = 0;
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <configHW+0x44>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
	}

}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200006b8 	.word	0x200006b8

08001db8 <enablePWM>:

void enablePWM(SetupData_t *setupData)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	set_pwm_freq(setupData->setRegister.set_pwm_freq);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 ffd9 	bl	8002d7c <set_pwm_freq>
	if (setupData->setRegister.en_pwm0)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d006      	beq.n	8001de2 <enablePWM+0x2a>
	{
		run_pwm_out0(setupData->setRegister.set_pwm0_duty);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 ff8a 	bl	8002cf4 <run_pwm_out0>
 8001de0:	e001      	b.n	8001de6 <enablePWM+0x2e>
	}
	else
	{
		stop_pwm_out0();
 8001de2:	f000 ff9b 	bl	8002d1c <stop_pwm_out0>
	}

	if (setupData->setRegister.en_pwm1)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d006      	beq.n	8001dfe <enablePWM+0x46>
	{
		run_pwm_out1(setupData->setRegister.set_pwm1_duty);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 ff9e 	bl	8002d38 <run_pwm_out1>
	}
	else
	{
		stop_pwm_out1();
	}
}
 8001dfc:	e001      	b.n	8001e02 <enablePWM+0x4a>
		stop_pwm_out1();
 8001dfe:	f000 ffaf 	bl	8002d60 <stop_pwm_out1>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <streamMeasurements>:

void streamMeasurements(SetupData_t *setupData, float *temp_data, Ina226Data_t *channel1, Ina226Data_t *channel2)
{
 8001e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e10:	b0b7      	sub	sp, #220	; 0xdc
 8001e12:	af1c      	add	r7, sp, #112	; 0x70
 8001e14:	6678      	str	r0, [r7, #100]	; 0x64
 8001e16:	6639      	str	r1, [r7, #96]	; 0x60
 8001e18:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e1a:	65bb      	str	r3, [r7, #88]	; 0x58

	if (newSetupData.setRegister.meas_mode == 1)
 8001e1c:	4b58      	ldr	r3, [pc, #352]	; (8001f80 <streamMeasurements+0x174>)
 8001e1e:	7ddb      	ldrb	r3, [r3, #23]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	f040 80a7 	bne.w	8001f74 <streamMeasurements+0x168>
//				setupData->setRegister.set_pwm1_duty, setupData->setRegister.set_pwm_freq, channel1->vshunt,
//				channel1->vbus, channel1->current, channel1->power, channel2->vshunt, channel2->vbus, channel2->current,
//				channel2->power, (channel2->power / channel1->power) * 100);

		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f,%0.3f,%d,%d\r\n",
				*temp_data, stm32Temp, stm32Vref, channel1->vshunt, channel1->vbus, channel1->current, channel1->power,
 8001e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e28:	681b      	ldr	r3, [r3, #0]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f,%0.3f,%d,%d\r\n",
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fb94 	bl	8000558 <__aeabi_f2d>
 8001e30:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 8001e34:	4b53      	ldr	r3, [pc, #332]	; (8001f84 <streamMeasurements+0x178>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fb8d 	bl	8000558 <__aeabi_f2d>
 8001e3e:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8001e42:	4b51      	ldr	r3, [pc, #324]	; (8001f88 <streamMeasurements+0x17c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fb86 	bl	8000558 <__aeabi_f2d>
 8001e4c:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
				*temp_data, stm32Temp, stm32Vref, channel1->vshunt, channel1->vbus, channel1->current, channel1->power,
 8001e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e52:	689b      	ldr	r3, [r3, #8]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f,%0.3f,%d,%d\r\n",
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fb7f 	bl	8000558 <__aeabi_f2d>
 8001e5a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
				*temp_data, stm32Temp, stm32Vref, channel1->vshunt, channel1->vbus, channel1->current, channel1->power,
 8001e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e60:	685b      	ldr	r3, [r3, #4]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f,%0.3f,%d,%d\r\n",
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fb78 	bl	8000558 <__aeabi_f2d>
 8001e68:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
				*temp_data, stm32Temp, stm32Vref, channel1->vshunt, channel1->vbus, channel1->current, channel1->power,
 8001e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e6e:	681b      	ldr	r3, [r3, #0]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f,%0.3f,%d,%d\r\n",
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fb71 	bl	8000558 <__aeabi_f2d>
 8001e76:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				*temp_data, stm32Temp, stm32Vref, channel1->vshunt, channel1->vbus, channel1->current, channel1->power,
 8001e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e7c:	68db      	ldr	r3, [r3, #12]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f,%0.3f,%d,%d\r\n",
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe fb6a 	bl	8000558 <__aeabi_f2d>
 8001e84:	e9c7 0108 	strd	r0, r1, [r7, #32]
				channel2->vshunt, channel2->vbus, channel2->current, channel2->power,
 8001e88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e8a:	689b      	ldr	r3, [r3, #8]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f,%0.3f,%d,%d\r\n",
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe fb63 	bl	8000558 <__aeabi_f2d>
 8001e92:	e9c7 0106 	strd	r0, r1, [r7, #24]
				channel2->vshunt, channel2->vbus, channel2->current, channel2->power,
 8001e96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e98:	685b      	ldr	r3, [r3, #4]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f,%0.3f,%d,%d\r\n",
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fb5c 	bl	8000558 <__aeabi_f2d>
 8001ea0:	e9c7 0104 	strd	r0, r1, [r7, #16]
				channel2->vshunt, channel2->vbus, channel2->current, channel2->power,
 8001ea4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ea6:	681b      	ldr	r3, [r3, #0]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f,%0.3f,%d,%d\r\n",
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fb55 	bl	8000558 <__aeabi_f2d>
 8001eae:	e9c7 0102 	strd	r0, r1, [r7, #8]
				channel2->vshunt, channel2->vbus, channel2->current, channel2->power,
 8001eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eb4:	68db      	ldr	r3, [r3, #12]
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f,%0.3f,%d,%d\r\n",
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fb4e 	bl	8000558 <__aeabi_f2d>
 8001ebc:	e9c7 0100 	strd	r0, r1, [r7]
				(channel2->power / channel1->power), ina_in0, ina_in1, digRead(DIG_IN0), digRead(DIG_IN1));
 8001ec0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ec2:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ecc:	eec7 6a27 	vdiv.f32	s13, s14, s15
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f,%0.3f,%d,%d\r\n",
 8001ed0:	ee16 0a90 	vmov	r0, s13
 8001ed4:	f7fe fb40 	bl	8000558 <__aeabi_f2d>
 8001ed8:	4682      	mov	sl, r0
 8001eda:	468b      	mov	fp, r1
 8001edc:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <streamMeasurements+0x180>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fb39 	bl	8000558 <__aeabi_f2d>
 8001ee6:	4680      	mov	r8, r0
 8001ee8:	4689      	mov	r9, r1
 8001eea:	4b29      	ldr	r3, [pc, #164]	; (8001f90 <streamMeasurements+0x184>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fb32 	bl	8000558 <__aeabi_f2d>
 8001ef4:	4604      	mov	r4, r0
 8001ef6:	460d      	mov	r5, r1
				(channel2->power / channel1->power), ina_in0, ina_in1, digRead(DIG_IN0), digRead(DIG_IN1));
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f7ff fe91 	bl	8001c20 <digRead>
 8001efe:	4603      	mov	r3, r0
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f,%0.3f,%d,%d\r\n",
 8001f00:	461e      	mov	r6, r3
				(channel2->power / channel1->power), ina_in0, ina_in1, digRead(DIG_IN0), digRead(DIG_IN1));
 8001f02:	2001      	movs	r0, #1
 8001f04:	f7ff fe8c 	bl	8001c20 <digRead>
 8001f08:	4603      	mov	r3, r0
		printf("#D#%0.1f,%0.1f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.6f,%0.3f,%0.3f,%0.3f,%0.3f,%d,%d\r\n",
 8001f0a:	931b      	str	r3, [sp, #108]	; 0x6c
 8001f0c:	961a      	str	r6, [sp, #104]	; 0x68
 8001f0e:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 8001f12:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 8001f16:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8001f1a:	ed97 7b00 	vldr	d7, [r7]
 8001f1e:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8001f22:	ed97 7b02 	vldr	d7, [r7, #8]
 8001f26:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001f2a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f2e:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001f32:	ed97 7b06 	vldr	d7, [r7, #24]
 8001f36:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001f3a:	ed97 7b08 	vldr	d7, [r7, #32]
 8001f3e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001f42:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001f46:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001f4a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001f4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001f52:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001f56:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001f5a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001f5e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001f62:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001f66:	ed8d 7b00 	vstr	d7, [sp]
 8001f6a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f6e:	4809      	ldr	r0, [pc, #36]	; (8001f94 <streamMeasurements+0x188>)
 8001f70:	f00e fe0e 	bl	8010b90 <iprintf>
//				channel2->vshunt * 1e3, channel2->vbus, channel2->current, channel2->power,
//				(channel2->power / channel1->power) * 100);

//		printf("#D#%0.1f#%0.1f#%0.3f#%0.3f#4#\n", LM75TempReading, stm32Temp, stm32Vref, channel1->vbus);
	}
}
 8001f74:	bf00      	nop
 8001f76:	376c      	adds	r7, #108	; 0x6c
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000724 	.word	0x20000724
 8001f84:	200006c0 	.word	0x200006c0
 8001f88:	200006c4 	.word	0x200006c4
 8001f8c:	200006c8 	.word	0x200006c8
 8001f90:	200006cc 	.word	0x200006cc
 8001f94:	08013170 	.word	0x08013170

08001f98 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <MX_I2C1_Init+0x50>)
 8001f9e:	4a13      	ldr	r2, [pc, #76]	; (8001fec <MX_I2C1_Init+0x54>)
 8001fa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <MX_I2C1_Init+0x50>)
 8001fa4:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <MX_I2C1_Init+0x58>)
 8001fa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <MX_I2C1_Init+0x50>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <MX_I2C1_Init+0x50>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <MX_I2C1_Init+0x50>)
 8001fb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <MX_I2C1_Init+0x50>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <MX_I2C1_Init+0x50>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fc8:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <MX_I2C1_Init+0x50>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <MX_I2C1_Init+0x50>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fd4:	4804      	ldr	r0, [pc, #16]	; (8001fe8 <MX_I2C1_Init+0x50>)
 8001fd6:	f003 ff45 	bl	8005e64 <HAL_I2C_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fe0:	f000 fe82 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	200006d0 	.word	0x200006d0
 8001fec:	40005400 	.word	0x40005400
 8001ff0:	000186a0 	.word	0x000186a0

08001ff4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08a      	sub	sp, #40	; 0x28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a19      	ldr	r2, [pc, #100]	; (8002078 <HAL_I2C_MspInit+0x84>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d12b      	bne.n	800206e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	4b18      	ldr	r3, [pc, #96]	; (800207c <HAL_I2C_MspInit+0x88>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a17      	ldr	r2, [pc, #92]	; (800207c <HAL_I2C_MspInit+0x88>)
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <HAL_I2C_MspInit+0x88>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002032:	23c0      	movs	r3, #192	; 0xc0
 8002034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002036:	2312      	movs	r3, #18
 8002038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800203a:	2301      	movs	r3, #1
 800203c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203e:	2303      	movs	r3, #3
 8002040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002042:	2304      	movs	r3, #4
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002046:	f107 0314 	add.w	r3, r7, #20
 800204a:	4619      	mov	r1, r3
 800204c:	480c      	ldr	r0, [pc, #48]	; (8002080 <HAL_I2C_MspInit+0x8c>)
 800204e:	f003 fd15 	bl	8005a7c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_I2C_MspInit+0x88>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	4a08      	ldr	r2, [pc, #32]	; (800207c <HAL_I2C_MspInit+0x88>)
 800205c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002060:	6413      	str	r3, [r2, #64]	; 0x40
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_I2C_MspInit+0x88>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800206e:	bf00      	nop
 8002070:	3728      	adds	r7, #40	; 0x28
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40005400 	.word	0x40005400
 800207c:	40023800 	.word	0x40023800
 8002080:	40020400 	.word	0x40020400

08002084 <ina226_getBusVoltage>:
 */

#include "ina226.h"

float ina226_getBusVoltage(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	460b      	mov	r3, r1
 800208e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002092:	817b      	strh	r3, [r7, #10]
	return (ina226_getBusVoltageReg(I2CHandler, Address, preResult) * VBUS_LSB );
 8002094:	897b      	ldrh	r3, [r7, #10]
 8002096:	ed97 0a01 	vldr	s0, [r7, #4]
 800209a:	4619      	mov	r1, r3
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 f999 	bl	80023d4 <ina226_getBusVoltageReg>
 80020a2:	4603      	mov	r3, r0
 80020a4:	ee07 3a90 	vmov	s15, r3
 80020a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ac:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80020c0 <ina226_getBusVoltage+0x3c>
 80020b0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80020b4:	eeb0 0a67 	vmov.f32	s0, s15
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	3aa3d70a 	.word	0x3aa3d70a

080020c4 <ina226_getCurrent>:

float ina226_getCurrent(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	460b      	mov	r3, r1
 80020ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80020d2:	817b      	strh	r3, [r7, #10]
	return (ina226_getCurrentReg(I2CHandler, Address, preResult) * CURRENT_LSB );
 80020d4:	897b      	ldrh	r3, [r7, #10]
 80020d6:	ed97 0a01 	vldr	s0, [r7, #4]
 80020da:	4619      	mov	r1, r3
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 f9fb 	bl	80024d8 <ina226_getCurrentReg>
 80020e2:	ee07 0a90 	vmov	s15, r0
 80020e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ea:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80020fc <ina226_getCurrent+0x38>
 80020ee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80020f2:	eeb0 0a67 	vmov.f32	s0, s15
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	3983126f 	.word	0x3983126f

08002100 <ina226_getPower>:

float ina226_getPower(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	460b      	mov	r3, r1
 800210a:	ed87 0a01 	vstr	s0, [r7, #4]
 800210e:	817b      	strh	r3, [r7, #10]
	return (ina226_getPowerReg(I2CHandler, Address, preResult) * POWER_LSB );
 8002110:	897b      	ldrh	r3, [r7, #10]
 8002112:	ed97 0a01 	vldr	s0, [r7, #4]
 8002116:	4619      	mov	r1, r3
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 f9a3 	bl	8002464 <ina226_getPowerReg>
 800211e:	4603      	mov	r3, r0
 8002120:	ee07 3a90 	vmov	s15, r3
 8002124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002128:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800213c <ina226_getPower+0x3c>
 800212c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002130:	eeb0 0a67 	vmov.f32	s0, s15
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	3bcccccd 	.word	0x3bcccccd

08002140 <ina226_getShuntVoltage>:

float ina226_getShuntVoltage(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	460b      	mov	r3, r1
 800214a:	ed87 0a01 	vstr	s0, [r7, #4]
 800214e:	817b      	strh	r3, [r7, #10]
	return (ina226_getShuntVoltageReg(I2CHandler, Address, preResult) * VSHUNT_LSB );
 8002150:	897b      	ldrh	r3, [r7, #10]
 8002152:	ed97 0a01 	vldr	s0, [r7, #4]
 8002156:	4619      	mov	r1, r3
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f8f3 	bl	8002344 <ina226_getShuntVoltageReg>
 800215e:	ee07 0a90 	vmov	s15, r0
 8002162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002166:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002178 <ina226_getShuntVoltage+0x38>
 800216a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800216e:	eeb0 0a67 	vmov.f32	s0, s15
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	3627c5ac 	.word	0x3627c5ac

0800217c <ina226_setConfig>:

uint8_t ina226_setConfig(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint16_t ConfigWord)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af02      	add	r7, sp, #8
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]
 8002188:	4613      	mov	r3, r2
 800218a:	803b      	strh	r3, [r7, #0]
	uint8_t sentTable[3];
	sentTable[0] = CONFIG_REG;
 800218c:	2300      	movs	r3, #0
 800218e:	733b      	strb	r3, [r7, #12]
	sentTable[1] = (ConfigWord & 0xFF00) >> 8;
 8002190:	883b      	ldrh	r3, [r7, #0]
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	b29b      	uxth	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	737b      	strb	r3, [r7, #13]
	sentTable[2] = (ConfigWord & 0x00FF);
 800219a:	883b      	ldrh	r3, [r7, #0]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	73bb      	strb	r3, [r7, #14]
	return HAL_I2C_Master_Transmit(I2CHandler, Address, sentTable, 3,
 80021a0:	f107 020c 	add.w	r2, r7, #12
 80021a4:	8879      	ldrh	r1, [r7, #2]
 80021a6:	230a      	movs	r3, #10
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	2303      	movs	r3, #3
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f003 ff9d 	bl	80060ec <HAL_I2C_Master_Transmit>
 80021b2:	4603      	mov	r3, r0
	I2CTIMEOUT);
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <ina226_getConfig>:

uint16_t ina226_getConfig(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	807b      	strh	r3, [r7, #2]
	uint8_t sentTable[1] =
 80021c8:	2300      	movs	r3, #0
 80021ca:	733b      	strb	r3, [r7, #12]
	{ CONFIG_REG };
	uint8_t receivedTable[2];
	HAL_I2C_Master_Transmit(I2CHandler, Address, sentTable, 1, I2CTIMEOUT);
 80021cc:	f107 020c 	add.w	r2, r7, #12
 80021d0:	8879      	ldrh	r1, [r7, #2]
 80021d2:	230a      	movs	r3, #10
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2301      	movs	r3, #1
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f003 ff87 	bl	80060ec <HAL_I2C_Master_Transmit>
	if (HAL_I2C_Master_Receive(I2CHandler, Address, receivedTable, 2,
 80021de:	f107 0208 	add.w	r2, r7, #8
 80021e2:	8879      	ldrh	r1, [r7, #2]
 80021e4:	230a      	movs	r3, #10
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	2302      	movs	r3, #2
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f004 f87c 	bl	80062e8 <HAL_I2C_Master_Receive>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <ina226_getConfig+0x3e>
	I2CTIMEOUT) != HAL_OK)
		return 0x00;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e007      	b.n	800220a <ina226_getConfig+0x4e>
	else
		return ((uint16_t) receivedTable[0] << 8 | receivedTable[1]);
 80021fa:	7a3b      	ldrb	r3, [r7, #8]
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	b21a      	sxth	r2, r3
 8002200:	7a7b      	ldrb	r3, [r7, #9]
 8002202:	b21b      	sxth	r3, r3
 8002204:	4313      	orrs	r3, r2
 8002206:	b21b      	sxth	r3, r3
 8002208:	b29b      	uxth	r3, r3
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <ina226_setAVG>:

void ina226_setAVG(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint8_t AVG)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	460b      	mov	r3, r1
 800221c:	807b      	strh	r3, [r7, #2]
 800221e:	4613      	mov	r3, r2
 8002220:	707b      	strb	r3, [r7, #1]
	uint16_t preConfigData = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	81fb      	strh	r3, [r7, #14]
	preConfigData = ina226_getConfig(I2CHandler, Address);
 8002226:	887b      	ldrh	r3, [r7, #2]
 8002228:	4619      	mov	r1, r3
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff ffc6 	bl	80021bc <ina226_getConfig>
 8002230:	4603      	mov	r3, r0
 8002232:	81fb      	strh	r3, [r7, #14]
	preConfigData = (preConfigData & 0xF1FF);	// Clear bits[11:9]
 8002234:	89fb      	ldrh	r3, [r7, #14]
 8002236:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 800223a:	81fb      	strh	r3, [r7, #14]
	preConfigData |= (AVG << 9);				// Shift AVG value into bit field [11:9]
 800223c:	787b      	ldrb	r3, [r7, #1]
 800223e:	025b      	lsls	r3, r3, #9
 8002240:	b21a      	sxth	r2, r3
 8002242:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002246:	4313      	orrs	r3, r2
 8002248:	b21b      	sxth	r3, r3
 800224a:	81fb      	strh	r3, [r7, #14]
	ina226_setConfig(I2CHandler, Address, preConfigData);
 800224c:	89fa      	ldrh	r2, [r7, #14]
 800224e:	887b      	ldrh	r3, [r7, #2]
 8002250:	4619      	mov	r1, r3
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff ff92 	bl	800217c <ina226_setConfig>
}
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <ina226_setMODE>:
void ina226_setMODE(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint8_t MODE)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
 800226c:	4613      	mov	r3, r2
 800226e:	707b      	strb	r3, [r7, #1]
	uint16_t preConfigData = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	81fb      	strh	r3, [r7, #14]
	preConfigData = ina226_getConfig(I2CHandler, Address);
 8002274:	887b      	ldrh	r3, [r7, #2]
 8002276:	4619      	mov	r1, r3
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ff9f 	bl	80021bc <ina226_getConfig>
 800227e:	4603      	mov	r3, r0
 8002280:	81fb      	strh	r3, [r7, #14]
	preConfigData = (preConfigData & 0xFFF8);	// Clear bits [2:0]
 8002282:	89fb      	ldrh	r3, [r7, #14]
 8002284:	f023 0307 	bic.w	r3, r3, #7
 8002288:	81fb      	strh	r3, [r7, #14]
	preConfigData |= MODE;						// Or MODE value into bit field [2:0]
 800228a:	787b      	ldrb	r3, [r7, #1]
 800228c:	b29a      	uxth	r2, r3
 800228e:	89fb      	ldrh	r3, [r7, #14]
 8002290:	4313      	orrs	r3, r2
 8002292:	81fb      	strh	r3, [r7, #14]
	ina226_setConfig(I2CHandler, Address, preConfigData);
 8002294:	89fa      	ldrh	r2, [r7, #14]
 8002296:	887b      	ldrh	r3, [r7, #2]
 8002298:	4619      	mov	r1, r3
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff ff6e 	bl	800217c <ina226_setConfig>
}
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <ina226_setVBUSCT>:

void ina226_setVBUSCT(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint8_t VBUSCT)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	807b      	strh	r3, [r7, #2]
 80022b4:	4613      	mov	r3, r2
 80022b6:	707b      	strb	r3, [r7, #1]
	uint16_t preConfigData = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	81fb      	strh	r3, [r7, #14]
	preConfigData = ina226_getConfig(I2CHandler, Address);
 80022bc:	887b      	ldrh	r3, [r7, #2]
 80022be:	4619      	mov	r1, r3
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff7b 	bl	80021bc <ina226_getConfig>
 80022c6:	4603      	mov	r3, r0
 80022c8:	81fb      	strh	r3, [r7, #14]
	preConfigData = (preConfigData & 0xFE3F);	// Clear bits [8:6]
 80022ca:	89fb      	ldrh	r3, [r7, #14]
 80022cc:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80022d0:	81fb      	strh	r3, [r7, #14]
	preConfigData |= (VBUSCT << 6);				// shift VBUS 6 places and or with previous Configuration Data
 80022d2:	787b      	ldrb	r3, [r7, #1]
 80022d4:	019b      	lsls	r3, r3, #6
 80022d6:	b21a      	sxth	r2, r3
 80022d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022dc:	4313      	orrs	r3, r2
 80022de:	b21b      	sxth	r3, r3
 80022e0:	81fb      	strh	r3, [r7, #14]
	ina226_setConfig(I2CHandler, Address, preConfigData);
 80022e2:	89fa      	ldrh	r2, [r7, #14]
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	4619      	mov	r1, r3
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff ff47 	bl	800217c <ina226_setConfig>
}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <ina226_setVSHUNTCT>:

void ina226_setVSHUNTCT(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint8_t VSHUNTCT)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	460b      	mov	r3, r1
 8002300:	807b      	strh	r3, [r7, #2]
 8002302:	4613      	mov	r3, r2
 8002304:	707b      	strb	r3, [r7, #1]
	uint16_t preConfigData = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	81fb      	strh	r3, [r7, #14]
	preConfigData = ina226_getConfig(I2CHandler, Address);
 800230a:	887b      	ldrh	r3, [r7, #2]
 800230c:	4619      	mov	r1, r3
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff ff54 	bl	80021bc <ina226_getConfig>
 8002314:	4603      	mov	r3, r0
 8002316:	81fb      	strh	r3, [r7, #14]
	preConfigData = (preConfigData & 0xFFC7);	// Clear bits [5:3]
 8002318:	89fb      	ldrh	r3, [r7, #14]
 800231a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800231e:	81fb      	strh	r3, [r7, #14]
	preConfigData |= (VSHUNTCT << 3);			// shift VBUS 3 places and or with previous Configuration Data
 8002320:	787b      	ldrb	r3, [r7, #1]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	b21a      	sxth	r2, r3
 8002326:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800232a:	4313      	orrs	r3, r2
 800232c:	b21b      	sxth	r3, r3
 800232e:	81fb      	strh	r3, [r7, #14]
	ina226_setConfig(I2CHandler, Address, preConfigData);
 8002330:	89fa      	ldrh	r2, [r7, #14]
 8002332:	887b      	ldrh	r3, [r7, #2]
 8002334:	4619      	mov	r1, r3
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ff20 	bl	800217c <ina226_setConfig>
}
 800233c:	bf00      	nop
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <ina226_getShuntVoltageReg>:
	float convRshunt = (((float) (Rshunt >> 3) * 0.001)) * (pow(10, (float) (Rshunt & 0x07)));
	ina226_setCalibrationReg(I2CHandler, Address, (uint16_t) (INA226_CONST / (convRshunt * CURRENT_LSB )));
}

int32_t ina226_getShuntVoltageReg(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b088      	sub	sp, #32
 8002348:	af02      	add	r7, sp, #8
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	460b      	mov	r3, r1
 800234e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002352:	817b      	strh	r3, [r7, #10]
	uint8_t SentTable[1] =
 8002354:	2301      	movs	r3, #1
 8002356:	753b      	strb	r3, [r7, #20]
	{ SHUNTV_REG };
	uint8_t ReceivedTable[2];
	HAL_I2C_Master_Transmit(I2CHandler, Address, SentTable, 1, I2CTIMEOUT);
 8002358:	f107 0214 	add.w	r2, r7, #20
 800235c:	8979      	ldrh	r1, [r7, #10]
 800235e:	230a      	movs	r3, #10
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2301      	movs	r3, #1
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f003 fec1 	bl	80060ec <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(I2CHandler, Address, ReceivedTable, 2, I2CTIMEOUT);
 800236a:	f107 0210 	add.w	r2, r7, #16
 800236e:	8979      	ldrh	r1, [r7, #10]
 8002370:	230a      	movs	r3, #10
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2302      	movs	r3, #2
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f003 ffb6 	bl	80062e8 <HAL_I2C_Master_Receive>
	if (HAL_I2C_Master_Receive(I2CHandler, Address, ReceivedTable, 2,
 800237c:	f107 0210 	add.w	r2, r7, #16
 8002380:	8979      	ldrh	r1, [r7, #10]
 8002382:	230a      	movs	r3, #10
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	2302      	movs	r3, #2
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f003 ffad 	bl	80062e8 <HAL_I2C_Master_Receive>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00a      	beq.n	80023aa <ina226_getShuntVoltageReg+0x66>
	I2CTIMEOUT) != HAL_OK)
	{
		return (int32_t) (preResult / VSHUNT_LSB );
 8002394:	ed97 7a01 	vldr	s14, [r7, #4]
 8002398:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80023d0 <ina226_getShuntVoltageReg+0x8c>
 800239c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a4:	ee17 3a90 	vmov	r3, s15
 80023a8:	e00e      	b.n	80023c8 <ina226_getShuntVoltageReg+0x84>
	}
	else
	{
		if (ReceivedTable[0] > 127)
 80023aa:	7c3b      	ldrb	r3, [r7, #16]
 80023ac:	b25b      	sxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	da06      	bge.n	80023c0 <ina226_getShuntVoltageReg+0x7c>
		{
			return (int32_t) ((ReceivedTable[0] << 8 | ReceivedTable[1]) - INA226_ADC_RESOLUTION );
 80023b2:	7c3b      	ldrb	r3, [r7, #16]
 80023b4:	021b      	lsls	r3, r3, #8
 80023b6:	7c7a      	ldrb	r2, [r7, #17]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80023be:	e003      	b.n	80023c8 <ina226_getShuntVoltageReg+0x84>
		}
		else
		{

			return ((int32_t) ReceivedTable[0] << 8 | ReceivedTable[1]);
 80023c0:	7c3b      	ldrb	r3, [r7, #16]
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	7c7a      	ldrb	r2, [r7, #17]
 80023c6:	4313      	orrs	r3, r2
		}
	}
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	3627c5ac 	.word	0x3627c5ac

080023d4 <ina226_getBusVoltageReg>:

uint16_t ina226_getBusVoltageReg(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af02      	add	r7, sp, #8
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	460b      	mov	r3, r1
 80023de:	ed87 0a01 	vstr	s0, [r7, #4]
 80023e2:	817b      	strh	r3, [r7, #10]
	uint8_t sentTable[1] =
 80023e4:	2302      	movs	r3, #2
 80023e6:	753b      	strb	r3, [r7, #20]
	{ BUSV_REG };
	uint8_t receivedTable[2];
	HAL_I2C_Master_Transmit(I2CHandler, Address, sentTable, 1, I2CTIMEOUT);
 80023e8:	f107 0214 	add.w	r2, r7, #20
 80023ec:	8979      	ldrh	r1, [r7, #10]
 80023ee:	230a      	movs	r3, #10
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	2301      	movs	r3, #1
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f003 fe79 	bl	80060ec <HAL_I2C_Master_Transmit>
	if (HAL_I2C_Master_Receive(I2CHandler, Address, receivedTable, 2, I2CTIMEOUT) != HAL_OK)
 80023fa:	f107 0210 	add.w	r2, r7, #16
 80023fe:	8979      	ldrh	r1, [r7, #10]
 8002400:	230a      	movs	r3, #10
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	2302      	movs	r3, #2
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f003 ff6e 	bl	80062e8 <HAL_I2C_Master_Receive>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00b      	beq.n	800242a <ina226_getBusVoltageReg+0x56>
	{
		return (uint16_t) (preResult / VBUS_LSB );
 8002412:	ed97 7a01 	vldr	s14, [r7, #4]
 8002416:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002460 <ina226_getBusVoltageReg+0x8c>
 800241a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800241e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002422:	ee17 3a90 	vmov	r3, s15
 8002426:	b29b      	uxth	r3, r3
 8002428:	e016      	b.n	8002458 <ina226_getBusVoltageReg+0x84>
	}
	else
	{
		if (receivedTable[0] > 127)
 800242a:	7c3b      	ldrb	r3, [r7, #16]
 800242c:	b25b      	sxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	da0a      	bge.n	8002448 <ina226_getBusVoltageReg+0x74>
		{
			return (uint16_t) (INA226_ADC_RESOLUTION - (receivedTable[0] << 8 | receivedTable[1]));
 8002432:	7c3b      	ldrb	r3, [r7, #16]
 8002434:	021b      	lsls	r3, r3, #8
 8002436:	b21a      	sxth	r2, r3
 8002438:	7c7b      	ldrb	r3, [r7, #17]
 800243a:	b21b      	sxth	r3, r3
 800243c:	4313      	orrs	r3, r2
 800243e:	b21b      	sxth	r3, r3
 8002440:	b29b      	uxth	r3, r3
 8002442:	425b      	negs	r3, r3
 8002444:	b29b      	uxth	r3, r3
 8002446:	e007      	b.n	8002458 <ina226_getBusVoltageReg+0x84>
		}
		else
		{
			return ((uint16_t) receivedTable[0] << 8 | receivedTable[1]);
 8002448:	7c3b      	ldrb	r3, [r7, #16]
 800244a:	021b      	lsls	r3, r3, #8
 800244c:	b21a      	sxth	r2, r3
 800244e:	7c7b      	ldrb	r3, [r7, #17]
 8002450:	b21b      	sxth	r3, r3
 8002452:	4313      	orrs	r3, r2
 8002454:	b21b      	sxth	r3, r3
 8002456:	b29b      	uxth	r3, r3
		}
	}
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	3aa3d70a 	.word	0x3aa3d70a

08002464 <ina226_getPowerReg>:

uint16_t ina226_getPowerReg(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af02      	add	r7, sp, #8
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	460b      	mov	r3, r1
 800246e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002472:	817b      	strh	r3, [r7, #10]
	uint8_t SentTable[1] =
 8002474:	2303      	movs	r3, #3
 8002476:	753b      	strb	r3, [r7, #20]
	{ POWER_REG };
	uint8_t ReceivedTable[2];
	HAL_I2C_Master_Transmit(I2CHandler, Address, SentTable, 1, I2CTIMEOUT);
 8002478:	f107 0214 	add.w	r2, r7, #20
 800247c:	8979      	ldrh	r1, [r7, #10]
 800247e:	230a      	movs	r3, #10
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2301      	movs	r3, #1
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f003 fe31 	bl	80060ec <HAL_I2C_Master_Transmit>
	if (HAL_I2C_Master_Receive(I2CHandler, Address, ReceivedTable, 2,
 800248a:	f107 0210 	add.w	r2, r7, #16
 800248e:	8979      	ldrh	r1, [r7, #10]
 8002490:	230a      	movs	r3, #10
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	2302      	movs	r3, #2
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f003 ff26 	bl	80062e8 <HAL_I2C_Master_Receive>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00b      	beq.n	80024ba <ina226_getPowerReg+0x56>
	I2CTIMEOUT) != HAL_OK)
	{
		return preResult / POWER_LSB ;
 80024a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80024a6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80024d4 <ina226_getPowerReg+0x70>
 80024aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024b2:	ee17 3a90 	vmov	r3, s15
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	e007      	b.n	80024ca <ina226_getPowerReg+0x66>
	}
	else
		return (uint16_t) (ReceivedTable[0] << 8 | ReceivedTable[1]);
 80024ba:	7c3b      	ldrb	r3, [r7, #16]
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	b21a      	sxth	r2, r3
 80024c0:	7c7b      	ldrb	r3, [r7, #17]
 80024c2:	b21b      	sxth	r3, r3
 80024c4:	4313      	orrs	r3, r2
 80024c6:	b21b      	sxth	r3, r3
 80024c8:	b29b      	uxth	r3, r3

}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	3bcccccd 	.word	0x3bcccccd

080024d8 <ina226_getCurrentReg>:

int32_t ina226_getCurrentReg(I2C_HandleTypeDef *I2CHandler, uint16_t Address, float preResult)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af02      	add	r7, sp, #8
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	460b      	mov	r3, r1
 80024e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80024e6:	817b      	strh	r3, [r7, #10]
	uint8_t SentTable[1] =
 80024e8:	2304      	movs	r3, #4
 80024ea:	753b      	strb	r3, [r7, #20]
	{ CURRENT_REG };
	uint8_t ReceivedTable[2];
	HAL_I2C_Master_Transmit(I2CHandler, Address, SentTable, 1, I2CTIMEOUT);
 80024ec:	f107 0214 	add.w	r2, r7, #20
 80024f0:	8979      	ldrh	r1, [r7, #10]
 80024f2:	230a      	movs	r3, #10
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	2301      	movs	r3, #1
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f003 fdf7 	bl	80060ec <HAL_I2C_Master_Transmit>
	if (HAL_I2C_Master_Receive(I2CHandler, Address, ReceivedTable, 2,
 80024fe:	f107 0210 	add.w	r2, r7, #16
 8002502:	8979      	ldrh	r1, [r7, #10]
 8002504:	230a      	movs	r3, #10
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	2302      	movs	r3, #2
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f003 feec 	bl	80062e8 <HAL_I2C_Master_Receive>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <ina226_getCurrentReg+0x56>
	I2CTIMEOUT) != HAL_OK)
	{
		return (uint16_t) (preResult / CURRENT_LSB );
 8002516:	ed97 7a01 	vldr	s14, [r7, #4]
 800251a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002554 <ina226_getCurrentReg+0x7c>
 800251e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002526:	ee17 3a90 	vmov	r3, s15
 800252a:	b29b      	uxth	r3, r3
 800252c:	e00e      	b.n	800254c <ina226_getCurrentReg+0x74>
	}
	else
	{
		if (ReceivedTable[0] > 127)
 800252e:	7c3b      	ldrb	r3, [r7, #16]
 8002530:	b25b      	sxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	da06      	bge.n	8002544 <ina226_getCurrentReg+0x6c>
		{
			return ((int32_t) ((ReceivedTable[0] << 8 | ReceivedTable[1]) - INA226_ADC_RESOLUTION ));
 8002536:	7c3b      	ldrb	r3, [r7, #16]
 8002538:	021b      	lsls	r3, r3, #8
 800253a:	7c7a      	ldrb	r2, [r7, #17]
 800253c:	4313      	orrs	r3, r2
 800253e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8002542:	e003      	b.n	800254c <ina226_getCurrentReg+0x74>
		}
		else
		{

			return ((int32_t) ReceivedTable[0] << 8 | ReceivedTable[1]);
 8002544:	7c3b      	ldrb	r3, [r7, #16]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	7c7a      	ldrb	r2, [r7, #17]
 800254a:	4313      	orrs	r3, r2
		}
	}

}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	3983126f 	.word	0x3983126f

08002558 <ina226_setCalibrationReg>:

uint8_t ina226_setCalibrationReg(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint16_t ConfigWord)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af02      	add	r7, sp, #8
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	807b      	strh	r3, [r7, #2]
 8002564:	4613      	mov	r3, r2
 8002566:	803b      	strh	r3, [r7, #0]
	uint8_t sentTable[3];
	sentTable[0] = CALIB_REG;
 8002568:	2305      	movs	r3, #5
 800256a:	733b      	strb	r3, [r7, #12]
	sentTable[1] = (ConfigWord & 0xFF00) >> 8;
 800256c:	883b      	ldrh	r3, [r7, #0]
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	b29b      	uxth	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	737b      	strb	r3, [r7, #13]
	sentTable[2] = (ConfigWord & 0x00FF);
 8002576:	883b      	ldrh	r3, [r7, #0]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	73bb      	strb	r3, [r7, #14]
	return HAL_I2C_Master_Transmit(I2CHandler, Address, sentTable, 3,
 800257c:	f107 020c 	add.w	r2, r7, #12
 8002580:	8879      	ldrh	r1, [r7, #2]
 8002582:	230a      	movs	r3, #10
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	2303      	movs	r3, #3
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f003 fdaf 	bl	80060ec <HAL_I2C_Master_Transmit>
 800258e:	4603      	mov	r3, r0
	I2CTIMEOUT);
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <ina226_getResult>:

	return calRegResult;
}

void ina226_getResult(Ina226Data_t *resultdef, I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	4613      	mov	r3, r2
 80025a4:	80fb      	strh	r3, [r7, #6]
	resultdef->vbus = ina226_getBusVoltage(I2CHandler, Address, resultdef->vbus);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	eeb0 0a67 	vmov.f32	s0, s15
 80025b2:	4619      	mov	r1, r3
 80025b4:	68b8      	ldr	r0, [r7, #8]
 80025b6:	f7ff fd65 	bl	8002084 <ina226_getBusVoltage>
 80025ba:	eef0 7a40 	vmov.f32	s15, s0
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	edc3 7a01 	vstr	s15, [r3, #4]
	osDelay(1);
 80025c4:	2001      	movs	r0, #1
 80025c6:	f00b fc94 	bl	800def2 <osDelay>
	resultdef->current = ina226_getCurrent(I2CHandler, Address, resultdef->current);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	edd3 7a00 	vldr	s15, [r3]
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	eeb0 0a67 	vmov.f32	s0, s15
 80025d6:	4619      	mov	r1, r3
 80025d8:	68b8      	ldr	r0, [r7, #8]
 80025da:	f7ff fd73 	bl	80020c4 <ina226_getCurrent>
 80025de:	eef0 7a40 	vmov.f32	s15, s0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	edc3 7a00 	vstr	s15, [r3]
	osDelay(1);
 80025e8:	2001      	movs	r0, #1
 80025ea:	f00b fc82 	bl	800def2 <osDelay>
	resultdef->vshunt = ina226_getShuntVoltage(I2CHandler, Address, resultdef->vshunt);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	eeb0 0a67 	vmov.f32	s0, s15
 80025fa:	4619      	mov	r1, r3
 80025fc:	68b8      	ldr	r0, [r7, #8]
 80025fe:	f7ff fd9f 	bl	8002140 <ina226_getShuntVoltage>
 8002602:	eef0 7a40 	vmov.f32	s15, s0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	edc3 7a02 	vstr	s15, [r3, #8]
	osDelay(1);
 800260c:	2001      	movs	r0, #1
 800260e:	f00b fc70 	bl	800def2 <osDelay>
	resultdef->power = ina226_getPower(I2CHandler, Address, resultdef->power);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	edd3 7a03 	vldr	s15, [r3, #12]
 8002618:	88fb      	ldrh	r3, [r7, #6]
 800261a:	eeb0 0a67 	vmov.f32	s0, s15
 800261e:	4619      	mov	r1, r3
 8002620:	68b8      	ldr	r0, [r7, #8]
 8002622:	f7ff fd6d 	bl	8002100 <ina226_getPower>
 8002626:	eef0 7a40 	vmov.f32	s15, s0
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	edc3 7a03 	vstr	s15, [r3, #12]
	osDelay(1);
 8002630:	2001      	movs	r0, #1
 8002632:	f00b fc5e 	bl	800def2 <osDelay>
//	{
//		resultdef->current = ina226_getCurrent(I2CHandler, Address);
//		resultdef->vshunt = ina226_getShuntVoltage(I2CHandler, Address);
//		resultdef->power = ina226_getPower(I2CHandler, Address);
//	}
}
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <ina226_setMaskEnable>:
	else
		return ((uint16_t) receivedTable[0] << 8 | receivedTable[1]);
}

uint8_t ina226_setMaskEnable(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint16_t ConfigWord)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af02      	add	r7, sp, #8
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	460b      	mov	r3, r1
 8002648:	807b      	strh	r3, [r7, #2]
 800264a:	4613      	mov	r3, r2
 800264c:	803b      	strh	r3, [r7, #0]
	uint8_t sentTable[3];
	sentTable[0] = MASK_REG;
 800264e:	2306      	movs	r3, #6
 8002650:	733b      	strb	r3, [r7, #12]
	sentTable[1] = (ConfigWord & 0xFF00) >> 8;
 8002652:	883b      	ldrh	r3, [r7, #0]
 8002654:	0a1b      	lsrs	r3, r3, #8
 8002656:	b29b      	uxth	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	737b      	strb	r3, [r7, #13]
	sentTable[2] = (ConfigWord & 0x00FF);
 800265c:	883b      	ldrh	r3, [r7, #0]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	73bb      	strb	r3, [r7, #14]
	return HAL_I2C_Master_Transmit(I2CHandler, Address, sentTable, 3,
 8002662:	f107 020c 	add.w	r2, r7, #12
 8002666:	8879      	ldrh	r1, [r7, #2]
 8002668:	230a      	movs	r3, #10
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	2303      	movs	r3, #3
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f003 fd3c 	bl	80060ec <HAL_I2C_Master_Transmit>
 8002674:	4603      	mov	r3, r0
	I2CTIMEOUT);
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <ina226_channelInit>:
	else
		return ((uint16_t) receivedTable[0] << 8 | receivedTable[1]);
}

void ina226_channelInit(I2C_HandleTypeDef *I2CHandler, uint16_t Address, uint16_t config)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	460b      	mov	r3, r1
 8002688:	807b      	strh	r3, [r7, #2]
 800268a:	4613      	mov	r3, r2
 800268c:	803b      	strh	r3, [r7, #0]
	ina226_setCalibrationReg(I2CHandler, Address, CALIB_VAL);
 800268e:	887b      	ldrh	r3, [r7, #2]
 8002690:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002694:	4619      	mov	r1, r3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff ff5e 	bl	8002558 <ina226_setCalibrationReg>
	ina226_setConfig(I2CHandler, Address, config);
 800269c:	883a      	ldrh	r2, [r7, #0]
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	4619      	mov	r1, r3
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff fd6a 	bl	800217c <ina226_setConfig>
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <ina226_setBusUnderVoltageAlert>:
void ina226_setBusUnderVoltageAlert(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	807b      	strh	r3, [r7, #2]
	ina226_setMaskEnable(I2CHandler, Address, (BUL | APOL));
 80026bc:	887b      	ldrh	r3, [r7, #2]
 80026be:	f241 0202 	movw	r2, #4098	; 0x1002
 80026c2:	4619      	mov	r1, r3
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff ffba 	bl	800263e <ina226_setMaskEnable>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <ina226_setBusOverVoltageAlert>:

void ina226_setBusOverVoltageAlert(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	460b      	mov	r3, r1
 80026dc:	807b      	strh	r3, [r7, #2]
	ina226_setMaskEnable(I2CHandler, Address, (BOL | APOL));
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	f242 0202 	movw	r2, #8194	; 0x2002
 80026e4:	4619      	mov	r1, r3
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ffa9 	bl	800263e <ina226_setMaskEnable>
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <ina226_setShuntOverVoltageAlert>:
{
	ina226_setAlertLimit(I2CHandler, Address, (uint16_t) (limit / VBUS_LSB ));
}

void ina226_setShuntOverVoltageAlert(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	807b      	strh	r3, [r7, #2]
	ina226_setMaskEnable(I2CHandler, Address, (SOL | APOL));
 8002700:	887b      	ldrh	r3, [r7, #2]
 8002702:	f248 0202 	movw	r2, #32770	; 0x8002
 8002706:	4619      	mov	r1, r3
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ff98 	bl	800263e <ina226_setMaskEnable>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <ina226_setShuntUnderVoltageAlert>:
void ina226_setShuntUnderVoltageAlert(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	460b      	mov	r3, r1
 8002720:	807b      	strh	r3, [r7, #2]
	ina226_setMaskEnable(I2CHandler, Address, (SUL | APOL));
 8002722:	887b      	ldrh	r3, [r7, #2]
 8002724:	f244 0202 	movw	r2, #16386	; 0x4002
 8002728:	4619      	mov	r1, r3
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ff87 	bl	800263e <ina226_setMaskEnable>
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <ina226_setOverPowerAlert>:
{
	ina226_setAlertLimit(I2CHandler, Address, (uint16_t) (limit / VSHUNT_LSB ));
}

void ina226_setOverPowerAlert(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	807b      	strh	r3, [r7, #2]
	ina226_setMaskEnable(I2CHandler, Address, (POL | APOL));
 8002744:	887b      	ldrh	r3, [r7, #2]
 8002746:	f640 0202 	movw	r2, #2050	; 0x802
 800274a:	4619      	mov	r1, r3
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff ff76 	bl	800263e <ina226_setMaskEnable>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <ina226_setOverCurrentAlert>:
{
	ina226_setAlertLimit(I2CHandler, Address, (uint16_t) (limit / POWER_LSB ));
}

void ina226_setOverCurrentAlert(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	460b      	mov	r3, r1
 8002764:	807b      	strh	r3, [r7, #2]
	ina226_setMaskEnable(I2CHandler, Address, (SOL | APOL));
 8002766:	887b      	ldrh	r3, [r7, #2]
 8002768:	f248 0202 	movw	r2, #32770	; 0x8002
 800276c:	4619      	mov	r1, r3
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff ff65 	bl	800263e <ina226_setMaskEnable>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <ina226_setUnderCurrentAlert>:

void ina226_setUnderCurrentAlert(I2C_HandleTypeDef *I2CHandler, uint16_t Address)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	807b      	strh	r3, [r7, #2]
	ina226_setMaskEnable(I2CHandler, Address, (SUL | APOL));
 8002788:	887b      	ldrh	r3, [r7, #2]
 800278a:	f244 0202 	movw	r2, #16386	; 0x4002
 800278e:	4619      	mov	r1, r3
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ff54 	bl	800263e <ina226_setMaskEnable>
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <led1On>:
 */

#include "led.h"

void led1On(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 80027a4:	2200      	movs	r2, #0
 80027a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027aa:	4802      	ldr	r0, [pc, #8]	; (80027b4 <led1On+0x14>)
 80027ac:	f003 fb02 	bl	8005db4 <HAL_GPIO_WritePin>
}
 80027b0:	bf00      	nop
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40020400 	.word	0x40020400

080027b8 <led2On>:

void led2On(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 80027bc:	2200      	movs	r2, #0
 80027be:	2110      	movs	r1, #16
 80027c0:	4802      	ldr	r0, [pc, #8]	; (80027cc <led2On+0x14>)
 80027c2:	f003 faf7 	bl	8005db4 <HAL_GPIO_WritePin>
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40020000 	.word	0x40020000

080027d0 <led1Off>:

void led1Off(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 80027d4:	2201      	movs	r2, #1
 80027d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027da:	4802      	ldr	r0, [pc, #8]	; (80027e4 <led1Off+0x14>)
 80027dc:	f003 faea 	bl	8005db4 <HAL_GPIO_WritePin>
}
 80027e0:	bf00      	nop
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40020400 	.word	0x40020400

080027e8 <led2Off>:

void led2Off(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 80027ec:	2201      	movs	r2, #1
 80027ee:	2110      	movs	r1, #16
 80027f0:	4802      	ldr	r0, [pc, #8]	; (80027fc <led2Off+0x14>)
 80027f2:	f003 fadf 	bl	8005db4 <HAL_GPIO_WritePin>
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40020000 	.word	0x40020000

08002800 <led1Blink>:

void led1Blink(uint16_t delay)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 800280a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800280e:	4805      	ldr	r0, [pc, #20]	; (8002824 <led1Blink+0x24>)
 8002810:	f003 fae9 	bl	8005de6 <HAL_GPIO_TogglePin>
	HAL_Delay((uint16_t) delay);
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	4618      	mov	r0, r3
 8002818:	f002 f8ac 	bl	8004974 <HAL_Delay>
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40020400 	.word	0x40020400

08002828 <lm75ad_readTempReg>:
	sent_table[1] = configuration;
	HAL_I2C_Master_Transmit(I2CHandler, Address, sent_table, 2, I2C_TIMEOUT);
}

uint16_t lm75ad_readTempReg(I2C_HandleTypeDef *I2CHandler, uint8_t Address, float preResult)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af02      	add	r7, sp, #8
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	460b      	mov	r3, r1
 8002832:	ed87 0a01 	vstr	s0, [r7, #4]
 8002836:	72fb      	strb	r3, [r7, #11]
	uint8_t sent_table[1] =
 8002838:	2300      	movs	r3, #0
 800283a:	753b      	strb	r3, [r7, #20]
	{ TEMP_REG };
	uint8_t received_table[2];
	HAL_I2C_Master_Transmit(I2CHandler, Address, sent_table, 1, I2C_TIMEOUT);
 800283c:	7afb      	ldrb	r3, [r7, #11]
 800283e:	b299      	uxth	r1, r3
 8002840:	f107 0214 	add.w	r2, r7, #20
 8002844:	230a      	movs	r3, #10
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	2301      	movs	r3, #1
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f003 fc4e 	bl	80060ec <HAL_I2C_Master_Transmit>

	if (HAL_I2C_Master_Receive(I2CHandler, Address, received_table, 2, I2C_TIMEOUT) != HAL_OK)
 8002850:	7afb      	ldrb	r3, [r7, #11]
 8002852:	b299      	uxth	r1, r3
 8002854:	f107 0210 	add.w	r2, r7, #16
 8002858:	230a      	movs	r3, #10
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	2302      	movs	r3, #2
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f003 fd42 	bl	80062e8 <HAL_I2C_Master_Receive>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d011      	beq.n	800288e <lm75ad_readTempReg+0x66>
	{
		return (uint16_t) (preResult / TEMP_RESOLUTION);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fd fe74 	bl	8000558 <__aeabi_f2d>
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002878:	f7fd fff0 	bl	800085c <__aeabi_ddiv>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4610      	mov	r0, r2
 8002882:	4619      	mov	r1, r3
 8002884:	f7fe f998 	bl	8000bb8 <__aeabi_d2uiz>
 8002888:	4603      	mov	r3, r0
 800288a:	b29b      	uxth	r3, r3
 800288c:	e005      	b.n	800289a <lm75ad_readTempReg+0x72>
	}
	else
	{
		return (uint16_t) (((received_table[0] << 8) | received_table[1]) >> 5);
 800288e:	7c3b      	ldrb	r3, [r7, #16]
 8002890:	021b      	lsls	r3, r3, #8
 8002892:	7c7a      	ldrb	r2, [r7, #17]
 8002894:	4313      	orrs	r3, r2
 8002896:	115b      	asrs	r3, r3, #5
 8002898:	b29b      	uxth	r3, r3
	}

}
 800289a:	4618      	mov	r0, r3
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <lm75ad_setTosLimit>:

void lm75ad_setTosLimit(I2C_HandleTypeDef *I2CHandler, uint8_t Address, float tos_limit)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	460b      	mov	r3, r1
 80028ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80028b2:	72fb      	strb	r3, [r7, #11]
	uint16_t sent_limit = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	82fb      	strh	r3, [r7, #22]
	/*Example: Temp = -55C*/
	/*512-(-55*(-2))*=402 ==> 402<<7=51456 (0x0192<<7 = 0xC900)*/

	if (tos_limit < 0)
 80028b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80028bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c4:	d51b      	bpl.n	80028fe <lm75ad_setTosLimit+0x5a>
	{
		sent_limit = (512 - ((uint16_t) (-tos_limit / TOS_THYST_RESOLUTION))) << 7;
 80028c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80028ca:	eef1 7a67 	vneg.f32	s15, s15
 80028ce:	ee17 3a90 	vmov	r3, s15
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fd fe40 	bl	8000558 <__aeabi_f2d>
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <lm75ad_setTosLimit+0xb0>)
 80028de:	f7fd ffbd 	bl	800085c <__aeabi_ddiv>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	f7fe f965 	bl	8000bb8 <__aeabi_d2uiz>
 80028ee:	4603      	mov	r3, r0
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	01db      	lsls	r3, r3, #7
 80028fa:	82fb      	strh	r3, [r7, #22]
 80028fc:	e011      	b.n	8002922 <lm75ad_setTosLimit+0x7e>
	}
	else
	{
		sent_limit = (uint16_t) (tos_limit / TOS_THYST_RESOLUTION) << 7;
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fd fe2a 	bl	8000558 <__aeabi_f2d>
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	4b12      	ldr	r3, [pc, #72]	; (8002954 <lm75ad_setTosLimit+0xb0>)
 800290a:	f7fd ffa7 	bl	800085c <__aeabi_ddiv>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	f7fe f94f 	bl	8000bb8 <__aeabi_d2uiz>
 800291a:	4603      	mov	r3, r0
 800291c:	b29b      	uxth	r3, r3
 800291e:	01db      	lsls	r3, r3, #7
 8002920:	82fb      	strh	r3, [r7, #22]
	}

	uint8_t sent_table[3];
	sent_table[0] = TOS_REG;
 8002922:	2303      	movs	r3, #3
 8002924:	743b      	strb	r3, [r7, #16]
	sent_table[1] = (sent_limit & 0xFF00) >> 8;
 8002926:	8afb      	ldrh	r3, [r7, #22]
 8002928:	0a1b      	lsrs	r3, r3, #8
 800292a:	b29b      	uxth	r3, r3
 800292c:	b2db      	uxtb	r3, r3
 800292e:	747b      	strb	r3, [r7, #17]
	sent_table[2] = (sent_limit & 0x00FF);
 8002930:	8afb      	ldrh	r3, [r7, #22]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Master_Transmit(I2CHandler, Address, sent_table, 3,
 8002936:	7afb      	ldrb	r3, [r7, #11]
 8002938:	b299      	uxth	r1, r3
 800293a:	f107 0210 	add.w	r2, r7, #16
 800293e:	230a      	movs	r3, #10
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	2303      	movs	r3, #3
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f003 fbd1 	bl	80060ec <HAL_I2C_Master_Transmit>
	I2C_TIMEOUT);

}
 800294a:	bf00      	nop
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	3fe00000 	.word	0x3fe00000

08002958 <lm75ad_setThystLimit>:

	}
}

void lm75ad_setThystLimit(I2C_HandleTypeDef *I2CHandler, uint8_t Address, float thyst_limit)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af02      	add	r7, sp, #8
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	460b      	mov	r3, r1
 8002962:	ed87 0a01 	vstr	s0, [r7, #4]
 8002966:	72fb      	strb	r3, [r7, #11]
	uint16_t sent_limit = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	82fb      	strh	r3, [r7, #22]
	/*Example: Temp = -55C*/
	/*512-(-55*(-2))*=402 ==> 402<<7=51456 (0x0192<<7 = 0xC900)*/

	if (thyst_limit < 0)
 800296c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002970:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002978:	d51b      	bpl.n	80029b2 <lm75ad_setThystLimit+0x5a>
	{
		sent_limit = (512 - ((uint16_t) (-thyst_limit / TOS_THYST_RESOLUTION))) << 7;
 800297a:	edd7 7a01 	vldr	s15, [r7, #4]
 800297e:	eef1 7a67 	vneg.f32	s15, s15
 8002982:	ee17 3a90 	vmov	r3, s15
 8002986:	4618      	mov	r0, r3
 8002988:	f7fd fde6 	bl	8000558 <__aeabi_f2d>
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <lm75ad_setThystLimit+0xb0>)
 8002992:	f7fd ff63 	bl	800085c <__aeabi_ddiv>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4610      	mov	r0, r2
 800299c:	4619      	mov	r1, r3
 800299e:	f7fe f90b 	bl	8000bb8 <__aeabi_d2uiz>
 80029a2:	4603      	mov	r3, r0
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	01db      	lsls	r3, r3, #7
 80029ae:	82fb      	strh	r3, [r7, #22]
 80029b0:	e011      	b.n	80029d6 <lm75ad_setThystLimit+0x7e>
	}
	else
	{
		sent_limit = (uint16_t) (thyst_limit / TOS_THYST_RESOLUTION) << 7;
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fd fdd0 	bl	8000558 <__aeabi_f2d>
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <lm75ad_setThystLimit+0xb0>)
 80029be:	f7fd ff4d 	bl	800085c <__aeabi_ddiv>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4610      	mov	r0, r2
 80029c8:	4619      	mov	r1, r3
 80029ca:	f7fe f8f5 	bl	8000bb8 <__aeabi_d2uiz>
 80029ce:	4603      	mov	r3, r0
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	01db      	lsls	r3, r3, #7
 80029d4:	82fb      	strh	r3, [r7, #22]
	}

	uint8_t sent_table[3];
	sent_table[0] = THYST_REG;
 80029d6:	2302      	movs	r3, #2
 80029d8:	743b      	strb	r3, [r7, #16]
	sent_table[1] = (sent_limit & 0xFF00) >> 8;
 80029da:	8afb      	ldrh	r3, [r7, #22]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	b29b      	uxth	r3, r3
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	747b      	strb	r3, [r7, #17]
	sent_table[2] = (sent_limit & 0x00FF);
 80029e4:	8afb      	ldrh	r3, [r7, #22]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Master_Transmit(I2CHandler, Address, sent_table, 3,
 80029ea:	7afb      	ldrb	r3, [r7, #11]
 80029ec:	b299      	uxth	r1, r3
 80029ee:	f107 0210 	add.w	r2, r7, #16
 80029f2:	230a      	movs	r3, #10
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	2303      	movs	r3, #3
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f003 fb77 	bl	80060ec <HAL_I2C_Master_Transmit>
	I2C_TIMEOUT);

}
 80029fe:	bf00      	nop
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	3fe00000 	.word	0x3fe00000

08002a0c <lm75ad_getTempValue>:

	}
}

float lm75ad_getTempValue(I2C_HandleTypeDef *I2CHandler, uint8_t Address, float preResult)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	460b      	mov	r3, r1
 8002a16:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a1a:	72fb      	strb	r3, [r7, #11]
	uint16_t data = lm75ad_readTempReg(I2CHandler, Address, preResult);
 8002a1c:	7afb      	ldrb	r3, [r7, #11]
 8002a1e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a22:	4619      	mov	r1, r3
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f7ff feff 	bl	8002828 <lm75ad_readTempReg>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	82fb      	strh	r3, [r7, #22]
	/*Example: -25C*/
	/*-25 -> 0b111 1110 0111 (dec 2023) => 2023-2^11(2048)=-25*/
	if ((data >> 10) == 1) // Check if the MSB is 1, meaning a negative temperature is measured
 8002a2e:	8afb      	ldrh	r3, [r7, #22]
 8002a30:	0a9b      	lsrs	r3, r3, #10
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d10b      	bne.n	8002a50 <lm75ad_getTempValue+0x44>
	{
		//data = (~(data - 1)) & 0x07FF; // convert to positive number and keep 11-bits
		return ((float) (data - 2048) * TEMP_RESOLUTION);
 8002a38:	8afb      	ldrh	r3, [r7, #22]
 8002a3a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002a3e:	ee07 3a90 	vmov	s15, r3
 8002a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a46:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002a4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a4e:	e008      	b.n	8002a62 <lm75ad_getTempValue+0x56>
	}
	else
	{
		return ((float) (data) * TEMP_RESOLUTION);
 8002a50:	8afb      	ldrh	r3, [r7, #22]
 8002a52:	ee07 3a90 	vmov	s15, r3
 8002a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a5a:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002a5e:	ee67 7a87 	vmul.f32	s15, s15, s14
	}

}
 8002a62:	eeb0 0a67 	vmov.f32	s0, s15
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002a70:	f001 ff3e 	bl	80048f0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002a74:	f000 f8bc 	bl	8002bf0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002a78:	f7fe fe4e 	bl	8001718 <MX_GPIO_Init>
	MX_DMA_Init();
 8002a7c:	f7fe fc04 	bl	8001288 <MX_DMA_Init>
	MX_ADC1_Init();
 8002a80:	f7fe fa8c 	bl	8000f9c <MX_ADC1_Init>
	MX_I2C1_Init();
 8002a84:	f7ff fa88 	bl	8001f98 <MX_I2C1_Init>
	MX_SPI1_Init();
 8002a88:	f001 f9a6 	bl	8003dd8 <MX_SPI1_Init>
	MX_TIM4_Init();
 8002a8c:	f001 fe20 	bl	80046d0 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8002a90:	f00c fc78 	bl	800f384 <MX_USB_DEVICE_Init>
//	printf("Initializing...\r\n");
	ssd1306_Init();
 8002a94:	f001 fa58 	bl	8003f48 <ssd1306_Init>
	ssd1306_SetCursor(10, 10);
 8002a98:	210a      	movs	r1, #10
 8002a9a:	200a      	movs	r0, #10
 8002a9c:	f001 fc18 	bl	80042d0 <ssd1306_SetCursor>
	ssd1306_WriteString("Welcome", Font_11x18, White);
 8002aa0:	4a42      	ldr	r2, [pc, #264]	; (8002bac <main+0x140>)
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	ca06      	ldmia	r2, {r1, r2}
 8002aa6:	4842      	ldr	r0, [pc, #264]	; (8002bb0 <main+0x144>)
 8002aa8:	f001 fbec 	bl	8004284 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 30);
 8002aac:	211e      	movs	r1, #30
 8002aae:	200a      	movs	r0, #10
 8002ab0:	f001 fc0e 	bl	80042d0 <ssd1306_SetCursor>
	ssd1306_WriteString("to REMDx", Font_11x18, White);
 8002ab4:	4a3d      	ldr	r2, [pc, #244]	; (8002bac <main+0x140>)
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	ca06      	ldmia	r2, {r1, r2}
 8002aba:	483e      	ldr	r0, [pc, #248]	; (8002bb4 <main+0x148>)
 8002abc:	f001 fbe2 	bl	8004284 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 50);
 8002ac0:	2132      	movs	r1, #50	; 0x32
 8002ac2:	200a      	movs	r0, #10
 8002ac4:	f001 fc04 	bl	80042d0 <ssd1306_SetCursor>
	ssd1306_WriteString("by Qu'rac Tech", Font_7x10, White);
 8002ac8:	4a3b      	ldr	r2, [pc, #236]	; (8002bb8 <main+0x14c>)
 8002aca:	2301      	movs	r3, #1
 8002acc:	ca06      	ldmia	r2, {r1, r2}
 8002ace:	483b      	ldr	r0, [pc, #236]	; (8002bbc <main+0x150>)
 8002ad0:	f001 fbd8 	bl	8004284 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002ad4:	f001 fac6 	bl	8004064 <ssd1306_UpdateScreen>
	HAL_Delay(2000);
 8002ad8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002adc:	f001 ff4a 	bl	8004974 <HAL_Delay>

//	ina226_channelInit(&hi2c1, CH1_ADDRESS,
//	RESET_INACTIVE | UNUSED_BITS | AVG_1 | VBUS_1100uS | VSH_1100uS | MODE_CONT_SHUNT_AND_BUS);
	ina226_channelInit(&hi2c1, CH1_ADDRESS,
 8002ae0:	f244 2207 	movw	r2, #16903	; 0x4207
 8002ae4:	2180      	movs	r1, #128	; 0x80
 8002ae6:	4836      	ldr	r0, [pc, #216]	; (8002bc0 <main+0x154>)
 8002ae8:	f7ff fdc9 	bl	800267e <ina226_channelInit>
	RESET_INACTIVE | UNUSED_BITS | AVG_4 | VBUS_140uS | VSH_140uS | MODE_CONT_SHUNT_AND_BUS);
	HAL_Delay(1);
 8002aec:	2001      	movs	r0, #1
 8002aee:	f001 ff41 	bl	8004974 <HAL_Delay>
//	ina226_channelInit(&hi2c1, CH2_ADDRESS,
//	RESET_INACTIVE | UNUSED_BITS | AVG_1 | VBUS_1100uS | VSH_1100uS | MODE_CONT_SHUNT_AND_BUS);
	ina226_channelInit(&hi2c1, CH2_ADDRESS,
 8002af2:	f244 2207 	movw	r2, #16903	; 0x4207
 8002af6:	2182      	movs	r1, #130	; 0x82
 8002af8:	4831      	ldr	r0, [pc, #196]	; (8002bc0 <main+0x154>)
 8002afa:	f7ff fdc0 	bl	800267e <ina226_channelInit>
	RESET_INACTIVE | UNUSED_BITS | AVG_4 | VBUS_140uS | VSH_140uS | MODE_CONT_SHUNT_AND_BUS);
	if (HAL_OK != HAL_ADC_Start_DMA(&hadc1, adc_data, 4))
 8002afe:	2204      	movs	r2, #4
 8002b00:	4930      	ldr	r1, [pc, #192]	; (8002bc4 <main+0x158>)
 8002b02:	4831      	ldr	r0, [pc, #196]	; (8002bc8 <main+0x15c>)
 8002b04:	f001 ff9e 	bl	8004a44 <HAL_ADC_Start_DMA>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <main+0xa6>
	{
		Error_Handler();
 8002b0e:	f000 f8eb 	bl	8002ce8 <Error_Handler>
	}
	CDC_Transmit_FS((uint8_t*) "Starting USB\r\n", sizeof("Starting USB\r\n"));
 8002b12:	210f      	movs	r1, #15
 8002b14:	482d      	ldr	r0, [pc, #180]	; (8002bcc <main+0x160>)
 8002b16:	f00c fd41 	bl	800f59c <CDC_Transmit_FS>

	SetupDataState = EEPROMReadByte(EEPROMLoadPage, 0);
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	2009      	movs	r0, #9
 8002b1e:	f7fe fb85 	bl	800122c <EEPROMReadByte>
 8002b22:	4603      	mov	r3, r0
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b2a      	ldr	r3, [pc, #168]	; (8002bd0 <main+0x164>)
 8002b28:	701a      	strb	r2, [r3, #0]
		EEPROMWriteByte(EEPROMLoadPage, 0, (uint8_t*) (1));
		newSetupData = defaultSetupData;
	}
	else
	{
		if (SetupDataState == loadCustomSetupData)
 8002b2a:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <main+0x164>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d116      	bne.n	8002b60 <main+0xf4>
		{
			g_ina226Ch1ConfigUpdateFlag = 1;
 8002b32:	4b28      	ldr	r3, [pc, #160]	; (8002bd4 <main+0x168>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]
			g_ina226Ch2ConfigUpdateFlag = 1;
 8002b38:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <main+0x16c>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]
			getSavedUserConfigData(EEPROMCustomPage, regBuffer);
 8002b3e:	4927      	ldr	r1, [pc, #156]	; (8002bdc <main+0x170>)
 8002b40:	200c      	movs	r0, #12
 8002b42:	f7ff f8f5 	bl	8001d30 <getSavedUserConfigData>
			loadSettingFromBuffer(&customSetupData, regBuffer);
 8002b46:	4925      	ldr	r1, [pc, #148]	; (8002bdc <main+0x170>)
 8002b48:	4825      	ldr	r0, [pc, #148]	; (8002be0 <main+0x174>)
 8002b4a:	f000 fef9 	bl	8003940 <loadSettingFromBuffer>
			newSetupData = customSetupData;
 8002b4e:	4a25      	ldr	r2, [pc, #148]	; (8002be4 <main+0x178>)
 8002b50:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <main+0x174>)
 8002b52:	4610      	mov	r0, r2
 8002b54:	4619      	mov	r1, r3
 8002b56:	2348      	movs	r3, #72	; 0x48
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f00d faea 	bl	8010132 <memcpy>
 8002b5e:	e015      	b.n	8002b8c <main+0x120>
		}
		else
		{
			g_ina226Ch1ConfigUpdateFlag = 1;
 8002b60:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <main+0x168>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	701a      	strb	r2, [r3, #0]
			g_ina226Ch2ConfigUpdateFlag = 1;
 8002b66:	4b1c      	ldr	r3, [pc, #112]	; (8002bd8 <main+0x16c>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
			getSavedUserConfigData(EEPROMDefaultPage, regBuffer);
 8002b6c:	491b      	ldr	r1, [pc, #108]	; (8002bdc <main+0x170>)
 8002b6e:	200a      	movs	r0, #10
 8002b70:	f7ff f8de 	bl	8001d30 <getSavedUserConfigData>
			loadSettingFromBuffer(&defaultSetupData, regBuffer);
 8002b74:	4919      	ldr	r1, [pc, #100]	; (8002bdc <main+0x170>)
 8002b76:	481c      	ldr	r0, [pc, #112]	; (8002be8 <main+0x17c>)
 8002b78:	f000 fee2 	bl	8003940 <loadSettingFromBuffer>
			//			defaultSettings(&defaultSetupData);
			newSetupData = defaultSetupData;
 8002b7c:	4a19      	ldr	r2, [pc, #100]	; (8002be4 <main+0x178>)
 8002b7e:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <main+0x17c>)
 8002b80:	4610      	mov	r0, r2
 8002b82:	4619      	mov	r1, r3
 8002b84:	2348      	movs	r3, #72	; 0x48
 8002b86:	461a      	mov	r2, r3
 8002b88:	f00d fad3 	bl	8010132 <memcpy>
		}
	}
//	defaultSettings(&defaultSetupData);
	newSetupData = defaultSetupData;
 8002b8c:	4a15      	ldr	r2, [pc, #84]	; (8002be4 <main+0x178>)
 8002b8e:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <main+0x17c>)
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	2348      	movs	r3, #72	; 0x48
 8002b96:	461a      	mov	r2, r3
 8002b98:	f00d facb 	bl	8010132 <memcpy>
	g_HWUpdateFlag = 1;
 8002b9c:	4b13      	ldr	r3, [pc, #76]	; (8002bec <main+0x180>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	701a      	strb	r2, [r3, #0]

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8002ba2:	f7fe fbcb 	bl	800133c <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8002ba6:	f00b f951 	bl	800de4c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8002baa:	e7fe      	b.n	8002baa <main+0x13e>
 8002bac:	2000000c 	.word	0x2000000c
 8002bb0:	080131d0 	.word	0x080131d0
 8002bb4:	080131d8 	.word	0x080131d8
 8002bb8:	20000004 	.word	0x20000004
 8002bbc:	080131e4 	.word	0x080131e4
 8002bc0:	200006d0 	.word	0x200006d0
 8002bc4:	200006a8 	.word	0x200006a8
 8002bc8:	20000300 	.word	0x20000300
 8002bcc:	080131f4 	.word	0x080131f4
 8002bd0:	200007fd 	.word	0x200007fd
 8002bd4:	200006bb 	.word	0x200006bb
 8002bd8:	200006bc 	.word	0x200006bc
 8002bdc:	20000800 	.word	0x20000800
 8002be0:	200007b4 	.word	0x200007b4
 8002be4:	20000724 	.word	0x20000724
 8002be8:	2000076c 	.word	0x2000076c
 8002bec:	200006b8 	.word	0x200006b8

08002bf0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b094      	sub	sp, #80	; 0x50
 8002bf4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8002bf6:	f107 0320 	add.w	r3, r7, #32
 8002bfa:	2230      	movs	r2, #48	; 0x30
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f00d fabf 	bl	8010182 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8002c04:	f107 030c 	add.w	r3, r7, #12
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002c14:	2300      	movs	r3, #0
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	4b28      	ldr	r3, [pc, #160]	; (8002cbc <SystemClock_Config+0xcc>)
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	4a27      	ldr	r2, [pc, #156]	; (8002cbc <SystemClock_Config+0xcc>)
 8002c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c22:	6413      	str	r3, [r2, #64]	; 0x40
 8002c24:	4b25      	ldr	r3, [pc, #148]	; (8002cbc <SystemClock_Config+0xcc>)
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c30:	2300      	movs	r3, #0
 8002c32:	607b      	str	r3, [r7, #4]
 8002c34:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <SystemClock_Config+0xd0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c3c:	4a20      	ldr	r2, [pc, #128]	; (8002cc0 <SystemClock_Config+0xd0>)
 8002c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	4b1e      	ldr	r3, [pc, #120]	; (8002cc0 <SystemClock_Config+0xd0>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c50:	2301      	movs	r3, #1
 8002c52:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c62:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002c64:	2304      	movs	r3, #4
 8002c66:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8002c68:	23a8      	movs	r3, #168	; 0xa8
 8002c6a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c70:	2307      	movs	r3, #7
 8002c72:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c74:	f107 0320 	add.w	r3, r7, #32
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f005 ffa3 	bl	8008bc4 <HAL_RCC_OscConfig>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8002c84:	f000 f830 	bl	8002ce8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c88:	230f      	movs	r3, #15
 8002c8a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c98:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c9e:	f107 030c 	add.w	r3, r7, #12
 8002ca2:	2102      	movs	r1, #2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f006 fa05 	bl	80090b4 <HAL_RCC_ClockConfig>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8002cb0:	f000 f81a 	bl	8002ce8 <Error_Handler>
	}
}
 8002cb4:	bf00      	nop
 8002cb6:	3750      	adds	r7, #80	; 0x50
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40007000 	.word	0x40007000

08002cc4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d101      	bne.n	8002cda <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8002cd6:	f001 fe2d 	bl	8004934 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40010000 	.word	0x40010000

08002ce8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cec:	b672      	cpsid	i
}
 8002cee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002cf0:	e7fe      	b.n	8002cf0 <Error_Handler+0x8>
	...

08002cf4 <run_pwm_out0>:
	timer4->Instance->CCR3 = duty;
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
}

void run_pwm_out0(uint8_t duty_cycle)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
	htim4.Instance->CCR3 = duty_cycle;
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <run_pwm_out0+0x24>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	79fa      	ldrb	r2, [r7, #7]
 8002d04:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002d06:	2108      	movs	r1, #8
 8002d08:	4803      	ldr	r0, [pc, #12]	; (8002d18 <run_pwm_out0+0x24>)
 8002d0a:	f006 fdb9 	bl	8009880 <HAL_TIM_PWM_Start>
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20000ccc 	.word	0x20000ccc

08002d1c <stop_pwm_out0>:

void stop_pwm_out0(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
	htim4.Instance->CCR3 = 0;
 8002d20:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <stop_pwm_out0+0x18>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2200      	movs	r2, #0
 8002d26:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002d28:	2108      	movs	r1, #8
 8002d2a:	4802      	ldr	r0, [pc, #8]	; (8002d34 <stop_pwm_out0+0x18>)
 8002d2c:	f006 fda8 	bl	8009880 <HAL_TIM_PWM_Start>
//	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
}
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20000ccc 	.word	0x20000ccc

08002d38 <run_pwm_out1>:

void run_pwm_out1(uint8_t duty_cycle)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
	htim4.Instance->CCR4 = duty_cycle;
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <run_pwm_out1+0x24>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	79fa      	ldrb	r2, [r7, #7]
 8002d48:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002d4a:	210c      	movs	r1, #12
 8002d4c:	4803      	ldr	r0, [pc, #12]	; (8002d5c <run_pwm_out1+0x24>)
 8002d4e:	f006 fd97 	bl	8009880 <HAL_TIM_PWM_Start>
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000ccc 	.word	0x20000ccc

08002d60 <stop_pwm_out1>:

void stop_pwm_out1(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
	htim4.Instance->CCR4 = 0;
 8002d64:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <stop_pwm_out1+0x18>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002d6c:	210c      	movs	r1, #12
 8002d6e:	4802      	ldr	r0, [pc, #8]	; (8002d78 <stop_pwm_out1+0x18>)
 8002d70:	f006 fd86 	bl	8009880 <HAL_TIM_PWM_Start>
//	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000ccc 	.word	0x20000ccc

08002d7c <set_pwm_freq>:

void set_pwm_freq(uint16_t pwm_freq)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	80fb      	strh	r3, [r7, #6]
	htim4.Instance->PSC = HAL_RCC_GetSysClockFreq() / (htim4.Instance->ARR * pwm_freq);
 8002d86:	f006 fa7b 	bl	8009280 <HAL_RCC_GetSysClockFreq>
 8002d8a:	4601      	mov	r1, r0
 8002d8c:	4b07      	ldr	r3, [pc, #28]	; (8002dac <set_pwm_freq+0x30>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	88fa      	ldrh	r2, [r7, #6]
 8002d94:	fb03 f202 	mul.w	r2, r3, r2
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <set_pwm_freq+0x30>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	fbb1 f2f2 	udiv	r2, r1, r2
 8002da0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000ccc 	.word	0x20000ccc

08002db0 <registerMap>:
SetupDataState_e SetupDataState = loadDefaultSetupData;
RegisterData_t regBuffer[NO_REGISTERS] =
{ 0 };

void registerMap(uint8_t *cmd)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b0a2      	sub	sp, #136	; 0x88
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
	static uint8_t w = 119;		// ascii value of w is 119 in decimal
	static uint8_t r = 114;		// ascii value of r is 114 in decimal
//	printf(cmd);
//	printf("cmd=%s\r\n", cmd);
	registerNumber = (uint8_t) (strtol(&cmd[1], NULL, 16) >> 8);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	2210      	movs	r2, #16
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f00e f8d3 	bl	8010f6c <strtol>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	121b      	asrs	r3, r3, #8
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	4b32      	ldr	r3, [pc, #200]	; (8002e98 <registerMap+0xe8>)
 8002dce:	701a      	strb	r2, [r3, #0]
	guserEnteredData = (uint8_t) (strtol(&cmd[3], NULL, 16));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3303      	adds	r3, #3
 8002dd4:	2210      	movs	r2, #16
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f00e f8c7 	bl	8010f6c <strtol>
 8002dde:	4603      	mov	r3, r0
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	4b2e      	ldr	r3, [pc, #184]	; (8002e9c <registerMap+0xec>)
 8002de4:	701a      	strb	r2, [r3, #0]

	// Create an array of function pointers, one for each case in the switch statement
	regHandlerFunc regHandlers[NO_REGISTERS] =
 8002de6:	4a2e      	ldr	r2, [pc, #184]	; (8002ea0 <registerMap+0xf0>)
 8002de8:	f107 0308 	add.w	r3, r7, #8
 8002dec:	4611      	mov	r1, r2
 8002dee:	2280      	movs	r2, #128	; 0x80
 8002df0:	4618      	mov	r0, r3
 8002df2:	f00d f99e 	bl	8010132 <memcpy>
	{ &reg0Handler, &reg1Handler, &reg2Handler, &reg3Handler, &reg4Handler, &reg5Handler, &reg6Handler, &reg7Handler,
			&reg8Handler, &reg9Handler, &reg10Handler, &reg11Handler, &reg12Handler, &reg13Handler, &reg14Handler,
			&reg15Handler, &reg16Handler, &reg17Handler, &reg18Handler, &reg19Handler, &reg20Handler, &reg21Handler,
			&reg22Handler, &reg23Handler, &reg24Handler, &reg25Handler, &reg26Handler, &reg27Handler, &reg28Handler,
			&reg29Handler, &reg30Handler, &reg31Handler };
	if (cmd[0] == w)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	781a      	ldrb	r2, [r3, #0]
 8002dfa:	4b2a      	ldr	r3, [pc, #168]	; (8002ea4 <registerMap+0xf4>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d12f      	bne.n	8002e62 <registerMap+0xb2>
	{
		if (registerNumber < 2)
 8002e02:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <registerMap+0xe8>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d815      	bhi.n	8002e36 <registerMap+0x86>
		{
			if (registerNumber == 0)
 8002e0a:	4b23      	ldr	r3, [pc, #140]	; (8002e98 <registerMap+0xe8>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <registerMap+0x70>
			{
				regBuffer[registerNumber].value = HW_VERSION;
 8002e12:	4b21      	ldr	r3, [pc, #132]	; (8002e98 <registerMap+0xe8>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	4b23      	ldr	r3, [pc, #140]	; (8002ea8 <registerMap+0xf8>)
 8002e1a:	2119      	movs	r1, #25
 8002e1c:	5499      	strb	r1, [r3, r2]
 8002e1e:	e011      	b.n	8002e44 <registerMap+0x94>
			}
			else if (registerNumber == 1)
 8002e20:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <registerMap+0xe8>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d10d      	bne.n	8002e44 <registerMap+0x94>
			{
				regBuffer[registerNumber].value = FW_VERSION;
 8002e28:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <registerMap+0xe8>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <registerMap+0xf8>)
 8002e30:	2114      	movs	r1, #20
 8002e32:	5499      	strb	r1, [r3, r2]
 8002e34:	e006      	b.n	8002e44 <registerMap+0x94>
			}
		}
		else
		{
			regBuffer[registerNumber].value = guserEnteredData;
 8002e36:	4b18      	ldr	r3, [pc, #96]	; (8002e98 <registerMap+0xe8>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <registerMap+0xec>)
 8002e3e:	7819      	ldrb	r1, [r3, #0]
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <registerMap+0xf8>)
 8002e42:	5499      	strb	r1, [r3, r2]
		}
		// Call the function pointer for the register number
		regHandlers[registerNumber](guserEnteredData);
 8002e44:	4b14      	ldr	r3, [pc, #80]	; (8002e98 <registerMap+0xe8>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	3388      	adds	r3, #136	; 0x88
 8002e4c:	443b      	add	r3, r7
 8002e4e:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8002e52:	4a12      	ldr	r2, [pc, #72]	; (8002e9c <registerMap+0xec>)
 8002e54:	7812      	ldrb	r2, [r2, #0]
 8002e56:	4610      	mov	r0, r2
 8002e58:	4798      	blx	r3
		printf("ACK\r\n");
 8002e5a:	4814      	ldr	r0, [pc, #80]	; (8002eac <registerMap+0xfc>)
 8002e5c:	f00d ff1e 	bl	8010c9c <puts>
	}
	else
	{
		printf("NAK\r\n");
	}
}
 8002e60:	e015      	b.n	8002e8e <registerMap+0xde>
	else if (cmd[0] == r)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	781a      	ldrb	r2, [r3, #0]
 8002e66:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <registerMap+0x100>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d10c      	bne.n	8002e88 <registerMap+0xd8>
		printf("#R#%02X%02X\r\n", registerNumber, regBuffer[registerNumber].value);
 8002e6e:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <registerMap+0xe8>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	4619      	mov	r1, r3
 8002e74:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <registerMap+0xe8>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <registerMap+0xf8>)
 8002e7c:	5c9b      	ldrb	r3, [r3, r2]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	480c      	ldr	r0, [pc, #48]	; (8002eb4 <registerMap+0x104>)
 8002e82:	f00d fe85 	bl	8010b90 <iprintf>
}
 8002e86:	e002      	b.n	8002e8e <registerMap+0xde>
		printf("NAK\r\n");
 8002e88:	480b      	ldr	r0, [pc, #44]	; (8002eb8 <registerMap+0x108>)
 8002e8a:	f00d ff07 	bl	8010c9c <puts>
}
 8002e8e:	bf00      	nop
 8002e90:	3788      	adds	r7, #136	; 0x88
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	200007fc 	.word	0x200007fc
 8002e9c:	200006a1 	.word	0x200006a1
 8002ea0:	08013224 	.word	0x08013224
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	20000800 	.word	0x20000800
 8002eac:	08013204 	.word	0x08013204
 8002eb0:	20000001 	.word	0x20000001
 8002eb4:	0801320c 	.word	0x0801320c
 8002eb8:	0801321c 	.word	0x0801321c

08002ebc <reg0Handler>:

void reg0Handler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
	newSetupData.setRegister.id0 = HW_VERSION;
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <reg0Handler+0x1c>)
 8002ec2:	2219      	movs	r2, #25
 8002ec4:	751a      	strb	r2, [r3, #20]
	printf("HW VERSION: %0.2f\r\n", (float) (HW_VERSION) / 10);
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	4b04      	ldr	r3, [pc, #16]	; (8002edc <reg0Handler+0x20>)
 8002ecc:	4804      	ldr	r0, [pc, #16]	; (8002ee0 <reg0Handler+0x24>)
 8002ece:	f00d fe5f 	bl	8010b90 <iprintf>
}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000724 	.word	0x20000724
 8002edc:	40040000 	.word	0x40040000
 8002ee0:	080132a4 	.word	0x080132a4

08002ee4 <reg1Handler>:

void reg1Handler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
	newSetupData.setRegister.id0 = FW_VERSION;
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <reg1Handler+0x1c>)
 8002eea:	2214      	movs	r2, #20
 8002eec:	751a      	strb	r2, [r3, #20]
	printf("FW VERSION: %0.2f\r\n", (float) (FW_VERSION) / 10);
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ef6:	4803      	ldr	r0, [pc, #12]	; (8002f04 <reg1Handler+0x20>)
 8002ef8:	f00d fe4a 	bl	8010b90 <iprintf>
}
 8002efc:	bf00      	nop
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20000724 	.word	0x20000724
 8002f04:	080132b8 	.word	0x080132b8

08002f08 <reg2Handler>:

void reg2Handler(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
	newSetupData.setRegister.set_led1 = (regBuffer[registerNumber].value & 0x01);
 8002f0c:	4b33      	ldr	r3, [pc, #204]	; (8002fdc <reg2Handler+0xd4>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	4b33      	ldr	r3, [pc, #204]	; (8002fe0 <reg2Handler+0xd8>)
 8002f14:	5c9b      	ldrb	r3, [r3, r2]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	4b31      	ldr	r3, [pc, #196]	; (8002fe4 <reg2Handler+0xdc>)
 8002f1e:	765a      	strb	r2, [r3, #25]
	newSetupData.setRegister.set_led2 = ((regBuffer[registerNumber].value & 0x02) >> 1);
 8002f20:	4b2e      	ldr	r3, [pc, #184]	; (8002fdc <reg2Handler+0xd4>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	4b2e      	ldr	r3, [pc, #184]	; (8002fe0 <reg2Handler+0xd8>)
 8002f28:	5c9b      	ldrb	r3, [r3, r2]
 8002f2a:	105b      	asrs	r3, r3, #1
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	4b2b      	ldr	r3, [pc, #172]	; (8002fe4 <reg2Handler+0xdc>)
 8002f36:	769a      	strb	r2, [r3, #26]
	newSetupData.setRegister.set_dig_out0 = ((regBuffer[registerNumber].value & 0x04) >> 2);
 8002f38:	4b28      	ldr	r3, [pc, #160]	; (8002fdc <reg2Handler+0xd4>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4b28      	ldr	r3, [pc, #160]	; (8002fe0 <reg2Handler+0xd8>)
 8002f40:	5c9b      	ldrb	r3, [r3, r2]
 8002f42:	109b      	asrs	r3, r3, #2
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <reg2Handler+0xdc>)
 8002f4e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	newSetupData.setRegister.set_dig_out1 = ((regBuffer[registerNumber].value & 0x08) >> 3);
 8002f52:	4b22      	ldr	r3, [pc, #136]	; (8002fdc <reg2Handler+0xd4>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	4b21      	ldr	r3, [pc, #132]	; (8002fe0 <reg2Handler+0xd8>)
 8002f5a:	5c9b      	ldrb	r3, [r3, r2]
 8002f5c:	10db      	asrs	r3, r3, #3
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	4b1f      	ldr	r3, [pc, #124]	; (8002fe4 <reg2Handler+0xdc>)
 8002f68:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	;
	newSetupData.getRegister.get_int_in0 = ((regBuffer[registerNumber].value & 0x10) >> 4);
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <reg2Handler+0xd4>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <reg2Handler+0xd8>)
 8002f74:	5c9b      	ldrb	r3, [r3, r2]
 8002f76:	111b      	asrs	r3, r3, #4
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	4b18      	ldr	r3, [pc, #96]	; (8002fe4 <reg2Handler+0xdc>)
 8002f82:	72da      	strb	r2, [r3, #11]
	newSetupData.getRegister.get_int_in1 = ((regBuffer[registerNumber].value & 0x20) >> 5);
 8002f84:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <reg2Handler+0xd4>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <reg2Handler+0xd8>)
 8002f8c:	5c9b      	ldrb	r3, [r3, r2]
 8002f8e:	115b      	asrs	r3, r3, #5
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <reg2Handler+0xdc>)
 8002f9a:	731a      	strb	r2, [r3, #12]
	newSetupData.setRegister.en_pwm0 = ((regBuffer[registerNumber].value & 0x40) >> 6);
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <reg2Handler+0xd4>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <reg2Handler+0xd8>)
 8002fa4:	5c9b      	ldrb	r3, [r3, r2]
 8002fa6:	119b      	asrs	r3, r3, #6
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <reg2Handler+0xdc>)
 8002fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	newSetupData.setRegister.en_pwm1 = ((regBuffer[registerNumber].value & 0x80) >> 7);
 8002fb6:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <reg2Handler+0xd4>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <reg2Handler+0xd8>)
 8002fbe:	5c9b      	ldrb	r3, [r3, r2]
 8002fc0:	09db      	lsrs	r3, r3, #7
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <reg2Handler+0xdc>)
 8002fc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
	g_HWUpdateFlag = 1;
 8002fca:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <reg2Handler+0xe0>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	200007fc 	.word	0x200007fc
 8002fe0:	20000800 	.word	0x20000800
 8002fe4:	20000724 	.word	0x20000724
 8002fe8:	200006b8 	.word	0x200006b8

08002fec <reg3Handler>:

void reg3Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
	newSetupData.setRegister.auto_off_dis = (regBuffer[registerNumber].value & 0x01);
 8002ff0:	4b14      	ldr	r3, [pc, #80]	; (8003044 <reg3Handler+0x58>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4b14      	ldr	r3, [pc, #80]	; (8003048 <reg3Handler+0x5c>)
 8002ff8:	5c9b      	ldrb	r3, [r3, r2]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	4b12      	ldr	r3, [pc, #72]	; (800304c <reg3Handler+0x60>)
 8003002:	759a      	strb	r2, [r3, #22]
	newSetupData.setRegister.meas_mode = ((regBuffer[registerNumber].value & 0x02) >> 1);
 8003004:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <reg3Handler+0x58>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <reg3Handler+0x5c>)
 800300c:	5c9b      	ldrb	r3, [r3, r2]
 800300e:	105b      	asrs	r3, r3, #1
 8003010:	b2db      	uxtb	r3, r3
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	b2da      	uxtb	r2, r3
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <reg3Handler+0x60>)
 800301a:	75da      	strb	r2, [r3, #23]
	newSetupData.setRegister.en_disp = ((regBuffer[registerNumber].value & 0x04) >> 2);
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <reg3Handler+0x58>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	4b09      	ldr	r3, [pc, #36]	; (8003048 <reg3Handler+0x5c>)
 8003024:	5c9b      	ldrb	r3, [r3, r2]
 8003026:	109b      	asrs	r3, r3, #2
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	b2da      	uxtb	r2, r3
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <reg3Handler+0x60>)
 8003032:	761a      	strb	r2, [r3, #24]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
	g_HWUpdateFlag = 1;
 8003034:	4b06      	ldr	r3, [pc, #24]	; (8003050 <reg3Handler+0x64>)
 8003036:	2201      	movs	r2, #1
 8003038:	701a      	strb	r2, [r3, #0]
}
 800303a:	bf00      	nop
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	200007fc 	.word	0x200007fc
 8003048:	20000800 	.word	0x20000800
 800304c:	20000724 	.word	0x20000724
 8003050:	200006b8 	.word	0x200006b8

08003054 <reg4Handler>:

void reg4Handler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
	newSetupData.setRegister.set_over_temp_limit = regBuffer[registerNumber].value;
 8003058:	4b24      	ldr	r3, [pc, #144]	; (80030ec <reg4Handler+0x98>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <reg4Handler+0x9c>)
 8003060:	5c9a      	ldrb	r2, [r3, r2]
 8003062:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <reg4Handler+0xa0>)
 8003064:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	if (newSetupData.setRegister.set_over_temp_limit > 127)
 8003068:	4b22      	ldr	r3, [pc, #136]	; (80030f4 <reg4Handler+0xa0>)
 800306a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800306e:	b25b      	sxtb	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	da1d      	bge.n	80030b0 <reg4Handler+0x5c>
	{
		lm75ad_setTosLimit(&hi2c1, LM75AD_ADDRESS, (float) (newSetupData.setRegister.set_over_temp_limit - 256));
 8003074:	4b1f      	ldr	r3, [pc, #124]	; (80030f4 <reg4Handler+0xa0>)
 8003076:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800307a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003086:	eeb0 0a67 	vmov.f32	s0, s15
 800308a:	2190      	movs	r1, #144	; 0x90
 800308c:	481a      	ldr	r0, [pc, #104]	; (80030f8 <reg4Handler+0xa4>)
 800308e:	f7ff fc09 	bl	80028a4 <lm75ad_setTosLimit>
		lm75ad_setThystLimit(&hi2c1, LM75AD_ADDRESS, (float) (newSetupData.setRegister.set_over_temp_limit - 256 + 5));
 8003092:	4b18      	ldr	r3, [pc, #96]	; (80030f4 <reg4Handler+0xa0>)
 8003094:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003098:	3bfb      	subs	r3, #251	; 0xfb
 800309a:	ee07 3a90 	vmov	s15, r3
 800309e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030a2:	eeb0 0a67 	vmov.f32	s0, s15
 80030a6:	2190      	movs	r1, #144	; 0x90
 80030a8:	4813      	ldr	r0, [pc, #76]	; (80030f8 <reg4Handler+0xa4>)
 80030aa:	f7ff fc55 	bl	8002958 <lm75ad_setThystLimit>
	{
		lm75ad_setTosLimit(&hi2c1, LM75AD_ADDRESS, (float) (newSetupData.setRegister.set_over_temp_limit));
		lm75ad_setThystLimit(&hi2c1, LM75AD_ADDRESS, (float) (newSetupData.setRegister.set_over_temp_limit - 5));
	}
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80030ae:	e01a      	b.n	80030e6 <reg4Handler+0x92>
		lm75ad_setTosLimit(&hi2c1, LM75AD_ADDRESS, (float) (newSetupData.setRegister.set_over_temp_limit));
 80030b0:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <reg4Handler+0xa0>)
 80030b2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80030b6:	ee07 3a90 	vmov	s15, r3
 80030ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030be:	eeb0 0a67 	vmov.f32	s0, s15
 80030c2:	2190      	movs	r1, #144	; 0x90
 80030c4:	480c      	ldr	r0, [pc, #48]	; (80030f8 <reg4Handler+0xa4>)
 80030c6:	f7ff fbed 	bl	80028a4 <lm75ad_setTosLimit>
		lm75ad_setThystLimit(&hi2c1, LM75AD_ADDRESS, (float) (newSetupData.setRegister.set_over_temp_limit - 5));
 80030ca:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <reg4Handler+0xa0>)
 80030cc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80030d0:	3b05      	subs	r3, #5
 80030d2:	ee07 3a90 	vmov	s15, r3
 80030d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030da:	eeb0 0a67 	vmov.f32	s0, s15
 80030de:	2190      	movs	r1, #144	; 0x90
 80030e0:	4805      	ldr	r0, [pc, #20]	; (80030f8 <reg4Handler+0xa4>)
 80030e2:	f7ff fc39 	bl	8002958 <lm75ad_setThystLimit>
}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	200007fc 	.word	0x200007fc
 80030f0:	20000800 	.word	0x20000800
 80030f4:	20000724 	.word	0x20000724
 80030f8:	200006d0 	.word	0x200006d0

080030fc <reg5Handler>:

void reg5Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
	newSetupData.setRegister.bus_volt_conv_time_ch1 = (regBuffer[registerNumber].value & 0x07);
 8003100:	4b1b      	ldr	r3, [pc, #108]	; (8003170 <reg5Handler+0x74>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <reg5Handler+0x78>)
 8003108:	5c9b      	ldrb	r3, [r3, r2]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	b2da      	uxtb	r2, r3
 8003110:	4b19      	ldr	r3, [pc, #100]	; (8003178 <reg5Handler+0x7c>)
 8003112:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	newSetupData.setRegister.shunt_volt_conv_time_ch1 = ((regBuffer[registerNumber].value & 0x38) >> 3);
 8003116:	4b16      	ldr	r3, [pc, #88]	; (8003170 <reg5Handler+0x74>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	4b15      	ldr	r3, [pc, #84]	; (8003174 <reg5Handler+0x78>)
 800311e:	5c9b      	ldrb	r3, [r3, r2]
 8003120:	10db      	asrs	r3, r3, #3
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	b2da      	uxtb	r2, r3
 800312a:	4b13      	ldr	r3, [pc, #76]	; (8003178 <reg5Handler+0x7c>)
 800312c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	newSetupData.setRegister.limit_unit_prefix_ch1 = ((regBuffer[registerNumber].value & 0x40) >> 6);
 8003130:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <reg5Handler+0x74>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <reg5Handler+0x78>)
 8003138:	5c9b      	ldrb	r3, [r3, r2]
 800313a:	119b      	asrs	r3, r3, #6
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	b2da      	uxtb	r2, r3
 8003144:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <reg5Handler+0x7c>)
 8003146:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	newSetupData.setRegister.limit_unit_prefix_ch2 = ((regBuffer[registerNumber].value & 0x80) >> 7);
 800314a:	4b09      	ldr	r3, [pc, #36]	; (8003170 <reg5Handler+0x74>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	4b08      	ldr	r3, [pc, #32]	; (8003174 <reg5Handler+0x78>)
 8003152:	5c9b      	ldrb	r3, [r3, r2]
 8003154:	09db      	lsrs	r3, r3, #7
 8003156:	b2da      	uxtb	r2, r3
 8003158:	4b07      	ldr	r3, [pc, #28]	; (8003178 <reg5Handler+0x7c>)
 800315a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	g_ina226Ch1ConfigChangeFlag = 1;
 800315e:	4b07      	ldr	r3, [pc, #28]	; (800317c <reg5Handler+0x80>)
 8003160:	2201      	movs	r2, #1
 8003162:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	200007fc 	.word	0x200007fc
 8003174:	20000800 	.word	0x20000800
 8003178:	20000724 	.word	0x20000724
 800317c:	200006b9 	.word	0x200006b9

08003180 <reg6Handler>:

void reg6Handler(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
	newSetupData.setRegister.bus_volt_conv_time_ch2 = (regBuffer[registerNumber].value & 0x07);
 8003184:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <reg6Handler+0x44>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <reg6Handler+0x48>)
 800318c:	5c9b      	ldrb	r3, [r3, r2]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	b2da      	uxtb	r2, r3
 8003194:	4b0d      	ldr	r3, [pc, #52]	; (80031cc <reg6Handler+0x4c>)
 8003196:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	newSetupData.setRegister.shunt_volt_conv_time_ch2 = ((regBuffer[registerNumber].value & 0x38) >> 3);
 800319a:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <reg6Handler+0x44>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <reg6Handler+0x48>)
 80031a2:	5c9b      	ldrb	r3, [r3, r2]
 80031a4:	10db      	asrs	r3, r3, #3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	4b07      	ldr	r3, [pc, #28]	; (80031cc <reg6Handler+0x4c>)
 80031b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	g_ina226Ch2ConfigChangeFlag = 1;
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <reg6Handler+0x50>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80031ba:	bf00      	nop
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	200007fc 	.word	0x200007fc
 80031c8:	20000800 	.word	0x20000800
 80031cc:	20000724 	.word	0x20000724
 80031d0:	200006ba 	.word	0x200006ba

080031d4 <reg7Handler>:

void reg7Handler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
	newSetupData.setRegister.en_int_ch1 = (regBuffer[registerNumber].value & 0x01);
 80031d8:	4b52      	ldr	r3, [pc, #328]	; (8003324 <reg7Handler+0x150>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	4b52      	ldr	r3, [pc, #328]	; (8003328 <reg7Handler+0x154>)
 80031e0:	5c9b      	ldrb	r3, [r3, r2]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	4b50      	ldr	r3, [pc, #320]	; (800332c <reg7Handler+0x158>)
 80031ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	newSetupData.setRegister.en_int_ch2 = ((regBuffer[registerNumber].value & 0x02) >> 1);
 80031ee:	4b4d      	ldr	r3, [pc, #308]	; (8003324 <reg7Handler+0x150>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	4b4c      	ldr	r3, [pc, #304]	; (8003328 <reg7Handler+0x154>)
 80031f6:	5c9b      	ldrb	r3, [r3, r2]
 80031f8:	105b      	asrs	r3, r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	b2da      	uxtb	r2, r3
 8003202:	4b4a      	ldr	r3, [pc, #296]	; (800332c <reg7Handler+0x158>)
 8003204:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	newSetupData.setRegister.ale_trig_ch1 = ((regBuffer[registerNumber].value & 0x1C) >> 2);
 8003208:	4b46      	ldr	r3, [pc, #280]	; (8003324 <reg7Handler+0x150>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	461a      	mov	r2, r3
 800320e:	4b46      	ldr	r3, [pc, #280]	; (8003328 <reg7Handler+0x154>)
 8003210:	5c9b      	ldrb	r3, [r3, r2]
 8003212:	109b      	asrs	r3, r3, #2
 8003214:	b2db      	uxtb	r3, r3
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	b2da      	uxtb	r2, r3
 800321c:	4b43      	ldr	r3, [pc, #268]	; (800332c <reg7Handler+0x158>)
 800321e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	newSetupData.setRegister.ale_trig_ch2 = ((regBuffer[registerNumber].value & 0xE0) >> 5);
 8003222:	4b40      	ldr	r3, [pc, #256]	; (8003324 <reg7Handler+0x150>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	4b3f      	ldr	r3, [pc, #252]	; (8003328 <reg7Handler+0x154>)
 800322a:	5c9b      	ldrb	r3, [r3, r2]
 800322c:	095b      	lsrs	r3, r3, #5
 800322e:	b2da      	uxtb	r2, r3
 8003230:	4b3e      	ldr	r3, [pc, #248]	; (800332c <reg7Handler+0x158>)
 8003232:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	switch (newSetupData.setRegister.ale_trig_ch1)
 8003236:	4b3d      	ldr	r3, [pc, #244]	; (800332c <reg7Handler+0x158>)
 8003238:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800323c:	2b06      	cmp	r3, #6
 800323e:	d834      	bhi.n	80032aa <reg7Handler+0xd6>
 8003240:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <reg7Handler+0x74>)
 8003242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003246:	bf00      	nop
 8003248:	08003265 	.word	0x08003265
 800324c:	0800326f 	.word	0x0800326f
 8003250:	08003279 	.word	0x08003279
 8003254:	08003283 	.word	0x08003283
 8003258:	0800328d 	.word	0x0800328d
 800325c:	08003297 	.word	0x08003297
 8003260:	080032a1 	.word	0x080032a1
	{
		case underCurrentAlert:
			ina226_setUnderCurrentAlert(&hi2c1, CH1_ADDRESS);
 8003264:	2180      	movs	r1, #128	; 0x80
 8003266:	4832      	ldr	r0, [pc, #200]	; (8003330 <reg7Handler+0x15c>)
 8003268:	f7ff fa88 	bl	800277c <ina226_setUnderCurrentAlert>
			break;
 800326c:	e01d      	b.n	80032aa <reg7Handler+0xd6>
		case overCurrentAlert:
			ina226_setOverCurrentAlert(&hi2c1, CH1_ADDRESS);
 800326e:	2180      	movs	r1, #128	; 0x80
 8003270:	482f      	ldr	r0, [pc, #188]	; (8003330 <reg7Handler+0x15c>)
 8003272:	f7ff fa72 	bl	800275a <ina226_setOverCurrentAlert>
			break;
 8003276:	e018      	b.n	80032aa <reg7Handler+0xd6>
		case underVshuntAlert:
			ina226_setShuntUnderVoltageAlert(&hi2c1, CH1_ADDRESS);
 8003278:	2180      	movs	r1, #128	; 0x80
 800327a:	482d      	ldr	r0, [pc, #180]	; (8003330 <reg7Handler+0x15c>)
 800327c:	f7ff fa4b 	bl	8002716 <ina226_setShuntUnderVoltageAlert>
			break;
 8003280:	e013      	b.n	80032aa <reg7Handler+0xd6>
		case overVshuntAlert:
			ina226_setShuntOverVoltageAlert(&hi2c1, CH1_ADDRESS);
 8003282:	2180      	movs	r1, #128	; 0x80
 8003284:	482a      	ldr	r0, [pc, #168]	; (8003330 <reg7Handler+0x15c>)
 8003286:	f7ff fa35 	bl	80026f4 <ina226_setShuntOverVoltageAlert>
			break;
 800328a:	e00e      	b.n	80032aa <reg7Handler+0xd6>
		case underVbusAlert:
			ina226_setBusUnderVoltageAlert(&hi2c1, CH1_ADDRESS);
 800328c:	2180      	movs	r1, #128	; 0x80
 800328e:	4828      	ldr	r0, [pc, #160]	; (8003330 <reg7Handler+0x15c>)
 8003290:	f7ff fa0e 	bl	80026b0 <ina226_setBusUnderVoltageAlert>
			break;
 8003294:	e009      	b.n	80032aa <reg7Handler+0xd6>
		case overVbusAlert:
			ina226_setBusOverVoltageAlert(&hi2c1, CH1_ADDRESS);
 8003296:	2180      	movs	r1, #128	; 0x80
 8003298:	4825      	ldr	r0, [pc, #148]	; (8003330 <reg7Handler+0x15c>)
 800329a:	f7ff fa1a 	bl	80026d2 <ina226_setBusOverVoltageAlert>
			break;
 800329e:	e004      	b.n	80032aa <reg7Handler+0xd6>
		case overPowerAlert:
			ina226_setOverPowerAlert(&hi2c1, CH1_ADDRESS);
 80032a0:	2180      	movs	r1, #128	; 0x80
 80032a2:	4823      	ldr	r0, [pc, #140]	; (8003330 <reg7Handler+0x15c>)
 80032a4:	f7ff fa48 	bl	8002738 <ina226_setOverPowerAlert>
			break;
 80032a8:	bf00      	nop
	}
	switch (newSetupData.setRegister.ale_trig_ch2)
 80032aa:	4b20      	ldr	r3, [pc, #128]	; (800332c <reg7Handler+0x158>)
 80032ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032b0:	2b06      	cmp	r3, #6
 80032b2:	d834      	bhi.n	800331e <reg7Handler+0x14a>
 80032b4:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <reg7Handler+0xe8>)
 80032b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ba:	bf00      	nop
 80032bc:	080032d9 	.word	0x080032d9
 80032c0:	080032e3 	.word	0x080032e3
 80032c4:	080032ed 	.word	0x080032ed
 80032c8:	080032f7 	.word	0x080032f7
 80032cc:	08003301 	.word	0x08003301
 80032d0:	0800330b 	.word	0x0800330b
 80032d4:	08003315 	.word	0x08003315
	{
		case underCurrentAlert:
			ina226_setUnderCurrentAlert(&hi2c1, CH2_ADDRESS);
 80032d8:	2182      	movs	r1, #130	; 0x82
 80032da:	4815      	ldr	r0, [pc, #84]	; (8003330 <reg7Handler+0x15c>)
 80032dc:	f7ff fa4e 	bl	800277c <ina226_setUnderCurrentAlert>
			break;
 80032e0:	e01d      	b.n	800331e <reg7Handler+0x14a>
		case overCurrentAlert:
			ina226_setOverCurrentAlert(&hi2c1, CH2_ADDRESS);
 80032e2:	2182      	movs	r1, #130	; 0x82
 80032e4:	4812      	ldr	r0, [pc, #72]	; (8003330 <reg7Handler+0x15c>)
 80032e6:	f7ff fa38 	bl	800275a <ina226_setOverCurrentAlert>
			break;
 80032ea:	e018      	b.n	800331e <reg7Handler+0x14a>
		case underVshuntAlert:
			ina226_setShuntUnderVoltageAlert(&hi2c1, CH2_ADDRESS);
 80032ec:	2182      	movs	r1, #130	; 0x82
 80032ee:	4810      	ldr	r0, [pc, #64]	; (8003330 <reg7Handler+0x15c>)
 80032f0:	f7ff fa11 	bl	8002716 <ina226_setShuntUnderVoltageAlert>
			break;
 80032f4:	e013      	b.n	800331e <reg7Handler+0x14a>
		case overVshuntAlert:
			ina226_setShuntOverVoltageAlert(&hi2c1, CH2_ADDRESS);
 80032f6:	2182      	movs	r1, #130	; 0x82
 80032f8:	480d      	ldr	r0, [pc, #52]	; (8003330 <reg7Handler+0x15c>)
 80032fa:	f7ff f9fb 	bl	80026f4 <ina226_setShuntOverVoltageAlert>
			break;
 80032fe:	e00e      	b.n	800331e <reg7Handler+0x14a>
		case underVbusAlert:
			ina226_setBusUnderVoltageAlert(&hi2c1, CH2_ADDRESS);
 8003300:	2182      	movs	r1, #130	; 0x82
 8003302:	480b      	ldr	r0, [pc, #44]	; (8003330 <reg7Handler+0x15c>)
 8003304:	f7ff f9d4 	bl	80026b0 <ina226_setBusUnderVoltageAlert>
			break;
 8003308:	e009      	b.n	800331e <reg7Handler+0x14a>
		case overVbusAlert:
			ina226_setBusOverVoltageAlert(&hi2c1, CH2_ADDRESS);
 800330a:	2182      	movs	r1, #130	; 0x82
 800330c:	4808      	ldr	r0, [pc, #32]	; (8003330 <reg7Handler+0x15c>)
 800330e:	f7ff f9e0 	bl	80026d2 <ina226_setBusOverVoltageAlert>
			break;
 8003312:	e004      	b.n	800331e <reg7Handler+0x14a>
		case overPowerAlert:
			ina226_setOverPowerAlert(&hi2c1, CH2_ADDRESS);
 8003314:	2182      	movs	r1, #130	; 0x82
 8003316:	4806      	ldr	r0, [pc, #24]	; (8003330 <reg7Handler+0x15c>)
 8003318:	f7ff fa0e 	bl	8002738 <ina226_setOverPowerAlert>
			break;
 800331c:	bf00      	nop
	}

	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	200007fc 	.word	0x200007fc
 8003328:	20000800 	.word	0x20000800
 800332c:	20000724 	.word	0x20000724
 8003330:	200006d0 	.word	0x200006d0

08003334 <reg8Handler>:

void reg8Handler(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
	newSetupData.setRegister.limit1_ch1 = regBuffer[registerNumber].value;
 8003338:	4b06      	ldr	r3, [pc, #24]	; (8003354 <reg8Handler+0x20>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	4b06      	ldr	r3, [pc, #24]	; (8003358 <reg8Handler+0x24>)
 8003340:	5c9a      	ldrb	r2, [r3, r2]
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <reg8Handler+0x28>)
 8003344:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003348:	bf00      	nop
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	200007fc 	.word	0x200007fc
 8003358:	20000800 	.word	0x20000800
 800335c:	20000724 	.word	0x20000724

08003360 <reg9Handler>:

void reg9Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
	newSetupData.setRegister.limit2_ch1 = regBuffer[registerNumber].value;
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <reg9Handler+0x20>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	4b06      	ldr	r3, [pc, #24]	; (8003384 <reg9Handler+0x24>)
 800336c:	5c9a      	ldrb	r2, [r3, r2]
 800336e:	4b06      	ldr	r3, [pc, #24]	; (8003388 <reg9Handler+0x28>)
 8003370:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	200007fc 	.word	0x200007fc
 8003384:	20000800 	.word	0x20000800
 8003388:	20000724 	.word	0x20000724

0800338c <reg10Handler>:

void reg10Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
	newSetupData.setRegister.limit1_ch2 = regBuffer[registerNumber].value;
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <reg10Handler+0x20>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <reg10Handler+0x24>)
 8003398:	5c9a      	ldrb	r2, [r3, r2]
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <reg10Handler+0x28>)
 800339c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80033a0:	bf00      	nop
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	200007fc 	.word	0x200007fc
 80033b0:	20000800 	.word	0x20000800
 80033b4:	20000724 	.word	0x20000724

080033b8 <reg11Handler>:

void reg11Handler(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
	newSetupData.setRegister.limit2_ch2 = regBuffer[registerNumber].value;
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <reg11Handler+0x20>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	461a      	mov	r2, r3
 80033c2:	4b06      	ldr	r3, [pc, #24]	; (80033dc <reg11Handler+0x24>)
 80033c4:	5c9a      	ldrb	r2, [r3, r2]
 80033c6:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <reg11Handler+0x28>)
 80033c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	200007fc 	.word	0x200007fc
 80033dc:	20000800 	.word	0x20000800
 80033e0:	20000724 	.word	0x20000724

080033e4 <reg12Handler>:

void reg12Handler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
	newSetupData.setRegister.set_pwm0_duty = (
			regBuffer[registerNumber].value > 100 ? 100 : regBuffer[registerNumber].value);
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <reg12Handler+0x34>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	461a      	mov	r2, r3
 80033ee:	4b0b      	ldr	r3, [pc, #44]	; (800341c <reg12Handler+0x38>)
 80033f0:	5c9b      	ldrb	r3, [r3, r2]
 80033f2:	2b64      	cmp	r3, #100	; 0x64
 80033f4:	bf28      	it	cs
 80033f6:	2364      	movcs	r3, #100	; 0x64
 80033f8:	b2da      	uxtb	r2, r3
	newSetupData.setRegister.set_pwm0_duty = (
 80033fa:	4b09      	ldr	r3, [pc, #36]	; (8003420 <reg12Handler+0x3c>)
 80033fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	run_pwm_out0(newSetupData.setRegister.set_pwm0_duty);
 8003400:	4b07      	ldr	r3, [pc, #28]	; (8003420 <reg12Handler+0x3c>)
 8003402:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fc74 	bl	8002cf4 <run_pwm_out0>
	g_HWUpdateFlag = 1;
 800340c:	4b05      	ldr	r3, [pc, #20]	; (8003424 <reg12Handler+0x40>)
 800340e:	2201      	movs	r2, #1
 8003410:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	200007fc 	.word	0x200007fc
 800341c:	20000800 	.word	0x20000800
 8003420:	20000724 	.word	0x20000724
 8003424:	200006b8 	.word	0x200006b8

08003428 <reg13Handler>:

void reg13Handler(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
	newSetupData.setRegister.set_pwm1_duty = (
			regBuffer[registerNumber].value > 100 ? 100 : regBuffer[registerNumber].value);
 800342c:	4b0b      	ldr	r3, [pc, #44]	; (800345c <reg13Handler+0x34>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <reg13Handler+0x38>)
 8003434:	5c9b      	ldrb	r3, [r3, r2]
 8003436:	2b64      	cmp	r3, #100	; 0x64
 8003438:	bf28      	it	cs
 800343a:	2364      	movcs	r3, #100	; 0x64
 800343c:	b2da      	uxtb	r2, r3
	newSetupData.setRegister.set_pwm1_duty = (
 800343e:	4b09      	ldr	r3, [pc, #36]	; (8003464 <reg13Handler+0x3c>)
 8003440:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	run_pwm_out1(newSetupData.setRegister.set_pwm1_duty);
 8003444:	4b07      	ldr	r3, [pc, #28]	; (8003464 <reg13Handler+0x3c>)
 8003446:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff fc74 	bl	8002d38 <run_pwm_out1>
	g_HWUpdateFlag = 1;
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <reg13Handler+0x40>)
 8003452:	2201      	movs	r2, #1
 8003454:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	200007fc 	.word	0x200007fc
 8003460:	20000800 	.word	0x20000800
 8003464:	20000724 	.word	0x20000724
 8003468:	200006b8 	.word	0x200006b8
 800346c:	00000000 	.word	0x00000000

08003470 <reg14Handler>:

void reg14Handler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
	newSetupData.setRegister.set_pwm_freq1 = (
			regBuffer[registerNumber].value > 255 ? 255 : regBuffer[registerNumber].value);
 8003474:	4b18      	ldr	r3, [pc, #96]	; (80034d8 <reg14Handler+0x68>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	4b18      	ldr	r3, [pc, #96]	; (80034dc <reg14Handler+0x6c>)
 800347c:	5c9a      	ldrb	r2, [r3, r2]
	newSetupData.setRegister.set_pwm_freq1 = (
 800347e:	4b18      	ldr	r3, [pc, #96]	; (80034e0 <reg14Handler+0x70>)
 8003480:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	newSetupData.setRegister.set_pwm_freq = (uint16_t) ((float) (newSetupData.setRegister.set_pwm_freq1
 8003484:	4b16      	ldr	r3, [pc, #88]	; (80034e0 <reg14Handler+0x70>)
 8003486:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800348a:	461a      	mov	r2, r3
			+ (newSetupData.setRegister.set_pwm_freq2 << 8)) * PWMFreqCorrectionFactor);
 800348c:	4b14      	ldr	r3, [pc, #80]	; (80034e0 <reg14Handler+0x70>)
 800348e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	4413      	add	r3, r2
	newSetupData.setRegister.set_pwm_freq = (uint16_t) ((float) (newSetupData.setRegister.set_pwm_freq1
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800349e:	ee17 0a90 	vmov	r0, s15
 80034a2:	f7fd f859 	bl	8000558 <__aeabi_f2d>
			+ (newSetupData.setRegister.set_pwm_freq2 << 8)) * PWMFreqCorrectionFactor);
 80034a6:	a30a      	add	r3, pc, #40	; (adr r3, 80034d0 <reg14Handler+0x60>)
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	f7fd f8ac 	bl	8000608 <__aeabi_dmul>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
	newSetupData.setRegister.set_pwm_freq = (uint16_t) ((float) (newSetupData.setRegister.set_pwm_freq1
 80034b4:	4610      	mov	r0, r2
 80034b6:	4619      	mov	r1, r3
 80034b8:	f7fd fb7e 	bl	8000bb8 <__aeabi_d2uiz>
 80034bc:	4603      	mov	r3, r0
 80034be:	b29a      	uxth	r2, r3
 80034c0:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <reg14Handler+0x70>)
 80034c2:	871a      	strh	r2, [r3, #56]	; 0x38
	g_HWUpdateFlag = 1;
 80034c4:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <reg14Handler+0x74>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	e978d4fe 	.word	0xe978d4fe
 80034d4:	3ff03126 	.word	0x3ff03126
 80034d8:	200007fc 	.word	0x200007fc
 80034dc:	20000800 	.word	0x20000800
 80034e0:	20000724 	.word	0x20000724
 80034e4:	200006b8 	.word	0x200006b8

080034e8 <reg15Handler>:

void reg15Handler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
	newSetupData.setRegister.set_pwm_freq2 = (
			regBuffer[registerNumber].value > 255 ? 255 : regBuffer[registerNumber].value);
 80034ec:	4b18      	ldr	r3, [pc, #96]	; (8003550 <reg15Handler+0x68>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	461a      	mov	r2, r3
 80034f2:	4b18      	ldr	r3, [pc, #96]	; (8003554 <reg15Handler+0x6c>)
 80034f4:	5c9a      	ldrb	r2, [r3, r2]
	newSetupData.setRegister.set_pwm_freq2 = (
 80034f6:	4b18      	ldr	r3, [pc, #96]	; (8003558 <reg15Handler+0x70>)
 80034f8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	newSetupData.setRegister.set_pwm_freq = (uint16_t) ((float) (newSetupData.setRegister.set_pwm_freq1
 80034fc:	4b16      	ldr	r3, [pc, #88]	; (8003558 <reg15Handler+0x70>)
 80034fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003502:	461a      	mov	r2, r3
			+ (newSetupData.setRegister.set_pwm_freq2 << 8)) * PWMFreqCorrectionFactor);
 8003504:	4b14      	ldr	r3, [pc, #80]	; (8003558 <reg15Handler+0x70>)
 8003506:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800350a:	021b      	lsls	r3, r3, #8
 800350c:	4413      	add	r3, r2
	newSetupData.setRegister.set_pwm_freq = (uint16_t) ((float) (newSetupData.setRegister.set_pwm_freq1
 800350e:	ee07 3a90 	vmov	s15, r3
 8003512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003516:	ee17 0a90 	vmov	r0, s15
 800351a:	f7fd f81d 	bl	8000558 <__aeabi_f2d>
			+ (newSetupData.setRegister.set_pwm_freq2 << 8)) * PWMFreqCorrectionFactor);
 800351e:	a30a      	add	r3, pc, #40	; (adr r3, 8003548 <reg15Handler+0x60>)
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f7fd f870 	bl	8000608 <__aeabi_dmul>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
	newSetupData.setRegister.set_pwm_freq = (uint16_t) ((float) (newSetupData.setRegister.set_pwm_freq1
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	f7fd fb42 	bl	8000bb8 <__aeabi_d2uiz>
 8003534:	4603      	mov	r3, r0
 8003536:	b29a      	uxth	r2, r3
 8003538:	4b07      	ldr	r3, [pc, #28]	; (8003558 <reg15Handler+0x70>)
 800353a:	871a      	strh	r2, [r3, #56]	; 0x38
	g_HWUpdateFlag = 1;
 800353c:	4b07      	ldr	r3, [pc, #28]	; (800355c <reg15Handler+0x74>)
 800353e:	2201      	movs	r2, #1
 8003540:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003542:	bf00      	nop
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	e978d4fe 	.word	0xe978d4fe
 800354c:	3ff03126 	.word	0x3ff03126
 8003550:	200007fc 	.word	0x200007fc
 8003554:	20000800 	.word	0x20000800
 8003558:	20000724 	.word	0x20000724
 800355c:	200006b8 	.word	0x200006b8

08003560 <reg16Handler>:

void reg16Handler(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
//	newSetupData.getRegister.get_adc0 = (regBuffer[registerNumber].value & 0x01);
	//				newSetupData.getRegister.get_adc1 = ((regBuffer[registerNumber].value & 0x02) >> 1);
	//				newSetupData.getRegister.get_vref_mcu = ((regBuffer[registerNumber].value & 0x04) >> 2);
	//				newSetupData.getRegister.get_temp_amb = ((regBuffer[registerNumber].value & 0x08) >> 3);
	//				newSetupData.getRegister.get_temp_mcu = ((regBuffer[registerNumber].value & 0x10) >> 4);
	newSetupData.getRegister.get_dig_in0 = ((regBuffer[registerNumber].value & 0x20) >> 5);
 8003564:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <reg16Handler+0x68>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	4b18      	ldr	r3, [pc, #96]	; (80035cc <reg16Handler+0x6c>)
 800356c:	5c9b      	ldrb	r3, [r3, r2]
 800356e:	115b      	asrs	r3, r3, #5
 8003570:	b2db      	uxtb	r3, r3
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	b2da      	uxtb	r2, r3
 8003578:	4b15      	ldr	r3, [pc, #84]	; (80035d0 <reg16Handler+0x70>)
 800357a:	741a      	strb	r2, [r3, #16]
	newSetupData.getRegister.get_dig_in1 = ((regBuffer[registerNumber].value & 0x40) >> 6);
 800357c:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <reg16Handler+0x68>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	4b12      	ldr	r3, [pc, #72]	; (80035cc <reg16Handler+0x6c>)
 8003584:	5c9b      	ldrb	r3, [r3, r2]
 8003586:	119b      	asrs	r3, r3, #6
 8003588:	b2db      	uxtb	r3, r3
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	b2da      	uxtb	r2, r3
 8003590:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <reg16Handler+0x70>)
 8003592:	745a      	strb	r2, [r3, #17]
	//				}
	//				if (newSetupData.getRegister.get_temp_mcu)
	//				{
	//					printf("temp_mcu=%0.2f\r\n", stm32Temp);
	//				}
	if (newSetupData.getRegister.get_dig_in0)
 8003594:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <reg16Handler+0x70>)
 8003596:	7c1b      	ldrb	r3, [r3, #16]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d007      	beq.n	80035ac <reg16Handler+0x4c>
	{
		printf("IN_DIG0=%d\r\n", digRead(DIG_IN0));
 800359c:	2000      	movs	r0, #0
 800359e:	f7fe fb3f 	bl	8001c20 <digRead>
 80035a2:	4603      	mov	r3, r0
 80035a4:	4619      	mov	r1, r3
 80035a6:	480b      	ldr	r0, [pc, #44]	; (80035d4 <reg16Handler+0x74>)
 80035a8:	f00d faf2 	bl	8010b90 <iprintf>
	}
	if (newSetupData.getRegister.get_dig_in1)
 80035ac:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <reg16Handler+0x70>)
 80035ae:	7c5b      	ldrb	r3, [r3, #17]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d007      	beq.n	80035c4 <reg16Handler+0x64>
	{
		printf("IN_DIG1=%d\r\n", digRead(DIG_IN1));
 80035b4:	2001      	movs	r0, #1
 80035b6:	f7fe fb33 	bl	8001c20 <digRead>
 80035ba:	4603      	mov	r3, r0
 80035bc:	4619      	mov	r1, r3
 80035be:	4806      	ldr	r0, [pc, #24]	; (80035d8 <reg16Handler+0x78>)
 80035c0:	f00d fae6 	bl	8010b90 <iprintf>
	}
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80035c4:	bf00      	nop
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	200007fc 	.word	0x200007fc
 80035cc:	20000800 	.word	0x20000800
 80035d0:	20000724 	.word	0x20000724
 80035d4:	080132cc 	.word	0x080132cc
 80035d8:	080132dc 	.word	0x080132dc

080035dc <reg17Handler>:

void reg17Handler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
	newSetupData.setRegister.restore_default = (regBuffer[registerNumber].value & 0x01);
 80035e0:	4b42      	ldr	r3, [pc, #264]	; (80036ec <reg17Handler+0x110>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	461a      	mov	r2, r3
 80035e6:	4b42      	ldr	r3, [pc, #264]	; (80036f0 <reg17Handler+0x114>)
 80035e8:	5c9b      	ldrb	r3, [r3, r2]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	4b40      	ldr	r3, [pc, #256]	; (80036f4 <reg17Handler+0x118>)
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	newSetupData.setRegister.save_config = ((regBuffer[registerNumber].value & 0x02) >> 1);
 80035f6:	4b3d      	ldr	r3, [pc, #244]	; (80036ec <reg17Handler+0x110>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	4b3c      	ldr	r3, [pc, #240]	; (80036f0 <reg17Handler+0x114>)
 80035fe:	5c9b      	ldrb	r3, [r3, r2]
 8003600:	105b      	asrs	r3, r3, #1
 8003602:	b2db      	uxtb	r3, r3
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	b2da      	uxtb	r2, r3
 800360a:	4b3a      	ldr	r3, [pc, #232]	; (80036f4 <reg17Handler+0x118>)
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	if ((newSetupData.setRegister.save_config == 1) && (newSetupData.setRegister.restore_default == 0))
 8003610:	4b38      	ldr	r3, [pc, #224]	; (80036f4 <reg17Handler+0x118>)
 8003612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003616:	2b01      	cmp	r3, #1
 8003618:	d11e      	bne.n	8003658 <reg17Handler+0x7c>
 800361a:	4b36      	ldr	r3, [pc, #216]	; (80036f4 <reg17Handler+0x118>)
 800361c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d119      	bne.n	8003658 <reg17Handler+0x7c>
	{
		EEPROMWriteByte(EEPROMLoadPage, 0, (uint8_t*) (1));
 8003624:	2201      	movs	r2, #1
 8003626:	2100      	movs	r1, #0
 8003628:	2009      	movs	r0, #9
 800362a:	f7fd fdc1 	bl	80011b0 <EEPROMWriteByte>
		loadSettingFromBuffer(&newSetupData, regBuffer);
 800362e:	4930      	ldr	r1, [pc, #192]	; (80036f0 <reg17Handler+0x114>)
 8003630:	4830      	ldr	r0, [pc, #192]	; (80036f4 <reg17Handler+0x118>)
 8003632:	f000 f985 	bl	8003940 <loadSettingFromBuffer>
		newSetupData.setRegister.save_config = 0;
 8003636:	4b2f      	ldr	r3, [pc, #188]	; (80036f4 <reg17Handler+0x118>)
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		regBuffer[reg17].value = (regBuffer[reg17].value & 0xFC);
 800363e:	4b2c      	ldr	r3, [pc, #176]	; (80036f0 <reg17Handler+0x114>)
 8003640:	7c5b      	ldrb	r3, [r3, #17]
 8003642:	f023 0303 	bic.w	r3, r3, #3
 8003646:	b2da      	uxtb	r2, r3
 8003648:	4b29      	ldr	r3, [pc, #164]	; (80036f0 <reg17Handler+0x114>)
 800364a:	745a      	strb	r2, [r3, #17]
		saveUserConfigData(EEPROMCustomPage, regBuffer);
 800364c:	4928      	ldr	r1, [pc, #160]	; (80036f0 <reg17Handler+0x114>)
 800364e:	200c      	movs	r0, #12
 8003650:	f7fe fb4c 	bl	8001cec <saveUserConfigData>
		restartMCU();
 8003654:	f7fe fb44 	bl	8001ce0 <restartMCU>
	}
	if (newSetupData.setRegister.restore_default == 1)
 8003658:	4b26      	ldr	r3, [pc, #152]	; (80036f4 <reg17Handler+0x118>)
 800365a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800365e:	2b01      	cmp	r3, #1
 8003660:	d113      	bne.n	800368a <reg17Handler+0xae>
	{
		newSetupData.setRegister.save_config = 0;
 8003662:	4b24      	ldr	r3, [pc, #144]	; (80036f4 <reg17Handler+0x118>)
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		EEPROMWriteByte(EEPROMLoadPage, 0, (uint8_t*) (0));
 800366a:	2200      	movs	r2, #0
 800366c:	2100      	movs	r1, #0
 800366e:	2009      	movs	r0, #9
 8003670:	f7fd fd9e 	bl	80011b0 <EEPROMWriteByte>
		getSavedUserConfigData(EEPROMDefaultPage, regBuffer);
 8003674:	491e      	ldr	r1, [pc, #120]	; (80036f0 <reg17Handler+0x114>)
 8003676:	200a      	movs	r0, #10
 8003678:	f7fe fb5a 	bl	8001d30 <getSavedUserConfigData>
		loadSettingFromBuffer(&newSetupData, regBuffer);
 800367c:	491c      	ldr	r1, [pc, #112]	; (80036f0 <reg17Handler+0x114>)
 800367e:	481d      	ldr	r0, [pc, #116]	; (80036f4 <reg17Handler+0x118>)
 8003680:	f000 f95e 	bl	8003940 <loadSettingFromBuffer>
		restartMCU();
 8003684:	f7fe fb2c 	bl	8001ce0 <restartMCU>
 8003688:	e014      	b.n	80036b4 <reg17Handler+0xd8>
	}
	else if ((newSetupData.setRegister.restore_default == 0) && (newSetupData.setRegister.save_config == 0))
 800368a:	4b1a      	ldr	r3, [pc, #104]	; (80036f4 <reg17Handler+0x118>)
 800368c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10f      	bne.n	80036b4 <reg17Handler+0xd8>
 8003694:	4b17      	ldr	r3, [pc, #92]	; (80036f4 <reg17Handler+0x118>)
 8003696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10a      	bne.n	80036b4 <reg17Handler+0xd8>
	{
		EEPROMWriteByte(EEPROMLoadPage, 0, (uint8_t*) (1));
 800369e:	2201      	movs	r2, #1
 80036a0:	2100      	movs	r1, #0
 80036a2:	2009      	movs	r0, #9
 80036a4:	f7fd fd84 	bl	80011b0 <EEPROMWriteByte>
		loadSettingFromBuffer(&newSetupData, regBuffer);
 80036a8:	4911      	ldr	r1, [pc, #68]	; (80036f0 <reg17Handler+0x114>)
 80036aa:	4812      	ldr	r0, [pc, #72]	; (80036f4 <reg17Handler+0x118>)
 80036ac:	f000 f948 	bl	8003940 <loadSettingFromBuffer>
		restartMCU();
 80036b0:	f7fe fb16 	bl	8001ce0 <restartMCU>
	}

	newSetupData.setRegister.ina226_avg_ch1 = ((regBuffer[registerNumber].value & 0x1C) >> 2);
 80036b4:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <reg17Handler+0x110>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	461a      	mov	r2, r3
 80036ba:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <reg17Handler+0x114>)
 80036bc:	5c9b      	ldrb	r3, [r3, r2]
 80036be:	109b      	asrs	r3, r3, #2
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <reg17Handler+0x118>)
 80036ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	newSetupData.setRegister.ina226_mode_ch1 = ((regBuffer[registerNumber].value & 0xE0) >> 5);
 80036ce:	4b07      	ldr	r3, [pc, #28]	; (80036ec <reg17Handler+0x110>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <reg17Handler+0x114>)
 80036d6:	5c9b      	ldrb	r3, [r3, r2]
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <reg17Handler+0x118>)
 80036de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	g_ina226Ch1ConfigChangeFlag = 1;
 80036e2:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <reg17Handler+0x11c>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80036e8:	bf00      	nop
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	200007fc 	.word	0x200007fc
 80036f0:	20000800 	.word	0x20000800
 80036f4:	20000724 	.word	0x20000724
 80036f8:	200006b9 	.word	0x200006b9

080036fc <reg18Handler>:

void reg18Handler(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
	newSetupData.setRegister.restart_device = (regBuffer[registerNumber].value & 0x01);
 8003700:	4b18      	ldr	r3, [pc, #96]	; (8003764 <reg18Handler+0x68>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	4b18      	ldr	r3, [pc, #96]	; (8003768 <reg18Handler+0x6c>)
 8003708:	5c9b      	ldrb	r3, [r3, r2]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	b2da      	uxtb	r2, r3
 8003710:	4b16      	ldr	r3, [pc, #88]	; (800376c <reg18Handler+0x70>)
 8003712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	newSetupData.setRegister.ina226_avg_ch2 = ((regBuffer[registerNumber].value & 0x1C) >> 2);
 8003716:	4b13      	ldr	r3, [pc, #76]	; (8003764 <reg18Handler+0x68>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	4b12      	ldr	r3, [pc, #72]	; (8003768 <reg18Handler+0x6c>)
 800371e:	5c9b      	ldrb	r3, [r3, r2]
 8003720:	109b      	asrs	r3, r3, #2
 8003722:	b2db      	uxtb	r3, r3
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	b2da      	uxtb	r2, r3
 800372a:	4b10      	ldr	r3, [pc, #64]	; (800376c <reg18Handler+0x70>)
 800372c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	newSetupData.setRegister.ina226_mode_ch2 = ((regBuffer[registerNumber].value & 0xE0) >> 5);
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <reg18Handler+0x68>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <reg18Handler+0x6c>)
 8003738:	5c9b      	ldrb	r3, [r3, r2]
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	b2da      	uxtb	r2, r3
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <reg18Handler+0x70>)
 8003740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	if (newSetupData.setRegister.restart_device == 1)
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <reg18Handler+0x70>)
 8003746:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800374a:	2b01      	cmp	r3, #1
 800374c:	d105      	bne.n	800375a <reg18Handler+0x5e>
	{
		newSetupData.setRegister.restart_device = 0;
 800374e:	4b07      	ldr	r3, [pc, #28]	; (800376c <reg18Handler+0x70>)
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		restartMCU();
 8003756:	f7fe fac3 	bl	8001ce0 <restartMCU>
	}

	g_ina226Ch2ConfigChangeFlag = 1;
 800375a:	4b05      	ldr	r3, [pc, #20]	; (8003770 <reg18Handler+0x74>)
 800375c:	2201      	movs	r2, #1
 800375e:	701a      	strb	r2, [r3, #0]

	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003760:	bf00      	nop
 8003762:	bd80      	pop	{r7, pc}
 8003764:	200007fc 	.word	0x200007fc
 8003768:	20000800 	.word	0x20000800
 800376c:	20000724 	.word	0x20000724
 8003770:	200006ba 	.word	0x200006ba

08003774 <reg19Handler>:

void reg19Handler(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
	newSetupData.setRegister.ina226_rsh_pwr_ch1 = (regBuffer[registerNumber].value & 0x07);
 8003778:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <reg19Handler+0x40>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <reg19Handler+0x44>)
 8003780:	5c9b      	ldrb	r3, [r3, r2]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	b2da      	uxtb	r2, r3
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <reg19Handler+0x48>)
 800378a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	newSetupData.setRegister.ina226_rsh_base_ch1 = ((regBuffer[registerNumber].value & 0xF8) >> 3);
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <reg19Handler+0x40>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <reg19Handler+0x44>)
 8003796:	5c9b      	ldrb	r3, [r3, r2]
 8003798:	08db      	lsrs	r3, r3, #3
 800379a:	b2da      	uxtb	r2, r3
 800379c:	4b07      	ldr	r3, [pc, #28]	; (80037bc <reg19Handler+0x48>)
 800379e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	g_ina226Ch1ConfigChangeFlag = 1;
 80037a2:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <reg19Handler+0x4c>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80037a8:	bf00      	nop
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	200007fc 	.word	0x200007fc
 80037b8:	20000800 	.word	0x20000800
 80037bc:	20000724 	.word	0x20000724
 80037c0:	200006b9 	.word	0x200006b9

080037c4 <reg20Handler>:

void reg20Handler(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
	newSetupData.setRegister.ina226_rsh_pwr_ch2 = (regBuffer[registerNumber].value & 0x07);
 80037c8:	4b0e      	ldr	r3, [pc, #56]	; (8003804 <reg20Handler+0x40>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	461a      	mov	r2, r3
 80037ce:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <reg20Handler+0x44>)
 80037d0:	5c9b      	ldrb	r3, [r3, r2]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	4b0c      	ldr	r3, [pc, #48]	; (800380c <reg20Handler+0x48>)
 80037da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	newSetupData.setRegister.ina226_rsh_base_ch2 = ((regBuffer[registerNumber].value & 0xF8) >> 3);
 80037de:	4b09      	ldr	r3, [pc, #36]	; (8003804 <reg20Handler+0x40>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	4b08      	ldr	r3, [pc, #32]	; (8003808 <reg20Handler+0x44>)
 80037e6:	5c9b      	ldrb	r3, [r3, r2]
 80037e8:	08db      	lsrs	r3, r3, #3
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	4b07      	ldr	r3, [pc, #28]	; (800380c <reg20Handler+0x48>)
 80037ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	g_ina226Ch2ConfigChangeFlag = 1;
 80037f2:	4b07      	ldr	r3, [pc, #28]	; (8003810 <reg20Handler+0x4c>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	701a      	strb	r2, [r3, #0]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80037f8:	bf00      	nop
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	200007fc 	.word	0x200007fc
 8003808:	20000800 	.word	0x20000800
 800380c:	20000724 	.word	0x20000724
 8003810:	200006ba 	.word	0x200006ba

08003814 <reg21Handler>:

void reg21Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
	newSetupData.setRegister.blink_led1 = (regBuffer[registerNumber].value & 0x01);
 8003818:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <reg21Handler+0x40>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <reg21Handler+0x44>)
 8003820:	5c9b      	ldrb	r3, [r3, r2]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	b2da      	uxtb	r2, r3
 8003828:	4b0c      	ldr	r3, [pc, #48]	; (800385c <reg21Handler+0x48>)
 800382a:	76da      	strb	r2, [r3, #27]
	newSetupData.setRegister.led1_blink_rate = ((regBuffer[registerNumber].value & 0xFE) >> 1) * 10;
 800382c:	4b09      	ldr	r3, [pc, #36]	; (8003854 <reg21Handler+0x40>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	461a      	mov	r2, r3
 8003832:	4b09      	ldr	r3, [pc, #36]	; (8003858 <reg21Handler+0x44>)
 8003834:	5c9b      	ldrb	r3, [r3, r2]
 8003836:	085b      	lsrs	r3, r3, #1
 8003838:	b2db      	uxtb	r3, r3
 800383a:	b29b      	uxth	r3, r3
 800383c:	461a      	mov	r2, r3
 800383e:	0092      	lsls	r2, r2, #2
 8003840:	4413      	add	r3, r2
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	4b05      	ldr	r3, [pc, #20]	; (800385c <reg21Handler+0x48>)
 8003848:	839a      	strh	r2, [r3, #28]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 800384a:	bf00      	nop
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	200007fc 	.word	0x200007fc
 8003858:	20000800 	.word	0x20000800
 800385c:	20000724 	.word	0x20000724

08003860 <reg22Handler>:

void reg22Handler(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
	newSetupData.setRegister.blink_led2 = (regBuffer[registerNumber].value & 0x01);
 8003864:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <reg22Handler+0x40>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <reg22Handler+0x44>)
 800386c:	5c9b      	ldrb	r3, [r3, r2]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	b2da      	uxtb	r2, r3
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <reg22Handler+0x48>)
 8003876:	779a      	strb	r2, [r3, #30]
	newSetupData.setRegister.led2_blink_rate = ((regBuffer[registerNumber].value & 0xFE) >> 1) * 10;
 8003878:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <reg22Handler+0x40>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <reg22Handler+0x44>)
 8003880:	5c9b      	ldrb	r3, [r3, r2]
 8003882:	085b      	lsrs	r3, r3, #1
 8003884:	b2db      	uxtb	r3, r3
 8003886:	b29b      	uxth	r3, r3
 8003888:	461a      	mov	r2, r3
 800388a:	0092      	lsls	r2, r2, #2
 800388c:	4413      	add	r3, r2
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <reg22Handler+0x48>)
 8003894:	841a      	strh	r2, [r3, #32]
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003896:	bf00      	nop
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	200007fc 	.word	0x200007fc
 80038a4:	20000800 	.word	0x20000800
 80038a8:	20000724 	.word	0x20000724

080038ac <reg23Handler>:

void reg23Handler(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80038b0:	bf00      	nop
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <reg24Handler>:

void reg24Handler(void)
{
 80038ba:	b480      	push	{r7}
 80038bc:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80038be:	bf00      	nop
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <reg25Handler>:

void reg25Handler(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80038cc:	bf00      	nop
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <reg26Handler>:

void reg26Handler(void)
{
 80038d6:	b480      	push	{r7}
 80038d8:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80038da:	bf00      	nop
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <reg27Handler>:

void reg27Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80038e8:	bf00      	nop
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <reg28Handler>:

void reg28Handler(void)
{
 80038f2:	b480      	push	{r7}
 80038f4:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 80038f6:	bf00      	nop
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <reg29Handler>:

void reg29Handler(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <reg30Handler>:

void reg30Handler(void)
{
 800390e:	b480      	push	{r7}
 8003910:	af00      	add	r7, sp, #0
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003912:	bf00      	nop
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <reg31Handler>:

void reg31Handler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
	if (regBuffer[registerNumber].value == 255)
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <reg31Handler+0x1c>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <reg31Handler+0x20>)
 8003928:	5c9b      	ldrb	r3, [r3, r2]
 800392a:	2bff      	cmp	r3, #255	; 0xff
 800392c:	d101      	bne.n	8003932 <reg31Handler+0x16>
	{
		restartMCU();
 800392e:	f7fe f9d7 	bl	8001ce0 <restartMCU>
	}
	LOGR("register", registerNumber, regBuffer[registerNumber].value);
}
 8003932:	bf00      	nop
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	200007fc 	.word	0x200007fc
 800393c:	20000800 	.word	0x20000800

08003940 <loadSettingFromBuffer>:
//	g_ina226Ch1ConfigChangedFlag = 1;
//	g_ina226Ch2ConfigChangedFlag = 1;
}

void loadSettingFromBuffer(SetupData_t *SetupData, RegisterData_t *inputBuffer)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
	SetupData->setRegister.id0 = (inputBuffer + reg0)->value;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	781a      	ldrb	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	751a      	strb	r2, [r3, #20]

	SetupData->setRegister.id1 = (inputBuffer + reg1)->value;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	3301      	adds	r3, #1
 8003956:	781a      	ldrb	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	755a      	strb	r2, [r3, #21]
	/**********************END REGISTER 0/1 DAFUALT DATA**********************/

	/*********************START REGISTER 2 DAFUALT DATA*********************/
	SetupData->setRegister.set_led1 = ((inputBuffer + reg2)->value & 0x01);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	3302      	adds	r3, #2
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	b2da      	uxtb	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	765a      	strb	r2, [r3, #25]

	SetupData->setRegister.set_led2 = ((inputBuffer + reg2)->value & 0x02) >> 1;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	3302      	adds	r3, #2
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	105b      	asrs	r3, r3, #1
 8003974:	b2db      	uxtb	r3, r3
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	b2da      	uxtb	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	769a      	strb	r2, [r3, #26]

	SetupData->setRegister.set_dig_out0 = ((inputBuffer + reg2)->value & 0x04) >> 2;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	3302      	adds	r3, #2
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	109b      	asrs	r3, r3, #2
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	b2da      	uxtb	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	SetupData->setRegister.set_dig_out1 = ((inputBuffer + reg2)->value & 0x8) >> 3;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	3302      	adds	r3, #2
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	10db      	asrs	r3, r3, #3
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	SetupData->getRegister.get_int_in0 = ((inputBuffer + reg2)->value & 0x10) >> 4;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	3302      	adds	r3, #2
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	111b      	asrs	r3, r3, #4
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	72da      	strb	r2, [r3, #11]

	SetupData->getRegister.get_int_in1 = ((inputBuffer + reg2)->value & 0x20) >> 5;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	3302      	adds	r3, #2
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	115b      	asrs	r3, r3, #5
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	731a      	strb	r2, [r3, #12]

	SetupData->setRegister.en_pwm0 = ((inputBuffer + reg2)->value & 0x40) >> 6;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	3302      	adds	r3, #2
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	119b      	asrs	r3, r3, #6
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	SetupData->setRegister.en_pwm1 = ((inputBuffer + reg2)->value & 0x80) >> 7;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	3302      	adds	r3, #2
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	09db      	lsrs	r3, r3, #7
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	/**********************END REGISTER 2 DAFUALT DATA**********************/

	/*********************START REGISTER 3 DAFUALT DATA*********************/
	SetupData->setRegister.auto_off_dis = ((inputBuffer + reg3)->value & 0x01);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	3303      	adds	r3, #3
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	759a      	strb	r2, [r3, #22]

	SetupData->setRegister.meas_mode = ((inputBuffer + reg3)->value & 0x02) >> 1;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	3303      	adds	r3, #3
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	105b      	asrs	r3, r3, #1
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	75da      	strb	r2, [r3, #23]

	SetupData->setRegister.en_disp = ((inputBuffer + reg3)->value & 0x04) >> 2;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	3303      	adds	r3, #3
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	109b      	asrs	r3, r3, #2
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	761a      	strb	r2, [r3, #24]

	SetupData->getRegister.get_int_temp = ((inputBuffer + reg3)->value & 0x08) >> 3;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	3303      	adds	r3, #3
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	10db      	asrs	r3, r3, #3
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	73da      	strb	r2, [r3, #15]
	SetupData->getRegister.get_detect_5v = ((inputBuffer + reg3)->value & 0x10) >> 4;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	3303      	adds	r3, #3
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	111b      	asrs	r3, r3, #4
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	749a      	strb	r2, [r3, #18]
	//	defaultSetupData->adc0_upper_limit = 4095;
	//
	//	defaultSetupData->adc1_lower_limit = 0;
	//	defaultSetupData->adc1_upper_limit = 4095;
	/*********************START REGISTER 4 DAFUALT DATA*********************/
	SetupData->setRegister.set_over_temp_limit = (inputBuffer + reg4)->value;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	781a      	ldrb	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	lm75ad_setTosLimit(&hi2c1, LM75AD_ADDRESS, (float) (SetupData->setRegister.set_over_temp_limit));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003a6c:	ee07 3a90 	vmov	s15, r3
 8003a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a74:	eeb0 0a67 	vmov.f32	s0, s15
 8003a78:	2190      	movs	r1, #144	; 0x90
 8003a7a:	48b7      	ldr	r0, [pc, #732]	; (8003d58 <loadSettingFromBuffer+0x418>)
 8003a7c:	f7fe ff12 	bl	80028a4 <lm75ad_setTosLimit>
	lm75ad_setThystLimit(&hi2c1, LM75AD_ADDRESS, (float) (SetupData->setRegister.set_over_temp_limit - 5));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003a86:	3b05      	subs	r3, #5
 8003a88:	ee07 3a90 	vmov	s15, r3
 8003a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a90:	eeb0 0a67 	vmov.f32	s0, s15
 8003a94:	2190      	movs	r1, #144	; 0x90
 8003a96:	48b0      	ldr	r0, [pc, #704]	; (8003d58 <loadSettingFromBuffer+0x418>)
 8003a98:	f7fe ff5e 	bl	8002958 <lm75ad_setThystLimit>
	/**********************END REGISTER 4 DAFUALT DATA**********************/

	/*********************START REGISTER 5 DAFUALT DATA*********************/
	SetupData->setRegister.bus_volt_conv_time_ch1 = ((inputBuffer + reg5)->value & 0x07);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	3305      	adds	r3, #5
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	ina226_setVBUSCT(&hi2c1, CH1_ADDRESS, SetupData->setRegister.bus_volt_conv_time_ch1);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2180      	movs	r1, #128	; 0x80
 8003ab8:	48a7      	ldr	r0, [pc, #668]	; (8003d58 <loadSettingFromBuffer+0x418>)
 8003aba:	f7fe fbf5 	bl	80022a8 <ina226_setVBUSCT>

	SetupData->setRegister.shunt_volt_conv_time_ch1 = ((inputBuffer + reg5)->value & 0x38) >> 3;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	3305      	adds	r3, #5
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	10db      	asrs	r3, r3, #3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	ina226_setVSHUNTCT(&hi2c1, CH1_ADDRESS, SetupData->setRegister.shunt_volt_conv_time_ch1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ada:	461a      	mov	r2, r3
 8003adc:	2180      	movs	r1, #128	; 0x80
 8003ade:	489e      	ldr	r0, [pc, #632]	; (8003d58 <loadSettingFromBuffer+0x418>)
 8003ae0:	f7fe fc09 	bl	80022f6 <ina226_setVSHUNTCT>

	SetupData->setRegister.limit_unit_prefix_ch1 = ((inputBuffer + reg5)->value & 0x40) >> 6;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	3305      	adds	r3, #5
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	119b      	asrs	r3, r3, #6
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	SetupData->setRegister.limit_unit_prefix_ch2 = ((inputBuffer + reg5)->value & 0x80) >> 7;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	3305      	adds	r3, #5
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	09db      	lsrs	r3, r3, #7
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	/**********************END REGISTER 5 DAFUALT DATA**********************/

	/*********************START REGISTER 6 DAFUALT DATA*********************/
	SetupData->setRegister.bus_volt_conv_time_ch2 = ((inputBuffer + reg6)->value & 0x07);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	3306      	adds	r3, #6
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	ina226_setVBUSCT(&hi2c1, CH2_ADDRESS, SetupData->setRegister.bus_volt_conv_time_ch2);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003b22:	461a      	mov	r2, r3
 8003b24:	2182      	movs	r1, #130	; 0x82
 8003b26:	488c      	ldr	r0, [pc, #560]	; (8003d58 <loadSettingFromBuffer+0x418>)
 8003b28:	f7fe fbbe 	bl	80022a8 <ina226_setVBUSCT>

	SetupData->setRegister.shunt_volt_conv_time_ch2 = ((inputBuffer + reg6)->value & 0x38) >> 3;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	3306      	adds	r3, #6
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	10db      	asrs	r3, r3, #3
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	ina226_setVSHUNTCT(&hi2c1, CH2_ADDRESS, SetupData->setRegister.shunt_volt_conv_time_ch2);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2182      	movs	r1, #130	; 0x82
 8003b4c:	4882      	ldr	r0, [pc, #520]	; (8003d58 <loadSettingFromBuffer+0x418>)
 8003b4e:	f7fe fbd2 	bl	80022f6 <ina226_setVSHUNTCT>
	/**********************END REGISTER 6 DAFUALT DATA**********************/

	/*********************START REGISTER 7 DAFUALT DATA*********************/
	SetupData->setRegister.en_int_ch1 = ((inputBuffer + reg7)->value & 0x01);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	3307      	adds	r3, #7
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	SetupData->setRegister.en_int_ch2 = ((inputBuffer + reg7)->value & 0x02) >> 1;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	3307      	adds	r3, #7
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	105b      	asrs	r3, r3, #1
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	SetupData->setRegister.ale_trig_ch1 = ((inputBuffer + reg7)->value & 0x1C) >> 2;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	3307      	adds	r3, #7
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	109b      	asrs	r3, r3, #2
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	SetupData->setRegister.ale_trig_ch2 = ((inputBuffer + reg7)->value & 0xE0) >> 5;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	3307      	adds	r3, #7
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	/**********************END REGISTER 7 DAFUALT DATA**********************/

	/*********************START REGISTER 8 DAFUALT DATA*********************/
	SetupData->setRegister.limit1_ch1 = (inputBuffer + reg8)->value;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	3308      	adds	r3, #8
 8003ba4:	781a      	ldrb	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	/**********************END REGISTER 8 DAFUALT DATA**********************/

	/*********************START REGISTER 9 DAFUALT DATA*********************/
	SetupData->setRegister.limit2_ch1 = (inputBuffer + reg9)->value;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	3309      	adds	r3, #9
 8003bb0:	781a      	ldrb	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	/**********************END REGISTER 9 DAFUALT DATA**********************/

	/*********************START REGISTER 10 DAFUALT DATA*********************/
	SetupData->setRegister.limit1_ch2 = (inputBuffer + reg10)->value;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	330a      	adds	r3, #10
 8003bbc:	781a      	ldrb	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	/**********************END REGISTER 10 DAFUALT DATA**********************/

	/*********************START REGISTER 11 DAFUALT DATA*********************/
	SetupData->setRegister.limit2_ch2 = (inputBuffer + reg11)->value;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	330b      	adds	r3, #11
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	/**********************END REGISTER 11 DAFUALT DATA**********************/

	/*********************START REGISTER 12 DAFUALT DATA*********************/
	SetupData->setRegister.set_pwm0_duty = (inputBuffer + reg12)->value;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	330c      	adds	r3, #12
 8003bd4:	781a      	ldrb	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	/**********************END REGISTER 12 DAFUALT DATA**********************/

	/*********************START REGISTER 13 DAFUALT DATA*********************/
	SetupData->setRegister.set_pwm1_duty = (inputBuffer + reg13)->value;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	330d      	adds	r3, #13
 8003be0:	781a      	ldrb	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	/**********************END REGISTER 13 DAFUALT DATA**********************/

	/*********************START REGISTER 14 DAFUALT DATA*********************/
	// The default PWM frequency is 1kHz
	SetupData->setRegister.set_pwm_freq1 = (inputBuffer + reg14)->value;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	330e      	adds	r3, #14
 8003bec:	781a      	ldrb	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	/**********************END REGISTER 14 DAFUALT DATA**********************/

	/*********************START REGISTER 15 DAFUALT DATA*********************/
	SetupData->setRegister.set_pwm_freq2 = (inputBuffer + reg15)->value;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	330f      	adds	r3, #15
 8003bf8:	781a      	ldrb	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	SetupData->setRegister.set_pwm_freq = (uint16_t) ((float) (SetupData->setRegister.set_pwm_freq1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c06:	461a      	mov	r2, r3
			+ (SetupData->setRegister.set_pwm_freq2 << 8)) * PWMFreqCorrectionFactor);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8003c0e:	021b      	lsls	r3, r3, #8
 8003c10:	4413      	add	r3, r2
	SetupData->setRegister.set_pwm_freq = (uint16_t) ((float) (SetupData->setRegister.set_pwm_freq1
 8003c12:	ee07 3a90 	vmov	s15, r3
 8003c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c1a:	ee17 0a90 	vmov	r0, s15
 8003c1e:	f7fc fc9b 	bl	8000558 <__aeabi_f2d>
			+ (SetupData->setRegister.set_pwm_freq2 << 8)) * PWMFreqCorrectionFactor);
 8003c22:	a34b      	add	r3, pc, #300	; (adr r3, 8003d50 <loadSettingFromBuffer+0x410>)
 8003c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c28:	f7fc fcee 	bl	8000608 <__aeabi_dmul>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
	SetupData->setRegister.set_pwm_freq = (uint16_t) ((float) (SetupData->setRegister.set_pwm_freq1
 8003c30:	4610      	mov	r0, r2
 8003c32:	4619      	mov	r1, r3
 8003c34:	f7fc ffc0 	bl	8000bb8 <__aeabi_d2uiz>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	871a      	strh	r2, [r3, #56]	; 0x38
//	SetupData->getRegister.get_vref_mcu = ((inputBuffer + reg16)->value & 0x04) >> 2;
//
//	SetupData->getRegister.get_temp_amb = ((inputBuffer + reg16)->value & 0x08) >> 3;
//
//	SetupData->getRegister.get_temp_mcu = ((inputBuffer + reg16)->value & 0x10) >> 4;
	SetupData->getRegister.get_dig_in0 = ((inputBuffer + reg16)->value & 0x20) >> 5;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	3310      	adds	r3, #16
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	115b      	asrs	r3, r3, #5
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	741a      	strb	r2, [r3, #16]

	SetupData->getRegister.get_dig_in1 = ((inputBuffer + reg16)->value & 0x40) >> 6;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	3310      	adds	r3, #16
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	119b      	asrs	r3, r3, #6
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	745a      	strb	r2, [r3, #17]

//	SetupData->getRegister.get_effiency = ((inputBuffer + reg16)->value & 0x80) >> 7;
	/**********************END REGISTER 16 DAFUALT DATA**********************/

	/**********************START REGISTER 17 DAFUALT DATA**********************/
	SetupData->setRegister.restore_default = ((inputBuffer + reg17)->value & 0x01);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	3311      	adds	r3, #17
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	SetupData->setRegister.save_config = ((inputBuffer + reg17)->value & 0x02) >> 1;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	3311      	adds	r3, #17
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	105b      	asrs	r3, r3, #1
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	SetupData->setRegister.ina226_avg_ch1 = ((inputBuffer + reg17)->value & 0x1C) >> 2;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	3311      	adds	r3, #17
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	109b      	asrs	r3, r3, #2
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	ina226_setAVG(&hi2c1, CH1_ADDRESS, SetupData->setRegister.ina226_avg_ch1);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cac:	461a      	mov	r2, r3
 8003cae:	2180      	movs	r1, #128	; 0x80
 8003cb0:	4829      	ldr	r0, [pc, #164]	; (8003d58 <loadSettingFromBuffer+0x418>)
 8003cb2:	f7fe faae 	bl	8002212 <ina226_setAVG>
	SetupData->setRegister.ina226_mode_ch1 = ((inputBuffer + reg17)->value & 0xE0) >> 5;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	3311      	adds	r3, #17
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	095b      	lsrs	r3, r3, #5
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	ina226_setMODE(&hi2c1, CH1_ADDRESS, SetupData->setRegister.ina226_mode_ch1);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2180      	movs	r1, #128	; 0x80
 8003cd0:	4821      	ldr	r0, [pc, #132]	; (8003d58 <loadSettingFromBuffer+0x418>)
 8003cd2:	f7fe fac5 	bl	8002260 <ina226_setMODE>
	/**********************END REGISTER 17 DAFUALT DATA**********************/

	/**********************START REGISTER 18 DAFUALT DATA**********************/
	SetupData->setRegister.ina226_avg_ch2 = ((inputBuffer + reg18)->value & 0x1C) >> 2;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	3312      	adds	r3, #18
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	109b      	asrs	r3, r3, #2
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	ina226_setAVG(&hi2c1, CH2_ADDRESS, SetupData->setRegister.ina226_avg_ch2);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	2182      	movs	r1, #130	; 0x82
 8003cf6:	4818      	ldr	r0, [pc, #96]	; (8003d58 <loadSettingFromBuffer+0x418>)
 8003cf8:	f7fe fa8b 	bl	8002212 <ina226_setAVG>
	SetupData->setRegister.ina226_mode_ch2 = ((inputBuffer + reg18)->value & 0xE0) >> 5;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	3312      	adds	r3, #18
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	ina226_setMODE(&hi2c1, CH2_ADDRESS, SetupData->setRegister.ina226_mode_ch2);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d12:	461a      	mov	r2, r3
 8003d14:	2182      	movs	r1, #130	; 0x82
 8003d16:	4810      	ldr	r0, [pc, #64]	; (8003d58 <loadSettingFromBuffer+0x418>)
 8003d18:	f7fe faa2 	bl	8002260 <ina226_setMODE>
	/**********************END REGISTER 18 DAFUALT DATA**********************/

	/**********************START REGISTER 19 DAFUALT DATA**********************/
	SetupData->setRegister.ina226_rsh_pwr_ch1 = ((inputBuffer + reg19)->value & 0x07);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	3313      	adds	r3, #19
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	SetupData->setRegister.ina226_rsh_base_ch1 = ((inputBuffer + reg19)->value & 0xF8) >> 3;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	3313      	adds	r3, #19
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	08db      	lsrs	r3, r3, #3
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
//	((SetupData->setRegister.ina226_rsh_base_ch1 << 3) | (SetupData->setRegister.ina226_rsh_pwr_ch1))
//	);
	/**********************END REGISTER 19 DAFUALT DATA**********************/

	/**********************START REGISTER 20 DAFUALT DATA**********************/
	SetupData->setRegister.ina226_rsh_pwr_ch2 = ((inputBuffer + reg20)->value & 0x07);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	3314      	adds	r3, #20
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	e007      	b.n	8003d5c <loadSettingFromBuffer+0x41c>
 8003d4c:	f3af 8000 	nop.w
 8003d50:	e978d4fe 	.word	0xe978d4fe
 8003d54:	3ff03126 	.word	0x3ff03126
 8003d58:	200006d0 	.word	0x200006d0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	SetupData->setRegister.ina226_rsh_base_ch2 = ((inputBuffer + reg20)->value & 0xF8) >> 3;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	3314      	adds	r3, #20
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	08db      	lsrs	r3, r3, #3
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
//	((SetupData->setRegister.ina226_rsh_base_ch2 << 3) | (SetupData->setRegister.ina226_rsh_pwr_ch2))
//	);
	/**********************END REGISTER 20 DAFUALT DATA**********************/

	/**********************START REGISTER 21 DAFUALT DATA**********************/
	SetupData->setRegister.blink_led1 = ((inputBuffer + reg21)->value & 0x01);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	3315      	adds	r3, #21
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	76da      	strb	r2, [r3, #27]
	SetupData->setRegister.led1_blink_rate = (((inputBuffer + reg21)->value & 0xFE) >> 1) * 10;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	3315      	adds	r3, #21
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	085b      	lsrs	r3, r3, #1
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	461a      	mov	r2, r3
 8003d90:	0092      	lsls	r2, r2, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	839a      	strh	r2, [r3, #28]
	/***********************END REGISTER 21 DAFUALT DATA***********************/

	/**********************START REGISTER 22 DAFUALT DATA**********************/
	SetupData->setRegister.blink_led2 = ((inputBuffer + reg22)->value & 0x01);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	3316      	adds	r3, #22
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	779a      	strb	r2, [r3, #30]
	SetupData->setRegister.led2_blink_rate = (((inputBuffer + reg22)->value & 0xFE) >> 1) * 10;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	3316      	adds	r3, #22
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	085b      	lsrs	r3, r3, #1
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	0092      	lsls	r2, r2, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	841a      	strh	r2, [r3, #32]
	/***********************END REGISTER 22 DAFUALT DATA***********************/

	g_HWUpdateFlag = 1;
 8003dc6:	4b03      	ldr	r3, [pc, #12]	; (8003dd4 <loadSettingFromBuffer+0x494>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	701a      	strb	r2, [r3, #0]
}
 8003dcc:	bf00      	nop
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	200006b8 	.word	0x200006b8

08003dd8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003ddc:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <MX_SPI1_Init+0x64>)
 8003dde:	4a18      	ldr	r2, [pc, #96]	; (8003e40 <MX_SPI1_Init+0x68>)
 8003de0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003de2:	4b16      	ldr	r3, [pc, #88]	; (8003e3c <MX_SPI1_Init+0x64>)
 8003de4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003de8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003dea:	4b14      	ldr	r3, [pc, #80]	; (8003e3c <MX_SPI1_Init+0x64>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003df0:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <MX_SPI1_Init+0x64>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003df6:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <MX_SPI1_Init+0x64>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003dfc:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <MX_SPI1_Init+0x64>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e02:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <MX_SPI1_Init+0x64>)
 8003e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e0a:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <MX_SPI1_Init+0x64>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e10:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <MX_SPI1_Init+0x64>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e16:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <MX_SPI1_Init+0x64>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e1c:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <MX_SPI1_Init+0x64>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003e22:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <MX_SPI1_Init+0x64>)
 8003e24:	220a      	movs	r2, #10
 8003e26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003e28:	4804      	ldr	r0, [pc, #16]	; (8003e3c <MX_SPI1_Init+0x64>)
 8003e2a:	f005 fb95 	bl	8009558 <HAL_SPI_Init>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003e34:	f7fe ff58 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003e38:	bf00      	nop
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	20000820 	.word	0x20000820
 8003e40:	40013000 	.word	0x40013000

08003e44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08a      	sub	sp, #40	; 0x28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e4c:	f107 0314 	add.w	r3, r7, #20
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	605a      	str	r2, [r3, #4]
 8003e56:	609a      	str	r2, [r3, #8]
 8003e58:	60da      	str	r2, [r3, #12]
 8003e5a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a19      	ldr	r2, [pc, #100]	; (8003ec8 <HAL_SPI_MspInit+0x84>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d12b      	bne.n	8003ebe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e66:	2300      	movs	r3, #0
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	4b18      	ldr	r3, [pc, #96]	; (8003ecc <HAL_SPI_MspInit+0x88>)
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6e:	4a17      	ldr	r2, [pc, #92]	; (8003ecc <HAL_SPI_MspInit+0x88>)
 8003e70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e74:	6453      	str	r3, [r2, #68]	; 0x44
 8003e76:	4b15      	ldr	r3, [pc, #84]	; (8003ecc <HAL_SPI_MspInit+0x88>)
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <HAL_SPI_MspInit+0x88>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	4a10      	ldr	r2, [pc, #64]	; (8003ecc <HAL_SPI_MspInit+0x88>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	6313      	str	r3, [r2, #48]	; 0x30
 8003e92:	4b0e      	ldr	r3, [pc, #56]	; (8003ecc <HAL_SPI_MspInit+0x88>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003e9e:	23e0      	movs	r3, #224	; 0xe0
 8003ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003eae:	2305      	movs	r3, #5
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb2:	f107 0314 	add.w	r3, r7, #20
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4805      	ldr	r0, [pc, #20]	; (8003ed0 <HAL_SPI_MspInit+0x8c>)
 8003eba:	f001 fddf 	bl	8005a7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003ebe:	bf00      	nop
 8003ec0:	3728      	adds	r7, #40	; 0x28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40013000 	.word	0x40013000
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	40020000 	.word	0x40020000

08003ed4 <ssd1306_Reset>:
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
	...

08003ee4 <ssd1306_WriteCommand>:
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af04      	add	r7, sp, #16
 8003eea:	4603      	mov	r3, r0
 8003eec:	71fb      	strb	r3, [r7, #7]
 8003eee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef2:	9302      	str	r3, [sp, #8]
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	1dfb      	adds	r3, r7, #7
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	2301      	movs	r3, #1
 8003efe:	2200      	movs	r2, #0
 8003f00:	2178      	movs	r1, #120	; 0x78
 8003f02:	4803      	ldr	r0, [pc, #12]	; (8003f10 <ssd1306_WriteCommand+0x2c>)
 8003f04:	f002 fc16 	bl	8006734 <HAL_I2C_Mem_Write>
 8003f08:	bf00      	nop
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	200006d0 	.word	0x200006d0

08003f14 <ssd1306_WriteData>:
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af04      	add	r7, sp, #16
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	f04f 32ff 	mov.w	r2, #4294967295
 8003f26:	9202      	str	r2, [sp, #8]
 8003f28:	9301      	str	r3, [sp, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	2301      	movs	r3, #1
 8003f30:	2240      	movs	r2, #64	; 0x40
 8003f32:	2178      	movs	r1, #120	; 0x78
 8003f34:	4803      	ldr	r0, [pc, #12]	; (8003f44 <ssd1306_WriteData+0x30>)
 8003f36:	f002 fbfd 	bl	8006734 <HAL_I2C_Mem_Write>
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	200006d0 	.word	0x200006d0

08003f48 <ssd1306_Init>:
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	f7ff ffc2 	bl	8003ed4 <ssd1306_Reset>
 8003f50:	2064      	movs	r0, #100	; 0x64
 8003f52:	f000 fd0f 	bl	8004974 <HAL_Delay>
 8003f56:	2000      	movs	r0, #0
 8003f58:	f000 f9e6 	bl	8004328 <ssd1306_SetDisplayOn>
 8003f5c:	2020      	movs	r0, #32
 8003f5e:	f7ff ffc1 	bl	8003ee4 <ssd1306_WriteCommand>
 8003f62:	2000      	movs	r0, #0
 8003f64:	f7ff ffbe 	bl	8003ee4 <ssd1306_WriteCommand>
 8003f68:	20b0      	movs	r0, #176	; 0xb0
 8003f6a:	f7ff ffbb 	bl	8003ee4 <ssd1306_WriteCommand>
 8003f6e:	20c8      	movs	r0, #200	; 0xc8
 8003f70:	f7ff ffb8 	bl	8003ee4 <ssd1306_WriteCommand>
 8003f74:	2000      	movs	r0, #0
 8003f76:	f7ff ffb5 	bl	8003ee4 <ssd1306_WriteCommand>
 8003f7a:	2010      	movs	r0, #16
 8003f7c:	f7ff ffb2 	bl	8003ee4 <ssd1306_WriteCommand>
 8003f80:	2040      	movs	r0, #64	; 0x40
 8003f82:	f7ff ffaf 	bl	8003ee4 <ssd1306_WriteCommand>
 8003f86:	20ff      	movs	r0, #255	; 0xff
 8003f88:	f000 f9ba 	bl	8004300 <ssd1306_SetContrast>
 8003f8c:	20a1      	movs	r0, #161	; 0xa1
 8003f8e:	f7ff ffa9 	bl	8003ee4 <ssd1306_WriteCommand>
 8003f92:	20a6      	movs	r0, #166	; 0xa6
 8003f94:	f7ff ffa6 	bl	8003ee4 <ssd1306_WriteCommand>
 8003f98:	20a8      	movs	r0, #168	; 0xa8
 8003f9a:	f7ff ffa3 	bl	8003ee4 <ssd1306_WriteCommand>
 8003f9e:	203f      	movs	r0, #63	; 0x3f
 8003fa0:	f7ff ffa0 	bl	8003ee4 <ssd1306_WriteCommand>
 8003fa4:	20a4      	movs	r0, #164	; 0xa4
 8003fa6:	f7ff ff9d 	bl	8003ee4 <ssd1306_WriteCommand>
 8003faa:	20d3      	movs	r0, #211	; 0xd3
 8003fac:	f7ff ff9a 	bl	8003ee4 <ssd1306_WriteCommand>
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	f7ff ff97 	bl	8003ee4 <ssd1306_WriteCommand>
 8003fb6:	20d5      	movs	r0, #213	; 0xd5
 8003fb8:	f7ff ff94 	bl	8003ee4 <ssd1306_WriteCommand>
 8003fbc:	20f0      	movs	r0, #240	; 0xf0
 8003fbe:	f7ff ff91 	bl	8003ee4 <ssd1306_WriteCommand>
 8003fc2:	20d9      	movs	r0, #217	; 0xd9
 8003fc4:	f7ff ff8e 	bl	8003ee4 <ssd1306_WriteCommand>
 8003fc8:	2022      	movs	r0, #34	; 0x22
 8003fca:	f7ff ff8b 	bl	8003ee4 <ssd1306_WriteCommand>
 8003fce:	20da      	movs	r0, #218	; 0xda
 8003fd0:	f7ff ff88 	bl	8003ee4 <ssd1306_WriteCommand>
 8003fd4:	2012      	movs	r0, #18
 8003fd6:	f7ff ff85 	bl	8003ee4 <ssd1306_WriteCommand>
 8003fda:	20db      	movs	r0, #219	; 0xdb
 8003fdc:	f7ff ff82 	bl	8003ee4 <ssd1306_WriteCommand>
 8003fe0:	2020      	movs	r0, #32
 8003fe2:	f7ff ff7f 	bl	8003ee4 <ssd1306_WriteCommand>
 8003fe6:	208d      	movs	r0, #141	; 0x8d
 8003fe8:	f7ff ff7c 	bl	8003ee4 <ssd1306_WriteCommand>
 8003fec:	2014      	movs	r0, #20
 8003fee:	f7ff ff79 	bl	8003ee4 <ssd1306_WriteCommand>
 8003ff2:	2001      	movs	r0, #1
 8003ff4:	f000 f998 	bl	8004328 <ssd1306_SetDisplayOn>
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	f000 f80f 	bl	800401c <ssd1306_Fill>
 8003ffe:	f000 f831 	bl	8004064 <ssd1306_UpdateScreen>
 8004002:	4b05      	ldr	r3, [pc, #20]	; (8004018 <ssd1306_Init+0xd0>)
 8004004:	2200      	movs	r2, #0
 8004006:	801a      	strh	r2, [r3, #0]
 8004008:	4b03      	ldr	r3, [pc, #12]	; (8004018 <ssd1306_Init+0xd0>)
 800400a:	2200      	movs	r2, #0
 800400c:	805a      	strh	r2, [r3, #2]
 800400e:	4b02      	ldr	r3, [pc, #8]	; (8004018 <ssd1306_Init+0xd0>)
 8004010:	2201      	movs	r2, #1
 8004012:	715a      	strb	r2, [r3, #5]
 8004014:	bf00      	nop
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20000c78 	.word	0x20000c78

0800401c <ssd1306_Fill>:
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	71fb      	strb	r3, [r7, #7]
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	e00d      	b.n	8004048 <ssd1306_Fill+0x2c>
 800402c:	79fb      	ldrb	r3, [r7, #7]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <ssd1306_Fill+0x1a>
 8004032:	2100      	movs	r1, #0
 8004034:	e000      	b.n	8004038 <ssd1306_Fill+0x1c>
 8004036:	21ff      	movs	r1, #255	; 0xff
 8004038:	4a09      	ldr	r2, [pc, #36]	; (8004060 <ssd1306_Fill+0x44>)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4413      	add	r3, r2
 800403e:	460a      	mov	r2, r1
 8004040:	701a      	strb	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	3301      	adds	r3, #1
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800404e:	d3ed      	bcc.n	800402c <ssd1306_Fill+0x10>
 8004050:	bf00      	nop
 8004052:	bf00      	nop
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	20000878 	.word	0x20000878

08004064 <ssd1306_UpdateScreen>:
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	2300      	movs	r3, #0
 800406c:	71fb      	strb	r3, [r7, #7]
 800406e:	e016      	b.n	800409e <ssd1306_UpdateScreen+0x3a>
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	3b50      	subs	r3, #80	; 0x50
 8004074:	b2db      	uxtb	r3, r3
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff ff34 	bl	8003ee4 <ssd1306_WriteCommand>
 800407c:	2000      	movs	r0, #0
 800407e:	f7ff ff31 	bl	8003ee4 <ssd1306_WriteCommand>
 8004082:	2010      	movs	r0, #16
 8004084:	f7ff ff2e 	bl	8003ee4 <ssd1306_WriteCommand>
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	01db      	lsls	r3, r3, #7
 800408c:	4a08      	ldr	r2, [pc, #32]	; (80040b0 <ssd1306_UpdateScreen+0x4c>)
 800408e:	4413      	add	r3, r2
 8004090:	2180      	movs	r1, #128	; 0x80
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff ff3e 	bl	8003f14 <ssd1306_WriteData>
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	3301      	adds	r3, #1
 800409c:	71fb      	strb	r3, [r7, #7]
 800409e:	79fb      	ldrb	r3, [r7, #7]
 80040a0:	2b07      	cmp	r3, #7
 80040a2:	d9e5      	bls.n	8004070 <ssd1306_UpdateScreen+0xc>
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20000878 	.word	0x20000878

080040b4 <ssd1306_DrawPixel>:
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	71fb      	strb	r3, [r7, #7]
 80040be:	460b      	mov	r3, r1
 80040c0:	71bb      	strb	r3, [r7, #6]
 80040c2:	4613      	mov	r3, r2
 80040c4:	717b      	strb	r3, [r7, #5]
 80040c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	db48      	blt.n	8004160 <ssd1306_DrawPixel+0xac>
 80040ce:	79bb      	ldrb	r3, [r7, #6]
 80040d0:	2b3f      	cmp	r3, #63	; 0x3f
 80040d2:	d845      	bhi.n	8004160 <ssd1306_DrawPixel+0xac>
 80040d4:	4b25      	ldr	r3, [pc, #148]	; (800416c <ssd1306_DrawPixel+0xb8>)
 80040d6:	791b      	ldrb	r3, [r3, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d006      	beq.n	80040ea <ssd1306_DrawPixel+0x36>
 80040dc:	797b      	ldrb	r3, [r7, #5]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	bf0c      	ite	eq
 80040e2:	2301      	moveq	r3, #1
 80040e4:	2300      	movne	r3, #0
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	717b      	strb	r3, [r7, #5]
 80040ea:	797b      	ldrb	r3, [r7, #5]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d11a      	bne.n	8004126 <ssd1306_DrawPixel+0x72>
 80040f0:	79fa      	ldrb	r2, [r7, #7]
 80040f2:	79bb      	ldrb	r3, [r7, #6]
 80040f4:	08db      	lsrs	r3, r3, #3
 80040f6:	b2d8      	uxtb	r0, r3
 80040f8:	4603      	mov	r3, r0
 80040fa:	01db      	lsls	r3, r3, #7
 80040fc:	4413      	add	r3, r2
 80040fe:	4a1c      	ldr	r2, [pc, #112]	; (8004170 <ssd1306_DrawPixel+0xbc>)
 8004100:	5cd3      	ldrb	r3, [r2, r3]
 8004102:	b25a      	sxtb	r2, r3
 8004104:	79bb      	ldrb	r3, [r7, #6]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	2101      	movs	r1, #1
 800410c:	fa01 f303 	lsl.w	r3, r1, r3
 8004110:	b25b      	sxtb	r3, r3
 8004112:	4313      	orrs	r3, r2
 8004114:	b259      	sxtb	r1, r3
 8004116:	79fa      	ldrb	r2, [r7, #7]
 8004118:	4603      	mov	r3, r0
 800411a:	01db      	lsls	r3, r3, #7
 800411c:	4413      	add	r3, r2
 800411e:	b2c9      	uxtb	r1, r1
 8004120:	4a13      	ldr	r2, [pc, #76]	; (8004170 <ssd1306_DrawPixel+0xbc>)
 8004122:	54d1      	strb	r1, [r2, r3]
 8004124:	e01d      	b.n	8004162 <ssd1306_DrawPixel+0xae>
 8004126:	79fa      	ldrb	r2, [r7, #7]
 8004128:	79bb      	ldrb	r3, [r7, #6]
 800412a:	08db      	lsrs	r3, r3, #3
 800412c:	b2d8      	uxtb	r0, r3
 800412e:	4603      	mov	r3, r0
 8004130:	01db      	lsls	r3, r3, #7
 8004132:	4413      	add	r3, r2
 8004134:	4a0e      	ldr	r2, [pc, #56]	; (8004170 <ssd1306_DrawPixel+0xbc>)
 8004136:	5cd3      	ldrb	r3, [r2, r3]
 8004138:	b25a      	sxtb	r2, r3
 800413a:	79bb      	ldrb	r3, [r7, #6]
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	2101      	movs	r1, #1
 8004142:	fa01 f303 	lsl.w	r3, r1, r3
 8004146:	b25b      	sxtb	r3, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	b25b      	sxtb	r3, r3
 800414c:	4013      	ands	r3, r2
 800414e:	b259      	sxtb	r1, r3
 8004150:	79fa      	ldrb	r2, [r7, #7]
 8004152:	4603      	mov	r3, r0
 8004154:	01db      	lsls	r3, r3, #7
 8004156:	4413      	add	r3, r2
 8004158:	b2c9      	uxtb	r1, r1
 800415a:	4a05      	ldr	r2, [pc, #20]	; (8004170 <ssd1306_DrawPixel+0xbc>)
 800415c:	54d1      	strb	r1, [r2, r3]
 800415e:	e000      	b.n	8004162 <ssd1306_DrawPixel+0xae>
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	20000c78 	.word	0x20000c78
 8004170:	20000878 	.word	0x20000878

08004174 <ssd1306_WriteChar>:
 8004174:	b590      	push	{r4, r7, lr}
 8004176:	b089      	sub	sp, #36	; 0x24
 8004178:	af00      	add	r7, sp, #0
 800417a:	4604      	mov	r4, r0
 800417c:	1d38      	adds	r0, r7, #4
 800417e:	e880 0006 	stmia.w	r0, {r1, r2}
 8004182:	461a      	mov	r2, r3
 8004184:	4623      	mov	r3, r4
 8004186:	73fb      	strb	r3, [r7, #15]
 8004188:	4613      	mov	r3, r2
 800418a:	73bb      	strb	r3, [r7, #14]
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	2b1f      	cmp	r3, #31
 8004190:	d902      	bls.n	8004198 <ssd1306_WriteChar+0x24>
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	2b7e      	cmp	r3, #126	; 0x7e
 8004196:	d901      	bls.n	800419c <ssd1306_WriteChar+0x28>
 8004198:	2300      	movs	r3, #0
 800419a:	e06d      	b.n	8004278 <ssd1306_WriteChar+0x104>
 800419c:	4b38      	ldr	r3, [pc, #224]	; (8004280 <ssd1306_WriteChar+0x10c>)
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	461a      	mov	r2, r3
 80041a2:	793b      	ldrb	r3, [r7, #4]
 80041a4:	4413      	add	r3, r2
 80041a6:	2b80      	cmp	r3, #128	; 0x80
 80041a8:	dc06      	bgt.n	80041b8 <ssd1306_WriteChar+0x44>
 80041aa:	4b35      	ldr	r3, [pc, #212]	; (8004280 <ssd1306_WriteChar+0x10c>)
 80041ac:	885b      	ldrh	r3, [r3, #2]
 80041ae:	461a      	mov	r2, r3
 80041b0:	797b      	ldrb	r3, [r7, #5]
 80041b2:	4413      	add	r3, r2
 80041b4:	2b40      	cmp	r3, #64	; 0x40
 80041b6:	dd01      	ble.n	80041bc <ssd1306_WriteChar+0x48>
 80041b8:	2300      	movs	r3, #0
 80041ba:	e05d      	b.n	8004278 <ssd1306_WriteChar+0x104>
 80041bc:	2300      	movs	r3, #0
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	e04c      	b.n	800425c <ssd1306_WriteChar+0xe8>
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	3b20      	subs	r3, #32
 80041c8:	7979      	ldrb	r1, [r7, #5]
 80041ca:	fb01 f303 	mul.w	r3, r1, r3
 80041ce:	4619      	mov	r1, r3
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	440b      	add	r3, r1
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	4413      	add	r3, r2
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	2300      	movs	r3, #0
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	e034      	b.n	800424c <ssd1306_WriteChar+0xd8>
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d012      	beq.n	8004218 <ssd1306_WriteChar+0xa4>
 80041f2:	4b23      	ldr	r3, [pc, #140]	; (8004280 <ssd1306_WriteChar+0x10c>)
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	4413      	add	r3, r2
 80041fe:	b2d8      	uxtb	r0, r3
 8004200:	4b1f      	ldr	r3, [pc, #124]	; (8004280 <ssd1306_WriteChar+0x10c>)
 8004202:	885b      	ldrh	r3, [r3, #2]
 8004204:	b2da      	uxtb	r2, r3
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	4413      	add	r3, r2
 800420c:	b2db      	uxtb	r3, r3
 800420e:	7bba      	ldrb	r2, [r7, #14]
 8004210:	4619      	mov	r1, r3
 8004212:	f7ff ff4f 	bl	80040b4 <ssd1306_DrawPixel>
 8004216:	e016      	b.n	8004246 <ssd1306_WriteChar+0xd2>
 8004218:	4b19      	ldr	r3, [pc, #100]	; (8004280 <ssd1306_WriteChar+0x10c>)
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	b2da      	uxtb	r2, r3
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	4413      	add	r3, r2
 8004224:	b2d8      	uxtb	r0, r3
 8004226:	4b16      	ldr	r3, [pc, #88]	; (8004280 <ssd1306_WriteChar+0x10c>)
 8004228:	885b      	ldrh	r3, [r3, #2]
 800422a:	b2da      	uxtb	r2, r3
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	4413      	add	r3, r2
 8004232:	b2d9      	uxtb	r1, r3
 8004234:	7bbb      	ldrb	r3, [r7, #14]
 8004236:	2b00      	cmp	r3, #0
 8004238:	bf0c      	ite	eq
 800423a:	2301      	moveq	r3, #1
 800423c:	2300      	movne	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	f7ff ff37 	bl	80040b4 <ssd1306_DrawPixel>
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	3301      	adds	r3, #1
 800424a:	61bb      	str	r3, [r7, #24]
 800424c:	793b      	ldrb	r3, [r7, #4]
 800424e:	461a      	mov	r2, r3
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	4293      	cmp	r3, r2
 8004254:	d3c5      	bcc.n	80041e2 <ssd1306_WriteChar+0x6e>
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	3301      	adds	r3, #1
 800425a:	61fb      	str	r3, [r7, #28]
 800425c:	797b      	ldrb	r3, [r7, #5]
 800425e:	461a      	mov	r2, r3
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	4293      	cmp	r3, r2
 8004264:	d3ad      	bcc.n	80041c2 <ssd1306_WriteChar+0x4e>
 8004266:	4b06      	ldr	r3, [pc, #24]	; (8004280 <ssd1306_WriteChar+0x10c>)
 8004268:	881a      	ldrh	r2, [r3, #0]
 800426a:	793b      	ldrb	r3, [r7, #4]
 800426c:	b29b      	uxth	r3, r3
 800426e:	4413      	add	r3, r2
 8004270:	b29a      	uxth	r2, r3
 8004272:	4b03      	ldr	r3, [pc, #12]	; (8004280 <ssd1306_WriteChar+0x10c>)
 8004274:	801a      	strh	r2, [r3, #0]
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	4618      	mov	r0, r3
 800427a:	3724      	adds	r7, #36	; 0x24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd90      	pop	{r4, r7, pc}
 8004280:	20000c78 	.word	0x20000c78

08004284 <ssd1306_WriteString>:
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	1d38      	adds	r0, r7, #4
 800428e:	e880 0006 	stmia.w	r0, {r1, r2}
 8004292:	70fb      	strb	r3, [r7, #3]
 8004294:	e012      	b.n	80042bc <ssd1306_WriteString+0x38>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	7818      	ldrb	r0, [r3, #0]
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	1d3a      	adds	r2, r7, #4
 800429e:	ca06      	ldmia	r2, {r1, r2}
 80042a0:	f7ff ff68 	bl	8004174 <ssd1306_WriteChar>
 80042a4:	4603      	mov	r3, r0
 80042a6:	461a      	mov	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d002      	beq.n	80042b6 <ssd1306_WriteString+0x32>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	e008      	b.n	80042c8 <ssd1306_WriteString+0x44>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3301      	adds	r3, #1
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e8      	bne.n	8004296 <ssd1306_WriteString+0x12>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <ssd1306_SetCursor>:
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	460a      	mov	r2, r1
 80042da:	71fb      	strb	r3, [r7, #7]
 80042dc:	4613      	mov	r3, r2
 80042de:	71bb      	strb	r3, [r7, #6]
 80042e0:	79fb      	ldrb	r3, [r7, #7]
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	4b05      	ldr	r3, [pc, #20]	; (80042fc <ssd1306_SetCursor+0x2c>)
 80042e6:	801a      	strh	r2, [r3, #0]
 80042e8:	79bb      	ldrb	r3, [r7, #6]
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	4b03      	ldr	r3, [pc, #12]	; (80042fc <ssd1306_SetCursor+0x2c>)
 80042ee:	805a      	strh	r2, [r3, #2]
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	20000c78 	.word	0x20000c78

08004300 <ssd1306_SetContrast>:
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	71fb      	strb	r3, [r7, #7]
 800430a:	2381      	movs	r3, #129	; 0x81
 800430c:	73fb      	strb	r3, [r7, #15]
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff fde7 	bl	8003ee4 <ssd1306_WriteCommand>
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff fde3 	bl	8003ee4 <ssd1306_WriteCommand>
 800431e:	bf00      	nop
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <ssd1306_SetDisplayOn>:
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	4603      	mov	r3, r0
 8004330:	71fb      	strb	r3, [r7, #7]
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d005      	beq.n	8004344 <ssd1306_SetDisplayOn+0x1c>
 8004338:	23af      	movs	r3, #175	; 0xaf
 800433a:	73fb      	strb	r3, [r7, #15]
 800433c:	4b08      	ldr	r3, [pc, #32]	; (8004360 <ssd1306_SetDisplayOn+0x38>)
 800433e:	2201      	movs	r2, #1
 8004340:	719a      	strb	r2, [r3, #6]
 8004342:	e004      	b.n	800434e <ssd1306_SetDisplayOn+0x26>
 8004344:	23ae      	movs	r3, #174	; 0xae
 8004346:	73fb      	strb	r3, [r7, #15]
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <ssd1306_SetDisplayOn+0x38>)
 800434a:	2200      	movs	r2, #0
 800434c:	719a      	strb	r2, [r3, #6]
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff fdc7 	bl	8003ee4 <ssd1306_WriteCommand>
 8004356:	bf00      	nop
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000c78 	.word	0x20000c78

08004364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	607b      	str	r3, [r7, #4]
 800436e:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <HAL_MspInit+0x54>)
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	4a11      	ldr	r2, [pc, #68]	; (80043b8 <HAL_MspInit+0x54>)
 8004374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004378:	6453      	str	r3, [r2, #68]	; 0x44
 800437a:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <HAL_MspInit+0x54>)
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004382:	607b      	str	r3, [r7, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004386:	2300      	movs	r3, #0
 8004388:	603b      	str	r3, [r7, #0]
 800438a:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <HAL_MspInit+0x54>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <HAL_MspInit+0x54>)
 8004390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004394:	6413      	str	r3, [r2, #64]	; 0x40
 8004396:	4b08      	ldr	r3, [pc, #32]	; (80043b8 <HAL_MspInit+0x54>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80043a2:	2200      	movs	r2, #0
 80043a4:	210f      	movs	r1, #15
 80043a6:	f06f 0001 	mvn.w	r0, #1
 80043aa:	f000 ffc8 	bl	800533e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043ae:	bf00      	nop
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40023800 	.word	0x40023800

080043bc <HAL_InitTick>:
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08c      	sub	sp, #48	; 0x30
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	2300      	movs	r3, #0
 80043c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c8:	2300      	movs	r3, #0
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
 80043cc:	2300      	movs	r3, #0
 80043ce:	60bb      	str	r3, [r7, #8]
 80043d0:	4b2e      	ldr	r3, [pc, #184]	; (800448c <HAL_InitTick+0xd0>)
 80043d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d4:	4a2d      	ldr	r2, [pc, #180]	; (800448c <HAL_InitTick+0xd0>)
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	6453      	str	r3, [r2, #68]	; 0x44
 80043dc:	4b2b      	ldr	r3, [pc, #172]	; (800448c <HAL_InitTick+0xd0>)
 80043de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f107 020c 	add.w	r2, r7, #12
 80043ec:	f107 0310 	add.w	r3, r7, #16
 80043f0:	4611      	mov	r1, r2
 80043f2:	4618      	mov	r0, r3
 80043f4:	f005 f87e 	bl	80094f4 <HAL_RCC_GetClockConfig>
 80043f8:	f005 f868 	bl	80094cc <HAL_RCC_GetPCLK2Freq>
 80043fc:	62b8      	str	r0, [r7, #40]	; 0x28
 80043fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004400:	4a23      	ldr	r2, [pc, #140]	; (8004490 <HAL_InitTick+0xd4>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	0c9b      	lsrs	r3, r3, #18
 8004408:	3b01      	subs	r3, #1
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
 800440c:	4b21      	ldr	r3, [pc, #132]	; (8004494 <HAL_InitTick+0xd8>)
 800440e:	4a22      	ldr	r2, [pc, #136]	; (8004498 <HAL_InitTick+0xdc>)
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	4b20      	ldr	r3, [pc, #128]	; (8004494 <HAL_InitTick+0xd8>)
 8004414:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004418:	60da      	str	r2, [r3, #12]
 800441a:	4a1e      	ldr	r2, [pc, #120]	; (8004494 <HAL_InitTick+0xd8>)
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	6053      	str	r3, [r2, #4]
 8004420:	4b1c      	ldr	r3, [pc, #112]	; (8004494 <HAL_InitTick+0xd8>)
 8004422:	2200      	movs	r2, #0
 8004424:	611a      	str	r2, [r3, #16]
 8004426:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <HAL_InitTick+0xd8>)
 8004428:	2200      	movs	r2, #0
 800442a:	609a      	str	r2, [r3, #8]
 800442c:	4b19      	ldr	r3, [pc, #100]	; (8004494 <HAL_InitTick+0xd8>)
 800442e:	2200      	movs	r2, #0
 8004430:	619a      	str	r2, [r3, #24]
 8004432:	4818      	ldr	r0, [pc, #96]	; (8004494 <HAL_InitTick+0xd8>)
 8004434:	f005 f919 	bl	800966a <HAL_TIM_Base_Init>
 8004438:	4603      	mov	r3, r0
 800443a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800443e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004442:	2b00      	cmp	r3, #0
 8004444:	d11b      	bne.n	800447e <HAL_InitTick+0xc2>
 8004446:	4813      	ldr	r0, [pc, #76]	; (8004494 <HAL_InitTick+0xd8>)
 8004448:	f005 f95e 	bl	8009708 <HAL_TIM_Base_Start_IT>
 800444c:	4603      	mov	r3, r0
 800444e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004452:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004456:	2b00      	cmp	r3, #0
 8004458:	d111      	bne.n	800447e <HAL_InitTick+0xc2>
 800445a:	2019      	movs	r0, #25
 800445c:	f000 ff8b 	bl	8005376 <HAL_NVIC_EnableIRQ>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b0f      	cmp	r3, #15
 8004464:	d808      	bhi.n	8004478 <HAL_InitTick+0xbc>
 8004466:	2200      	movs	r2, #0
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	2019      	movs	r0, #25
 800446c:	f000 ff67 	bl	800533e <HAL_NVIC_SetPriority>
 8004470:	4a0a      	ldr	r2, [pc, #40]	; (800449c <HAL_InitTick+0xe0>)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e002      	b.n	800447e <HAL_InitTick+0xc2>
 8004478:	2301      	movs	r3, #1
 800447a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800447e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004482:	4618      	mov	r0, r3
 8004484:	3730      	adds	r7, #48	; 0x30
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40023800 	.word	0x40023800
 8004490:	431bde83 	.word	0x431bde83
 8004494:	20000c80 	.word	0x20000c80
 8004498:	40010000 	.word	0x40010000
 800449c:	20000018 	.word	0x20000018

080044a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044a4:	e7fe      	b.n	80044a4 <NMI_Handler+0x4>

080044a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044a6:	b480      	push	{r7}
 80044a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044aa:	e7fe      	b.n	80044aa <HardFault_Handler+0x4>

080044ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044b0:	e7fe      	b.n	80044b0 <MemManage_Handler+0x4>

080044b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044b2:	b480      	push	{r7}
 80044b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044b6:	e7fe      	b.n	80044b6 <BusFault_Handler+0x4>

080044b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044bc:	e7fe      	b.n	80044bc <UsageFault_Handler+0x4>

080044be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044be:	b480      	push	{r7}
 80044c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044c2:	bf00      	nop
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_IN0_Pin);
 80044d0:	2008      	movs	r0, #8
 80044d2:	f001 fca3 	bl	8005e1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80044d6:	bf00      	nop
 80044d8:	bd80      	pop	{r7, pc}

080044da <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_IN1_Pin);
 80044de:	2010      	movs	r0, #16
 80044e0:	f001 fc9c 	bl	8005e1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80044e4:	bf00      	nop
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80044ec:	4802      	ldr	r0, [pc, #8]	; (80044f8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80044ee:	f005 fa77 	bl	80099e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80044f2:	bf00      	nop
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000c80 	.word	0x20000c80

080044fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004500:	4802      	ldr	r0, [pc, #8]	; (800450c <TIM4_IRQHandler+0x10>)
 8004502:	f005 fa6d 	bl	80099e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004506:	bf00      	nop
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20000ccc 	.word	0x20000ccc

08004510 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_OUT_Pin);
 8004514:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004518:	f001 fc80 	bl	8005e1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_IN_Pin);
 800451c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004520:	f001 fc7c 	bl	8005e1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TEMP_IRQ_Pin);
 8004524:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004528:	f001 fc78 	bl	8005e1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800452c:	bf00      	nop
 800452e:	bd80      	pop	{r7, pc}

08004530 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004534:	4802      	ldr	r0, [pc, #8]	; (8004540 <DMA2_Stream0_IRQHandler+0x10>)
 8004536:	f001 f837 	bl	80055a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800453a:	bf00      	nop
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20000348 	.word	0x20000348

08004544 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004548:	4802      	ldr	r0, [pc, #8]	; (8004554 <OTG_FS_IRQHandler+0x10>)
 800454a:	f003 fa0e 	bl	800796a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800454e:	bf00      	nop
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20005758 	.word	0x20005758

08004558 <_getpid>:
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
 800455c:	2301      	movs	r3, #1
 800455e:	4618      	mov	r0, r3
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <_kill>:
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
 8004572:	f00b fcbb 	bl	800feec <__errno>
 8004576:	4603      	mov	r3, r0
 8004578:	2216      	movs	r2, #22
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	f04f 33ff 	mov.w	r3, #4294967295
 8004580:	4618      	mov	r0, r3
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <_exit>:
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	f04f 31ff 	mov.w	r1, #4294967295
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff ffe7 	bl	8004568 <_kill>
 800459a:	e7fe      	b.n	800459a <_exit+0x12>

0800459c <_read>:
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	e00a      	b.n	80045c4 <_read+0x28>
 80045ae:	f3af 8000 	nop.w
 80045b2:	4601      	mov	r1, r0
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	60ba      	str	r2, [r7, #8]
 80045ba:	b2ca      	uxtb	r2, r1
 80045bc:	701a      	strb	r2, [r3, #0]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	3301      	adds	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	dbf0      	blt.n	80045ae <_read+0x12>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <_close>:
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	f04f 33ff 	mov.w	r3, #4294967295
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <_fstat>:
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045fe:	605a      	str	r2, [r3, #4]
 8004600:	2300      	movs	r3, #0
 8004602:	4618      	mov	r0, r3
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <_isatty>:
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	2301      	movs	r3, #1
 8004618:	4618      	mov	r0, r3
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <_lseek>:
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	2300      	movs	r3, #0
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
	...

08004640 <_sbrk>:
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	4a14      	ldr	r2, [pc, #80]	; (800469c <_sbrk+0x5c>)
 800464a:	4b15      	ldr	r3, [pc, #84]	; (80046a0 <_sbrk+0x60>)
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	4b13      	ldr	r3, [pc, #76]	; (80046a4 <_sbrk+0x64>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d102      	bne.n	8004662 <_sbrk+0x22>
 800465c:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <_sbrk+0x64>)
 800465e:	4a12      	ldr	r2, [pc, #72]	; (80046a8 <_sbrk+0x68>)
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <_sbrk+0x64>)
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4413      	add	r3, r2
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	429a      	cmp	r2, r3
 800466e:	d207      	bcs.n	8004680 <_sbrk+0x40>
 8004670:	f00b fc3c 	bl	800feec <__errno>
 8004674:	4603      	mov	r3, r0
 8004676:	220c      	movs	r2, #12
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	f04f 33ff 	mov.w	r3, #4294967295
 800467e:	e009      	b.n	8004694 <_sbrk+0x54>
 8004680:	4b08      	ldr	r3, [pc, #32]	; (80046a4 <_sbrk+0x64>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <_sbrk+0x64>)
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4413      	add	r3, r2
 800468e:	4a05      	ldr	r2, [pc, #20]	; (80046a4 <_sbrk+0x64>)
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	20010000 	.word	0x20010000
 80046a0:	00000400 	.word	0x00000400
 80046a4:	20000cc8 	.word	0x20000cc8
 80046a8:	20005e98 	.word	0x20005e98

080046ac <SystemInit>:
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <SystemInit+0x20>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b6:	4a05      	ldr	r2, [pc, #20]	; (80046cc <SystemInit+0x20>)
 80046b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80046c0:	bf00      	nop
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	e000ed00 	.word	0xe000ed00

080046d0 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08e      	sub	sp, #56	; 0x38
 80046d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig =
 80046d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	605a      	str	r2, [r3, #4]
 80046e0:	609a      	str	r2, [r3, #8]
 80046e2:	60da      	str	r2, [r3, #12]
	{ 0 };
	TIM_MasterConfigTypeDef sMasterConfig =
 80046e4:	f107 0320 	add.w	r3, r7, #32
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	605a      	str	r2, [r3, #4]
	{ 0 };
	TIM_OC_InitTypeDef sConfigOC =
 80046ee:	1d3b      	adds	r3, r7, #4
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	609a      	str	r2, [r3, #8]
 80046f8:	60da      	str	r2, [r3, #12]
 80046fa:	611a      	str	r2, [r3, #16]
 80046fc:	615a      	str	r2, [r3, #20]
 80046fe:	619a      	str	r2, [r3, #24]
	{ 0 };

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8004700:	4b33      	ldr	r3, [pc, #204]	; (80047d0 <MX_TIM4_Init+0x100>)
 8004702:	4a34      	ldr	r2, [pc, #208]	; (80047d4 <MX_TIM4_Init+0x104>)
 8004704:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 840 - 1;
 8004706:	4b32      	ldr	r3, [pc, #200]	; (80047d0 <MX_TIM4_Init+0x100>)
 8004708:	f240 3247 	movw	r2, #839	; 0x347
 800470c:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800470e:	4b30      	ldr	r3, [pc, #192]	; (80047d0 <MX_TIM4_Init+0x100>)
 8004710:	2200      	movs	r2, #0
 8004712:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 100 - 1;
 8004714:	4b2e      	ldr	r3, [pc, #184]	; (80047d0 <MX_TIM4_Init+0x100>)
 8004716:	2263      	movs	r2, #99	; 0x63
 8004718:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800471a:	4b2d      	ldr	r3, [pc, #180]	; (80047d0 <MX_TIM4_Init+0x100>)
 800471c:	2200      	movs	r2, #0
 800471e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004720:	4b2b      	ldr	r3, [pc, #172]	; (80047d0 <MX_TIM4_Init+0x100>)
 8004722:	2280      	movs	r2, #128	; 0x80
 8004724:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004726:	482a      	ldr	r0, [pc, #168]	; (80047d0 <MX_TIM4_Init+0x100>)
 8004728:	f004 ff9f 	bl	800966a <HAL_TIM_Base_Init>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <MX_TIM4_Init+0x66>
	{
		Error_Handler();
 8004732:	f7fe fad9 	bl	8002ce8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800473a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800473c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004740:	4619      	mov	r1, r3
 8004742:	4823      	ldr	r0, [pc, #140]	; (80047d0 <MX_TIM4_Init+0x100>)
 8004744:	f005 fb16 	bl	8009d74 <HAL_TIM_ConfigClockSource>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <MX_TIM4_Init+0x82>
	{
		Error_Handler();
 800474e:	f7fe facb 	bl	8002ce8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004752:	481f      	ldr	r0, [pc, #124]	; (80047d0 <MX_TIM4_Init+0x100>)
 8004754:	f005 f83a 	bl	80097cc <HAL_TIM_PWM_Init>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <MX_TIM4_Init+0x92>
	{
		Error_Handler();
 800475e:	f7fe fac3 	bl	8002ce8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004762:	2320      	movs	r3, #32
 8004764:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004766:	2300      	movs	r3, #0
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800476a:	f107 0320 	add.w	r3, r7, #32
 800476e:	4619      	mov	r1, r3
 8004770:	4817      	ldr	r0, [pc, #92]	; (80047d0 <MX_TIM4_Init+0x100>)
 8004772:	f005 febb 	bl	800a4ec <HAL_TIMEx_MasterConfigSynchronization>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <MX_TIM4_Init+0xb0>
	{
		Error_Handler();
 800477c:	f7fe fab4 	bl	8002ce8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004780:	2360      	movs	r3, #96	; 0x60
 8004782:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 50;
 8004784:	2332      	movs	r3, #50	; 0x32
 8004786:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004788:	2302      	movs	r3, #2
 800478a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004790:	1d3b      	adds	r3, r7, #4
 8004792:	2208      	movs	r2, #8
 8004794:	4619      	mov	r1, r3
 8004796:	480e      	ldr	r0, [pc, #56]	; (80047d0 <MX_TIM4_Init+0x100>)
 8004798:	f005 fa2a 	bl	8009bf0 <HAL_TIM_PWM_ConfigChannel>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <MX_TIM4_Init+0xd6>
	{
		Error_Handler();
 80047a2:	f7fe faa1 	bl	8002ce8 <Error_Handler>
	}
	sConfigOC.Pulse = 25;
 80047a6:	2319      	movs	r3, #25
 80047a8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80047aa:	1d3b      	adds	r3, r7, #4
 80047ac:	220c      	movs	r2, #12
 80047ae:	4619      	mov	r1, r3
 80047b0:	4807      	ldr	r0, [pc, #28]	; (80047d0 <MX_TIM4_Init+0x100>)
 80047b2:	f005 fa1d 	bl	8009bf0 <HAL_TIM_PWM_ConfigChannel>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <MX_TIM4_Init+0xf0>
	{
		Error_Handler();
 80047bc:	f7fe fa94 	bl	8002ce8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 80047c0:	4803      	ldr	r0, [pc, #12]	; (80047d0 <MX_TIM4_Init+0x100>)
 80047c2:	f000 f831 	bl	8004828 <HAL_TIM_MspPostInit>

}
 80047c6:	bf00      	nop
 80047c8:	3738      	adds	r7, #56	; 0x38
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000ccc 	.word	0x20000ccc
 80047d4:	40000800 	.word	0x40000800

080047d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *tim_baseHandle)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]

	if (tim_baseHandle->Instance == TIM4)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a0e      	ldr	r2, [pc, #56]	; (8004820 <HAL_TIM_Base_MspInit+0x48>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d115      	bne.n	8004816 <HAL_TIM_Base_MspInit+0x3e>
	{
		/* USER CODE BEGIN TIM4_MspInit 0 */

		/* USER CODE END TIM4_MspInit 0 */
		/* TIM4 clock enable */
		__HAL_RCC_TIM4_CLK_ENABLE();
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	4b0d      	ldr	r3, [pc, #52]	; (8004824 <HAL_TIM_Base_MspInit+0x4c>)
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	4a0c      	ldr	r2, [pc, #48]	; (8004824 <HAL_TIM_Base_MspInit+0x4c>)
 80047f4:	f043 0304 	orr.w	r3, r3, #4
 80047f8:	6413      	str	r3, [r2, #64]	; 0x40
 80047fa:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <HAL_TIM_Base_MspInit+0x4c>)
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	f003 0304 	and.w	r3, r3, #4
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]

		/* TIM4 interrupt Init */
		HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8004806:	2200      	movs	r2, #0
 8004808:	2105      	movs	r1, #5
 800480a:	201e      	movs	r0, #30
 800480c:	f000 fd97 	bl	800533e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004810:	201e      	movs	r0, #30
 8004812:	f000 fdb0 	bl	8005376 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM4_MspInit 1 */

		/* USER CODE END TIM4_MspInit 1 */
	}
}
 8004816:	bf00      	nop
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40000800 	.word	0x40000800
 8004824:	40023800 	.word	0x40023800

08004828 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *timHandle)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b088      	sub	sp, #32
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 8004830:	f107 030c 	add.w	r3, r7, #12
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	605a      	str	r2, [r3, #4]
 800483a:	609a      	str	r2, [r3, #8]
 800483c:	60da      	str	r2, [r3, #12]
 800483e:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (timHandle->Instance == TIM4)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a12      	ldr	r2, [pc, #72]	; (8004890 <HAL_TIM_MspPostInit+0x68>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d11e      	bne.n	8004888 <HAL_TIM_MspPostInit+0x60>
	{
		/* USER CODE BEGIN TIM4_MspPostInit 0 */

		/* USER CODE END TIM4_MspPostInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800484a:	2300      	movs	r3, #0
 800484c:	60bb      	str	r3, [r7, #8]
 800484e:	4b11      	ldr	r3, [pc, #68]	; (8004894 <HAL_TIM_MspPostInit+0x6c>)
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	4a10      	ldr	r2, [pc, #64]	; (8004894 <HAL_TIM_MspPostInit+0x6c>)
 8004854:	f043 0302 	orr.w	r3, r3, #2
 8004858:	6313      	str	r3, [r2, #48]	; 0x30
 800485a:	4b0e      	ldr	r3, [pc, #56]	; (8004894 <HAL_TIM_MspPostInit+0x6c>)
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]
		/**TIM4 GPIO Configuration
		 PB8     ------> TIM4_CH3
		 PB9     ------> TIM4_CH4
		 */
		GPIO_InitStruct.Pin = PWM_OUT0_Pin | PWM_OUT1_Pin;
 8004866:	f44f 7340 	mov.w	r3, #768	; 0x300
 800486a:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486c:	2302      	movs	r3, #2
 800486e:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004870:	2301      	movs	r3, #1
 8004872:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004874:	2302      	movs	r3, #2
 8004876:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004878:	2302      	movs	r3, #2
 800487a:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800487c:	f107 030c 	add.w	r3, r7, #12
 8004880:	4619      	mov	r1, r3
 8004882:	4805      	ldr	r0, [pc, #20]	; (8004898 <HAL_TIM_MspPostInit+0x70>)
 8004884:	f001 f8fa 	bl	8005a7c <HAL_GPIO_Init>
		/* USER CODE BEGIN TIM4_MspPostInit 1 */

		/* USER CODE END TIM4_MspPostInit 1 */
	}

}
 8004888:	bf00      	nop
 800488a:	3720      	adds	r7, #32
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40000800 	.word	0x40000800
 8004894:	40023800 	.word	0x40023800
 8004898:	40020400 	.word	0x40020400

0800489c <Reset_Handler>:
 800489c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048d4 <LoopFillZerobss+0x12>
 80048a0:	480d      	ldr	r0, [pc, #52]	; (80048d8 <LoopFillZerobss+0x16>)
 80048a2:	490e      	ldr	r1, [pc, #56]	; (80048dc <LoopFillZerobss+0x1a>)
 80048a4:	4a0e      	ldr	r2, [pc, #56]	; (80048e0 <LoopFillZerobss+0x1e>)
 80048a6:	2300      	movs	r3, #0
 80048a8:	e002      	b.n	80048b0 <LoopCopyDataInit>

080048aa <CopyDataInit>:
 80048aa:	58d4      	ldr	r4, [r2, r3]
 80048ac:	50c4      	str	r4, [r0, r3]
 80048ae:	3304      	adds	r3, #4

080048b0 <LoopCopyDataInit>:
 80048b0:	18c4      	adds	r4, r0, r3
 80048b2:	428c      	cmp	r4, r1
 80048b4:	d3f9      	bcc.n	80048aa <CopyDataInit>
 80048b6:	4a0b      	ldr	r2, [pc, #44]	; (80048e4 <LoopFillZerobss+0x22>)
 80048b8:	4c0b      	ldr	r4, [pc, #44]	; (80048e8 <LoopFillZerobss+0x26>)
 80048ba:	2300      	movs	r3, #0
 80048bc:	e001      	b.n	80048c2 <LoopFillZerobss>

080048be <FillZerobss>:
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	3204      	adds	r2, #4

080048c2 <LoopFillZerobss>:
 80048c2:	42a2      	cmp	r2, r4
 80048c4:	d3fb      	bcc.n	80048be <FillZerobss>
 80048c6:	f7ff fef1 	bl	80046ac <SystemInit>
 80048ca:	f00b fc0b 	bl	80100e4 <__libc_init_array>
 80048ce:	f7fe f8cd 	bl	8002a6c <main>
 80048d2:	4770      	bx	lr
 80048d4:	20010000 	.word	0x20010000
 80048d8:	20000000 	.word	0x20000000
 80048dc:	200002e4 	.word	0x200002e4
 80048e0:	08014c1c 	.word	0x08014c1c
 80048e4:	200002e4 	.word	0x200002e4
 80048e8:	20005e94 	.word	0x20005e94

080048ec <ADC_IRQHandler>:
 80048ec:	e7fe      	b.n	80048ec <ADC_IRQHandler>
	...

080048f0 <HAL_Init>:
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	4b0e      	ldr	r3, [pc, #56]	; (8004930 <HAL_Init+0x40>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a0d      	ldr	r2, [pc, #52]	; (8004930 <HAL_Init+0x40>)
 80048fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <HAL_Init+0x40>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a0a      	ldr	r2, [pc, #40]	; (8004930 <HAL_Init+0x40>)
 8004906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	4b08      	ldr	r3, [pc, #32]	; (8004930 <HAL_Init+0x40>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a07      	ldr	r2, [pc, #28]	; (8004930 <HAL_Init+0x40>)
 8004912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004916:	6013      	str	r3, [r2, #0]
 8004918:	2003      	movs	r0, #3
 800491a:	f000 fd05 	bl	8005328 <HAL_NVIC_SetPriorityGrouping>
 800491e:	200f      	movs	r0, #15
 8004920:	f7ff fd4c 	bl	80043bc <HAL_InitTick>
 8004924:	f7ff fd1e 	bl	8004364 <HAL_MspInit>
 8004928:	2300      	movs	r3, #0
 800492a:	4618      	mov	r0, r3
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40023c00 	.word	0x40023c00

08004934 <HAL_IncTick>:
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
 8004938:	4b06      	ldr	r3, [pc, #24]	; (8004954 <HAL_IncTick+0x20>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	461a      	mov	r2, r3
 800493e:	4b06      	ldr	r3, [pc, #24]	; (8004958 <HAL_IncTick+0x24>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4413      	add	r3, r2
 8004944:	4a04      	ldr	r2, [pc, #16]	; (8004958 <HAL_IncTick+0x24>)
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	bf00      	nop
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	2000001c 	.word	0x2000001c
 8004958:	20000d14 	.word	0x20000d14

0800495c <HAL_GetTick>:
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
 8004960:	4b03      	ldr	r3, [pc, #12]	; (8004970 <HAL_GetTick+0x14>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4618      	mov	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	20000d14 	.word	0x20000d14

08004974 <HAL_Delay>:
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	f7ff ffee 	bl	800495c <HAL_GetTick>
 8004980:	60b8      	str	r0, [r7, #8]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498c:	d005      	beq.n	800499a <HAL_Delay+0x26>
 800498e:	4b0a      	ldr	r3, [pc, #40]	; (80049b8 <HAL_Delay+0x44>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4413      	add	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	bf00      	nop
 800499c:	f7ff ffde 	bl	800495c <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d8f7      	bhi.n	800499c <HAL_Delay+0x28>
 80049ac:	bf00      	nop
 80049ae:	bf00      	nop
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	2000001c 	.word	0x2000001c

080049bc <HAL_ADC_Init>:
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	2300      	movs	r3, #0
 80049c6:	73fb      	strb	r3, [r7, #15]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_ADC_Init+0x16>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e033      	b.n	8004a3a <HAL_ADC_Init+0x7e>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d109      	bne.n	80049ee <HAL_ADC_Init+0x32>
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7fc fb5e 	bl	800109c <HAL_ADC_MspInit>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	645a      	str	r2, [r3, #68]	; 0x44
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f003 0310 	and.w	r3, r3, #16
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d118      	bne.n	8004a2c <HAL_ADC_Init+0x70>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a02:	f023 0302 	bic.w	r3, r3, #2
 8004a06:	f043 0202 	orr.w	r2, r3, #2
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	641a      	str	r2, [r3, #64]	; 0x40
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fa48 	bl	8004ea4 <ADC_Init>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	645a      	str	r2, [r3, #68]	; 0x44
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f023 0303 	bic.w	r3, r3, #3
 8004a22:	f043 0201 	orr.w	r2, r3, #1
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	641a      	str	r2, [r3, #64]	; 0x40
 8004a2a:	e001      	b.n	8004a30 <HAL_ADC_Init+0x74>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	73fb      	strb	r3, [r7, #15]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
	...

08004a44 <HAL_ADC_Start_DMA>:
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	2300      	movs	r3, #0
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d101      	bne.n	8004a62 <HAL_ADC_Start_DMA+0x1e>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	e0ce      	b.n	8004c00 <HAL_ADC_Start_DMA+0x1bc>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d018      	beq.n	8004aaa <HAL_ADC_Start_DMA+0x66>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0201 	orr.w	r2, r2, #1
 8004a86:	609a      	str	r2, [r3, #8]
 8004a88:	4b5f      	ldr	r3, [pc, #380]	; (8004c08 <HAL_ADC_Start_DMA+0x1c4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a5f      	ldr	r2, [pc, #380]	; (8004c0c <HAL_ADC_Start_DMA+0x1c8>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	0c9a      	lsrs	r2, r3, #18
 8004a94:	4613      	mov	r3, r2
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	4413      	add	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]
 8004a9c:	e002      	b.n	8004aa4 <HAL_ADC_Start_DMA+0x60>
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	613b      	str	r3, [r7, #16]
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f9      	bne.n	8004a9e <HAL_ADC_Start_DMA+0x5a>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ab8:	d107      	bne.n	8004aca <HAL_ADC_Start_DMA+0x86>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ac8:	609a      	str	r2, [r3, #8]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	f040 8086 	bne.w	8004be6 <HAL_ADC_Start_DMA+0x1a2>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004ae2:	f023 0301 	bic.w	r3, r3, #1
 8004ae6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d007      	beq.n	8004b0c <HAL_ADC_Start_DMA+0xc8>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b04:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	641a      	str	r2, [r3, #64]	; 0x40
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b18:	d106      	bne.n	8004b28 <HAL_ADC_Start_DMA+0xe4>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1e:	f023 0206 	bic.w	r2, r3, #6
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	645a      	str	r2, [r3, #68]	; 0x44
 8004b26:	e002      	b.n	8004b2e <HAL_ADC_Start_DMA+0xea>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	645a      	str	r2, [r3, #68]	; 0x44
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b36:	4b36      	ldr	r3, [pc, #216]	; (8004c10 <HAL_ADC_Start_DMA+0x1cc>)
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	4a35      	ldr	r2, [pc, #212]	; (8004c14 <HAL_ADC_Start_DMA+0x1d0>)
 8004b40:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	4a34      	ldr	r2, [pc, #208]	; (8004c18 <HAL_ADC_Start_DMA+0x1d4>)
 8004b48:	641a      	str	r2, [r3, #64]	; 0x40
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4e:	4a33      	ldr	r2, [pc, #204]	; (8004c1c <HAL_ADC_Start_DMA+0x1d8>)
 8004b50:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004b6a:	605a      	str	r2, [r3, #4]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b7a:	609a      	str	r2, [r3, #8]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	334c      	adds	r3, #76	; 0x4c
 8004b86:	4619      	mov	r1, r3
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f000 fcb4 	bl	80054f8 <HAL_DMA_Start_IT>
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f003 031f 	and.w	r3, r3, #31
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10f      	bne.n	8004bbc <HAL_ADC_Start_DMA+0x178>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d129      	bne.n	8004bfe <HAL_ADC_Start_DMA+0x1ba>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004bb8:	609a      	str	r2, [r3, #8]
 8004bba:	e020      	b.n	8004bfe <HAL_ADC_Start_DMA+0x1ba>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a17      	ldr	r2, [pc, #92]	; (8004c20 <HAL_ADC_Start_DMA+0x1dc>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d11b      	bne.n	8004bfe <HAL_ADC_Start_DMA+0x1ba>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d114      	bne.n	8004bfe <HAL_ADC_Start_DMA+0x1ba>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004be2:	609a      	str	r2, [r3, #8]
 8004be4:	e00b      	b.n	8004bfe <HAL_ADC_Start_DMA+0x1ba>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	f043 0210 	orr.w	r2, r3, #16
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	641a      	str	r2, [r3, #64]	; 0x40
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf6:	f043 0201 	orr.w	r2, r3, #1
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	645a      	str	r2, [r3, #68]	; 0x44
 8004bfe:	2300      	movs	r3, #0
 8004c00:	4618      	mov	r0, r3
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	20000014 	.word	0x20000014
 8004c0c:	431bde83 	.word	0x431bde83
 8004c10:	40012300 	.word	0x40012300
 8004c14:	0800509d 	.word	0x0800509d
 8004c18:	08005157 	.word	0x08005157
 8004c1c:	08005173 	.word	0x08005173
 8004c20:	40012000 	.word	0x40012000

08004c24 <HAL_ADC_ConvCpltCallback>:
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_ADC_ConvHalfCpltCallback>:
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_ADC_ErrorCallback>:
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_ADC_ConfigChannel>:
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60bb      	str	r3, [r7, #8]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d101      	bne.n	8004c7c <HAL_ADC_ConfigChannel+0x1c>
 8004c78:	2302      	movs	r3, #2
 8004c7a:	e105      	b.n	8004e88 <HAL_ADC_ConfigChannel+0x228>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b09      	cmp	r3, #9
 8004c8a:	d925      	bls.n	8004cd8 <HAL_ADC_ConfigChannel+0x78>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68d9      	ldr	r1, [r3, #12]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	4413      	add	r3, r2
 8004ca0:	3b1e      	subs	r3, #30
 8004ca2:	2207      	movs	r2, #7
 8004ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca8:	43da      	mvns	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	400a      	ands	r2, r1
 8004cb0:	60da      	str	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68d9      	ldr	r1, [r3, #12]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	4403      	add	r3, r0
 8004cca:	3b1e      	subs	r3, #30
 8004ccc:	409a      	lsls	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	60da      	str	r2, [r3, #12]
 8004cd6:	e022      	b.n	8004d1e <HAL_ADC_ConfigChannel+0xbe>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6919      	ldr	r1, [r3, #16]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	4413      	add	r3, r2
 8004cec:	2207      	movs	r2, #7
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	43da      	mvns	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	400a      	ands	r2, r1
 8004cfa:	611a      	str	r2, [r3, #16]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6919      	ldr	r1, [r3, #16]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	4603      	mov	r3, r0
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	4403      	add	r3, r0
 8004d14:	409a      	lsls	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	611a      	str	r2, [r3, #16]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2b06      	cmp	r3, #6
 8004d24:	d824      	bhi.n	8004d70 <HAL_ADC_ConfigChannel+0x110>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	4613      	mov	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	3b05      	subs	r3, #5
 8004d38:	221f      	movs	r2, #31
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	43da      	mvns	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	400a      	ands	r2, r1
 8004d46:	635a      	str	r2, [r3, #52]	; 0x34
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	4618      	mov	r0, r3
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	3b05      	subs	r3, #5
 8004d62:	fa00 f203 	lsl.w	r2, r0, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	635a      	str	r2, [r3, #52]	; 0x34
 8004d6e:	e04c      	b.n	8004e0a <HAL_ADC_ConfigChannel+0x1aa>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b0c      	cmp	r3, #12
 8004d76:	d824      	bhi.n	8004dc2 <HAL_ADC_ConfigChannel+0x162>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	3b23      	subs	r3, #35	; 0x23
 8004d8a:	221f      	movs	r2, #31
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	43da      	mvns	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	400a      	ands	r2, r1
 8004d98:	631a      	str	r2, [r3, #48]	; 0x30
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	4618      	mov	r0, r3
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	4613      	mov	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	3b23      	subs	r3, #35	; 0x23
 8004db4:	fa00 f203 	lsl.w	r2, r0, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	631a      	str	r2, [r3, #48]	; 0x30
 8004dc0:	e023      	b.n	8004e0a <HAL_ADC_ConfigChannel+0x1aa>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	3b41      	subs	r3, #65	; 0x41
 8004dd4:	221f      	movs	r2, #31
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	43da      	mvns	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	400a      	ands	r2, r1
 8004de2:	62da      	str	r2, [r3, #44]	; 0x2c
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	4618      	mov	r0, r3
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	4613      	mov	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	3b41      	subs	r3, #65	; 0x41
 8004dfe:	fa00 f203 	lsl.w	r2, r0, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e0a:	4b22      	ldr	r3, [pc, #136]	; (8004e94 <HAL_ADC_ConfigChannel+0x234>)
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a21      	ldr	r2, [pc, #132]	; (8004e98 <HAL_ADC_ConfigChannel+0x238>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d109      	bne.n	8004e2c <HAL_ADC_ConfigChannel+0x1cc>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b12      	cmp	r3, #18
 8004e1e:	d105      	bne.n	8004e2c <HAL_ADC_ConfigChannel+0x1cc>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	605a      	str	r2, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a19      	ldr	r2, [pc, #100]	; (8004e98 <HAL_ADC_ConfigChannel+0x238>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d123      	bne.n	8004e7e <HAL_ADC_ConfigChannel+0x21e>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b10      	cmp	r3, #16
 8004e3c:	d003      	beq.n	8004e46 <HAL_ADC_ConfigChannel+0x1e6>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b11      	cmp	r3, #17
 8004e44:	d11b      	bne.n	8004e7e <HAL_ADC_ConfigChannel+0x21e>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	605a      	str	r2, [r3, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b10      	cmp	r3, #16
 8004e58:	d111      	bne.n	8004e7e <HAL_ADC_ConfigChannel+0x21e>
 8004e5a:	4b10      	ldr	r3, [pc, #64]	; (8004e9c <HAL_ADC_ConfigChannel+0x23c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a10      	ldr	r2, [pc, #64]	; (8004ea0 <HAL_ADC_ConfigChannel+0x240>)
 8004e60:	fba2 2303 	umull	r2, r3, r2, r3
 8004e64:	0c9a      	lsrs	r2, r3, #18
 8004e66:	4613      	mov	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	60bb      	str	r3, [r7, #8]
 8004e70:	e002      	b.n	8004e78 <HAL_ADC_ConfigChannel+0x218>
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	60bb      	str	r3, [r7, #8]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1f9      	bne.n	8004e72 <HAL_ADC_ConfigChannel+0x212>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e86:	2300      	movs	r3, #0
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	40012300 	.word	0x40012300
 8004e98:	40012000 	.word	0x40012000
 8004e9c:	20000014 	.word	0x20000014
 8004ea0:	431bde83 	.word	0x431bde83

08004ea4 <ADC_Init>:
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	4b79      	ldr	r3, [pc, #484]	; (8005094 <ADC_Init+0x1f0>)
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	605a      	str	r2, [r3, #4]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	605a      	str	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ed8:	605a      	str	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6859      	ldr	r1, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	021a      	lsls	r2, r3, #8
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004efc:	605a      	str	r2, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6859      	ldr	r1, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	605a      	str	r2, [r3, #4]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f1e:	609a      	str	r2, [r3, #8]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6899      	ldr	r1, [r3, #8]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	609a      	str	r2, [r3, #8]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f36:	4a58      	ldr	r2, [pc, #352]	; (8005098 <ADC_Init+0x1f4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d022      	beq.n	8004f82 <ADC_Init+0xde>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f4a:	609a      	str	r2, [r3, #8]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6899      	ldr	r1, [r3, #8]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	609a      	str	r2, [r3, #8]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f6c:	609a      	str	r2, [r3, #8]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6899      	ldr	r1, [r3, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	609a      	str	r2, [r3, #8]
 8004f80:	e00f      	b.n	8004fa2 <ADC_Init+0xfe>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f90:	609a      	str	r2, [r3, #8]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004fa0:	609a      	str	r2, [r3, #8]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0202 	bic.w	r2, r2, #2
 8004fb0:	609a      	str	r2, [r3, #8]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6899      	ldr	r1, [r3, #8]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	7e1b      	ldrb	r3, [r3, #24]
 8004fbc:	005a      	lsls	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	609a      	str	r2, [r3, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01b      	beq.n	8005008 <ADC_Init+0x164>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fde:	605a      	str	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004fee:	605a      	str	r2, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6859      	ldr	r1, [r3, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	035a      	lsls	r2, r3, #13
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
 8005006:	e007      	b.n	8005018 <ADC_Init+0x174>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005016:	605a      	str	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005026:	62da      	str	r2, [r3, #44]	; 0x2c
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	3b01      	subs	r3, #1
 8005034:	051a      	lsls	r2, r3, #20
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	62da      	str	r2, [r3, #44]	; 0x2c
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800504c:	609a      	str	r2, [r3, #8]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6899      	ldr	r1, [r3, #8]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800505a:	025a      	lsls	r2, r3, #9
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	609a      	str	r2, [r3, #8]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689a      	ldr	r2, [r3, #8]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005072:	609a      	str	r2, [r3, #8]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6899      	ldr	r1, [r3, #8]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	029a      	lsls	r2, r3, #10
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	609a      	str	r2, [r3, #8]
 8005088:	bf00      	nop
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	40012300 	.word	0x40012300
 8005098:	0f000001 	.word	0x0f000001

0800509c <ADC_DMAConvCplt>:
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d13c      	bne.n	8005130 <ADC_DMAConvCplt+0x94>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	641a      	str	r2, [r3, #64]	; 0x40
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d12b      	bne.n	8005128 <ADC_DMAConvCplt+0x8c>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	7e1b      	ldrb	r3, [r3, #24]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d127      	bne.n	8005128 <ADC_DMAConvCplt+0x8c>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d006      	beq.n	80050f4 <ADC_DMAConvCplt+0x58>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d119      	bne.n	8005128 <ADC_DMAConvCplt+0x8c>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0220 	bic.w	r2, r2, #32
 8005102:	605a      	str	r2, [r3, #4]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005108:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	641a      	str	r2, [r3, #64]	; 0x40
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d105      	bne.n	8005128 <ADC_DMAConvCplt+0x8c>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	f043 0201 	orr.w	r2, r3, #1
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	641a      	str	r2, [r3, #64]	; 0x40
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f7ff fd7b 	bl	8004c24 <HAL_ADC_ConvCpltCallback>
 800512e:	e00e      	b.n	800514e <ADC_DMAConvCplt+0xb2>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <ADC_DMAConvCplt+0xa8>
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f7ff fd85 	bl	8004c4c <HAL_ADC_ErrorCallback>
 8005142:	e004      	b.n	800514e <ADC_DMAConvCplt+0xb2>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	4798      	blx	r3
 800514e:	bf00      	nop
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <ADC_DMAHalfConvCplt>:
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f7ff fd67 	bl	8004c38 <HAL_ADC_ConvHalfCpltCallback>
 800516a:	bf00      	nop
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <ADC_DMAError>:
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2240      	movs	r2, #64	; 0x40
 8005184:	641a      	str	r2, [r3, #64]	; 0x40
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518a:	f043 0204 	orr.w	r2, r3, #4
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	645a      	str	r2, [r3, #68]	; 0x44
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f7ff fd5a 	bl	8004c4c <HAL_ADC_ErrorCallback>
 8005198:	bf00      	nop
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <__NVIC_SetPriorityGrouping>:
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <__NVIC_SetPriorityGrouping+0x44>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051bc:	4013      	ands	r3, r2
 80051be:	60bb      	str	r3, [r7, #8]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	021a      	lsls	r2, r3, #8
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80051cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051d0:	60bb      	str	r3, [r7, #8]
 80051d2:	4a04      	ldr	r2, [pc, #16]	; (80051e4 <__NVIC_SetPriorityGrouping+0x44>)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	60d3      	str	r3, [r2, #12]
 80051d8:	bf00      	nop
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	e000ed00 	.word	0xe000ed00

080051e8 <__NVIC_GetPriorityGrouping>:
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	4b04      	ldr	r3, [pc, #16]	; (8005200 <__NVIC_GetPriorityGrouping+0x18>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	0a1b      	lsrs	r3, r3, #8
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	4618      	mov	r0, r3
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	e000ed00 	.word	0xe000ed00

08005204 <__NVIC_EnableIRQ>:
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	4603      	mov	r3, r0
 800520c:	71fb      	strb	r3, [r7, #7]
 800520e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005212:	2b00      	cmp	r3, #0
 8005214:	db0b      	blt.n	800522e <__NVIC_EnableIRQ+0x2a>
 8005216:	79fb      	ldrb	r3, [r7, #7]
 8005218:	f003 021f 	and.w	r2, r3, #31
 800521c:	4907      	ldr	r1, [pc, #28]	; (800523c <__NVIC_EnableIRQ+0x38>)
 800521e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	2001      	movs	r0, #1
 8005226:	fa00 f202 	lsl.w	r2, r0, r2
 800522a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	e000e100 	.word	0xe000e100

08005240 <__NVIC_SetPriority>:
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	6039      	str	r1, [r7, #0]
 800524a:	71fb      	strb	r3, [r7, #7]
 800524c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005250:	2b00      	cmp	r3, #0
 8005252:	db0a      	blt.n	800526a <__NVIC_SetPriority+0x2a>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	b2da      	uxtb	r2, r3
 8005258:	490c      	ldr	r1, [pc, #48]	; (800528c <__NVIC_SetPriority+0x4c>)
 800525a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800525e:	0112      	lsls	r2, r2, #4
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	440b      	add	r3, r1
 8005264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8005268:	e00a      	b.n	8005280 <__NVIC_SetPriority+0x40>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	b2da      	uxtb	r2, r3
 800526e:	4908      	ldr	r1, [pc, #32]	; (8005290 <__NVIC_SetPriority+0x50>)
 8005270:	79fb      	ldrb	r3, [r7, #7]
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	3b04      	subs	r3, #4
 8005278:	0112      	lsls	r2, r2, #4
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	440b      	add	r3, r1
 800527e:	761a      	strb	r2, [r3, #24]
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	e000e100 	.word	0xe000e100
 8005290:	e000ed00 	.word	0xe000ed00

08005294 <NVIC_EncodePriority>:
 8005294:	b480      	push	{r7}
 8005296:	b089      	sub	sp, #36	; 0x24
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f003 0307 	and.w	r3, r3, #7
 80052a6:	61fb      	str	r3, [r7, #28]
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	f1c3 0307 	rsb	r3, r3, #7
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	bf28      	it	cs
 80052b2:	2304      	movcs	r3, #4
 80052b4:	61bb      	str	r3, [r7, #24]
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	3304      	adds	r3, #4
 80052ba:	2b06      	cmp	r3, #6
 80052bc:	d902      	bls.n	80052c4 <NVIC_EncodePriority+0x30>
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	3b03      	subs	r3, #3
 80052c2:	e000      	b.n	80052c6 <NVIC_EncodePriority+0x32>
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	f04f 32ff 	mov.w	r2, #4294967295
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	fa02 f303 	lsl.w	r3, r2, r3
 80052d2:	43da      	mvns	r2, r3
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	401a      	ands	r2, r3
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	409a      	lsls	r2, r3
 80052dc:	f04f 31ff 	mov.w	r1, #4294967295
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	fa01 f303 	lsl.w	r3, r1, r3
 80052e6:	43d9      	mvns	r1, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	400b      	ands	r3, r1
 80052ec:	4313      	orrs	r3, r2
 80052ee:	4618      	mov	r0, r3
 80052f0:	3724      	adds	r7, #36	; 0x24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
	...

080052fc <__NVIC_SystemReset>:
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	bf00      	nop
 8005306:	4b06      	ldr	r3, [pc, #24]	; (8005320 <__NVIC_SystemReset+0x24>)
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800530e:	4904      	ldr	r1, [pc, #16]	; (8005320 <__NVIC_SystemReset+0x24>)
 8005310:	4b04      	ldr	r3, [pc, #16]	; (8005324 <__NVIC_SystemReset+0x28>)
 8005312:	4313      	orrs	r3, r2
 8005314:	60cb      	str	r3, [r1, #12]
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	bf00      	nop
 800531c:	bf00      	nop
 800531e:	e7fd      	b.n	800531c <__NVIC_SystemReset+0x20>
 8005320:	e000ed00 	.word	0xe000ed00
 8005324:	05fa0004 	.word	0x05fa0004

08005328 <HAL_NVIC_SetPriorityGrouping>:
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff ff35 	bl	80051a0 <__NVIC_SetPriorityGrouping>
 8005336:	bf00      	nop
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_NVIC_SetPriority>:
 800533e:	b580      	push	{r7, lr}
 8005340:	b086      	sub	sp, #24
 8005342:	af00      	add	r7, sp, #0
 8005344:	4603      	mov	r3, r0
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	607a      	str	r2, [r7, #4]
 800534a:	73fb      	strb	r3, [r7, #15]
 800534c:	2300      	movs	r3, #0
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	f7ff ff4a 	bl	80051e8 <__NVIC_GetPriorityGrouping>
 8005354:	6178      	str	r0, [r7, #20]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	6978      	ldr	r0, [r7, #20]
 800535c:	f7ff ff9a 	bl	8005294 <NVIC_EncodePriority>
 8005360:	4602      	mov	r2, r0
 8005362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005366:	4611      	mov	r1, r2
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff ff69 	bl	8005240 <__NVIC_SetPriority>
 800536e:	bf00      	nop
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_NVIC_EnableIRQ>:
 8005376:	b580      	push	{r7, lr}
 8005378:	b082      	sub	sp, #8
 800537a:	af00      	add	r7, sp, #0
 800537c:	4603      	mov	r3, r0
 800537e:	71fb      	strb	r3, [r7, #7]
 8005380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff ff3d 	bl	8005204 <__NVIC_EnableIRQ>
 800538a:	bf00      	nop
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <HAL_NVIC_SystemReset>:
 8005392:	b580      	push	{r7, lr}
 8005394:	af00      	add	r7, sp, #0
 8005396:	f7ff ffb1 	bl	80052fc <__NVIC_SystemReset>
	...

0800539c <HAL_DMA_Init>:
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	2300      	movs	r3, #0
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	f7ff fad8 	bl	800495c <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <HAL_DMA_Init+0x1c>
 80053b4:	2301      	movs	r3, #1
 80053b6:	e099      	b.n	80054ec <HAL_DMA_Init+0x150>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0201 	bic.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	e00f      	b.n	80053fa <HAL_DMA_Init+0x5e>
 80053da:	f7ff fabf 	bl	800495c <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b05      	cmp	r3, #5
 80053e6:	d908      	bls.n	80053fa <HAL_DMA_Init+0x5e>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2220      	movs	r2, #32
 80053ec:	655a      	str	r2, [r3, #84]	; 0x54
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2203      	movs	r2, #3
 80053f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80053f6:	2303      	movs	r3, #3
 80053f8:	e078      	b.n	80054ec <HAL_DMA_Init+0x150>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e8      	bne.n	80053da <HAL_DMA_Init+0x3e>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	617b      	str	r3, [r7, #20]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4b38      	ldr	r3, [pc, #224]	; (80054f4 <HAL_DMA_Init+0x158>)
 8005414:	4013      	ands	r3, r2
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	431a      	orrs	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	431a      	orrs	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	431a      	orrs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	431a      	orrs	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	4313      	orrs	r3, r2
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	2b04      	cmp	r3, #4
 8005452:	d107      	bne.n	8005464 <HAL_DMA_Init+0xc8>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545c:	4313      	orrs	r3, r2
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	617b      	str	r3, [r7, #20]
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f023 0307 	bic.w	r3, r3, #7
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	4313      	orrs	r3, r2
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	2b04      	cmp	r3, #4
 800548c:	d117      	bne.n	80054be <HAL_DMA_Init+0x122>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	4313      	orrs	r3, r2
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00e      	beq.n	80054be <HAL_DMA_Init+0x122>
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fa6f 	bl	8005984 <DMA_CheckFifoParam>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d008      	beq.n	80054be <HAL_DMA_Init+0x122>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2240      	movs	r2, #64	; 0x40
 80054b0:	655a      	str	r2, [r3, #84]	; 0x54
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80054ba:	2301      	movs	r3, #1
 80054bc:	e016      	b.n	80054ec <HAL_DMA_Init+0x150>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	615a      	str	r2, [r3, #20]
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fa26 	bl	8005918 <DMA_CalcBaseAndBitshift>
 80054cc:	4603      	mov	r3, r0
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d4:	223f      	movs	r2, #63	; 0x3f
 80054d6:	409a      	lsls	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	609a      	str	r2, [r3, #8]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	655a      	str	r2, [r3, #84]	; 0x54
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80054ea:	2300      	movs	r3, #0
 80054ec:	4618      	mov	r0, r3
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	f010803f 	.word	0xf010803f

080054f8 <HAL_DMA_Start_IT>:
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
 8005504:	603b      	str	r3, [r7, #0]
 8005506:	2300      	movs	r3, #0
 8005508:	75fb      	strb	r3, [r7, #23]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005516:	2b01      	cmp	r3, #1
 8005518:	d101      	bne.n	800551e <HAL_DMA_Start_IT+0x26>
 800551a:	2302      	movs	r3, #2
 800551c:	e040      	b.n	80055a0 <HAL_DMA_Start_IT+0xa8>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b01      	cmp	r3, #1
 8005530:	d12f      	bne.n	8005592 <HAL_DMA_Start_IT+0x9a>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2202      	movs	r2, #2
 8005536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	655a      	str	r2, [r3, #84]	; 0x54
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	68b9      	ldr	r1, [r7, #8]
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f9b8 	bl	80058bc <DMA_SetConfig>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005550:	223f      	movs	r2, #63	; 0x3f
 8005552:	409a      	lsls	r2, r3
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	609a      	str	r2, [r3, #8]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0216 	orr.w	r2, r2, #22
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556c:	2b00      	cmp	r3, #0
 800556e:	d007      	beq.n	8005580 <HAL_DMA_Start_IT+0x88>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0208 	orr.w	r2, r2, #8
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0201 	orr.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	e005      	b.n	800559e <HAL_DMA_Start_IT+0xa6>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800559a:	2302      	movs	r3, #2
 800559c:	75fb      	strb	r3, [r7, #23]
 800559e:	7dfb      	ldrb	r3, [r7, #23]
 80055a0:	4618      	mov	r0, r3
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_DMA_IRQHandler>:
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	2300      	movs	r3, #0
 80055b2:	60bb      	str	r3, [r7, #8]
 80055b4:	4b8e      	ldr	r3, [pc, #568]	; (80057f0 <HAL_DMA_IRQHandler+0x248>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a8e      	ldr	r2, [pc, #568]	; (80057f4 <HAL_DMA_IRQHandler+0x24c>)
 80055ba:	fba2 2303 	umull	r2, r3, r2, r3
 80055be:	0a9b      	lsrs	r3, r3, #10
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c6:	613b      	str	r3, [r7, #16]
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d2:	2208      	movs	r2, #8
 80055d4:	409a      	lsls	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4013      	ands	r3, r2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d01a      	beq.n	8005614 <HAL_DMA_IRQHandler+0x6c>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d013      	beq.n	8005614 <HAL_DMA_IRQHandler+0x6c>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0204 	bic.w	r2, r2, #4
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005600:	2208      	movs	r2, #8
 8005602:	409a      	lsls	r2, r3
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	609a      	str	r2, [r3, #8]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560c:	f043 0201 	orr.w	r2, r3, #1
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	655a      	str	r2, [r3, #84]	; 0x54
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005618:	2201      	movs	r2, #1
 800561a:	409a      	lsls	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4013      	ands	r3, r2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d012      	beq.n	800564a <HAL_DMA_IRQHandler+0xa2>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00b      	beq.n	800564a <HAL_DMA_IRQHandler+0xa2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005636:	2201      	movs	r2, #1
 8005638:	409a      	lsls	r2, r3
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	609a      	str	r2, [r3, #8]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005642:	f043 0202 	orr.w	r2, r3, #2
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	655a      	str	r2, [r3, #84]	; 0x54
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800564e:	2204      	movs	r2, #4
 8005650:	409a      	lsls	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4013      	ands	r3, r2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d012      	beq.n	8005680 <HAL_DMA_IRQHandler+0xd8>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00b      	beq.n	8005680 <HAL_DMA_IRQHandler+0xd8>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800566c:	2204      	movs	r2, #4
 800566e:	409a      	lsls	r2, r3
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	609a      	str	r2, [r3, #8]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005678:	f043 0204 	orr.w	r2, r3, #4
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	655a      	str	r2, [r3, #84]	; 0x54
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005684:	2210      	movs	r2, #16
 8005686:	409a      	lsls	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4013      	ands	r3, r2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d043      	beq.n	8005718 <HAL_DMA_IRQHandler+0x170>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b00      	cmp	r3, #0
 800569c:	d03c      	beq.n	8005718 <HAL_DMA_IRQHandler+0x170>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056a2:	2210      	movs	r2, #16
 80056a4:	409a      	lsls	r2, r3
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	609a      	str	r2, [r3, #8]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d018      	beq.n	80056ea <HAL_DMA_IRQHandler+0x142>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d108      	bne.n	80056d8 <HAL_DMA_IRQHandler+0x130>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d024      	beq.n	8005718 <HAL_DMA_IRQHandler+0x170>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	4798      	blx	r3
 80056d6:	e01f      	b.n	8005718 <HAL_DMA_IRQHandler+0x170>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01b      	beq.n	8005718 <HAL_DMA_IRQHandler+0x170>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	4798      	blx	r3
 80056e8:	e016      	b.n	8005718 <HAL_DMA_IRQHandler+0x170>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d107      	bne.n	8005708 <HAL_DMA_IRQHandler+0x160>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0208 	bic.w	r2, r2, #8
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <HAL_DMA_IRQHandler+0x170>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	4798      	blx	r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800571c:	2220      	movs	r2, #32
 800571e:	409a      	lsls	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4013      	ands	r3, r2
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 808f 	beq.w	8005848 <HAL_DMA_IRQHandler+0x2a0>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 8087 	beq.w	8005848 <HAL_DMA_IRQHandler+0x2a0>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573e:	2220      	movs	r2, #32
 8005740:	409a      	lsls	r2, r3
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	609a      	str	r2, [r3, #8]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b05      	cmp	r3, #5
 8005750:	d136      	bne.n	80057c0 <HAL_DMA_IRQHandler+0x218>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0216 	bic.w	r2, r2, #22
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	695a      	ldr	r2, [r3, #20]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005770:	615a      	str	r2, [r3, #20]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	2b00      	cmp	r3, #0
 8005778:	d103      	bne.n	8005782 <HAL_DMA_IRQHandler+0x1da>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800577e:	2b00      	cmp	r3, #0
 8005780:	d007      	beq.n	8005792 <HAL_DMA_IRQHandler+0x1ea>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 0208 	bic.w	r2, r2, #8
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005796:	223f      	movs	r2, #63	; 0x3f
 8005798:	409a      	lsls	r2, r3
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	609a      	str	r2, [r3, #8]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d07e      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x30c>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	4798      	blx	r3
 80057be:	e079      	b.n	80058b4 <HAL_DMA_IRQHandler+0x30c>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d01d      	beq.n	800580a <HAL_DMA_IRQHandler+0x262>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10d      	bne.n	80057f8 <HAL_DMA_IRQHandler+0x250>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d031      	beq.n	8005848 <HAL_DMA_IRQHandler+0x2a0>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	4798      	blx	r3
 80057ec:	e02c      	b.n	8005848 <HAL_DMA_IRQHandler+0x2a0>
 80057ee:	bf00      	nop
 80057f0:	20000014 	.word	0x20000014
 80057f4:	1b4e81b5 	.word	0x1b4e81b5
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d023      	beq.n	8005848 <HAL_DMA_IRQHandler+0x2a0>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	4798      	blx	r3
 8005808:	e01e      	b.n	8005848 <HAL_DMA_IRQHandler+0x2a0>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10f      	bne.n	8005838 <HAL_DMA_IRQHandler+0x290>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0210 	bic.w	r2, r2, #16
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <HAL_DMA_IRQHandler+0x2a0>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	4798      	blx	r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584c:	2b00      	cmp	r3, #0
 800584e:	d032      	beq.n	80058b6 <HAL_DMA_IRQHandler+0x30e>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d022      	beq.n	80058a2 <HAL_DMA_IRQHandler+0x2fa>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2205      	movs	r2, #5
 8005860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 0201 	bic.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	3301      	adds	r3, #1
 8005878:	60bb      	str	r3, [r7, #8]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	429a      	cmp	r2, r3
 800587e:	d307      	bcc.n	8005890 <HAL_DMA_IRQHandler+0x2e8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1f2      	bne.n	8005874 <HAL_DMA_IRQHandler+0x2cc>
 800588e:	e000      	b.n	8005892 <HAL_DMA_IRQHandler+0x2ea>
 8005890:	bf00      	nop
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d005      	beq.n	80058b6 <HAL_DMA_IRQHandler+0x30e>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	4798      	blx	r3
 80058b2:	e000      	b.n	80058b6 <HAL_DMA_IRQHandler+0x30e>
 80058b4:	bf00      	nop
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <DMA_SetConfig>:
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	603b      	str	r3, [r7, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	605a      	str	r2, [r3, #4]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	2b40      	cmp	r3, #64	; 0x40
 80058e8:	d108      	bne.n	80058fc <DMA_SetConfig+0x40>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	609a      	str	r2, [r3, #8]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	60da      	str	r2, [r3, #12]
 80058fa:	e007      	b.n	800590c <DMA_SetConfig+0x50>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	609a      	str	r2, [r3, #8]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	60da      	str	r2, [r3, #12]
 800590c:	bf00      	nop
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <DMA_CalcBaseAndBitshift>:
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	b2db      	uxtb	r3, r3
 8005926:	3b10      	subs	r3, #16
 8005928:	4a14      	ldr	r2, [pc, #80]	; (800597c <DMA_CalcBaseAndBitshift+0x64>)
 800592a:	fba2 2303 	umull	r2, r3, r2, r3
 800592e:	091b      	lsrs	r3, r3, #4
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	4a13      	ldr	r2, [pc, #76]	; (8005980 <DMA_CalcBaseAndBitshift+0x68>)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4413      	add	r3, r2
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2b03      	cmp	r3, #3
 8005944:	d909      	bls.n	800595a <DMA_CalcBaseAndBitshift+0x42>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800594e:	f023 0303 	bic.w	r3, r3, #3
 8005952:	1d1a      	adds	r2, r3, #4
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	659a      	str	r2, [r3, #88]	; 0x58
 8005958:	e007      	b.n	800596a <DMA_CalcBaseAndBitshift+0x52>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005962:	f023 0303 	bic.w	r3, r3, #3
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	6593      	str	r3, [r2, #88]	; 0x58
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596e:	4618      	mov	r0, r3
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	aaaaaaab 	.word	0xaaaaaaab
 8005980:	08014824 	.word	0x08014824

08005984 <DMA_CheckFifoParam>:
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	2300      	movs	r3, #0
 800598e:	73fb      	strb	r3, [r7, #15]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005994:	60bb      	str	r3, [r7, #8]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d11f      	bne.n	80059de <DMA_CheckFifoParam+0x5a>
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	2b03      	cmp	r3, #3
 80059a2:	d856      	bhi.n	8005a52 <DMA_CheckFifoParam+0xce>
 80059a4:	a201      	add	r2, pc, #4	; (adr r2, 80059ac <DMA_CheckFifoParam+0x28>)
 80059a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059aa:	bf00      	nop
 80059ac:	080059bd 	.word	0x080059bd
 80059b0:	080059cf 	.word	0x080059cf
 80059b4:	080059bd 	.word	0x080059bd
 80059b8:	08005a53 	.word	0x08005a53
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d046      	beq.n	8005a56 <DMA_CheckFifoParam+0xd2>
 80059c8:	2301      	movs	r3, #1
 80059ca:	73fb      	strb	r3, [r7, #15]
 80059cc:	e043      	b.n	8005a56 <DMA_CheckFifoParam+0xd2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059d6:	d140      	bne.n	8005a5a <DMA_CheckFifoParam+0xd6>
 80059d8:	2301      	movs	r3, #1
 80059da:	73fb      	strb	r3, [r7, #15]
 80059dc:	e03d      	b.n	8005a5a <DMA_CheckFifoParam+0xd6>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059e6:	d121      	bne.n	8005a2c <DMA_CheckFifoParam+0xa8>
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d837      	bhi.n	8005a5e <DMA_CheckFifoParam+0xda>
 80059ee:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <DMA_CheckFifoParam+0x70>)
 80059f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f4:	08005a05 	.word	0x08005a05
 80059f8:	08005a0b 	.word	0x08005a0b
 80059fc:	08005a05 	.word	0x08005a05
 8005a00:	08005a1d 	.word	0x08005a1d
 8005a04:	2301      	movs	r3, #1
 8005a06:	73fb      	strb	r3, [r7, #15]
 8005a08:	e030      	b.n	8005a6c <DMA_CheckFifoParam+0xe8>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d025      	beq.n	8005a62 <DMA_CheckFifoParam+0xde>
 8005a16:	2301      	movs	r3, #1
 8005a18:	73fb      	strb	r3, [r7, #15]
 8005a1a:	e022      	b.n	8005a62 <DMA_CheckFifoParam+0xde>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a24:	d11f      	bne.n	8005a66 <DMA_CheckFifoParam+0xe2>
 8005a26:	2301      	movs	r3, #1
 8005a28:	73fb      	strb	r3, [r7, #15]
 8005a2a:	e01c      	b.n	8005a66 <DMA_CheckFifoParam+0xe2>
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d903      	bls.n	8005a3a <DMA_CheckFifoParam+0xb6>
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d003      	beq.n	8005a40 <DMA_CheckFifoParam+0xbc>
 8005a38:	e018      	b.n	8005a6c <DMA_CheckFifoParam+0xe8>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	73fb      	strb	r3, [r7, #15]
 8005a3e:	e015      	b.n	8005a6c <DMA_CheckFifoParam+0xe8>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00e      	beq.n	8005a6a <DMA_CheckFifoParam+0xe6>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	73fb      	strb	r3, [r7, #15]
 8005a50:	e00b      	b.n	8005a6a <DMA_CheckFifoParam+0xe6>
 8005a52:	bf00      	nop
 8005a54:	e00a      	b.n	8005a6c <DMA_CheckFifoParam+0xe8>
 8005a56:	bf00      	nop
 8005a58:	e008      	b.n	8005a6c <DMA_CheckFifoParam+0xe8>
 8005a5a:	bf00      	nop
 8005a5c:	e006      	b.n	8005a6c <DMA_CheckFifoParam+0xe8>
 8005a5e:	bf00      	nop
 8005a60:	e004      	b.n	8005a6c <DMA_CheckFifoParam+0xe8>
 8005a62:	bf00      	nop
 8005a64:	e002      	b.n	8005a6c <DMA_CheckFifoParam+0xe8>
 8005a66:	bf00      	nop
 8005a68:	e000      	b.n	8005a6c <DMA_CheckFifoParam+0xe8>
 8005a6a:	bf00      	nop
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop

08005a7c <HAL_GPIO_Init>:
 8005a7c:	b480      	push	{r7}
 8005a7e:	b089      	sub	sp, #36	; 0x24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
 8005a86:	2300      	movs	r3, #0
 8005a88:	617b      	str	r3, [r7, #20]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	613b      	str	r3, [r7, #16]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	2300      	movs	r3, #0
 8005a94:	61fb      	str	r3, [r7, #28]
 8005a96:	e159      	b.n	8005d4c <HAL_GPIO_Init+0x2d0>
 8005a98:	2201      	movs	r2, #1
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	f040 8148 	bne.w	8005d46 <HAL_GPIO_Init+0x2ca>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d005      	beq.n	8005ace <HAL_GPIO_Init+0x52>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d130      	bne.n	8005b30 <HAL_GPIO_Init+0xb4>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	61bb      	str	r3, [r7, #24]
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	2203      	movs	r2, #3
 8005ada:	fa02 f303 	lsl.w	r3, r2, r3
 8005ade:	43db      	mvns	r3, r3
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	61bb      	str	r3, [r7, #24]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	fa02 f303 	lsl.w	r3, r2, r3
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	61bb      	str	r3, [r7, #24]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	609a      	str	r2, [r3, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	61bb      	str	r3, [r7, #24]
 8005b04:	2201      	movs	r2, #1
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	4013      	ands	r3, r2
 8005b12:	61bb      	str	r3, [r7, #24]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	091b      	lsrs	r3, r3, #4
 8005b1a:	f003 0201 	and.w	r2, r3, #1
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	fa02 f303 	lsl.w	r3, r2, r3
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	61bb      	str	r3, [r7, #24]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	605a      	str	r2, [r3, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f003 0303 	and.w	r3, r3, #3
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d017      	beq.n	8005b6c <HAL_GPIO_Init+0xf0>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	61bb      	str	r3, [r7, #24]
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	2203      	movs	r2, #3
 8005b48:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4c:	43db      	mvns	r3, r3
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	4013      	ands	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	61bb      	str	r3, [r7, #24]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	60da      	str	r2, [r3, #12]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f003 0303 	and.w	r3, r3, #3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d123      	bne.n	8005bc0 <HAL_GPIO_Init+0x144>
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	08da      	lsrs	r2, r3, #3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3208      	adds	r2, #8
 8005b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	f003 0307 	and.w	r3, r3, #7
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	220f      	movs	r2, #15
 8005b90:	fa02 f303 	lsl.w	r3, r2, r3
 8005b94:	43db      	mvns	r3, r3
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	61bb      	str	r3, [r7, #24]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	691a      	ldr	r2, [r3, #16]
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	61bb      	str	r3, [r7, #24]
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	08da      	lsrs	r2, r3, #3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	3208      	adds	r2, #8
 8005bba:	69b9      	ldr	r1, [r7, #24]
 8005bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	61bb      	str	r3, [r7, #24]
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	2203      	movs	r2, #3
 8005bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd0:	43db      	mvns	r3, r3
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	61bb      	str	r3, [r7, #24]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f003 0203 	and.w	r2, r3, #3
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	fa02 f303 	lsl.w	r3, r2, r3
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	61bb      	str	r3, [r7, #24]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 80a2 	beq.w	8005d46 <HAL_GPIO_Init+0x2ca>
 8005c02:	2300      	movs	r3, #0
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	4b57      	ldr	r3, [pc, #348]	; (8005d64 <HAL_GPIO_Init+0x2e8>)
 8005c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0a:	4a56      	ldr	r2, [pc, #344]	; (8005d64 <HAL_GPIO_Init+0x2e8>)
 8005c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c10:	6453      	str	r3, [r2, #68]	; 0x44
 8005c12:	4b54      	ldr	r3, [pc, #336]	; (8005d64 <HAL_GPIO_Init+0x2e8>)
 8005c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4a52      	ldr	r2, [pc, #328]	; (8005d68 <HAL_GPIO_Init+0x2ec>)
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	089b      	lsrs	r3, r3, #2
 8005c24:	3302      	adds	r3, #2
 8005c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c2a:	61bb      	str	r3, [r7, #24]
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	f003 0303 	and.w	r3, r3, #3
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	220f      	movs	r2, #15
 8005c36:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3a:	43db      	mvns	r3, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a49      	ldr	r2, [pc, #292]	; (8005d6c <HAL_GPIO_Init+0x2f0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d019      	beq.n	8005c7e <HAL_GPIO_Init+0x202>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a48      	ldr	r2, [pc, #288]	; (8005d70 <HAL_GPIO_Init+0x2f4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d013      	beq.n	8005c7a <HAL_GPIO_Init+0x1fe>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a47      	ldr	r2, [pc, #284]	; (8005d74 <HAL_GPIO_Init+0x2f8>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00d      	beq.n	8005c76 <HAL_GPIO_Init+0x1fa>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a46      	ldr	r2, [pc, #280]	; (8005d78 <HAL_GPIO_Init+0x2fc>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d007      	beq.n	8005c72 <HAL_GPIO_Init+0x1f6>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a45      	ldr	r2, [pc, #276]	; (8005d7c <HAL_GPIO_Init+0x300>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d101      	bne.n	8005c6e <HAL_GPIO_Init+0x1f2>
 8005c6a:	2304      	movs	r3, #4
 8005c6c:	e008      	b.n	8005c80 <HAL_GPIO_Init+0x204>
 8005c6e:	2307      	movs	r3, #7
 8005c70:	e006      	b.n	8005c80 <HAL_GPIO_Init+0x204>
 8005c72:	2303      	movs	r3, #3
 8005c74:	e004      	b.n	8005c80 <HAL_GPIO_Init+0x204>
 8005c76:	2302      	movs	r3, #2
 8005c78:	e002      	b.n	8005c80 <HAL_GPIO_Init+0x204>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e000      	b.n	8005c80 <HAL_GPIO_Init+0x204>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	69fa      	ldr	r2, [r7, #28]
 8005c82:	f002 0203 	and.w	r2, r2, #3
 8005c86:	0092      	lsls	r2, r2, #2
 8005c88:	4093      	lsls	r3, r2
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	61bb      	str	r3, [r7, #24]
 8005c90:	4935      	ldr	r1, [pc, #212]	; (8005d68 <HAL_GPIO_Init+0x2ec>)
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	089b      	lsrs	r3, r3, #2
 8005c96:	3302      	adds	r3, #2
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005c9e:	4b38      	ldr	r3, [pc, #224]	; (8005d80 <HAL_GPIO_Init+0x304>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	61bb      	str	r3, [r7, #24]
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	4013      	ands	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_GPIO_Init+0x246>
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
 8005cc2:	4a2f      	ldr	r2, [pc, #188]	; (8005d80 <HAL_GPIO_Init+0x304>)
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	6093      	str	r3, [r2, #8]
 8005cc8:	4b2d      	ldr	r3, [pc, #180]	; (8005d80 <HAL_GPIO_Init+0x304>)
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	61bb      	str	r3, [r7, #24]
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	61bb      	str	r3, [r7, #24]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <HAL_GPIO_Init+0x270>
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	61bb      	str	r3, [r7, #24]
 8005cec:	4a24      	ldr	r2, [pc, #144]	; (8005d80 <HAL_GPIO_Init+0x304>)
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	60d3      	str	r3, [r2, #12]
 8005cf2:	4b23      	ldr	r3, [pc, #140]	; (8005d80 <HAL_GPIO_Init+0x304>)
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	61bb      	str	r3, [r7, #24]
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	43db      	mvns	r3, r3
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	61bb      	str	r3, [r7, #24]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_GPIO_Init+0x29a>
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	61bb      	str	r3, [r7, #24]
 8005d16:	4a1a      	ldr	r2, [pc, #104]	; (8005d80 <HAL_GPIO_Init+0x304>)
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	6053      	str	r3, [r2, #4]
 8005d1c:	4b18      	ldr	r3, [pc, #96]	; (8005d80 <HAL_GPIO_Init+0x304>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	61bb      	str	r3, [r7, #24]
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	43db      	mvns	r3, r3
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	61bb      	str	r3, [r7, #24]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d003      	beq.n	8005d40 <HAL_GPIO_Init+0x2c4>
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
 8005d40:	4a0f      	ldr	r2, [pc, #60]	; (8005d80 <HAL_GPIO_Init+0x304>)
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	6013      	str	r3, [r2, #0]
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	61fb      	str	r3, [r7, #28]
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	2b0f      	cmp	r3, #15
 8005d50:	f67f aea2 	bls.w	8005a98 <HAL_GPIO_Init+0x1c>
 8005d54:	bf00      	nop
 8005d56:	bf00      	nop
 8005d58:	3724      	adds	r7, #36	; 0x24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	40023800 	.word	0x40023800
 8005d68:	40013800 	.word	0x40013800
 8005d6c:	40020000 	.word	0x40020000
 8005d70:	40020400 	.word	0x40020400
 8005d74:	40020800 	.word	0x40020800
 8005d78:	40020c00 	.word	0x40020c00
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	40013c00 	.word	0x40013c00

08005d84 <HAL_GPIO_ReadPin>:
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	807b      	strh	r3, [r7, #2]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	691a      	ldr	r2, [r3, #16]
 8005d94:	887b      	ldrh	r3, [r7, #2]
 8005d96:	4013      	ands	r3, r2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <HAL_GPIO_ReadPin+0x1e>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	73fb      	strb	r3, [r7, #15]
 8005da0:	e001      	b.n	8005da6 <HAL_GPIO_ReadPin+0x22>
 8005da2:	2300      	movs	r3, #0
 8005da4:	73fb      	strb	r3, [r7, #15]
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_GPIO_WritePin>:
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	807b      	strh	r3, [r7, #2]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	707b      	strb	r3, [r7, #1]
 8005dc4:	787b      	ldrb	r3, [r7, #1]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <HAL_GPIO_WritePin+0x1e>
 8005dca:	887a      	ldrh	r2, [r7, #2]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	619a      	str	r2, [r3, #24]
 8005dd0:	e003      	b.n	8005dda <HAL_GPIO_WritePin+0x26>
 8005dd2:	887b      	ldrh	r3, [r7, #2]
 8005dd4:	041a      	lsls	r2, r3, #16
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	619a      	str	r2, [r3, #24]
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <HAL_GPIO_TogglePin>:
 8005de6:	b480      	push	{r7}
 8005de8:	b085      	sub	sp, #20
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	460b      	mov	r3, r1
 8005df0:	807b      	strh	r3, [r7, #2]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	887a      	ldrh	r2, [r7, #2]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	041a      	lsls	r2, r3, #16
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	43d9      	mvns	r1, r3
 8005e04:	887b      	ldrh	r3, [r7, #2]
 8005e06:	400b      	ands	r3, r1
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	619a      	str	r2, [r3, #24]
 8005e0e:	bf00      	nop
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
	...

08005e1c <HAL_GPIO_EXTI_IRQHandler>:
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	4603      	mov	r3, r0
 8005e24:	80fb      	strh	r3, [r7, #6]
 8005e26:	4b08      	ldr	r3, [pc, #32]	; (8005e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e28:	695a      	ldr	r2, [r3, #20]
 8005e2a:	88fb      	ldrh	r3, [r7, #6]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d006      	beq.n	8005e40 <HAL_GPIO_EXTI_IRQHandler+0x24>
 8005e32:	4a05      	ldr	r2, [pc, #20]	; (8005e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e34:	88fb      	ldrh	r3, [r7, #6]
 8005e36:	6153      	str	r3, [r2, #20]
 8005e38:	88fb      	ldrh	r3, [r7, #6]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 f806 	bl	8005e4c <HAL_GPIO_EXTI_Callback>
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	40013c00 	.word	0x40013c00

08005e4c <HAL_GPIO_EXTI_Callback>:
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	4603      	mov	r3, r0
 8005e54:	80fb      	strh	r3, [r7, #6]
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
	...

08005e64 <HAL_I2C_Init>:
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_I2C_Init+0x12>
 8005e72:	2301      	movs	r3, #1
 8005e74:	e12b      	b.n	80060ce <HAL_I2C_Init+0x26a>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d106      	bne.n	8005e90 <HAL_I2C_Init+0x2c>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7fc f8b2 	bl	8001ff4 <HAL_I2C_MspInit>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2224      	movs	r2, #36	; 0x24
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0201 	bic.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ec6:	601a      	str	r2, [r3, #0]
 8005ec8:	f003 faec 	bl	80094a4 <HAL_RCC_GetPCLK1Freq>
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	4a81      	ldr	r2, [pc, #516]	; (80060d8 <HAL_I2C_Init+0x274>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d807      	bhi.n	8005ee8 <HAL_I2C_Init+0x84>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4a80      	ldr	r2, [pc, #512]	; (80060dc <HAL_I2C_Init+0x278>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	bf94      	ite	ls
 8005ee0:	2301      	movls	r3, #1
 8005ee2:	2300      	movhi	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	e006      	b.n	8005ef6 <HAL_I2C_Init+0x92>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4a7d      	ldr	r2, [pc, #500]	; (80060e0 <HAL_I2C_Init+0x27c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	bf94      	ite	ls
 8005ef0:	2301      	movls	r3, #1
 8005ef2:	2300      	movhi	r3, #0
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <HAL_I2C_Init+0x9a>
 8005efa:	2301      	movs	r3, #1
 8005efc:	e0e7      	b.n	80060ce <HAL_I2C_Init+0x26a>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4a78      	ldr	r2, [pc, #480]	; (80060e4 <HAL_I2C_Init+0x280>)
 8005f02:	fba2 2303 	umull	r2, r3, r2, r3
 8005f06:	0c9b      	lsrs	r3, r3, #18
 8005f08:	60bb      	str	r3, [r7, #8]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	605a      	str	r2, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	4a6a      	ldr	r2, [pc, #424]	; (80060d8 <HAL_I2C_Init+0x274>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d802      	bhi.n	8005f38 <HAL_I2C_Init+0xd4>
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	3301      	adds	r3, #1
 8005f36:	e009      	b.n	8005f4c <HAL_I2C_Init+0xe8>
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005f3e:	fb02 f303 	mul.w	r3, r2, r3
 8005f42:	4a69      	ldr	r2, [pc, #420]	; (80060e8 <HAL_I2C_Init+0x284>)
 8005f44:	fba2 2303 	umull	r2, r3, r2, r3
 8005f48:	099b      	lsrs	r3, r3, #6
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6812      	ldr	r2, [r2, #0]
 8005f50:	430b      	orrs	r3, r1
 8005f52:	6213      	str	r3, [r2, #32]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005f5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	495c      	ldr	r1, [pc, #368]	; (80060d8 <HAL_I2C_Init+0x274>)
 8005f68:	428b      	cmp	r3, r1
 8005f6a:	d819      	bhi.n	8005fa0 <HAL_I2C_Init+0x13c>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	1e59      	subs	r1, r3, #1
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f7a:	1c59      	adds	r1, r3, #1
 8005f7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005f80:	400b      	ands	r3, r1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <HAL_I2C_Init+0x138>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	1e59      	subs	r1, r3, #1
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f94:	3301      	adds	r3, #1
 8005f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f9a:	e051      	b.n	8006040 <HAL_I2C_Init+0x1dc>
 8005f9c:	2304      	movs	r3, #4
 8005f9e:	e04f      	b.n	8006040 <HAL_I2C_Init+0x1dc>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d111      	bne.n	8005fcc <HAL_I2C_Init+0x168>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	1e58      	subs	r0, r3, #1
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6859      	ldr	r1, [r3, #4]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	440b      	add	r3, r1
 8005fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fba:	3301      	adds	r3, #1
 8005fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	bf0c      	ite	eq
 8005fc4:	2301      	moveq	r3, #1
 8005fc6:	2300      	movne	r3, #0
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	e012      	b.n	8005ff2 <HAL_I2C_Init+0x18e>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	1e58      	subs	r0, r3, #1
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6859      	ldr	r1, [r3, #4]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	440b      	add	r3, r1
 8005fda:	0099      	lsls	r1, r3, #2
 8005fdc:	440b      	add	r3, r1
 8005fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	bf0c      	ite	eq
 8005fec:	2301      	moveq	r3, #1
 8005fee:	2300      	movne	r3, #0
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <HAL_I2C_Init+0x196>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e022      	b.n	8006040 <HAL_I2C_Init+0x1dc>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10e      	bne.n	8006020 <HAL_I2C_Init+0x1bc>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	1e58      	subs	r0, r3, #1
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6859      	ldr	r1, [r3, #4]
 800600a:	460b      	mov	r3, r1
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	440b      	add	r3, r1
 8006010:	fbb0 f3f3 	udiv	r3, r0, r3
 8006014:	3301      	adds	r3, #1
 8006016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800601a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800601e:	e00f      	b.n	8006040 <HAL_I2C_Init+0x1dc>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	1e58      	subs	r0, r3, #1
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6859      	ldr	r1, [r3, #4]
 8006028:	460b      	mov	r3, r1
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	0099      	lsls	r1, r3, #2
 8006030:	440b      	add	r3, r1
 8006032:	fbb0 f3f3 	udiv	r3, r0, r3
 8006036:	3301      	adds	r3, #1
 8006038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800603c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	6809      	ldr	r1, [r1, #0]
 8006044:	4313      	orrs	r3, r2
 8006046:	61cb      	str	r3, [r1, #28]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	69da      	ldr	r2, [r3, #28]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	431a      	orrs	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800606e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6911      	ldr	r1, [r2, #16]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	68d2      	ldr	r2, [r2, #12]
 800607a:	4311      	orrs	r1, r2
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6812      	ldr	r2, [r2, #0]
 8006080:	430b      	orrs	r3, r1
 8006082:	6093      	str	r3, [r2, #8]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695a      	ldr	r2, [r3, #20]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	60da      	str	r2, [r3, #12]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0201 	orr.w	r2, r2, #1
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	641a      	str	r2, [r3, #64]	; 0x40
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	631a      	str	r2, [r3, #48]	; 0x30
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060cc:	2300      	movs	r3, #0
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	000186a0 	.word	0x000186a0
 80060dc:	001e847f 	.word	0x001e847f
 80060e0:	003d08ff 	.word	0x003d08ff
 80060e4:	431bde83 	.word	0x431bde83
 80060e8:	10624dd3 	.word	0x10624dd3

080060ec <HAL_I2C_Master_Transmit>:
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b088      	sub	sp, #32
 80060f0:	af02      	add	r7, sp, #8
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	607a      	str	r2, [r7, #4]
 80060f6:	461a      	mov	r2, r3
 80060f8:	460b      	mov	r3, r1
 80060fa:	817b      	strh	r3, [r7, #10]
 80060fc:	4613      	mov	r3, r2
 80060fe:	813b      	strh	r3, [r7, #8]
 8006100:	f7fe fc2c 	bl	800495c <HAL_GetTick>
 8006104:	6178      	str	r0, [r7, #20]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b20      	cmp	r3, #32
 8006110:	f040 80e0 	bne.w	80062d4 <HAL_I2C_Master_Transmit+0x1e8>
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	2319      	movs	r3, #25
 800611a:	2201      	movs	r2, #1
 800611c:	4970      	ldr	r1, [pc, #448]	; (80062e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f001 f8f6 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <HAL_I2C_Master_Transmit+0x42>
 800612a:	2302      	movs	r3, #2
 800612c:	e0d3      	b.n	80062d6 <HAL_I2C_Master_Transmit+0x1ea>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006134:	2b01      	cmp	r3, #1
 8006136:	d101      	bne.n	800613c <HAL_I2C_Master_Transmit+0x50>
 8006138:	2302      	movs	r3, #2
 800613a:	e0cc      	b.n	80062d6 <HAL_I2C_Master_Transmit+0x1ea>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b01      	cmp	r3, #1
 8006150:	d007      	beq.n	8006162 <HAL_I2C_Master_Transmit+0x76>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 0201 	orr.w	r2, r2, #1
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2221      	movs	r2, #33	; 0x21
 8006176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2210      	movs	r2, #16
 800617e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	641a      	str	r2, [r3, #64]	; 0x40
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	625a      	str	r2, [r3, #36]	; 0x24
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	893a      	ldrh	r2, [r7, #8]
 8006192:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006198:	b29a      	uxth	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	851a      	strh	r2, [r3, #40]	; 0x28
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4a50      	ldr	r2, [pc, #320]	; (80062e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80061a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80061a4:	8979      	ldrh	r1, [r7, #10]
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	6a3a      	ldr	r2, [r7, #32]
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 fde2 	bl	8006d74 <I2C_MasterRequestWrite>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <HAL_I2C_Master_Transmit+0xce>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e08d      	b.n	80062d6 <HAL_I2C_Master_Transmit+0x1ea>
 80061ba:	2300      	movs	r3, #0
 80061bc:	613b      	str	r3, [r7, #16]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	613b      	str	r3, [r7, #16]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	e066      	b.n	80062a0 <HAL_I2C_Master_Transmit+0x1b4>
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	6a39      	ldr	r1, [r7, #32]
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f001 f970 	bl	80074bc <I2C_WaitOnTXEFlagUntilTimeout>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00d      	beq.n	80061fe <HAL_I2C_Master_Transmit+0x112>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	d107      	bne.n	80061fa <HAL_I2C_Master_Transmit+0x10e>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	2301      	movs	r3, #1
 80061fc:	e06b      	b.n	80062d6 <HAL_I2C_Master_Transmit+0x1ea>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	781a      	ldrb	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	611a      	str	r2, [r3, #16]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	625a      	str	r2, [r3, #36]	; 0x24
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006218:	b29b      	uxth	r3, r3
 800621a:	3b01      	subs	r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006226:	3b01      	subs	r3, #1
 8006228:	b29a      	uxth	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	851a      	strh	r2, [r3, #40]	; 0x28
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b04      	cmp	r3, #4
 800623a:	d11b      	bne.n	8006274 <HAL_I2C_Master_Transmit+0x188>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006240:	2b00      	cmp	r3, #0
 8006242:	d017      	beq.n	8006274 <HAL_I2C_Master_Transmit+0x188>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	781a      	ldrb	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	611a      	str	r2, [r3, #16]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	625a      	str	r2, [r3, #36]	; 0x24
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625e:	b29b      	uxth	r3, r3
 8006260:	3b01      	subs	r3, #1
 8006262:	b29a      	uxth	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800626c:	3b01      	subs	r3, #1
 800626e:	b29a      	uxth	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	851a      	strh	r2, [r3, #40]	; 0x28
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	6a39      	ldr	r1, [r7, #32]
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f001 f960 	bl	800753e <I2C_WaitOnBTFFlagUntilTimeout>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00d      	beq.n	80062a0 <HAL_I2C_Master_Transmit+0x1b4>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006288:	2b04      	cmp	r3, #4
 800628a:	d107      	bne.n	800629c <HAL_I2C_Master_Transmit+0x1b0>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	2301      	movs	r3, #1
 800629e:	e01a      	b.n	80062d6 <HAL_I2C_Master_Transmit+0x1ea>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d194      	bne.n	80061d2 <HAL_I2C_Master_Transmit+0xe6>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80062d0:	2300      	movs	r3, #0
 80062d2:	e000      	b.n	80062d6 <HAL_I2C_Master_Transmit+0x1ea>
 80062d4:	2302      	movs	r3, #2
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	00100002 	.word	0x00100002
 80062e4:	ffff0000 	.word	0xffff0000

080062e8 <HAL_I2C_Master_Receive>:
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08c      	sub	sp, #48	; 0x30
 80062ec:	af02      	add	r7, sp, #8
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	607a      	str	r2, [r7, #4]
 80062f2:	461a      	mov	r2, r3
 80062f4:	460b      	mov	r3, r1
 80062f6:	817b      	strh	r3, [r7, #10]
 80062f8:	4613      	mov	r3, r2
 80062fa:	813b      	strh	r3, [r7, #8]
 80062fc:	f7fe fb2e 	bl	800495c <HAL_GetTick>
 8006300:	6278      	str	r0, [r7, #36]	; 0x24
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b20      	cmp	r3, #32
 800630c:	f040 820b 	bne.w	8006726 <HAL_I2C_Master_Receive+0x43e>
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	2319      	movs	r3, #25
 8006316:	2201      	movs	r2, #1
 8006318:	497c      	ldr	r1, [pc, #496]	; (800650c <HAL_I2C_Master_Receive+0x224>)
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f000 fff8 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <HAL_I2C_Master_Receive+0x42>
 8006326:	2302      	movs	r3, #2
 8006328:	e1fe      	b.n	8006728 <HAL_I2C_Master_Receive+0x440>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_I2C_Master_Receive+0x50>
 8006334:	2302      	movs	r3, #2
 8006336:	e1f7      	b.n	8006728 <HAL_I2C_Master_Receive+0x440>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b01      	cmp	r3, #1
 800634c:	d007      	beq.n	800635e <HAL_I2C_Master_Receive+0x76>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f042 0201 	orr.w	r2, r2, #1
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2222      	movs	r2, #34	; 0x22
 8006372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2210      	movs	r2, #16
 800637a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	641a      	str	r2, [r3, #64]	; 0x40
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	625a      	str	r2, [r3, #36]	; 0x24
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	893a      	ldrh	r2, [r7, #8]
 800638e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006394:	b29a      	uxth	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	851a      	strh	r2, [r3, #40]	; 0x28
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4a5c      	ldr	r2, [pc, #368]	; (8006510 <HAL_I2C_Master_Receive+0x228>)
 800639e:	62da      	str	r2, [r3, #44]	; 0x2c
 80063a0:	8979      	ldrh	r1, [r7, #10]
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 fd66 	bl	8006e78 <I2C_MasterRequestRead>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <HAL_I2C_Master_Receive+0xce>
 80063b2:	2301      	movs	r3, #1
 80063b4:	e1b8      	b.n	8006728 <HAL_I2C_Master_Receive+0x440>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d113      	bne.n	80063e6 <HAL_I2C_Master_Receive+0xfe>
 80063be:	2300      	movs	r3, #0
 80063c0:	623b      	str	r3, [r7, #32]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	623b      	str	r3, [r7, #32]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	623b      	str	r3, [r7, #32]
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	e18c      	b.n	8006700 <HAL_I2C_Master_Receive+0x418>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d11b      	bne.n	8006426 <HAL_I2C_Master_Receive+0x13e>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	2300      	movs	r3, #0
 8006400:	61fb      	str	r3, [r7, #28]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	61fb      	str	r3, [r7, #28]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	61fb      	str	r3, [r7, #28]
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	e16c      	b.n	8006700 <HAL_I2C_Master_Receive+0x418>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800642a:	2b02      	cmp	r3, #2
 800642c:	d11b      	bne.n	8006466 <HAL_I2C_Master_Receive+0x17e>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	2300      	movs	r3, #0
 8006450:	61bb      	str	r3, [r7, #24]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	61bb      	str	r3, [r7, #24]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	61bb      	str	r3, [r7, #24]
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	e14c      	b.n	8006700 <HAL_I2C_Master_Receive+0x418>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	2300      	movs	r3, #0
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	617b      	str	r3, [r7, #20]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	e138      	b.n	8006700 <HAL_I2C_Master_Receive+0x418>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006492:	2b03      	cmp	r3, #3
 8006494:	f200 80f1 	bhi.w	800667a <HAL_I2C_Master_Receive+0x392>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649c:	2b01      	cmp	r3, #1
 800649e:	d123      	bne.n	80064e8 <HAL_I2C_Master_Receive+0x200>
 80064a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f001 f88b 	bl	80075c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <HAL_I2C_Master_Receive+0x1cc>
 80064b0:	2301      	movs	r3, #1
 80064b2:	e139      	b.n	8006728 <HAL_I2C_Master_Receive+0x440>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	691a      	ldr	r2, [r3, #16]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	701a      	strb	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	625a      	str	r2, [r3, #36]	; 0x24
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	851a      	strh	r2, [r3, #40]	; 0x28
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064dc:	b29b      	uxth	r3, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064e6:	e10b      	b.n	8006700 <HAL_I2C_Master_Receive+0x418>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d14e      	bne.n	800658e <HAL_I2C_Master_Receive+0x2a6>
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f6:	2200      	movs	r2, #0
 80064f8:	4906      	ldr	r1, [pc, #24]	; (8006514 <HAL_I2C_Master_Receive+0x22c>)
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 ff08 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d008      	beq.n	8006518 <HAL_I2C_Master_Receive+0x230>
 8006506:	2301      	movs	r3, #1
 8006508:	e10e      	b.n	8006728 <HAL_I2C_Master_Receive+0x440>
 800650a:	bf00      	nop
 800650c:	00100002 	.word	0x00100002
 8006510:	ffff0000 	.word	0xffff0000
 8006514:	00010004 	.word	0x00010004
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691a      	ldr	r2, [r3, #16]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	701a      	strb	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	1c5a      	adds	r2, r3, #1
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	625a      	str	r2, [r3, #36]	; 0x24
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006544:	3b01      	subs	r3, #1
 8006546:	b29a      	uxth	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	851a      	strh	r2, [r3, #40]	; 0x28
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006550:	b29b      	uxth	r3, r3
 8006552:	3b01      	subs	r3, #1
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	855a      	strh	r2, [r3, #42]	; 0x2a
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	691a      	ldr	r2, [r3, #16]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006564:	b2d2      	uxtb	r2, r2
 8006566:	701a      	strb	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	625a      	str	r2, [r3, #36]	; 0x24
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006576:	3b01      	subs	r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	851a      	strh	r2, [r3, #40]	; 0x28
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006582:	b29b      	uxth	r3, r3
 8006584:	3b01      	subs	r3, #1
 8006586:	b29a      	uxth	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800658c:	e0b8      	b.n	8006700 <HAL_I2C_Master_Receive+0x418>
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	2200      	movs	r2, #0
 8006596:	4966      	ldr	r1, [pc, #408]	; (8006730 <HAL_I2C_Master_Receive+0x448>)
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 feb9 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d001      	beq.n	80065a8 <HAL_I2C_Master_Receive+0x2c0>
 80065a4:	2301      	movs	r3, #1
 80065a6:	e0bf      	b.n	8006728 <HAL_I2C_Master_Receive+0x440>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065b6:	601a      	str	r2, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	691a      	ldr	r2, [r3, #16]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	701a      	strb	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	625a      	str	r2, [r3, #36]	; 0x24
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d4:	3b01      	subs	r3, #1
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	851a      	strh	r2, [r3, #40]	; 0x28
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	3b01      	subs	r3, #1
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	2200      	movs	r2, #0
 80065f2:	494f      	ldr	r1, [pc, #316]	; (8006730 <HAL_I2C_Master_Receive+0x448>)
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 fe8b 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <HAL_I2C_Master_Receive+0x31c>
 8006600:	2301      	movs	r3, #1
 8006602:	e091      	b.n	8006728 <HAL_I2C_Master_Receive+0x440>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	691a      	ldr	r2, [r3, #16]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	625a      	str	r2, [r3, #36]	; 0x24
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006630:	3b01      	subs	r3, #1
 8006632:	b29a      	uxth	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	851a      	strh	r2, [r3, #40]	; 0x28
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663c:	b29b      	uxth	r3, r3
 800663e:	3b01      	subs	r3, #1
 8006640:	b29a      	uxth	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	691a      	ldr	r2, [r3, #16]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	701a      	strb	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	625a      	str	r2, [r3, #36]	; 0x24
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006662:	3b01      	subs	r3, #1
 8006664:	b29a      	uxth	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	851a      	strh	r2, [r3, #40]	; 0x28
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800666e:	b29b      	uxth	r3, r3
 8006670:	3b01      	subs	r3, #1
 8006672:	b29a      	uxth	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006678:	e042      	b.n	8006700 <HAL_I2C_Master_Receive+0x418>
 800667a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800667c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f000 ff9e 	bl	80075c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <HAL_I2C_Master_Receive+0x3a6>
 800668a:	2301      	movs	r3, #1
 800668c:	e04c      	b.n	8006728 <HAL_I2C_Master_Receive+0x440>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	691a      	ldr	r2, [r3, #16]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	b2d2      	uxtb	r2, r2
 800669a:	701a      	strb	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	625a      	str	r2, [r3, #36]	; 0x24
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066aa:	3b01      	subs	r3, #1
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	851a      	strh	r2, [r3, #40]	; 0x28
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	3b01      	subs	r3, #1
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	f003 0304 	and.w	r3, r3, #4
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d118      	bne.n	8006700 <HAL_I2C_Master_Receive+0x418>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	691a      	ldr	r2, [r3, #16]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	b2d2      	uxtb	r2, r2
 80066da:	701a      	strb	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	625a      	str	r2, [r3, #36]	; 0x24
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ea:	3b01      	subs	r3, #1
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	851a      	strh	r2, [r3, #40]	; 0x28
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006704:	2b00      	cmp	r3, #0
 8006706:	f47f aec2 	bne.w	800648e <HAL_I2C_Master_Receive+0x1a6>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2220      	movs	r2, #32
 800670e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006722:	2300      	movs	r3, #0
 8006724:	e000      	b.n	8006728 <HAL_I2C_Master_Receive+0x440>
 8006726:	2302      	movs	r3, #2
 8006728:	4618      	mov	r0, r3
 800672a:	3728      	adds	r7, #40	; 0x28
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	00010004 	.word	0x00010004

08006734 <HAL_I2C_Mem_Write>:
 8006734:	b580      	push	{r7, lr}
 8006736:	b088      	sub	sp, #32
 8006738:	af02      	add	r7, sp, #8
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	4608      	mov	r0, r1
 800673e:	4611      	mov	r1, r2
 8006740:	461a      	mov	r2, r3
 8006742:	4603      	mov	r3, r0
 8006744:	817b      	strh	r3, [r7, #10]
 8006746:	460b      	mov	r3, r1
 8006748:	813b      	strh	r3, [r7, #8]
 800674a:	4613      	mov	r3, r2
 800674c:	80fb      	strh	r3, [r7, #6]
 800674e:	f7fe f905 	bl	800495c <HAL_GetTick>
 8006752:	6178      	str	r0, [r7, #20]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b20      	cmp	r3, #32
 800675e:	f040 80d9 	bne.w	8006914 <HAL_I2C_Mem_Write+0x1e0>
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	2319      	movs	r3, #25
 8006768:	2201      	movs	r2, #1
 800676a:	496d      	ldr	r1, [pc, #436]	; (8006920 <HAL_I2C_Mem_Write+0x1ec>)
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 fdcf 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <HAL_I2C_Mem_Write+0x48>
 8006778:	2302      	movs	r3, #2
 800677a:	e0cc      	b.n	8006916 <HAL_I2C_Mem_Write+0x1e2>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006782:	2b01      	cmp	r3, #1
 8006784:	d101      	bne.n	800678a <HAL_I2C_Mem_Write+0x56>
 8006786:	2302      	movs	r3, #2
 8006788:	e0c5      	b.n	8006916 <HAL_I2C_Mem_Write+0x1e2>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b01      	cmp	r3, #1
 800679e:	d007      	beq.n	80067b0 <HAL_I2C_Mem_Write+0x7c>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f042 0201 	orr.w	r2, r2, #1
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2221      	movs	r2, #33	; 0x21
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2240      	movs	r2, #64	; 0x40
 80067cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	641a      	str	r2, [r3, #64]	; 0x40
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6a3a      	ldr	r2, [r7, #32]
 80067da:	625a      	str	r2, [r3, #36]	; 0x24
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80067e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	851a      	strh	r2, [r3, #40]	; 0x28
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4a4d      	ldr	r2, [pc, #308]	; (8006924 <HAL_I2C_Mem_Write+0x1f0>)
 80067f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80067f2:	88f8      	ldrh	r0, [r7, #6]
 80067f4:	893a      	ldrh	r2, [r7, #8]
 80067f6:	8979      	ldrh	r1, [r7, #10]
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	9301      	str	r3, [sp, #4]
 80067fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	4603      	mov	r3, r0
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f000 fc06 	bl	8007014 <I2C_RequestMemoryWrite>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d052      	beq.n	80068b4 <HAL_I2C_Mem_Write+0x180>
 800680e:	2301      	movs	r3, #1
 8006810:	e081      	b.n	8006916 <HAL_I2C_Mem_Write+0x1e2>
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f000 fe50 	bl	80074bc <I2C_WaitOnTXEFlagUntilTimeout>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00d      	beq.n	800683e <HAL_I2C_Mem_Write+0x10a>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	2b04      	cmp	r3, #4
 8006828:	d107      	bne.n	800683a <HAL_I2C_Mem_Write+0x106>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	2301      	movs	r3, #1
 800683c:	e06b      	b.n	8006916 <HAL_I2C_Mem_Write+0x1e2>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	781a      	ldrb	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	611a      	str	r2, [r3, #16]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	625a      	str	r2, [r3, #36]	; 0x24
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006858:	3b01      	subs	r3, #1
 800685a:	b29a      	uxth	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	851a      	strh	r2, [r3, #40]	; 0x28
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006864:	b29b      	uxth	r3, r3
 8006866:	3b01      	subs	r3, #1
 8006868:	b29a      	uxth	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b04      	cmp	r3, #4
 800687a:	d11b      	bne.n	80068b4 <HAL_I2C_Mem_Write+0x180>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006880:	2b00      	cmp	r3, #0
 8006882:	d017      	beq.n	80068b4 <HAL_I2C_Mem_Write+0x180>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	781a      	ldrb	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	611a      	str	r2, [r3, #16]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	625a      	str	r2, [r3, #36]	; 0x24
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800689e:	3b01      	subs	r3, #1
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	851a      	strh	r2, [r3, #40]	; 0x28
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	3b01      	subs	r3, #1
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1aa      	bne.n	8006812 <HAL_I2C_Mem_Write+0xde>
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 fe3c 	bl	800753e <I2C_WaitOnBTFFlagUntilTimeout>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00d      	beq.n	80068e8 <HAL_I2C_Mem_Write+0x1b4>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d0:	2b04      	cmp	r3, #4
 80068d2:	d107      	bne.n	80068e4 <HAL_I2C_Mem_Write+0x1b0>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	2301      	movs	r3, #1
 80068e6:	e016      	b.n	8006916 <HAL_I2C_Mem_Write+0x1e2>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006910:	2300      	movs	r3, #0
 8006912:	e000      	b.n	8006916 <HAL_I2C_Mem_Write+0x1e2>
 8006914:	2302      	movs	r3, #2
 8006916:	4618      	mov	r0, r3
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	00100002 	.word	0x00100002
 8006924:	ffff0000 	.word	0xffff0000

08006928 <HAL_I2C_Mem_Read>:
 8006928:	b580      	push	{r7, lr}
 800692a:	b08c      	sub	sp, #48	; 0x30
 800692c:	af02      	add	r7, sp, #8
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	4608      	mov	r0, r1
 8006932:	4611      	mov	r1, r2
 8006934:	461a      	mov	r2, r3
 8006936:	4603      	mov	r3, r0
 8006938:	817b      	strh	r3, [r7, #10]
 800693a:	460b      	mov	r3, r1
 800693c:	813b      	strh	r3, [r7, #8]
 800693e:	4613      	mov	r3, r2
 8006940:	80fb      	strh	r3, [r7, #6]
 8006942:	f7fe f80b 	bl	800495c <HAL_GetTick>
 8006946:	6278      	str	r0, [r7, #36]	; 0x24
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b20      	cmp	r3, #32
 8006952:	f040 8208 	bne.w	8006d66 <HAL_I2C_Mem_Read+0x43e>
 8006956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	2319      	movs	r3, #25
 800695c:	2201      	movs	r2, #1
 800695e:	497b      	ldr	r1, [pc, #492]	; (8006b4c <HAL_I2C_Mem_Read+0x224>)
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 fcd5 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <HAL_I2C_Mem_Read+0x48>
 800696c:	2302      	movs	r3, #2
 800696e:	e1fb      	b.n	8006d68 <HAL_I2C_Mem_Read+0x440>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006976:	2b01      	cmp	r3, #1
 8006978:	d101      	bne.n	800697e <HAL_I2C_Mem_Read+0x56>
 800697a:	2302      	movs	r3, #2
 800697c:	e1f4      	b.n	8006d68 <HAL_I2C_Mem_Read+0x440>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b01      	cmp	r3, #1
 8006992:	d007      	beq.n	80069a4 <HAL_I2C_Mem_Read+0x7c>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0201 	orr.w	r2, r2, #1
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2222      	movs	r2, #34	; 0x22
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2240      	movs	r2, #64	; 0x40
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	641a      	str	r2, [r3, #64]	; 0x40
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ce:	625a      	str	r2, [r3, #36]	; 0x24
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80069d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	851a      	strh	r2, [r3, #40]	; 0x28
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4a5b      	ldr	r2, [pc, #364]	; (8006b50 <HAL_I2C_Mem_Read+0x228>)
 80069e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80069e6:	88f8      	ldrh	r0, [r7, #6]
 80069e8:	893a      	ldrh	r2, [r7, #8]
 80069ea:	8979      	ldrh	r1, [r7, #10]
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	9301      	str	r3, [sp, #4]
 80069f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	4603      	mov	r3, r0
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 fba2 	bl	8007140 <I2C_RequestMemoryRead>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <HAL_I2C_Mem_Read+0xde>
 8006a02:	2301      	movs	r3, #1
 8006a04:	e1b0      	b.n	8006d68 <HAL_I2C_Mem_Read+0x440>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d113      	bne.n	8006a36 <HAL_I2C_Mem_Read+0x10e>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	623b      	str	r3, [r7, #32]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	623b      	str	r3, [r7, #32]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	623b      	str	r3, [r7, #32]
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	e184      	b.n	8006d40 <HAL_I2C_Mem_Read+0x418>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d11b      	bne.n	8006a76 <HAL_I2C_Mem_Read+0x14e>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	61fb      	str	r3, [r7, #28]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	61fb      	str	r3, [r7, #28]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	61fb      	str	r3, [r7, #28]
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	e164      	b.n	8006d40 <HAL_I2C_Mem_Read+0x418>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d11b      	bne.n	8006ab6 <HAL_I2C_Mem_Read+0x18e>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	61bb      	str	r3, [r7, #24]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	61bb      	str	r3, [r7, #24]
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	e144      	b.n	8006d40 <HAL_I2C_Mem_Read+0x418>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	617b      	str	r3, [r7, #20]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	617b      	str	r3, [r7, #20]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	617b      	str	r3, [r7, #20]
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	e138      	b.n	8006d40 <HAL_I2C_Mem_Read+0x418>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	f200 80f1 	bhi.w	8006cba <HAL_I2C_Mem_Read+0x392>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d123      	bne.n	8006b28 <HAL_I2C_Mem_Read+0x200>
 8006ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 fd6b 	bl	80075c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <HAL_I2C_Mem_Read+0x1cc>
 8006af0:	2301      	movs	r3, #1
 8006af2:	e139      	b.n	8006d68 <HAL_I2C_Mem_Read+0x440>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	691a      	ldr	r2, [r3, #16]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afe:	b2d2      	uxtb	r2, r2
 8006b00:	701a      	strb	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	625a      	str	r2, [r3, #36]	; 0x24
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b10:	3b01      	subs	r3, #1
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	851a      	strh	r2, [r3, #40]	; 0x28
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b26:	e10b      	b.n	8006d40 <HAL_I2C_Mem_Read+0x418>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d14e      	bne.n	8006bce <HAL_I2C_Mem_Read+0x2a6>
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b36:	2200      	movs	r2, #0
 8006b38:	4906      	ldr	r1, [pc, #24]	; (8006b54 <HAL_I2C_Mem_Read+0x22c>)
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 fbe8 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d008      	beq.n	8006b58 <HAL_I2C_Mem_Read+0x230>
 8006b46:	2301      	movs	r3, #1
 8006b48:	e10e      	b.n	8006d68 <HAL_I2C_Mem_Read+0x440>
 8006b4a:	bf00      	nop
 8006b4c:	00100002 	.word	0x00100002
 8006b50:	ffff0000 	.word	0xffff0000
 8006b54:	00010004 	.word	0x00010004
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691a      	ldr	r2, [r3, #16]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	b2d2      	uxtb	r2, r2
 8006b74:	701a      	strb	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	1c5a      	adds	r2, r3, #1
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	625a      	str	r2, [r3, #36]	; 0x24
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	851a      	strh	r2, [r3, #40]	; 0x28
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	3b01      	subs	r3, #1
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	b2d2      	uxtb	r2, r2
 8006ba6:	701a      	strb	r2, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	1c5a      	adds	r2, r3, #1
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	625a      	str	r2, [r3, #36]	; 0x24
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	851a      	strh	r2, [r3, #40]	; 0x28
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bcc:	e0b8      	b.n	8006d40 <HAL_I2C_Mem_Read+0x418>
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	4966      	ldr	r1, [pc, #408]	; (8006d70 <HAL_I2C_Mem_Read+0x448>)
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 fb99 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <HAL_I2C_Mem_Read+0x2c0>
 8006be4:	2301      	movs	r3, #1
 8006be6:	e0bf      	b.n	8006d68 <HAL_I2C_Mem_Read+0x440>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	691a      	ldr	r2, [r3, #16]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	b2d2      	uxtb	r2, r2
 8006c04:	701a      	strb	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	1c5a      	adds	r2, r3, #1
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	625a      	str	r2, [r3, #36]	; 0x24
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	851a      	strh	r2, [r3, #40]	; 0x28
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	3b01      	subs	r3, #1
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c30:	2200      	movs	r2, #0
 8006c32:	494f      	ldr	r1, [pc, #316]	; (8006d70 <HAL_I2C_Mem_Read+0x448>)
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 fb6b 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <HAL_I2C_Mem_Read+0x31c>
 8006c40:	2301      	movs	r3, #1
 8006c42:	e091      	b.n	8006d68 <HAL_I2C_Mem_Read+0x440>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	691a      	ldr	r2, [r3, #16]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	b2d2      	uxtb	r2, r2
 8006c60:	701a      	strb	r2, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	1c5a      	adds	r2, r3, #1
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	625a      	str	r2, [r3, #36]	; 0x24
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c70:	3b01      	subs	r3, #1
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	851a      	strh	r2, [r3, #40]	; 0x28
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	691a      	ldr	r2, [r3, #16]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	b2d2      	uxtb	r2, r2
 8006c92:	701a      	strb	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	625a      	str	r2, [r3, #36]	; 0x24
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	851a      	strh	r2, [r3, #40]	; 0x28
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cb8:	e042      	b.n	8006d40 <HAL_I2C_Mem_Read+0x418>
 8006cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 fc7e 	bl	80075c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d001      	beq.n	8006cce <HAL_I2C_Mem_Read+0x3a6>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e04c      	b.n	8006d68 <HAL_I2C_Mem_Read+0x440>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	691a      	ldr	r2, [r3, #16]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	b2d2      	uxtb	r2, r2
 8006cda:	701a      	strb	r2, [r3, #0]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	1c5a      	adds	r2, r3, #1
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	625a      	str	r2, [r3, #36]	; 0x24
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cea:	3b01      	subs	r3, #1
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	851a      	strh	r2, [r3, #40]	; 0x28
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	f003 0304 	and.w	r3, r3, #4
 8006d0a:	2b04      	cmp	r3, #4
 8006d0c:	d118      	bne.n	8006d40 <HAL_I2C_Mem_Read+0x418>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	691a      	ldr	r2, [r3, #16]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	b2d2      	uxtb	r2, r2
 8006d1a:	701a      	strb	r2, [r3, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d20:	1c5a      	adds	r2, r3, #1
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	625a      	str	r2, [r3, #36]	; 0x24
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	851a      	strh	r2, [r3, #40]	; 0x28
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f47f aec2 	bne.w	8006ace <HAL_I2C_Mem_Read+0x1a6>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006d62:	2300      	movs	r3, #0
 8006d64:	e000      	b.n	8006d68 <HAL_I2C_Mem_Read+0x440>
 8006d66:	2302      	movs	r3, #2
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3728      	adds	r7, #40	; 0x28
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	00010004 	.word	0x00010004

08006d74 <I2C_MasterRequestWrite>:
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af02      	add	r7, sp, #8
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	607a      	str	r2, [r7, #4]
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	460b      	mov	r3, r1
 8006d82:	817b      	strh	r3, [r7, #10]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2b08      	cmp	r3, #8
 8006d8e:	d006      	beq.n	8006d9e <I2C_MasterRequestWrite+0x2a>
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d003      	beq.n	8006d9e <I2C_MasterRequestWrite+0x2a>
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d9c:	d108      	bne.n	8006db0 <I2C_MasterRequestWrite+0x3c>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dac:	601a      	str	r2, [r3, #0]
 8006dae:	e00b      	b.n	8006dc8 <I2C_MasterRequestWrite+0x54>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db4:	2b12      	cmp	r3, #18
 8006db6:	d107      	bne.n	8006dc8 <I2C_MasterRequestWrite+0x54>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 fa9b 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00d      	beq.n	8006dfc <I2C_MasterRequestWrite+0x88>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dee:	d103      	bne.n	8006df8 <I2C_MasterRequestWrite+0x84>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006df6:	641a      	str	r2, [r3, #64]	; 0x40
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e035      	b.n	8006e68 <I2C_MasterRequestWrite+0xf4>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e04:	d108      	bne.n	8006e18 <I2C_MasterRequestWrite+0xa4>
 8006e06:	897b      	ldrh	r3, [r7, #10]
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e14:	611a      	str	r2, [r3, #16]
 8006e16:	e01b      	b.n	8006e50 <I2C_MasterRequestWrite+0xdc>
 8006e18:	897b      	ldrh	r3, [r7, #10]
 8006e1a:	11db      	asrs	r3, r3, #7
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	f003 0306 	and.w	r3, r3, #6
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	f063 030f 	orn	r3, r3, #15
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	611a      	str	r2, [r3, #16]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	490e      	ldr	r1, [pc, #56]	; (8006e70 <I2C_MasterRequestWrite+0xfc>)
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f000 fac1 	bl	80073be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <I2C_MasterRequestWrite+0xd2>
 8006e42:	2301      	movs	r3, #1
 8006e44:	e010      	b.n	8006e68 <I2C_MasterRequestWrite+0xf4>
 8006e46:	897b      	ldrh	r3, [r7, #10]
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	611a      	str	r2, [r3, #16]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	4907      	ldr	r1, [pc, #28]	; (8006e74 <I2C_MasterRequestWrite+0x100>)
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 fab1 	bl	80073be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <I2C_MasterRequestWrite+0xf2>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e000      	b.n	8006e68 <I2C_MasterRequestWrite+0xf4>
 8006e66:	2300      	movs	r3, #0
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3718      	adds	r7, #24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	00010008 	.word	0x00010008
 8006e74:	00010002 	.word	0x00010002

08006e78 <I2C_MasterRequestRead>:
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b088      	sub	sp, #32
 8006e7c:	af02      	add	r7, sp, #8
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	607a      	str	r2, [r7, #4]
 8006e82:	603b      	str	r3, [r7, #0]
 8006e84:	460b      	mov	r3, r1
 8006e86:	817b      	strh	r3, [r7, #10]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	617b      	str	r3, [r7, #20]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2b08      	cmp	r3, #8
 8006ea2:	d006      	beq.n	8006eb2 <I2C_MasterRequestRead+0x3a>
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d003      	beq.n	8006eb2 <I2C_MasterRequestRead+0x3a>
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006eb0:	d108      	bne.n	8006ec4 <I2C_MasterRequestRead+0x4c>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	e00b      	b.n	8006edc <I2C_MasterRequestRead+0x64>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec8:	2b11      	cmp	r3, #17
 8006eca:	d107      	bne.n	8006edc <I2C_MasterRequestRead+0x64>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 fa11 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00d      	beq.n	8006f10 <I2C_MasterRequestRead+0x98>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f02:	d103      	bne.n	8006f0c <I2C_MasterRequestRead+0x94>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f0a:	641a      	str	r2, [r3, #64]	; 0x40
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e079      	b.n	8007004 <I2C_MasterRequestRead+0x18c>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f18:	d108      	bne.n	8006f2c <I2C_MasterRequestRead+0xb4>
 8006f1a:	897b      	ldrh	r3, [r7, #10]
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	f043 0301 	orr.w	r3, r3, #1
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	611a      	str	r2, [r3, #16]
 8006f2a:	e05f      	b.n	8006fec <I2C_MasterRequestRead+0x174>
 8006f2c:	897b      	ldrh	r3, [r7, #10]
 8006f2e:	11db      	asrs	r3, r3, #7
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	f003 0306 	and.w	r3, r3, #6
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	f063 030f 	orn	r3, r3, #15
 8006f3c:	b2da      	uxtb	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	611a      	str	r2, [r3, #16]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	4930      	ldr	r1, [pc, #192]	; (800700c <I2C_MasterRequestRead+0x194>)
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f000 fa37 	bl	80073be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <I2C_MasterRequestRead+0xe2>
 8006f56:	2301      	movs	r3, #1
 8006f58:	e054      	b.n	8007004 <I2C_MasterRequestRead+0x18c>
 8006f5a:	897b      	ldrh	r3, [r7, #10]
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	611a      	str	r2, [r3, #16]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	4929      	ldr	r1, [pc, #164]	; (8007010 <I2C_MasterRequestRead+0x198>)
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f000 fa27 	bl	80073be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <I2C_MasterRequestRead+0x102>
 8006f76:	2301      	movs	r3, #1
 8006f78:	e044      	b.n	8007004 <I2C_MasterRequestRead+0x18c>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	613b      	str	r3, [r7, #16]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	613b      	str	r3, [r7, #16]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	613b      	str	r3, [r7, #16]
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f000 f9af 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00d      	beq.n	8006fd4 <I2C_MasterRequestRead+0x15c>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fc6:	d103      	bne.n	8006fd0 <I2C_MasterRequestRead+0x158>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fce:	641a      	str	r2, [r3, #64]	; 0x40
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e017      	b.n	8007004 <I2C_MasterRequestRead+0x18c>
 8006fd4:	897b      	ldrh	r3, [r7, #10]
 8006fd6:	11db      	asrs	r3, r3, #7
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	f003 0306 	and.w	r3, r3, #6
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	f063 030e 	orn	r3, r3, #14
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	611a      	str	r2, [r3, #16]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	4907      	ldr	r1, [pc, #28]	; (8007010 <I2C_MasterRequestRead+0x198>)
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 f9e3 	bl	80073be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <I2C_MasterRequestRead+0x18a>
 8006ffe:	2301      	movs	r3, #1
 8007000:	e000      	b.n	8007004 <I2C_MasterRequestRead+0x18c>
 8007002:	2300      	movs	r3, #0
 8007004:	4618      	mov	r0, r3
 8007006:	3718      	adds	r7, #24
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	00010008 	.word	0x00010008
 8007010:	00010002 	.word	0x00010002

08007014 <I2C_RequestMemoryWrite>:
 8007014:	b580      	push	{r7, lr}
 8007016:	b088      	sub	sp, #32
 8007018:	af02      	add	r7, sp, #8
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	4608      	mov	r0, r1
 800701e:	4611      	mov	r1, r2
 8007020:	461a      	mov	r2, r3
 8007022:	4603      	mov	r3, r0
 8007024:	817b      	strh	r3, [r7, #10]
 8007026:	460b      	mov	r3, r1
 8007028:	813b      	strh	r3, [r7, #8]
 800702a:	4613      	mov	r3, r2
 800702c:	80fb      	strh	r3, [r7, #6]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	6a3b      	ldr	r3, [r7, #32]
 8007044:	2200      	movs	r2, #0
 8007046:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f000 f960 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00d      	beq.n	8007072 <I2C_RequestMemoryWrite+0x5e>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007064:	d103      	bne.n	800706e <I2C_RequestMemoryWrite+0x5a>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800706c:	641a      	str	r2, [r3, #64]	; 0x40
 800706e:	2303      	movs	r3, #3
 8007070:	e05f      	b.n	8007132 <I2C_RequestMemoryWrite+0x11e>
 8007072:	897b      	ldrh	r3, [r7, #10]
 8007074:	b2db      	uxtb	r3, r3
 8007076:	461a      	mov	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007080:	611a      	str	r2, [r3, #16]
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	6a3a      	ldr	r2, [r7, #32]
 8007086:	492d      	ldr	r1, [pc, #180]	; (800713c <I2C_RequestMemoryWrite+0x128>)
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 f998 	bl	80073be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <I2C_RequestMemoryWrite+0x84>
 8007094:	2301      	movs	r3, #1
 8007096:	e04c      	b.n	8007132 <I2C_RequestMemoryWrite+0x11e>
 8007098:	2300      	movs	r3, #0
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	617b      	str	r3, [r7, #20]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	617b      	str	r3, [r7, #20]
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070b0:	6a39      	ldr	r1, [r7, #32]
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 fa02 	bl	80074bc <I2C_WaitOnTXEFlagUntilTimeout>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00d      	beq.n	80070da <I2C_RequestMemoryWrite+0xc6>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	d107      	bne.n	80070d6 <I2C_RequestMemoryWrite+0xc2>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070d4:	601a      	str	r2, [r3, #0]
 80070d6:	2301      	movs	r3, #1
 80070d8:	e02b      	b.n	8007132 <I2C_RequestMemoryWrite+0x11e>
 80070da:	88fb      	ldrh	r3, [r7, #6]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d105      	bne.n	80070ec <I2C_RequestMemoryWrite+0xd8>
 80070e0:	893b      	ldrh	r3, [r7, #8]
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	611a      	str	r2, [r3, #16]
 80070ea:	e021      	b.n	8007130 <I2C_RequestMemoryWrite+0x11c>
 80070ec:	893b      	ldrh	r3, [r7, #8]
 80070ee:	0a1b      	lsrs	r3, r3, #8
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	611a      	str	r2, [r3, #16]
 80070fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070fc:	6a39      	ldr	r1, [r7, #32]
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 f9dc 	bl	80074bc <I2C_WaitOnTXEFlagUntilTimeout>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00d      	beq.n	8007126 <I2C_RequestMemoryWrite+0x112>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	2b04      	cmp	r3, #4
 8007110:	d107      	bne.n	8007122 <I2C_RequestMemoryWrite+0x10e>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	2301      	movs	r3, #1
 8007124:	e005      	b.n	8007132 <I2C_RequestMemoryWrite+0x11e>
 8007126:	893b      	ldrh	r3, [r7, #8]
 8007128:	b2da      	uxtb	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	611a      	str	r2, [r3, #16]
 8007130:	2300      	movs	r3, #0
 8007132:	4618      	mov	r0, r3
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	00010002 	.word	0x00010002

08007140 <I2C_RequestMemoryRead>:
 8007140:	b580      	push	{r7, lr}
 8007142:	b088      	sub	sp, #32
 8007144:	af02      	add	r7, sp, #8
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	4608      	mov	r0, r1
 800714a:	4611      	mov	r1, r2
 800714c:	461a      	mov	r2, r3
 800714e:	4603      	mov	r3, r0
 8007150:	817b      	strh	r3, [r7, #10]
 8007152:	460b      	mov	r3, r1
 8007154:	813b      	strh	r3, [r7, #8]
 8007156:	4613      	mov	r3, r2
 8007158:	80fb      	strh	r3, [r7, #6]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	2200      	movs	r2, #0
 8007182:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 f8c2 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00d      	beq.n	80071ae <I2C_RequestMemoryRead+0x6e>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071a0:	d103      	bne.n	80071aa <I2C_RequestMemoryRead+0x6a>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071a8:	641a      	str	r2, [r3, #64]	; 0x40
 80071aa:	2303      	movs	r3, #3
 80071ac:	e0aa      	b.n	8007304 <I2C_RequestMemoryRead+0x1c4>
 80071ae:	897b      	ldrh	r3, [r7, #10]
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	461a      	mov	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80071bc:	611a      	str	r2, [r3, #16]
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c0:	6a3a      	ldr	r2, [r7, #32]
 80071c2:	4952      	ldr	r1, [pc, #328]	; (800730c <I2C_RequestMemoryRead+0x1cc>)
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f000 f8fa 	bl	80073be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d001      	beq.n	80071d4 <I2C_RequestMemoryRead+0x94>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e097      	b.n	8007304 <I2C_RequestMemoryRead+0x1c4>
 80071d4:	2300      	movs	r3, #0
 80071d6:	617b      	str	r3, [r7, #20]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	617b      	str	r3, [r7, #20]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	617b      	str	r3, [r7, #20]
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ec:	6a39      	ldr	r1, [r7, #32]
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f000 f964 	bl	80074bc <I2C_WaitOnTXEFlagUntilTimeout>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00d      	beq.n	8007216 <I2C_RequestMemoryRead+0xd6>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fe:	2b04      	cmp	r3, #4
 8007200:	d107      	bne.n	8007212 <I2C_RequestMemoryRead+0xd2>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007210:	601a      	str	r2, [r3, #0]
 8007212:	2301      	movs	r3, #1
 8007214:	e076      	b.n	8007304 <I2C_RequestMemoryRead+0x1c4>
 8007216:	88fb      	ldrh	r3, [r7, #6]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d105      	bne.n	8007228 <I2C_RequestMemoryRead+0xe8>
 800721c:	893b      	ldrh	r3, [r7, #8]
 800721e:	b2da      	uxtb	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	611a      	str	r2, [r3, #16]
 8007226:	e021      	b.n	800726c <I2C_RequestMemoryRead+0x12c>
 8007228:	893b      	ldrh	r3, [r7, #8]
 800722a:	0a1b      	lsrs	r3, r3, #8
 800722c:	b29b      	uxth	r3, r3
 800722e:	b2da      	uxtb	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	611a      	str	r2, [r3, #16]
 8007236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007238:	6a39      	ldr	r1, [r7, #32]
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 f93e 	bl	80074bc <I2C_WaitOnTXEFlagUntilTimeout>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00d      	beq.n	8007262 <I2C_RequestMemoryRead+0x122>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724a:	2b04      	cmp	r3, #4
 800724c:	d107      	bne.n	800725e <I2C_RequestMemoryRead+0x11e>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	2301      	movs	r3, #1
 8007260:	e050      	b.n	8007304 <I2C_RequestMemoryRead+0x1c4>
 8007262:	893b      	ldrh	r3, [r7, #8]
 8007264:	b2da      	uxtb	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	611a      	str	r2, [r3, #16]
 800726c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800726e:	6a39      	ldr	r1, [r7, #32]
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 f923 	bl	80074bc <I2C_WaitOnTXEFlagUntilTimeout>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00d      	beq.n	8007298 <I2C_RequestMemoryRead+0x158>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007280:	2b04      	cmp	r3, #4
 8007282:	d107      	bne.n	8007294 <I2C_RequestMemoryRead+0x154>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	2301      	movs	r3, #1
 8007296:	e035      	b.n	8007304 <I2C_RequestMemoryRead+0x1c4>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 f82b 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00d      	beq.n	80072dc <I2C_RequestMemoryRead+0x19c>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ce:	d103      	bne.n	80072d8 <I2C_RequestMemoryRead+0x198>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072d6:	641a      	str	r2, [r3, #64]	; 0x40
 80072d8:	2303      	movs	r3, #3
 80072da:	e013      	b.n	8007304 <I2C_RequestMemoryRead+0x1c4>
 80072dc:	897b      	ldrh	r3, [r7, #10]
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	f043 0301 	orr.w	r3, r3, #1
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	611a      	str	r2, [r3, #16]
 80072ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ee:	6a3a      	ldr	r2, [r7, #32]
 80072f0:	4906      	ldr	r1, [pc, #24]	; (800730c <I2C_RequestMemoryRead+0x1cc>)
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f000 f863 	bl	80073be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <I2C_RequestMemoryRead+0x1c2>
 80072fe:	2301      	movs	r3, #1
 8007300:	e000      	b.n	8007304 <I2C_RequestMemoryRead+0x1c4>
 8007302:	2300      	movs	r3, #0
 8007304:	4618      	mov	r0, r3
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	00010002 	.word	0x00010002

08007310 <I2C_WaitOnFlagUntilTimeout>:
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	603b      	str	r3, [r7, #0]
 800731c:	4613      	mov	r3, r2
 800731e:	71fb      	strb	r3, [r7, #7]
 8007320:	e025      	b.n	800736e <I2C_WaitOnFlagUntilTimeout+0x5e>
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007328:	d021      	beq.n	800736e <I2C_WaitOnFlagUntilTimeout+0x5e>
 800732a:	f7fd fb17 	bl	800495c <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	429a      	cmp	r2, r3
 8007338:	d302      	bcc.n	8007340 <I2C_WaitOnFlagUntilTimeout+0x30>
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d116      	bne.n	800736e <I2C_WaitOnFlagUntilTimeout+0x5e>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	631a      	str	r2, [r3, #48]	; 0x30
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2220      	movs	r2, #32
 800734a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735a:	f043 0220 	orr.w	r2, r3, #32
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	641a      	str	r2, [r3, #64]	; 0x40
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800736a:	2301      	movs	r3, #1
 800736c:	e023      	b.n	80073b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	0c1b      	lsrs	r3, r3, #16
 8007372:	b2db      	uxtb	r3, r3
 8007374:	2b01      	cmp	r3, #1
 8007376:	d10d      	bne.n	8007394 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	43da      	mvns	r2, r3
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	4013      	ands	r3, r2
 8007384:	b29b      	uxth	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	bf0c      	ite	eq
 800738a:	2301      	moveq	r3, #1
 800738c:	2300      	movne	r3, #0
 800738e:	b2db      	uxtb	r3, r3
 8007390:	461a      	mov	r2, r3
 8007392:	e00c      	b.n	80073ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	43da      	mvns	r2, r3
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	4013      	ands	r3, r2
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	bf0c      	ite	eq
 80073a6:	2301      	moveq	r3, #1
 80073a8:	2300      	movne	r3, #0
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	461a      	mov	r2, r3
 80073ae:	79fb      	ldrb	r3, [r7, #7]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d0b6      	beq.n	8007322 <I2C_WaitOnFlagUntilTimeout+0x12>
 80073b4:	2300      	movs	r3, #0
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 80073be:	b580      	push	{r7, lr}
 80073c0:	b084      	sub	sp, #16
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	60f8      	str	r0, [r7, #12]
 80073c6:	60b9      	str	r1, [r7, #8]
 80073c8:	607a      	str	r2, [r7, #4]
 80073ca:	603b      	str	r3, [r7, #0]
 80073cc:	e051      	b.n	8007472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073dc:	d123      	bne.n	8007426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073f6:	615a      	str	r2, [r3, #20]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	631a      	str	r2, [r3, #48]	; 0x30
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2220      	movs	r2, #32
 8007402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007412:	f043 0204 	orr.w	r2, r3, #4
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	641a      	str	r2, [r3, #64]	; 0x40
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007422:	2301      	movs	r3, #1
 8007424:	e046      	b.n	80074b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742c:	d021      	beq.n	8007472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 800742e:	f7fd fa95 	bl	800495c <HAL_GetTick>
 8007432:	4602      	mov	r2, r0
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	429a      	cmp	r2, r3
 800743c:	d302      	bcc.n	8007444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d116      	bne.n	8007472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	631a      	str	r2, [r3, #48]	; 0x30
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2220      	movs	r2, #32
 800744e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745e:	f043 0220 	orr.w	r2, r3, #32
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	641a      	str	r2, [r3, #64]	; 0x40
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800746e:	2301      	movs	r3, #1
 8007470:	e020      	b.n	80074b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	0c1b      	lsrs	r3, r3, #16
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b01      	cmp	r3, #1
 800747a:	d10c      	bne.n	8007496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	43da      	mvns	r2, r3
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	4013      	ands	r3, r2
 8007488:	b29b      	uxth	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	bf14      	ite	ne
 800748e:	2301      	movne	r3, #1
 8007490:	2300      	moveq	r3, #0
 8007492:	b2db      	uxtb	r3, r3
 8007494:	e00b      	b.n	80074ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	43da      	mvns	r2, r3
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	4013      	ands	r3, r2
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	bf14      	ite	ne
 80074a8:	2301      	movne	r3, #1
 80074aa:	2300      	moveq	r3, #0
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d18d      	bne.n	80073ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80074b2:	2300      	movs	r3, #0
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <I2C_WaitOnTXEFlagUntilTimeout>:
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
 80074c8:	e02d      	b.n	8007526 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 f8ce 	bl	800766c <I2C_IsAcknowledgeFailed>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 80074d6:	2301      	movs	r3, #1
 80074d8:	e02d      	b.n	8007536 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e0:	d021      	beq.n	8007526 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80074e2:	f7fd fa3b 	bl	800495c <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d302      	bcc.n	80074f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d116      	bne.n	8007526 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	631a      	str	r2, [r3, #48]	; 0x30
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2220      	movs	r2, #32
 8007502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	f043 0220 	orr.w	r2, r3, #32
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	641a      	str	r2, [r3, #64]	; 0x40
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007522:	2301      	movs	r3, #1
 8007524:	e007      	b.n	8007536 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007530:	2b80      	cmp	r3, #128	; 0x80
 8007532:	d1ca      	bne.n	80074ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8007534:	2300      	movs	r3, #0
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <I2C_WaitOnBTFFlagUntilTimeout>:
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	60b9      	str	r1, [r7, #8]
 8007548:	607a      	str	r2, [r7, #4]
 800754a:	e02d      	b.n	80075a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 f88d 	bl	800766c <I2C_IsAcknowledgeFailed>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8007558:	2301      	movs	r3, #1
 800755a:	e02d      	b.n	80075b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007562:	d021      	beq.n	80075a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8007564:	f7fd f9fa 	bl	800495c <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	429a      	cmp	r2, r3
 8007572:	d302      	bcc.n	800757a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d116      	bne.n	80075a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	631a      	str	r2, [r3, #48]	; 0x30
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2220      	movs	r2, #32
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007594:	f043 0220 	orr.w	r2, r3, #32
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	641a      	str	r2, [r3, #64]	; 0x40
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80075a4:	2301      	movs	r3, #1
 80075a6:	e007      	b.n	80075b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	f003 0304 	and.w	r3, r3, #4
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d1ca      	bne.n	800754c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 80075b6:	2300      	movs	r3, #0
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
 80075cc:	e042      	b.n	8007654 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	f003 0310 	and.w	r3, r3, #16
 80075d8:	2b10      	cmp	r3, #16
 80075da:	d119      	bne.n	8007610 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f06f 0210 	mvn.w	r2, #16
 80075e4:	615a      	str	r2, [r3, #20]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	631a      	str	r2, [r3, #48]	; 0x30
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2220      	movs	r2, #32
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	641a      	str	r2, [r3, #64]	; 0x40
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800760c:	2301      	movs	r3, #1
 800760e:	e029      	b.n	8007664 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8007610:	f7fd f9a4 	bl	800495c <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	429a      	cmp	r2, r3
 800761e:	d302      	bcc.n	8007626 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d116      	bne.n	8007654 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	631a      	str	r2, [r3, #48]	; 0x30
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2220      	movs	r2, #32
 8007630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007640:	f043 0220 	orr.w	r2, r3, #32
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	641a      	str	r2, [r3, #64]	; 0x40
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007650:	2301      	movs	r3, #1
 8007652:	e007      	b.n	8007664 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800765e:	2b40      	cmp	r3, #64	; 0x40
 8007660:	d1b5      	bne.n	80075ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 8007662:	2300      	movs	r3, #0
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <I2C_IsAcknowledgeFailed>:
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800767e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007682:	d11b      	bne.n	80076bc <I2C_IsAcknowledgeFailed+0x50>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800768c:	615a      	str	r2, [r3, #20]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	631a      	str	r2, [r3, #48]	; 0x30
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2220      	movs	r2, #32
 8007698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a8:	f043 0204 	orr.w	r2, r3, #4
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	641a      	str	r2, [r3, #64]	; 0x40
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80076b8:	2301      	movs	r3, #1
 80076ba:	e000      	b.n	80076be <I2C_IsAcknowledgeFailed+0x52>
 80076bc:	2300      	movs	r3, #0
 80076be:	4618      	mov	r0, r3
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <HAL_PCD_Init>:
 80076ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076cc:	b08f      	sub	sp, #60	; 0x3c
 80076ce:	af0a      	add	r7, sp, #40	; 0x28
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_PCD_Init+0x12>
 80076d8:	2301      	movs	r3, #1
 80076da:	e10f      	b.n	80078fc <HAL_PCD_Init+0x232>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	60bb      	str	r3, [r7, #8]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d106      	bne.n	80076fc <HAL_PCD_Init+0x32>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f008 f8ee 	bl	800f8d8 <HAL_PCD_MspInit>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2203      	movs	r2, #3
 8007700:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800770c:	2b00      	cmp	r3, #0
 800770e:	d102      	bne.n	8007716 <HAL_PCD_Init+0x4c>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	611a      	str	r2, [r3, #16]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4618      	mov	r0, r3
 800771c:	f003 f87d 	bl	800a81a <USB_DisableGlobalInt>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	603b      	str	r3, [r7, #0]
 8007726:	687e      	ldr	r6, [r7, #4]
 8007728:	466d      	mov	r5, sp
 800772a:	f106 0410 	add.w	r4, r6, #16
 800772e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007730:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007734:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007736:	e894 0003 	ldmia.w	r4, {r0, r1}
 800773a:	e885 0003 	stmia.w	r5, {r0, r1}
 800773e:	1d33      	adds	r3, r6, #4
 8007740:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007742:	6838      	ldr	r0, [r7, #0]
 8007744:	f002 ff54 	bl	800a5f0 <USB_CoreInit>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d005      	beq.n	800775a <HAL_PCD_Init+0x90>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2202      	movs	r2, #2
 8007752:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8007756:	2301      	movs	r3, #1
 8007758:	e0d0      	b.n	80078fc <HAL_PCD_Init+0x232>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2100      	movs	r1, #0
 8007760:	4618      	mov	r0, r3
 8007762:	f003 f86b 	bl	800a83c <USB_SetCurrentMode>
 8007766:	2300      	movs	r3, #0
 8007768:	73fb      	strb	r3, [r7, #15]
 800776a:	e04a      	b.n	8007802 <HAL_PCD_Init+0x138>
 800776c:	7bfa      	ldrb	r2, [r7, #15]
 800776e:	6879      	ldr	r1, [r7, #4]
 8007770:	4613      	mov	r3, r2
 8007772:	00db      	lsls	r3, r3, #3
 8007774:	4413      	add	r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	440b      	add	r3, r1
 800777a:	333d      	adds	r3, #61	; 0x3d
 800777c:	2201      	movs	r2, #1
 800777e:	701a      	strb	r2, [r3, #0]
 8007780:	7bfa      	ldrb	r2, [r7, #15]
 8007782:	6879      	ldr	r1, [r7, #4]
 8007784:	4613      	mov	r3, r2
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	4413      	add	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	440b      	add	r3, r1
 800778e:	333c      	adds	r3, #60	; 0x3c
 8007790:	7bfa      	ldrb	r2, [r7, #15]
 8007792:	701a      	strb	r2, [r3, #0]
 8007794:	7bfa      	ldrb	r2, [r7, #15]
 8007796:	7bfb      	ldrb	r3, [r7, #15]
 8007798:	b298      	uxth	r0, r3
 800779a:	6879      	ldr	r1, [r7, #4]
 800779c:	4613      	mov	r3, r2
 800779e:	00db      	lsls	r3, r3, #3
 80077a0:	4413      	add	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	440b      	add	r3, r1
 80077a6:	3344      	adds	r3, #68	; 0x44
 80077a8:	4602      	mov	r2, r0
 80077aa:	801a      	strh	r2, [r3, #0]
 80077ac:	7bfa      	ldrb	r2, [r7, #15]
 80077ae:	6879      	ldr	r1, [r7, #4]
 80077b0:	4613      	mov	r3, r2
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	4413      	add	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	440b      	add	r3, r1
 80077ba:	3340      	adds	r3, #64	; 0x40
 80077bc:	2200      	movs	r2, #0
 80077be:	701a      	strb	r2, [r3, #0]
 80077c0:	7bfa      	ldrb	r2, [r7, #15]
 80077c2:	6879      	ldr	r1, [r7, #4]
 80077c4:	4613      	mov	r3, r2
 80077c6:	00db      	lsls	r3, r3, #3
 80077c8:	4413      	add	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	440b      	add	r3, r1
 80077ce:	3348      	adds	r3, #72	; 0x48
 80077d0:	2200      	movs	r2, #0
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	7bfa      	ldrb	r2, [r7, #15]
 80077d6:	6879      	ldr	r1, [r7, #4]
 80077d8:	4613      	mov	r3, r2
 80077da:	00db      	lsls	r3, r3, #3
 80077dc:	4413      	add	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	440b      	add	r3, r1
 80077e2:	334c      	adds	r3, #76	; 0x4c
 80077e4:	2200      	movs	r2, #0
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	7bfa      	ldrb	r2, [r7, #15]
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	4613      	mov	r3, r2
 80077ee:	00db      	lsls	r3, r3, #3
 80077f0:	4413      	add	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	440b      	add	r3, r1
 80077f6:	3354      	adds	r3, #84	; 0x54
 80077f8:	2200      	movs	r2, #0
 80077fa:	601a      	str	r2, [r3, #0]
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
 80077fe:	3301      	adds	r3, #1
 8007800:	73fb      	strb	r3, [r7, #15]
 8007802:	7bfa      	ldrb	r2, [r7, #15]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	429a      	cmp	r2, r3
 800780a:	d3af      	bcc.n	800776c <HAL_PCD_Init+0xa2>
 800780c:	2300      	movs	r3, #0
 800780e:	73fb      	strb	r3, [r7, #15]
 8007810:	e044      	b.n	800789c <HAL_PCD_Init+0x1d2>
 8007812:	7bfa      	ldrb	r2, [r7, #15]
 8007814:	6879      	ldr	r1, [r7, #4]
 8007816:	4613      	mov	r3, r2
 8007818:	00db      	lsls	r3, r3, #3
 800781a:	4413      	add	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	440b      	add	r3, r1
 8007820:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007824:	2200      	movs	r2, #0
 8007826:	701a      	strb	r2, [r3, #0]
 8007828:	7bfa      	ldrb	r2, [r7, #15]
 800782a:	6879      	ldr	r1, [r7, #4]
 800782c:	4613      	mov	r3, r2
 800782e:	00db      	lsls	r3, r3, #3
 8007830:	4413      	add	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	440b      	add	r3, r1
 8007836:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800783a:	7bfa      	ldrb	r2, [r7, #15]
 800783c:	701a      	strb	r2, [r3, #0]
 800783e:	7bfa      	ldrb	r2, [r7, #15]
 8007840:	6879      	ldr	r1, [r7, #4]
 8007842:	4613      	mov	r3, r2
 8007844:	00db      	lsls	r3, r3, #3
 8007846:	4413      	add	r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	440b      	add	r3, r1
 800784c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007850:	2200      	movs	r2, #0
 8007852:	701a      	strb	r2, [r3, #0]
 8007854:	7bfa      	ldrb	r2, [r7, #15]
 8007856:	6879      	ldr	r1, [r7, #4]
 8007858:	4613      	mov	r3, r2
 800785a:	00db      	lsls	r3, r3, #3
 800785c:	4413      	add	r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	440b      	add	r3, r1
 8007862:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007866:	2200      	movs	r2, #0
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	7bfa      	ldrb	r2, [r7, #15]
 800786c:	6879      	ldr	r1, [r7, #4]
 800786e:	4613      	mov	r3, r2
 8007870:	00db      	lsls	r3, r3, #3
 8007872:	4413      	add	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	440b      	add	r3, r1
 8007878:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800787c:	2200      	movs	r2, #0
 800787e:	601a      	str	r2, [r3, #0]
 8007880:	7bfa      	ldrb	r2, [r7, #15]
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	4613      	mov	r3, r2
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	4413      	add	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	440b      	add	r3, r1
 800788e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007892:	2200      	movs	r2, #0
 8007894:	601a      	str	r2, [r3, #0]
 8007896:	7bfb      	ldrb	r3, [r7, #15]
 8007898:	3301      	adds	r3, #1
 800789a:	73fb      	strb	r3, [r7, #15]
 800789c:	7bfa      	ldrb	r2, [r7, #15]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d3b5      	bcc.n	8007812 <HAL_PCD_Init+0x148>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	687e      	ldr	r6, [r7, #4]
 80078ae:	466d      	mov	r5, sp
 80078b0:	f106 0410 	add.w	r4, r6, #16
 80078b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80078c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80078c4:	1d33      	adds	r3, r6, #4
 80078c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078c8:	6838      	ldr	r0, [r7, #0]
 80078ca:	f003 f803 	bl	800a8d4 <USB_DevInit>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d005      	beq.n	80078e0 <HAL_PCD_Init+0x216>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 80078dc:	2301      	movs	r3, #1
 80078de:	e00d      	b.n	80078fc <HAL_PCD_Init+0x232>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f004 f952 	bl	800bb9e <USB_DevDisconnect>
 80078fa:	2300      	movs	r3, #0
 80078fc:	4618      	mov	r0, r3
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007904 <HAL_PCD_Start>:
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	60fb      	str	r3, [r7, #12]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007918:	2b01      	cmp	r3, #1
 800791a:	d101      	bne.n	8007920 <HAL_PCD_Start+0x1c>
 800791c:	2302      	movs	r3, #2
 800791e:	e020      	b.n	8007962 <HAL_PCD_Start+0x5e>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792c:	2b01      	cmp	r3, #1
 800792e:	d109      	bne.n	8007944 <HAL_PCD_Start+0x40>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d005      	beq.n	8007944 <HAL_PCD_Start+0x40>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	639a      	str	r2, [r3, #56]	; 0x38
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4618      	mov	r0, r3
 800794a:	f002 ff55 	bl	800a7f8 <USB_EnableGlobalInt>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4618      	mov	r0, r3
 8007954:	f004 f902 	bl	800bb5c <USB_DevConnect>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8007960:	2300      	movs	r3, #0
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <HAL_PCD_IRQHandler>:
 800796a:	b590      	push	{r4, r7, lr}
 800796c:	b08d      	sub	sp, #52	; 0x34
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	623b      	str	r3, [r7, #32]
 8007978:	6a3b      	ldr	r3, [r7, #32]
 800797a:	61fb      	str	r3, [r7, #28]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4618      	mov	r0, r3
 8007982:	f004 f9c0 	bl	800bd06 <USB_GetMode>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	f040 848a 	bne.w	80082a2 <HAL_PCD_IRQHandler+0x938>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4618      	mov	r0, r3
 8007994:	f004 f924 	bl	800bbe0 <USB_ReadInterrupts>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 8480 	beq.w	80082a0 <HAL_PCD_IRQHandler+0x936>
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	0a1b      	lsrs	r3, r3, #8
 80079aa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f004 f911 	bl	800bbe0 <USB_ReadInterrupts>
 80079be:	4603      	mov	r3, r0
 80079c0:	f003 0302 	and.w	r3, r3, #2
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d107      	bne.n	80079d8 <HAL_PCD_IRQHandler+0x6e>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	695a      	ldr	r2, [r3, #20]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f002 0202 	and.w	r2, r2, #2
 80079d6:	615a      	str	r2, [r3, #20]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4618      	mov	r0, r3
 80079de:	f004 f8ff 	bl	800bbe0 <USB_ReadInterrupts>
 80079e2:	4603      	mov	r3, r0
 80079e4:	f003 0310 	and.w	r3, r3, #16
 80079e8:	2b10      	cmp	r3, #16
 80079ea:	d161      	bne.n	8007ab0 <HAL_PCD_IRQHandler+0x146>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	699a      	ldr	r2, [r3, #24]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f022 0210 	bic.w	r2, r2, #16
 80079fa:	619a      	str	r2, [r3, #24]
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	6a1b      	ldr	r3, [r3, #32]
 8007a00:	61bb      	str	r3, [r7, #24]
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	f003 020f 	and.w	r2, r3, #15
 8007a08:	4613      	mov	r3, r2
 8007a0a:	00db      	lsls	r3, r3, #3
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	4413      	add	r3, r2
 8007a18:	3304      	adds	r3, #4
 8007a1a:	617b      	str	r3, [r7, #20]
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	0c5b      	lsrs	r3, r3, #17
 8007a20:	f003 030f 	and.w	r3, r3, #15
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d124      	bne.n	8007a72 <HAL_PCD_IRQHandler+0x108>
 8007a28:	69ba      	ldr	r2, [r7, #24]
 8007a2a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007a2e:	4013      	ands	r3, r2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d035      	beq.n	8007aa0 <HAL_PCD_IRQHandler+0x136>
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	6919      	ldr	r1, [r3, #16]
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	091b      	lsrs	r3, r3, #4
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	461a      	mov	r2, r3
 8007a46:	6a38      	ldr	r0, [r7, #32]
 8007a48:	f003 ff36 	bl	800b8b8 <USB_ReadPacket>
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	691a      	ldr	r2, [r3, #16]
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	091b      	lsrs	r3, r3, #4
 8007a54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a58:	441a      	add	r2, r3
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	611a      	str	r2, [r3, #16]
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	6a1a      	ldr	r2, [r3, #32]
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	091b      	lsrs	r3, r3, #4
 8007a66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a6a:	441a      	add	r2, r3
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	621a      	str	r2, [r3, #32]
 8007a70:	e016      	b.n	8007aa0 <HAL_PCD_IRQHandler+0x136>
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	0c5b      	lsrs	r3, r3, #17
 8007a76:	f003 030f 	and.w	r3, r3, #15
 8007a7a:	2b06      	cmp	r3, #6
 8007a7c:	d110      	bne.n	8007aa0 <HAL_PCD_IRQHandler+0x136>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007a84:	2208      	movs	r2, #8
 8007a86:	4619      	mov	r1, r3
 8007a88:	6a38      	ldr	r0, [r7, #32]
 8007a8a:	f003 ff15 	bl	800b8b8 <USB_ReadPacket>
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	6a1a      	ldr	r2, [r3, #32]
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	091b      	lsrs	r3, r3, #4
 8007a96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a9a:	441a      	add	r2, r3
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	621a      	str	r2, [r3, #32]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	699a      	ldr	r2, [r3, #24]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f042 0210 	orr.w	r2, r2, #16
 8007aae:	619a      	str	r2, [r3, #24]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f004 f893 	bl	800bbe0 <USB_ReadInterrupts>
 8007aba:	4603      	mov	r3, r0
 8007abc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ac0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007ac4:	f040 80a7 	bne.w	8007c16 <HAL_PCD_IRQHandler+0x2ac>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	627b      	str	r3, [r7, #36]	; 0x24
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f004 f898 	bl	800bc06 <USB_ReadDevAllOutEpInterrupt>
 8007ad6:	62b8      	str	r0, [r7, #40]	; 0x28
 8007ad8:	e099      	b.n	8007c0e <HAL_PCD_IRQHandler+0x2a4>
 8007ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 808e 	beq.w	8007c02 <HAL_PCD_IRQHandler+0x298>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aec:	b2d2      	uxtb	r2, r2
 8007aee:	4611      	mov	r1, r2
 8007af0:	4618      	mov	r0, r3
 8007af2:	f004 f8bc 	bl	800bc6e <USB_ReadDevOutEPInterrupt>
 8007af6:	6138      	str	r0, [r7, #16]
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00c      	beq.n	8007b1c <HAL_PCD_IRQHandler+0x1b2>
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0e:	461a      	mov	r2, r3
 8007b10:	2301      	movs	r3, #1
 8007b12:	6093      	str	r3, [r2, #8]
 8007b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fec2 	bl	80088a0 <PCD_EP_OutXfrComplete_int>
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f003 0308 	and.w	r3, r3, #8
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00c      	beq.n	8007b40 <HAL_PCD_IRQHandler+0x1d6>
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b32:	461a      	mov	r2, r3
 8007b34:	2308      	movs	r3, #8
 8007b36:	6093      	str	r3, [r2, #8]
 8007b38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 ff98 	bl	8008a70 <PCD_EP_OutSetupPacket_int>
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	f003 0310 	and.w	r3, r3, #16
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d008      	beq.n	8007b5c <HAL_PCD_IRQHandler+0x1f2>
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4c:	015a      	lsls	r2, r3, #5
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	4413      	add	r3, r2
 8007b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b56:	461a      	mov	r2, r3
 8007b58:	2310      	movs	r3, #16
 8007b5a:	6093      	str	r3, [r2, #8]
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	f003 0302 	and.w	r3, r3, #2
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d030      	beq.n	8007bc8 <HAL_PCD_IRQHandler+0x25e>
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b6e:	2b80      	cmp	r3, #128	; 0x80
 8007b70:	d109      	bne.n	8007b86 <HAL_PCD_IRQHandler+0x21c>
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	69fa      	ldr	r2, [r7, #28]
 8007b7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b84:	6053      	str	r3, [r2, #4]
 8007b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b88:	4613      	mov	r3, r2
 8007b8a:	00db      	lsls	r3, r3, #3
 8007b8c:	4413      	add	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	4413      	add	r3, r2
 8007b98:	3304      	adds	r3, #4
 8007b9a:	617b      	str	r3, [r7, #20]
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	78db      	ldrb	r3, [r3, #3]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d108      	bne.n	8007bb6 <HAL_PCD_IRQHandler+0x24c>
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	70da      	strb	r2, [r3, #3]
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f007 ff8d 	bl	800fad0 <HAL_PCD_ISOOUTIncompleteCallback>
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	015a      	lsls	r2, r3, #5
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	6093      	str	r3, [r2, #8]
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	f003 0320 	and.w	r3, r3, #32
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d008      	beq.n	8007be4 <HAL_PCD_IRQHandler+0x27a>
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bde:	461a      	mov	r2, r3
 8007be0:	2320      	movs	r3, #32
 8007be2:	6093      	str	r3, [r2, #8]
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d009      	beq.n	8007c02 <HAL_PCD_IRQHandler+0x298>
 8007bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf0:	015a      	lsls	r2, r3, #5
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c00:	6093      	str	r3, [r2, #8]
 8007c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c04:	3301      	adds	r3, #1
 8007c06:	627b      	str	r3, [r7, #36]	; 0x24
 8007c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0a:	085b      	lsrs	r3, r3, #1
 8007c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f47f af62 	bne.w	8007ada <HAL_PCD_IRQHandler+0x170>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f003 ffe0 	bl	800bbe0 <USB_ReadInterrupts>
 8007c20:	4603      	mov	r3, r0
 8007c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c2a:	f040 80db 	bne.w	8007de4 <HAL_PCD_IRQHandler+0x47a>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f004 f801 	bl	800bc3a <USB_ReadDevAllInEpInterrupt>
 8007c38:	62b8      	str	r0, [r7, #40]	; 0x28
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c3e:	e0cd      	b.n	8007ddc <HAL_PCD_IRQHandler+0x472>
 8007c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f000 80c2 	beq.w	8007dd0 <HAL_PCD_IRQHandler+0x466>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c52:	b2d2      	uxtb	r2, r2
 8007c54:	4611      	mov	r1, r2
 8007c56:	4618      	mov	r0, r3
 8007c58:	f004 f827 	bl	800bcaa <USB_ReadDevInEPInterrupt>
 8007c5c:	6138      	str	r0, [r7, #16]
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d057      	beq.n	8007d18 <HAL_PCD_IRQHandler+0x3ae>
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	f003 030f 	and.w	r3, r3, #15
 8007c6e:	2201      	movs	r2, #1
 8007c70:	fa02 f303 	lsl.w	r3, r2, r3
 8007c74:	60fb      	str	r3, [r7, #12]
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	43db      	mvns	r3, r3
 8007c82:	69f9      	ldr	r1, [r7, #28]
 8007c84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c88:	4013      	ands	r3, r2
 8007c8a:	634b      	str	r3, [r1, #52]	; 0x34
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8e:	015a      	lsls	r2, r3, #5
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	4413      	add	r3, r2
 8007c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c98:	461a      	mov	r2, r3
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	6093      	str	r3, [r2, #8]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d132      	bne.n	8007d0c <HAL_PCD_IRQHandler+0x3a2>
 8007ca6:	6879      	ldr	r1, [r7, #4]
 8007ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007caa:	4613      	mov	r3, r2
 8007cac:	00db      	lsls	r3, r3, #3
 8007cae:	4413      	add	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	440b      	add	r3, r1
 8007cb4:	334c      	adds	r3, #76	; 0x4c
 8007cb6:	6819      	ldr	r1, [r3, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	00db      	lsls	r3, r3, #3
 8007cc0:	4413      	add	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4403      	add	r3, r0
 8007cc6:	3348      	adds	r3, #72	; 0x48
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4419      	add	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	00db      	lsls	r3, r3, #3
 8007cd4:	4413      	add	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4403      	add	r3, r0
 8007cda:	334c      	adds	r3, #76	; 0x4c
 8007cdc:	6019      	str	r1, [r3, #0]
 8007cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d113      	bne.n	8007d0c <HAL_PCD_IRQHandler+0x3a2>
 8007ce4:	6879      	ldr	r1, [r7, #4]
 8007ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ce8:	4613      	mov	r3, r2
 8007cea:	00db      	lsls	r3, r3, #3
 8007cec:	4413      	add	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	440b      	add	r3, r1
 8007cf2:	3354      	adds	r3, #84	; 0x54
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d108      	bne.n	8007d0c <HAL_PCD_IRQHandler+0x3a2>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6818      	ldr	r0, [r3, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007d04:	461a      	mov	r2, r3
 8007d06:	2101      	movs	r1, #1
 8007d08:	f004 f82e 	bl	800bd68 <USB_EP0_OutStart>
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	4619      	mov	r1, r3
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f007 fe61 	bl	800f9da <HAL_PCD_DataInStageCallback>
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f003 0308 	and.w	r3, r3, #8
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d008      	beq.n	8007d34 <HAL_PCD_IRQHandler+0x3ca>
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	015a      	lsls	r2, r3, #5
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	4413      	add	r3, r2
 8007d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2e:	461a      	mov	r2, r3
 8007d30:	2308      	movs	r3, #8
 8007d32:	6093      	str	r3, [r2, #8]
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f003 0310 	and.w	r3, r3, #16
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d008      	beq.n	8007d50 <HAL_PCD_IRQHandler+0x3e6>
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	015a      	lsls	r2, r3, #5
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	4413      	add	r3, r2
 8007d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	2310      	movs	r3, #16
 8007d4e:	6093      	str	r3, [r2, #8]
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d008      	beq.n	8007d6c <HAL_PCD_IRQHandler+0x402>
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	015a      	lsls	r2, r3, #5
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	4413      	add	r3, r2
 8007d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d66:	461a      	mov	r2, r3
 8007d68:	2340      	movs	r3, #64	; 0x40
 8007d6a:	6093      	str	r3, [r2, #8]
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	f003 0302 	and.w	r3, r3, #2
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d023      	beq.n	8007dbe <HAL_PCD_IRQHandler+0x454>
 8007d76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d78:	6a38      	ldr	r0, [r7, #32]
 8007d7a:	f002 ff0f 	bl	800ab9c <USB_FlushTxFifo>
 8007d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d80:	4613      	mov	r3, r2
 8007d82:	00db      	lsls	r3, r3, #3
 8007d84:	4413      	add	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	3338      	adds	r3, #56	; 0x38
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	3304      	adds	r3, #4
 8007d90:	617b      	str	r3, [r7, #20]
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	78db      	ldrb	r3, [r3, #3]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d108      	bne.n	8007dac <HAL_PCD_IRQHandler+0x442>
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	70da      	strb	r2, [r3, #3]
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	4619      	mov	r1, r3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f007 fea4 	bl	800faf4 <HAL_PCD_ISOINIncompleteCallback>
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db8:	461a      	mov	r2, r3
 8007dba:	2302      	movs	r3, #2
 8007dbc:	6093      	str	r3, [r2, #8]
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d003      	beq.n	8007dd0 <HAL_PCD_IRQHandler+0x466>
 8007dc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fcdb 	bl	8008786 <PCD_WriteEmptyTxFifo>
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8007dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd8:	085b      	lsrs	r3, r3, #1
 8007dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f47f af2e 	bne.w	8007c40 <HAL_PCD_IRQHandler+0x2d6>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f003 fef9 	bl	800bbe0 <USB_ReadInterrupts>
 8007dee:	4603      	mov	r3, r0
 8007df0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007df4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007df8:	d122      	bne.n	8007e40 <HAL_PCD_IRQHandler+0x4d6>
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	69fa      	ldr	r2, [r7, #28]
 8007e04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e08:	f023 0301 	bic.w	r3, r3, #1
 8007e0c:	6053      	str	r3, [r2, #4]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d108      	bne.n	8007e2a <HAL_PCD_IRQHandler+0x4c0>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8007e20:	2100      	movs	r1, #0
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fec2 	bl	8008bac <HAL_PCDEx_LPM_Callback>
 8007e28:	e002      	b.n	8007e30 <HAL_PCD_IRQHandler+0x4c6>
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f007 fe42 	bl	800fab4 <HAL_PCD_ResumeCallback>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	695a      	ldr	r2, [r3, #20]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007e3e:	615a      	str	r2, [r3, #20]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f003 fecb 	bl	800bbe0 <USB_ReadInterrupts>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e54:	d112      	bne.n	8007e7c <HAL_PCD_IRQHandler+0x512>
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f003 0301 	and.w	r3, r3, #1
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d102      	bne.n	8007e6c <HAL_PCD_IRQHandler+0x502>
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f007 fdfe 	bl	800fa68 <HAL_PCD_SuspendCallback>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	695a      	ldr	r2, [r3, #20]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007e7a:	615a      	str	r2, [r3, #20]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4618      	mov	r0, r3
 8007e82:	f003 fead 	bl	800bbe0 <USB_ReadInterrupts>
 8007e86:	4603      	mov	r3, r0
 8007e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e90:	f040 80b7 	bne.w	8008002 <HAL_PCD_IRQHandler+0x698>
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	69fa      	ldr	r2, [r7, #28]
 8007e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ea2:	f023 0301 	bic.w	r3, r3, #1
 8007ea6:	6053      	str	r3, [r2, #4]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2110      	movs	r1, #16
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f002 fe74 	bl	800ab9c <USB_FlushTxFifo>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eb8:	e046      	b.n	8007f48 <HAL_PCD_IRQHandler+0x5de>
 8007eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ecc:	6093      	str	r3, [r2, #8]
 8007ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed0:	015a      	lsls	r2, r3, #5
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ede:	0151      	lsls	r1, r2, #5
 8007ee0:	69fa      	ldr	r2, [r7, #28]
 8007ee2:	440a      	add	r2, r1
 8007ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ee8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007eec:	6013      	str	r3, [r2, #0]
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef0:	015a      	lsls	r2, r3, #5
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007efa:	461a      	mov	r2, r3
 8007efc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f00:	6093      	str	r3, [r2, #8]
 8007f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f04:	015a      	lsls	r2, r3, #5
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	4413      	add	r3, r2
 8007f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f12:	0151      	lsls	r1, r2, #5
 8007f14:	69fa      	ldr	r2, [r7, #28]
 8007f16:	440a      	add	r2, r1
 8007f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f20:	6013      	str	r3, [r2, #0]
 8007f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f24:	015a      	lsls	r2, r3, #5
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	4413      	add	r3, r2
 8007f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f32:	0151      	lsls	r1, r2, #5
 8007f34:	69fa      	ldr	r2, [r7, #28]
 8007f36:	440a      	add	r2, r1
 8007f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f44:	3301      	adds	r3, #1
 8007f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d3b3      	bcc.n	8007eba <HAL_PCD_IRQHandler+0x550>
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f58:	69db      	ldr	r3, [r3, #28]
 8007f5a:	69fa      	ldr	r2, [r7, #28]
 8007f5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f60:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007f64:	61d3      	str	r3, [r2, #28]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d016      	beq.n	8007f9c <HAL_PCD_IRQHandler+0x632>
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f78:	69fa      	ldr	r2, [r7, #28]
 8007f7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f7e:	f043 030b 	orr.w	r3, r3, #11
 8007f82:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f8e:	69fa      	ldr	r2, [r7, #28]
 8007f90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f94:	f043 030b 	orr.w	r3, r3, #11
 8007f98:	6453      	str	r3, [r2, #68]	; 0x44
 8007f9a:	e015      	b.n	8007fc8 <HAL_PCD_IRQHandler+0x65e>
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fa2:	695b      	ldr	r3, [r3, #20]
 8007fa4:	69fa      	ldr	r2, [r7, #28]
 8007fa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007faa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007fae:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007fb2:	6153      	str	r3, [r2, #20]
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	69fa      	ldr	r2, [r7, #28]
 8007fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fc2:	f043 030b 	orr.w	r3, r3, #11
 8007fc6:	6113      	str	r3, [r2, #16]
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	69fa      	ldr	r2, [r7, #28]
 8007fd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fd6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007fda:	6013      	str	r3, [r2, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6818      	ldr	r0, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	b2d9      	uxtb	r1, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007fec:	461a      	mov	r2, r3
 8007fee:	f003 febb 	bl	800bd68 <USB_EP0_OutStart>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	695a      	ldr	r2, [r3, #20]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008000:	615a      	str	r2, [r3, #20]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4618      	mov	r0, r3
 8008008:	f003 fdea 	bl	800bbe0 <USB_ReadInterrupts>
 800800c:	4603      	mov	r3, r0
 800800e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008016:	d124      	bne.n	8008062 <HAL_PCD_IRQHandler+0x6f8>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4618      	mov	r0, r3
 800801e:	f003 fe80 	bl	800bd22 <USB_ActivateSetup>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4618      	mov	r0, r3
 8008028:	f002 fe35 	bl	800ac96 <USB_GetDevSpeed>
 800802c:	4603      	mov	r3, r0
 800802e:	461a      	mov	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	60da      	str	r2, [r3, #12]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681c      	ldr	r4, [r3, #0]
 8008038:	f001 fa28 	bl	800948c <HAL_RCC_GetHCLKFreq>
 800803c:	4601      	mov	r1, r0
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	b2db      	uxtb	r3, r3
 8008044:	461a      	mov	r2, r3
 8008046:	4620      	mov	r0, r4
 8008048:	f002 fb34 	bl	800a6b4 <USB_SetTurnaroundTime>
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f007 fcec 	bl	800fa2a <HAL_PCD_ResetCallback>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	695a      	ldr	r2, [r3, #20]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008060:	615a      	str	r2, [r3, #20]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4618      	mov	r0, r3
 8008068:	f003 fdba 	bl	800bbe0 <USB_ReadInterrupts>
 800806c:	4603      	mov	r3, r0
 800806e:	f003 0308 	and.w	r3, r3, #8
 8008072:	2b08      	cmp	r3, #8
 8008074:	d10a      	bne.n	800808c <HAL_PCD_IRQHandler+0x722>
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f007 fcc9 	bl	800fa0e <HAL_PCD_SOFCallback>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	695a      	ldr	r2, [r3, #20]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f002 0208 	and.w	r2, r2, #8
 800808a:	615a      	str	r2, [r3, #20]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4618      	mov	r0, r3
 8008092:	f003 fda5 	bl	800bbe0 <USB_ReadInterrupts>
 8008096:	4603      	mov	r3, r0
 8008098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800809c:	2b80      	cmp	r3, #128	; 0x80
 800809e:	d122      	bne.n	80080e6 <HAL_PCD_IRQHandler+0x77c>
 80080a0:	6a3b      	ldr	r3, [r7, #32]
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	619a      	str	r2, [r3, #24]
 80080ac:	2301      	movs	r3, #1
 80080ae:	627b      	str	r3, [r7, #36]	; 0x24
 80080b0:	e014      	b.n	80080dc <HAL_PCD_IRQHandler+0x772>
 80080b2:	6879      	ldr	r1, [r7, #4]
 80080b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080b6:	4613      	mov	r3, r2
 80080b8:	00db      	lsls	r3, r3, #3
 80080ba:	4413      	add	r3, r2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	440b      	add	r3, r1
 80080c0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d105      	bne.n	80080d6 <HAL_PCD_IRQHandler+0x76c>
 80080ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fb27 	bl	8008724 <HAL_PCD_EP_Abort>
 80080d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d8:	3301      	adds	r3, #1
 80080da:	627b      	str	r3, [r7, #36]	; 0x24
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d3e5      	bcc.n	80080b2 <HAL_PCD_IRQHandler+0x748>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4618      	mov	r0, r3
 80080ec:	f003 fd78 	bl	800bbe0 <USB_ReadInterrupts>
 80080f0:	4603      	mov	r3, r0
 80080f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080fa:	d13b      	bne.n	8008174 <HAL_PCD_IRQHandler+0x80a>
 80080fc:	2301      	movs	r3, #1
 80080fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008100:	e02b      	b.n	800815a <HAL_PCD_IRQHandler+0x7f0>
 8008102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	4413      	add	r3, r2
 800810a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	61bb      	str	r3, [r7, #24]
 8008112:	6879      	ldr	r1, [r7, #4]
 8008114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008116:	4613      	mov	r3, r2
 8008118:	00db      	lsls	r3, r3, #3
 800811a:	4413      	add	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	440b      	add	r3, r1
 8008120:	3340      	adds	r3, #64	; 0x40
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d115      	bne.n	8008154 <HAL_PCD_IRQHandler+0x7ea>
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	2b00      	cmp	r3, #0
 800812c:	da12      	bge.n	8008154 <HAL_PCD_IRQHandler+0x7ea>
 800812e:	6879      	ldr	r1, [r7, #4]
 8008130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008132:	4613      	mov	r3, r2
 8008134:	00db      	lsls	r3, r3, #3
 8008136:	4413      	add	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	440b      	add	r3, r1
 800813c:	333f      	adds	r3, #63	; 0x3f
 800813e:	2201      	movs	r2, #1
 8008140:	701a      	strb	r2, [r3, #0]
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	b2db      	uxtb	r3, r3
 8008146:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800814a:	b2db      	uxtb	r3, r3
 800814c:	4619      	mov	r1, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fae8 	bl	8008724 <HAL_PCD_EP_Abort>
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	3301      	adds	r3, #1
 8008158:	627b      	str	r3, [r7, #36]	; 0x24
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008160:	429a      	cmp	r2, r3
 8008162:	d3ce      	bcc.n	8008102 <HAL_PCD_IRQHandler+0x798>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	695a      	ldr	r2, [r3, #20]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008172:	615a      	str	r2, [r3, #20]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4618      	mov	r0, r3
 800817a:	f003 fd31 	bl	800bbe0 <USB_ReadInterrupts>
 800817e:	4603      	mov	r3, r0
 8008180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008184:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008188:	d155      	bne.n	8008236 <HAL_PCD_IRQHandler+0x8cc>
 800818a:	2301      	movs	r3, #1
 800818c:	627b      	str	r3, [r7, #36]	; 0x24
 800818e:	e045      	b.n	800821c <HAL_PCD_IRQHandler+0x8b2>
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	015a      	lsls	r2, r3, #5
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	4413      	add	r3, r2
 8008198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	61bb      	str	r3, [r7, #24]
 80081a0:	6879      	ldr	r1, [r7, #4]
 80081a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081a4:	4613      	mov	r3, r2
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	4413      	add	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	440b      	add	r3, r1
 80081ae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d12e      	bne.n	8008216 <HAL_PCD_IRQHandler+0x8ac>
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	da2b      	bge.n	8008216 <HAL_PCD_IRQHandler+0x8ac>
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d121      	bne.n	8008216 <HAL_PCD_IRQHandler+0x8ac>
 80081d2:	6879      	ldr	r1, [r7, #4]
 80081d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d6:	4613      	mov	r3, r2
 80081d8:	00db      	lsls	r3, r3, #3
 80081da:	4413      	add	r3, r2
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	440b      	add	r3, r1
 80081e0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80081e4:	2201      	movs	r2, #1
 80081e6:	701a      	strb	r2, [r3, #0]
 80081e8:	6a3b      	ldr	r3, [r7, #32]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	619a      	str	r2, [r3, #24]
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	695b      	ldr	r3, [r3, #20]
 80081f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10a      	bne.n	8008216 <HAL_PCD_IRQHandler+0x8ac>
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	69fa      	ldr	r2, [r7, #28]
 800820a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800820e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008212:	6053      	str	r3, [r2, #4]
 8008214:	e007      	b.n	8008226 <HAL_PCD_IRQHandler+0x8bc>
 8008216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008218:	3301      	adds	r3, #1
 800821a:	627b      	str	r3, [r7, #36]	; 0x24
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008222:	429a      	cmp	r2, r3
 8008224:	d3b4      	bcc.n	8008190 <HAL_PCD_IRQHandler+0x826>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	695a      	ldr	r2, [r3, #20]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008234:	615a      	str	r2, [r3, #20]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4618      	mov	r0, r3
 800823c:	f003 fcd0 	bl	800bbe0 <USB_ReadInterrupts>
 8008240:	4603      	mov	r3, r0
 8008242:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800824a:	d10a      	bne.n	8008262 <HAL_PCD_IRQHandler+0x8f8>
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f007 fc63 	bl	800fb18 <HAL_PCD_ConnectCallback>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	695a      	ldr	r2, [r3, #20]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008260:	615a      	str	r2, [r3, #20]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4618      	mov	r0, r3
 8008268:	f003 fcba 	bl	800bbe0 <USB_ReadInterrupts>
 800826c:	4603      	mov	r3, r0
 800826e:	f003 0304 	and.w	r3, r3, #4
 8008272:	2b04      	cmp	r3, #4
 8008274:	d115      	bne.n	80082a2 <HAL_PCD_IRQHandler+0x938>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	61bb      	str	r3, [r7, #24]
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	f003 0304 	and.w	r3, r3, #4
 8008284:	2b00      	cmp	r3, #0
 8008286:	d002      	beq.n	800828e <HAL_PCD_IRQHandler+0x924>
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f007 fc53 	bl	800fb34 <HAL_PCD_DisconnectCallback>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6859      	ldr	r1, [r3, #4]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	69ba      	ldr	r2, [r7, #24]
 800829a:	430a      	orrs	r2, r1
 800829c:	605a      	str	r2, [r3, #4]
 800829e:	e000      	b.n	80082a2 <HAL_PCD_IRQHandler+0x938>
 80082a0:	bf00      	nop
 80082a2:	3734      	adds	r7, #52	; 0x34
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd90      	pop	{r4, r7, pc}

080082a8 <HAL_PCD_SetAddress>:
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	460b      	mov	r3, r1
 80082b2:	70fb      	strb	r3, [r7, #3]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d101      	bne.n	80082c2 <HAL_PCD_SetAddress+0x1a>
 80082be:	2302      	movs	r3, #2
 80082c0:	e013      	b.n	80082ea <HAL_PCD_SetAddress+0x42>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	78fa      	ldrb	r2, [r7, #3]
 80082ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	78fa      	ldrb	r2, [r7, #3]
 80082d8:	4611      	mov	r1, r2
 80082da:	4618      	mov	r0, r3
 80082dc:	f003 fc18 	bl	800bb10 <USB_SetDevAddress>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80082e8:	2300      	movs	r3, #0
 80082ea:	4618      	mov	r0, r3
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <HAL_PCD_EP_Open>:
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b084      	sub	sp, #16
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	4608      	mov	r0, r1
 80082fc:	4611      	mov	r1, r2
 80082fe:	461a      	mov	r2, r3
 8008300:	4603      	mov	r3, r0
 8008302:	70fb      	strb	r3, [r7, #3]
 8008304:	460b      	mov	r3, r1
 8008306:	803b      	strh	r3, [r7, #0]
 8008308:	4613      	mov	r3, r2
 800830a:	70bb      	strb	r3, [r7, #2]
 800830c:	2300      	movs	r3, #0
 800830e:	72fb      	strb	r3, [r7, #11]
 8008310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008314:	2b00      	cmp	r3, #0
 8008316:	da0f      	bge.n	8008338 <HAL_PCD_EP_Open+0x46>
 8008318:	78fb      	ldrb	r3, [r7, #3]
 800831a:	f003 020f 	and.w	r2, r3, #15
 800831e:	4613      	mov	r3, r2
 8008320:	00db      	lsls	r3, r3, #3
 8008322:	4413      	add	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	3338      	adds	r3, #56	; 0x38
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	4413      	add	r3, r2
 800832c:	3304      	adds	r3, #4
 800832e:	60fb      	str	r3, [r7, #12]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2201      	movs	r2, #1
 8008334:	705a      	strb	r2, [r3, #1]
 8008336:	e00f      	b.n	8008358 <HAL_PCD_EP_Open+0x66>
 8008338:	78fb      	ldrb	r3, [r7, #3]
 800833a:	f003 020f 	and.w	r2, r3, #15
 800833e:	4613      	mov	r3, r2
 8008340:	00db      	lsls	r3, r3, #3
 8008342:	4413      	add	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	4413      	add	r3, r2
 800834e:	3304      	adds	r3, #4
 8008350:	60fb      	str	r3, [r7, #12]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	705a      	strb	r2, [r3, #1]
 8008358:	78fb      	ldrb	r3, [r7, #3]
 800835a:	f003 030f 	and.w	r3, r3, #15
 800835e:	b2da      	uxtb	r2, r3
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	701a      	strb	r2, [r3, #0]
 8008364:	883a      	ldrh	r2, [r7, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	60da      	str	r2, [r3, #12]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	78ba      	ldrb	r2, [r7, #2]
 800836e:	711a      	strb	r2, [r3, #4]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	785b      	ldrb	r3, [r3, #1]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d004      	beq.n	8008382 <HAL_PCD_EP_Open+0x90>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	b29a      	uxth	r2, r3
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	811a      	strh	r2, [r3, #8]
 8008382:	78bb      	ldrb	r3, [r7, #2]
 8008384:	2b02      	cmp	r3, #2
 8008386:	d102      	bne.n	800838e <HAL_PCD_EP_Open+0x9c>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	715a      	strb	r2, [r3, #5]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008394:	2b01      	cmp	r3, #1
 8008396:	d101      	bne.n	800839c <HAL_PCD_EP_Open+0xaa>
 8008398:	2302      	movs	r3, #2
 800839a:	e00e      	b.n	80083ba <HAL_PCD_EP_Open+0xc8>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68f9      	ldr	r1, [r7, #12]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f002 fc98 	bl	800ace0 <USB_ActivateEndpoint>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80083b8:	7afb      	ldrb	r3, [r7, #11]
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <HAL_PCD_EP_Close>:
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b084      	sub	sp, #16
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	460b      	mov	r3, r1
 80083cc:	70fb      	strb	r3, [r7, #3]
 80083ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	da0f      	bge.n	80083f6 <HAL_PCD_EP_Close+0x34>
 80083d6:	78fb      	ldrb	r3, [r7, #3]
 80083d8:	f003 020f 	and.w	r2, r3, #15
 80083dc:	4613      	mov	r3, r2
 80083de:	00db      	lsls	r3, r3, #3
 80083e0:	4413      	add	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	3338      	adds	r3, #56	; 0x38
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	4413      	add	r3, r2
 80083ea:	3304      	adds	r3, #4
 80083ec:	60fb      	str	r3, [r7, #12]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2201      	movs	r2, #1
 80083f2:	705a      	strb	r2, [r3, #1]
 80083f4:	e00f      	b.n	8008416 <HAL_PCD_EP_Close+0x54>
 80083f6:	78fb      	ldrb	r3, [r7, #3]
 80083f8:	f003 020f 	and.w	r2, r3, #15
 80083fc:	4613      	mov	r3, r2
 80083fe:	00db      	lsls	r3, r3, #3
 8008400:	4413      	add	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	4413      	add	r3, r2
 800840c:	3304      	adds	r3, #4
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	705a      	strb	r2, [r3, #1]
 8008416:	78fb      	ldrb	r3, [r7, #3]
 8008418:	f003 030f 	and.w	r3, r3, #15
 800841c:	b2da      	uxtb	r2, r3
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	701a      	strb	r2, [r3, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008428:	2b01      	cmp	r3, #1
 800842a:	d101      	bne.n	8008430 <HAL_PCD_EP_Close+0x6e>
 800842c:	2302      	movs	r3, #2
 800842e:	e00e      	b.n	800844e <HAL_PCD_EP_Close+0x8c>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68f9      	ldr	r1, [r7, #12]
 800843e:	4618      	mov	r0, r3
 8008440:	f002 fcd6 	bl	800adf0 <USB_DeactivateEndpoint>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800844c:	2300      	movs	r3, #0
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <HAL_PCD_EP_Receive>:
 8008456:	b580      	push	{r7, lr}
 8008458:	b086      	sub	sp, #24
 800845a:	af00      	add	r7, sp, #0
 800845c:	60f8      	str	r0, [r7, #12]
 800845e:	607a      	str	r2, [r7, #4]
 8008460:	603b      	str	r3, [r7, #0]
 8008462:	460b      	mov	r3, r1
 8008464:	72fb      	strb	r3, [r7, #11]
 8008466:	7afb      	ldrb	r3, [r7, #11]
 8008468:	f003 020f 	and.w	r2, r3, #15
 800846c:	4613      	mov	r3, r2
 800846e:	00db      	lsls	r3, r3, #3
 8008470:	4413      	add	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	4413      	add	r3, r2
 800847c:	3304      	adds	r3, #4
 800847e:	617b      	str	r3, [r7, #20]
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	611a      	str	r2, [r3, #16]
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	619a      	str	r2, [r3, #24]
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	2200      	movs	r2, #0
 8008490:	621a      	str	r2, [r3, #32]
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	2200      	movs	r2, #0
 8008496:	705a      	strb	r2, [r3, #1]
 8008498:	7afb      	ldrb	r3, [r7, #11]
 800849a:	f003 030f 	and.w	r3, r3, #15
 800849e:	b2da      	uxtb	r2, r3
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	701a      	strb	r2, [r3, #0]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d102      	bne.n	80084b2 <HAL_PCD_EP_Receive+0x5c>
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	615a      	str	r2, [r3, #20]
 80084b2:	7afb      	ldrb	r3, [r7, #11]
 80084b4:	f003 030f 	and.w	r3, r3, #15
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d109      	bne.n	80084d0 <HAL_PCD_EP_Receive+0x7a>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6818      	ldr	r0, [r3, #0]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	461a      	mov	r2, r3
 80084c8:	6979      	ldr	r1, [r7, #20]
 80084ca:	f002 ffb5 	bl	800b438 <USB_EP0StartXfer>
 80084ce:	e008      	b.n	80084e2 <HAL_PCD_EP_Receive+0x8c>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6818      	ldr	r0, [r3, #0]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	461a      	mov	r2, r3
 80084dc:	6979      	ldr	r1, [r7, #20]
 80084de:	f002 fd63 	bl	800afa8 <USB_EPStartXfer>
 80084e2:	2300      	movs	r3, #0
 80084e4:	4618      	mov	r0, r3
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <HAL_PCD_EP_GetRxCount>:
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	460b      	mov	r3, r1
 80084f6:	70fb      	strb	r3, [r7, #3]
 80084f8:	78fb      	ldrb	r3, [r7, #3]
 80084fa:	f003 020f 	and.w	r2, r3, #15
 80084fe:	6879      	ldr	r1, [r7, #4]
 8008500:	4613      	mov	r3, r2
 8008502:	00db      	lsls	r3, r3, #3
 8008504:	4413      	add	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	440b      	add	r3, r1
 800850a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_PCD_EP_Transmit>:
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	607a      	str	r2, [r7, #4]
 8008526:	603b      	str	r3, [r7, #0]
 8008528:	460b      	mov	r3, r1
 800852a:	72fb      	strb	r3, [r7, #11]
 800852c:	7afb      	ldrb	r3, [r7, #11]
 800852e:	f003 020f 	and.w	r2, r3, #15
 8008532:	4613      	mov	r3, r2
 8008534:	00db      	lsls	r3, r3, #3
 8008536:	4413      	add	r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	3338      	adds	r3, #56	; 0x38
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	4413      	add	r3, r2
 8008540:	3304      	adds	r3, #4
 8008542:	617b      	str	r3, [r7, #20]
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	611a      	str	r2, [r3, #16]
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	619a      	str	r2, [r3, #24]
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	2200      	movs	r2, #0
 8008554:	621a      	str	r2, [r3, #32]
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2201      	movs	r2, #1
 800855a:	705a      	strb	r2, [r3, #1]
 800855c:	7afb      	ldrb	r3, [r7, #11]
 800855e:	f003 030f 	and.w	r3, r3, #15
 8008562:	b2da      	uxtb	r2, r3
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	701a      	strb	r2, [r3, #0]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d102      	bne.n	8008576 <HAL_PCD_EP_Transmit+0x5a>
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	615a      	str	r2, [r3, #20]
 8008576:	7afb      	ldrb	r3, [r7, #11]
 8008578:	f003 030f 	and.w	r3, r3, #15
 800857c:	2b00      	cmp	r3, #0
 800857e:	d109      	bne.n	8008594 <HAL_PCD_EP_Transmit+0x78>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6818      	ldr	r0, [r3, #0]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	b2db      	uxtb	r3, r3
 800858a:	461a      	mov	r2, r3
 800858c:	6979      	ldr	r1, [r7, #20]
 800858e:	f002 ff53 	bl	800b438 <USB_EP0StartXfer>
 8008592:	e008      	b.n	80085a6 <HAL_PCD_EP_Transmit+0x8a>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6818      	ldr	r0, [r3, #0]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	b2db      	uxtb	r3, r3
 800859e:	461a      	mov	r2, r3
 80085a0:	6979      	ldr	r1, [r7, #20]
 80085a2:	f002 fd01 	bl	800afa8 <USB_EPStartXfer>
 80085a6:	2300      	movs	r3, #0
 80085a8:	4618      	mov	r0, r3
 80085aa:	3718      	adds	r7, #24
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <HAL_PCD_EP_SetStall>:
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	460b      	mov	r3, r1
 80085ba:	70fb      	strb	r3, [r7, #3]
 80085bc:	78fb      	ldrb	r3, [r7, #3]
 80085be:	f003 020f 	and.w	r2, r3, #15
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d901      	bls.n	80085ce <HAL_PCD_EP_SetStall+0x1e>
 80085ca:	2301      	movs	r3, #1
 80085cc:	e050      	b.n	8008670 <HAL_PCD_EP_SetStall+0xc0>
 80085ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	da0f      	bge.n	80085f6 <HAL_PCD_EP_SetStall+0x46>
 80085d6:	78fb      	ldrb	r3, [r7, #3]
 80085d8:	f003 020f 	and.w	r2, r3, #15
 80085dc:	4613      	mov	r3, r2
 80085de:	00db      	lsls	r3, r3, #3
 80085e0:	4413      	add	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	3338      	adds	r3, #56	; 0x38
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	4413      	add	r3, r2
 80085ea:	3304      	adds	r3, #4
 80085ec:	60fb      	str	r3, [r7, #12]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2201      	movs	r2, #1
 80085f2:	705a      	strb	r2, [r3, #1]
 80085f4:	e00d      	b.n	8008612 <HAL_PCD_EP_SetStall+0x62>
 80085f6:	78fa      	ldrb	r2, [r7, #3]
 80085f8:	4613      	mov	r3, r2
 80085fa:	00db      	lsls	r3, r3, #3
 80085fc:	4413      	add	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	4413      	add	r3, r2
 8008608:	3304      	adds	r3, #4
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	705a      	strb	r2, [r3, #1]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2201      	movs	r2, #1
 8008616:	709a      	strb	r2, [r3, #2]
 8008618:	78fb      	ldrb	r3, [r7, #3]
 800861a:	f003 030f 	and.w	r3, r3, #15
 800861e:	b2da      	uxtb	r2, r3
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	701a      	strb	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800862a:	2b01      	cmp	r3, #1
 800862c:	d101      	bne.n	8008632 <HAL_PCD_EP_SetStall+0x82>
 800862e:	2302      	movs	r3, #2
 8008630:	e01e      	b.n	8008670 <HAL_PCD_EP_SetStall+0xc0>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68f9      	ldr	r1, [r7, #12]
 8008640:	4618      	mov	r0, r3
 8008642:	f003 f991 	bl	800b968 <USB_EPSetStall>
 8008646:	78fb      	ldrb	r3, [r7, #3]
 8008648:	f003 030f 	and.w	r3, r3, #15
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10a      	bne.n	8008666 <HAL_PCD_EP_SetStall+0xb6>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6818      	ldr	r0, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	b2d9      	uxtb	r1, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008660:	461a      	mov	r2, r3
 8008662:	f003 fb81 	bl	800bd68 <USB_EP0_OutStart>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800866e:	2300      	movs	r3, #0
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <HAL_PCD_EP_ClrStall>:
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	460b      	mov	r3, r1
 8008682:	70fb      	strb	r3, [r7, #3]
 8008684:	78fb      	ldrb	r3, [r7, #3]
 8008686:	f003 020f 	and.w	r2, r3, #15
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	429a      	cmp	r2, r3
 8008690:	d901      	bls.n	8008696 <HAL_PCD_EP_ClrStall+0x1e>
 8008692:	2301      	movs	r3, #1
 8008694:	e042      	b.n	800871c <HAL_PCD_EP_ClrStall+0xa4>
 8008696:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800869a:	2b00      	cmp	r3, #0
 800869c:	da0f      	bge.n	80086be <HAL_PCD_EP_ClrStall+0x46>
 800869e:	78fb      	ldrb	r3, [r7, #3]
 80086a0:	f003 020f 	and.w	r2, r3, #15
 80086a4:	4613      	mov	r3, r2
 80086a6:	00db      	lsls	r3, r3, #3
 80086a8:	4413      	add	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	3338      	adds	r3, #56	; 0x38
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	4413      	add	r3, r2
 80086b2:	3304      	adds	r3, #4
 80086b4:	60fb      	str	r3, [r7, #12]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2201      	movs	r2, #1
 80086ba:	705a      	strb	r2, [r3, #1]
 80086bc:	e00f      	b.n	80086de <HAL_PCD_EP_ClrStall+0x66>
 80086be:	78fb      	ldrb	r3, [r7, #3]
 80086c0:	f003 020f 	and.w	r2, r3, #15
 80086c4:	4613      	mov	r3, r2
 80086c6:	00db      	lsls	r3, r3, #3
 80086c8:	4413      	add	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	4413      	add	r3, r2
 80086d4:	3304      	adds	r3, #4
 80086d6:	60fb      	str	r3, [r7, #12]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	705a      	strb	r2, [r3, #1]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	709a      	strb	r2, [r3, #2]
 80086e4:	78fb      	ldrb	r3, [r7, #3]
 80086e6:	f003 030f 	and.w	r3, r3, #15
 80086ea:	b2da      	uxtb	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	701a      	strb	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d101      	bne.n	80086fe <HAL_PCD_EP_ClrStall+0x86>
 80086fa:	2302      	movs	r3, #2
 80086fc:	e00e      	b.n	800871c <HAL_PCD_EP_ClrStall+0xa4>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68f9      	ldr	r1, [r7, #12]
 800870c:	4618      	mov	r0, r3
 800870e:	f003 f999 	bl	800ba44 <USB_EPClearStall>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800871a:	2300      	movs	r3, #0
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <HAL_PCD_EP_Abort>:
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	70fb      	strb	r3, [r7, #3]
 8008730:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008734:	2b00      	cmp	r3, #0
 8008736:	da0c      	bge.n	8008752 <HAL_PCD_EP_Abort+0x2e>
 8008738:	78fb      	ldrb	r3, [r7, #3]
 800873a:	f003 020f 	and.w	r2, r3, #15
 800873e:	4613      	mov	r3, r2
 8008740:	00db      	lsls	r3, r3, #3
 8008742:	4413      	add	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	3338      	adds	r3, #56	; 0x38
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	4413      	add	r3, r2
 800874c:	3304      	adds	r3, #4
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	e00c      	b.n	800876c <HAL_PCD_EP_Abort+0x48>
 8008752:	78fb      	ldrb	r3, [r7, #3]
 8008754:	f003 020f 	and.w	r2, r3, #15
 8008758:	4613      	mov	r3, r2
 800875a:	00db      	lsls	r3, r3, #3
 800875c:	4413      	add	r3, r2
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	4413      	add	r3, r2
 8008768:	3304      	adds	r3, #4
 800876a:	60fb      	str	r3, [r7, #12]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68f9      	ldr	r1, [r7, #12]
 8008772:	4618      	mov	r0, r3
 8008774:	f002 ffb8 	bl	800b6e8 <USB_EPStopXfer>
 8008778:	4603      	mov	r3, r0
 800877a:	72fb      	strb	r3, [r7, #11]
 800877c:	7afb      	ldrb	r3, [r7, #11]
 800877e:	4618      	mov	r0, r3
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <PCD_WriteEmptyTxFifo>:
 8008786:	b580      	push	{r7, lr}
 8008788:	b08a      	sub	sp, #40	; 0x28
 800878a:	af02      	add	r7, sp, #8
 800878c:	6078      	str	r0, [r7, #4]
 800878e:	6039      	str	r1, [r7, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	617b      	str	r3, [r7, #20]
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	613b      	str	r3, [r7, #16]
 800879a:	683a      	ldr	r2, [r7, #0]
 800879c:	4613      	mov	r3, r2
 800879e:	00db      	lsls	r3, r3, #3
 80087a0:	4413      	add	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	3338      	adds	r3, #56	; 0x38
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	4413      	add	r3, r2
 80087aa:	3304      	adds	r3, #4
 80087ac:	60fb      	str	r3, [r7, #12]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6a1a      	ldr	r2, [r3, #32]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d901      	bls.n	80087be <PCD_WriteEmptyTxFifo+0x38>
 80087ba:	2301      	movs	r3, #1
 80087bc:	e06c      	b.n	8008898 <PCD_WriteEmptyTxFifo+0x112>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	699a      	ldr	r2, [r3, #24]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	61fb      	str	r3, [r7, #28]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	69fa      	ldr	r2, [r7, #28]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d902      	bls.n	80087da <PCD_WriteEmptyTxFifo+0x54>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	61fb      	str	r3, [r7, #28]
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	3303      	adds	r3, #3
 80087de:	089b      	lsrs	r3, r3, #2
 80087e0:	61bb      	str	r3, [r7, #24]
 80087e2:	e02b      	b.n	800883c <PCD_WriteEmptyTxFifo+0xb6>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	699a      	ldr	r2, [r3, #24]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6a1b      	ldr	r3, [r3, #32]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	61fb      	str	r3, [r7, #28]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	69fa      	ldr	r2, [r7, #28]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d902      	bls.n	8008800 <PCD_WriteEmptyTxFifo+0x7a>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	61fb      	str	r3, [r7, #28]
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	3303      	adds	r3, #3
 8008804:	089b      	lsrs	r3, r3, #2
 8008806:	61bb      	str	r3, [r7, #24]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6919      	ldr	r1, [r3, #16]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	b2da      	uxtb	r2, r3
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	b298      	uxth	r0, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	b2db      	uxtb	r3, r3
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	4603      	mov	r3, r0
 800881e:	6978      	ldr	r0, [r7, #20]
 8008820:	f003 f80c 	bl	800b83c <USB_WritePacket>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	691a      	ldr	r2, [r3, #16]
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	441a      	add	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	611a      	str	r2, [r3, #16]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6a1a      	ldr	r2, [r3, #32]
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	441a      	add	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	621a      	str	r2, [r3, #32]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	015a      	lsls	r2, r3, #5
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	4413      	add	r3, r2
 8008844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	b29b      	uxth	r3, r3
 800884c:	69ba      	ldr	r2, [r7, #24]
 800884e:	429a      	cmp	r2, r3
 8008850:	d809      	bhi.n	8008866 <PCD_WriteEmptyTxFifo+0xe0>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6a1a      	ldr	r2, [r3, #32]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	429a      	cmp	r2, r3
 800885c:	d203      	bcs.n	8008866 <PCD_WriteEmptyTxFifo+0xe0>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1be      	bne.n	80087e4 <PCD_WriteEmptyTxFifo+0x5e>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	699a      	ldr	r2, [r3, #24]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	429a      	cmp	r2, r3
 8008870:	d811      	bhi.n	8008896 <PCD_WriteEmptyTxFifo+0x110>
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	f003 030f 	and.w	r3, r3, #15
 8008878:	2201      	movs	r2, #1
 800887a:	fa02 f303 	lsl.w	r3, r2, r3
 800887e:	60bb      	str	r3, [r7, #8]
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	43db      	mvns	r3, r3
 800888c:	6939      	ldr	r1, [r7, #16]
 800888e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008892:	4013      	ands	r3, r2
 8008894:	634b      	str	r3, [r1, #52]	; 0x34
 8008896:	2300      	movs	r3, #0
 8008898:	4618      	mov	r0, r3
 800889a:	3720      	adds	r7, #32
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <PCD_EP_OutXfrComplete_int>:
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b088      	sub	sp, #32
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	61fb      	str	r3, [r7, #28]
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	61bb      	str	r3, [r7, #24]
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	333c      	adds	r3, #60	; 0x3c
 80088b8:	3304      	adds	r3, #4
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	617b      	str	r3, [r7, #20]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	015a      	lsls	r2, r3, #5
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	4413      	add	r3, r2
 80088c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	613b      	str	r3, [r7, #16]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d17b      	bne.n	80089ce <PCD_EP_OutXfrComplete_int+0x12e>
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	f003 0308 	and.w	r3, r3, #8
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d015      	beq.n	800890c <PCD_EP_OutXfrComplete_int+0x6c>
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	4a61      	ldr	r2, [pc, #388]	; (8008a68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	f240 80b9 	bls.w	8008a5c <PCD_EP_OutXfrComplete_int+0x1bc>
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 80b3 	beq.w	8008a5c <PCD_EP_OutXfrComplete_int+0x1bc>
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	015a      	lsls	r2, r3, #5
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	4413      	add	r3, r2
 80088fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008902:	461a      	mov	r2, r3
 8008904:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008908:	6093      	str	r3, [r2, #8]
 800890a:	e0a7      	b.n	8008a5c <PCD_EP_OutXfrComplete_int+0x1bc>
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	f003 0320 	and.w	r3, r3, #32
 8008912:	2b00      	cmp	r3, #0
 8008914:	d009      	beq.n	800892a <PCD_EP_OutXfrComplete_int+0x8a>
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	015a      	lsls	r2, r3, #5
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	4413      	add	r3, r2
 800891e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008922:	461a      	mov	r2, r3
 8008924:	2320      	movs	r3, #32
 8008926:	6093      	str	r3, [r2, #8]
 8008928:	e098      	b.n	8008a5c <PCD_EP_OutXfrComplete_int+0x1bc>
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008930:	2b00      	cmp	r3, #0
 8008932:	f040 8093 	bne.w	8008a5c <PCD_EP_OutXfrComplete_int+0x1bc>
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	4a4b      	ldr	r2, [pc, #300]	; (8008a68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d90f      	bls.n	800895e <PCD_EP_OutXfrComplete_int+0xbe>
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00a      	beq.n	800895e <PCD_EP_OutXfrComplete_int+0xbe>
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	015a      	lsls	r2, r3, #5
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	4413      	add	r3, r2
 8008950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008954:	461a      	mov	r2, r3
 8008956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800895a:	6093      	str	r3, [r2, #8]
 800895c:	e07e      	b.n	8008a5c <PCD_EP_OutXfrComplete_int+0x1bc>
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	4613      	mov	r3, r2
 8008962:	00db      	lsls	r3, r3, #3
 8008964:	4413      	add	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	4413      	add	r3, r2
 8008970:	3304      	adds	r3, #4
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	69da      	ldr	r2, [r3, #28]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	0159      	lsls	r1, r3, #5
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	440b      	add	r3, r1
 8008980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800898a:	1ad2      	subs	r2, r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	621a      	str	r2, [r3, #32]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d114      	bne.n	80089c0 <PCD_EP_OutXfrComplete_int+0x120>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d109      	bne.n	80089b2 <PCD_EP_OutXfrComplete_int+0x112>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6818      	ldr	r0, [r3, #0]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80089a8:	461a      	mov	r2, r3
 80089aa:	2101      	movs	r1, #1
 80089ac:	f003 f9dc 	bl	800bd68 <USB_EP0_OutStart>
 80089b0:	e006      	b.n	80089c0 <PCD_EP_OutXfrComplete_int+0x120>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	691a      	ldr	r2, [r3, #16]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	441a      	add	r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	611a      	str	r2, [r3, #16]
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f006 ffec 	bl	800f9a4 <HAL_PCD_DataOutStageCallback>
 80089cc:	e046      	b.n	8008a5c <PCD_EP_OutXfrComplete_int+0x1bc>
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	4a26      	ldr	r2, [pc, #152]	; (8008a6c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d124      	bne.n	8008a20 <PCD_EP_OutXfrComplete_int+0x180>
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00a      	beq.n	80089f6 <PCD_EP_OutXfrComplete_int+0x156>
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	015a      	lsls	r2, r3, #5
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	4413      	add	r3, r2
 80089e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ec:	461a      	mov	r2, r3
 80089ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089f2:	6093      	str	r3, [r2, #8]
 80089f4:	e032      	b.n	8008a5c <PCD_EP_OutXfrComplete_int+0x1bc>
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	f003 0320 	and.w	r3, r3, #32
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d008      	beq.n	8008a12 <PCD_EP_OutXfrComplete_int+0x172>
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	015a      	lsls	r2, r3, #5
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	4413      	add	r3, r2
 8008a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	2320      	movs	r3, #32
 8008a10:	6093      	str	r3, [r2, #8]
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	4619      	mov	r1, r3
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f006 ffc3 	bl	800f9a4 <HAL_PCD_DataOutStageCallback>
 8008a1e:	e01d      	b.n	8008a5c <PCD_EP_OutXfrComplete_int+0x1bc>
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d114      	bne.n	8008a50 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008a26:	6879      	ldr	r1, [r7, #4]
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	00db      	lsls	r3, r3, #3
 8008a2e:	4413      	add	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	440b      	add	r3, r1
 8008a34:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d108      	bne.n	8008a50 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6818      	ldr	r0, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a48:	461a      	mov	r2, r3
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	f003 f98c 	bl	800bd68 <USB_EP0_OutStart>
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f006 ffa4 	bl	800f9a4 <HAL_PCD_DataOutStageCallback>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3720      	adds	r7, #32
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	4f54300a 	.word	0x4f54300a
 8008a6c:	4f54310a 	.word	0x4f54310a

08008a70 <PCD_EP_OutSetupPacket_int>:
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	617b      	str	r3, [r7, #20]
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	613b      	str	r3, [r7, #16]
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	333c      	adds	r3, #60	; 0x3c
 8008a88:	3304      	adds	r3, #4
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	60fb      	str	r3, [r7, #12]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	015a      	lsls	r2, r3, #5
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	4413      	add	r3, r2
 8008a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	60bb      	str	r3, [r7, #8]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	4a15      	ldr	r2, [pc, #84]	; (8008af8 <PCD_EP_OutSetupPacket_int+0x88>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d90e      	bls.n	8008ac4 <PCD_EP_OutSetupPacket_int+0x54>
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d009      	beq.n	8008ac4 <PCD_EP_OutSetupPacket_int+0x54>
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	015a      	lsls	r2, r3, #5
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008abc:	461a      	mov	r2, r3
 8008abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ac2:	6093      	str	r3, [r2, #8]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f006 ff5b 	bl	800f980 <HAL_PCD_SetupStageCallback>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	4a0a      	ldr	r2, [pc, #40]	; (8008af8 <PCD_EP_OutSetupPacket_int+0x88>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d90c      	bls.n	8008aec <PCD_EP_OutSetupPacket_int+0x7c>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d108      	bne.n	8008aec <PCD_EP_OutSetupPacket_int+0x7c>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6818      	ldr	r0, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	2101      	movs	r1, #1
 8008ae8:	f003 f93e 	bl	800bd68 <USB_EP0_OutStart>
 8008aec:	2300      	movs	r3, #0
 8008aee:	4618      	mov	r0, r3
 8008af0:	3718      	adds	r7, #24
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	4f54300a 	.word	0x4f54300a

08008afc <HAL_PCDEx_SetTxFiFo>:
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	70fb      	strb	r3, [r7, #3]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	803b      	strh	r3, [r7, #0]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b12:	60bb      	str	r3, [r7, #8]
 8008b14:	78fb      	ldrb	r3, [r7, #3]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d107      	bne.n	8008b2a <HAL_PCDEx_SetTxFiFo+0x2e>
 8008b1a:	883b      	ldrh	r3, [r7, #0]
 8008b1c:	0419      	lsls	r1, r3, #16
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	430a      	orrs	r2, r1
 8008b26:	629a      	str	r2, [r3, #40]	; 0x28
 8008b28:	e028      	b.n	8008b7c <HAL_PCDEx_SetTxFiFo+0x80>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b30:	0c1b      	lsrs	r3, r3, #16
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	4413      	add	r3, r2
 8008b36:	60bb      	str	r3, [r7, #8]
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]
 8008b3c:	e00d      	b.n	8008b5a <HAL_PCDEx_SetTxFiFo+0x5e>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
 8008b44:	3340      	adds	r3, #64	; 0x40
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4413      	add	r3, r2
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	0c1b      	lsrs	r3, r3, #16
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	4413      	add	r3, r2
 8008b52:	60bb      	str	r3, [r7, #8]
 8008b54:	7bfb      	ldrb	r3, [r7, #15]
 8008b56:	3301      	adds	r3, #1
 8008b58:	73fb      	strb	r3, [r7, #15]
 8008b5a:	7bfa      	ldrb	r2, [r7, #15]
 8008b5c:	78fb      	ldrb	r3, [r7, #3]
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d3ec      	bcc.n	8008b3e <HAL_PCDEx_SetTxFiFo+0x42>
 8008b64:	883b      	ldrh	r3, [r7, #0]
 8008b66:	0418      	lsls	r0, r3, #16
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6819      	ldr	r1, [r3, #0]
 8008b6c:	78fb      	ldrb	r3, [r7, #3]
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	4302      	orrs	r2, r0
 8008b74:	3340      	adds	r3, #64	; 0x40
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	440b      	add	r3, r1
 8008b7a:	605a      	str	r2, [r3, #4]
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3714      	adds	r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <HAL_PCDEx_SetRxFiFo>:
 8008b8a:	b480      	push	{r7}
 8008b8c:	b083      	sub	sp, #12
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	460b      	mov	r3, r1
 8008b94:	807b      	strh	r3, [r7, #2]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	887a      	ldrh	r2, [r7, #2]
 8008b9c:	625a      	str	r2, [r3, #36]	; 0x24
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <HAL_PCDEx_LPM_Callback>:
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70fb      	strb	r3, [r7, #3]
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_RCC_OscConfig>:
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b086      	sub	sp, #24
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d101      	bne.n	8008bd6 <HAL_RCC_OscConfig+0x12>
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e267      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d075      	beq.n	8008cce <HAL_RCC_OscConfig+0x10a>
 8008be2:	4b88      	ldr	r3, [pc, #544]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f003 030c 	and.w	r3, r3, #12
 8008bea:	2b04      	cmp	r3, #4
 8008bec:	d00c      	beq.n	8008c08 <HAL_RCC_OscConfig+0x44>
 8008bee:	4b85      	ldr	r3, [pc, #532]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	f003 030c 	and.w	r3, r3, #12
 8008bf6:	2b08      	cmp	r3, #8
 8008bf8:	d112      	bne.n	8008c20 <HAL_RCC_OscConfig+0x5c>
 8008bfa:	4b82      	ldr	r3, [pc, #520]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c06:	d10b      	bne.n	8008c20 <HAL_RCC_OscConfig+0x5c>
 8008c08:	4b7e      	ldr	r3, [pc, #504]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d05b      	beq.n	8008ccc <HAL_RCC_OscConfig+0x108>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d157      	bne.n	8008ccc <HAL_RCC_OscConfig+0x108>
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e242      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c28:	d106      	bne.n	8008c38 <HAL_RCC_OscConfig+0x74>
 8008c2a:	4b76      	ldr	r3, [pc, #472]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a75      	ldr	r2, [pc, #468]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c34:	6013      	str	r3, [r2, #0]
 8008c36:	e01d      	b.n	8008c74 <HAL_RCC_OscConfig+0xb0>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c40:	d10c      	bne.n	8008c5c <HAL_RCC_OscConfig+0x98>
 8008c42:	4b70      	ldr	r3, [pc, #448]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a6f      	ldr	r2, [pc, #444]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c4c:	6013      	str	r3, [r2, #0]
 8008c4e:	4b6d      	ldr	r3, [pc, #436]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a6c      	ldr	r2, [pc, #432]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c58:	6013      	str	r3, [r2, #0]
 8008c5a:	e00b      	b.n	8008c74 <HAL_RCC_OscConfig+0xb0>
 8008c5c:	4b69      	ldr	r3, [pc, #420]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a68      	ldr	r2, [pc, #416]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	4b66      	ldr	r3, [pc, #408]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a65      	ldr	r2, [pc, #404]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c72:	6013      	str	r3, [r2, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d013      	beq.n	8008ca4 <HAL_RCC_OscConfig+0xe0>
 8008c7c:	f7fb fe6e 	bl	800495c <HAL_GetTick>
 8008c80:	6138      	str	r0, [r7, #16]
 8008c82:	e008      	b.n	8008c96 <HAL_RCC_OscConfig+0xd2>
 8008c84:	f7fb fe6a 	bl	800495c <HAL_GetTick>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	2b64      	cmp	r3, #100	; 0x64
 8008c90:	d901      	bls.n	8008c96 <HAL_RCC_OscConfig+0xd2>
 8008c92:	2303      	movs	r3, #3
 8008c94:	e207      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
 8008c96:	4b5b      	ldr	r3, [pc, #364]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d0f0      	beq.n	8008c84 <HAL_RCC_OscConfig+0xc0>
 8008ca2:	e014      	b.n	8008cce <HAL_RCC_OscConfig+0x10a>
 8008ca4:	f7fb fe5a 	bl	800495c <HAL_GetTick>
 8008ca8:	6138      	str	r0, [r7, #16]
 8008caa:	e008      	b.n	8008cbe <HAL_RCC_OscConfig+0xfa>
 8008cac:	f7fb fe56 	bl	800495c <HAL_GetTick>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	2b64      	cmp	r3, #100	; 0x64
 8008cb8:	d901      	bls.n	8008cbe <HAL_RCC_OscConfig+0xfa>
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e1f3      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
 8008cbe:	4b51      	ldr	r3, [pc, #324]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1f0      	bne.n	8008cac <HAL_RCC_OscConfig+0xe8>
 8008cca:	e000      	b.n	8008cce <HAL_RCC_OscConfig+0x10a>
 8008ccc:	bf00      	nop
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 0302 	and.w	r3, r3, #2
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d063      	beq.n	8008da2 <HAL_RCC_OscConfig+0x1de>
 8008cda:	4b4a      	ldr	r3, [pc, #296]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f003 030c 	and.w	r3, r3, #12
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00b      	beq.n	8008cfe <HAL_RCC_OscConfig+0x13a>
 8008ce6:	4b47      	ldr	r3, [pc, #284]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	f003 030c 	and.w	r3, r3, #12
 8008cee:	2b08      	cmp	r3, #8
 8008cf0:	d11c      	bne.n	8008d2c <HAL_RCC_OscConfig+0x168>
 8008cf2:	4b44      	ldr	r3, [pc, #272]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d116      	bne.n	8008d2c <HAL_RCC_OscConfig+0x168>
 8008cfe:	4b41      	ldr	r3, [pc, #260]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0302 	and.w	r3, r3, #2
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d005      	beq.n	8008d16 <HAL_RCC_OscConfig+0x152>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d001      	beq.n	8008d16 <HAL_RCC_OscConfig+0x152>
 8008d12:	2301      	movs	r3, #1
 8008d14:	e1c7      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
 8008d16:	4b3b      	ldr	r3, [pc, #236]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	00db      	lsls	r3, r3, #3
 8008d24:	4937      	ldr	r1, [pc, #220]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008d26:	4313      	orrs	r3, r2
 8008d28:	600b      	str	r3, [r1, #0]
 8008d2a:	e03a      	b.n	8008da2 <HAL_RCC_OscConfig+0x1de>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d020      	beq.n	8008d76 <HAL_RCC_OscConfig+0x1b2>
 8008d34:	4b34      	ldr	r3, [pc, #208]	; (8008e08 <HAL_RCC_OscConfig+0x244>)
 8008d36:	2201      	movs	r2, #1
 8008d38:	601a      	str	r2, [r3, #0]
 8008d3a:	f7fb fe0f 	bl	800495c <HAL_GetTick>
 8008d3e:	6138      	str	r0, [r7, #16]
 8008d40:	e008      	b.n	8008d54 <HAL_RCC_OscConfig+0x190>
 8008d42:	f7fb fe0b 	bl	800495c <HAL_GetTick>
 8008d46:	4602      	mov	r2, r0
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d901      	bls.n	8008d54 <HAL_RCC_OscConfig+0x190>
 8008d50:	2303      	movs	r3, #3
 8008d52:	e1a8      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
 8008d54:	4b2b      	ldr	r3, [pc, #172]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 0302 	and.w	r3, r3, #2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d0f0      	beq.n	8008d42 <HAL_RCC_OscConfig+0x17e>
 8008d60:	4b28      	ldr	r3, [pc, #160]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	00db      	lsls	r3, r3, #3
 8008d6e:	4925      	ldr	r1, [pc, #148]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008d70:	4313      	orrs	r3, r2
 8008d72:	600b      	str	r3, [r1, #0]
 8008d74:	e015      	b.n	8008da2 <HAL_RCC_OscConfig+0x1de>
 8008d76:	4b24      	ldr	r3, [pc, #144]	; (8008e08 <HAL_RCC_OscConfig+0x244>)
 8008d78:	2200      	movs	r2, #0
 8008d7a:	601a      	str	r2, [r3, #0]
 8008d7c:	f7fb fdee 	bl	800495c <HAL_GetTick>
 8008d80:	6138      	str	r0, [r7, #16]
 8008d82:	e008      	b.n	8008d96 <HAL_RCC_OscConfig+0x1d2>
 8008d84:	f7fb fdea 	bl	800495c <HAL_GetTick>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d901      	bls.n	8008d96 <HAL_RCC_OscConfig+0x1d2>
 8008d92:	2303      	movs	r3, #3
 8008d94:	e187      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
 8008d96:	4b1b      	ldr	r3, [pc, #108]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 0302 	and.w	r3, r3, #2
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1f0      	bne.n	8008d84 <HAL_RCC_OscConfig+0x1c0>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f003 0308 	and.w	r3, r3, #8
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d036      	beq.n	8008e1c <HAL_RCC_OscConfig+0x258>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d016      	beq.n	8008de4 <HAL_RCC_OscConfig+0x220>
 8008db6:	4b15      	ldr	r3, [pc, #84]	; (8008e0c <HAL_RCC_OscConfig+0x248>)
 8008db8:	2201      	movs	r2, #1
 8008dba:	601a      	str	r2, [r3, #0]
 8008dbc:	f7fb fdce 	bl	800495c <HAL_GetTick>
 8008dc0:	6138      	str	r0, [r7, #16]
 8008dc2:	e008      	b.n	8008dd6 <HAL_RCC_OscConfig+0x212>
 8008dc4:	f7fb fdca 	bl	800495c <HAL_GetTick>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d901      	bls.n	8008dd6 <HAL_RCC_OscConfig+0x212>
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e167      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
 8008dd6:	4b0b      	ldr	r3, [pc, #44]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dda:	f003 0302 	and.w	r3, r3, #2
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d0f0      	beq.n	8008dc4 <HAL_RCC_OscConfig+0x200>
 8008de2:	e01b      	b.n	8008e1c <HAL_RCC_OscConfig+0x258>
 8008de4:	4b09      	ldr	r3, [pc, #36]	; (8008e0c <HAL_RCC_OscConfig+0x248>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	601a      	str	r2, [r3, #0]
 8008dea:	f7fb fdb7 	bl	800495c <HAL_GetTick>
 8008dee:	6138      	str	r0, [r7, #16]
 8008df0:	e00e      	b.n	8008e10 <HAL_RCC_OscConfig+0x24c>
 8008df2:	f7fb fdb3 	bl	800495c <HAL_GetTick>
 8008df6:	4602      	mov	r2, r0
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d907      	bls.n	8008e10 <HAL_RCC_OscConfig+0x24c>
 8008e00:	2303      	movs	r3, #3
 8008e02:	e150      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
 8008e04:	40023800 	.word	0x40023800
 8008e08:	42470000 	.word	0x42470000
 8008e0c:	42470e80 	.word	0x42470e80
 8008e10:	4b88      	ldr	r3, [pc, #544]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e14:	f003 0302 	and.w	r3, r3, #2
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1ea      	bne.n	8008df2 <HAL_RCC_OscConfig+0x22e>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 0304 	and.w	r3, r3, #4
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f000 8097 	beq.w	8008f58 <HAL_RCC_OscConfig+0x394>
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	75fb      	strb	r3, [r7, #23]
 8008e2e:	4b81      	ldr	r3, [pc, #516]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10f      	bne.n	8008e5a <HAL_RCC_OscConfig+0x296>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	60bb      	str	r3, [r7, #8]
 8008e3e:	4b7d      	ldr	r3, [pc, #500]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e42:	4a7c      	ldr	r2, [pc, #496]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e48:	6413      	str	r3, [r2, #64]	; 0x40
 8008e4a:	4b7a      	ldr	r3, [pc, #488]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e52:	60bb      	str	r3, [r7, #8]
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2301      	movs	r3, #1
 8008e58:	75fb      	strb	r3, [r7, #23]
 8008e5a:	4b77      	ldr	r3, [pc, #476]	; (8009038 <HAL_RCC_OscConfig+0x474>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d118      	bne.n	8008e98 <HAL_RCC_OscConfig+0x2d4>
 8008e66:	4b74      	ldr	r3, [pc, #464]	; (8009038 <HAL_RCC_OscConfig+0x474>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a73      	ldr	r2, [pc, #460]	; (8009038 <HAL_RCC_OscConfig+0x474>)
 8008e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e70:	6013      	str	r3, [r2, #0]
 8008e72:	f7fb fd73 	bl	800495c <HAL_GetTick>
 8008e76:	6138      	str	r0, [r7, #16]
 8008e78:	e008      	b.n	8008e8c <HAL_RCC_OscConfig+0x2c8>
 8008e7a:	f7fb fd6f 	bl	800495c <HAL_GetTick>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	d901      	bls.n	8008e8c <HAL_RCC_OscConfig+0x2c8>
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e10c      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
 8008e8c:	4b6a      	ldr	r3, [pc, #424]	; (8009038 <HAL_RCC_OscConfig+0x474>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d0f0      	beq.n	8008e7a <HAL_RCC_OscConfig+0x2b6>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d106      	bne.n	8008eae <HAL_RCC_OscConfig+0x2ea>
 8008ea0:	4b64      	ldr	r3, [pc, #400]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea4:	4a63      	ldr	r2, [pc, #396]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ea6:	f043 0301 	orr.w	r3, r3, #1
 8008eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8008eac:	e01c      	b.n	8008ee8 <HAL_RCC_OscConfig+0x324>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	2b05      	cmp	r3, #5
 8008eb4:	d10c      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x30c>
 8008eb6:	4b5f      	ldr	r3, [pc, #380]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eba:	4a5e      	ldr	r2, [pc, #376]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ebc:	f043 0304 	orr.w	r3, r3, #4
 8008ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8008ec2:	4b5c      	ldr	r3, [pc, #368]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec6:	4a5b      	ldr	r2, [pc, #364]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ec8:	f043 0301 	orr.w	r3, r3, #1
 8008ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8008ece:	e00b      	b.n	8008ee8 <HAL_RCC_OscConfig+0x324>
 8008ed0:	4b58      	ldr	r3, [pc, #352]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed4:	4a57      	ldr	r2, [pc, #348]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ed6:	f023 0301 	bic.w	r3, r3, #1
 8008eda:	6713      	str	r3, [r2, #112]	; 0x70
 8008edc:	4b55      	ldr	r3, [pc, #340]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee0:	4a54      	ldr	r2, [pc, #336]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ee2:	f023 0304 	bic.w	r3, r3, #4
 8008ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d015      	beq.n	8008f1c <HAL_RCC_OscConfig+0x358>
 8008ef0:	f7fb fd34 	bl	800495c <HAL_GetTick>
 8008ef4:	6138      	str	r0, [r7, #16]
 8008ef6:	e00a      	b.n	8008f0e <HAL_RCC_OscConfig+0x34a>
 8008ef8:	f7fb fd30 	bl	800495c <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d901      	bls.n	8008f0e <HAL_RCC_OscConfig+0x34a>
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	e0cb      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
 8008f0e:	4b49      	ldr	r3, [pc, #292]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f12:	f003 0302 	and.w	r3, r3, #2
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d0ee      	beq.n	8008ef8 <HAL_RCC_OscConfig+0x334>
 8008f1a:	e014      	b.n	8008f46 <HAL_RCC_OscConfig+0x382>
 8008f1c:	f7fb fd1e 	bl	800495c <HAL_GetTick>
 8008f20:	6138      	str	r0, [r7, #16]
 8008f22:	e00a      	b.n	8008f3a <HAL_RCC_OscConfig+0x376>
 8008f24:	f7fb fd1a 	bl	800495c <HAL_GetTick>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	1ad3      	subs	r3, r2, r3
 8008f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d901      	bls.n	8008f3a <HAL_RCC_OscConfig+0x376>
 8008f36:	2303      	movs	r3, #3
 8008f38:	e0b5      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
 8008f3a:	4b3e      	ldr	r3, [pc, #248]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1ee      	bne.n	8008f24 <HAL_RCC_OscConfig+0x360>
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d105      	bne.n	8008f58 <HAL_RCC_OscConfig+0x394>
 8008f4c:	4b39      	ldr	r3, [pc, #228]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f50:	4a38      	ldr	r2, [pc, #224]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f56:	6413      	str	r3, [r2, #64]	; 0x40
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 80a1 	beq.w	80090a4 <HAL_RCC_OscConfig+0x4e0>
 8008f62:	4b34      	ldr	r3, [pc, #208]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f003 030c 	and.w	r3, r3, #12
 8008f6a:	2b08      	cmp	r3, #8
 8008f6c:	d05c      	beq.n	8009028 <HAL_RCC_OscConfig+0x464>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d141      	bne.n	8008ffa <HAL_RCC_OscConfig+0x436>
 8008f76:	4b31      	ldr	r3, [pc, #196]	; (800903c <HAL_RCC_OscConfig+0x478>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	601a      	str	r2, [r3, #0]
 8008f7c:	f7fb fcee 	bl	800495c <HAL_GetTick>
 8008f80:	6138      	str	r0, [r7, #16]
 8008f82:	e008      	b.n	8008f96 <HAL_RCC_OscConfig+0x3d2>
 8008f84:	f7fb fcea 	bl	800495c <HAL_GetTick>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d901      	bls.n	8008f96 <HAL_RCC_OscConfig+0x3d2>
 8008f92:	2303      	movs	r3, #3
 8008f94:	e087      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
 8008f96:	4b27      	ldr	r3, [pc, #156]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1f0      	bne.n	8008f84 <HAL_RCC_OscConfig+0x3c0>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	69da      	ldr	r2, [r3, #28]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	431a      	orrs	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb0:	019b      	lsls	r3, r3, #6
 8008fb2:	431a      	orrs	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb8:	085b      	lsrs	r3, r3, #1
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	041b      	lsls	r3, r3, #16
 8008fbe:	431a      	orrs	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc4:	061b      	lsls	r3, r3, #24
 8008fc6:	491b      	ldr	r1, [pc, #108]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	604b      	str	r3, [r1, #4]
 8008fcc:	4b1b      	ldr	r3, [pc, #108]	; (800903c <HAL_RCC_OscConfig+0x478>)
 8008fce:	2201      	movs	r2, #1
 8008fd0:	601a      	str	r2, [r3, #0]
 8008fd2:	f7fb fcc3 	bl	800495c <HAL_GetTick>
 8008fd6:	6138      	str	r0, [r7, #16]
 8008fd8:	e008      	b.n	8008fec <HAL_RCC_OscConfig+0x428>
 8008fda:	f7fb fcbf 	bl	800495c <HAL_GetTick>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	1ad3      	subs	r3, r2, r3
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d901      	bls.n	8008fec <HAL_RCC_OscConfig+0x428>
 8008fe8:	2303      	movs	r3, #3
 8008fea:	e05c      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
 8008fec:	4b11      	ldr	r3, [pc, #68]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d0f0      	beq.n	8008fda <HAL_RCC_OscConfig+0x416>
 8008ff8:	e054      	b.n	80090a4 <HAL_RCC_OscConfig+0x4e0>
 8008ffa:	4b10      	ldr	r3, [pc, #64]	; (800903c <HAL_RCC_OscConfig+0x478>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	601a      	str	r2, [r3, #0]
 8009000:	f7fb fcac 	bl	800495c <HAL_GetTick>
 8009004:	6138      	str	r0, [r7, #16]
 8009006:	e008      	b.n	800901a <HAL_RCC_OscConfig+0x456>
 8009008:	f7fb fca8 	bl	800495c <HAL_GetTick>
 800900c:	4602      	mov	r2, r0
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	2b02      	cmp	r3, #2
 8009014:	d901      	bls.n	800901a <HAL_RCC_OscConfig+0x456>
 8009016:	2303      	movs	r3, #3
 8009018:	e045      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
 800901a:	4b06      	ldr	r3, [pc, #24]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1f0      	bne.n	8009008 <HAL_RCC_OscConfig+0x444>
 8009026:	e03d      	b.n	80090a4 <HAL_RCC_OscConfig+0x4e0>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d107      	bne.n	8009040 <HAL_RCC_OscConfig+0x47c>
 8009030:	2301      	movs	r3, #1
 8009032:	e038      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
 8009034:	40023800 	.word	0x40023800
 8009038:	40007000 	.word	0x40007000
 800903c:	42470060 	.word	0x42470060
 8009040:	4b1b      	ldr	r3, [pc, #108]	; (80090b0 <HAL_RCC_OscConfig+0x4ec>)
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	60fb      	str	r3, [r7, #12]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d028      	beq.n	80090a0 <HAL_RCC_OscConfig+0x4dc>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	429a      	cmp	r2, r3
 800905a:	d121      	bne.n	80090a0 <HAL_RCC_OscConfig+0x4dc>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a1b      	ldr	r3, [r3, #32]
 8009066:	429a      	cmp	r2, r3
 8009068:	d11a      	bne.n	80090a0 <HAL_RCC_OscConfig+0x4dc>
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009070:	4013      	ands	r3, r2
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009076:	0192      	lsls	r2, r2, #6
 8009078:	4293      	cmp	r3, r2
 800907a:	d111      	bne.n	80090a0 <HAL_RCC_OscConfig+0x4dc>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009086:	085b      	lsrs	r3, r3, #1
 8009088:	3b01      	subs	r3, #1
 800908a:	041b      	lsls	r3, r3, #16
 800908c:	429a      	cmp	r2, r3
 800908e:	d107      	bne.n	80090a0 <HAL_RCC_OscConfig+0x4dc>
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909a:	061b      	lsls	r3, r3, #24
 800909c:	429a      	cmp	r2, r3
 800909e:	d001      	beq.n	80090a4 <HAL_RCC_OscConfig+0x4e0>
 80090a0:	2301      	movs	r3, #1
 80090a2:	e000      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
 80090a4:	2300      	movs	r3, #0
 80090a6:	4618      	mov	r0, r3
 80090a8:	3718      	adds	r7, #24
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	40023800 	.word	0x40023800

080090b4 <HAL_RCC_ClockConfig>:
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d101      	bne.n	80090c8 <HAL_RCC_ClockConfig+0x14>
 80090c4:	2301      	movs	r3, #1
 80090c6:	e0cc      	b.n	8009262 <HAL_RCC_ClockConfig+0x1ae>
 80090c8:	4b68      	ldr	r3, [pc, #416]	; (800926c <HAL_RCC_ClockConfig+0x1b8>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0307 	and.w	r3, r3, #7
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d90c      	bls.n	80090f0 <HAL_RCC_ClockConfig+0x3c>
 80090d6:	4b65      	ldr	r3, [pc, #404]	; (800926c <HAL_RCC_ClockConfig+0x1b8>)
 80090d8:	683a      	ldr	r2, [r7, #0]
 80090da:	b2d2      	uxtb	r2, r2
 80090dc:	701a      	strb	r2, [r3, #0]
 80090de:	4b63      	ldr	r3, [pc, #396]	; (800926c <HAL_RCC_ClockConfig+0x1b8>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0307 	and.w	r3, r3, #7
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d001      	beq.n	80090f0 <HAL_RCC_ClockConfig+0x3c>
 80090ec:	2301      	movs	r3, #1
 80090ee:	e0b8      	b.n	8009262 <HAL_RCC_ClockConfig+0x1ae>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0302 	and.w	r3, r3, #2
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d020      	beq.n	800913e <HAL_RCC_ClockConfig+0x8a>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0304 	and.w	r3, r3, #4
 8009104:	2b00      	cmp	r3, #0
 8009106:	d005      	beq.n	8009114 <HAL_RCC_ClockConfig+0x60>
 8009108:	4b59      	ldr	r3, [pc, #356]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	4a58      	ldr	r2, [pc, #352]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 800910e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009112:	6093      	str	r3, [r2, #8]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 0308 	and.w	r3, r3, #8
 800911c:	2b00      	cmp	r3, #0
 800911e:	d005      	beq.n	800912c <HAL_RCC_ClockConfig+0x78>
 8009120:	4b53      	ldr	r3, [pc, #332]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	4a52      	ldr	r2, [pc, #328]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009126:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800912a:	6093      	str	r3, [r2, #8]
 800912c:	4b50      	ldr	r3, [pc, #320]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	494d      	ldr	r1, [pc, #308]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 800913a:	4313      	orrs	r3, r2
 800913c:	608b      	str	r3, [r1, #8]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	2b00      	cmp	r3, #0
 8009148:	d044      	beq.n	80091d4 <HAL_RCC_ClockConfig+0x120>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d107      	bne.n	8009162 <HAL_RCC_ClockConfig+0xae>
 8009152:	4b47      	ldr	r3, [pc, #284]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800915a:	2b00      	cmp	r3, #0
 800915c:	d119      	bne.n	8009192 <HAL_RCC_ClockConfig+0xde>
 800915e:	2301      	movs	r3, #1
 8009160:	e07f      	b.n	8009262 <HAL_RCC_ClockConfig+0x1ae>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	2b02      	cmp	r3, #2
 8009168:	d003      	beq.n	8009172 <HAL_RCC_ClockConfig+0xbe>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	2b03      	cmp	r3, #3
 8009170:	d107      	bne.n	8009182 <HAL_RCC_ClockConfig+0xce>
 8009172:	4b3f      	ldr	r3, [pc, #252]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800917a:	2b00      	cmp	r3, #0
 800917c:	d109      	bne.n	8009192 <HAL_RCC_ClockConfig+0xde>
 800917e:	2301      	movs	r3, #1
 8009180:	e06f      	b.n	8009262 <HAL_RCC_ClockConfig+0x1ae>
 8009182:	4b3b      	ldr	r3, [pc, #236]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 0302 	and.w	r3, r3, #2
 800918a:	2b00      	cmp	r3, #0
 800918c:	d101      	bne.n	8009192 <HAL_RCC_ClockConfig+0xde>
 800918e:	2301      	movs	r3, #1
 8009190:	e067      	b.n	8009262 <HAL_RCC_ClockConfig+0x1ae>
 8009192:	4b37      	ldr	r3, [pc, #220]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f023 0203 	bic.w	r2, r3, #3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	4934      	ldr	r1, [pc, #208]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 80091a0:	4313      	orrs	r3, r2
 80091a2:	608b      	str	r3, [r1, #8]
 80091a4:	f7fb fbda 	bl	800495c <HAL_GetTick>
 80091a8:	60f8      	str	r0, [r7, #12]
 80091aa:	e00a      	b.n	80091c2 <HAL_RCC_ClockConfig+0x10e>
 80091ac:	f7fb fbd6 	bl	800495c <HAL_GetTick>
 80091b0:	4602      	mov	r2, r0
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d901      	bls.n	80091c2 <HAL_RCC_ClockConfig+0x10e>
 80091be:	2303      	movs	r3, #3
 80091c0:	e04f      	b.n	8009262 <HAL_RCC_ClockConfig+0x1ae>
 80091c2:	4b2b      	ldr	r3, [pc, #172]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	f003 020c 	and.w	r2, r3, #12
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d1eb      	bne.n	80091ac <HAL_RCC_ClockConfig+0xf8>
 80091d4:	4b25      	ldr	r3, [pc, #148]	; (800926c <HAL_RCC_ClockConfig+0x1b8>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 0307 	and.w	r3, r3, #7
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d20c      	bcs.n	80091fc <HAL_RCC_ClockConfig+0x148>
 80091e2:	4b22      	ldr	r3, [pc, #136]	; (800926c <HAL_RCC_ClockConfig+0x1b8>)
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	b2d2      	uxtb	r2, r2
 80091e8:	701a      	strb	r2, [r3, #0]
 80091ea:	4b20      	ldr	r3, [pc, #128]	; (800926c <HAL_RCC_ClockConfig+0x1b8>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 0307 	and.w	r3, r3, #7
 80091f2:	683a      	ldr	r2, [r7, #0]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d001      	beq.n	80091fc <HAL_RCC_ClockConfig+0x148>
 80091f8:	2301      	movs	r3, #1
 80091fa:	e032      	b.n	8009262 <HAL_RCC_ClockConfig+0x1ae>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 0304 	and.w	r3, r3, #4
 8009204:	2b00      	cmp	r3, #0
 8009206:	d008      	beq.n	800921a <HAL_RCC_ClockConfig+0x166>
 8009208:	4b19      	ldr	r3, [pc, #100]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	4916      	ldr	r1, [pc, #88]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009216:	4313      	orrs	r3, r2
 8009218:	608b      	str	r3, [r1, #8]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 0308 	and.w	r3, r3, #8
 8009222:	2b00      	cmp	r3, #0
 8009224:	d009      	beq.n	800923a <HAL_RCC_ClockConfig+0x186>
 8009226:	4b12      	ldr	r3, [pc, #72]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	00db      	lsls	r3, r3, #3
 8009234:	490e      	ldr	r1, [pc, #56]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009236:	4313      	orrs	r3, r2
 8009238:	608b      	str	r3, [r1, #8]
 800923a:	f000 f821 	bl	8009280 <HAL_RCC_GetSysClockFreq>
 800923e:	4602      	mov	r2, r0
 8009240:	4b0b      	ldr	r3, [pc, #44]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	091b      	lsrs	r3, r3, #4
 8009246:	f003 030f 	and.w	r3, r3, #15
 800924a:	490a      	ldr	r1, [pc, #40]	; (8009274 <HAL_RCC_ClockConfig+0x1c0>)
 800924c:	5ccb      	ldrb	r3, [r1, r3]
 800924e:	fa22 f303 	lsr.w	r3, r2, r3
 8009252:	4a09      	ldr	r2, [pc, #36]	; (8009278 <HAL_RCC_ClockConfig+0x1c4>)
 8009254:	6013      	str	r3, [r2, #0]
 8009256:	4b09      	ldr	r3, [pc, #36]	; (800927c <HAL_RCC_ClockConfig+0x1c8>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4618      	mov	r0, r3
 800925c:	f7fb f8ae 	bl	80043bc <HAL_InitTick>
 8009260:	2300      	movs	r3, #0
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	40023c00 	.word	0x40023c00
 8009270:	40023800 	.word	0x40023800
 8009274:	0801480c 	.word	0x0801480c
 8009278:	20000014 	.word	0x20000014
 800927c:	20000018 	.word	0x20000018

08009280 <HAL_RCC_GetSysClockFreq>:
 8009280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009284:	b094      	sub	sp, #80	; 0x50
 8009286:	af00      	add	r7, sp, #0
 8009288:	2300      	movs	r3, #0
 800928a:	647b      	str	r3, [r7, #68]	; 0x44
 800928c:	2300      	movs	r3, #0
 800928e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009290:	2300      	movs	r3, #0
 8009292:	643b      	str	r3, [r7, #64]	; 0x40
 8009294:	2300      	movs	r3, #0
 8009296:	64bb      	str	r3, [r7, #72]	; 0x48
 8009298:	4b79      	ldr	r3, [pc, #484]	; (8009480 <HAL_RCC_GetSysClockFreq+0x200>)
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f003 030c 	and.w	r3, r3, #12
 80092a0:	2b08      	cmp	r3, #8
 80092a2:	d00d      	beq.n	80092c0 <HAL_RCC_GetSysClockFreq+0x40>
 80092a4:	2b08      	cmp	r3, #8
 80092a6:	f200 80e1 	bhi.w	800946c <HAL_RCC_GetSysClockFreq+0x1ec>
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d002      	beq.n	80092b4 <HAL_RCC_GetSysClockFreq+0x34>
 80092ae:	2b04      	cmp	r3, #4
 80092b0:	d003      	beq.n	80092ba <HAL_RCC_GetSysClockFreq+0x3a>
 80092b2:	e0db      	b.n	800946c <HAL_RCC_GetSysClockFreq+0x1ec>
 80092b4:	4b73      	ldr	r3, [pc, #460]	; (8009484 <HAL_RCC_GetSysClockFreq+0x204>)
 80092b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80092b8:	e0db      	b.n	8009472 <HAL_RCC_GetSysClockFreq+0x1f2>
 80092ba:	4b73      	ldr	r3, [pc, #460]	; (8009488 <HAL_RCC_GetSysClockFreq+0x208>)
 80092bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80092be:	e0d8      	b.n	8009472 <HAL_RCC_GetSysClockFreq+0x1f2>
 80092c0:	4b6f      	ldr	r3, [pc, #444]	; (8009480 <HAL_RCC_GetSysClockFreq+0x200>)
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092c8:	647b      	str	r3, [r7, #68]	; 0x44
 80092ca:	4b6d      	ldr	r3, [pc, #436]	; (8009480 <HAL_RCC_GetSysClockFreq+0x200>)
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d063      	beq.n	800939e <HAL_RCC_GetSysClockFreq+0x11e>
 80092d6:	4b6a      	ldr	r3, [pc, #424]	; (8009480 <HAL_RCC_GetSysClockFreq+0x200>)
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	099b      	lsrs	r3, r3, #6
 80092dc:	2200      	movs	r2, #0
 80092de:	63bb      	str	r3, [r7, #56]	; 0x38
 80092e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80092e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e8:	633b      	str	r3, [r7, #48]	; 0x30
 80092ea:	2300      	movs	r3, #0
 80092ec:	637b      	str	r3, [r7, #52]	; 0x34
 80092ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80092f2:	4622      	mov	r2, r4
 80092f4:	462b      	mov	r3, r5
 80092f6:	f04f 0000 	mov.w	r0, #0
 80092fa:	f04f 0100 	mov.w	r1, #0
 80092fe:	0159      	lsls	r1, r3, #5
 8009300:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009304:	0150      	lsls	r0, r2, #5
 8009306:	4602      	mov	r2, r0
 8009308:	460b      	mov	r3, r1
 800930a:	4621      	mov	r1, r4
 800930c:	1a51      	subs	r1, r2, r1
 800930e:	6139      	str	r1, [r7, #16]
 8009310:	4629      	mov	r1, r5
 8009312:	eb63 0301 	sbc.w	r3, r3, r1
 8009316:	617b      	str	r3, [r7, #20]
 8009318:	f04f 0200 	mov.w	r2, #0
 800931c:	f04f 0300 	mov.w	r3, #0
 8009320:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009324:	4659      	mov	r1, fp
 8009326:	018b      	lsls	r3, r1, #6
 8009328:	4651      	mov	r1, sl
 800932a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800932e:	4651      	mov	r1, sl
 8009330:	018a      	lsls	r2, r1, #6
 8009332:	4651      	mov	r1, sl
 8009334:	ebb2 0801 	subs.w	r8, r2, r1
 8009338:	4659      	mov	r1, fp
 800933a:	eb63 0901 	sbc.w	r9, r3, r1
 800933e:	f04f 0200 	mov.w	r2, #0
 8009342:	f04f 0300 	mov.w	r3, #0
 8009346:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800934a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800934e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009352:	4690      	mov	r8, r2
 8009354:	4699      	mov	r9, r3
 8009356:	4623      	mov	r3, r4
 8009358:	eb18 0303 	adds.w	r3, r8, r3
 800935c:	60bb      	str	r3, [r7, #8]
 800935e:	462b      	mov	r3, r5
 8009360:	eb49 0303 	adc.w	r3, r9, r3
 8009364:	60fb      	str	r3, [r7, #12]
 8009366:	f04f 0200 	mov.w	r2, #0
 800936a:	f04f 0300 	mov.w	r3, #0
 800936e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009372:	4629      	mov	r1, r5
 8009374:	024b      	lsls	r3, r1, #9
 8009376:	4621      	mov	r1, r4
 8009378:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800937c:	4621      	mov	r1, r4
 800937e:	024a      	lsls	r2, r1, #9
 8009380:	4610      	mov	r0, r2
 8009382:	4619      	mov	r1, r3
 8009384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009386:	2200      	movs	r2, #0
 8009388:	62bb      	str	r3, [r7, #40]	; 0x28
 800938a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800938c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009390:	f7f7 fc82 	bl	8000c98 <__aeabi_uldivmod>
 8009394:	4602      	mov	r2, r0
 8009396:	460b      	mov	r3, r1
 8009398:	4613      	mov	r3, r2
 800939a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800939c:	e058      	b.n	8009450 <HAL_RCC_GetSysClockFreq+0x1d0>
 800939e:	4b38      	ldr	r3, [pc, #224]	; (8009480 <HAL_RCC_GetSysClockFreq+0x200>)
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	099b      	lsrs	r3, r3, #6
 80093a4:	2200      	movs	r2, #0
 80093a6:	4618      	mov	r0, r3
 80093a8:	4611      	mov	r1, r2
 80093aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80093ae:	623b      	str	r3, [r7, #32]
 80093b0:	2300      	movs	r3, #0
 80093b2:	627b      	str	r3, [r7, #36]	; 0x24
 80093b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80093b8:	4642      	mov	r2, r8
 80093ba:	464b      	mov	r3, r9
 80093bc:	f04f 0000 	mov.w	r0, #0
 80093c0:	f04f 0100 	mov.w	r1, #0
 80093c4:	0159      	lsls	r1, r3, #5
 80093c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80093ca:	0150      	lsls	r0, r2, #5
 80093cc:	4602      	mov	r2, r0
 80093ce:	460b      	mov	r3, r1
 80093d0:	4641      	mov	r1, r8
 80093d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80093d6:	4649      	mov	r1, r9
 80093d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80093dc:	f04f 0200 	mov.w	r2, #0
 80093e0:	f04f 0300 	mov.w	r3, #0
 80093e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80093e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80093ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80093f0:	ebb2 040a 	subs.w	r4, r2, sl
 80093f4:	eb63 050b 	sbc.w	r5, r3, fp
 80093f8:	f04f 0200 	mov.w	r2, #0
 80093fc:	f04f 0300 	mov.w	r3, #0
 8009400:	00eb      	lsls	r3, r5, #3
 8009402:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009406:	00e2      	lsls	r2, r4, #3
 8009408:	4614      	mov	r4, r2
 800940a:	461d      	mov	r5, r3
 800940c:	4643      	mov	r3, r8
 800940e:	18e3      	adds	r3, r4, r3
 8009410:	603b      	str	r3, [r7, #0]
 8009412:	464b      	mov	r3, r9
 8009414:	eb45 0303 	adc.w	r3, r5, r3
 8009418:	607b      	str	r3, [r7, #4]
 800941a:	f04f 0200 	mov.w	r2, #0
 800941e:	f04f 0300 	mov.w	r3, #0
 8009422:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009426:	4629      	mov	r1, r5
 8009428:	028b      	lsls	r3, r1, #10
 800942a:	4621      	mov	r1, r4
 800942c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009430:	4621      	mov	r1, r4
 8009432:	028a      	lsls	r2, r1, #10
 8009434:	4610      	mov	r0, r2
 8009436:	4619      	mov	r1, r3
 8009438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800943a:	2200      	movs	r2, #0
 800943c:	61bb      	str	r3, [r7, #24]
 800943e:	61fa      	str	r2, [r7, #28]
 8009440:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009444:	f7f7 fc28 	bl	8000c98 <__aeabi_uldivmod>
 8009448:	4602      	mov	r2, r0
 800944a:	460b      	mov	r3, r1
 800944c:	4613      	mov	r3, r2
 800944e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009450:	4b0b      	ldr	r3, [pc, #44]	; (8009480 <HAL_RCC_GetSysClockFreq+0x200>)
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	0c1b      	lsrs	r3, r3, #16
 8009456:	f003 0303 	and.w	r3, r3, #3
 800945a:	3301      	adds	r3, #1
 800945c:	005b      	lsls	r3, r3, #1
 800945e:	643b      	str	r3, [r7, #64]	; 0x40
 8009460:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009464:	fbb2 f3f3 	udiv	r3, r2, r3
 8009468:	64bb      	str	r3, [r7, #72]	; 0x48
 800946a:	e002      	b.n	8009472 <HAL_RCC_GetSysClockFreq+0x1f2>
 800946c:	4b05      	ldr	r3, [pc, #20]	; (8009484 <HAL_RCC_GetSysClockFreq+0x204>)
 800946e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009470:	bf00      	nop
 8009472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009474:	4618      	mov	r0, r3
 8009476:	3750      	adds	r7, #80	; 0x50
 8009478:	46bd      	mov	sp, r7
 800947a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800947e:	bf00      	nop
 8009480:	40023800 	.word	0x40023800
 8009484:	00f42400 	.word	0x00f42400
 8009488:	007a1200 	.word	0x007a1200

0800948c <HAL_RCC_GetHCLKFreq>:
 800948c:	b480      	push	{r7}
 800948e:	af00      	add	r7, sp, #0
 8009490:	4b03      	ldr	r3, [pc, #12]	; (80094a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4618      	mov	r0, r3
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	20000014 	.word	0x20000014

080094a4 <HAL_RCC_GetPCLK1Freq>:
 80094a4:	b580      	push	{r7, lr}
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	f7ff fff0 	bl	800948c <HAL_RCC_GetHCLKFreq>
 80094ac:	4602      	mov	r2, r0
 80094ae:	4b05      	ldr	r3, [pc, #20]	; (80094c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	0a9b      	lsrs	r3, r3, #10
 80094b4:	f003 0307 	and.w	r3, r3, #7
 80094b8:	4903      	ldr	r1, [pc, #12]	; (80094c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80094ba:	5ccb      	ldrb	r3, [r1, r3]
 80094bc:	fa22 f303 	lsr.w	r3, r2, r3
 80094c0:	4618      	mov	r0, r3
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	40023800 	.word	0x40023800
 80094c8:	0801481c 	.word	0x0801481c

080094cc <HAL_RCC_GetPCLK2Freq>:
 80094cc:	b580      	push	{r7, lr}
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	f7ff ffdc 	bl	800948c <HAL_RCC_GetHCLKFreq>
 80094d4:	4602      	mov	r2, r0
 80094d6:	4b05      	ldr	r3, [pc, #20]	; (80094ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	0b5b      	lsrs	r3, r3, #13
 80094dc:	f003 0307 	and.w	r3, r3, #7
 80094e0:	4903      	ldr	r1, [pc, #12]	; (80094f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80094e2:	5ccb      	ldrb	r3, [r1, r3]
 80094e4:	fa22 f303 	lsr.w	r3, r2, r3
 80094e8:	4618      	mov	r0, r3
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	40023800 	.word	0x40023800
 80094f0:	0801481c 	.word	0x0801481c

080094f4 <HAL_RCC_GetClockConfig>:
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	220f      	movs	r2, #15
 8009502:	601a      	str	r2, [r3, #0]
 8009504:	4b12      	ldr	r3, [pc, #72]	; (8009550 <HAL_RCC_GetClockConfig+0x5c>)
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	f003 0203 	and.w	r2, r3, #3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	605a      	str	r2, [r3, #4]
 8009510:	4b0f      	ldr	r3, [pc, #60]	; (8009550 <HAL_RCC_GetClockConfig+0x5c>)
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	609a      	str	r2, [r3, #8]
 800951c:	4b0c      	ldr	r3, [pc, #48]	; (8009550 <HAL_RCC_GetClockConfig+0x5c>)
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	60da      	str	r2, [r3, #12]
 8009528:	4b09      	ldr	r3, [pc, #36]	; (8009550 <HAL_RCC_GetClockConfig+0x5c>)
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	08db      	lsrs	r3, r3, #3
 800952e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	611a      	str	r2, [r3, #16]
 8009536:	4b07      	ldr	r3, [pc, #28]	; (8009554 <HAL_RCC_GetClockConfig+0x60>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 0207 	and.w	r2, r3, #7
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	601a      	str	r2, [r3, #0]
 8009542:	bf00      	nop
 8009544:	370c      	adds	r7, #12
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	40023800 	.word	0x40023800
 8009554:	40023c00 	.word	0x40023c00

08009558 <HAL_SPI_Init>:
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d101      	bne.n	800956a <HAL_SPI_Init+0x12>
 8009566:	2301      	movs	r3, #1
 8009568:	e07b      	b.n	8009662 <HAL_SPI_Init+0x10a>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956e:	2b00      	cmp	r3, #0
 8009570:	d108      	bne.n	8009584 <HAL_SPI_Init+0x2c>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800957a:	d009      	beq.n	8009590 <HAL_SPI_Init+0x38>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	61da      	str	r2, [r3, #28]
 8009582:	e005      	b.n	8009590 <HAL_SPI_Init+0x38>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	611a      	str	r2, [r3, #16]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	615a      	str	r2, [r3, #20]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	629a      	str	r2, [r3, #40]	; 0x28
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800959c:	b2db      	uxtb	r3, r3
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d106      	bne.n	80095b0 <HAL_SPI_Init+0x58>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7fa fc4a 	bl	8003e44 <HAL_SPI_MspInit>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2202      	movs	r2, #2
 80095b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095c6:	601a      	str	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80095d8:	431a      	orrs	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095e2:	431a      	orrs	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	f003 0302 	and.w	r3, r3, #2
 80095ec:	431a      	orrs	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	695b      	ldr	r3, [r3, #20]
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	431a      	orrs	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009600:	431a      	orrs	r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	69db      	ldr	r3, [r3, #28]
 8009606:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800960a:	431a      	orrs	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a1b      	ldr	r3, [r3, #32]
 8009610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009614:	ea42 0103 	orr.w	r1, r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	430a      	orrs	r2, r1
 8009626:	601a      	str	r2, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	0c1b      	lsrs	r3, r3, #16
 800962e:	f003 0104 	and.w	r1, r3, #4
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009636:	f003 0210 	and.w	r2, r3, #16
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	430a      	orrs	r2, r1
 8009640:	605a      	str	r2, [r3, #4]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	69da      	ldr	r2, [r3, #28]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009650:	61da      	str	r2, [r3, #28]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	655a      	str	r2, [r3, #84]	; 0x54
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009660:	2300      	movs	r3, #0
 8009662:	4618      	mov	r0, r3
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}

0800966a <HAL_TIM_Base_Init>:
 800966a:	b580      	push	{r7, lr}
 800966c:	b082      	sub	sp, #8
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d101      	bne.n	800967c <HAL_TIM_Base_Init+0x12>
 8009678:	2301      	movs	r3, #1
 800967a:	e041      	b.n	8009700 <HAL_TIM_Base_Init+0x96>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009682:	b2db      	uxtb	r3, r3
 8009684:	2b00      	cmp	r3, #0
 8009686:	d106      	bne.n	8009696 <HAL_TIM_Base_Init+0x2c>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7fb f8a1 	bl	80047d8 <HAL_TIM_Base_MspInit>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2202      	movs	r2, #2
 800969a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	3304      	adds	r3, #4
 80096a6:	4619      	mov	r1, r3
 80096a8:	4610      	mov	r0, r2
 80096aa:	f000 fc53 	bl	8009f54 <TIM_Base_SetConfig>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2201      	movs	r2, #1
 80096ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2201      	movs	r2, #1
 80096ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2201      	movs	r2, #1
 80096d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2201      	movs	r2, #1
 80096e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80096fe:	2300      	movs	r3, #0
 8009700:	4618      	mov	r0, r3
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <HAL_TIM_Base_Start_IT>:
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009716:	b2db      	uxtb	r3, r3
 8009718:	2b01      	cmp	r3, #1
 800971a:	d001      	beq.n	8009720 <HAL_TIM_Base_Start_IT+0x18>
 800971c:	2301      	movs	r3, #1
 800971e:	e044      	b.n	80097aa <HAL_TIM_Base_Start_IT+0xa2>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2202      	movs	r2, #2
 8009724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68da      	ldr	r2, [r3, #12]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f042 0201 	orr.w	r2, r2, #1
 8009736:	60da      	str	r2, [r3, #12]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a1e      	ldr	r2, [pc, #120]	; (80097b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d018      	beq.n	8009774 <HAL_TIM_Base_Start_IT+0x6c>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800974a:	d013      	beq.n	8009774 <HAL_TIM_Base_Start_IT+0x6c>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a1a      	ldr	r2, [pc, #104]	; (80097bc <HAL_TIM_Base_Start_IT+0xb4>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d00e      	beq.n	8009774 <HAL_TIM_Base_Start_IT+0x6c>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a19      	ldr	r2, [pc, #100]	; (80097c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d009      	beq.n	8009774 <HAL_TIM_Base_Start_IT+0x6c>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a17      	ldr	r2, [pc, #92]	; (80097c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d004      	beq.n	8009774 <HAL_TIM_Base_Start_IT+0x6c>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a16      	ldr	r2, [pc, #88]	; (80097c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d111      	bne.n	8009798 <HAL_TIM_Base_Start_IT+0x90>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	f003 0307 	and.w	r3, r3, #7
 800977e:	60fb      	str	r3, [r7, #12]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2b06      	cmp	r3, #6
 8009784:	d010      	beq.n	80097a8 <HAL_TIM_Base_Start_IT+0xa0>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f042 0201 	orr.w	r2, r2, #1
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	e007      	b.n	80097a8 <HAL_TIM_Base_Start_IT+0xa0>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f042 0201 	orr.w	r2, r2, #1
 80097a6:	601a      	str	r2, [r3, #0]
 80097a8:	2300      	movs	r3, #0
 80097aa:	4618      	mov	r0, r3
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	40010000 	.word	0x40010000
 80097bc:	40000400 	.word	0x40000400
 80097c0:	40000800 	.word	0x40000800
 80097c4:	40000c00 	.word	0x40000c00
 80097c8:	40014000 	.word	0x40014000

080097cc <HAL_TIM_PWM_Init>:
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d101      	bne.n	80097de <HAL_TIM_PWM_Init+0x12>
 80097da:	2301      	movs	r3, #1
 80097dc:	e041      	b.n	8009862 <HAL_TIM_PWM_Init+0x96>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d106      	bne.n	80097f8 <HAL_TIM_PWM_Init+0x2c>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f839 	bl	800986a <HAL_TIM_PWM_MspInit>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2202      	movs	r2, #2
 80097fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	3304      	adds	r3, #4
 8009808:	4619      	mov	r1, r3
 800980a:	4610      	mov	r0, r2
 800980c:	f000 fba2 	bl	8009f54 <TIM_Base_SetConfig>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009860:	2300      	movs	r3, #0
 8009862:	4618      	mov	r0, r3
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <HAL_TIM_PWM_MspInit>:
 800986a:	b480      	push	{r7}
 800986c:	b083      	sub	sp, #12
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	bf00      	nop
 8009874:	370c      	adds	r7, #12
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
	...

08009880 <HAL_TIM_PWM_Start>:
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d109      	bne.n	80098a4 <HAL_TIM_PWM_Start+0x24>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009896:	b2db      	uxtb	r3, r3
 8009898:	2b01      	cmp	r3, #1
 800989a:	bf14      	ite	ne
 800989c:	2301      	movne	r3, #1
 800989e:	2300      	moveq	r3, #0
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	e022      	b.n	80098ea <HAL_TIM_PWM_Start+0x6a>
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	2b04      	cmp	r3, #4
 80098a8:	d109      	bne.n	80098be <HAL_TIM_PWM_Start+0x3e>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	bf14      	ite	ne
 80098b6:	2301      	movne	r3, #1
 80098b8:	2300      	moveq	r3, #0
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	e015      	b.n	80098ea <HAL_TIM_PWM_Start+0x6a>
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	2b08      	cmp	r3, #8
 80098c2:	d109      	bne.n	80098d8 <HAL_TIM_PWM_Start+0x58>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	bf14      	ite	ne
 80098d0:	2301      	movne	r3, #1
 80098d2:	2300      	moveq	r3, #0
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	e008      	b.n	80098ea <HAL_TIM_PWM_Start+0x6a>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	bf14      	ite	ne
 80098e4:	2301      	movne	r3, #1
 80098e6:	2300      	moveq	r3, #0
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d001      	beq.n	80098f2 <HAL_TIM_PWM_Start+0x72>
 80098ee:	2301      	movs	r3, #1
 80098f0:	e068      	b.n	80099c4 <HAL_TIM_PWM_Start+0x144>
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d104      	bne.n	8009902 <HAL_TIM_PWM_Start+0x82>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2202      	movs	r2, #2
 80098fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009900:	e013      	b.n	800992a <HAL_TIM_PWM_Start+0xaa>
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	2b04      	cmp	r3, #4
 8009906:	d104      	bne.n	8009912 <HAL_TIM_PWM_Start+0x92>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2202      	movs	r2, #2
 800990c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009910:	e00b      	b.n	800992a <HAL_TIM_PWM_Start+0xaa>
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	2b08      	cmp	r3, #8
 8009916:	d104      	bne.n	8009922 <HAL_TIM_PWM_Start+0xa2>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009920:	e003      	b.n	800992a <HAL_TIM_PWM_Start+0xaa>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2202      	movs	r2, #2
 8009926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2201      	movs	r2, #1
 8009930:	6839      	ldr	r1, [r7, #0]
 8009932:	4618      	mov	r0, r3
 8009934:	f000 fdb4 	bl	800a4a0 <TIM_CCxChannelCmd>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a23      	ldr	r2, [pc, #140]	; (80099cc <HAL_TIM_PWM_Start+0x14c>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d107      	bne.n	8009952 <HAL_TIM_PWM_Start+0xd2>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009950:	645a      	str	r2, [r3, #68]	; 0x44
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a1d      	ldr	r2, [pc, #116]	; (80099cc <HAL_TIM_PWM_Start+0x14c>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d018      	beq.n	800998e <HAL_TIM_PWM_Start+0x10e>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009964:	d013      	beq.n	800998e <HAL_TIM_PWM_Start+0x10e>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a19      	ldr	r2, [pc, #100]	; (80099d0 <HAL_TIM_PWM_Start+0x150>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d00e      	beq.n	800998e <HAL_TIM_PWM_Start+0x10e>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a17      	ldr	r2, [pc, #92]	; (80099d4 <HAL_TIM_PWM_Start+0x154>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d009      	beq.n	800998e <HAL_TIM_PWM_Start+0x10e>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a16      	ldr	r2, [pc, #88]	; (80099d8 <HAL_TIM_PWM_Start+0x158>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d004      	beq.n	800998e <HAL_TIM_PWM_Start+0x10e>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a14      	ldr	r2, [pc, #80]	; (80099dc <HAL_TIM_PWM_Start+0x15c>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d111      	bne.n	80099b2 <HAL_TIM_PWM_Start+0x132>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	f003 0307 	and.w	r3, r3, #7
 8009998:	60fb      	str	r3, [r7, #12]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2b06      	cmp	r3, #6
 800999e:	d010      	beq.n	80099c2 <HAL_TIM_PWM_Start+0x142>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f042 0201 	orr.w	r2, r2, #1
 80099ae:	601a      	str	r2, [r3, #0]
 80099b0:	e007      	b.n	80099c2 <HAL_TIM_PWM_Start+0x142>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f042 0201 	orr.w	r2, r2, #1
 80099c0:	601a      	str	r2, [r3, #0]
 80099c2:	2300      	movs	r3, #0
 80099c4:	4618      	mov	r0, r3
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	40010000 	.word	0x40010000
 80099d0:	40000400 	.word	0x40000400
 80099d4:	40000800 	.word	0x40000800
 80099d8:	40000c00 	.word	0x40000c00
 80099dc:	40014000 	.word	0x40014000

080099e0 <HAL_TIM_IRQHandler>:
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	f003 0302 	and.w	r3, r3, #2
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	d122      	bne.n	8009a3c <HAL_TIM_IRQHandler+0x5c>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	f003 0302 	and.w	r3, r3, #2
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d11b      	bne.n	8009a3c <HAL_TIM_IRQHandler+0x5c>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f06f 0202 	mvn.w	r2, #2
 8009a0c:	611a      	str	r2, [r3, #16]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2201      	movs	r2, #1
 8009a12:	771a      	strb	r2, [r3, #28]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	f003 0303 	and.w	r3, r3, #3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d003      	beq.n	8009a2a <HAL_TIM_IRQHandler+0x4a>
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fa77 	bl	8009f16 <HAL_TIM_IC_CaptureCallback>
 8009a28:	e005      	b.n	8009a36 <HAL_TIM_IRQHandler+0x56>
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 fa69 	bl	8009f02 <HAL_TIM_OC_DelayElapsedCallback>
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fa7a 	bl	8009f2a <HAL_TIM_PWM_PulseFinishedCallback>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	771a      	strb	r2, [r3, #28]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	f003 0304 	and.w	r3, r3, #4
 8009a46:	2b04      	cmp	r3, #4
 8009a48:	d122      	bne.n	8009a90 <HAL_TIM_IRQHandler+0xb0>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	f003 0304 	and.w	r3, r3, #4
 8009a54:	2b04      	cmp	r3, #4
 8009a56:	d11b      	bne.n	8009a90 <HAL_TIM_IRQHandler+0xb0>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f06f 0204 	mvn.w	r2, #4
 8009a60:	611a      	str	r2, [r3, #16]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2202      	movs	r2, #2
 8009a66:	771a      	strb	r2, [r3, #28]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	699b      	ldr	r3, [r3, #24]
 8009a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d003      	beq.n	8009a7e <HAL_TIM_IRQHandler+0x9e>
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fa4d 	bl	8009f16 <HAL_TIM_IC_CaptureCallback>
 8009a7c:	e005      	b.n	8009a8a <HAL_TIM_IRQHandler+0xaa>
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fa3f 	bl	8009f02 <HAL_TIM_OC_DelayElapsedCallback>
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fa50 	bl	8009f2a <HAL_TIM_PWM_PulseFinishedCallback>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	771a      	strb	r2, [r3, #28]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	f003 0308 	and.w	r3, r3, #8
 8009a9a:	2b08      	cmp	r3, #8
 8009a9c:	d122      	bne.n	8009ae4 <HAL_TIM_IRQHandler+0x104>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	f003 0308 	and.w	r3, r3, #8
 8009aa8:	2b08      	cmp	r3, #8
 8009aaa:	d11b      	bne.n	8009ae4 <HAL_TIM_IRQHandler+0x104>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f06f 0208 	mvn.w	r2, #8
 8009ab4:	611a      	str	r2, [r3, #16]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2204      	movs	r2, #4
 8009aba:	771a      	strb	r2, [r3, #28]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	69db      	ldr	r3, [r3, #28]
 8009ac2:	f003 0303 	and.w	r3, r3, #3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d003      	beq.n	8009ad2 <HAL_TIM_IRQHandler+0xf2>
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 fa23 	bl	8009f16 <HAL_TIM_IC_CaptureCallback>
 8009ad0:	e005      	b.n	8009ade <HAL_TIM_IRQHandler+0xfe>
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 fa15 	bl	8009f02 <HAL_TIM_OC_DelayElapsedCallback>
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fa26 	bl	8009f2a <HAL_TIM_PWM_PulseFinishedCallback>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	771a      	strb	r2, [r3, #28]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	f003 0310 	and.w	r3, r3, #16
 8009aee:	2b10      	cmp	r3, #16
 8009af0:	d122      	bne.n	8009b38 <HAL_TIM_IRQHandler+0x158>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	f003 0310 	and.w	r3, r3, #16
 8009afc:	2b10      	cmp	r3, #16
 8009afe:	d11b      	bne.n	8009b38 <HAL_TIM_IRQHandler+0x158>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f06f 0210 	mvn.w	r2, #16
 8009b08:	611a      	str	r2, [r3, #16]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2208      	movs	r2, #8
 8009b0e:	771a      	strb	r2, [r3, #28]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	69db      	ldr	r3, [r3, #28]
 8009b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d003      	beq.n	8009b26 <HAL_TIM_IRQHandler+0x146>
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 f9f9 	bl	8009f16 <HAL_TIM_IC_CaptureCallback>
 8009b24:	e005      	b.n	8009b32 <HAL_TIM_IRQHandler+0x152>
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f9eb 	bl	8009f02 <HAL_TIM_OC_DelayElapsedCallback>
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f9fc 	bl	8009f2a <HAL_TIM_PWM_PulseFinishedCallback>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	771a      	strb	r2, [r3, #28]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	f003 0301 	and.w	r3, r3, #1
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d10e      	bne.n	8009b64 <HAL_TIM_IRQHandler+0x184>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	f003 0301 	and.w	r3, r3, #1
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d107      	bne.n	8009b64 <HAL_TIM_IRQHandler+0x184>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f06f 0201 	mvn.w	r2, #1
 8009b5c:	611a      	str	r2, [r3, #16]
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7f9 f8b0 	bl	8002cc4 <HAL_TIM_PeriodElapsedCallback>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b6e:	2b80      	cmp	r3, #128	; 0x80
 8009b70:	d10e      	bne.n	8009b90 <HAL_TIM_IRQHandler+0x1b0>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b7c:	2b80      	cmp	r3, #128	; 0x80
 8009b7e:	d107      	bne.n	8009b90 <HAL_TIM_IRQHandler+0x1b0>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009b88:	611a      	str	r2, [r3, #16]
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fd26 	bl	800a5dc <HAL_TIMEx_BreakCallback>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b9a:	2b40      	cmp	r3, #64	; 0x40
 8009b9c:	d10e      	bne.n	8009bbc <HAL_TIM_IRQHandler+0x1dc>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ba8:	2b40      	cmp	r3, #64	; 0x40
 8009baa:	d107      	bne.n	8009bbc <HAL_TIM_IRQHandler+0x1dc>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009bb4:	611a      	str	r2, [r3, #16]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f9c1 	bl	8009f3e <HAL_TIM_TriggerCallback>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	f003 0320 	and.w	r3, r3, #32
 8009bc6:	2b20      	cmp	r3, #32
 8009bc8:	d10e      	bne.n	8009be8 <HAL_TIM_IRQHandler+0x208>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	f003 0320 	and.w	r3, r3, #32
 8009bd4:	2b20      	cmp	r3, #32
 8009bd6:	d107      	bne.n	8009be8 <HAL_TIM_IRQHandler+0x208>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f06f 0220 	mvn.w	r2, #32
 8009be0:	611a      	str	r2, [r3, #16]
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 fcf0 	bl	800a5c8 <HAL_TIMEx_CommutCallback>
 8009be8:	bf00      	nop
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <HAL_TIM_PWM_ConfigChannel>:
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	75fb      	strb	r3, [r7, #23]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d101      	bne.n	8009c0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009c0a:	2302      	movs	r3, #2
 8009c0c:	e0ae      	b.n	8009d6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2201      	movs	r2, #1
 8009c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2b0c      	cmp	r3, #12
 8009c1a:	f200 809f 	bhi.w	8009d5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009c1e:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c24:	08009c59 	.word	0x08009c59
 8009c28:	08009d5d 	.word	0x08009d5d
 8009c2c:	08009d5d 	.word	0x08009d5d
 8009c30:	08009d5d 	.word	0x08009d5d
 8009c34:	08009c99 	.word	0x08009c99
 8009c38:	08009d5d 	.word	0x08009d5d
 8009c3c:	08009d5d 	.word	0x08009d5d
 8009c40:	08009d5d 	.word	0x08009d5d
 8009c44:	08009cdb 	.word	0x08009cdb
 8009c48:	08009d5d 	.word	0x08009d5d
 8009c4c:	08009d5d 	.word	0x08009d5d
 8009c50:	08009d5d 	.word	0x08009d5d
 8009c54:	08009d1b 	.word	0x08009d1b
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68b9      	ldr	r1, [r7, #8]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f000 f9f8 	bl	800a054 <TIM_OC1_SetConfig>
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	699a      	ldr	r2, [r3, #24]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f042 0208 	orr.w	r2, r2, #8
 8009c72:	619a      	str	r2, [r3, #24]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	699a      	ldr	r2, [r3, #24]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f022 0204 	bic.w	r2, r2, #4
 8009c82:	619a      	str	r2, [r3, #24]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	6999      	ldr	r1, [r3, #24]
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	691a      	ldr	r2, [r3, #16]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	430a      	orrs	r2, r1
 8009c94:	619a      	str	r2, [r3, #24]
 8009c96:	e064      	b.n	8009d62 <HAL_TIM_PWM_ConfigChannel+0x172>
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68b9      	ldr	r1, [r7, #8]
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f000 fa3e 	bl	800a120 <TIM_OC2_SetConfig>
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	699a      	ldr	r2, [r3, #24]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cb2:	619a      	str	r2, [r3, #24]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	699a      	ldr	r2, [r3, #24]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cc2:	619a      	str	r2, [r3, #24]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	6999      	ldr	r1, [r3, #24]
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	021a      	lsls	r2, r3, #8
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	430a      	orrs	r2, r1
 8009cd6:	619a      	str	r2, [r3, #24]
 8009cd8:	e043      	b.n	8009d62 <HAL_TIM_PWM_ConfigChannel+0x172>
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68b9      	ldr	r1, [r7, #8]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f000 fa89 	bl	800a1f8 <TIM_OC3_SetConfig>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	69da      	ldr	r2, [r3, #28]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f042 0208 	orr.w	r2, r2, #8
 8009cf4:	61da      	str	r2, [r3, #28]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	69da      	ldr	r2, [r3, #28]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f022 0204 	bic.w	r2, r2, #4
 8009d04:	61da      	str	r2, [r3, #28]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	69d9      	ldr	r1, [r3, #28]
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	691a      	ldr	r2, [r3, #16]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	430a      	orrs	r2, r1
 8009d16:	61da      	str	r2, [r3, #28]
 8009d18:	e023      	b.n	8009d62 <HAL_TIM_PWM_ConfigChannel+0x172>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68b9      	ldr	r1, [r7, #8]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f000 fad3 	bl	800a2cc <TIM_OC4_SetConfig>
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	69da      	ldr	r2, [r3, #28]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d34:	61da      	str	r2, [r3, #28]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	69da      	ldr	r2, [r3, #28]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d44:	61da      	str	r2, [r3, #28]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	69d9      	ldr	r1, [r3, #28]
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	691b      	ldr	r3, [r3, #16]
 8009d50:	021a      	lsls	r2, r3, #8
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	430a      	orrs	r2, r1
 8009d58:	61da      	str	r2, [r3, #28]
 8009d5a:	e002      	b.n	8009d62 <HAL_TIM_PWM_ConfigChannel+0x172>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	75fb      	strb	r3, [r7, #23]
 8009d60:	bf00      	nop
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2200      	movs	r2, #0
 8009d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009d6a:	7dfb      	ldrb	r3, [r7, #23]
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3718      	adds	r7, #24
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <HAL_TIM_ConfigClockSource>:
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
 8009d7e:	2300      	movs	r3, #0
 8009d80:	73fb      	strb	r3, [r7, #15]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d101      	bne.n	8009d90 <HAL_TIM_ConfigClockSource+0x1c>
 8009d8c:	2302      	movs	r3, #2
 8009d8e:	e0b4      	b.n	8009efa <HAL_TIM_ConfigClockSource+0x186>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2201      	movs	r2, #1
 8009d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2202      	movs	r2, #2
 8009d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	60bb      	str	r3, [r7, #8]
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009dae:	60bb      	str	r3, [r7, #8]
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009db6:	60bb      	str	r3, [r7, #8]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	609a      	str	r2, [r3, #8]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dc8:	d03e      	beq.n	8009e48 <HAL_TIM_ConfigClockSource+0xd4>
 8009dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dce:	f200 8087 	bhi.w	8009ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8009dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dd6:	f000 8086 	beq.w	8009ee6 <HAL_TIM_ConfigClockSource+0x172>
 8009dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dde:	d87f      	bhi.n	8009ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8009de0:	2b70      	cmp	r3, #112	; 0x70
 8009de2:	d01a      	beq.n	8009e1a <HAL_TIM_ConfigClockSource+0xa6>
 8009de4:	2b70      	cmp	r3, #112	; 0x70
 8009de6:	d87b      	bhi.n	8009ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8009de8:	2b60      	cmp	r3, #96	; 0x60
 8009dea:	d050      	beq.n	8009e8e <HAL_TIM_ConfigClockSource+0x11a>
 8009dec:	2b60      	cmp	r3, #96	; 0x60
 8009dee:	d877      	bhi.n	8009ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8009df0:	2b50      	cmp	r3, #80	; 0x50
 8009df2:	d03c      	beq.n	8009e6e <HAL_TIM_ConfigClockSource+0xfa>
 8009df4:	2b50      	cmp	r3, #80	; 0x50
 8009df6:	d873      	bhi.n	8009ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8009df8:	2b40      	cmp	r3, #64	; 0x40
 8009dfa:	d058      	beq.n	8009eae <HAL_TIM_ConfigClockSource+0x13a>
 8009dfc:	2b40      	cmp	r3, #64	; 0x40
 8009dfe:	d86f      	bhi.n	8009ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8009e00:	2b30      	cmp	r3, #48	; 0x30
 8009e02:	d064      	beq.n	8009ece <HAL_TIM_ConfigClockSource+0x15a>
 8009e04:	2b30      	cmp	r3, #48	; 0x30
 8009e06:	d86b      	bhi.n	8009ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8009e08:	2b20      	cmp	r3, #32
 8009e0a:	d060      	beq.n	8009ece <HAL_TIM_ConfigClockSource+0x15a>
 8009e0c:	2b20      	cmp	r3, #32
 8009e0e:	d867      	bhi.n	8009ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d05c      	beq.n	8009ece <HAL_TIM_ConfigClockSource+0x15a>
 8009e14:	2b10      	cmp	r3, #16
 8009e16:	d05a      	beq.n	8009ece <HAL_TIM_ConfigClockSource+0x15a>
 8009e18:	e062      	b.n	8009ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6818      	ldr	r0, [r3, #0]
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	6899      	ldr	r1, [r3, #8]
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	685a      	ldr	r2, [r3, #4]
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	f000 fb19 	bl	800a460 <TIM_ETR_SetConfig>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	60bb      	str	r3, [r7, #8]
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009e3c:	60bb      	str	r3, [r7, #8]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	609a      	str	r2, [r3, #8]
 8009e46:	e04f      	b.n	8009ee8 <HAL_TIM_ConfigClockSource+0x174>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6818      	ldr	r0, [r3, #0]
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	6899      	ldr	r1, [r3, #8]
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	685a      	ldr	r2, [r3, #4]
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	f000 fb02 	bl	800a460 <TIM_ETR_SetConfig>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	689a      	ldr	r2, [r3, #8]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e6a:	609a      	str	r2, [r3, #8]
 8009e6c:	e03c      	b.n	8009ee8 <HAL_TIM_ConfigClockSource+0x174>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6818      	ldr	r0, [r3, #0]
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	6859      	ldr	r1, [r3, #4]
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	f000 fa76 	bl	800a36c <TIM_TI1_ConfigInputStage>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2150      	movs	r1, #80	; 0x50
 8009e86:	4618      	mov	r0, r3
 8009e88:	f000 facf 	bl	800a42a <TIM_ITRx_SetConfig>
 8009e8c:	e02c      	b.n	8009ee8 <HAL_TIM_ConfigClockSource+0x174>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6818      	ldr	r0, [r3, #0]
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	6859      	ldr	r1, [r3, #4]
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	f000 fa95 	bl	800a3ca <TIM_TI2_ConfigInputStage>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2160      	movs	r1, #96	; 0x60
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f000 fabf 	bl	800a42a <TIM_ITRx_SetConfig>
 8009eac:	e01c      	b.n	8009ee8 <HAL_TIM_ConfigClockSource+0x174>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6818      	ldr	r0, [r3, #0]
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	6859      	ldr	r1, [r3, #4]
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	f000 fa56 	bl	800a36c <TIM_TI1_ConfigInputStage>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2140      	movs	r1, #64	; 0x40
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f000 faaf 	bl	800a42a <TIM_ITRx_SetConfig>
 8009ecc:	e00c      	b.n	8009ee8 <HAL_TIM_ConfigClockSource+0x174>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	4610      	mov	r0, r2
 8009eda:	f000 faa6 	bl	800a42a <TIM_ITRx_SetConfig>
 8009ede:	e003      	b.n	8009ee8 <HAL_TIM_ConfigClockSource+0x174>
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	73fb      	strb	r3, [r7, #15]
 8009ee4:	e000      	b.n	8009ee8 <HAL_TIM_ConfigClockSource+0x174>
 8009ee6:	bf00      	nop
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2201      	movs	r2, #1
 8009eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009ef8:	7bfb      	ldrb	r3, [r7, #15]
 8009efa:	4618      	mov	r0, r3
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <HAL_TIM_OC_DelayElapsedCallback>:
 8009f02:	b480      	push	{r7}
 8009f04:	b083      	sub	sp, #12
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
 8009f0a:	bf00      	nop
 8009f0c:	370c      	adds	r7, #12
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr

08009f16 <HAL_TIM_IC_CaptureCallback>:
 8009f16:	b480      	push	{r7}
 8009f18:	b083      	sub	sp, #12
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	bf00      	nop
 8009f20:	370c      	adds	r7, #12
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr

08009f2a <HAL_TIM_PWM_PulseFinishedCallback>:
 8009f2a:	b480      	push	{r7}
 8009f2c:	b083      	sub	sp, #12
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
 8009f32:	bf00      	nop
 8009f34:	370c      	adds	r7, #12
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <HAL_TIM_TriggerCallback>:
 8009f3e:	b480      	push	{r7}
 8009f40:	b083      	sub	sp, #12
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
 8009f46:	bf00      	nop
 8009f48:	370c      	adds	r7, #12
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
	...

08009f54 <TIM_Base_SetConfig>:
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	60fb      	str	r3, [r7, #12]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4a34      	ldr	r2, [pc, #208]	; (800a038 <TIM_Base_SetConfig+0xe4>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d00f      	beq.n	8009f8c <TIM_Base_SetConfig+0x38>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f72:	d00b      	beq.n	8009f8c <TIM_Base_SetConfig+0x38>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a31      	ldr	r2, [pc, #196]	; (800a03c <TIM_Base_SetConfig+0xe8>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d007      	beq.n	8009f8c <TIM_Base_SetConfig+0x38>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a30      	ldr	r2, [pc, #192]	; (800a040 <TIM_Base_SetConfig+0xec>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d003      	beq.n	8009f8c <TIM_Base_SetConfig+0x38>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a2f      	ldr	r2, [pc, #188]	; (800a044 <TIM_Base_SetConfig+0xf0>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d108      	bne.n	8009f9e <TIM_Base_SetConfig+0x4a>
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	60fb      	str	r3, [r7, #12]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4a25      	ldr	r2, [pc, #148]	; (800a038 <TIM_Base_SetConfig+0xe4>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d01b      	beq.n	8009fde <TIM_Base_SetConfig+0x8a>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fac:	d017      	beq.n	8009fde <TIM_Base_SetConfig+0x8a>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a22      	ldr	r2, [pc, #136]	; (800a03c <TIM_Base_SetConfig+0xe8>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d013      	beq.n	8009fde <TIM_Base_SetConfig+0x8a>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4a21      	ldr	r2, [pc, #132]	; (800a040 <TIM_Base_SetConfig+0xec>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d00f      	beq.n	8009fde <TIM_Base_SetConfig+0x8a>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4a20      	ldr	r2, [pc, #128]	; (800a044 <TIM_Base_SetConfig+0xf0>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d00b      	beq.n	8009fde <TIM_Base_SetConfig+0x8a>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a1f      	ldr	r2, [pc, #124]	; (800a048 <TIM_Base_SetConfig+0xf4>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d007      	beq.n	8009fde <TIM_Base_SetConfig+0x8a>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4a1e      	ldr	r2, [pc, #120]	; (800a04c <TIM_Base_SetConfig+0xf8>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d003      	beq.n	8009fde <TIM_Base_SetConfig+0x8a>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4a1d      	ldr	r2, [pc, #116]	; (800a050 <TIM_Base_SetConfig+0xfc>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d108      	bne.n	8009ff0 <TIM_Base_SetConfig+0x9c>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fe4:	60fb      	str	r3, [r7, #12]
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	4313      	orrs	r3, r2
 8009fee:	60fb      	str	r3, [r7, #12]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	695b      	ldr	r3, [r3, #20]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	60fb      	str	r3, [r7, #12]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	601a      	str	r2, [r3, #0]
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	689a      	ldr	r2, [r3, #8]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	62da      	str	r2, [r3, #44]	; 0x2c
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	629a      	str	r2, [r3, #40]	; 0x28
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a08      	ldr	r2, [pc, #32]	; (800a038 <TIM_Base_SetConfig+0xe4>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d103      	bne.n	800a024 <TIM_Base_SetConfig+0xd0>
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	691a      	ldr	r2, [r3, #16]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	631a      	str	r2, [r3, #48]	; 0x30
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	615a      	str	r2, [r3, #20]
 800a02a:	bf00      	nop
 800a02c:	3714      	adds	r7, #20
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	40010000 	.word	0x40010000
 800a03c:	40000400 	.word	0x40000400
 800a040:	40000800 	.word	0x40000800
 800a044:	40000c00 	.word	0x40000c00
 800a048:	40014000 	.word	0x40014000
 800a04c:	40014400 	.word	0x40014400
 800a050:	40014800 	.word	0x40014800

0800a054 <TIM_OC1_SetConfig>:
 800a054:	b480      	push	{r7}
 800a056:	b087      	sub	sp, #28
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	f023 0201 	bic.w	r2, r3, #1
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	621a      	str	r2, [r3, #32]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	617b      	str	r3, [r7, #20]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	613b      	str	r3, [r7, #16]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	699b      	ldr	r3, [r3, #24]
 800a07a:	60fb      	str	r3, [r7, #12]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a082:	60fb      	str	r3, [r7, #12]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f023 0303 	bic.w	r3, r3, #3
 800a08a:	60fb      	str	r3, [r7, #12]
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	4313      	orrs	r3, r2
 800a094:	60fb      	str	r3, [r7, #12]
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	f023 0302 	bic.w	r3, r3, #2
 800a09c:	617b      	str	r3, [r7, #20]
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	697a      	ldr	r2, [r7, #20]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	617b      	str	r3, [r7, #20]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a1c      	ldr	r2, [pc, #112]	; (800a11c <TIM_OC1_SetConfig+0xc8>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d10c      	bne.n	800a0ca <TIM_OC1_SetConfig+0x76>
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	f023 0308 	bic.w	r3, r3, #8
 800a0b6:	617b      	str	r3, [r7, #20]
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	697a      	ldr	r2, [r7, #20]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	617b      	str	r3, [r7, #20]
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f023 0304 	bic.w	r3, r3, #4
 800a0c8:	617b      	str	r3, [r7, #20]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a13      	ldr	r2, [pc, #76]	; (800a11c <TIM_OC1_SetConfig+0xc8>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d111      	bne.n	800a0f6 <TIM_OC1_SetConfig+0xa2>
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0d8:	613b      	str	r3, [r7, #16]
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0e0:	613b      	str	r3, [r7, #16]
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	695b      	ldr	r3, [r3, #20]
 800a0e6:	693a      	ldr	r2, [r7, #16]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	613b      	str	r3, [r7, #16]
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	699b      	ldr	r3, [r3, #24]
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	613b      	str	r3, [r7, #16]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	693a      	ldr	r2, [r7, #16]
 800a0fa:	605a      	str	r2, [r3, #4]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	619a      	str	r2, [r3, #24]
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	685a      	ldr	r2, [r3, #4]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	635a      	str	r2, [r3, #52]	; 0x34
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	697a      	ldr	r2, [r7, #20]
 800a10e:	621a      	str	r2, [r3, #32]
 800a110:	bf00      	nop
 800a112:	371c      	adds	r7, #28
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr
 800a11c:	40010000 	.word	0x40010000

0800a120 <TIM_OC2_SetConfig>:
 800a120:	b480      	push	{r7}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a1b      	ldr	r3, [r3, #32]
 800a12e:	f023 0210 	bic.w	r2, r3, #16
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	621a      	str	r2, [r3, #32]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a1b      	ldr	r3, [r3, #32]
 800a13a:	617b      	str	r3, [r7, #20]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	613b      	str	r3, [r7, #16]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	60fb      	str	r3, [r7, #12]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a14e:	60fb      	str	r3, [r7, #12]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a156:	60fb      	str	r3, [r7, #12]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	021b      	lsls	r3, r3, #8
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	4313      	orrs	r3, r2
 800a162:	60fb      	str	r3, [r7, #12]
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	f023 0320 	bic.w	r3, r3, #32
 800a16a:	617b      	str	r3, [r7, #20]
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	011b      	lsls	r3, r3, #4
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	4313      	orrs	r3, r2
 800a176:	617b      	str	r3, [r7, #20]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a1e      	ldr	r2, [pc, #120]	; (800a1f4 <TIM_OC2_SetConfig+0xd4>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d10d      	bne.n	800a19c <TIM_OC2_SetConfig+0x7c>
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a186:	617b      	str	r3, [r7, #20]
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	011b      	lsls	r3, r3, #4
 800a18e:	697a      	ldr	r2, [r7, #20]
 800a190:	4313      	orrs	r3, r2
 800a192:	617b      	str	r3, [r7, #20]
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a19a:	617b      	str	r3, [r7, #20]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a15      	ldr	r2, [pc, #84]	; (800a1f4 <TIM_OC2_SetConfig+0xd4>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d113      	bne.n	800a1cc <TIM_OC2_SetConfig+0xac>
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1aa:	613b      	str	r3, [r7, #16]
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1b2:	613b      	str	r3, [r7, #16]
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	695b      	ldr	r3, [r3, #20]
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	693a      	ldr	r2, [r7, #16]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	613b      	str	r3, [r7, #16]
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	693a      	ldr	r2, [r7, #16]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	613b      	str	r3, [r7, #16]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	605a      	str	r2, [r3, #4]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	619a      	str	r2, [r3, #24]
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	685a      	ldr	r2, [r3, #4]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	639a      	str	r2, [r3, #56]	; 0x38
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	697a      	ldr	r2, [r7, #20]
 800a1e4:	621a      	str	r2, [r3, #32]
 800a1e6:	bf00      	nop
 800a1e8:	371c      	adds	r7, #28
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	40010000 	.word	0x40010000

0800a1f8 <TIM_OC3_SetConfig>:
 800a1f8:	b480      	push	{r7}
 800a1fa:	b087      	sub	sp, #28
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	621a      	str	r2, [r3, #32]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	617b      	str	r3, [r7, #20]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	613b      	str	r3, [r7, #16]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	69db      	ldr	r3, [r3, #28]
 800a21e:	60fb      	str	r3, [r7, #12]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a226:	60fb      	str	r3, [r7, #12]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f023 0303 	bic.w	r3, r3, #3
 800a22e:	60fb      	str	r3, [r7, #12]
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	4313      	orrs	r3, r2
 800a238:	60fb      	str	r3, [r7, #12]
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a240:	617b      	str	r3, [r7, #20]
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	021b      	lsls	r3, r3, #8
 800a248:	697a      	ldr	r2, [r7, #20]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	617b      	str	r3, [r7, #20]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4a1d      	ldr	r2, [pc, #116]	; (800a2c8 <TIM_OC3_SetConfig+0xd0>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d10d      	bne.n	800a272 <TIM_OC3_SetConfig+0x7a>
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a25c:	617b      	str	r3, [r7, #20]
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	021b      	lsls	r3, r3, #8
 800a264:	697a      	ldr	r2, [r7, #20]
 800a266:	4313      	orrs	r3, r2
 800a268:	617b      	str	r3, [r7, #20]
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a270:	617b      	str	r3, [r7, #20]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a14      	ldr	r2, [pc, #80]	; (800a2c8 <TIM_OC3_SetConfig+0xd0>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d113      	bne.n	800a2a2 <TIM_OC3_SetConfig+0xaa>
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a280:	613b      	str	r3, [r7, #16]
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a288:	613b      	str	r3, [r7, #16]
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	695b      	ldr	r3, [r3, #20]
 800a28e:	011b      	lsls	r3, r3, #4
 800a290:	693a      	ldr	r2, [r7, #16]
 800a292:	4313      	orrs	r3, r2
 800a294:	613b      	str	r3, [r7, #16]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	699b      	ldr	r3, [r3, #24]
 800a29a:	011b      	lsls	r3, r3, #4
 800a29c:	693a      	ldr	r2, [r7, #16]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	613b      	str	r3, [r7, #16]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	693a      	ldr	r2, [r7, #16]
 800a2a6:	605a      	str	r2, [r3, #4]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	61da      	str	r2, [r3, #28]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	685a      	ldr	r2, [r3, #4]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	63da      	str	r2, [r3, #60]	; 0x3c
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	697a      	ldr	r2, [r7, #20]
 800a2ba:	621a      	str	r2, [r3, #32]
 800a2bc:	bf00      	nop
 800a2be:	371c      	adds	r7, #28
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr
 800a2c8:	40010000 	.word	0x40010000

0800a2cc <TIM_OC4_SetConfig>:
 800a2cc:	b480      	push	{r7}
 800a2ce:	b087      	sub	sp, #28
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a1b      	ldr	r3, [r3, #32]
 800a2da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	621a      	str	r2, [r3, #32]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a1b      	ldr	r3, [r3, #32]
 800a2e6:	613b      	str	r3, [r7, #16]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	617b      	str	r3, [r7, #20]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	69db      	ldr	r3, [r3, #28]
 800a2f2:	60fb      	str	r3, [r7, #12]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2fa:	60fb      	str	r3, [r7, #12]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a302:	60fb      	str	r3, [r7, #12]
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	021b      	lsls	r3, r3, #8
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	60fb      	str	r3, [r7, #12]
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a316:	613b      	str	r3, [r7, #16]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	031b      	lsls	r3, r3, #12
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	4313      	orrs	r3, r2
 800a322:	613b      	str	r3, [r7, #16]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a10      	ldr	r2, [pc, #64]	; (800a368 <TIM_OC4_SetConfig+0x9c>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d109      	bne.n	800a340 <TIM_OC4_SetConfig+0x74>
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a332:	617b      	str	r3, [r7, #20]
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	695b      	ldr	r3, [r3, #20]
 800a338:	019b      	lsls	r3, r3, #6
 800a33a:	697a      	ldr	r2, [r7, #20]
 800a33c:	4313      	orrs	r3, r2
 800a33e:	617b      	str	r3, [r7, #20]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	697a      	ldr	r2, [r7, #20]
 800a344:	605a      	str	r2, [r3, #4]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	61da      	str	r2, [r3, #28]
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	685a      	ldr	r2, [r3, #4]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	641a      	str	r2, [r3, #64]	; 0x40
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	693a      	ldr	r2, [r7, #16]
 800a358:	621a      	str	r2, [r3, #32]
 800a35a:	bf00      	nop
 800a35c:	371c      	adds	r7, #28
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	40010000 	.word	0x40010000

0800a36c <TIM_TI1_ConfigInputStage>:
 800a36c:	b480      	push	{r7}
 800a36e:	b087      	sub	sp, #28
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6a1b      	ldr	r3, [r3, #32]
 800a37c:	617b      	str	r3, [r7, #20]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6a1b      	ldr	r3, [r3, #32]
 800a382:	f023 0201 	bic.w	r2, r3, #1
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	621a      	str	r2, [r3, #32]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	699b      	ldr	r3, [r3, #24]
 800a38e:	613b      	str	r3, [r7, #16]
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a396:	613b      	str	r3, [r7, #16]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	011b      	lsls	r3, r3, #4
 800a39c:	693a      	ldr	r2, [r7, #16]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	613b      	str	r3, [r7, #16]
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f023 030a 	bic.w	r3, r3, #10
 800a3a8:	617b      	str	r3, [r7, #20]
 800a3aa:	697a      	ldr	r2, [r7, #20]
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	617b      	str	r3, [r7, #20]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	693a      	ldr	r2, [r7, #16]
 800a3b6:	619a      	str	r2, [r3, #24]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	697a      	ldr	r2, [r7, #20]
 800a3bc:	621a      	str	r2, [r3, #32]
 800a3be:	bf00      	nop
 800a3c0:	371c      	adds	r7, #28
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr

0800a3ca <TIM_TI2_ConfigInputStage>:
 800a3ca:	b480      	push	{r7}
 800a3cc:	b087      	sub	sp, #28
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	60f8      	str	r0, [r7, #12]
 800a3d2:	60b9      	str	r1, [r7, #8]
 800a3d4:	607a      	str	r2, [r7, #4]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6a1b      	ldr	r3, [r3, #32]
 800a3da:	f023 0210 	bic.w	r2, r3, #16
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	621a      	str	r2, [r3, #32]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	699b      	ldr	r3, [r3, #24]
 800a3e6:	617b      	str	r3, [r7, #20]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6a1b      	ldr	r3, [r3, #32]
 800a3ec:	613b      	str	r3, [r7, #16]
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3f4:	617b      	str	r3, [r7, #20]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	031b      	lsls	r3, r3, #12
 800a3fa:	697a      	ldr	r2, [r7, #20]
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	617b      	str	r3, [r7, #20]
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a406:	613b      	str	r3, [r7, #16]
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	011b      	lsls	r3, r3, #4
 800a40c:	693a      	ldr	r2, [r7, #16]
 800a40e:	4313      	orrs	r3, r2
 800a410:	613b      	str	r3, [r7, #16]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	697a      	ldr	r2, [r7, #20]
 800a416:	619a      	str	r2, [r3, #24]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	621a      	str	r2, [r3, #32]
 800a41e:	bf00      	nop
 800a420:	371c      	adds	r7, #28
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr

0800a42a <TIM_ITRx_SetConfig>:
 800a42a:	b480      	push	{r7}
 800a42c:	b085      	sub	sp, #20
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
 800a432:	6039      	str	r1, [r7, #0]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	60fb      	str	r3, [r7, #12]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a440:	60fb      	str	r3, [r7, #12]
 800a442:	683a      	ldr	r2, [r7, #0]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	4313      	orrs	r3, r2
 800a448:	f043 0307 	orr.w	r3, r3, #7
 800a44c:	60fb      	str	r3, [r7, #12]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	609a      	str	r2, [r3, #8]
 800a454:	bf00      	nop
 800a456:	3714      	adds	r7, #20
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <TIM_ETR_SetConfig>:
 800a460:	b480      	push	{r7}
 800a462:	b087      	sub	sp, #28
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
 800a46c:	603b      	str	r3, [r7, #0]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	617b      	str	r3, [r7, #20]
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a47a:	617b      	str	r3, [r7, #20]
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	021a      	lsls	r2, r3, #8
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	431a      	orrs	r2, r3
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	4313      	orrs	r3, r2
 800a488:	697a      	ldr	r2, [r7, #20]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	617b      	str	r3, [r7, #20]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	697a      	ldr	r2, [r7, #20]
 800a492:	609a      	str	r2, [r3, #8]
 800a494:	bf00      	nop
 800a496:	371c      	adds	r7, #28
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <TIM_CCxChannelCmd>:
 800a4a0:	b480      	push	{r7}
 800a4a2:	b087      	sub	sp, #28
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	f003 031f 	and.w	r3, r3, #31
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b8:	617b      	str	r3, [r7, #20]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6a1a      	ldr	r2, [r3, #32]
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	43db      	mvns	r3, r3
 800a4c2:	401a      	ands	r2, r3
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	621a      	str	r2, [r3, #32]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	6a1a      	ldr	r2, [r3, #32]
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	f003 031f 	and.w	r3, r3, #31
 800a4d2:	6879      	ldr	r1, [r7, #4]
 800a4d4:	fa01 f303 	lsl.w	r3, r1, r3
 800a4d8:	431a      	orrs	r2, r3
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	621a      	str	r2, [r3, #32]
 800a4de:	bf00      	nop
 800a4e0:	371c      	adds	r7, #28
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr
	...

0800a4ec <HAL_TIMEx_MasterConfigSynchronization>:
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d101      	bne.n	800a504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a500:	2302      	movs	r3, #2
 800a502:	e050      	b.n	800a5a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2201      	movs	r2, #1
 800a508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2202      	movs	r2, #2
 800a510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	60fb      	str	r3, [r7, #12]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	60bb      	str	r3, [r7, #8]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a52a:	60fb      	str	r3, [r7, #12]
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	4313      	orrs	r3, r2
 800a534:	60fb      	str	r3, [r7, #12]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	605a      	str	r2, [r3, #4]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a1c      	ldr	r2, [pc, #112]	; (800a5b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d018      	beq.n	800a57a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a550:	d013      	beq.n	800a57a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a18      	ldr	r2, [pc, #96]	; (800a5b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d00e      	beq.n	800a57a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a16      	ldr	r2, [pc, #88]	; (800a5bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d009      	beq.n	800a57a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a15      	ldr	r2, [pc, #84]	; (800a5c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d004      	beq.n	800a57a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a13      	ldr	r2, [pc, #76]	; (800a5c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d10c      	bne.n	800a594 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a580:	60bb      	str	r3, [r7, #8]
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	4313      	orrs	r3, r2
 800a58a:	60bb      	str	r3, [r7, #8]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	609a      	str	r2, [r3, #8]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3714      	adds	r7, #20
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	40010000 	.word	0x40010000
 800a5b8:	40000400 	.word	0x40000400
 800a5bc:	40000800 	.word	0x40000800
 800a5c0:	40000c00 	.word	0x40000c00
 800a5c4:	40014000 	.word	0x40014000

0800a5c8 <HAL_TIMEx_CommutCallback>:
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <HAL_TIMEx_BreakCallback>:
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	bf00      	nop
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <USB_CoreInit>:
 800a5f0:	b084      	sub	sp, #16
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b084      	sub	sp, #16
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	f107 001c 	add.w	r0, r7, #28
 800a5fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800a602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a604:	2b01      	cmp	r3, #1
 800a606:	d122      	bne.n	800a64e <USB_CoreInit+0x5e>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a60c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	639a      	str	r2, [r3, #56]	; 0x38
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a61c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	60d3      	str	r3, [r2, #12]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	60da      	str	r2, [r3, #12]
 800a630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a632:	2b01      	cmp	r3, #1
 800a634:	d105      	bne.n	800a642 <USB_CoreInit+0x52>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	60da      	str	r2, [r3, #12]
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f001 fbee 	bl	800be24 <USB_CoreReset>
 800a648:	4603      	mov	r3, r0
 800a64a:	73fb      	strb	r3, [r7, #15]
 800a64c:	e01a      	b.n	800a684 <USB_CoreInit+0x94>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	60da      	str	r2, [r3, #12]
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f001 fbe2 	bl	800be24 <USB_CoreReset>
 800a660:	4603      	mov	r3, r0
 800a662:	73fb      	strb	r3, [r7, #15]
 800a664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a666:	2b00      	cmp	r3, #0
 800a668:	d106      	bne.n	800a678 <USB_CoreInit+0x88>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	639a      	str	r2, [r3, #56]	; 0x38
 800a676:	e005      	b.n	800a684 <USB_CoreInit+0x94>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a67c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	639a      	str	r2, [r3, #56]	; 0x38
 800a684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a686:	2b01      	cmp	r3, #1
 800a688:	d10b      	bne.n	800a6a2 <USB_CoreInit+0xb2>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	f043 0206 	orr.w	r2, r3, #6
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	609a      	str	r2, [r3, #8]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	f043 0220 	orr.w	r2, r3, #32
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	609a      	str	r2, [r3, #8]
 800a6a2:	7bfb      	ldrb	r3, [r7, #15]
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3710      	adds	r7, #16
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6ae:	b004      	add	sp, #16
 800a6b0:	4770      	bx	lr
	...

0800a6b4 <USB_SetTurnaroundTime>:
 800a6b4:	b480      	push	{r7}
 800a6b6:	b087      	sub	sp, #28
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	71fb      	strb	r3, [r7, #7]
 800a6c2:	79fb      	ldrb	r3, [r7, #7]
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	d165      	bne.n	800a794 <USB_SetTurnaroundTime+0xe0>
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	4a41      	ldr	r2, [pc, #260]	; (800a7d0 <USB_SetTurnaroundTime+0x11c>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d906      	bls.n	800a6de <USB_SetTurnaroundTime+0x2a>
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	4a40      	ldr	r2, [pc, #256]	; (800a7d4 <USB_SetTurnaroundTime+0x120>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d202      	bcs.n	800a6de <USB_SetTurnaroundTime+0x2a>
 800a6d8:	230f      	movs	r3, #15
 800a6da:	617b      	str	r3, [r7, #20]
 800a6dc:	e062      	b.n	800a7a4 <USB_SetTurnaroundTime+0xf0>
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	4a3c      	ldr	r2, [pc, #240]	; (800a7d4 <USB_SetTurnaroundTime+0x120>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d306      	bcc.n	800a6f4 <USB_SetTurnaroundTime+0x40>
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	4a3b      	ldr	r2, [pc, #236]	; (800a7d8 <USB_SetTurnaroundTime+0x124>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d202      	bcs.n	800a6f4 <USB_SetTurnaroundTime+0x40>
 800a6ee:	230e      	movs	r3, #14
 800a6f0:	617b      	str	r3, [r7, #20]
 800a6f2:	e057      	b.n	800a7a4 <USB_SetTurnaroundTime+0xf0>
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	4a38      	ldr	r2, [pc, #224]	; (800a7d8 <USB_SetTurnaroundTime+0x124>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d306      	bcc.n	800a70a <USB_SetTurnaroundTime+0x56>
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	4a37      	ldr	r2, [pc, #220]	; (800a7dc <USB_SetTurnaroundTime+0x128>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d202      	bcs.n	800a70a <USB_SetTurnaroundTime+0x56>
 800a704:	230d      	movs	r3, #13
 800a706:	617b      	str	r3, [r7, #20]
 800a708:	e04c      	b.n	800a7a4 <USB_SetTurnaroundTime+0xf0>
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	4a33      	ldr	r2, [pc, #204]	; (800a7dc <USB_SetTurnaroundTime+0x128>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d306      	bcc.n	800a720 <USB_SetTurnaroundTime+0x6c>
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	4a32      	ldr	r2, [pc, #200]	; (800a7e0 <USB_SetTurnaroundTime+0x12c>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d802      	bhi.n	800a720 <USB_SetTurnaroundTime+0x6c>
 800a71a:	230c      	movs	r3, #12
 800a71c:	617b      	str	r3, [r7, #20]
 800a71e:	e041      	b.n	800a7a4 <USB_SetTurnaroundTime+0xf0>
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	4a2f      	ldr	r2, [pc, #188]	; (800a7e0 <USB_SetTurnaroundTime+0x12c>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d906      	bls.n	800a736 <USB_SetTurnaroundTime+0x82>
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	4a2e      	ldr	r2, [pc, #184]	; (800a7e4 <USB_SetTurnaroundTime+0x130>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d802      	bhi.n	800a736 <USB_SetTurnaroundTime+0x82>
 800a730:	230b      	movs	r3, #11
 800a732:	617b      	str	r3, [r7, #20]
 800a734:	e036      	b.n	800a7a4 <USB_SetTurnaroundTime+0xf0>
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	4a2a      	ldr	r2, [pc, #168]	; (800a7e4 <USB_SetTurnaroundTime+0x130>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d906      	bls.n	800a74c <USB_SetTurnaroundTime+0x98>
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	4a29      	ldr	r2, [pc, #164]	; (800a7e8 <USB_SetTurnaroundTime+0x134>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d802      	bhi.n	800a74c <USB_SetTurnaroundTime+0x98>
 800a746:	230a      	movs	r3, #10
 800a748:	617b      	str	r3, [r7, #20]
 800a74a:	e02b      	b.n	800a7a4 <USB_SetTurnaroundTime+0xf0>
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	4a26      	ldr	r2, [pc, #152]	; (800a7e8 <USB_SetTurnaroundTime+0x134>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d906      	bls.n	800a762 <USB_SetTurnaroundTime+0xae>
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	4a25      	ldr	r2, [pc, #148]	; (800a7ec <USB_SetTurnaroundTime+0x138>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d202      	bcs.n	800a762 <USB_SetTurnaroundTime+0xae>
 800a75c:	2309      	movs	r3, #9
 800a75e:	617b      	str	r3, [r7, #20]
 800a760:	e020      	b.n	800a7a4 <USB_SetTurnaroundTime+0xf0>
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	4a21      	ldr	r2, [pc, #132]	; (800a7ec <USB_SetTurnaroundTime+0x138>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d306      	bcc.n	800a778 <USB_SetTurnaroundTime+0xc4>
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	4a20      	ldr	r2, [pc, #128]	; (800a7f0 <USB_SetTurnaroundTime+0x13c>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d802      	bhi.n	800a778 <USB_SetTurnaroundTime+0xc4>
 800a772:	2308      	movs	r3, #8
 800a774:	617b      	str	r3, [r7, #20]
 800a776:	e015      	b.n	800a7a4 <USB_SetTurnaroundTime+0xf0>
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	4a1d      	ldr	r2, [pc, #116]	; (800a7f0 <USB_SetTurnaroundTime+0x13c>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d906      	bls.n	800a78e <USB_SetTurnaroundTime+0xda>
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	4a1c      	ldr	r2, [pc, #112]	; (800a7f4 <USB_SetTurnaroundTime+0x140>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d202      	bcs.n	800a78e <USB_SetTurnaroundTime+0xda>
 800a788:	2307      	movs	r3, #7
 800a78a:	617b      	str	r3, [r7, #20]
 800a78c:	e00a      	b.n	800a7a4 <USB_SetTurnaroundTime+0xf0>
 800a78e:	2306      	movs	r3, #6
 800a790:	617b      	str	r3, [r7, #20]
 800a792:	e007      	b.n	800a7a4 <USB_SetTurnaroundTime+0xf0>
 800a794:	79fb      	ldrb	r3, [r7, #7]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d102      	bne.n	800a7a0 <USB_SetTurnaroundTime+0xec>
 800a79a:	2309      	movs	r3, #9
 800a79c:	617b      	str	r3, [r7, #20]
 800a79e:	e001      	b.n	800a7a4 <USB_SetTurnaroundTime+0xf0>
 800a7a0:	2309      	movs	r3, #9
 800a7a2:	617b      	str	r3, [r7, #20]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	60da      	str	r2, [r3, #12]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	68da      	ldr	r2, [r3, #12]
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	029b      	lsls	r3, r3, #10
 800a7b8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a7bc:	431a      	orrs	r2, r3
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	60da      	str	r2, [r3, #12]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	371c      	adds	r7, #28
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr
 800a7d0:	00d8acbf 	.word	0x00d8acbf
 800a7d4:	00e4e1c0 	.word	0x00e4e1c0
 800a7d8:	00f42400 	.word	0x00f42400
 800a7dc:	01067380 	.word	0x01067380
 800a7e0:	011a499f 	.word	0x011a499f
 800a7e4:	01312cff 	.word	0x01312cff
 800a7e8:	014ca43f 	.word	0x014ca43f
 800a7ec:	016e3600 	.word	0x016e3600
 800a7f0:	01a6ab1f 	.word	0x01a6ab1f
 800a7f4:	01e84800 	.word	0x01e84800

0800a7f8 <USB_EnableGlobalInt>:
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	f043 0201 	orr.w	r2, r3, #1
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	609a      	str	r2, [r3, #8]
 800a80c:	2300      	movs	r3, #0
 800a80e:	4618      	mov	r0, r3
 800a810:	370c      	adds	r7, #12
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <USB_DisableGlobalInt>:
 800a81a:	b480      	push	{r7}
 800a81c:	b083      	sub	sp, #12
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	f023 0201 	bic.w	r2, r3, #1
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	609a      	str	r2, [r3, #8]
 800a82e:	2300      	movs	r3, #0
 800a830:	4618      	mov	r0, r3
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <USB_SetCurrentMode>:
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	460b      	mov	r3, r1
 800a846:	70fb      	strb	r3, [r7, #3]
 800a848:	2300      	movs	r3, #0
 800a84a:	60fb      	str	r3, [r7, #12]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	60da      	str	r2, [r3, #12]
 800a858:	78fb      	ldrb	r3, [r7, #3]
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d115      	bne.n	800a88a <USB_SetCurrentMode+0x4e>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	60da      	str	r2, [r3, #12]
 800a86a:	2001      	movs	r0, #1
 800a86c:	f7fa f882 	bl	8004974 <HAL_Delay>
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	3301      	adds	r3, #1
 800a874:	60fb      	str	r3, [r7, #12]
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f001 fa45 	bl	800bd06 <USB_GetMode>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d01e      	beq.n	800a8c0 <USB_SetCurrentMode+0x84>
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2b31      	cmp	r3, #49	; 0x31
 800a886:	d9f0      	bls.n	800a86a <USB_SetCurrentMode+0x2e>
 800a888:	e01a      	b.n	800a8c0 <USB_SetCurrentMode+0x84>
 800a88a:	78fb      	ldrb	r3, [r7, #3]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d115      	bne.n	800a8bc <USB_SetCurrentMode+0x80>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	60da      	str	r2, [r3, #12]
 800a89c:	2001      	movs	r0, #1
 800a89e:	f7fa f869 	bl	8004974 <HAL_Delay>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	60fb      	str	r3, [r7, #12]
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f001 fa2c 	bl	800bd06 <USB_GetMode>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d005      	beq.n	800a8c0 <USB_SetCurrentMode+0x84>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b31      	cmp	r3, #49	; 0x31
 800a8b8:	d9f0      	bls.n	800a89c <USB_SetCurrentMode+0x60>
 800a8ba:	e001      	b.n	800a8c0 <USB_SetCurrentMode+0x84>
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e005      	b.n	800a8cc <USB_SetCurrentMode+0x90>
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2b32      	cmp	r3, #50	; 0x32
 800a8c4:	d101      	bne.n	800a8ca <USB_SetCurrentMode+0x8e>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e000      	b.n	800a8cc <USB_SetCurrentMode+0x90>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <USB_DevInit>:
 800a8d4:	b084      	sub	sp, #16
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b086      	sub	sp, #24
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
 800a8de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a8e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	75fb      	strb	r3, [r7, #23]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	60fb      	str	r3, [r7, #12]
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	613b      	str	r3, [r7, #16]
 800a8f2:	e009      	b.n	800a908 <USB_DevInit+0x34>
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	3340      	adds	r3, #64	; 0x40
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	4413      	add	r3, r2
 800a8fe:	2200      	movs	r2, #0
 800a900:	605a      	str	r2, [r3, #4]
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	3301      	adds	r3, #1
 800a906:	613b      	str	r3, [r7, #16]
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	2b0e      	cmp	r3, #14
 800a90c:	d9f2      	bls.n	800a8f4 <USB_DevInit+0x20>
 800a90e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a910:	2b00      	cmp	r3, #0
 800a912:	d11c      	bne.n	800a94e <USB_DevInit+0x7a>
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a922:	f043 0302 	orr.w	r3, r3, #2
 800a926:	6053      	str	r3, [r2, #4]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a92c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	639a      	str	r2, [r3, #56]	; 0x38
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a938:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	639a      	str	r2, [r3, #56]	; 0x38
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a944:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	639a      	str	r2, [r3, #56]	; 0x38
 800a94c:	e00b      	b.n	800a966 <USB_DevInit+0x92>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a952:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	639a      	str	r2, [r3, #56]	; 0x38
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a95e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	639a      	str	r2, [r3, #56]	; 0x38
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a96c:	461a      	mov	r2, r3
 800a96e:	2300      	movs	r3, #0
 800a970:	6013      	str	r3, [r2, #0]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a978:	4619      	mov	r1, r3
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a980:	461a      	mov	r2, r3
 800a982:	680b      	ldr	r3, [r1, #0]
 800a984:	6013      	str	r3, [r2, #0]
 800a986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d10c      	bne.n	800a9a6 <USB_DevInit+0xd2>
 800a98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d104      	bne.n	800a99c <USB_DevInit+0xc8>
 800a992:	2100      	movs	r1, #0
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 f965 	bl	800ac64 <USB_SetDevSpeed>
 800a99a:	e008      	b.n	800a9ae <USB_DevInit+0xda>
 800a99c:	2101      	movs	r1, #1
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 f960 	bl	800ac64 <USB_SetDevSpeed>
 800a9a4:	e003      	b.n	800a9ae <USB_DevInit+0xda>
 800a9a6:	2103      	movs	r1, #3
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 f95b 	bl	800ac64 <USB_SetDevSpeed>
 800a9ae:	2110      	movs	r1, #16
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 f8f3 	bl	800ab9c <USB_FlushTxFifo>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d001      	beq.n	800a9c0 <USB_DevInit+0xec>
 800a9bc:	2301      	movs	r3, #1
 800a9be:	75fb      	strb	r3, [r7, #23]
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 f91f 	bl	800ac04 <USB_FlushRxFifo>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d001      	beq.n	800a9d0 <USB_DevInit+0xfc>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	75fb      	strb	r3, [r7, #23]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	2300      	movs	r3, #0
 800a9da:	6113      	str	r3, [r2, #16]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	6153      	str	r3, [r2, #20]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	61d3      	str	r3, [r2, #28]
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	613b      	str	r3, [r7, #16]
 800a9f8:	e043      	b.n	800aa82 <USB_DevInit+0x1ae>
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	015a      	lsls	r2, r3, #5
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	4413      	add	r3, r2
 800aa02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa10:	d118      	bne.n	800aa44 <USB_DevInit+0x170>
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d10a      	bne.n	800aa2e <USB_DevInit+0x15a>
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	015a      	lsls	r2, r3, #5
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	4413      	add	r3, r2
 800aa20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa24:	461a      	mov	r2, r3
 800aa26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa2a:	6013      	str	r3, [r2, #0]
 800aa2c:	e013      	b.n	800aa56 <USB_DevInit+0x182>
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	015a      	lsls	r2, r3, #5
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	4413      	add	r3, r2
 800aa36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa40:	6013      	str	r3, [r2, #0]
 800aa42:	e008      	b.n	800aa56 <USB_DevInit+0x182>
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	015a      	lsls	r2, r3, #5
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa50:	461a      	mov	r2, r3
 800aa52:	2300      	movs	r3, #0
 800aa54:	6013      	str	r3, [r2, #0]
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	015a      	lsls	r2, r3, #5
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa62:	461a      	mov	r2, r3
 800aa64:	2300      	movs	r3, #0
 800aa66:	6113      	str	r3, [r2, #16]
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	015a      	lsls	r2, r3, #5
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	4413      	add	r3, r2
 800aa70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa74:	461a      	mov	r2, r3
 800aa76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa7a:	6093      	str	r3, [r2, #8]
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	613b      	str	r3, [r7, #16]
 800aa82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d3b7      	bcc.n	800a9fa <USB_DevInit+0x126>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	613b      	str	r3, [r7, #16]
 800aa8e:	e043      	b.n	800ab18 <USB_DevInit+0x244>
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	015a      	lsls	r2, r3, #5
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	4413      	add	r3, r2
 800aa98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aaa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aaa6:	d118      	bne.n	800aada <USB_DevInit+0x206>
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d10a      	bne.n	800aac4 <USB_DevInit+0x1f0>
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	015a      	lsls	r2, r3, #5
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	4413      	add	r3, r2
 800aab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaba:	461a      	mov	r2, r3
 800aabc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aac0:	6013      	str	r3, [r2, #0]
 800aac2:	e013      	b.n	800aaec <USB_DevInit+0x218>
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	015a      	lsls	r2, r3, #5
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	4413      	add	r3, r2
 800aacc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aad0:	461a      	mov	r2, r3
 800aad2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aad6:	6013      	str	r3, [r2, #0]
 800aad8:	e008      	b.n	800aaec <USB_DevInit+0x218>
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	015a      	lsls	r2, r3, #5
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	4413      	add	r3, r2
 800aae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aae6:	461a      	mov	r2, r3
 800aae8:	2300      	movs	r3, #0
 800aaea:	6013      	str	r3, [r2, #0]
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	015a      	lsls	r2, r3, #5
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaf8:	461a      	mov	r2, r3
 800aafa:	2300      	movs	r3, #0
 800aafc:	6113      	str	r3, [r2, #16]
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	015a      	lsls	r2, r3, #5
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	4413      	add	r3, r2
 800ab06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab10:	6093      	str	r3, [r2, #8]
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	3301      	adds	r3, #1
 800ab16:	613b      	str	r3, [r7, #16]
 800ab18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1a:	693a      	ldr	r2, [r7, #16]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d3b7      	bcc.n	800aa90 <USB_DevInit+0x1bc>
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab32:	6113      	str	r3, [r2, #16]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2200      	movs	r2, #0
 800ab38:	619a      	str	r2, [r3, #24]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ab40:	615a      	str	r2, [r3, #20]
 800ab42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d105      	bne.n	800ab54 <USB_DevInit+0x280>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	699b      	ldr	r3, [r3, #24]
 800ab4c:	f043 0210 	orr.w	r2, r3, #16
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	619a      	str	r2, [r3, #24]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	699a      	ldr	r2, [r3, #24]
 800ab58:	4b0f      	ldr	r3, [pc, #60]	; (800ab98 <USB_DevInit+0x2c4>)
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	6193      	str	r3, [r2, #24]
 800ab60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d005      	beq.n	800ab72 <USB_DevInit+0x29e>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	699b      	ldr	r3, [r3, #24]
 800ab6a:	f043 0208 	orr.w	r2, r3, #8
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	619a      	str	r2, [r3, #24]
 800ab72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d107      	bne.n	800ab88 <USB_DevInit+0x2b4>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	699b      	ldr	r3, [r3, #24]
 800ab7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab80:	f043 0304 	orr.w	r3, r3, #4
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	6193      	str	r3, [r2, #24]
 800ab88:	7dfb      	ldrb	r3, [r7, #23]
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3718      	adds	r7, #24
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab94:	b004      	add	sp, #16
 800ab96:	4770      	bx	lr
 800ab98:	803c3800 	.word	0x803c3800

0800ab9c <USB_FlushTxFifo>:
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
 800aba6:	2300      	movs	r3, #0
 800aba8:	60fb      	str	r3, [r7, #12]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	3301      	adds	r3, #1
 800abae:	60fb      	str	r3, [r7, #12]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	4a13      	ldr	r2, [pc, #76]	; (800ac00 <USB_FlushTxFifo+0x64>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d901      	bls.n	800abbc <USB_FlushTxFifo+0x20>
 800abb8:	2303      	movs	r3, #3
 800abba:	e01b      	b.n	800abf4 <USB_FlushTxFifo+0x58>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	691b      	ldr	r3, [r3, #16]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	daf2      	bge.n	800abaa <USB_FlushTxFifo+0xe>
 800abc4:	2300      	movs	r3, #0
 800abc6:	60fb      	str	r3, [r7, #12]
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	019b      	lsls	r3, r3, #6
 800abcc:	f043 0220 	orr.w	r2, r3, #32
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	611a      	str	r2, [r3, #16]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	3301      	adds	r3, #1
 800abd8:	60fb      	str	r3, [r7, #12]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	4a08      	ldr	r2, [pc, #32]	; (800ac00 <USB_FlushTxFifo+0x64>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d901      	bls.n	800abe6 <USB_FlushTxFifo+0x4a>
 800abe2:	2303      	movs	r3, #3
 800abe4:	e006      	b.n	800abf4 <USB_FlushTxFifo+0x58>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	691b      	ldr	r3, [r3, #16]
 800abea:	f003 0320 	and.w	r3, r3, #32
 800abee:	2b20      	cmp	r3, #32
 800abf0:	d0f0      	beq.n	800abd4 <USB_FlushTxFifo+0x38>
 800abf2:	2300      	movs	r3, #0
 800abf4:	4618      	mov	r0, r3
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr
 800ac00:	00030d40 	.word	0x00030d40

0800ac04 <USB_FlushRxFifo>:
 800ac04:	b480      	push	{r7}
 800ac06:	b085      	sub	sp, #20
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	60fb      	str	r3, [r7, #12]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	3301      	adds	r3, #1
 800ac14:	60fb      	str	r3, [r7, #12]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	4a11      	ldr	r2, [pc, #68]	; (800ac60 <USB_FlushRxFifo+0x5c>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d901      	bls.n	800ac22 <USB_FlushRxFifo+0x1e>
 800ac1e:	2303      	movs	r3, #3
 800ac20:	e018      	b.n	800ac54 <USB_FlushRxFifo+0x50>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	daf2      	bge.n	800ac10 <USB_FlushRxFifo+0xc>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	60fb      	str	r3, [r7, #12]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2210      	movs	r2, #16
 800ac32:	611a      	str	r2, [r3, #16]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	3301      	adds	r3, #1
 800ac38:	60fb      	str	r3, [r7, #12]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	4a08      	ldr	r2, [pc, #32]	; (800ac60 <USB_FlushRxFifo+0x5c>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d901      	bls.n	800ac46 <USB_FlushRxFifo+0x42>
 800ac42:	2303      	movs	r3, #3
 800ac44:	e006      	b.n	800ac54 <USB_FlushRxFifo+0x50>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	691b      	ldr	r3, [r3, #16]
 800ac4a:	f003 0310 	and.w	r3, r3, #16
 800ac4e:	2b10      	cmp	r3, #16
 800ac50:	d0f0      	beq.n	800ac34 <USB_FlushRxFifo+0x30>
 800ac52:	2300      	movs	r3, #0
 800ac54:	4618      	mov	r0, r3
 800ac56:	3714      	adds	r7, #20
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr
 800ac60:	00030d40 	.word	0x00030d40

0800ac64 <USB_SetDevSpeed>:
 800ac64:	b480      	push	{r7}
 800ac66:	b085      	sub	sp, #20
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	70fb      	strb	r3, [r7, #3]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	60fb      	str	r3, [r7, #12]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	78fb      	ldrb	r3, [r7, #3]
 800ac7e:	68f9      	ldr	r1, [r7, #12]
 800ac80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac84:	4313      	orrs	r3, r2
 800ac86:	600b      	str	r3, [r1, #0]
 800ac88:	2300      	movs	r3, #0
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <USB_GetDevSpeed>:
 800ac96:	b480      	push	{r7}
 800ac98:	b087      	sub	sp, #28
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	613b      	str	r3, [r7, #16]
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	f003 0306 	and.w	r3, r3, #6
 800acae:	60fb      	str	r3, [r7, #12]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d102      	bne.n	800acbc <USB_GetDevSpeed+0x26>
 800acb6:	2300      	movs	r3, #0
 800acb8:	75fb      	strb	r3, [r7, #23]
 800acba:	e00a      	b.n	800acd2 <USB_GetDevSpeed+0x3c>
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d002      	beq.n	800acc8 <USB_GetDevSpeed+0x32>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2b06      	cmp	r3, #6
 800acc6:	d102      	bne.n	800acce <USB_GetDevSpeed+0x38>
 800acc8:	2302      	movs	r3, #2
 800acca:	75fb      	strb	r3, [r7, #23]
 800accc:	e001      	b.n	800acd2 <USB_GetDevSpeed+0x3c>
 800acce:	230f      	movs	r3, #15
 800acd0:	75fb      	strb	r3, [r7, #23]
 800acd2:	7dfb      	ldrb	r3, [r7, #23]
 800acd4:	4618      	mov	r0, r3
 800acd6:	371c      	adds	r7, #28
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <USB_ActivateEndpoint>:
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	60fb      	str	r3, [r7, #12]
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	60bb      	str	r3, [r7, #8]
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	785b      	ldrb	r3, [r3, #1]
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d13a      	bne.n	800ad72 <USB_ActivateEndpoint+0x92>
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad02:	69da      	ldr	r2, [r3, #28]
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	f003 030f 	and.w	r3, r3, #15
 800ad0c:	2101      	movs	r1, #1
 800ad0e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	68f9      	ldr	r1, [r7, #12]
 800ad16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	61cb      	str	r3, [r1, #28]
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	015a      	lsls	r2, r3, #5
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	4413      	add	r3, r2
 800ad26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d155      	bne.n	800ade0 <USB_ActivateEndpoint+0x100>
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	015a      	lsls	r2, r3, #5
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	4413      	add	r3, r2
 800ad3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	f3c3 010a 	ubfx	r1, r3, #0, #11
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	791b      	ldrb	r3, [r3, #4]
 800ad4e:	049b      	lsls	r3, r3, #18
 800ad50:	4319      	orrs	r1, r3
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	059b      	lsls	r3, r3, #22
 800ad56:	430b      	orrs	r3, r1
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	68ba      	ldr	r2, [r7, #8]
 800ad5c:	0151      	lsls	r1, r2, #5
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	440a      	add	r2, r1
 800ad62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad6e:	6013      	str	r3, [r2, #0]
 800ad70:	e036      	b.n	800ade0 <USB_ActivateEndpoint+0x100>
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad78:	69da      	ldr	r2, [r3, #28]
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	f003 030f 	and.w	r3, r3, #15
 800ad82:	2101      	movs	r1, #1
 800ad84:	fa01 f303 	lsl.w	r3, r1, r3
 800ad88:	041b      	lsls	r3, r3, #16
 800ad8a:	68f9      	ldr	r1, [r7, #12]
 800ad8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad90:	4313      	orrs	r3, r2
 800ad92:	61cb      	str	r3, [r1, #28]
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	015a      	lsls	r2, r3, #5
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d11a      	bne.n	800ade0 <USB_ActivateEndpoint+0x100>
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	015a      	lsls	r2, r3, #5
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	4413      	add	r3, r2
 800adb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	f3c3 010a 	ubfx	r1, r3, #0, #11
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	791b      	ldrb	r3, [r3, #4]
 800adc4:	049b      	lsls	r3, r3, #18
 800adc6:	430b      	orrs	r3, r1
 800adc8:	4313      	orrs	r3, r2
 800adca:	68ba      	ldr	r2, [r7, #8]
 800adcc:	0151      	lsls	r1, r2, #5
 800adce:	68fa      	ldr	r2, [r7, #12]
 800add0:	440a      	add	r2, r1
 800add2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800add6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800adda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adde:	6013      	str	r3, [r2, #0]
 800ade0:	2300      	movs	r3, #0
 800ade2:	4618      	mov	r0, r3
 800ade4:	3714      	adds	r7, #20
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr
	...

0800adf0 <USB_DeactivateEndpoint>:
 800adf0:	b480      	push	{r7}
 800adf2:	b085      	sub	sp, #20
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	60fb      	str	r3, [r7, #12]
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	60bb      	str	r3, [r7, #8]
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	785b      	ldrb	r3, [r3, #1]
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d161      	bne.n	800aed0 <USB_DeactivateEndpoint+0xe0>
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	015a      	lsls	r2, r3, #5
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	4413      	add	r3, r2
 800ae14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae22:	d11f      	bne.n	800ae64 <USB_DeactivateEndpoint+0x74>
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	015a      	lsls	r2, r3, #5
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	68ba      	ldr	r2, [r7, #8]
 800ae34:	0151      	lsls	r1, r2, #5
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	440a      	add	r2, r1
 800ae3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ae42:	6013      	str	r3, [r2, #0]
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	015a      	lsls	r2, r3, #5
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	68ba      	ldr	r2, [r7, #8]
 800ae54:	0151      	lsls	r1, r2, #5
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	440a      	add	r2, r1
 800ae5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae62:	6013      	str	r3, [r2, #0]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	f003 030f 	and.w	r3, r3, #15
 800ae74:	2101      	movs	r1, #1
 800ae76:	fa01 f303 	lsl.w	r3, r1, r3
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	43db      	mvns	r3, r3
 800ae7e:	68f9      	ldr	r1, [r7, #12]
 800ae80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae84:	4013      	ands	r3, r2
 800ae86:	63cb      	str	r3, [r1, #60]	; 0x3c
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae8e:	69da      	ldr	r2, [r3, #28]
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	f003 030f 	and.w	r3, r3, #15
 800ae98:	2101      	movs	r1, #1
 800ae9a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	43db      	mvns	r3, r3
 800aea2:	68f9      	ldr	r1, [r7, #12]
 800aea4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aea8:	4013      	ands	r3, r2
 800aeaa:	61cb      	str	r3, [r1, #28]
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	015a      	lsls	r2, r3, #5
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	0159      	lsls	r1, r3, #5
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	440b      	add	r3, r1
 800aec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aec6:	4619      	mov	r1, r3
 800aec8:	4b35      	ldr	r3, [pc, #212]	; (800afa0 <USB_DeactivateEndpoint+0x1b0>)
 800aeca:	4013      	ands	r3, r2
 800aecc:	600b      	str	r3, [r1, #0]
 800aece:	e060      	b.n	800af92 <USB_DeactivateEndpoint+0x1a2>
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	015a      	lsls	r2, r3, #5
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	4413      	add	r3, r2
 800aed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aee2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aee6:	d11f      	bne.n	800af28 <USB_DeactivateEndpoint+0x138>
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	015a      	lsls	r2, r3, #5
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	4413      	add	r3, r2
 800aef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	0151      	lsls	r1, r2, #5
 800aefa:	68fa      	ldr	r2, [r7, #12]
 800aefc:	440a      	add	r2, r1
 800aefe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800af06:	6013      	str	r3, [r2, #0]
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	015a      	lsls	r2, r3, #5
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	4413      	add	r3, r2
 800af10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	68ba      	ldr	r2, [r7, #8]
 800af18:	0151      	lsls	r1, r2, #5
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	440a      	add	r2, r1
 800af1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af26:	6013      	str	r3, [r2, #0]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	f003 030f 	and.w	r3, r3, #15
 800af38:	2101      	movs	r1, #1
 800af3a:	fa01 f303 	lsl.w	r3, r1, r3
 800af3e:	041b      	lsls	r3, r3, #16
 800af40:	43db      	mvns	r3, r3
 800af42:	68f9      	ldr	r1, [r7, #12]
 800af44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af48:	4013      	ands	r3, r2
 800af4a:	63cb      	str	r3, [r1, #60]	; 0x3c
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af52:	69da      	ldr	r2, [r3, #28]
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	f003 030f 	and.w	r3, r3, #15
 800af5c:	2101      	movs	r1, #1
 800af5e:	fa01 f303 	lsl.w	r3, r1, r3
 800af62:	041b      	lsls	r3, r3, #16
 800af64:	43db      	mvns	r3, r3
 800af66:	68f9      	ldr	r1, [r7, #12]
 800af68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af6c:	4013      	ands	r3, r2
 800af6e:	61cb      	str	r3, [r1, #28]
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	015a      	lsls	r2, r3, #5
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	4413      	add	r3, r2
 800af78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	0159      	lsls	r1, r3, #5
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	440b      	add	r3, r1
 800af86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af8a:	4619      	mov	r1, r3
 800af8c:	4b05      	ldr	r3, [pc, #20]	; (800afa4 <USB_DeactivateEndpoint+0x1b4>)
 800af8e:	4013      	ands	r3, r2
 800af90:	600b      	str	r3, [r1, #0]
 800af92:	2300      	movs	r3, #0
 800af94:	4618      	mov	r0, r3
 800af96:	3714      	adds	r7, #20
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr
 800afa0:	ec337800 	.word	0xec337800
 800afa4:	eff37800 	.word	0xeff37800

0800afa8 <USB_EPStartXfer>:
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b08a      	sub	sp, #40	; 0x28
 800afac:	af02      	add	r7, sp, #8
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	60b9      	str	r1, [r7, #8]
 800afb2:	4613      	mov	r3, r2
 800afb4:	71fb      	strb	r3, [r7, #7]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	61fb      	str	r3, [r7, #28]
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	61bb      	str	r3, [r7, #24]
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	785b      	ldrb	r3, [r3, #1]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	f040 815c 	bne.w	800b282 <USB_EPStartXfer+0x2da>
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	699b      	ldr	r3, [r3, #24]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d132      	bne.n	800b038 <USB_EPStartXfer+0x90>
 800afd2:	69bb      	ldr	r3, [r7, #24]
 800afd4:	015a      	lsls	r2, r3, #5
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	4413      	add	r3, r2
 800afda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afde:	691b      	ldr	r3, [r3, #16]
 800afe0:	69ba      	ldr	r2, [r7, #24]
 800afe2:	0151      	lsls	r1, r2, #5
 800afe4:	69fa      	ldr	r2, [r7, #28]
 800afe6:	440a      	add	r2, r1
 800afe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aff0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aff4:	6113      	str	r3, [r2, #16]
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	015a      	lsls	r2, r3, #5
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	4413      	add	r3, r2
 800affe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b002:	691b      	ldr	r3, [r3, #16]
 800b004:	69ba      	ldr	r2, [r7, #24]
 800b006:	0151      	lsls	r1, r2, #5
 800b008:	69fa      	ldr	r2, [r7, #28]
 800b00a:	440a      	add	r2, r1
 800b00c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b010:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b014:	6113      	str	r3, [r2, #16]
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	015a      	lsls	r2, r3, #5
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	4413      	add	r3, r2
 800b01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b022:	691b      	ldr	r3, [r3, #16]
 800b024:	69ba      	ldr	r2, [r7, #24]
 800b026:	0151      	lsls	r1, r2, #5
 800b028:	69fa      	ldr	r2, [r7, #28]
 800b02a:	440a      	add	r2, r1
 800b02c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b030:	0cdb      	lsrs	r3, r3, #19
 800b032:	04db      	lsls	r3, r3, #19
 800b034:	6113      	str	r3, [r2, #16]
 800b036:	e074      	b.n	800b122 <USB_EPStartXfer+0x17a>
 800b038:	69bb      	ldr	r3, [r7, #24]
 800b03a:	015a      	lsls	r2, r3, #5
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	4413      	add	r3, r2
 800b040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	69ba      	ldr	r2, [r7, #24]
 800b048:	0151      	lsls	r1, r2, #5
 800b04a:	69fa      	ldr	r2, [r7, #28]
 800b04c:	440a      	add	r2, r1
 800b04e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b052:	0cdb      	lsrs	r3, r3, #19
 800b054:	04db      	lsls	r3, r3, #19
 800b056:	6113      	str	r3, [r2, #16]
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	015a      	lsls	r2, r3, #5
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	4413      	add	r3, r2
 800b060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b064:	691b      	ldr	r3, [r3, #16]
 800b066:	69ba      	ldr	r2, [r7, #24]
 800b068:	0151      	lsls	r1, r2, #5
 800b06a:	69fa      	ldr	r2, [r7, #28]
 800b06c:	440a      	add	r2, r1
 800b06e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b072:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b076:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b07a:	6113      	str	r3, [r2, #16]
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	015a      	lsls	r2, r3, #5
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	4413      	add	r3, r2
 800b084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b088:	691a      	ldr	r2, [r3, #16]
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	6999      	ldr	r1, [r3, #24]
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	440b      	add	r3, r1
 800b094:	1e59      	subs	r1, r3, #1
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b09e:	04d9      	lsls	r1, r3, #19
 800b0a0:	4b9d      	ldr	r3, [pc, #628]	; (800b318 <USB_EPStartXfer+0x370>)
 800b0a2:	400b      	ands	r3, r1
 800b0a4:	69b9      	ldr	r1, [r7, #24]
 800b0a6:	0148      	lsls	r0, r1, #5
 800b0a8:	69f9      	ldr	r1, [r7, #28]
 800b0aa:	4401      	add	r1, r0
 800b0ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	610b      	str	r3, [r1, #16]
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	015a      	lsls	r2, r3, #5
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0c0:	691a      	ldr	r2, [r3, #16]
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	699b      	ldr	r3, [r3, #24]
 800b0c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0ca:	69b9      	ldr	r1, [r7, #24]
 800b0cc:	0148      	lsls	r0, r1, #5
 800b0ce:	69f9      	ldr	r1, [r7, #28]
 800b0d0:	4401      	add	r1, r0
 800b0d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	610b      	str	r3, [r1, #16]
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	791b      	ldrb	r3, [r3, #4]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d11f      	bne.n	800b122 <USB_EPStartXfer+0x17a>
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	015a      	lsls	r2, r3, #5
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ee:	691b      	ldr	r3, [r3, #16]
 800b0f0:	69ba      	ldr	r2, [r7, #24]
 800b0f2:	0151      	lsls	r1, r2, #5
 800b0f4:	69fa      	ldr	r2, [r7, #28]
 800b0f6:	440a      	add	r2, r1
 800b0f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b100:	6113      	str	r3, [r2, #16]
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	015a      	lsls	r2, r3, #5
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	4413      	add	r3, r2
 800b10a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b10e:	691b      	ldr	r3, [r3, #16]
 800b110:	69ba      	ldr	r2, [r7, #24]
 800b112:	0151      	lsls	r1, r2, #5
 800b114:	69fa      	ldr	r2, [r7, #28]
 800b116:	440a      	add	r2, r1
 800b118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b11c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b120:	6113      	str	r3, [r2, #16]
 800b122:	79fb      	ldrb	r3, [r7, #7]
 800b124:	2b01      	cmp	r3, #1
 800b126:	d14b      	bne.n	800b1c0 <USB_EPStartXfer+0x218>
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	695b      	ldr	r3, [r3, #20]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d009      	beq.n	800b144 <USB_EPStartXfer+0x19c>
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	015a      	lsls	r2, r3, #5
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	4413      	add	r3, r2
 800b138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b13c:	461a      	mov	r2, r3
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	695b      	ldr	r3, [r3, #20]
 800b142:	6153      	str	r3, [r2, #20]
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	791b      	ldrb	r3, [r3, #4]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d128      	bne.n	800b19e <USB_EPStartXfer+0x1f6>
 800b14c:	69fb      	ldr	r3, [r7, #28]
 800b14e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d110      	bne.n	800b17e <USB_EPStartXfer+0x1d6>
 800b15c:	69bb      	ldr	r3, [r7, #24]
 800b15e:	015a      	lsls	r2, r3, #5
 800b160:	69fb      	ldr	r3, [r7, #28]
 800b162:	4413      	add	r3, r2
 800b164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	69ba      	ldr	r2, [r7, #24]
 800b16c:	0151      	lsls	r1, r2, #5
 800b16e:	69fa      	ldr	r2, [r7, #28]
 800b170:	440a      	add	r2, r1
 800b172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b176:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b17a:	6013      	str	r3, [r2, #0]
 800b17c:	e00f      	b.n	800b19e <USB_EPStartXfer+0x1f6>
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	015a      	lsls	r2, r3, #5
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	4413      	add	r3, r2
 800b186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	69ba      	ldr	r2, [r7, #24]
 800b18e:	0151      	lsls	r1, r2, #5
 800b190:	69fa      	ldr	r2, [r7, #28]
 800b192:	440a      	add	r2, r1
 800b194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b19c:	6013      	str	r3, [r2, #0]
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	015a      	lsls	r2, r3, #5
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	69ba      	ldr	r2, [r7, #24]
 800b1ae:	0151      	lsls	r1, r2, #5
 800b1b0:	69fa      	ldr	r2, [r7, #28]
 800b1b2:	440a      	add	r2, r1
 800b1b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1bc:	6013      	str	r3, [r2, #0]
 800b1be:	e133      	b.n	800b428 <USB_EPStartXfer+0x480>
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	015a      	lsls	r2, r3, #5
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	69ba      	ldr	r2, [r7, #24]
 800b1d0:	0151      	lsls	r1, r2, #5
 800b1d2:	69fa      	ldr	r2, [r7, #28]
 800b1d4:	440a      	add	r2, r1
 800b1d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1de:	6013      	str	r3, [r2, #0]
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	791b      	ldrb	r3, [r3, #4]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d015      	beq.n	800b214 <USB_EPStartXfer+0x26c>
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	699b      	ldr	r3, [r3, #24]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f000 811b 	beq.w	800b428 <USB_EPStartXfer+0x480>
 800b1f2:	69fb      	ldr	r3, [r7, #28]
 800b1f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	f003 030f 	and.w	r3, r3, #15
 800b202:	2101      	movs	r1, #1
 800b204:	fa01 f303 	lsl.w	r3, r1, r3
 800b208:	69f9      	ldr	r1, [r7, #28]
 800b20a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b20e:	4313      	orrs	r3, r2
 800b210:	634b      	str	r3, [r1, #52]	; 0x34
 800b212:	e109      	b.n	800b428 <USB_EPStartXfer+0x480>
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b220:	2b00      	cmp	r3, #0
 800b222:	d110      	bne.n	800b246 <USB_EPStartXfer+0x29e>
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	015a      	lsls	r2, r3, #5
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	4413      	add	r3, r2
 800b22c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	69ba      	ldr	r2, [r7, #24]
 800b234:	0151      	lsls	r1, r2, #5
 800b236:	69fa      	ldr	r2, [r7, #28]
 800b238:	440a      	add	r2, r1
 800b23a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b23e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b242:	6013      	str	r3, [r2, #0]
 800b244:	e00f      	b.n	800b266 <USB_EPStartXfer+0x2be>
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	015a      	lsls	r2, r3, #5
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	4413      	add	r3, r2
 800b24e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	69ba      	ldr	r2, [r7, #24]
 800b256:	0151      	lsls	r1, r2, #5
 800b258:	69fa      	ldr	r2, [r7, #28]
 800b25a:	440a      	add	r2, r1
 800b25c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b264:	6013      	str	r3, [r2, #0]
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	6919      	ldr	r1, [r3, #16]
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	781a      	ldrb	r2, [r3, #0]
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	699b      	ldr	r3, [r3, #24]
 800b272:	b298      	uxth	r0, r3
 800b274:	79fb      	ldrb	r3, [r7, #7]
 800b276:	9300      	str	r3, [sp, #0]
 800b278:	4603      	mov	r3, r0
 800b27a:	68f8      	ldr	r0, [r7, #12]
 800b27c:	f000 fade 	bl	800b83c <USB_WritePacket>
 800b280:	e0d2      	b.n	800b428 <USB_EPStartXfer+0x480>
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	015a      	lsls	r2, r3, #5
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	4413      	add	r3, r2
 800b28a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b28e:	691b      	ldr	r3, [r3, #16]
 800b290:	69ba      	ldr	r2, [r7, #24]
 800b292:	0151      	lsls	r1, r2, #5
 800b294:	69fa      	ldr	r2, [r7, #28]
 800b296:	440a      	add	r2, r1
 800b298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b29c:	0cdb      	lsrs	r3, r3, #19
 800b29e:	04db      	lsls	r3, r3, #19
 800b2a0:	6113      	str	r3, [r2, #16]
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	015a      	lsls	r2, r3, #5
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ae:	691b      	ldr	r3, [r3, #16]
 800b2b0:	69ba      	ldr	r2, [r7, #24]
 800b2b2:	0151      	lsls	r1, r2, #5
 800b2b4:	69fa      	ldr	r2, [r7, #28]
 800b2b6:	440a      	add	r2, r1
 800b2b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b2c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b2c4:	6113      	str	r3, [r2, #16]
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	699b      	ldr	r3, [r3, #24]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d126      	bne.n	800b31c <USB_EPStartXfer+0x374>
 800b2ce:	69bb      	ldr	r3, [r7, #24]
 800b2d0:	015a      	lsls	r2, r3, #5
 800b2d2:	69fb      	ldr	r3, [r7, #28]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2da:	691a      	ldr	r2, [r3, #16]
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2e4:	69b9      	ldr	r1, [r7, #24]
 800b2e6:	0148      	lsls	r0, r1, #5
 800b2e8:	69f9      	ldr	r1, [r7, #28]
 800b2ea:	4401      	add	r1, r0
 800b2ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	610b      	str	r3, [r1, #16]
 800b2f4:	69bb      	ldr	r3, [r7, #24]
 800b2f6:	015a      	lsls	r2, r3, #5
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	4413      	add	r3, r2
 800b2fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b300:	691b      	ldr	r3, [r3, #16]
 800b302:	69ba      	ldr	r2, [r7, #24]
 800b304:	0151      	lsls	r1, r2, #5
 800b306:	69fa      	ldr	r2, [r7, #28]
 800b308:	440a      	add	r2, r1
 800b30a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b30e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b312:	6113      	str	r3, [r2, #16]
 800b314:	e03a      	b.n	800b38c <USB_EPStartXfer+0x3e4>
 800b316:	bf00      	nop
 800b318:	1ff80000 	.word	0x1ff80000
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	699a      	ldr	r2, [r3, #24]
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	4413      	add	r3, r2
 800b326:	1e5a      	subs	r2, r3, #1
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b330:	82fb      	strh	r3, [r7, #22]
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	8afa      	ldrh	r2, [r7, #22]
 800b338:	fb03 f202 	mul.w	r2, r3, r2
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	61da      	str	r2, [r3, #28]
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	015a      	lsls	r2, r3, #5
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	4413      	add	r3, r2
 800b348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b34c:	691a      	ldr	r2, [r3, #16]
 800b34e:	8afb      	ldrh	r3, [r7, #22]
 800b350:	04d9      	lsls	r1, r3, #19
 800b352:	4b38      	ldr	r3, [pc, #224]	; (800b434 <USB_EPStartXfer+0x48c>)
 800b354:	400b      	ands	r3, r1
 800b356:	69b9      	ldr	r1, [r7, #24]
 800b358:	0148      	lsls	r0, r1, #5
 800b35a:	69f9      	ldr	r1, [r7, #28]
 800b35c:	4401      	add	r1, r0
 800b35e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b362:	4313      	orrs	r3, r2
 800b364:	610b      	str	r3, [r1, #16]
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	015a      	lsls	r2, r3, #5
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	4413      	add	r3, r2
 800b36e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b372:	691a      	ldr	r2, [r3, #16]
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	69db      	ldr	r3, [r3, #28]
 800b378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b37c:	69b9      	ldr	r1, [r7, #24]
 800b37e:	0148      	lsls	r0, r1, #5
 800b380:	69f9      	ldr	r1, [r7, #28]
 800b382:	4401      	add	r1, r0
 800b384:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b388:	4313      	orrs	r3, r2
 800b38a:	610b      	str	r3, [r1, #16]
 800b38c:	79fb      	ldrb	r3, [r7, #7]
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d10d      	bne.n	800b3ae <USB_EPStartXfer+0x406>
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d009      	beq.n	800b3ae <USB_EPStartXfer+0x406>
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	6919      	ldr	r1, [r3, #16]
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	015a      	lsls	r2, r3, #5
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3aa:	460a      	mov	r2, r1
 800b3ac:	615a      	str	r2, [r3, #20]
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	791b      	ldrb	r3, [r3, #4]
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d128      	bne.n	800b408 <USB_EPStartXfer+0x460>
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d110      	bne.n	800b3e8 <USB_EPStartXfer+0x440>
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	015a      	lsls	r2, r3, #5
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	69ba      	ldr	r2, [r7, #24]
 800b3d6:	0151      	lsls	r1, r2, #5
 800b3d8:	69fa      	ldr	r2, [r7, #28]
 800b3da:	440a      	add	r2, r1
 800b3dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b3e4:	6013      	str	r3, [r2, #0]
 800b3e6:	e00f      	b.n	800b408 <USB_EPStartXfer+0x460>
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	015a      	lsls	r2, r3, #5
 800b3ec:	69fb      	ldr	r3, [r7, #28]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	69ba      	ldr	r2, [r7, #24]
 800b3f8:	0151      	lsls	r1, r2, #5
 800b3fa:	69fa      	ldr	r2, [r7, #28]
 800b3fc:	440a      	add	r2, r1
 800b3fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b406:	6013      	str	r3, [r2, #0]
 800b408:	69bb      	ldr	r3, [r7, #24]
 800b40a:	015a      	lsls	r2, r3, #5
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	4413      	add	r3, r2
 800b410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	69ba      	ldr	r2, [r7, #24]
 800b418:	0151      	lsls	r1, r2, #5
 800b41a:	69fa      	ldr	r2, [r7, #28]
 800b41c:	440a      	add	r2, r1
 800b41e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b422:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b426:	6013      	str	r3, [r2, #0]
 800b428:	2300      	movs	r3, #0
 800b42a:	4618      	mov	r0, r3
 800b42c:	3720      	adds	r7, #32
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	1ff80000 	.word	0x1ff80000

0800b438 <USB_EP0StartXfer>:
 800b438:	b480      	push	{r7}
 800b43a:	b087      	sub	sp, #28
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	4613      	mov	r3, r2
 800b444:	71fb      	strb	r3, [r7, #7]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	617b      	str	r3, [r7, #20]
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	613b      	str	r3, [r7, #16]
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	785b      	ldrb	r3, [r3, #1]
 800b454:	2b01      	cmp	r3, #1
 800b456:	f040 80ce 	bne.w	800b5f6 <USB_EP0StartXfer+0x1be>
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	699b      	ldr	r3, [r3, #24]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d132      	bne.n	800b4c8 <USB_EP0StartXfer+0x90>
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	015a      	lsls	r2, r3, #5
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	4413      	add	r3, r2
 800b46a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b46e:	691b      	ldr	r3, [r3, #16]
 800b470:	693a      	ldr	r2, [r7, #16]
 800b472:	0151      	lsls	r1, r2, #5
 800b474:	697a      	ldr	r2, [r7, #20]
 800b476:	440a      	add	r2, r1
 800b478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b47c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b480:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b484:	6113      	str	r3, [r2, #16]
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	015a      	lsls	r2, r3, #5
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	4413      	add	r3, r2
 800b48e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b492:	691b      	ldr	r3, [r3, #16]
 800b494:	693a      	ldr	r2, [r7, #16]
 800b496:	0151      	lsls	r1, r2, #5
 800b498:	697a      	ldr	r2, [r7, #20]
 800b49a:	440a      	add	r2, r1
 800b49c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b4a4:	6113      	str	r3, [r2, #16]
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	015a      	lsls	r2, r3, #5
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	4413      	add	r3, r2
 800b4ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4b2:	691b      	ldr	r3, [r3, #16]
 800b4b4:	693a      	ldr	r2, [r7, #16]
 800b4b6:	0151      	lsls	r1, r2, #5
 800b4b8:	697a      	ldr	r2, [r7, #20]
 800b4ba:	440a      	add	r2, r1
 800b4bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4c0:	0cdb      	lsrs	r3, r3, #19
 800b4c2:	04db      	lsls	r3, r3, #19
 800b4c4:	6113      	str	r3, [r2, #16]
 800b4c6:	e04e      	b.n	800b566 <USB_EP0StartXfer+0x12e>
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	015a      	lsls	r2, r3, #5
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4d4:	691b      	ldr	r3, [r3, #16]
 800b4d6:	693a      	ldr	r2, [r7, #16]
 800b4d8:	0151      	lsls	r1, r2, #5
 800b4da:	697a      	ldr	r2, [r7, #20]
 800b4dc:	440a      	add	r2, r1
 800b4de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4e2:	0cdb      	lsrs	r3, r3, #19
 800b4e4:	04db      	lsls	r3, r3, #19
 800b4e6:	6113      	str	r3, [r2, #16]
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	015a      	lsls	r2, r3, #5
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4f4:	691b      	ldr	r3, [r3, #16]
 800b4f6:	693a      	ldr	r2, [r7, #16]
 800b4f8:	0151      	lsls	r1, r2, #5
 800b4fa:	697a      	ldr	r2, [r7, #20]
 800b4fc:	440a      	add	r2, r1
 800b4fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b502:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b506:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b50a:	6113      	str	r3, [r2, #16]
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	699a      	ldr	r2, [r3, #24]
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	429a      	cmp	r2, r3
 800b516:	d903      	bls.n	800b520 <USB_EP0StartXfer+0xe8>
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	68da      	ldr	r2, [r3, #12]
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	619a      	str	r2, [r3, #24]
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	015a      	lsls	r2, r3, #5
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	4413      	add	r3, r2
 800b528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b52c:	691b      	ldr	r3, [r3, #16]
 800b52e:	693a      	ldr	r2, [r7, #16]
 800b530:	0151      	lsls	r1, r2, #5
 800b532:	697a      	ldr	r2, [r7, #20]
 800b534:	440a      	add	r2, r1
 800b536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b53a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b53e:	6113      	str	r3, [r2, #16]
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	015a      	lsls	r2, r3, #5
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	4413      	add	r3, r2
 800b548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b54c:	691a      	ldr	r2, [r3, #16]
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	699b      	ldr	r3, [r3, #24]
 800b552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b556:	6939      	ldr	r1, [r7, #16]
 800b558:	0148      	lsls	r0, r1, #5
 800b55a:	6979      	ldr	r1, [r7, #20]
 800b55c:	4401      	add	r1, r0
 800b55e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b562:	4313      	orrs	r3, r2
 800b564:	610b      	str	r3, [r1, #16]
 800b566:	79fb      	ldrb	r3, [r7, #7]
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d11e      	bne.n	800b5aa <USB_EP0StartXfer+0x172>
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	695b      	ldr	r3, [r3, #20]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d009      	beq.n	800b588 <USB_EP0StartXfer+0x150>
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	015a      	lsls	r2, r3, #5
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	4413      	add	r3, r2
 800b57c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b580:	461a      	mov	r2, r3
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	695b      	ldr	r3, [r3, #20]
 800b586:	6153      	str	r3, [r2, #20]
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	015a      	lsls	r2, r3, #5
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	4413      	add	r3, r2
 800b590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	693a      	ldr	r2, [r7, #16]
 800b598:	0151      	lsls	r1, r2, #5
 800b59a:	697a      	ldr	r2, [r7, #20]
 800b59c:	440a      	add	r2, r1
 800b59e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5a6:	6013      	str	r3, [r2, #0]
 800b5a8:	e097      	b.n	800b6da <USB_EP0StartXfer+0x2a2>
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	015a      	lsls	r2, r3, #5
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	693a      	ldr	r2, [r7, #16]
 800b5ba:	0151      	lsls	r1, r2, #5
 800b5bc:	697a      	ldr	r2, [r7, #20]
 800b5be:	440a      	add	r2, r1
 800b5c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5c8:	6013      	str	r3, [r2, #0]
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	699b      	ldr	r3, [r3, #24]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f000 8083 	beq.w	800b6da <USB_EP0StartXfer+0x2a2>
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	f003 030f 	and.w	r3, r3, #15
 800b5e4:	2101      	movs	r1, #1
 800b5e6:	fa01 f303 	lsl.w	r3, r1, r3
 800b5ea:	6979      	ldr	r1, [r7, #20]
 800b5ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	634b      	str	r3, [r1, #52]	; 0x34
 800b5f4:	e071      	b.n	800b6da <USB_EP0StartXfer+0x2a2>
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	015a      	lsls	r2, r3, #5
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b602:	691b      	ldr	r3, [r3, #16]
 800b604:	693a      	ldr	r2, [r7, #16]
 800b606:	0151      	lsls	r1, r2, #5
 800b608:	697a      	ldr	r2, [r7, #20]
 800b60a:	440a      	add	r2, r1
 800b60c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b610:	0cdb      	lsrs	r3, r3, #19
 800b612:	04db      	lsls	r3, r3, #19
 800b614:	6113      	str	r3, [r2, #16]
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	015a      	lsls	r2, r3, #5
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	4413      	add	r3, r2
 800b61e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b622:	691b      	ldr	r3, [r3, #16]
 800b624:	693a      	ldr	r2, [r7, #16]
 800b626:	0151      	lsls	r1, r2, #5
 800b628:	697a      	ldr	r2, [r7, #20]
 800b62a:	440a      	add	r2, r1
 800b62c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b630:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b634:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b638:	6113      	str	r3, [r2, #16]
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	699b      	ldr	r3, [r3, #24]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d003      	beq.n	800b64a <USB_EP0StartXfer+0x212>
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	68da      	ldr	r2, [r3, #12]
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	619a      	str	r2, [r3, #24]
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	68da      	ldr	r2, [r3, #12]
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	61da      	str	r2, [r3, #28]
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	015a      	lsls	r2, r3, #5
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	4413      	add	r3, r2
 800b65a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b65e:	691b      	ldr	r3, [r3, #16]
 800b660:	693a      	ldr	r2, [r7, #16]
 800b662:	0151      	lsls	r1, r2, #5
 800b664:	697a      	ldr	r2, [r7, #20]
 800b666:	440a      	add	r2, r1
 800b668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b66c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b670:	6113      	str	r3, [r2, #16]
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	015a      	lsls	r2, r3, #5
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	4413      	add	r3, r2
 800b67a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b67e:	691a      	ldr	r2, [r3, #16]
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	69db      	ldr	r3, [r3, #28]
 800b684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b688:	6939      	ldr	r1, [r7, #16]
 800b68a:	0148      	lsls	r0, r1, #5
 800b68c:	6979      	ldr	r1, [r7, #20]
 800b68e:	4401      	add	r1, r0
 800b690:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b694:	4313      	orrs	r3, r2
 800b696:	610b      	str	r3, [r1, #16]
 800b698:	79fb      	ldrb	r3, [r7, #7]
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d10d      	bne.n	800b6ba <USB_EP0StartXfer+0x282>
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	691b      	ldr	r3, [r3, #16]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d009      	beq.n	800b6ba <USB_EP0StartXfer+0x282>
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	6919      	ldr	r1, [r3, #16]
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	015a      	lsls	r2, r3, #5
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6b6:	460a      	mov	r2, r1
 800b6b8:	615a      	str	r2, [r3, #20]
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	015a      	lsls	r2, r3, #5
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	693a      	ldr	r2, [r7, #16]
 800b6ca:	0151      	lsls	r1, r2, #5
 800b6cc:	697a      	ldr	r2, [r7, #20]
 800b6ce:	440a      	add	r2, r1
 800b6d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b6d8:	6013      	str	r3, [r2, #0]
 800b6da:	2300      	movs	r3, #0
 800b6dc:	4618      	mov	r0, r3
 800b6de:	371c      	adds	r7, #28
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <USB_EPStopXfer>:
 800b6e8:	b480      	push	{r7}
 800b6ea:	b087      	sub	sp, #28
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	60fb      	str	r3, [r7, #12]
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	75fb      	strb	r3, [r7, #23]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	613b      	str	r3, [r7, #16]
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	785b      	ldrb	r3, [r3, #1]
 800b702:	2b01      	cmp	r3, #1
 800b704:	d14a      	bne.n	800b79c <USB_EPStopXfer+0xb4>
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	015a      	lsls	r2, r3, #5
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	4413      	add	r3, r2
 800b710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b71a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b71e:	f040 8086 	bne.w	800b82e <USB_EPStopXfer+0x146>
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	015a      	lsls	r2, r3, #5
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	4413      	add	r3, r2
 800b72c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	7812      	ldrb	r2, [r2, #0]
 800b736:	0151      	lsls	r1, r2, #5
 800b738:	693a      	ldr	r2, [r7, #16]
 800b73a:	440a      	add	r2, r1
 800b73c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b740:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b744:	6013      	str	r3, [r2, #0]
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	015a      	lsls	r2, r3, #5
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	4413      	add	r3, r2
 800b750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	683a      	ldr	r2, [r7, #0]
 800b758:	7812      	ldrb	r2, [r2, #0]
 800b75a:	0151      	lsls	r1, r2, #5
 800b75c:	693a      	ldr	r2, [r7, #16]
 800b75e:	440a      	add	r2, r1
 800b760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b764:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b768:	6013      	str	r3, [r2, #0]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	3301      	adds	r3, #1
 800b76e:	60fb      	str	r3, [r7, #12]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f242 7210 	movw	r2, #10000	; 0x2710
 800b776:	4293      	cmp	r3, r2
 800b778:	d902      	bls.n	800b780 <USB_EPStopXfer+0x98>
 800b77a:	2301      	movs	r3, #1
 800b77c:	75fb      	strb	r3, [r7, #23]
 800b77e:	e056      	b.n	800b82e <USB_EPStopXfer+0x146>
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	015a      	lsls	r2, r3, #5
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	4413      	add	r3, r2
 800b78a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b794:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b798:	d0e7      	beq.n	800b76a <USB_EPStopXfer+0x82>
 800b79a:	e048      	b.n	800b82e <USB_EPStopXfer+0x146>
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	015a      	lsls	r2, r3, #5
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7b4:	d13b      	bne.n	800b82e <USB_EPStopXfer+0x146>
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	015a      	lsls	r2, r3, #5
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	4413      	add	r3, r2
 800b7c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	683a      	ldr	r2, [r7, #0]
 800b7c8:	7812      	ldrb	r2, [r2, #0]
 800b7ca:	0151      	lsls	r1, r2, #5
 800b7cc:	693a      	ldr	r2, [r7, #16]
 800b7ce:	440a      	add	r2, r1
 800b7d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b7d8:	6013      	str	r3, [r2, #0]
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	015a      	lsls	r2, r3, #5
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	683a      	ldr	r2, [r7, #0]
 800b7ec:	7812      	ldrb	r2, [r2, #0]
 800b7ee:	0151      	lsls	r1, r2, #5
 800b7f0:	693a      	ldr	r2, [r7, #16]
 800b7f2:	440a      	add	r2, r1
 800b7f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7fc:	6013      	str	r3, [r2, #0]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	3301      	adds	r3, #1
 800b802:	60fb      	str	r3, [r7, #12]
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f242 7210 	movw	r2, #10000	; 0x2710
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d902      	bls.n	800b814 <USB_EPStopXfer+0x12c>
 800b80e:	2301      	movs	r3, #1
 800b810:	75fb      	strb	r3, [r7, #23]
 800b812:	e00c      	b.n	800b82e <USB_EPStopXfer+0x146>
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	015a      	lsls	r2, r3, #5
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	4413      	add	r3, r2
 800b81e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b82c:	d0e7      	beq.n	800b7fe <USB_EPStopXfer+0x116>
 800b82e:	7dfb      	ldrb	r3, [r7, #23]
 800b830:	4618      	mov	r0, r3
 800b832:	371c      	adds	r7, #28
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr

0800b83c <USB_WritePacket>:
 800b83c:	b480      	push	{r7}
 800b83e:	b089      	sub	sp, #36	; 0x24
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	4611      	mov	r1, r2
 800b848:	461a      	mov	r2, r3
 800b84a:	460b      	mov	r3, r1
 800b84c:	71fb      	strb	r3, [r7, #7]
 800b84e:	4613      	mov	r3, r2
 800b850:	80bb      	strh	r3, [r7, #4]
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	617b      	str	r3, [r7, #20]
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	61fb      	str	r3, [r7, #28]
 800b85a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d123      	bne.n	800b8aa <USB_WritePacket+0x6e>
 800b862:	88bb      	ldrh	r3, [r7, #4]
 800b864:	3303      	adds	r3, #3
 800b866:	089b      	lsrs	r3, r3, #2
 800b868:	613b      	str	r3, [r7, #16]
 800b86a:	2300      	movs	r3, #0
 800b86c:	61bb      	str	r3, [r7, #24]
 800b86e:	e018      	b.n	800b8a2 <USB_WritePacket+0x66>
 800b870:	79fb      	ldrb	r3, [r7, #7]
 800b872:	031a      	lsls	r2, r3, #12
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	4413      	add	r3, r2
 800b878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b87c:	461a      	mov	r2, r3
 800b87e:	69fb      	ldr	r3, [r7, #28]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	6013      	str	r3, [r2, #0]
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	3301      	adds	r3, #1
 800b888:	61fb      	str	r3, [r7, #28]
 800b88a:	69fb      	ldr	r3, [r7, #28]
 800b88c:	3301      	adds	r3, #1
 800b88e:	61fb      	str	r3, [r7, #28]
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	3301      	adds	r3, #1
 800b894:	61fb      	str	r3, [r7, #28]
 800b896:	69fb      	ldr	r3, [r7, #28]
 800b898:	3301      	adds	r3, #1
 800b89a:	61fb      	str	r3, [r7, #28]
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	3301      	adds	r3, #1
 800b8a0:	61bb      	str	r3, [r7, #24]
 800b8a2:	69ba      	ldr	r2, [r7, #24]
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d3e2      	bcc.n	800b870 <USB_WritePacket+0x34>
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3724      	adds	r7, #36	; 0x24
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <USB_ReadPacket>:
 800b8b8:	b480      	push	{r7}
 800b8ba:	b08b      	sub	sp, #44	; 0x2c
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	80fb      	strh	r3, [r7, #6]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	61bb      	str	r3, [r7, #24]
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	627b      	str	r3, [r7, #36]	; 0x24
 800b8ce:	88fb      	ldrh	r3, [r7, #6]
 800b8d0:	089b      	lsrs	r3, r3, #2
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	617b      	str	r3, [r7, #20]
 800b8d6:	88fb      	ldrh	r3, [r7, #6]
 800b8d8:	f003 0303 	and.w	r3, r3, #3
 800b8dc:	83fb      	strh	r3, [r7, #30]
 800b8de:	2300      	movs	r3, #0
 800b8e0:	623b      	str	r3, [r7, #32]
 800b8e2:	e014      	b.n	800b90e <USB_ReadPacket+0x56>
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ee:	601a      	str	r2, [r3, #0]
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	627b      	str	r3, [r7, #36]	; 0x24
 800b8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	627b      	str	r3, [r7, #36]	; 0x24
 800b8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fe:	3301      	adds	r3, #1
 800b900:	627b      	str	r3, [r7, #36]	; 0x24
 800b902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b904:	3301      	adds	r3, #1
 800b906:	627b      	str	r3, [r7, #36]	; 0x24
 800b908:	6a3b      	ldr	r3, [r7, #32]
 800b90a:	3301      	adds	r3, #1
 800b90c:	623b      	str	r3, [r7, #32]
 800b90e:	6a3a      	ldr	r2, [r7, #32]
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	429a      	cmp	r2, r3
 800b914:	d3e6      	bcc.n	800b8e4 <USB_ReadPacket+0x2c>
 800b916:	8bfb      	ldrh	r3, [r7, #30]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d01e      	beq.n	800b95a <USB_ReadPacket+0xa2>
 800b91c:	2300      	movs	r3, #0
 800b91e:	623b      	str	r3, [r7, #32]
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b926:	461a      	mov	r2, r3
 800b928:	f107 0310 	add.w	r3, r7, #16
 800b92c:	6812      	ldr	r2, [r2, #0]
 800b92e:	601a      	str	r2, [r3, #0]
 800b930:	693a      	ldr	r2, [r7, #16]
 800b932:	6a3b      	ldr	r3, [r7, #32]
 800b934:	b2db      	uxtb	r3, r3
 800b936:	00db      	lsls	r3, r3, #3
 800b938:	fa22 f303 	lsr.w	r3, r2, r3
 800b93c:	b2da      	uxtb	r2, r3
 800b93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b940:	701a      	strb	r2, [r3, #0]
 800b942:	6a3b      	ldr	r3, [r7, #32]
 800b944:	3301      	adds	r3, #1
 800b946:	623b      	str	r3, [r7, #32]
 800b948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94a:	3301      	adds	r3, #1
 800b94c:	627b      	str	r3, [r7, #36]	; 0x24
 800b94e:	8bfb      	ldrh	r3, [r7, #30]
 800b950:	3b01      	subs	r3, #1
 800b952:	83fb      	strh	r3, [r7, #30]
 800b954:	8bfb      	ldrh	r3, [r7, #30]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d1ea      	bne.n	800b930 <USB_ReadPacket+0x78>
 800b95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95c:	4618      	mov	r0, r3
 800b95e:	372c      	adds	r7, #44	; 0x2c
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <USB_EPSetStall>:
 800b968:	b480      	push	{r7}
 800b96a:	b085      	sub	sp, #20
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	60fb      	str	r3, [r7, #12]
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	60bb      	str	r3, [r7, #8]
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	785b      	ldrb	r3, [r3, #1]
 800b980:	2b01      	cmp	r3, #1
 800b982:	d12c      	bne.n	800b9de <USB_EPSetStall+0x76>
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	015a      	lsls	r2, r3, #5
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	4413      	add	r3, r2
 800b98c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	2b00      	cmp	r3, #0
 800b994:	db12      	blt.n	800b9bc <USB_EPSetStall+0x54>
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d00f      	beq.n	800b9bc <USB_EPSetStall+0x54>
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	015a      	lsls	r2, r3, #5
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	68ba      	ldr	r2, [r7, #8]
 800b9ac:	0151      	lsls	r1, r2, #5
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	440a      	add	r2, r1
 800b9b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b9ba:	6013      	str	r3, [r2, #0]
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	015a      	lsls	r2, r3, #5
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	68ba      	ldr	r2, [r7, #8]
 800b9cc:	0151      	lsls	r1, r2, #5
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	440a      	add	r2, r1
 800b9d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b9da:	6013      	str	r3, [r2, #0]
 800b9dc:	e02b      	b.n	800ba36 <USB_EPSetStall+0xce>
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	015a      	lsls	r2, r3, #5
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	db12      	blt.n	800ba16 <USB_EPSetStall+0xae>
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00f      	beq.n	800ba16 <USB_EPSetStall+0xae>
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	015a      	lsls	r2, r3, #5
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	68ba      	ldr	r2, [r7, #8]
 800ba06:	0151      	lsls	r1, r2, #5
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	440a      	add	r2, r1
 800ba0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ba14:	6013      	str	r3, [r2, #0]
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	015a      	lsls	r2, r3, #5
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	68ba      	ldr	r2, [r7, #8]
 800ba26:	0151      	lsls	r1, r2, #5
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	440a      	add	r2, r1
 800ba2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba34:	6013      	str	r3, [r2, #0]
 800ba36:	2300      	movs	r3, #0
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3714      	adds	r7, #20
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr

0800ba44 <USB_EPClearStall>:
 800ba44:	b480      	push	{r7}
 800ba46:	b085      	sub	sp, #20
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	6039      	str	r1, [r7, #0]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	60fb      	str	r3, [r7, #12]
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	60bb      	str	r3, [r7, #8]
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	785b      	ldrb	r3, [r3, #1]
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d128      	bne.n	800bab2 <USB_EPClearStall+0x6e>
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	015a      	lsls	r2, r3, #5
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	4413      	add	r3, r2
 800ba68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	68ba      	ldr	r2, [r7, #8]
 800ba70:	0151      	lsls	r1, r2, #5
 800ba72:	68fa      	ldr	r2, [r7, #12]
 800ba74:	440a      	add	r2, r1
 800ba76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba7e:	6013      	str	r3, [r2, #0]
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	791b      	ldrb	r3, [r3, #4]
 800ba84:	2b03      	cmp	r3, #3
 800ba86:	d003      	beq.n	800ba90 <USB_EPClearStall+0x4c>
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	791b      	ldrb	r3, [r3, #4]
 800ba8c:	2b02      	cmp	r3, #2
 800ba8e:	d138      	bne.n	800bb02 <USB_EPClearStall+0xbe>
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	015a      	lsls	r2, r3, #5
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	4413      	add	r3, r2
 800ba98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	68ba      	ldr	r2, [r7, #8]
 800baa0:	0151      	lsls	r1, r2, #5
 800baa2:	68fa      	ldr	r2, [r7, #12]
 800baa4:	440a      	add	r2, r1
 800baa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800baaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800baae:	6013      	str	r3, [r2, #0]
 800bab0:	e027      	b.n	800bb02 <USB_EPClearStall+0xbe>
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	015a      	lsls	r2, r3, #5
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	4413      	add	r3, r2
 800baba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	68ba      	ldr	r2, [r7, #8]
 800bac2:	0151      	lsls	r1, r2, #5
 800bac4:	68fa      	ldr	r2, [r7, #12]
 800bac6:	440a      	add	r2, r1
 800bac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bacc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bad0:	6013      	str	r3, [r2, #0]
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	791b      	ldrb	r3, [r3, #4]
 800bad6:	2b03      	cmp	r3, #3
 800bad8:	d003      	beq.n	800bae2 <USB_EPClearStall+0x9e>
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	791b      	ldrb	r3, [r3, #4]
 800bade:	2b02      	cmp	r3, #2
 800bae0:	d10f      	bne.n	800bb02 <USB_EPClearStall+0xbe>
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	015a      	lsls	r2, r3, #5
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	4413      	add	r3, r2
 800baea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	68ba      	ldr	r2, [r7, #8]
 800baf2:	0151      	lsls	r1, r2, #5
 800baf4:	68fa      	ldr	r2, [r7, #12]
 800baf6:	440a      	add	r2, r1
 800baf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bafc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb00:	6013      	str	r3, [r2, #0]
 800bb02:	2300      	movs	r3, #0
 800bb04:	4618      	mov	r0, r3
 800bb06:	3714      	adds	r7, #20
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <USB_SetDevAddress>:
 800bb10:	b480      	push	{r7}
 800bb12:	b085      	sub	sp, #20
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	460b      	mov	r3, r1
 800bb1a:	70fb      	strb	r3, [r7, #3]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	60fb      	str	r3, [r7, #12]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bb32:	6013      	str	r3, [r2, #0]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	78fb      	ldrb	r3, [r7, #3]
 800bb3e:	011b      	lsls	r3, r3, #4
 800bb40:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bb44:	68f9      	ldr	r1, [r7, #12]
 800bb46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb4a:	4313      	orrs	r3, r2
 800bb4c:	600b      	str	r3, [r1, #0]
 800bb4e:	2300      	movs	r3, #0
 800bb50:	4618      	mov	r0, r3
 800bb52:	3714      	adds	r7, #20
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <USB_DevConnect>:
 800bb5c:	b480      	push	{r7}
 800bb5e:	b085      	sub	sp, #20
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	60fb      	str	r3, [r7, #12]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	68fa      	ldr	r2, [r7, #12]
 800bb72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bb76:	f023 0303 	bic.w	r3, r3, #3
 800bb7a:	6013      	str	r3, [r2, #0]
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb8a:	f023 0302 	bic.w	r3, r3, #2
 800bb8e:	6053      	str	r3, [r2, #4]
 800bb90:	2300      	movs	r3, #0
 800bb92:	4618      	mov	r0, r3
 800bb94:	3714      	adds	r7, #20
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr

0800bb9e <USB_DevDisconnect>:
 800bb9e:	b480      	push	{r7}
 800bba0:	b085      	sub	sp, #20
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	60fb      	str	r3, [r7, #12]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	68fa      	ldr	r2, [r7, #12]
 800bbb4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bbb8:	f023 0303 	bic.w	r3, r3, #3
 800bbbc:	6013      	str	r3, [r2, #0]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	68fa      	ldr	r2, [r7, #12]
 800bbc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbcc:	f043 0302 	orr.w	r3, r3, #2
 800bbd0:	6053      	str	r3, [r2, #4]
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3714      	adds	r7, #20
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <USB_ReadInterrupts>:
 800bbe0:	b480      	push	{r7}
 800bbe2:	b085      	sub	sp, #20
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	695b      	ldr	r3, [r3, #20]
 800bbec:	60fb      	str	r3, [r7, #12]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	699b      	ldr	r3, [r3, #24]
 800bbf2:	68fa      	ldr	r2, [r7, #12]
 800bbf4:	4013      	ands	r3, r2
 800bbf6:	60fb      	str	r3, [r7, #12]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3714      	adds	r7, #20
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr

0800bc06 <USB_ReadDevAllOutEpInterrupt>:
 800bc06:	b480      	push	{r7}
 800bc08:	b085      	sub	sp, #20
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	60fb      	str	r3, [r7, #12]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc18:	699b      	ldr	r3, [r3, #24]
 800bc1a:	60bb      	str	r3, [r7, #8]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc22:	69db      	ldr	r3, [r3, #28]
 800bc24:	68ba      	ldr	r2, [r7, #8]
 800bc26:	4013      	ands	r3, r2
 800bc28:	60bb      	str	r3, [r7, #8]
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	0c1b      	lsrs	r3, r3, #16
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3714      	adds	r7, #20
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr

0800bc3a <USB_ReadDevAllInEpInterrupt>:
 800bc3a:	b480      	push	{r7}
 800bc3c:	b085      	sub	sp, #20
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	60fb      	str	r3, [r7, #12]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc4c:	699b      	ldr	r3, [r3, #24]
 800bc4e:	60bb      	str	r3, [r7, #8]
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc56:	69db      	ldr	r3, [r3, #28]
 800bc58:	68ba      	ldr	r2, [r7, #8]
 800bc5a:	4013      	ands	r3, r2
 800bc5c:	60bb      	str	r3, [r7, #8]
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	b29b      	uxth	r3, r3
 800bc62:	4618      	mov	r0, r3
 800bc64:	3714      	adds	r7, #20
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr

0800bc6e <USB_ReadDevOutEPInterrupt>:
 800bc6e:	b480      	push	{r7}
 800bc70:	b085      	sub	sp, #20
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
 800bc76:	460b      	mov	r3, r1
 800bc78:	70fb      	strb	r3, [r7, #3]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	60fb      	str	r3, [r7, #12]
 800bc7e:	78fb      	ldrb	r3, [r7, #3]
 800bc80:	015a      	lsls	r2, r3, #5
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	4413      	add	r3, r2
 800bc86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	60bb      	str	r3, [r7, #8]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc94:	695b      	ldr	r3, [r3, #20]
 800bc96:	68ba      	ldr	r2, [r7, #8]
 800bc98:	4013      	ands	r3, r2
 800bc9a:	60bb      	str	r3, [r7, #8]
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3714      	adds	r7, #20
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr

0800bcaa <USB_ReadDevInEPInterrupt>:
 800bcaa:	b480      	push	{r7}
 800bcac:	b087      	sub	sp, #28
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	70fb      	strb	r3, [r7, #3]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	617b      	str	r3, [r7, #20]
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcc0:	691b      	ldr	r3, [r3, #16]
 800bcc2:	613b      	str	r3, [r7, #16]
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bccc:	60fb      	str	r3, [r7, #12]
 800bcce:	78fb      	ldrb	r3, [r7, #3]
 800bcd0:	f003 030f 	and.w	r3, r3, #15
 800bcd4:	68fa      	ldr	r2, [r7, #12]
 800bcd6:	fa22 f303 	lsr.w	r3, r2, r3
 800bcda:	01db      	lsls	r3, r3, #7
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	693a      	ldr	r2, [r7, #16]
 800bce0:	4313      	orrs	r3, r2
 800bce2:	613b      	str	r3, [r7, #16]
 800bce4:	78fb      	ldrb	r3, [r7, #3]
 800bce6:	015a      	lsls	r2, r3, #5
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	4413      	add	r3, r2
 800bcec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcf0:	689b      	ldr	r3, [r3, #8]
 800bcf2:	693a      	ldr	r2, [r7, #16]
 800bcf4:	4013      	ands	r3, r2
 800bcf6:	60bb      	str	r3, [r7, #8]
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	371c      	adds	r7, #28
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr

0800bd06 <USB_GetMode>:
 800bd06:	b480      	push	{r7}
 800bd08:	b083      	sub	sp, #12
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	695b      	ldr	r3, [r3, #20]
 800bd12:	f003 0301 	and.w	r3, r3, #1
 800bd16:	4618      	mov	r0, r3
 800bd18:	370c      	adds	r7, #12
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr

0800bd22 <USB_ActivateSetup>:
 800bd22:	b480      	push	{r7}
 800bd24:	b085      	sub	sp, #20
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	60fb      	str	r3, [r7, #12]
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	68fa      	ldr	r2, [r7, #12]
 800bd38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd3c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bd40:	f023 0307 	bic.w	r3, r3, #7
 800bd44:	6013      	str	r3, [r2, #0]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd58:	6053      	str	r3, [r2, #4]
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3714      	adds	r7, #20
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <USB_EP0_OutStart>:
 800bd68:	b480      	push	{r7}
 800bd6a:	b087      	sub	sp, #28
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	460b      	mov	r3, r1
 800bd72:	607a      	str	r2, [r7, #4]
 800bd74:	72fb      	strb	r3, [r7, #11]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	617b      	str	r3, [r7, #20]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	333c      	adds	r3, #60	; 0x3c
 800bd7e:	3304      	adds	r3, #4
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	613b      	str	r3, [r7, #16]
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	4a26      	ldr	r2, [pc, #152]	; (800be20 <USB_EP0_OutStart+0xb8>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d90a      	bls.n	800bda2 <USB_EP0_OutStart+0x3a>
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd9c:	d101      	bne.n	800bda2 <USB_EP0_OutStart+0x3a>
 800bd9e:	2300      	movs	r3, #0
 800bda0:	e037      	b.n	800be12 <USB_EP0_OutStart+0xaa>
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bda8:	461a      	mov	r2, r3
 800bdaa:	2300      	movs	r3, #0
 800bdac:	6113      	str	r3, [r2, #16]
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdb4:	691b      	ldr	r3, [r3, #16]
 800bdb6:	697a      	ldr	r2, [r7, #20]
 800bdb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bdc0:	6113      	str	r3, [r2, #16]
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdc8:	691b      	ldr	r3, [r3, #16]
 800bdca:	697a      	ldr	r2, [r7, #20]
 800bdcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdd0:	f043 0318 	orr.w	r3, r3, #24
 800bdd4:	6113      	str	r3, [r2, #16]
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	697a      	ldr	r2, [r7, #20]
 800bde0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bde4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bde8:	6113      	str	r3, [r2, #16]
 800bdea:	7afb      	ldrb	r3, [r7, #11]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d10f      	bne.n	800be10 <USB_EP0_OutStart+0xa8>
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6153      	str	r3, [r2, #20]
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	697a      	ldr	r2, [r7, #20]
 800be06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be0a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800be0e:	6013      	str	r3, [r2, #0]
 800be10:	2300      	movs	r3, #0
 800be12:	4618      	mov	r0, r3
 800be14:	371c      	adds	r7, #28
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop
 800be20:	4f54300a 	.word	0x4f54300a

0800be24 <USB_CoreReset>:
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	2300      	movs	r3, #0
 800be2e:	60fb      	str	r3, [r7, #12]
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	3301      	adds	r3, #1
 800be34:	60fb      	str	r3, [r7, #12]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	4a13      	ldr	r2, [pc, #76]	; (800be88 <USB_CoreReset+0x64>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d901      	bls.n	800be42 <USB_CoreReset+0x1e>
 800be3e:	2303      	movs	r3, #3
 800be40:	e01b      	b.n	800be7a <USB_CoreReset+0x56>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	2b00      	cmp	r3, #0
 800be48:	daf2      	bge.n	800be30 <USB_CoreReset+0xc>
 800be4a:	2300      	movs	r3, #0
 800be4c:	60fb      	str	r3, [r7, #12]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	691b      	ldr	r3, [r3, #16]
 800be52:	f043 0201 	orr.w	r2, r3, #1
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	611a      	str	r2, [r3, #16]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	3301      	adds	r3, #1
 800be5e:	60fb      	str	r3, [r7, #12]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	4a09      	ldr	r2, [pc, #36]	; (800be88 <USB_CoreReset+0x64>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d901      	bls.n	800be6c <USB_CoreReset+0x48>
 800be68:	2303      	movs	r3, #3
 800be6a:	e006      	b.n	800be7a <USB_CoreReset+0x56>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	691b      	ldr	r3, [r3, #16]
 800be70:	f003 0301 	and.w	r3, r3, #1
 800be74:	2b01      	cmp	r3, #1
 800be76:	d0f0      	beq.n	800be5a <USB_CoreReset+0x36>
 800be78:	2300      	movs	r3, #0
 800be7a:	4618      	mov	r0, r3
 800be7c:	3714      	adds	r7, #20
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr
 800be86:	bf00      	nop
 800be88:	00030d40 	.word	0x00030d40

0800be8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	460b      	mov	r3, r1
 800be96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800be98:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800be9c:	f003 ffe2 	bl	800fe64 <USBD_static_malloc>
 800bea0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d109      	bne.n	800bebc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	32b0      	adds	r2, #176	; 0xb0
 800beb2:	2100      	movs	r1, #0
 800beb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800beb8:	2302      	movs	r3, #2
 800beba:	e0d4      	b.n	800c066 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bebc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800bec0:	2100      	movs	r1, #0
 800bec2:	68f8      	ldr	r0, [r7, #12]
 800bec4:	f004 f95d 	bl	8010182 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	32b0      	adds	r2, #176	; 0xb0
 800bed2:	68f9      	ldr	r1, [r7, #12]
 800bed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	32b0      	adds	r2, #176	; 0xb0
 800bee2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	7c1b      	ldrb	r3, [r3, #16]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d138      	bne.n	800bf66 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bef4:	4b5e      	ldr	r3, [pc, #376]	; (800c070 <USBD_CDC_Init+0x1e4>)
 800bef6:	7819      	ldrb	r1, [r3, #0]
 800bef8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800befc:	2202      	movs	r2, #2
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f003 fe8d 	bl	800fc1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bf04:	4b5a      	ldr	r3, [pc, #360]	; (800c070 <USBD_CDC_Init+0x1e4>)
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	f003 020f 	and.w	r2, r3, #15
 800bf0c:	6879      	ldr	r1, [r7, #4]
 800bf0e:	4613      	mov	r3, r2
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	4413      	add	r3, r2
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	440b      	add	r3, r1
 800bf18:	3324      	adds	r3, #36	; 0x24
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bf1e:	4b55      	ldr	r3, [pc, #340]	; (800c074 <USBD_CDC_Init+0x1e8>)
 800bf20:	7819      	ldrb	r1, [r3, #0]
 800bf22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf26:	2202      	movs	r2, #2
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f003 fe78 	bl	800fc1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bf2e:	4b51      	ldr	r3, [pc, #324]	; (800c074 <USBD_CDC_Init+0x1e8>)
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	f003 020f 	and.w	r2, r3, #15
 800bf36:	6879      	ldr	r1, [r7, #4]
 800bf38:	4613      	mov	r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	4413      	add	r3, r2
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	440b      	add	r3, r1
 800bf42:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf46:	2201      	movs	r2, #1
 800bf48:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bf4a:	4b4b      	ldr	r3, [pc, #300]	; (800c078 <USBD_CDC_Init+0x1ec>)
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	f003 020f 	and.w	r2, r3, #15
 800bf52:	6879      	ldr	r1, [r7, #4]
 800bf54:	4613      	mov	r3, r2
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	4413      	add	r3, r2
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	440b      	add	r3, r1
 800bf5e:	3326      	adds	r3, #38	; 0x26
 800bf60:	2210      	movs	r2, #16
 800bf62:	801a      	strh	r2, [r3, #0]
 800bf64:	e035      	b.n	800bfd2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bf66:	4b42      	ldr	r3, [pc, #264]	; (800c070 <USBD_CDC_Init+0x1e4>)
 800bf68:	7819      	ldrb	r1, [r3, #0]
 800bf6a:	2340      	movs	r3, #64	; 0x40
 800bf6c:	2202      	movs	r2, #2
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f003 fe55 	bl	800fc1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bf74:	4b3e      	ldr	r3, [pc, #248]	; (800c070 <USBD_CDC_Init+0x1e4>)
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	f003 020f 	and.w	r2, r3, #15
 800bf7c:	6879      	ldr	r1, [r7, #4]
 800bf7e:	4613      	mov	r3, r2
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	4413      	add	r3, r2
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	440b      	add	r3, r1
 800bf88:	3324      	adds	r3, #36	; 0x24
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bf8e:	4b39      	ldr	r3, [pc, #228]	; (800c074 <USBD_CDC_Init+0x1e8>)
 800bf90:	7819      	ldrb	r1, [r3, #0]
 800bf92:	2340      	movs	r3, #64	; 0x40
 800bf94:	2202      	movs	r2, #2
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f003 fe41 	bl	800fc1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bf9c:	4b35      	ldr	r3, [pc, #212]	; (800c074 <USBD_CDC_Init+0x1e8>)
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	f003 020f 	and.w	r2, r3, #15
 800bfa4:	6879      	ldr	r1, [r7, #4]
 800bfa6:	4613      	mov	r3, r2
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	4413      	add	r3, r2
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	440b      	add	r3, r1
 800bfb0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bfb8:	4b2f      	ldr	r3, [pc, #188]	; (800c078 <USBD_CDC_Init+0x1ec>)
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	f003 020f 	and.w	r2, r3, #15
 800bfc0:	6879      	ldr	r1, [r7, #4]
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	4413      	add	r3, r2
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	440b      	add	r3, r1
 800bfcc:	3326      	adds	r3, #38	; 0x26
 800bfce:	2210      	movs	r2, #16
 800bfd0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bfd2:	4b29      	ldr	r3, [pc, #164]	; (800c078 <USBD_CDC_Init+0x1ec>)
 800bfd4:	7819      	ldrb	r1, [r3, #0]
 800bfd6:	2308      	movs	r3, #8
 800bfd8:	2203      	movs	r2, #3
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f003 fe1f 	bl	800fc1e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bfe0:	4b25      	ldr	r3, [pc, #148]	; (800c078 <USBD_CDC_Init+0x1ec>)
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	f003 020f 	and.w	r2, r3, #15
 800bfe8:	6879      	ldr	r1, [r7, #4]
 800bfea:	4613      	mov	r3, r2
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	4413      	add	r3, r2
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	440b      	add	r3, r1
 800bff4:	3324      	adds	r3, #36	; 0x24
 800bff6:	2201      	movs	r2, #1
 800bff8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	33b0      	adds	r3, #176	; 0xb0
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	4413      	add	r3, r2
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2200      	movs	r2, #0
 800c01a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2200      	movs	r2, #0
 800c022:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d101      	bne.n	800c034 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c030:	2302      	movs	r3, #2
 800c032:	e018      	b.n	800c066 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	7c1b      	ldrb	r3, [r3, #16]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d10a      	bne.n	800c052 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c03c:	4b0d      	ldr	r3, [pc, #52]	; (800c074 <USBD_CDC_Init+0x1e8>)
 800c03e:	7819      	ldrb	r1, [r3, #0]
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c046:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f003 fed6 	bl	800fdfc <USBD_LL_PrepareReceive>
 800c050:	e008      	b.n	800c064 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c052:	4b08      	ldr	r3, [pc, #32]	; (800c074 <USBD_CDC_Init+0x1e8>)
 800c054:	7819      	ldrb	r1, [r3, #0]
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c05c:	2340      	movs	r3, #64	; 0x40
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f003 fecc 	bl	800fdfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	200000a7 	.word	0x200000a7
 800c074:	200000a8 	.word	0x200000a8
 800c078:	200000a9 	.word	0x200000a9

0800c07c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	460b      	mov	r3, r1
 800c086:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c088:	4b3a      	ldr	r3, [pc, #232]	; (800c174 <USBD_CDC_DeInit+0xf8>)
 800c08a:	781b      	ldrb	r3, [r3, #0]
 800c08c:	4619      	mov	r1, r3
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f003 fdeb 	bl	800fc6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c094:	4b37      	ldr	r3, [pc, #220]	; (800c174 <USBD_CDC_DeInit+0xf8>)
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	f003 020f 	and.w	r2, r3, #15
 800c09c:	6879      	ldr	r1, [r7, #4]
 800c09e:	4613      	mov	r3, r2
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	4413      	add	r3, r2
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	440b      	add	r3, r1
 800c0a8:	3324      	adds	r3, #36	; 0x24
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c0ae:	4b32      	ldr	r3, [pc, #200]	; (800c178 <USBD_CDC_DeInit+0xfc>)
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f003 fdd8 	bl	800fc6a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c0ba:	4b2f      	ldr	r3, [pc, #188]	; (800c178 <USBD_CDC_DeInit+0xfc>)
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	f003 020f 	and.w	r2, r3, #15
 800c0c2:	6879      	ldr	r1, [r7, #4]
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	4413      	add	r3, r2
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	440b      	add	r3, r1
 800c0ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c0d6:	4b29      	ldr	r3, [pc, #164]	; (800c17c <USBD_CDC_DeInit+0x100>)
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	4619      	mov	r1, r3
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f003 fdc4 	bl	800fc6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c0e2:	4b26      	ldr	r3, [pc, #152]	; (800c17c <USBD_CDC_DeInit+0x100>)
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	f003 020f 	and.w	r2, r3, #15
 800c0ea:	6879      	ldr	r1, [r7, #4]
 800c0ec:	4613      	mov	r3, r2
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	4413      	add	r3, r2
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	440b      	add	r3, r1
 800c0f6:	3324      	adds	r3, #36	; 0x24
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c0fc:	4b1f      	ldr	r3, [pc, #124]	; (800c17c <USBD_CDC_DeInit+0x100>)
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	f003 020f 	and.w	r2, r3, #15
 800c104:	6879      	ldr	r1, [r7, #4]
 800c106:	4613      	mov	r3, r2
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	4413      	add	r3, r2
 800c10c:	009b      	lsls	r3, r3, #2
 800c10e:	440b      	add	r3, r1
 800c110:	3326      	adds	r3, #38	; 0x26
 800c112:	2200      	movs	r2, #0
 800c114:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	32b0      	adds	r2, #176	; 0xb0
 800c120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d01f      	beq.n	800c168 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	33b0      	adds	r3, #176	; 0xb0
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	4413      	add	r3, r2
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	32b0      	adds	r2, #176	; 0xb0
 800c146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f003 fe98 	bl	800fe80 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	32b0      	adds	r2, #176	; 0xb0
 800c15a:	2100      	movs	r1, #0
 800c15c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2200      	movs	r2, #0
 800c164:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c168:	2300      	movs	r3, #0
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3708      	adds	r7, #8
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
 800c172:	bf00      	nop
 800c174:	200000a7 	.word	0x200000a7
 800c178:	200000a8 	.word	0x200000a8
 800c17c:	200000a9 	.word	0x200000a9

0800c180 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b086      	sub	sp, #24
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	32b0      	adds	r2, #176	; 0xb0
 800c194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c198:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c19a:	2300      	movs	r3, #0
 800c19c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d101      	bne.n	800c1b0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c1ac:	2303      	movs	r3, #3
 800c1ae:	e0bf      	b.n	800c330 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d050      	beq.n	800c25e <USBD_CDC_Setup+0xde>
 800c1bc:	2b20      	cmp	r3, #32
 800c1be:	f040 80af 	bne.w	800c320 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	88db      	ldrh	r3, [r3, #6]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d03a      	beq.n	800c240 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	b25b      	sxtb	r3, r3
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	da1b      	bge.n	800c20c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	33b0      	adds	r3, #176	; 0xb0
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	4413      	add	r3, r2
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	689b      	ldr	r3, [r3, #8]
 800c1e6:	683a      	ldr	r2, [r7, #0]
 800c1e8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c1ea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c1ec:	683a      	ldr	r2, [r7, #0]
 800c1ee:	88d2      	ldrh	r2, [r2, #6]
 800c1f0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	88db      	ldrh	r3, [r3, #6]
 800c1f6:	2b07      	cmp	r3, #7
 800c1f8:	bf28      	it	cs
 800c1fa:	2307      	movcs	r3, #7
 800c1fc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	89fa      	ldrh	r2, [r7, #14]
 800c202:	4619      	mov	r1, r3
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f001 fd89 	bl	800dd1c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c20a:	e090      	b.n	800c32e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	785a      	ldrb	r2, [r3, #1]
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	88db      	ldrh	r3, [r3, #6]
 800c21a:	2b3f      	cmp	r3, #63	; 0x3f
 800c21c:	d803      	bhi.n	800c226 <USBD_CDC_Setup+0xa6>
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	88db      	ldrh	r3, [r3, #6]
 800c222:	b2da      	uxtb	r2, r3
 800c224:	e000      	b.n	800c228 <USBD_CDC_Setup+0xa8>
 800c226:	2240      	movs	r2, #64	; 0x40
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c22e:	6939      	ldr	r1, [r7, #16]
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c236:	461a      	mov	r2, r3
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f001 fd9b 	bl	800dd74 <USBD_CtlPrepareRx>
      break;
 800c23e:	e076      	b.n	800c32e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	33b0      	adds	r3, #176	; 0xb0
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	4413      	add	r3, r2
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	683a      	ldr	r2, [r7, #0]
 800c254:	7850      	ldrb	r0, [r2, #1]
 800c256:	2200      	movs	r2, #0
 800c258:	6839      	ldr	r1, [r7, #0]
 800c25a:	4798      	blx	r3
      break;
 800c25c:	e067      	b.n	800c32e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	785b      	ldrb	r3, [r3, #1]
 800c262:	2b0b      	cmp	r3, #11
 800c264:	d851      	bhi.n	800c30a <USBD_CDC_Setup+0x18a>
 800c266:	a201      	add	r2, pc, #4	; (adr r2, 800c26c <USBD_CDC_Setup+0xec>)
 800c268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c26c:	0800c29d 	.word	0x0800c29d
 800c270:	0800c319 	.word	0x0800c319
 800c274:	0800c30b 	.word	0x0800c30b
 800c278:	0800c30b 	.word	0x0800c30b
 800c27c:	0800c30b 	.word	0x0800c30b
 800c280:	0800c30b 	.word	0x0800c30b
 800c284:	0800c30b 	.word	0x0800c30b
 800c288:	0800c30b 	.word	0x0800c30b
 800c28c:	0800c30b 	.word	0x0800c30b
 800c290:	0800c30b 	.word	0x0800c30b
 800c294:	0800c2c7 	.word	0x0800c2c7
 800c298:	0800c2f1 	.word	0x0800c2f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	2b03      	cmp	r3, #3
 800c2a6:	d107      	bne.n	800c2b8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c2a8:	f107 030a 	add.w	r3, r7, #10
 800c2ac:	2202      	movs	r2, #2
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f001 fd33 	bl	800dd1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c2b6:	e032      	b.n	800c31e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c2b8:	6839      	ldr	r1, [r7, #0]
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f001 fcbd 	bl	800dc3a <USBD_CtlError>
            ret = USBD_FAIL;
 800c2c0:	2303      	movs	r3, #3
 800c2c2:	75fb      	strb	r3, [r7, #23]
          break;
 800c2c4:	e02b      	b.n	800c31e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	2b03      	cmp	r3, #3
 800c2d0:	d107      	bne.n	800c2e2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c2d2:	f107 030d 	add.w	r3, r7, #13
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	4619      	mov	r1, r3
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f001 fd1e 	bl	800dd1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c2e0:	e01d      	b.n	800c31e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c2e2:	6839      	ldr	r1, [r7, #0]
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f001 fca8 	bl	800dc3a <USBD_CtlError>
            ret = USBD_FAIL;
 800c2ea:	2303      	movs	r3, #3
 800c2ec:	75fb      	strb	r3, [r7, #23]
          break;
 800c2ee:	e016      	b.n	800c31e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2f6:	b2db      	uxtb	r3, r3
 800c2f8:	2b03      	cmp	r3, #3
 800c2fa:	d00f      	beq.n	800c31c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c2fc:	6839      	ldr	r1, [r7, #0]
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f001 fc9b 	bl	800dc3a <USBD_CtlError>
            ret = USBD_FAIL;
 800c304:	2303      	movs	r3, #3
 800c306:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c308:	e008      	b.n	800c31c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c30a:	6839      	ldr	r1, [r7, #0]
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f001 fc94 	bl	800dc3a <USBD_CtlError>
          ret = USBD_FAIL;
 800c312:	2303      	movs	r3, #3
 800c314:	75fb      	strb	r3, [r7, #23]
          break;
 800c316:	e002      	b.n	800c31e <USBD_CDC_Setup+0x19e>
          break;
 800c318:	bf00      	nop
 800c31a:	e008      	b.n	800c32e <USBD_CDC_Setup+0x1ae>
          break;
 800c31c:	bf00      	nop
      }
      break;
 800c31e:	e006      	b.n	800c32e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f001 fc89 	bl	800dc3a <USBD_CtlError>
      ret = USBD_FAIL;
 800c328:	2303      	movs	r3, #3
 800c32a:	75fb      	strb	r3, [r7, #23]
      break;
 800c32c:	bf00      	nop
  }

  return (uint8_t)ret;
 800c32e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c330:	4618      	mov	r0, r3
 800c332:	3718      	adds	r7, #24
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	460b      	mov	r3, r1
 800c342:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c34a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	32b0      	adds	r2, #176	; 0xb0
 800c356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d101      	bne.n	800c362 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c35e:	2303      	movs	r3, #3
 800c360:	e065      	b.n	800c42e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	32b0      	adds	r2, #176	; 0xb0
 800c36c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c370:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c372:	78fb      	ldrb	r3, [r7, #3]
 800c374:	f003 020f 	and.w	r2, r3, #15
 800c378:	6879      	ldr	r1, [r7, #4]
 800c37a:	4613      	mov	r3, r2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	4413      	add	r3, r2
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	440b      	add	r3, r1
 800c384:	3318      	adds	r3, #24
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d02f      	beq.n	800c3ec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c38c:	78fb      	ldrb	r3, [r7, #3]
 800c38e:	f003 020f 	and.w	r2, r3, #15
 800c392:	6879      	ldr	r1, [r7, #4]
 800c394:	4613      	mov	r3, r2
 800c396:	009b      	lsls	r3, r3, #2
 800c398:	4413      	add	r3, r2
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	440b      	add	r3, r1
 800c39e:	3318      	adds	r3, #24
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	78fb      	ldrb	r3, [r7, #3]
 800c3a4:	f003 010f 	and.w	r1, r3, #15
 800c3a8:	68f8      	ldr	r0, [r7, #12]
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	00db      	lsls	r3, r3, #3
 800c3ae:	440b      	add	r3, r1
 800c3b0:	009b      	lsls	r3, r3, #2
 800c3b2:	4403      	add	r3, r0
 800c3b4:	3348      	adds	r3, #72	; 0x48
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	fbb2 f1f3 	udiv	r1, r2, r3
 800c3bc:	fb01 f303 	mul.w	r3, r1, r3
 800c3c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d112      	bne.n	800c3ec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c3c6:	78fb      	ldrb	r3, [r7, #3]
 800c3c8:	f003 020f 	and.w	r2, r3, #15
 800c3cc:	6879      	ldr	r1, [r7, #4]
 800c3ce:	4613      	mov	r3, r2
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	4413      	add	r3, r2
 800c3d4:	009b      	lsls	r3, r3, #2
 800c3d6:	440b      	add	r3, r1
 800c3d8:	3318      	adds	r3, #24
 800c3da:	2200      	movs	r2, #0
 800c3dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c3de:	78f9      	ldrb	r1, [r7, #3]
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f003 fce8 	bl	800fdba <USBD_LL_Transmit>
 800c3ea:	e01f      	b.n	800c42c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	33b0      	adds	r3, #176	; 0xb0
 800c3fe:	009b      	lsls	r3, r3, #2
 800c400:	4413      	add	r3, r2
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	691b      	ldr	r3, [r3, #16]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d010      	beq.n	800c42c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	33b0      	adds	r3, #176	; 0xb0
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	4413      	add	r3, r2
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	691b      	ldr	r3, [r3, #16]
 800c41c:	68ba      	ldr	r2, [r7, #8]
 800c41e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c428:	78fa      	ldrb	r2, [r7, #3]
 800c42a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c42c:	2300      	movs	r3, #0
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3710      	adds	r7, #16
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c436:	b580      	push	{r7, lr}
 800c438:	b084      	sub	sp, #16
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
 800c43e:	460b      	mov	r3, r1
 800c440:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	32b0      	adds	r2, #176	; 0xb0
 800c44c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c450:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	32b0      	adds	r2, #176	; 0xb0
 800c45c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d101      	bne.n	800c468 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c464:	2303      	movs	r3, #3
 800c466:	e01a      	b.n	800c49e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c468:	78fb      	ldrb	r3, [r7, #3]
 800c46a:	4619      	mov	r1, r3
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f003 fce6 	bl	800fe3e <USBD_LL_GetRxDataSize>
 800c472:	4602      	mov	r2, r0
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	33b0      	adds	r3, #176	; 0xb0
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	4413      	add	r3, r2
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	68fa      	ldr	r2, [r7, #12]
 800c48e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c492:	68fa      	ldr	r2, [r7, #12]
 800c494:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c498:	4611      	mov	r1, r2
 800c49a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c49c:	2300      	movs	r3, #0
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}

0800c4a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b084      	sub	sp, #16
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	32b0      	adds	r2, #176	; 0xb0
 800c4b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d101      	bne.n	800c4c8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c4c4:	2303      	movs	r3, #3
 800c4c6:	e025      	b.n	800c514 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	33b0      	adds	r3, #176	; 0xb0
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	4413      	add	r3, r2
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d01a      	beq.n	800c512 <USBD_CDC_EP0_RxReady+0x6c>
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c4e2:	2bff      	cmp	r3, #255	; 0xff
 800c4e4:	d015      	beq.n	800c512 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	33b0      	adds	r3, #176	; 0xb0
 800c4f0:	009b      	lsls	r3, r3, #2
 800c4f2:	4413      	add	r3, r2
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	689b      	ldr	r3, [r3, #8]
 800c4f8:	68fa      	ldr	r2, [r7, #12]
 800c4fa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c4fe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c506:	b292      	uxth	r2, r2
 800c508:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	22ff      	movs	r2, #255	; 0xff
 800c50e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c512:	2300      	movs	r3, #0
}
 800c514:	4618      	mov	r0, r3
 800c516:	3710      	adds	r7, #16
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b086      	sub	sp, #24
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c524:	2182      	movs	r1, #130	; 0x82
 800c526:	4818      	ldr	r0, [pc, #96]	; (800c588 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c528:	f000 fd4f 	bl	800cfca <USBD_GetEpDesc>
 800c52c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c52e:	2101      	movs	r1, #1
 800c530:	4815      	ldr	r0, [pc, #84]	; (800c588 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c532:	f000 fd4a 	bl	800cfca <USBD_GetEpDesc>
 800c536:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c538:	2181      	movs	r1, #129	; 0x81
 800c53a:	4813      	ldr	r0, [pc, #76]	; (800c588 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c53c:	f000 fd45 	bl	800cfca <USBD_GetEpDesc>
 800c540:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d002      	beq.n	800c54e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	2210      	movs	r2, #16
 800c54c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d006      	beq.n	800c562 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	2200      	movs	r2, #0
 800c558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c55c:	711a      	strb	r2, [r3, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d006      	beq.n	800c576 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2200      	movs	r2, #0
 800c56c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c570:	711a      	strb	r2, [r3, #4]
 800c572:	2200      	movs	r2, #0
 800c574:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2243      	movs	r2, #67	; 0x43
 800c57a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c57c:	4b02      	ldr	r3, [pc, #8]	; (800c588 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3718      	adds	r7, #24
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
 800c586:	bf00      	nop
 800c588:	20000064 	.word	0x20000064

0800c58c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b086      	sub	sp, #24
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c594:	2182      	movs	r1, #130	; 0x82
 800c596:	4818      	ldr	r0, [pc, #96]	; (800c5f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c598:	f000 fd17 	bl	800cfca <USBD_GetEpDesc>
 800c59c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c59e:	2101      	movs	r1, #1
 800c5a0:	4815      	ldr	r0, [pc, #84]	; (800c5f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c5a2:	f000 fd12 	bl	800cfca <USBD_GetEpDesc>
 800c5a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c5a8:	2181      	movs	r1, #129	; 0x81
 800c5aa:	4813      	ldr	r0, [pc, #76]	; (800c5f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c5ac:	f000 fd0d 	bl	800cfca <USBD_GetEpDesc>
 800c5b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d002      	beq.n	800c5be <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	2210      	movs	r2, #16
 800c5bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d006      	beq.n	800c5d2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	711a      	strb	r2, [r3, #4]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f042 0202 	orr.w	r2, r2, #2
 800c5d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d006      	beq.n	800c5e6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	711a      	strb	r2, [r3, #4]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	f042 0202 	orr.w	r2, r2, #2
 800c5e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2243      	movs	r2, #67	; 0x43
 800c5ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c5ec:	4b02      	ldr	r3, [pc, #8]	; (800c5f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3718      	adds	r7, #24
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	20000064 	.word	0x20000064

0800c5fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b086      	sub	sp, #24
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c604:	2182      	movs	r1, #130	; 0x82
 800c606:	4818      	ldr	r0, [pc, #96]	; (800c668 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c608:	f000 fcdf 	bl	800cfca <USBD_GetEpDesc>
 800c60c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c60e:	2101      	movs	r1, #1
 800c610:	4815      	ldr	r0, [pc, #84]	; (800c668 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c612:	f000 fcda 	bl	800cfca <USBD_GetEpDesc>
 800c616:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c618:	2181      	movs	r1, #129	; 0x81
 800c61a:	4813      	ldr	r0, [pc, #76]	; (800c668 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c61c:	f000 fcd5 	bl	800cfca <USBD_GetEpDesc>
 800c620:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d002      	beq.n	800c62e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	2210      	movs	r2, #16
 800c62c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d006      	beq.n	800c642 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	2200      	movs	r2, #0
 800c638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c63c:	711a      	strb	r2, [r3, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d006      	beq.n	800c656 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2200      	movs	r2, #0
 800c64c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c650:	711a      	strb	r2, [r3, #4]
 800c652:	2200      	movs	r2, #0
 800c654:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2243      	movs	r2, #67	; 0x43
 800c65a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c65c:	4b02      	ldr	r3, [pc, #8]	; (800c668 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3718      	adds	r7, #24
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	20000064 	.word	0x20000064

0800c66c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b083      	sub	sp, #12
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	220a      	movs	r2, #10
 800c678:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c67a:	4b03      	ldr	r3, [pc, #12]	; (800c688 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	370c      	adds	r7, #12
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr
 800c688:	20000020 	.word	0x20000020

0800c68c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b083      	sub	sp, #12
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d101      	bne.n	800c6a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c69c:	2303      	movs	r3, #3
 800c69e:	e009      	b.n	800c6b4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	33b0      	adds	r3, #176	; 0xb0
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	4413      	add	r3, r2
 800c6ae:	683a      	ldr	r2, [r7, #0]
 800c6b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c6b2:	2300      	movs	r3, #0
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	370c      	adds	r7, #12
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr

0800c6c0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b087      	sub	sp, #28
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	60f8      	str	r0, [r7, #12]
 800c6c8:	60b9      	str	r1, [r7, #8]
 800c6ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	32b0      	adds	r2, #176	; 0xb0
 800c6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6da:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d101      	bne.n	800c6e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c6e2:	2303      	movs	r3, #3
 800c6e4:	e008      	b.n	800c6f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	68ba      	ldr	r2, [r7, #8]
 800c6ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	687a      	ldr	r2, [r7, #4]
 800c6f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c6f6:	2300      	movs	r3, #0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	371c      	adds	r7, #28
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	32b0      	adds	r2, #176	; 0xb0
 800c718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c71c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d101      	bne.n	800c728 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c724:	2303      	movs	r3, #3
 800c726:	e004      	b.n	800c732 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	683a      	ldr	r2, [r7, #0]
 800c72c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c730:	2300      	movs	r3, #0
}
 800c732:	4618      	mov	r0, r3
 800c734:	3714      	adds	r7, #20
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr
	...

0800c740 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	32b0      	adds	r2, #176	; 0xb0
 800c752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c756:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c758:	2301      	movs	r3, #1
 800c75a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	32b0      	adds	r2, #176	; 0xb0
 800c766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d101      	bne.n	800c772 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c76e:	2303      	movs	r3, #3
 800c770:	e025      	b.n	800c7be <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d11f      	bne.n	800c7bc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	2201      	movs	r2, #1
 800c780:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c784:	4b10      	ldr	r3, [pc, #64]	; (800c7c8 <USBD_CDC_TransmitPacket+0x88>)
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	f003 020f 	and.w	r2, r3, #15
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	4613      	mov	r3, r2
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	4413      	add	r3, r2
 800c79a:	009b      	lsls	r3, r3, #2
 800c79c:	4403      	add	r3, r0
 800c79e:	3318      	adds	r3, #24
 800c7a0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c7a2:	4b09      	ldr	r3, [pc, #36]	; (800c7c8 <USBD_CDC_TransmitPacket+0x88>)
 800c7a4:	7819      	ldrb	r1, [r3, #0]
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f003 fb01 	bl	800fdba <USBD_LL_Transmit>

    ret = USBD_OK;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	200000a7 	.word	0x200000a7

0800c7cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	32b0      	adds	r2, #176	; 0xb0
 800c7de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7e2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	32b0      	adds	r2, #176	; 0xb0
 800c7ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d101      	bne.n	800c7fa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c7f6:	2303      	movs	r3, #3
 800c7f8:	e018      	b.n	800c82c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	7c1b      	ldrb	r3, [r3, #16]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10a      	bne.n	800c818 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c802:	4b0c      	ldr	r3, [pc, #48]	; (800c834 <USBD_CDC_ReceivePacket+0x68>)
 800c804:	7819      	ldrb	r1, [r3, #0]
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c80c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f003 faf3 	bl	800fdfc <USBD_LL_PrepareReceive>
 800c816:	e008      	b.n	800c82a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c818:	4b06      	ldr	r3, [pc, #24]	; (800c834 <USBD_CDC_ReceivePacket+0x68>)
 800c81a:	7819      	ldrb	r1, [r3, #0]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c822:	2340      	movs	r3, #64	; 0x40
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f003 fae9 	bl	800fdfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c82a:	2300      	movs	r3, #0
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3710      	adds	r7, #16
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}
 800c834:	200000a8 	.word	0x200000a8

0800c838 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b086      	sub	sp, #24
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	4613      	mov	r3, r2
 800c844:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d101      	bne.n	800c850 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c84c:	2303      	movs	r3, #3
 800c84e:	e01f      	b.n	800c890 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2200      	movs	r2, #0
 800c854:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2200      	movs	r2, #0
 800c85c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2200      	movs	r2, #0
 800c864:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d003      	beq.n	800c876 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	68ba      	ldr	r2, [r7, #8]
 800c872:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	2201      	movs	r2, #1
 800c87a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	79fa      	ldrb	r2, [r7, #7]
 800c882:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c884:	68f8      	ldr	r0, [r7, #12]
 800c886:	f003 f963 	bl	800fb50 <USBD_LL_Init>
 800c88a:	4603      	mov	r3, r0
 800c88c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c88e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c890:	4618      	mov	r0, r3
 800c892:	3718      	adds	r7, #24
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d101      	bne.n	800c8b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c8ac:	2303      	movs	r3, #3
 800c8ae:	e025      	b.n	800c8fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	683a      	ldr	r2, [r7, #0]
 800c8b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	32ae      	adds	r2, #174	; 0xae
 800c8c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d00f      	beq.n	800c8ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	32ae      	adds	r2, #174	; 0xae
 800c8d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8dc:	f107 020e 	add.w	r2, r7, #14
 800c8e0:	4610      	mov	r0, r2
 800c8e2:	4798      	blx	r3
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c8f2:	1c5a      	adds	r2, r3, #1
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c8fa:	2300      	movs	r3, #0
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3710      	adds	r7, #16
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f003 f96b 	bl	800fbe8 <USBD_LL_Start>
 800c912:	4603      	mov	r3, r0
}
 800c914:	4618      	mov	r0, r3
 800c916:	3708      	adds	r7, #8
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b083      	sub	sp, #12
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c924:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c926:	4618      	mov	r0, r3
 800c928:	370c      	adds	r7, #12
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr

0800c932 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b084      	sub	sp, #16
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
 800c93a:	460b      	mov	r3, r1
 800c93c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c93e:	2300      	movs	r3, #0
 800c940:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d009      	beq.n	800c960 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	78fa      	ldrb	r2, [r7, #3]
 800c956:	4611      	mov	r1, r2
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	4798      	blx	r3
 800c95c:	4603      	mov	r3, r0
 800c95e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c960:	7bfb      	ldrb	r3, [r7, #15]
}
 800c962:	4618      	mov	r0, r3
 800c964:	3710      	adds	r7, #16
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b084      	sub	sp, #16
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
 800c972:	460b      	mov	r3, r1
 800c974:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c976:	2300      	movs	r3, #0
 800c978:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	78fa      	ldrb	r2, [r7, #3]
 800c984:	4611      	mov	r1, r2
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	4798      	blx	r3
 800c98a:	4603      	mov	r3, r0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d001      	beq.n	800c994 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c990:	2303      	movs	r3, #3
 800c992:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c994:	7bfb      	ldrb	r3, [r7, #15]
}
 800c996:	4618      	mov	r0, r3
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b084      	sub	sp, #16
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
 800c9a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c9ae:	6839      	ldr	r1, [r7, #0]
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f001 f908 	bl	800dbc6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2201      	movs	r2, #1
 800c9ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c9d2:	f003 031f 	and.w	r3, r3, #31
 800c9d6:	2b02      	cmp	r3, #2
 800c9d8:	d01a      	beq.n	800ca10 <USBD_LL_SetupStage+0x72>
 800c9da:	2b02      	cmp	r3, #2
 800c9dc:	d822      	bhi.n	800ca24 <USBD_LL_SetupStage+0x86>
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d002      	beq.n	800c9e8 <USBD_LL_SetupStage+0x4a>
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d00a      	beq.n	800c9fc <USBD_LL_SetupStage+0x5e>
 800c9e6:	e01d      	b.n	800ca24 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 fb5f 	bl	800d0b4 <USBD_StdDevReq>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	73fb      	strb	r3, [r7, #15]
      break;
 800c9fa:	e020      	b.n	800ca3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ca02:	4619      	mov	r1, r3
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 fbc7 	bl	800d198 <USBD_StdItfReq>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	73fb      	strb	r3, [r7, #15]
      break;
 800ca0e:	e016      	b.n	800ca3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ca16:	4619      	mov	r1, r3
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f000 fc29 	bl	800d270 <USBD_StdEPReq>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	73fb      	strb	r3, [r7, #15]
      break;
 800ca22:	e00c      	b.n	800ca3e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ca2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ca2e:	b2db      	uxtb	r3, r3
 800ca30:	4619      	mov	r1, r3
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f003 f938 	bl	800fca8 <USBD_LL_StallEP>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	73fb      	strb	r3, [r7, #15]
      break;
 800ca3c:	bf00      	nop
  }

  return ret;
 800ca3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3710      	adds	r7, #16
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b086      	sub	sp, #24
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	460b      	mov	r3, r1
 800ca52:	607a      	str	r2, [r7, #4]
 800ca54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ca56:	2300      	movs	r3, #0
 800ca58:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ca5a:	7afb      	ldrb	r3, [r7, #11]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d16e      	bne.n	800cb3e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ca66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ca6e:	2b03      	cmp	r3, #3
 800ca70:	f040 8098 	bne.w	800cba4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	689a      	ldr	r2, [r3, #8]
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	68db      	ldr	r3, [r3, #12]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d913      	bls.n	800caa8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	689a      	ldr	r2, [r3, #8]
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	68db      	ldr	r3, [r3, #12]
 800ca88:	1ad2      	subs	r2, r2, r3
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	68da      	ldr	r2, [r3, #12]
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	689b      	ldr	r3, [r3, #8]
 800ca96:	4293      	cmp	r3, r2
 800ca98:	bf28      	it	cs
 800ca9a:	4613      	movcs	r3, r2
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	6879      	ldr	r1, [r7, #4]
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	f001 f984 	bl	800ddae <USBD_CtlContinueRx>
 800caa6:	e07d      	b.n	800cba4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800caae:	f003 031f 	and.w	r3, r3, #31
 800cab2:	2b02      	cmp	r3, #2
 800cab4:	d014      	beq.n	800cae0 <USBD_LL_DataOutStage+0x98>
 800cab6:	2b02      	cmp	r3, #2
 800cab8:	d81d      	bhi.n	800caf6 <USBD_LL_DataOutStage+0xae>
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d002      	beq.n	800cac4 <USBD_LL_DataOutStage+0x7c>
 800cabe:	2b01      	cmp	r3, #1
 800cac0:	d003      	beq.n	800caca <USBD_LL_DataOutStage+0x82>
 800cac2:	e018      	b.n	800caf6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cac4:	2300      	movs	r3, #0
 800cac6:	75bb      	strb	r3, [r7, #22]
            break;
 800cac8:	e018      	b.n	800cafc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	4619      	mov	r1, r3
 800cad4:	68f8      	ldr	r0, [r7, #12]
 800cad6:	f000 fa5e 	bl	800cf96 <USBD_CoreFindIF>
 800cada:	4603      	mov	r3, r0
 800cadc:	75bb      	strb	r3, [r7, #22]
            break;
 800cade:	e00d      	b.n	800cafc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	4619      	mov	r1, r3
 800caea:	68f8      	ldr	r0, [r7, #12]
 800caec:	f000 fa60 	bl	800cfb0 <USBD_CoreFindEP>
 800caf0:	4603      	mov	r3, r0
 800caf2:	75bb      	strb	r3, [r7, #22]
            break;
 800caf4:	e002      	b.n	800cafc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800caf6:	2300      	movs	r3, #0
 800caf8:	75bb      	strb	r3, [r7, #22]
            break;
 800cafa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cafc:	7dbb      	ldrb	r3, [r7, #22]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d119      	bne.n	800cb36 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb08:	b2db      	uxtb	r3, r3
 800cb0a:	2b03      	cmp	r3, #3
 800cb0c:	d113      	bne.n	800cb36 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cb0e:	7dba      	ldrb	r2, [r7, #22]
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	32ae      	adds	r2, #174	; 0xae
 800cb14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb18:	691b      	ldr	r3, [r3, #16]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d00b      	beq.n	800cb36 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cb1e:	7dba      	ldrb	r2, [r7, #22]
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cb26:	7dba      	ldrb	r2, [r7, #22]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	32ae      	adds	r2, #174	; 0xae
 800cb2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb30:	691b      	ldr	r3, [r3, #16]
 800cb32:	68f8      	ldr	r0, [r7, #12]
 800cb34:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cb36:	68f8      	ldr	r0, [r7, #12]
 800cb38:	f001 f94a 	bl	800ddd0 <USBD_CtlSendStatus>
 800cb3c:	e032      	b.n	800cba4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cb3e:	7afb      	ldrb	r3, [r7, #11]
 800cb40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb44:	b2db      	uxtb	r3, r3
 800cb46:	4619      	mov	r1, r3
 800cb48:	68f8      	ldr	r0, [r7, #12]
 800cb4a:	f000 fa31 	bl	800cfb0 <USBD_CoreFindEP>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb52:	7dbb      	ldrb	r3, [r7, #22]
 800cb54:	2bff      	cmp	r3, #255	; 0xff
 800cb56:	d025      	beq.n	800cba4 <USBD_LL_DataOutStage+0x15c>
 800cb58:	7dbb      	ldrb	r3, [r7, #22]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d122      	bne.n	800cba4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	2b03      	cmp	r3, #3
 800cb68:	d117      	bne.n	800cb9a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cb6a:	7dba      	ldrb	r2, [r7, #22]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	32ae      	adds	r2, #174	; 0xae
 800cb70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb74:	699b      	ldr	r3, [r3, #24]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d00f      	beq.n	800cb9a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cb7a:	7dba      	ldrb	r2, [r7, #22]
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cb82:	7dba      	ldrb	r2, [r7, #22]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	32ae      	adds	r2, #174	; 0xae
 800cb88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb8c:	699b      	ldr	r3, [r3, #24]
 800cb8e:	7afa      	ldrb	r2, [r7, #11]
 800cb90:	4611      	mov	r1, r2
 800cb92:	68f8      	ldr	r0, [r7, #12]
 800cb94:	4798      	blx	r3
 800cb96:	4603      	mov	r3, r0
 800cb98:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cb9a:	7dfb      	ldrb	r3, [r7, #23]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d001      	beq.n	800cba4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cba0:	7dfb      	ldrb	r3, [r7, #23]
 800cba2:	e000      	b.n	800cba6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cba4:	2300      	movs	r3, #0
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3718      	adds	r7, #24
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b086      	sub	sp, #24
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	60f8      	str	r0, [r7, #12]
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	607a      	str	r2, [r7, #4]
 800cbba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cbbc:	7afb      	ldrb	r3, [r7, #11]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d16f      	bne.n	800cca2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	3314      	adds	r3, #20
 800cbc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cbce:	2b02      	cmp	r3, #2
 800cbd0:	d15a      	bne.n	800cc88 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	689a      	ldr	r2, [r3, #8]
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	68db      	ldr	r3, [r3, #12]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d914      	bls.n	800cc08 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	689a      	ldr	r2, [r3, #8]
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	1ad2      	subs	r2, r2, r3
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	689b      	ldr	r3, [r3, #8]
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	6879      	ldr	r1, [r7, #4]
 800cbf4:	68f8      	ldr	r0, [r7, #12]
 800cbf6:	f001 f8ac 	bl	800dd52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	2100      	movs	r1, #0
 800cc00:	68f8      	ldr	r0, [r7, #12]
 800cc02:	f003 f8fb 	bl	800fdfc <USBD_LL_PrepareReceive>
 800cc06:	e03f      	b.n	800cc88 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	68da      	ldr	r2, [r3, #12]
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	689b      	ldr	r3, [r3, #8]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d11c      	bne.n	800cc4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	685a      	ldr	r2, [r3, #4]
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d316      	bcc.n	800cc4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	685a      	ldr	r2, [r3, #4]
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d20f      	bcs.n	800cc4e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cc2e:	2200      	movs	r2, #0
 800cc30:	2100      	movs	r1, #0
 800cc32:	68f8      	ldr	r0, [r7, #12]
 800cc34:	f001 f88d 	bl	800dd52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc40:	2300      	movs	r3, #0
 800cc42:	2200      	movs	r2, #0
 800cc44:	2100      	movs	r1, #0
 800cc46:	68f8      	ldr	r0, [r7, #12]
 800cc48:	f003 f8d8 	bl	800fdfc <USBD_LL_PrepareReceive>
 800cc4c:	e01c      	b.n	800cc88 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	2b03      	cmp	r3, #3
 800cc58:	d10f      	bne.n	800cc7a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d009      	beq.n	800cc7a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc74:	68db      	ldr	r3, [r3, #12]
 800cc76:	68f8      	ldr	r0, [r7, #12]
 800cc78:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc7a:	2180      	movs	r1, #128	; 0x80
 800cc7c:	68f8      	ldr	r0, [r7, #12]
 800cc7e:	f003 f813 	bl	800fca8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cc82:	68f8      	ldr	r0, [r7, #12]
 800cc84:	f001 f8b7 	bl	800ddf6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d03a      	beq.n	800cd08 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cc92:	68f8      	ldr	r0, [r7, #12]
 800cc94:	f7ff fe42 	bl	800c91c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cca0:	e032      	b.n	800cd08 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cca2:	7afb      	ldrb	r3, [r7, #11]
 800cca4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cca8:	b2db      	uxtb	r3, r3
 800ccaa:	4619      	mov	r1, r3
 800ccac:	68f8      	ldr	r0, [r7, #12]
 800ccae:	f000 f97f 	bl	800cfb0 <USBD_CoreFindEP>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ccb6:	7dfb      	ldrb	r3, [r7, #23]
 800ccb8:	2bff      	cmp	r3, #255	; 0xff
 800ccba:	d025      	beq.n	800cd08 <USBD_LL_DataInStage+0x15a>
 800ccbc:	7dfb      	ldrb	r3, [r7, #23]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d122      	bne.n	800cd08 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	2b03      	cmp	r3, #3
 800cccc:	d11c      	bne.n	800cd08 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ccce:	7dfa      	ldrb	r2, [r7, #23]
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	32ae      	adds	r2, #174	; 0xae
 800ccd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccd8:	695b      	ldr	r3, [r3, #20]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d014      	beq.n	800cd08 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ccde:	7dfa      	ldrb	r2, [r7, #23]
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cce6:	7dfa      	ldrb	r2, [r7, #23]
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	32ae      	adds	r2, #174	; 0xae
 800ccec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccf0:	695b      	ldr	r3, [r3, #20]
 800ccf2:	7afa      	ldrb	r2, [r7, #11]
 800ccf4:	4611      	mov	r1, r2
 800ccf6:	68f8      	ldr	r0, [r7, #12]
 800ccf8:	4798      	blx	r3
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ccfe:	7dbb      	ldrb	r3, [r7, #22]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d001      	beq.n	800cd08 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cd04:	7dbb      	ldrb	r3, [r7, #22]
 800cd06:	e000      	b.n	800cd0a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cd08:	2300      	movs	r3, #0
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3718      	adds	r7, #24
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cd12:	b580      	push	{r7, lr}
 800cd14:	b084      	sub	sp, #16
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2201      	movs	r2, #1
 800cd22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2200      	movs	r2, #0
 800cd32:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2200      	movs	r2, #0
 800cd38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d014      	beq.n	800cd78 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd54:	685b      	ldr	r3, [r3, #4]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d00e      	beq.n	800cd78 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	6852      	ldr	r2, [r2, #4]
 800cd66:	b2d2      	uxtb	r2, r2
 800cd68:	4611      	mov	r1, r2
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	4798      	blx	r3
 800cd6e:	4603      	mov	r3, r0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d001      	beq.n	800cd78 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cd74:	2303      	movs	r3, #3
 800cd76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cd78:	2340      	movs	r3, #64	; 0x40
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	2100      	movs	r1, #0
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f002 ff4d 	bl	800fc1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2201      	movs	r2, #1
 800cd88:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2240      	movs	r2, #64	; 0x40
 800cd90:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cd94:	2340      	movs	r3, #64	; 0x40
 800cd96:	2200      	movs	r2, #0
 800cd98:	2180      	movs	r1, #128	; 0x80
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f002 ff3f 	bl	800fc1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2201      	movs	r2, #1
 800cda4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2240      	movs	r2, #64	; 0x40
 800cdaa:	621a      	str	r2, [r3, #32]

  return ret;
 800cdac:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3710      	adds	r7, #16
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}

0800cdb6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cdb6:	b480      	push	{r7}
 800cdb8:	b083      	sub	sp, #12
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	6078      	str	r0, [r7, #4]
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	78fa      	ldrb	r2, [r7, #3]
 800cdc6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cdc8:	2300      	movs	r3, #0
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	370c      	adds	r7, #12
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr

0800cdd6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cdd6:	b480      	push	{r7}
 800cdd8:	b083      	sub	sp, #12
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cde4:	b2da      	uxtb	r2, r3
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2204      	movs	r2, #4
 800cdf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cdf4:	2300      	movs	r3, #0
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	370c      	adds	r7, #12
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr

0800ce02 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ce02:	b480      	push	{r7}
 800ce04:	b083      	sub	sp, #12
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce10:	b2db      	uxtb	r3, r3
 800ce12:	2b04      	cmp	r3, #4
 800ce14:	d106      	bne.n	800ce24 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ce1c:	b2da      	uxtb	r2, r3
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ce24:	2300      	movs	r3, #0
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	370c      	adds	r7, #12
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr

0800ce32 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b082      	sub	sp, #8
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce40:	b2db      	uxtb	r3, r3
 800ce42:	2b03      	cmp	r3, #3
 800ce44:	d110      	bne.n	800ce68 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d00b      	beq.n	800ce68 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce56:	69db      	ldr	r3, [r3, #28]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d005      	beq.n	800ce68 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce62:	69db      	ldr	r3, [r3, #28]
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ce68:	2300      	movs	r3, #0
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3708      	adds	r7, #8
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}

0800ce72 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ce72:	b580      	push	{r7, lr}
 800ce74:	b082      	sub	sp, #8
 800ce76:	af00      	add	r7, sp, #0
 800ce78:	6078      	str	r0, [r7, #4]
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	32ae      	adds	r2, #174	; 0xae
 800ce88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d101      	bne.n	800ce94 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ce90:	2303      	movs	r3, #3
 800ce92:	e01c      	b.n	800cece <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce9a:	b2db      	uxtb	r3, r3
 800ce9c:	2b03      	cmp	r3, #3
 800ce9e:	d115      	bne.n	800cecc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	32ae      	adds	r2, #174	; 0xae
 800ceaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceae:	6a1b      	ldr	r3, [r3, #32]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d00b      	beq.n	800cecc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	32ae      	adds	r2, #174	; 0xae
 800cebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cec2:	6a1b      	ldr	r3, [r3, #32]
 800cec4:	78fa      	ldrb	r2, [r7, #3]
 800cec6:	4611      	mov	r1, r2
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cecc:	2300      	movs	r3, #0
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3708      	adds	r7, #8
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}

0800ced6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ced6:	b580      	push	{r7, lr}
 800ced8:	b082      	sub	sp, #8
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	6078      	str	r0, [r7, #4]
 800cede:	460b      	mov	r3, r1
 800cee0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	32ae      	adds	r2, #174	; 0xae
 800ceec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d101      	bne.n	800cef8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cef4:	2303      	movs	r3, #3
 800cef6:	e01c      	b.n	800cf32 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cefe:	b2db      	uxtb	r3, r3
 800cf00:	2b03      	cmp	r3, #3
 800cf02:	d115      	bne.n	800cf30 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	32ae      	adds	r2, #174	; 0xae
 800cf0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d00b      	beq.n	800cf30 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	32ae      	adds	r2, #174	; 0xae
 800cf22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf28:	78fa      	ldrb	r2, [r7, #3]
 800cf2a:	4611      	mov	r1, r2
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cf30:	2300      	movs	r3, #0
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3708      	adds	r7, #8
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}

0800cf3a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cf3a:	b480      	push	{r7}
 800cf3c:	b083      	sub	sp, #12
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cf42:	2300      	movs	r3, #0
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	370c      	adds	r7, #12
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2201      	movs	r2, #1
 800cf60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d00e      	beq.n	800cf8c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	6852      	ldr	r2, [r2, #4]
 800cf7a:	b2d2      	uxtb	r2, r2
 800cf7c:	4611      	mov	r1, r2
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	4798      	blx	r3
 800cf82:	4603      	mov	r3, r0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d001      	beq.n	800cf8c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cf88:	2303      	movs	r3, #3
 800cf8a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cf8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3710      	adds	r7, #16
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}

0800cf96 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cf96:	b480      	push	{r7}
 800cf98:	b083      	sub	sp, #12
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	6078      	str	r0, [r7, #4]
 800cf9e:	460b      	mov	r3, r1
 800cfa0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cfa2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	370c      	adds	r7, #12
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b083      	sub	sp, #12
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	460b      	mov	r3, r1
 800cfba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cfbc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	370c      	adds	r7, #12
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr

0800cfca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b086      	sub	sp, #24
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
 800cfd2:	460b      	mov	r3, r1
 800cfd4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	885b      	ldrh	r3, [r3, #2]
 800cfe6:	b29a      	uxth	r2, r3
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d920      	bls.n	800d034 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	b29b      	uxth	r3, r3
 800cff8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cffa:	e013      	b.n	800d024 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cffc:	f107 030a 	add.w	r3, r7, #10
 800d000:	4619      	mov	r1, r3
 800d002:	6978      	ldr	r0, [r7, #20]
 800d004:	f000 f81b 	bl	800d03e <USBD_GetNextDesc>
 800d008:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	785b      	ldrb	r3, [r3, #1]
 800d00e:	2b05      	cmp	r3, #5
 800d010:	d108      	bne.n	800d024 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	789b      	ldrb	r3, [r3, #2]
 800d01a:	78fa      	ldrb	r2, [r7, #3]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d008      	beq.n	800d032 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d020:	2300      	movs	r3, #0
 800d022:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	885b      	ldrh	r3, [r3, #2]
 800d028:	b29a      	uxth	r2, r3
 800d02a:	897b      	ldrh	r3, [r7, #10]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d8e5      	bhi.n	800cffc <USBD_GetEpDesc+0x32>
 800d030:	e000      	b.n	800d034 <USBD_GetEpDesc+0x6a>
          break;
 800d032:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d034:	693b      	ldr	r3, [r7, #16]
}
 800d036:	4618      	mov	r0, r3
 800d038:	3718      	adds	r7, #24
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d03e:	b480      	push	{r7}
 800d040:	b085      	sub	sp, #20
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
 800d046:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	881a      	ldrh	r2, [r3, #0]
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	b29b      	uxth	r3, r3
 800d056:	4413      	add	r3, r2
 800d058:	b29a      	uxth	r2, r3
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	461a      	mov	r2, r3
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	4413      	add	r3, r2
 800d068:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d06a:	68fb      	ldr	r3, [r7, #12]
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3714      	adds	r7, #20
 800d070:	46bd      	mov	sp, r7
 800d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d076:	4770      	bx	lr

0800d078 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d078:	b480      	push	{r7}
 800d07a:	b087      	sub	sp, #28
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	3301      	adds	r3, #1
 800d08e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	781b      	ldrb	r3, [r3, #0]
 800d094:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d096:	8a3b      	ldrh	r3, [r7, #16]
 800d098:	021b      	lsls	r3, r3, #8
 800d09a:	b21a      	sxth	r2, r3
 800d09c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	b21b      	sxth	r3, r3
 800d0a4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d0a6:	89fb      	ldrh	r3, [r7, #14]
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	371c      	adds	r7, #28
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr

0800d0b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d0ca:	2b40      	cmp	r3, #64	; 0x40
 800d0cc:	d005      	beq.n	800d0da <USBD_StdDevReq+0x26>
 800d0ce:	2b40      	cmp	r3, #64	; 0x40
 800d0d0:	d857      	bhi.n	800d182 <USBD_StdDevReq+0xce>
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d00f      	beq.n	800d0f6 <USBD_StdDevReq+0x42>
 800d0d6:	2b20      	cmp	r3, #32
 800d0d8:	d153      	bne.n	800d182 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	32ae      	adds	r2, #174	; 0xae
 800d0e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0e8:	689b      	ldr	r3, [r3, #8]
 800d0ea:	6839      	ldr	r1, [r7, #0]
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	4798      	blx	r3
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	73fb      	strb	r3, [r7, #15]
      break;
 800d0f4:	e04a      	b.n	800d18c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	785b      	ldrb	r3, [r3, #1]
 800d0fa:	2b09      	cmp	r3, #9
 800d0fc:	d83b      	bhi.n	800d176 <USBD_StdDevReq+0xc2>
 800d0fe:	a201      	add	r2, pc, #4	; (adr r2, 800d104 <USBD_StdDevReq+0x50>)
 800d100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d104:	0800d159 	.word	0x0800d159
 800d108:	0800d16d 	.word	0x0800d16d
 800d10c:	0800d177 	.word	0x0800d177
 800d110:	0800d163 	.word	0x0800d163
 800d114:	0800d177 	.word	0x0800d177
 800d118:	0800d137 	.word	0x0800d137
 800d11c:	0800d12d 	.word	0x0800d12d
 800d120:	0800d177 	.word	0x0800d177
 800d124:	0800d14f 	.word	0x0800d14f
 800d128:	0800d141 	.word	0x0800d141
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d12c:	6839      	ldr	r1, [r7, #0]
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 fa3c 	bl	800d5ac <USBD_GetDescriptor>
          break;
 800d134:	e024      	b.n	800d180 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d136:	6839      	ldr	r1, [r7, #0]
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f000 fba1 	bl	800d880 <USBD_SetAddress>
          break;
 800d13e:	e01f      	b.n	800d180 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d140:	6839      	ldr	r1, [r7, #0]
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f000 fbe0 	bl	800d908 <USBD_SetConfig>
 800d148:	4603      	mov	r3, r0
 800d14a:	73fb      	strb	r3, [r7, #15]
          break;
 800d14c:	e018      	b.n	800d180 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d14e:	6839      	ldr	r1, [r7, #0]
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f000 fc83 	bl	800da5c <USBD_GetConfig>
          break;
 800d156:	e013      	b.n	800d180 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d158:	6839      	ldr	r1, [r7, #0]
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 fcb4 	bl	800dac8 <USBD_GetStatus>
          break;
 800d160:	e00e      	b.n	800d180 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d162:	6839      	ldr	r1, [r7, #0]
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 fce3 	bl	800db30 <USBD_SetFeature>
          break;
 800d16a:	e009      	b.n	800d180 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d16c:	6839      	ldr	r1, [r7, #0]
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 fd07 	bl	800db82 <USBD_ClrFeature>
          break;
 800d174:	e004      	b.n	800d180 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d176:	6839      	ldr	r1, [r7, #0]
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f000 fd5e 	bl	800dc3a <USBD_CtlError>
          break;
 800d17e:	bf00      	nop
      }
      break;
 800d180:	e004      	b.n	800d18c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d182:	6839      	ldr	r1, [r7, #0]
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 fd58 	bl	800dc3a <USBD_CtlError>
      break;
 800d18a:	bf00      	nop
  }

  return ret;
 800d18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3710      	adds	r7, #16
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop

0800d198 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d1ae:	2b40      	cmp	r3, #64	; 0x40
 800d1b0:	d005      	beq.n	800d1be <USBD_StdItfReq+0x26>
 800d1b2:	2b40      	cmp	r3, #64	; 0x40
 800d1b4:	d852      	bhi.n	800d25c <USBD_StdItfReq+0xc4>
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d001      	beq.n	800d1be <USBD_StdItfReq+0x26>
 800d1ba:	2b20      	cmp	r3, #32
 800d1bc:	d14e      	bne.n	800d25c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	3b01      	subs	r3, #1
 800d1c8:	2b02      	cmp	r3, #2
 800d1ca:	d840      	bhi.n	800d24e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	889b      	ldrh	r3, [r3, #4]
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	d836      	bhi.n	800d244 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	889b      	ldrh	r3, [r3, #4]
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	4619      	mov	r1, r3
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f7ff fed9 	bl	800cf96 <USBD_CoreFindIF>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d1e8:	7bbb      	ldrb	r3, [r7, #14]
 800d1ea:	2bff      	cmp	r3, #255	; 0xff
 800d1ec:	d01d      	beq.n	800d22a <USBD_StdItfReq+0x92>
 800d1ee:	7bbb      	ldrb	r3, [r7, #14]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d11a      	bne.n	800d22a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d1f4:	7bba      	ldrb	r2, [r7, #14]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	32ae      	adds	r2, #174	; 0xae
 800d1fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1fe:	689b      	ldr	r3, [r3, #8]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d00f      	beq.n	800d224 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d204:	7bba      	ldrb	r2, [r7, #14]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d20c:	7bba      	ldrb	r2, [r7, #14]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	32ae      	adds	r2, #174	; 0xae
 800d212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d216:	689b      	ldr	r3, [r3, #8]
 800d218:	6839      	ldr	r1, [r7, #0]
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	4798      	blx	r3
 800d21e:	4603      	mov	r3, r0
 800d220:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d222:	e004      	b.n	800d22e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d224:	2303      	movs	r3, #3
 800d226:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d228:	e001      	b.n	800d22e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d22a:	2303      	movs	r3, #3
 800d22c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	88db      	ldrh	r3, [r3, #6]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d110      	bne.n	800d258 <USBD_StdItfReq+0xc0>
 800d236:	7bfb      	ldrb	r3, [r7, #15]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d10d      	bne.n	800d258 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 fdc7 	bl	800ddd0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d242:	e009      	b.n	800d258 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d244:	6839      	ldr	r1, [r7, #0]
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f000 fcf7 	bl	800dc3a <USBD_CtlError>
          break;
 800d24c:	e004      	b.n	800d258 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d24e:	6839      	ldr	r1, [r7, #0]
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f000 fcf2 	bl	800dc3a <USBD_CtlError>
          break;
 800d256:	e000      	b.n	800d25a <USBD_StdItfReq+0xc2>
          break;
 800d258:	bf00      	nop
      }
      break;
 800d25a:	e004      	b.n	800d266 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d25c:	6839      	ldr	r1, [r7, #0]
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f000 fceb 	bl	800dc3a <USBD_CtlError>
      break;
 800d264:	bf00      	nop
  }

  return ret;
 800d266:	7bfb      	ldrb	r3, [r7, #15]
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3710      	adds	r7, #16
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d27a:	2300      	movs	r3, #0
 800d27c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	889b      	ldrh	r3, [r3, #4]
 800d282:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d28c:	2b40      	cmp	r3, #64	; 0x40
 800d28e:	d007      	beq.n	800d2a0 <USBD_StdEPReq+0x30>
 800d290:	2b40      	cmp	r3, #64	; 0x40
 800d292:	f200 817f 	bhi.w	800d594 <USBD_StdEPReq+0x324>
 800d296:	2b00      	cmp	r3, #0
 800d298:	d02a      	beq.n	800d2f0 <USBD_StdEPReq+0x80>
 800d29a:	2b20      	cmp	r3, #32
 800d29c:	f040 817a 	bne.w	800d594 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d2a0:	7bbb      	ldrb	r3, [r7, #14]
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f7ff fe83 	bl	800cfb0 <USBD_CoreFindEP>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d2ae:	7b7b      	ldrb	r3, [r7, #13]
 800d2b0:	2bff      	cmp	r3, #255	; 0xff
 800d2b2:	f000 8174 	beq.w	800d59e <USBD_StdEPReq+0x32e>
 800d2b6:	7b7b      	ldrb	r3, [r7, #13]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	f040 8170 	bne.w	800d59e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d2be:	7b7a      	ldrb	r2, [r7, #13]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d2c6:	7b7a      	ldrb	r2, [r7, #13]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	32ae      	adds	r2, #174	; 0xae
 800d2cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2d0:	689b      	ldr	r3, [r3, #8]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	f000 8163 	beq.w	800d59e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d2d8:	7b7a      	ldrb	r2, [r7, #13]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	32ae      	adds	r2, #174	; 0xae
 800d2de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2e2:	689b      	ldr	r3, [r3, #8]
 800d2e4:	6839      	ldr	r1, [r7, #0]
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	4798      	blx	r3
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d2ee:	e156      	b.n	800d59e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	785b      	ldrb	r3, [r3, #1]
 800d2f4:	2b03      	cmp	r3, #3
 800d2f6:	d008      	beq.n	800d30a <USBD_StdEPReq+0x9a>
 800d2f8:	2b03      	cmp	r3, #3
 800d2fa:	f300 8145 	bgt.w	800d588 <USBD_StdEPReq+0x318>
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	f000 809b 	beq.w	800d43a <USBD_StdEPReq+0x1ca>
 800d304:	2b01      	cmp	r3, #1
 800d306:	d03c      	beq.n	800d382 <USBD_StdEPReq+0x112>
 800d308:	e13e      	b.n	800d588 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d310:	b2db      	uxtb	r3, r3
 800d312:	2b02      	cmp	r3, #2
 800d314:	d002      	beq.n	800d31c <USBD_StdEPReq+0xac>
 800d316:	2b03      	cmp	r3, #3
 800d318:	d016      	beq.n	800d348 <USBD_StdEPReq+0xd8>
 800d31a:	e02c      	b.n	800d376 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d31c:	7bbb      	ldrb	r3, [r7, #14]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d00d      	beq.n	800d33e <USBD_StdEPReq+0xce>
 800d322:	7bbb      	ldrb	r3, [r7, #14]
 800d324:	2b80      	cmp	r3, #128	; 0x80
 800d326:	d00a      	beq.n	800d33e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d328:	7bbb      	ldrb	r3, [r7, #14]
 800d32a:	4619      	mov	r1, r3
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f002 fcbb 	bl	800fca8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d332:	2180      	movs	r1, #128	; 0x80
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f002 fcb7 	bl	800fca8 <USBD_LL_StallEP>
 800d33a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d33c:	e020      	b.n	800d380 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d33e:	6839      	ldr	r1, [r7, #0]
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 fc7a 	bl	800dc3a <USBD_CtlError>
              break;
 800d346:	e01b      	b.n	800d380 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	885b      	ldrh	r3, [r3, #2]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d10e      	bne.n	800d36e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d350:	7bbb      	ldrb	r3, [r7, #14]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d00b      	beq.n	800d36e <USBD_StdEPReq+0xfe>
 800d356:	7bbb      	ldrb	r3, [r7, #14]
 800d358:	2b80      	cmp	r3, #128	; 0x80
 800d35a:	d008      	beq.n	800d36e <USBD_StdEPReq+0xfe>
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	88db      	ldrh	r3, [r3, #6]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d104      	bne.n	800d36e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d364:	7bbb      	ldrb	r3, [r7, #14]
 800d366:	4619      	mov	r1, r3
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f002 fc9d 	bl	800fca8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 fd2e 	bl	800ddd0 <USBD_CtlSendStatus>

              break;
 800d374:	e004      	b.n	800d380 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d376:	6839      	ldr	r1, [r7, #0]
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f000 fc5e 	bl	800dc3a <USBD_CtlError>
              break;
 800d37e:	bf00      	nop
          }
          break;
 800d380:	e107      	b.n	800d592 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	2b02      	cmp	r3, #2
 800d38c:	d002      	beq.n	800d394 <USBD_StdEPReq+0x124>
 800d38e:	2b03      	cmp	r3, #3
 800d390:	d016      	beq.n	800d3c0 <USBD_StdEPReq+0x150>
 800d392:	e04b      	b.n	800d42c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d394:	7bbb      	ldrb	r3, [r7, #14]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d00d      	beq.n	800d3b6 <USBD_StdEPReq+0x146>
 800d39a:	7bbb      	ldrb	r3, [r7, #14]
 800d39c:	2b80      	cmp	r3, #128	; 0x80
 800d39e:	d00a      	beq.n	800d3b6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d3a0:	7bbb      	ldrb	r3, [r7, #14]
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f002 fc7f 	bl	800fca8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d3aa:	2180      	movs	r1, #128	; 0x80
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f002 fc7b 	bl	800fca8 <USBD_LL_StallEP>
 800d3b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d3b4:	e040      	b.n	800d438 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d3b6:	6839      	ldr	r1, [r7, #0]
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f000 fc3e 	bl	800dc3a <USBD_CtlError>
              break;
 800d3be:	e03b      	b.n	800d438 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	885b      	ldrh	r3, [r3, #2]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d136      	bne.n	800d436 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d3c8:	7bbb      	ldrb	r3, [r7, #14]
 800d3ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d004      	beq.n	800d3dc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d3d2:	7bbb      	ldrb	r3, [r7, #14]
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f002 fc85 	bl	800fce6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f000 fcf7 	bl	800ddd0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d3e2:	7bbb      	ldrb	r3, [r7, #14]
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f7ff fde2 	bl	800cfb0 <USBD_CoreFindEP>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d3f0:	7b7b      	ldrb	r3, [r7, #13]
 800d3f2:	2bff      	cmp	r3, #255	; 0xff
 800d3f4:	d01f      	beq.n	800d436 <USBD_StdEPReq+0x1c6>
 800d3f6:	7b7b      	ldrb	r3, [r7, #13]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d11c      	bne.n	800d436 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d3fc:	7b7a      	ldrb	r2, [r7, #13]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d404:	7b7a      	ldrb	r2, [r7, #13]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	32ae      	adds	r2, #174	; 0xae
 800d40a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d40e:	689b      	ldr	r3, [r3, #8]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d010      	beq.n	800d436 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d414:	7b7a      	ldrb	r2, [r7, #13]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	32ae      	adds	r2, #174	; 0xae
 800d41a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d41e:	689b      	ldr	r3, [r3, #8]
 800d420:	6839      	ldr	r1, [r7, #0]
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	4798      	blx	r3
 800d426:	4603      	mov	r3, r0
 800d428:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d42a:	e004      	b.n	800d436 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d42c:	6839      	ldr	r1, [r7, #0]
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f000 fc03 	bl	800dc3a <USBD_CtlError>
              break;
 800d434:	e000      	b.n	800d438 <USBD_StdEPReq+0x1c8>
              break;
 800d436:	bf00      	nop
          }
          break;
 800d438:	e0ab      	b.n	800d592 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d440:	b2db      	uxtb	r3, r3
 800d442:	2b02      	cmp	r3, #2
 800d444:	d002      	beq.n	800d44c <USBD_StdEPReq+0x1dc>
 800d446:	2b03      	cmp	r3, #3
 800d448:	d032      	beq.n	800d4b0 <USBD_StdEPReq+0x240>
 800d44a:	e097      	b.n	800d57c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d44c:	7bbb      	ldrb	r3, [r7, #14]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d007      	beq.n	800d462 <USBD_StdEPReq+0x1f2>
 800d452:	7bbb      	ldrb	r3, [r7, #14]
 800d454:	2b80      	cmp	r3, #128	; 0x80
 800d456:	d004      	beq.n	800d462 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d458:	6839      	ldr	r1, [r7, #0]
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f000 fbed 	bl	800dc3a <USBD_CtlError>
                break;
 800d460:	e091      	b.n	800d586 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d462:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d466:	2b00      	cmp	r3, #0
 800d468:	da0b      	bge.n	800d482 <USBD_StdEPReq+0x212>
 800d46a:	7bbb      	ldrb	r3, [r7, #14]
 800d46c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d470:	4613      	mov	r3, r2
 800d472:	009b      	lsls	r3, r3, #2
 800d474:	4413      	add	r3, r2
 800d476:	009b      	lsls	r3, r3, #2
 800d478:	3310      	adds	r3, #16
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	4413      	add	r3, r2
 800d47e:	3304      	adds	r3, #4
 800d480:	e00b      	b.n	800d49a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d482:	7bbb      	ldrb	r3, [r7, #14]
 800d484:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d488:	4613      	mov	r3, r2
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	4413      	add	r3, r2
 800d48e:	009b      	lsls	r3, r3, #2
 800d490:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	4413      	add	r3, r2
 800d498:	3304      	adds	r3, #4
 800d49a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	2202      	movs	r2, #2
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 fc37 	bl	800dd1c <USBD_CtlSendData>
              break;
 800d4ae:	e06a      	b.n	800d586 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d4b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	da11      	bge.n	800d4dc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d4b8:	7bbb      	ldrb	r3, [r7, #14]
 800d4ba:	f003 020f 	and.w	r2, r3, #15
 800d4be:	6879      	ldr	r1, [r7, #4]
 800d4c0:	4613      	mov	r3, r2
 800d4c2:	009b      	lsls	r3, r3, #2
 800d4c4:	4413      	add	r3, r2
 800d4c6:	009b      	lsls	r3, r3, #2
 800d4c8:	440b      	add	r3, r1
 800d4ca:	3324      	adds	r3, #36	; 0x24
 800d4cc:	881b      	ldrh	r3, [r3, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d117      	bne.n	800d502 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d4d2:	6839      	ldr	r1, [r7, #0]
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f000 fbb0 	bl	800dc3a <USBD_CtlError>
                  break;
 800d4da:	e054      	b.n	800d586 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d4dc:	7bbb      	ldrb	r3, [r7, #14]
 800d4de:	f003 020f 	and.w	r2, r3, #15
 800d4e2:	6879      	ldr	r1, [r7, #4]
 800d4e4:	4613      	mov	r3, r2
 800d4e6:	009b      	lsls	r3, r3, #2
 800d4e8:	4413      	add	r3, r2
 800d4ea:	009b      	lsls	r3, r3, #2
 800d4ec:	440b      	add	r3, r1
 800d4ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d4f2:	881b      	ldrh	r3, [r3, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d104      	bne.n	800d502 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d4f8:	6839      	ldr	r1, [r7, #0]
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 fb9d 	bl	800dc3a <USBD_CtlError>
                  break;
 800d500:	e041      	b.n	800d586 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d502:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d506:	2b00      	cmp	r3, #0
 800d508:	da0b      	bge.n	800d522 <USBD_StdEPReq+0x2b2>
 800d50a:	7bbb      	ldrb	r3, [r7, #14]
 800d50c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d510:	4613      	mov	r3, r2
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	4413      	add	r3, r2
 800d516:	009b      	lsls	r3, r3, #2
 800d518:	3310      	adds	r3, #16
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	4413      	add	r3, r2
 800d51e:	3304      	adds	r3, #4
 800d520:	e00b      	b.n	800d53a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d522:	7bbb      	ldrb	r3, [r7, #14]
 800d524:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d528:	4613      	mov	r3, r2
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	4413      	add	r3, r2
 800d52e:	009b      	lsls	r3, r3, #2
 800d530:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	4413      	add	r3, r2
 800d538:	3304      	adds	r3, #4
 800d53a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d53c:	7bbb      	ldrb	r3, [r7, #14]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d002      	beq.n	800d548 <USBD_StdEPReq+0x2d8>
 800d542:	7bbb      	ldrb	r3, [r7, #14]
 800d544:	2b80      	cmp	r3, #128	; 0x80
 800d546:	d103      	bne.n	800d550 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	2200      	movs	r2, #0
 800d54c:	601a      	str	r2, [r3, #0]
 800d54e:	e00e      	b.n	800d56e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d550:	7bbb      	ldrb	r3, [r7, #14]
 800d552:	4619      	mov	r1, r3
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f002 fbe5 	bl	800fd24 <USBD_LL_IsStallEP>
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d003      	beq.n	800d568 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	2201      	movs	r2, #1
 800d564:	601a      	str	r2, [r3, #0]
 800d566:	e002      	b.n	800d56e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	2200      	movs	r2, #0
 800d56c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	2202      	movs	r2, #2
 800d572:	4619      	mov	r1, r3
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f000 fbd1 	bl	800dd1c <USBD_CtlSendData>
              break;
 800d57a:	e004      	b.n	800d586 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d57c:	6839      	ldr	r1, [r7, #0]
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 fb5b 	bl	800dc3a <USBD_CtlError>
              break;
 800d584:	bf00      	nop
          }
          break;
 800d586:	e004      	b.n	800d592 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d588:	6839      	ldr	r1, [r7, #0]
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f000 fb55 	bl	800dc3a <USBD_CtlError>
          break;
 800d590:	bf00      	nop
      }
      break;
 800d592:	e005      	b.n	800d5a0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d594:	6839      	ldr	r1, [r7, #0]
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 fb4f 	bl	800dc3a <USBD_CtlError>
      break;
 800d59c:	e000      	b.n	800d5a0 <USBD_StdEPReq+0x330>
      break;
 800d59e:	bf00      	nop
  }

  return ret;
 800d5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3710      	adds	r7, #16
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
	...

0800d5ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b084      	sub	sp, #16
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	885b      	ldrh	r3, [r3, #2]
 800d5c6:	0a1b      	lsrs	r3, r3, #8
 800d5c8:	b29b      	uxth	r3, r3
 800d5ca:	3b01      	subs	r3, #1
 800d5cc:	2b06      	cmp	r3, #6
 800d5ce:	f200 8128 	bhi.w	800d822 <USBD_GetDescriptor+0x276>
 800d5d2:	a201      	add	r2, pc, #4	; (adr r2, 800d5d8 <USBD_GetDescriptor+0x2c>)
 800d5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d8:	0800d5f5 	.word	0x0800d5f5
 800d5dc:	0800d60d 	.word	0x0800d60d
 800d5e0:	0800d64d 	.word	0x0800d64d
 800d5e4:	0800d823 	.word	0x0800d823
 800d5e8:	0800d823 	.word	0x0800d823
 800d5ec:	0800d7c3 	.word	0x0800d7c3
 800d5f0:	0800d7ef 	.word	0x0800d7ef
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	7c12      	ldrb	r2, [r2, #16]
 800d600:	f107 0108 	add.w	r1, r7, #8
 800d604:	4610      	mov	r0, r2
 800d606:	4798      	blx	r3
 800d608:	60f8      	str	r0, [r7, #12]
      break;
 800d60a:	e112      	b.n	800d832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	7c1b      	ldrb	r3, [r3, #16]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d10d      	bne.n	800d630 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d61a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d61c:	f107 0208 	add.w	r2, r7, #8
 800d620:	4610      	mov	r0, r2
 800d622:	4798      	blx	r3
 800d624:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	3301      	adds	r3, #1
 800d62a:	2202      	movs	r2, #2
 800d62c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d62e:	e100      	b.n	800d832 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d638:	f107 0208 	add.w	r2, r7, #8
 800d63c:	4610      	mov	r0, r2
 800d63e:	4798      	blx	r3
 800d640:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	3301      	adds	r3, #1
 800d646:	2202      	movs	r2, #2
 800d648:	701a      	strb	r2, [r3, #0]
      break;
 800d64a:	e0f2      	b.n	800d832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	885b      	ldrh	r3, [r3, #2]
 800d650:	b2db      	uxtb	r3, r3
 800d652:	2b05      	cmp	r3, #5
 800d654:	f200 80ac 	bhi.w	800d7b0 <USBD_GetDescriptor+0x204>
 800d658:	a201      	add	r2, pc, #4	; (adr r2, 800d660 <USBD_GetDescriptor+0xb4>)
 800d65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d65e:	bf00      	nop
 800d660:	0800d679 	.word	0x0800d679
 800d664:	0800d6ad 	.word	0x0800d6ad
 800d668:	0800d6e1 	.word	0x0800d6e1
 800d66c:	0800d715 	.word	0x0800d715
 800d670:	0800d749 	.word	0x0800d749
 800d674:	0800d77d 	.word	0x0800d77d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d67e:	685b      	ldr	r3, [r3, #4]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d00b      	beq.n	800d69c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	7c12      	ldrb	r2, [r2, #16]
 800d690:	f107 0108 	add.w	r1, r7, #8
 800d694:	4610      	mov	r0, r2
 800d696:	4798      	blx	r3
 800d698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d69a:	e091      	b.n	800d7c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d69c:	6839      	ldr	r1, [r7, #0]
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f000 facb 	bl	800dc3a <USBD_CtlError>
            err++;
 800d6a4:	7afb      	ldrb	r3, [r7, #11]
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	72fb      	strb	r3, [r7, #11]
          break;
 800d6aa:	e089      	b.n	800d7c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6b2:	689b      	ldr	r3, [r3, #8]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00b      	beq.n	800d6d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6be:	689b      	ldr	r3, [r3, #8]
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	7c12      	ldrb	r2, [r2, #16]
 800d6c4:	f107 0108 	add.w	r1, r7, #8
 800d6c8:	4610      	mov	r0, r2
 800d6ca:	4798      	blx	r3
 800d6cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6ce:	e077      	b.n	800d7c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d6d0:	6839      	ldr	r1, [r7, #0]
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 fab1 	bl	800dc3a <USBD_CtlError>
            err++;
 800d6d8:	7afb      	ldrb	r3, [r7, #11]
 800d6da:	3301      	adds	r3, #1
 800d6dc:	72fb      	strb	r3, [r7, #11]
          break;
 800d6de:	e06f      	b.n	800d7c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6e6:	68db      	ldr	r3, [r3, #12]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d00b      	beq.n	800d704 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	7c12      	ldrb	r2, [r2, #16]
 800d6f8:	f107 0108 	add.w	r1, r7, #8
 800d6fc:	4610      	mov	r0, r2
 800d6fe:	4798      	blx	r3
 800d700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d702:	e05d      	b.n	800d7c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d704:	6839      	ldr	r1, [r7, #0]
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 fa97 	bl	800dc3a <USBD_CtlError>
            err++;
 800d70c:	7afb      	ldrb	r3, [r7, #11]
 800d70e:	3301      	adds	r3, #1
 800d710:	72fb      	strb	r3, [r7, #11]
          break;
 800d712:	e055      	b.n	800d7c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d71a:	691b      	ldr	r3, [r3, #16]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d00b      	beq.n	800d738 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d726:	691b      	ldr	r3, [r3, #16]
 800d728:	687a      	ldr	r2, [r7, #4]
 800d72a:	7c12      	ldrb	r2, [r2, #16]
 800d72c:	f107 0108 	add.w	r1, r7, #8
 800d730:	4610      	mov	r0, r2
 800d732:	4798      	blx	r3
 800d734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d736:	e043      	b.n	800d7c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d738:	6839      	ldr	r1, [r7, #0]
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 fa7d 	bl	800dc3a <USBD_CtlError>
            err++;
 800d740:	7afb      	ldrb	r3, [r7, #11]
 800d742:	3301      	adds	r3, #1
 800d744:	72fb      	strb	r3, [r7, #11]
          break;
 800d746:	e03b      	b.n	800d7c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d74e:	695b      	ldr	r3, [r3, #20]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d00b      	beq.n	800d76c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d75a:	695b      	ldr	r3, [r3, #20]
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	7c12      	ldrb	r2, [r2, #16]
 800d760:	f107 0108 	add.w	r1, r7, #8
 800d764:	4610      	mov	r0, r2
 800d766:	4798      	blx	r3
 800d768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d76a:	e029      	b.n	800d7c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d76c:	6839      	ldr	r1, [r7, #0]
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f000 fa63 	bl	800dc3a <USBD_CtlError>
            err++;
 800d774:	7afb      	ldrb	r3, [r7, #11]
 800d776:	3301      	adds	r3, #1
 800d778:	72fb      	strb	r3, [r7, #11]
          break;
 800d77a:	e021      	b.n	800d7c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d782:	699b      	ldr	r3, [r3, #24]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d00b      	beq.n	800d7a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d78e:	699b      	ldr	r3, [r3, #24]
 800d790:	687a      	ldr	r2, [r7, #4]
 800d792:	7c12      	ldrb	r2, [r2, #16]
 800d794:	f107 0108 	add.w	r1, r7, #8
 800d798:	4610      	mov	r0, r2
 800d79a:	4798      	blx	r3
 800d79c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d79e:	e00f      	b.n	800d7c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7a0:	6839      	ldr	r1, [r7, #0]
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 fa49 	bl	800dc3a <USBD_CtlError>
            err++;
 800d7a8:	7afb      	ldrb	r3, [r7, #11]
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	72fb      	strb	r3, [r7, #11]
          break;
 800d7ae:	e007      	b.n	800d7c0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d7b0:	6839      	ldr	r1, [r7, #0]
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f000 fa41 	bl	800dc3a <USBD_CtlError>
          err++;
 800d7b8:	7afb      	ldrb	r3, [r7, #11]
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d7be:	bf00      	nop
      }
      break;
 800d7c0:	e037      	b.n	800d832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	7c1b      	ldrb	r3, [r3, #16]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d109      	bne.n	800d7de <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7d2:	f107 0208 	add.w	r2, r7, #8
 800d7d6:	4610      	mov	r0, r2
 800d7d8:	4798      	blx	r3
 800d7da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d7dc:	e029      	b.n	800d832 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d7de:	6839      	ldr	r1, [r7, #0]
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f000 fa2a 	bl	800dc3a <USBD_CtlError>
        err++;
 800d7e6:	7afb      	ldrb	r3, [r7, #11]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	72fb      	strb	r3, [r7, #11]
      break;
 800d7ec:	e021      	b.n	800d832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	7c1b      	ldrb	r3, [r3, #16]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d10d      	bne.n	800d812 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7fe:	f107 0208 	add.w	r2, r7, #8
 800d802:	4610      	mov	r0, r2
 800d804:	4798      	blx	r3
 800d806:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	3301      	adds	r3, #1
 800d80c:	2207      	movs	r2, #7
 800d80e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d810:	e00f      	b.n	800d832 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d812:	6839      	ldr	r1, [r7, #0]
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 fa10 	bl	800dc3a <USBD_CtlError>
        err++;
 800d81a:	7afb      	ldrb	r3, [r7, #11]
 800d81c:	3301      	adds	r3, #1
 800d81e:	72fb      	strb	r3, [r7, #11]
      break;
 800d820:	e007      	b.n	800d832 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d822:	6839      	ldr	r1, [r7, #0]
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f000 fa08 	bl	800dc3a <USBD_CtlError>
      err++;
 800d82a:	7afb      	ldrb	r3, [r7, #11]
 800d82c:	3301      	adds	r3, #1
 800d82e:	72fb      	strb	r3, [r7, #11]
      break;
 800d830:	bf00      	nop
  }

  if (err != 0U)
 800d832:	7afb      	ldrb	r3, [r7, #11]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d11e      	bne.n	800d876 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	88db      	ldrh	r3, [r3, #6]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d016      	beq.n	800d86e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d840:	893b      	ldrh	r3, [r7, #8]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d00e      	beq.n	800d864 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	88da      	ldrh	r2, [r3, #6]
 800d84a:	893b      	ldrh	r3, [r7, #8]
 800d84c:	4293      	cmp	r3, r2
 800d84e:	bf28      	it	cs
 800d850:	4613      	movcs	r3, r2
 800d852:	b29b      	uxth	r3, r3
 800d854:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d856:	893b      	ldrh	r3, [r7, #8]
 800d858:	461a      	mov	r2, r3
 800d85a:	68f9      	ldr	r1, [r7, #12]
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 fa5d 	bl	800dd1c <USBD_CtlSendData>
 800d862:	e009      	b.n	800d878 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d864:	6839      	ldr	r1, [r7, #0]
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f000 f9e7 	bl	800dc3a <USBD_CtlError>
 800d86c:	e004      	b.n	800d878 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f000 faae 	bl	800ddd0 <USBD_CtlSendStatus>
 800d874:	e000      	b.n	800d878 <USBD_GetDescriptor+0x2cc>
    return;
 800d876:	bf00      	nop
  }
}
 800d878:	3710      	adds	r7, #16
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop

0800d880 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	889b      	ldrh	r3, [r3, #4]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d131      	bne.n	800d8f6 <USBD_SetAddress+0x76>
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	88db      	ldrh	r3, [r3, #6]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d12d      	bne.n	800d8f6 <USBD_SetAddress+0x76>
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	885b      	ldrh	r3, [r3, #2]
 800d89e:	2b7f      	cmp	r3, #127	; 0x7f
 800d8a0:	d829      	bhi.n	800d8f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	885b      	ldrh	r3, [r3, #2]
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	2b03      	cmp	r3, #3
 800d8b8:	d104      	bne.n	800d8c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d8ba:	6839      	ldr	r1, [r7, #0]
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 f9bc 	bl	800dc3a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8c2:	e01d      	b.n	800d900 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	7bfa      	ldrb	r2, [r7, #15]
 800d8c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d8cc:	7bfb      	ldrb	r3, [r7, #15]
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f002 fa53 	bl	800fd7c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f000 fa7a 	bl	800ddd0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d8dc:	7bfb      	ldrb	r3, [r7, #15]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d004      	beq.n	800d8ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2202      	movs	r2, #2
 800d8e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8ea:	e009      	b.n	800d900 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8f4:	e004      	b.n	800d900 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d8f6:	6839      	ldr	r1, [r7, #0]
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 f99e 	bl	800dc3a <USBD_CtlError>
  }
}
 800d8fe:	bf00      	nop
 800d900:	bf00      	nop
 800d902:	3710      	adds	r7, #16
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b084      	sub	sp, #16
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d912:	2300      	movs	r3, #0
 800d914:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	885b      	ldrh	r3, [r3, #2]
 800d91a:	b2da      	uxtb	r2, r3
 800d91c:	4b4e      	ldr	r3, [pc, #312]	; (800da58 <USBD_SetConfig+0x150>)
 800d91e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d920:	4b4d      	ldr	r3, [pc, #308]	; (800da58 <USBD_SetConfig+0x150>)
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	2b01      	cmp	r3, #1
 800d926:	d905      	bls.n	800d934 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d928:	6839      	ldr	r1, [r7, #0]
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f000 f985 	bl	800dc3a <USBD_CtlError>
    return USBD_FAIL;
 800d930:	2303      	movs	r3, #3
 800d932:	e08c      	b.n	800da4e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d93a:	b2db      	uxtb	r3, r3
 800d93c:	2b02      	cmp	r3, #2
 800d93e:	d002      	beq.n	800d946 <USBD_SetConfig+0x3e>
 800d940:	2b03      	cmp	r3, #3
 800d942:	d029      	beq.n	800d998 <USBD_SetConfig+0x90>
 800d944:	e075      	b.n	800da32 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d946:	4b44      	ldr	r3, [pc, #272]	; (800da58 <USBD_SetConfig+0x150>)
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d020      	beq.n	800d990 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d94e:	4b42      	ldr	r3, [pc, #264]	; (800da58 <USBD_SetConfig+0x150>)
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	461a      	mov	r2, r3
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d958:	4b3f      	ldr	r3, [pc, #252]	; (800da58 <USBD_SetConfig+0x150>)
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	4619      	mov	r1, r3
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f7fe ffe7 	bl	800c932 <USBD_SetClassConfig>
 800d964:	4603      	mov	r3, r0
 800d966:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d968:	7bfb      	ldrb	r3, [r7, #15]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d008      	beq.n	800d980 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d96e:	6839      	ldr	r1, [r7, #0]
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f000 f962 	bl	800dc3a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2202      	movs	r2, #2
 800d97a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d97e:	e065      	b.n	800da4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f000 fa25 	bl	800ddd0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2203      	movs	r2, #3
 800d98a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d98e:	e05d      	b.n	800da4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f000 fa1d 	bl	800ddd0 <USBD_CtlSendStatus>
      break;
 800d996:	e059      	b.n	800da4c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d998:	4b2f      	ldr	r3, [pc, #188]	; (800da58 <USBD_SetConfig+0x150>)
 800d99a:	781b      	ldrb	r3, [r3, #0]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d112      	bne.n	800d9c6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2202      	movs	r2, #2
 800d9a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d9a8:	4b2b      	ldr	r3, [pc, #172]	; (800da58 <USBD_SetConfig+0x150>)
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d9b2:	4b29      	ldr	r3, [pc, #164]	; (800da58 <USBD_SetConfig+0x150>)
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f7fe ffd6 	bl	800c96a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f000 fa06 	bl	800ddd0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d9c4:	e042      	b.n	800da4c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d9c6:	4b24      	ldr	r3, [pc, #144]	; (800da58 <USBD_SetConfig+0x150>)
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d02a      	beq.n	800da2a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	4619      	mov	r1, r3
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f7fe ffc4 	bl	800c96a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d9e2:	4b1d      	ldr	r3, [pc, #116]	; (800da58 <USBD_SetConfig+0x150>)
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d9ec:	4b1a      	ldr	r3, [pc, #104]	; (800da58 <USBD_SetConfig+0x150>)
 800d9ee:	781b      	ldrb	r3, [r3, #0]
 800d9f0:	4619      	mov	r1, r3
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f7fe ff9d 	bl	800c932 <USBD_SetClassConfig>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d9fc:	7bfb      	ldrb	r3, [r7, #15]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d00f      	beq.n	800da22 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800da02:	6839      	ldr	r1, [r7, #0]
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f000 f918 	bl	800dc3a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	4619      	mov	r1, r3
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f7fe ffa9 	bl	800c96a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2202      	movs	r2, #2
 800da1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800da20:	e014      	b.n	800da4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f000 f9d4 	bl	800ddd0 <USBD_CtlSendStatus>
      break;
 800da28:	e010      	b.n	800da4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 f9d0 	bl	800ddd0 <USBD_CtlSendStatus>
      break;
 800da30:	e00c      	b.n	800da4c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800da32:	6839      	ldr	r1, [r7, #0]
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f000 f900 	bl	800dc3a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800da3a:	4b07      	ldr	r3, [pc, #28]	; (800da58 <USBD_SetConfig+0x150>)
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	4619      	mov	r1, r3
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f7fe ff92 	bl	800c96a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800da46:	2303      	movs	r3, #3
 800da48:	73fb      	strb	r3, [r7, #15]
      break;
 800da4a:	bf00      	nop
  }

  return ret;
 800da4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3710      	adds	r7, #16
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	20000d18 	.word	0x20000d18

0800da5c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b082      	sub	sp, #8
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	88db      	ldrh	r3, [r3, #6]
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	d004      	beq.n	800da78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800da6e:	6839      	ldr	r1, [r7, #0]
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f000 f8e2 	bl	800dc3a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800da76:	e023      	b.n	800dac0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	2b02      	cmp	r3, #2
 800da82:	dc02      	bgt.n	800da8a <USBD_GetConfig+0x2e>
 800da84:	2b00      	cmp	r3, #0
 800da86:	dc03      	bgt.n	800da90 <USBD_GetConfig+0x34>
 800da88:	e015      	b.n	800dab6 <USBD_GetConfig+0x5a>
 800da8a:	2b03      	cmp	r3, #3
 800da8c:	d00b      	beq.n	800daa6 <USBD_GetConfig+0x4a>
 800da8e:	e012      	b.n	800dab6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2200      	movs	r2, #0
 800da94:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	3308      	adds	r3, #8
 800da9a:	2201      	movs	r2, #1
 800da9c:	4619      	mov	r1, r3
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f000 f93c 	bl	800dd1c <USBD_CtlSendData>
        break;
 800daa4:	e00c      	b.n	800dac0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	3304      	adds	r3, #4
 800daaa:	2201      	movs	r2, #1
 800daac:	4619      	mov	r1, r3
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f000 f934 	bl	800dd1c <USBD_CtlSendData>
        break;
 800dab4:	e004      	b.n	800dac0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dab6:	6839      	ldr	r1, [r7, #0]
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f000 f8be 	bl	800dc3a <USBD_CtlError>
        break;
 800dabe:	bf00      	nop
}
 800dac0:	bf00      	nop
 800dac2:	3708      	adds	r7, #8
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b082      	sub	sp, #8
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	3b01      	subs	r3, #1
 800dadc:	2b02      	cmp	r3, #2
 800dade:	d81e      	bhi.n	800db1e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	88db      	ldrh	r3, [r3, #6]
 800dae4:	2b02      	cmp	r3, #2
 800dae6:	d004      	beq.n	800daf2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dae8:	6839      	ldr	r1, [r7, #0]
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f000 f8a5 	bl	800dc3a <USBD_CtlError>
        break;
 800daf0:	e01a      	b.n	800db28 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2201      	movs	r2, #1
 800daf6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d005      	beq.n	800db0e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	68db      	ldr	r3, [r3, #12]
 800db06:	f043 0202 	orr.w	r2, r3, #2
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	330c      	adds	r3, #12
 800db12:	2202      	movs	r2, #2
 800db14:	4619      	mov	r1, r3
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f000 f900 	bl	800dd1c <USBD_CtlSendData>
      break;
 800db1c:	e004      	b.n	800db28 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800db1e:	6839      	ldr	r1, [r7, #0]
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f000 f88a 	bl	800dc3a <USBD_CtlError>
      break;
 800db26:	bf00      	nop
  }
}
 800db28:	bf00      	nop
 800db2a:	3708      	adds	r7, #8
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b082      	sub	sp, #8
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	885b      	ldrh	r3, [r3, #2]
 800db3e:	2b01      	cmp	r3, #1
 800db40:	d107      	bne.n	800db52 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2201      	movs	r2, #1
 800db46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f000 f940 	bl	800ddd0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800db50:	e013      	b.n	800db7a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	885b      	ldrh	r3, [r3, #2]
 800db56:	2b02      	cmp	r3, #2
 800db58:	d10b      	bne.n	800db72 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	889b      	ldrh	r3, [r3, #4]
 800db5e:	0a1b      	lsrs	r3, r3, #8
 800db60:	b29b      	uxth	r3, r3
 800db62:	b2da      	uxtb	r2, r3
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 f930 	bl	800ddd0 <USBD_CtlSendStatus>
}
 800db70:	e003      	b.n	800db7a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800db72:	6839      	ldr	r1, [r7, #0]
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f000 f860 	bl	800dc3a <USBD_CtlError>
}
 800db7a:	bf00      	nop
 800db7c:	3708      	adds	r7, #8
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}

0800db82 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db82:	b580      	push	{r7, lr}
 800db84:	b082      	sub	sp, #8
 800db86:	af00      	add	r7, sp, #0
 800db88:	6078      	str	r0, [r7, #4]
 800db8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db92:	b2db      	uxtb	r3, r3
 800db94:	3b01      	subs	r3, #1
 800db96:	2b02      	cmp	r3, #2
 800db98:	d80b      	bhi.n	800dbb2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	885b      	ldrh	r3, [r3, #2]
 800db9e:	2b01      	cmp	r3, #1
 800dba0:	d10c      	bne.n	800dbbc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2200      	movs	r2, #0
 800dba6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f000 f910 	bl	800ddd0 <USBD_CtlSendStatus>
      }
      break;
 800dbb0:	e004      	b.n	800dbbc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dbb2:	6839      	ldr	r1, [r7, #0]
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f000 f840 	bl	800dc3a <USBD_CtlError>
      break;
 800dbba:	e000      	b.n	800dbbe <USBD_ClrFeature+0x3c>
      break;
 800dbbc:	bf00      	nop
  }
}
 800dbbe:	bf00      	nop
 800dbc0:	3708      	adds	r7, #8
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dbc6:	b580      	push	{r7, lr}
 800dbc8:	b084      	sub	sp, #16
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	6078      	str	r0, [r7, #4]
 800dbce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	781a      	ldrb	r2, [r3, #0]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	3301      	adds	r3, #1
 800dbe0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	781a      	ldrb	r2, [r3, #0]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	3301      	adds	r3, #1
 800dbee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dbf0:	68f8      	ldr	r0, [r7, #12]
 800dbf2:	f7ff fa41 	bl	800d078 <SWAPBYTE>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	3301      	adds	r3, #1
 800dc02:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	3301      	adds	r3, #1
 800dc08:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dc0a:	68f8      	ldr	r0, [r7, #12]
 800dc0c:	f7ff fa34 	bl	800d078 <SWAPBYTE>
 800dc10:	4603      	mov	r3, r0
 800dc12:	461a      	mov	r2, r3
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	3301      	adds	r3, #1
 800dc22:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dc24:	68f8      	ldr	r0, [r7, #12]
 800dc26:	f7ff fa27 	bl	800d078 <SWAPBYTE>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	80da      	strh	r2, [r3, #6]
}
 800dc32:	bf00      	nop
 800dc34:	3710      	adds	r7, #16
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}

0800dc3a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc3a:	b580      	push	{r7, lr}
 800dc3c:	b082      	sub	sp, #8
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	6078      	str	r0, [r7, #4]
 800dc42:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc44:	2180      	movs	r1, #128	; 0x80
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f002 f82e 	bl	800fca8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dc4c:	2100      	movs	r1, #0
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f002 f82a 	bl	800fca8 <USBD_LL_StallEP>
}
 800dc54:	bf00      	nop
 800dc56:	3708      	adds	r7, #8
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b086      	sub	sp, #24
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	60f8      	str	r0, [r7, #12]
 800dc64:	60b9      	str	r1, [r7, #8]
 800dc66:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d036      	beq.n	800dce0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dc76:	6938      	ldr	r0, [r7, #16]
 800dc78:	f000 f836 	bl	800dce8 <USBD_GetLen>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	3301      	adds	r3, #1
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	005b      	lsls	r3, r3, #1
 800dc84:	b29a      	uxth	r2, r3
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dc8a:	7dfb      	ldrb	r3, [r7, #23]
 800dc8c:	68ba      	ldr	r2, [r7, #8]
 800dc8e:	4413      	add	r3, r2
 800dc90:	687a      	ldr	r2, [r7, #4]
 800dc92:	7812      	ldrb	r2, [r2, #0]
 800dc94:	701a      	strb	r2, [r3, #0]
  idx++;
 800dc96:	7dfb      	ldrb	r3, [r7, #23]
 800dc98:	3301      	adds	r3, #1
 800dc9a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dc9c:	7dfb      	ldrb	r3, [r7, #23]
 800dc9e:	68ba      	ldr	r2, [r7, #8]
 800dca0:	4413      	add	r3, r2
 800dca2:	2203      	movs	r2, #3
 800dca4:	701a      	strb	r2, [r3, #0]
  idx++;
 800dca6:	7dfb      	ldrb	r3, [r7, #23]
 800dca8:	3301      	adds	r3, #1
 800dcaa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dcac:	e013      	b.n	800dcd6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dcae:	7dfb      	ldrb	r3, [r7, #23]
 800dcb0:	68ba      	ldr	r2, [r7, #8]
 800dcb2:	4413      	add	r3, r2
 800dcb4:	693a      	ldr	r2, [r7, #16]
 800dcb6:	7812      	ldrb	r2, [r2, #0]
 800dcb8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	613b      	str	r3, [r7, #16]
    idx++;
 800dcc0:	7dfb      	ldrb	r3, [r7, #23]
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dcc6:	7dfb      	ldrb	r3, [r7, #23]
 800dcc8:	68ba      	ldr	r2, [r7, #8]
 800dcca:	4413      	add	r3, r2
 800dccc:	2200      	movs	r2, #0
 800dcce:	701a      	strb	r2, [r3, #0]
    idx++;
 800dcd0:	7dfb      	ldrb	r3, [r7, #23]
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d1e7      	bne.n	800dcae <USBD_GetString+0x52>
 800dcde:	e000      	b.n	800dce2 <USBD_GetString+0x86>
    return;
 800dce0:	bf00      	nop
  }
}
 800dce2:	3718      	adds	r7, #24
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b085      	sub	sp, #20
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dcf8:	e005      	b.n	800dd06 <USBD_GetLen+0x1e>
  {
    len++;
 800dcfa:	7bfb      	ldrb	r3, [r7, #15]
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	3301      	adds	r3, #1
 800dd04:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d1f5      	bne.n	800dcfa <USBD_GetLen+0x12>
  }

  return len;
 800dd0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3714      	adds	r7, #20
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr

0800dd1c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b084      	sub	sp, #16
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	60f8      	str	r0, [r7, #12]
 800dd24:	60b9      	str	r1, [r7, #8]
 800dd26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2202      	movs	r2, #2
 800dd2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	687a      	ldr	r2, [r7, #4]
 800dd34:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	687a      	ldr	r2, [r7, #4]
 800dd3a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	68ba      	ldr	r2, [r7, #8]
 800dd40:	2100      	movs	r1, #0
 800dd42:	68f8      	ldr	r0, [r7, #12]
 800dd44:	f002 f839 	bl	800fdba <USBD_LL_Transmit>

  return USBD_OK;
 800dd48:	2300      	movs	r3, #0
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3710      	adds	r7, #16
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dd52:	b580      	push	{r7, lr}
 800dd54:	b084      	sub	sp, #16
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	60f8      	str	r0, [r7, #12]
 800dd5a:	60b9      	str	r1, [r7, #8]
 800dd5c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	68ba      	ldr	r2, [r7, #8]
 800dd62:	2100      	movs	r1, #0
 800dd64:	68f8      	ldr	r0, [r7, #12]
 800dd66:	f002 f828 	bl	800fdba <USBD_LL_Transmit>

  return USBD_OK;
 800dd6a:	2300      	movs	r3, #0
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3710      	adds	r7, #16
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	60f8      	str	r0, [r7, #12]
 800dd7c:	60b9      	str	r1, [r7, #8]
 800dd7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2203      	movs	r2, #3
 800dd84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	68ba      	ldr	r2, [r7, #8]
 800dd9c:	2100      	movs	r1, #0
 800dd9e:	68f8      	ldr	r0, [r7, #12]
 800dda0:	f002 f82c 	bl	800fdfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dda4:	2300      	movs	r3, #0
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3710      	adds	r7, #16
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}

0800ddae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ddae:	b580      	push	{r7, lr}
 800ddb0:	b084      	sub	sp, #16
 800ddb2:	af00      	add	r7, sp, #0
 800ddb4:	60f8      	str	r0, [r7, #12]
 800ddb6:	60b9      	str	r1, [r7, #8]
 800ddb8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	68ba      	ldr	r2, [r7, #8]
 800ddbe:	2100      	movs	r1, #0
 800ddc0:	68f8      	ldr	r0, [r7, #12]
 800ddc2:	f002 f81b 	bl	800fdfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ddc6:	2300      	movs	r3, #0
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3710      	adds	r7, #16
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2204      	movs	r2, #4
 800dddc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dde0:	2300      	movs	r3, #0
 800dde2:	2200      	movs	r2, #0
 800dde4:	2100      	movs	r1, #0
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f001 ffe7 	bl	800fdba <USBD_LL_Transmit>

  return USBD_OK;
 800ddec:	2300      	movs	r3, #0
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3708      	adds	r7, #8
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}

0800ddf6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ddf6:	b580      	push	{r7, lr}
 800ddf8:	b082      	sub	sp, #8
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2205      	movs	r2, #5
 800de02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de06:	2300      	movs	r3, #0
 800de08:	2200      	movs	r2, #0
 800de0a:	2100      	movs	r1, #0
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f001 fff5 	bl	800fdfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800de12:	2300      	movs	r3, #0
}
 800de14:	4618      	mov	r0, r3
 800de16:	3708      	adds	r7, #8
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <makeFreeRtosPriority>:
 800de1c:	b480      	push	{r7}
 800de1e:	b085      	sub	sp, #20
 800de20:	af00      	add	r7, sp, #0
 800de22:	4603      	mov	r3, r0
 800de24:	80fb      	strh	r3, [r7, #6]
 800de26:	2300      	movs	r3, #0
 800de28:	60fb      	str	r3, [r7, #12]
 800de2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800de2e:	2b84      	cmp	r3, #132	; 0x84
 800de30:	d005      	beq.n	800de3e <makeFreeRtosPriority+0x22>
 800de32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	4413      	add	r3, r2
 800de3a:	3303      	adds	r3, #3
 800de3c:	60fb      	str	r3, [r7, #12]
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	4618      	mov	r0, r3
 800de42:	3714      	adds	r7, #20
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr

0800de4c <osKernelStart>:
 800de4c:	b580      	push	{r7, lr}
 800de4e:	af00      	add	r7, sp, #0
 800de50:	f000 fafe 	bl	800e450 <vTaskStartScheduler>
 800de54:	2300      	movs	r3, #0
 800de56:	4618      	mov	r0, r3
 800de58:	bd80      	pop	{r7, pc}

0800de5a <osThreadCreate>:
 800de5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de5c:	b089      	sub	sp, #36	; 0x24
 800de5e:	af04      	add	r7, sp, #16
 800de60:	6078      	str	r0, [r7, #4]
 800de62:	6039      	str	r1, [r7, #0]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	695b      	ldr	r3, [r3, #20]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d020      	beq.n	800deae <osThreadCreate+0x54>
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	699b      	ldr	r3, [r3, #24]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d01c      	beq.n	800deae <osThreadCreate+0x54>
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	685c      	ldr	r4, [r3, #4]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681d      	ldr	r5, [r3, #0]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	691e      	ldr	r6, [r3, #16]
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800de86:	4618      	mov	r0, r3
 800de88:	f7ff ffc8 	bl	800de1c <makeFreeRtosPriority>
 800de8c:	4601      	mov	r1, r0
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	695b      	ldr	r3, [r3, #20]
 800de92:	687a      	ldr	r2, [r7, #4]
 800de94:	6992      	ldr	r2, [r2, #24]
 800de96:	9202      	str	r2, [sp, #8]
 800de98:	9301      	str	r3, [sp, #4]
 800de9a:	9100      	str	r1, [sp, #0]
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	4632      	mov	r2, r6
 800dea0:	4629      	mov	r1, r5
 800dea2:	4620      	mov	r0, r4
 800dea4:	f000 f8ed 	bl	800e082 <xTaskCreateStatic>
 800dea8:	4603      	mov	r3, r0
 800deaa:	60fb      	str	r3, [r7, #12]
 800deac:	e01c      	b.n	800dee8 <osThreadCreate+0x8e>
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	685c      	ldr	r4, [r3, #4]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681d      	ldr	r5, [r3, #0]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	691b      	ldr	r3, [r3, #16]
 800deba:	b29e      	uxth	r6, r3
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7ff ffaa 	bl	800de1c <makeFreeRtosPriority>
 800dec8:	4602      	mov	r2, r0
 800deca:	f107 030c 	add.w	r3, r7, #12
 800dece:	9301      	str	r3, [sp, #4]
 800ded0:	9200      	str	r2, [sp, #0]
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	4632      	mov	r2, r6
 800ded6:	4629      	mov	r1, r5
 800ded8:	4620      	mov	r0, r4
 800deda:	f000 f92f 	bl	800e13c <xTaskCreate>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	d001      	beq.n	800dee8 <osThreadCreate+0x8e>
 800dee4:	2300      	movs	r3, #0
 800dee6:	e000      	b.n	800deea <osThreadCreate+0x90>
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	4618      	mov	r0, r3
 800deec:	3714      	adds	r7, #20
 800deee:	46bd      	mov	sp, r7
 800def0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800def2 <osDelay>:
 800def2:	b580      	push	{r7, lr}
 800def4:	b084      	sub	sp, #16
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	60fb      	str	r3, [r7, #12]
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d001      	beq.n	800df08 <osDelay+0x16>
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	e000      	b.n	800df0a <osDelay+0x18>
 800df08:	2301      	movs	r3, #1
 800df0a:	4618      	mov	r0, r3
 800df0c:	f000 fa6c 	bl	800e3e8 <vTaskDelay>
 800df10:	2300      	movs	r3, #0
 800df12:	4618      	mov	r0, r3
 800df14:	3710      	adds	r7, #16
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}

0800df1a <vListInitialise>:
 800df1a:	b480      	push	{r7}
 800df1c:	b083      	sub	sp, #12
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f103 0208 	add.w	r2, r3, #8
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	605a      	str	r2, [r3, #4]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f04f 32ff 	mov.w	r2, #4294967295
 800df32:	609a      	str	r2, [r3, #8]
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f103 0208 	add.w	r2, r3, #8
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	60da      	str	r2, [r3, #12]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f103 0208 	add.w	r2, r3, #8
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	611a      	str	r2, [r3, #16]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2200      	movs	r2, #0
 800df4c:	601a      	str	r2, [r3, #0]
 800df4e:	bf00      	nop
 800df50:	370c      	adds	r7, #12
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr

0800df5a <vListInitialiseItem>:
 800df5a:	b480      	push	{r7}
 800df5c:	b083      	sub	sp, #12
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2200      	movs	r2, #0
 800df66:	611a      	str	r2, [r3, #16]
 800df68:	bf00      	nop
 800df6a:	370c      	adds	r7, #12
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr

0800df74 <vListInsertEnd>:
 800df74:	b480      	push	{r7}
 800df76:	b085      	sub	sp, #20
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	6039      	str	r1, [r7, #0]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	685b      	ldr	r3, [r3, #4]
 800df82:	60fb      	str	r3, [r7, #12]
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	68fa      	ldr	r2, [r7, #12]
 800df88:	605a      	str	r2, [r3, #4]
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	689a      	ldr	r2, [r3, #8]
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	609a      	str	r2, [r3, #8]
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	689b      	ldr	r3, [r3, #8]
 800df96:	683a      	ldr	r2, [r7, #0]
 800df98:	605a      	str	r2, [r3, #4]
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	683a      	ldr	r2, [r7, #0]
 800df9e:	609a      	str	r2, [r3, #8]
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	687a      	ldr	r2, [r7, #4]
 800dfa4:	611a      	str	r2, [r3, #16]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	1c5a      	adds	r2, r3, #1
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	601a      	str	r2, [r3, #0]
 800dfb0:	bf00      	nop
 800dfb2:	3714      	adds	r7, #20
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfba:	4770      	bx	lr

0800dfbc <vListInsert>:
 800dfbc:	b480      	push	{r7}
 800dfbe:	b085      	sub	sp, #20
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	60bb      	str	r3, [r7, #8]
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfd2:	d103      	bne.n	800dfdc <vListInsert+0x20>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	691b      	ldr	r3, [r3, #16]
 800dfd8:	60fb      	str	r3, [r7, #12]
 800dfda:	e00c      	b.n	800dff6 <vListInsert+0x3a>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	3308      	adds	r3, #8
 800dfe0:	60fb      	str	r3, [r7, #12]
 800dfe2:	e002      	b.n	800dfea <vListInsert+0x2e>
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	685b      	ldr	r3, [r3, #4]
 800dfe8:	60fb      	str	r3, [r7, #12]
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	68ba      	ldr	r2, [r7, #8]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d2f6      	bcs.n	800dfe4 <vListInsert+0x28>
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	685a      	ldr	r2, [r3, #4]
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	605a      	str	r2, [r3, #4]
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	685b      	ldr	r3, [r3, #4]
 800e002:	683a      	ldr	r2, [r7, #0]
 800e004:	609a      	str	r2, [r3, #8]
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	68fa      	ldr	r2, [r7, #12]
 800e00a:	609a      	str	r2, [r3, #8]
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	683a      	ldr	r2, [r7, #0]
 800e010:	605a      	str	r2, [r3, #4]
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	611a      	str	r2, [r3, #16]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	1c5a      	adds	r2, r3, #1
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	601a      	str	r2, [r3, #0]
 800e022:	bf00      	nop
 800e024:	3714      	adds	r7, #20
 800e026:	46bd      	mov	sp, r7
 800e028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02c:	4770      	bx	lr

0800e02e <uxListRemove>:
 800e02e:	b480      	push	{r7}
 800e030:	b085      	sub	sp, #20
 800e032:	af00      	add	r7, sp, #0
 800e034:	6078      	str	r0, [r7, #4]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	691b      	ldr	r3, [r3, #16]
 800e03a:	60fb      	str	r3, [r7, #12]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	687a      	ldr	r2, [r7, #4]
 800e042:	6892      	ldr	r2, [r2, #8]
 800e044:	609a      	str	r2, [r3, #8]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	689b      	ldr	r3, [r3, #8]
 800e04a:	687a      	ldr	r2, [r7, #4]
 800e04c:	6852      	ldr	r2, [r2, #4]
 800e04e:	605a      	str	r2, [r3, #4]
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	687a      	ldr	r2, [r7, #4]
 800e056:	429a      	cmp	r2, r3
 800e058:	d103      	bne.n	800e062 <uxListRemove+0x34>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	689a      	ldr	r2, [r3, #8]
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	605a      	str	r2, [r3, #4]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2200      	movs	r2, #0
 800e066:	611a      	str	r2, [r3, #16]
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	1e5a      	subs	r2, r3, #1
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	601a      	str	r2, [r3, #0]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	4618      	mov	r0, r3
 800e078:	3714      	adds	r7, #20
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr

0800e082 <xTaskCreateStatic>:
 800e082:	b580      	push	{r7, lr}
 800e084:	b08e      	sub	sp, #56	; 0x38
 800e086:	af04      	add	r7, sp, #16
 800e088:	60f8      	str	r0, [r7, #12]
 800e08a:	60b9      	str	r1, [r7, #8]
 800e08c:	607a      	str	r2, [r7, #4]
 800e08e:	603b      	str	r3, [r7, #0]
 800e090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e092:	2b00      	cmp	r3, #0
 800e094:	d10a      	bne.n	800e0ac <xTaskCreateStatic+0x2a>
 800e096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e09a:	f383 8811 	msr	BASEPRI, r3
 800e09e:	f3bf 8f6f 	isb	sy
 800e0a2:	f3bf 8f4f 	dsb	sy
 800e0a6:	623b      	str	r3, [r7, #32]
 800e0a8:	bf00      	nop
 800e0aa:	e7fe      	b.n	800e0aa <xTaskCreateStatic+0x28>
 800e0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d10a      	bne.n	800e0c8 <xTaskCreateStatic+0x46>
 800e0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b6:	f383 8811 	msr	BASEPRI, r3
 800e0ba:	f3bf 8f6f 	isb	sy
 800e0be:	f3bf 8f4f 	dsb	sy
 800e0c2:	61fb      	str	r3, [r7, #28]
 800e0c4:	bf00      	nop
 800e0c6:	e7fe      	b.n	800e0c6 <xTaskCreateStatic+0x44>
 800e0c8:	23b8      	movs	r3, #184	; 0xb8
 800e0ca:	613b      	str	r3, [r7, #16]
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	2bb8      	cmp	r3, #184	; 0xb8
 800e0d0:	d00a      	beq.n	800e0e8 <xTaskCreateStatic+0x66>
 800e0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d6:	f383 8811 	msr	BASEPRI, r3
 800e0da:	f3bf 8f6f 	isb	sy
 800e0de:	f3bf 8f4f 	dsb	sy
 800e0e2:	61bb      	str	r3, [r7, #24]
 800e0e4:	bf00      	nop
 800e0e6:	e7fe      	b.n	800e0e6 <xTaskCreateStatic+0x64>
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d01e      	beq.n	800e12e <xTaskCreateStatic+0xac>
 800e0f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d01b      	beq.n	800e12e <xTaskCreateStatic+0xac>
 800e0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f8:	627b      	str	r3, [r7, #36]	; 0x24
 800e0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0fe:	631a      	str	r2, [r3, #48]	; 0x30
 800e100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e102:	2202      	movs	r2, #2
 800e104:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 800e108:	2300      	movs	r3, #0
 800e10a:	9303      	str	r3, [sp, #12]
 800e10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10e:	9302      	str	r3, [sp, #8]
 800e110:	f107 0314 	add.w	r3, r7, #20
 800e114:	9301      	str	r3, [sp, #4]
 800e116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e118:	9300      	str	r3, [sp, #0]
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	68b9      	ldr	r1, [r7, #8]
 800e120:	68f8      	ldr	r0, [r7, #12]
 800e122:	f000 f851 	bl	800e1c8 <prvInitialiseNewTask>
 800e126:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e128:	f000 f8f4 	bl	800e314 <prvAddNewTaskToReadyList>
 800e12c:	e001      	b.n	800e132 <xTaskCreateStatic+0xb0>
 800e12e:	2300      	movs	r3, #0
 800e130:	617b      	str	r3, [r7, #20]
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	4618      	mov	r0, r3
 800e136:	3728      	adds	r7, #40	; 0x28
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}

0800e13c <xTaskCreate>:
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b08c      	sub	sp, #48	; 0x30
 800e140:	af04      	add	r7, sp, #16
 800e142:	60f8      	str	r0, [r7, #12]
 800e144:	60b9      	str	r1, [r7, #8]
 800e146:	603b      	str	r3, [r7, #0]
 800e148:	4613      	mov	r3, r2
 800e14a:	80fb      	strh	r3, [r7, #6]
 800e14c:	88fb      	ldrh	r3, [r7, #6]
 800e14e:	009b      	lsls	r3, r3, #2
 800e150:	4618      	mov	r0, r3
 800e152:	f000 ff29 	bl	800efa8 <pvPortMalloc>
 800e156:	6178      	str	r0, [r7, #20]
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d00e      	beq.n	800e17c <xTaskCreate+0x40>
 800e15e:	20b8      	movs	r0, #184	; 0xb8
 800e160:	f000 ff22 	bl	800efa8 <pvPortMalloc>
 800e164:	61f8      	str	r0, [r7, #28]
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d003      	beq.n	800e174 <xTaskCreate+0x38>
 800e16c:	69fb      	ldr	r3, [r7, #28]
 800e16e:	697a      	ldr	r2, [r7, #20]
 800e170:	631a      	str	r2, [r3, #48]	; 0x30
 800e172:	e005      	b.n	800e180 <xTaskCreate+0x44>
 800e174:	6978      	ldr	r0, [r7, #20]
 800e176:	f000 ffe7 	bl	800f148 <vPortFree>
 800e17a:	e001      	b.n	800e180 <xTaskCreate+0x44>
 800e17c:	2300      	movs	r3, #0
 800e17e:	61fb      	str	r3, [r7, #28]
 800e180:	69fb      	ldr	r3, [r7, #28]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d017      	beq.n	800e1b6 <xTaskCreate+0x7a>
 800e186:	69fb      	ldr	r3, [r7, #28]
 800e188:	2200      	movs	r2, #0
 800e18a:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 800e18e:	88fa      	ldrh	r2, [r7, #6]
 800e190:	2300      	movs	r3, #0
 800e192:	9303      	str	r3, [sp, #12]
 800e194:	69fb      	ldr	r3, [r7, #28]
 800e196:	9302      	str	r3, [sp, #8]
 800e198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19a:	9301      	str	r3, [sp, #4]
 800e19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e19e:	9300      	str	r3, [sp, #0]
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	68b9      	ldr	r1, [r7, #8]
 800e1a4:	68f8      	ldr	r0, [r7, #12]
 800e1a6:	f000 f80f 	bl	800e1c8 <prvInitialiseNewTask>
 800e1aa:	69f8      	ldr	r0, [r7, #28]
 800e1ac:	f000 f8b2 	bl	800e314 <prvAddNewTaskToReadyList>
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	61bb      	str	r3, [r7, #24]
 800e1b4:	e002      	b.n	800e1bc <xTaskCreate+0x80>
 800e1b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e1ba:	61bb      	str	r3, [r7, #24]
 800e1bc:	69bb      	ldr	r3, [r7, #24]
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3720      	adds	r7, #32
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
	...

0800e1c8 <prvInitialiseNewTask>:
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b088      	sub	sp, #32
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	60f8      	str	r0, [r7, #12]
 800e1d0:	60b9      	str	r1, [r7, #8]
 800e1d2:	607a      	str	r2, [r7, #4]
 800e1d4:	603b      	str	r3, [r7, #0]
 800e1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	461a      	mov	r2, r3
 800e1e0:	21a5      	movs	r1, #165	; 0xa5
 800e1e2:	f001 ffce 	bl	8010182 <memset>
 800e1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e1f0:	3b01      	subs	r3, #1
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	4413      	add	r3, r2
 800e1f6:	61bb      	str	r3, [r7, #24]
 800e1f8:	69bb      	ldr	r3, [r7, #24]
 800e1fa:	f023 0307 	bic.w	r3, r3, #7
 800e1fe:	61bb      	str	r3, [r7, #24]
 800e200:	69bb      	ldr	r3, [r7, #24]
 800e202:	f003 0307 	and.w	r3, r3, #7
 800e206:	2b00      	cmp	r3, #0
 800e208:	d00a      	beq.n	800e220 <prvInitialiseNewTask+0x58>
 800e20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e20e:	f383 8811 	msr	BASEPRI, r3
 800e212:	f3bf 8f6f 	isb	sy
 800e216:	f3bf 8f4f 	dsb	sy
 800e21a:	617b      	str	r3, [r7, #20]
 800e21c:	bf00      	nop
 800e21e:	e7fe      	b.n	800e21e <prvInitialiseNewTask+0x56>
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d01f      	beq.n	800e266 <prvInitialiseNewTask+0x9e>
 800e226:	2300      	movs	r3, #0
 800e228:	61fb      	str	r3, [r7, #28]
 800e22a:	e012      	b.n	800e252 <prvInitialiseNewTask+0x8a>
 800e22c:	68ba      	ldr	r2, [r7, #8]
 800e22e:	69fb      	ldr	r3, [r7, #28]
 800e230:	4413      	add	r3, r2
 800e232:	7819      	ldrb	r1, [r3, #0]
 800e234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e236:	69fb      	ldr	r3, [r7, #28]
 800e238:	4413      	add	r3, r2
 800e23a:	3334      	adds	r3, #52	; 0x34
 800e23c:	460a      	mov	r2, r1
 800e23e:	701a      	strb	r2, [r3, #0]
 800e240:	68ba      	ldr	r2, [r7, #8]
 800e242:	69fb      	ldr	r3, [r7, #28]
 800e244:	4413      	add	r3, r2
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d006      	beq.n	800e25a <prvInitialiseNewTask+0x92>
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	3301      	adds	r3, #1
 800e250:	61fb      	str	r3, [r7, #28]
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	2b13      	cmp	r3, #19
 800e256:	d9e9      	bls.n	800e22c <prvInitialiseNewTask+0x64>
 800e258:	e000      	b.n	800e25c <prvInitialiseNewTask+0x94>
 800e25a:	bf00      	nop
 800e25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25e:	2200      	movs	r2, #0
 800e260:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800e264:	e003      	b.n	800e26e <prvInitialiseNewTask+0xa6>
 800e266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e268:	2200      	movs	r2, #0
 800e26a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800e26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e270:	2b06      	cmp	r3, #6
 800e272:	d901      	bls.n	800e278 <prvInitialiseNewTask+0xb0>
 800e274:	2306      	movs	r3, #6
 800e276:	62bb      	str	r3, [r7, #40]	; 0x28
 800e278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e27a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e27c:	62da      	str	r2, [r3, #44]	; 0x2c
 800e27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e282:	649a      	str	r2, [r3, #72]	; 0x48
 800e284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e286:	2200      	movs	r2, #0
 800e288:	64da      	str	r2, [r3, #76]	; 0x4c
 800e28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e28c:	3304      	adds	r3, #4
 800e28e:	4618      	mov	r0, r3
 800e290:	f7ff fe63 	bl	800df5a <vListInitialiseItem>
 800e294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e296:	3318      	adds	r3, #24
 800e298:	4618      	mov	r0, r3
 800e29a:	f7ff fe5e 	bl	800df5a <vListInitialiseItem>
 800e29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2a2:	611a      	str	r2, [r3, #16]
 800e2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a6:	f1c3 0207 	rsb	r2, r3, #7
 800e2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ac:	619a      	str	r2, [r3, #24]
 800e2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2b2:	625a      	str	r2, [r3, #36]	; 0x24
 800e2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800e2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2be:	2200      	movs	r2, #0
 800e2c0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 800e2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c6:	3350      	adds	r3, #80	; 0x50
 800e2c8:	2260      	movs	r2, #96	; 0x60
 800e2ca:	2100      	movs	r1, #0
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f001 ff58 	bl	8010182 <memset>
 800e2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d4:	4a0c      	ldr	r2, [pc, #48]	; (800e308 <prvInitialiseNewTask+0x140>)
 800e2d6:	655a      	str	r2, [r3, #84]	; 0x54
 800e2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2da:	4a0c      	ldr	r2, [pc, #48]	; (800e30c <prvInitialiseNewTask+0x144>)
 800e2dc:	659a      	str	r2, [r3, #88]	; 0x58
 800e2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e0:	4a0b      	ldr	r2, [pc, #44]	; (800e310 <prvInitialiseNewTask+0x148>)
 800e2e2:	65da      	str	r2, [r3, #92]	; 0x5c
 800e2e4:	683a      	ldr	r2, [r7, #0]
 800e2e6:	68f9      	ldr	r1, [r7, #12]
 800e2e8:	69b8      	ldr	r0, [r7, #24]
 800e2ea:	f000 fc4f 	bl	800eb8c <pxPortInitialiseStack>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f2:	601a      	str	r2, [r3, #0]
 800e2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d002      	beq.n	800e300 <prvInitialiseNewTask+0x138>
 800e2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2fe:	601a      	str	r2, [r3, #0]
 800e300:	bf00      	nop
 800e302:	3720      	adds	r7, #32
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}
 800e308:	0801484c 	.word	0x0801484c
 800e30c:	0801486c 	.word	0x0801486c
 800e310:	0801482c 	.word	0x0801482c

0800e314 <prvAddNewTaskToReadyList>:
 800e314:	b580      	push	{r7, lr}
 800e316:	b082      	sub	sp, #8
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	f000 fd62 	bl	800ede4 <vPortEnterCritical>
 800e320:	4b2a      	ldr	r3, [pc, #168]	; (800e3cc <prvAddNewTaskToReadyList+0xb8>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	3301      	adds	r3, #1
 800e326:	4a29      	ldr	r2, [pc, #164]	; (800e3cc <prvAddNewTaskToReadyList+0xb8>)
 800e328:	6013      	str	r3, [r2, #0]
 800e32a:	4b29      	ldr	r3, [pc, #164]	; (800e3d0 <prvAddNewTaskToReadyList+0xbc>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d109      	bne.n	800e346 <prvAddNewTaskToReadyList+0x32>
 800e332:	4a27      	ldr	r2, [pc, #156]	; (800e3d0 <prvAddNewTaskToReadyList+0xbc>)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6013      	str	r3, [r2, #0]
 800e338:	4b24      	ldr	r3, [pc, #144]	; (800e3cc <prvAddNewTaskToReadyList+0xb8>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d110      	bne.n	800e362 <prvAddNewTaskToReadyList+0x4e>
 800e340:	f000 fafc 	bl	800e93c <prvInitialiseTaskLists>
 800e344:	e00d      	b.n	800e362 <prvAddNewTaskToReadyList+0x4e>
 800e346:	4b23      	ldr	r3, [pc, #140]	; (800e3d4 <prvAddNewTaskToReadyList+0xc0>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d109      	bne.n	800e362 <prvAddNewTaskToReadyList+0x4e>
 800e34e:	4b20      	ldr	r3, [pc, #128]	; (800e3d0 <prvAddNewTaskToReadyList+0xbc>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e358:	429a      	cmp	r2, r3
 800e35a:	d802      	bhi.n	800e362 <prvAddNewTaskToReadyList+0x4e>
 800e35c:	4a1c      	ldr	r2, [pc, #112]	; (800e3d0 <prvAddNewTaskToReadyList+0xbc>)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6013      	str	r3, [r2, #0]
 800e362:	4b1d      	ldr	r3, [pc, #116]	; (800e3d8 <prvAddNewTaskToReadyList+0xc4>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	3301      	adds	r3, #1
 800e368:	4a1b      	ldr	r2, [pc, #108]	; (800e3d8 <prvAddNewTaskToReadyList+0xc4>)
 800e36a:	6013      	str	r3, [r2, #0]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e370:	2201      	movs	r2, #1
 800e372:	409a      	lsls	r2, r3
 800e374:	4b19      	ldr	r3, [pc, #100]	; (800e3dc <prvAddNewTaskToReadyList+0xc8>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	4313      	orrs	r3, r2
 800e37a:	4a18      	ldr	r2, [pc, #96]	; (800e3dc <prvAddNewTaskToReadyList+0xc8>)
 800e37c:	6013      	str	r3, [r2, #0]
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e382:	4613      	mov	r3, r2
 800e384:	009b      	lsls	r3, r3, #2
 800e386:	4413      	add	r3, r2
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	4a15      	ldr	r2, [pc, #84]	; (800e3e0 <prvAddNewTaskToReadyList+0xcc>)
 800e38c:	441a      	add	r2, r3
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	3304      	adds	r3, #4
 800e392:	4619      	mov	r1, r3
 800e394:	4610      	mov	r0, r2
 800e396:	f7ff fded 	bl	800df74 <vListInsertEnd>
 800e39a:	f000 fd53 	bl	800ee44 <vPortExitCritical>
 800e39e:	4b0d      	ldr	r3, [pc, #52]	; (800e3d4 <prvAddNewTaskToReadyList+0xc0>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d00e      	beq.n	800e3c4 <prvAddNewTaskToReadyList+0xb0>
 800e3a6:	4b0a      	ldr	r3, [pc, #40]	; (800e3d0 <prvAddNewTaskToReadyList+0xbc>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	d207      	bcs.n	800e3c4 <prvAddNewTaskToReadyList+0xb0>
 800e3b4:	4b0b      	ldr	r3, [pc, #44]	; (800e3e4 <prvAddNewTaskToReadyList+0xd0>)
 800e3b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3ba:	601a      	str	r2, [r3, #0]
 800e3bc:	f3bf 8f4f 	dsb	sy
 800e3c0:	f3bf 8f6f 	isb	sy
 800e3c4:	bf00      	nop
 800e3c6:	3708      	adds	r7, #8
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	20000e1c 	.word	0x20000e1c
 800e3d0:	20000d1c 	.word	0x20000d1c
 800e3d4:	20000e28 	.word	0x20000e28
 800e3d8:	20000e38 	.word	0x20000e38
 800e3dc:	20000e24 	.word	0x20000e24
 800e3e0:	20000d20 	.word	0x20000d20
 800e3e4:	e000ed04 	.word	0xe000ed04

0800e3e8 <vTaskDelay>:
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b084      	sub	sp, #16
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	60fb      	str	r3, [r7, #12]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d017      	beq.n	800e42a <vTaskDelay+0x42>
 800e3fa:	4b13      	ldr	r3, [pc, #76]	; (800e448 <vTaskDelay+0x60>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d00a      	beq.n	800e418 <vTaskDelay+0x30>
 800e402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e406:	f383 8811 	msr	BASEPRI, r3
 800e40a:	f3bf 8f6f 	isb	sy
 800e40e:	f3bf 8f4f 	dsb	sy
 800e412:	60bb      	str	r3, [r7, #8]
 800e414:	bf00      	nop
 800e416:	e7fe      	b.n	800e416 <vTaskDelay+0x2e>
 800e418:	f000 f884 	bl	800e524 <vTaskSuspendAll>
 800e41c:	2100      	movs	r1, #0
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 fb4e 	bl	800eac0 <prvAddCurrentTaskToDelayedList>
 800e424:	f000 f88c 	bl	800e540 <xTaskResumeAll>
 800e428:	60f8      	str	r0, [r7, #12]
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d107      	bne.n	800e440 <vTaskDelay+0x58>
 800e430:	4b06      	ldr	r3, [pc, #24]	; (800e44c <vTaskDelay+0x64>)
 800e432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e436:	601a      	str	r2, [r3, #0]
 800e438:	f3bf 8f4f 	dsb	sy
 800e43c:	f3bf 8f6f 	isb	sy
 800e440:	bf00      	nop
 800e442:	3710      	adds	r7, #16
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}
 800e448:	20000e44 	.word	0x20000e44
 800e44c:	e000ed04 	.word	0xe000ed04

0800e450 <vTaskStartScheduler>:
 800e450:	b580      	push	{r7, lr}
 800e452:	b08a      	sub	sp, #40	; 0x28
 800e454:	af04      	add	r7, sp, #16
 800e456:	2300      	movs	r3, #0
 800e458:	60bb      	str	r3, [r7, #8]
 800e45a:	2300      	movs	r3, #0
 800e45c:	607b      	str	r3, [r7, #4]
 800e45e:	463a      	mov	r2, r7
 800e460:	1d39      	adds	r1, r7, #4
 800e462:	f107 0308 	add.w	r3, r7, #8
 800e466:	4618      	mov	r0, r3
 800e468:	f7f2 ff4e 	bl	8001308 <vApplicationGetIdleTaskMemory>
 800e46c:	6839      	ldr	r1, [r7, #0]
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	68ba      	ldr	r2, [r7, #8]
 800e472:	9202      	str	r2, [sp, #8]
 800e474:	9301      	str	r3, [sp, #4]
 800e476:	2300      	movs	r3, #0
 800e478:	9300      	str	r3, [sp, #0]
 800e47a:	2300      	movs	r3, #0
 800e47c:	460a      	mov	r2, r1
 800e47e:	4921      	ldr	r1, [pc, #132]	; (800e504 <vTaskStartScheduler+0xb4>)
 800e480:	4821      	ldr	r0, [pc, #132]	; (800e508 <vTaskStartScheduler+0xb8>)
 800e482:	f7ff fdfe 	bl	800e082 <xTaskCreateStatic>
 800e486:	4603      	mov	r3, r0
 800e488:	4a20      	ldr	r2, [pc, #128]	; (800e50c <vTaskStartScheduler+0xbc>)
 800e48a:	6013      	str	r3, [r2, #0]
 800e48c:	4b1f      	ldr	r3, [pc, #124]	; (800e50c <vTaskStartScheduler+0xbc>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d002      	beq.n	800e49a <vTaskStartScheduler+0x4a>
 800e494:	2301      	movs	r3, #1
 800e496:	617b      	str	r3, [r7, #20]
 800e498:	e001      	b.n	800e49e <vTaskStartScheduler+0x4e>
 800e49a:	2300      	movs	r3, #0
 800e49c:	617b      	str	r3, [r7, #20]
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d11b      	bne.n	800e4dc <vTaskStartScheduler+0x8c>
 800e4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a8:	f383 8811 	msr	BASEPRI, r3
 800e4ac:	f3bf 8f6f 	isb	sy
 800e4b0:	f3bf 8f4f 	dsb	sy
 800e4b4:	613b      	str	r3, [r7, #16]
 800e4b6:	bf00      	nop
 800e4b8:	4b15      	ldr	r3, [pc, #84]	; (800e510 <vTaskStartScheduler+0xc0>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	3350      	adds	r3, #80	; 0x50
 800e4be:	4a15      	ldr	r2, [pc, #84]	; (800e514 <vTaskStartScheduler+0xc4>)
 800e4c0:	6013      	str	r3, [r2, #0]
 800e4c2:	4b15      	ldr	r3, [pc, #84]	; (800e518 <vTaskStartScheduler+0xc8>)
 800e4c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e4c8:	601a      	str	r2, [r3, #0]
 800e4ca:	4b14      	ldr	r3, [pc, #80]	; (800e51c <vTaskStartScheduler+0xcc>)
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	601a      	str	r2, [r3, #0]
 800e4d0:	4b13      	ldr	r3, [pc, #76]	; (800e520 <vTaskStartScheduler+0xd0>)
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	601a      	str	r2, [r3, #0]
 800e4d6:	f000 fbe3 	bl	800eca0 <xPortStartScheduler>
 800e4da:	e00e      	b.n	800e4fa <vTaskStartScheduler+0xaa>
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4e2:	d10a      	bne.n	800e4fa <vTaskStartScheduler+0xaa>
 800e4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e8:	f383 8811 	msr	BASEPRI, r3
 800e4ec:	f3bf 8f6f 	isb	sy
 800e4f0:	f3bf 8f4f 	dsb	sy
 800e4f4:	60fb      	str	r3, [r7, #12]
 800e4f6:	bf00      	nop
 800e4f8:	e7fe      	b.n	800e4f8 <vTaskStartScheduler+0xa8>
 800e4fa:	bf00      	nop
 800e4fc:	3718      	adds	r7, #24
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
 800e502:	bf00      	nop
 800e504:	080132ec 	.word	0x080132ec
 800e508:	0800e909 	.word	0x0800e909
 800e50c:	20000e40 	.word	0x20000e40
 800e510:	20000d1c 	.word	0x20000d1c
 800e514:	20000114 	.word	0x20000114
 800e518:	20000e3c 	.word	0x20000e3c
 800e51c:	20000e28 	.word	0x20000e28
 800e520:	20000e20 	.word	0x20000e20

0800e524 <vTaskSuspendAll>:
 800e524:	b480      	push	{r7}
 800e526:	af00      	add	r7, sp, #0
 800e528:	4b04      	ldr	r3, [pc, #16]	; (800e53c <vTaskSuspendAll+0x18>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	3301      	adds	r3, #1
 800e52e:	4a03      	ldr	r2, [pc, #12]	; (800e53c <vTaskSuspendAll+0x18>)
 800e530:	6013      	str	r3, [r2, #0]
 800e532:	bf00      	nop
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr
 800e53c:	20000e44 	.word	0x20000e44

0800e540 <xTaskResumeAll>:
 800e540:	b580      	push	{r7, lr}
 800e542:	b084      	sub	sp, #16
 800e544:	af00      	add	r7, sp, #0
 800e546:	2300      	movs	r3, #0
 800e548:	60fb      	str	r3, [r7, #12]
 800e54a:	2300      	movs	r3, #0
 800e54c:	60bb      	str	r3, [r7, #8]
 800e54e:	4b41      	ldr	r3, [pc, #260]	; (800e654 <xTaskResumeAll+0x114>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d10a      	bne.n	800e56c <xTaskResumeAll+0x2c>
 800e556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55a:	f383 8811 	msr	BASEPRI, r3
 800e55e:	f3bf 8f6f 	isb	sy
 800e562:	f3bf 8f4f 	dsb	sy
 800e566:	603b      	str	r3, [r7, #0]
 800e568:	bf00      	nop
 800e56a:	e7fe      	b.n	800e56a <xTaskResumeAll+0x2a>
 800e56c:	f000 fc3a 	bl	800ede4 <vPortEnterCritical>
 800e570:	4b38      	ldr	r3, [pc, #224]	; (800e654 <xTaskResumeAll+0x114>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	3b01      	subs	r3, #1
 800e576:	4a37      	ldr	r2, [pc, #220]	; (800e654 <xTaskResumeAll+0x114>)
 800e578:	6013      	str	r3, [r2, #0]
 800e57a:	4b36      	ldr	r3, [pc, #216]	; (800e654 <xTaskResumeAll+0x114>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d161      	bne.n	800e646 <xTaskResumeAll+0x106>
 800e582:	4b35      	ldr	r3, [pc, #212]	; (800e658 <xTaskResumeAll+0x118>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d05d      	beq.n	800e646 <xTaskResumeAll+0x106>
 800e58a:	e02e      	b.n	800e5ea <xTaskResumeAll+0xaa>
 800e58c:	4b33      	ldr	r3, [pc, #204]	; (800e65c <xTaskResumeAll+0x11c>)
 800e58e:	68db      	ldr	r3, [r3, #12]
 800e590:	68db      	ldr	r3, [r3, #12]
 800e592:	60fb      	str	r3, [r7, #12]
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	3318      	adds	r3, #24
 800e598:	4618      	mov	r0, r3
 800e59a:	f7ff fd48 	bl	800e02e <uxListRemove>
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	3304      	adds	r3, #4
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f7ff fd43 	bl	800e02e <uxListRemove>
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	409a      	lsls	r2, r3
 800e5b0:	4b2b      	ldr	r3, [pc, #172]	; (800e660 <xTaskResumeAll+0x120>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	4313      	orrs	r3, r2
 800e5b6:	4a2a      	ldr	r2, [pc, #168]	; (800e660 <xTaskResumeAll+0x120>)
 800e5b8:	6013      	str	r3, [r2, #0]
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5be:	4613      	mov	r3, r2
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	4413      	add	r3, r2
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	4a27      	ldr	r2, [pc, #156]	; (800e664 <xTaskResumeAll+0x124>)
 800e5c8:	441a      	add	r2, r3
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	3304      	adds	r3, #4
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	4610      	mov	r0, r2
 800e5d2:	f7ff fccf 	bl	800df74 <vListInsertEnd>
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5da:	4b23      	ldr	r3, [pc, #140]	; (800e668 <xTaskResumeAll+0x128>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d302      	bcc.n	800e5ea <xTaskResumeAll+0xaa>
 800e5e4:	4b21      	ldr	r3, [pc, #132]	; (800e66c <xTaskResumeAll+0x12c>)
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	601a      	str	r2, [r3, #0]
 800e5ea:	4b1c      	ldr	r3, [pc, #112]	; (800e65c <xTaskResumeAll+0x11c>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d1cc      	bne.n	800e58c <xTaskResumeAll+0x4c>
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d001      	beq.n	800e5fc <xTaskResumeAll+0xbc>
 800e5f8:	f000 fa42 	bl	800ea80 <prvResetNextTaskUnblockTime>
 800e5fc:	4b1c      	ldr	r3, [pc, #112]	; (800e670 <xTaskResumeAll+0x130>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	607b      	str	r3, [r7, #4]
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d010      	beq.n	800e62a <xTaskResumeAll+0xea>
 800e608:	f000 f836 	bl	800e678 <xTaskIncrementTick>
 800e60c:	4603      	mov	r3, r0
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d002      	beq.n	800e618 <xTaskResumeAll+0xd8>
 800e612:	4b16      	ldr	r3, [pc, #88]	; (800e66c <xTaskResumeAll+0x12c>)
 800e614:	2201      	movs	r2, #1
 800e616:	601a      	str	r2, [r3, #0]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	3b01      	subs	r3, #1
 800e61c:	607b      	str	r3, [r7, #4]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d1f1      	bne.n	800e608 <xTaskResumeAll+0xc8>
 800e624:	4b12      	ldr	r3, [pc, #72]	; (800e670 <xTaskResumeAll+0x130>)
 800e626:	2200      	movs	r2, #0
 800e628:	601a      	str	r2, [r3, #0]
 800e62a:	4b10      	ldr	r3, [pc, #64]	; (800e66c <xTaskResumeAll+0x12c>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d009      	beq.n	800e646 <xTaskResumeAll+0x106>
 800e632:	2301      	movs	r3, #1
 800e634:	60bb      	str	r3, [r7, #8]
 800e636:	4b0f      	ldr	r3, [pc, #60]	; (800e674 <xTaskResumeAll+0x134>)
 800e638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e63c:	601a      	str	r2, [r3, #0]
 800e63e:	f3bf 8f4f 	dsb	sy
 800e642:	f3bf 8f6f 	isb	sy
 800e646:	f000 fbfd 	bl	800ee44 <vPortExitCritical>
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	4618      	mov	r0, r3
 800e64e:	3710      	adds	r7, #16
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}
 800e654:	20000e44 	.word	0x20000e44
 800e658:	20000e1c 	.word	0x20000e1c
 800e65c:	20000ddc 	.word	0x20000ddc
 800e660:	20000e24 	.word	0x20000e24
 800e664:	20000d20 	.word	0x20000d20
 800e668:	20000d1c 	.word	0x20000d1c
 800e66c:	20000e30 	.word	0x20000e30
 800e670:	20000e2c 	.word	0x20000e2c
 800e674:	e000ed04 	.word	0xe000ed04

0800e678 <xTaskIncrementTick>:
 800e678:	b580      	push	{r7, lr}
 800e67a:	b086      	sub	sp, #24
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	2300      	movs	r3, #0
 800e680:	617b      	str	r3, [r7, #20]
 800e682:	4b52      	ldr	r3, [pc, #328]	; (800e7cc <xTaskIncrementTick+0x154>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2b00      	cmp	r3, #0
 800e688:	f040 8094 	bne.w	800e7b4 <xTaskIncrementTick+0x13c>
 800e68c:	4b50      	ldr	r3, [pc, #320]	; (800e7d0 <xTaskIncrementTick+0x158>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	3301      	adds	r3, #1
 800e692:	613b      	str	r3, [r7, #16]
 800e694:	4a4e      	ldr	r2, [pc, #312]	; (800e7d0 <xTaskIncrementTick+0x158>)
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	6013      	str	r3, [r2, #0]
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d120      	bne.n	800e6e2 <xTaskIncrementTick+0x6a>
 800e6a0:	4b4c      	ldr	r3, [pc, #304]	; (800e7d4 <xTaskIncrementTick+0x15c>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d00a      	beq.n	800e6c0 <xTaskIncrementTick+0x48>
 800e6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ae:	f383 8811 	msr	BASEPRI, r3
 800e6b2:	f3bf 8f6f 	isb	sy
 800e6b6:	f3bf 8f4f 	dsb	sy
 800e6ba:	603b      	str	r3, [r7, #0]
 800e6bc:	bf00      	nop
 800e6be:	e7fe      	b.n	800e6be <xTaskIncrementTick+0x46>
 800e6c0:	4b44      	ldr	r3, [pc, #272]	; (800e7d4 <xTaskIncrementTick+0x15c>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	60fb      	str	r3, [r7, #12]
 800e6c6:	4b44      	ldr	r3, [pc, #272]	; (800e7d8 <xTaskIncrementTick+0x160>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	4a42      	ldr	r2, [pc, #264]	; (800e7d4 <xTaskIncrementTick+0x15c>)
 800e6cc:	6013      	str	r3, [r2, #0]
 800e6ce:	4a42      	ldr	r2, [pc, #264]	; (800e7d8 <xTaskIncrementTick+0x160>)
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	6013      	str	r3, [r2, #0]
 800e6d4:	4b41      	ldr	r3, [pc, #260]	; (800e7dc <xTaskIncrementTick+0x164>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	3301      	adds	r3, #1
 800e6da:	4a40      	ldr	r2, [pc, #256]	; (800e7dc <xTaskIncrementTick+0x164>)
 800e6dc:	6013      	str	r3, [r2, #0]
 800e6de:	f000 f9cf 	bl	800ea80 <prvResetNextTaskUnblockTime>
 800e6e2:	4b3f      	ldr	r3, [pc, #252]	; (800e7e0 <xTaskIncrementTick+0x168>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	693a      	ldr	r2, [r7, #16]
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d348      	bcc.n	800e77e <xTaskIncrementTick+0x106>
 800e6ec:	4b39      	ldr	r3, [pc, #228]	; (800e7d4 <xTaskIncrementTick+0x15c>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d104      	bne.n	800e700 <xTaskIncrementTick+0x88>
 800e6f6:	4b3a      	ldr	r3, [pc, #232]	; (800e7e0 <xTaskIncrementTick+0x168>)
 800e6f8:	f04f 32ff 	mov.w	r2, #4294967295
 800e6fc:	601a      	str	r2, [r3, #0]
 800e6fe:	e03e      	b.n	800e77e <xTaskIncrementTick+0x106>
 800e700:	4b34      	ldr	r3, [pc, #208]	; (800e7d4 <xTaskIncrementTick+0x15c>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	68db      	ldr	r3, [r3, #12]
 800e706:	68db      	ldr	r3, [r3, #12]
 800e708:	60bb      	str	r3, [r7, #8]
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	607b      	str	r3, [r7, #4]
 800e710:	693a      	ldr	r2, [r7, #16]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	429a      	cmp	r2, r3
 800e716:	d203      	bcs.n	800e720 <xTaskIncrementTick+0xa8>
 800e718:	4a31      	ldr	r2, [pc, #196]	; (800e7e0 <xTaskIncrementTick+0x168>)
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6013      	str	r3, [r2, #0]
 800e71e:	e02e      	b.n	800e77e <xTaskIncrementTick+0x106>
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	3304      	adds	r3, #4
 800e724:	4618      	mov	r0, r3
 800e726:	f7ff fc82 	bl	800e02e <uxListRemove>
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d004      	beq.n	800e73c <xTaskIncrementTick+0xc4>
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	3318      	adds	r3, #24
 800e736:	4618      	mov	r0, r3
 800e738:	f7ff fc79 	bl	800e02e <uxListRemove>
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e740:	2201      	movs	r2, #1
 800e742:	409a      	lsls	r2, r3
 800e744:	4b27      	ldr	r3, [pc, #156]	; (800e7e4 <xTaskIncrementTick+0x16c>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4313      	orrs	r3, r2
 800e74a:	4a26      	ldr	r2, [pc, #152]	; (800e7e4 <xTaskIncrementTick+0x16c>)
 800e74c:	6013      	str	r3, [r2, #0]
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e752:	4613      	mov	r3, r2
 800e754:	009b      	lsls	r3, r3, #2
 800e756:	4413      	add	r3, r2
 800e758:	009b      	lsls	r3, r3, #2
 800e75a:	4a23      	ldr	r2, [pc, #140]	; (800e7e8 <xTaskIncrementTick+0x170>)
 800e75c:	441a      	add	r2, r3
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	3304      	adds	r3, #4
 800e762:	4619      	mov	r1, r3
 800e764:	4610      	mov	r0, r2
 800e766:	f7ff fc05 	bl	800df74 <vListInsertEnd>
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e76e:	4b1f      	ldr	r3, [pc, #124]	; (800e7ec <xTaskIncrementTick+0x174>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e774:	429a      	cmp	r2, r3
 800e776:	d3b9      	bcc.n	800e6ec <xTaskIncrementTick+0x74>
 800e778:	2301      	movs	r3, #1
 800e77a:	617b      	str	r3, [r7, #20]
 800e77c:	e7b6      	b.n	800e6ec <xTaskIncrementTick+0x74>
 800e77e:	4b1b      	ldr	r3, [pc, #108]	; (800e7ec <xTaskIncrementTick+0x174>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e784:	4918      	ldr	r1, [pc, #96]	; (800e7e8 <xTaskIncrementTick+0x170>)
 800e786:	4613      	mov	r3, r2
 800e788:	009b      	lsls	r3, r3, #2
 800e78a:	4413      	add	r3, r2
 800e78c:	009b      	lsls	r3, r3, #2
 800e78e:	440b      	add	r3, r1
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	2b01      	cmp	r3, #1
 800e794:	d901      	bls.n	800e79a <xTaskIncrementTick+0x122>
 800e796:	2301      	movs	r3, #1
 800e798:	617b      	str	r3, [r7, #20]
 800e79a:	4b15      	ldr	r3, [pc, #84]	; (800e7f0 <xTaskIncrementTick+0x178>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d101      	bne.n	800e7a6 <xTaskIncrementTick+0x12e>
 800e7a2:	f7f2 fd98 	bl	80012d6 <vApplicationTickHook>
 800e7a6:	4b13      	ldr	r3, [pc, #76]	; (800e7f4 <xTaskIncrementTick+0x17c>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d009      	beq.n	800e7c2 <xTaskIncrementTick+0x14a>
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	617b      	str	r3, [r7, #20]
 800e7b2:	e006      	b.n	800e7c2 <xTaskIncrementTick+0x14a>
 800e7b4:	4b0e      	ldr	r3, [pc, #56]	; (800e7f0 <xTaskIncrementTick+0x178>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	3301      	adds	r3, #1
 800e7ba:	4a0d      	ldr	r2, [pc, #52]	; (800e7f0 <xTaskIncrementTick+0x178>)
 800e7bc:	6013      	str	r3, [r2, #0]
 800e7be:	f7f2 fd8a 	bl	80012d6 <vApplicationTickHook>
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3718      	adds	r7, #24
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}
 800e7cc:	20000e44 	.word	0x20000e44
 800e7d0:	20000e20 	.word	0x20000e20
 800e7d4:	20000dd4 	.word	0x20000dd4
 800e7d8:	20000dd8 	.word	0x20000dd8
 800e7dc:	20000e34 	.word	0x20000e34
 800e7e0:	20000e3c 	.word	0x20000e3c
 800e7e4:	20000e24 	.word	0x20000e24
 800e7e8:	20000d20 	.word	0x20000d20
 800e7ec:	20000d1c 	.word	0x20000d1c
 800e7f0:	20000e2c 	.word	0x20000e2c
 800e7f4:	20000e30 	.word	0x20000e30

0800e7f8 <vTaskSwitchContext>:
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b088      	sub	sp, #32
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	4b3c      	ldr	r3, [pc, #240]	; (800e8f0 <vTaskSwitchContext+0xf8>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d003      	beq.n	800e80e <vTaskSwitchContext+0x16>
 800e806:	4b3b      	ldr	r3, [pc, #236]	; (800e8f4 <vTaskSwitchContext+0xfc>)
 800e808:	2201      	movs	r2, #1
 800e80a:	601a      	str	r2, [r3, #0]
 800e80c:	e06b      	b.n	800e8e6 <vTaskSwitchContext+0xee>
 800e80e:	4b39      	ldr	r3, [pc, #228]	; (800e8f4 <vTaskSwitchContext+0xfc>)
 800e810:	2200      	movs	r2, #0
 800e812:	601a      	str	r2, [r3, #0]
 800e814:	4b38      	ldr	r3, [pc, #224]	; (800e8f8 <vTaskSwitchContext+0x100>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e81a:	61fb      	str	r3, [r7, #28]
 800e81c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800e820:	61bb      	str	r3, [r7, #24]
 800e822:	69fb      	ldr	r3, [r7, #28]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	69ba      	ldr	r2, [r7, #24]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d111      	bne.n	800e850 <vTaskSwitchContext+0x58>
 800e82c:	69fb      	ldr	r3, [r7, #28]
 800e82e:	3304      	adds	r3, #4
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	69ba      	ldr	r2, [r7, #24]
 800e834:	429a      	cmp	r2, r3
 800e836:	d10b      	bne.n	800e850 <vTaskSwitchContext+0x58>
 800e838:	69fb      	ldr	r3, [r7, #28]
 800e83a:	3308      	adds	r3, #8
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	69ba      	ldr	r2, [r7, #24]
 800e840:	429a      	cmp	r2, r3
 800e842:	d105      	bne.n	800e850 <vTaskSwitchContext+0x58>
 800e844:	69fb      	ldr	r3, [r7, #28]
 800e846:	330c      	adds	r3, #12
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	69ba      	ldr	r2, [r7, #24]
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d008      	beq.n	800e862 <vTaskSwitchContext+0x6a>
 800e850:	4b29      	ldr	r3, [pc, #164]	; (800e8f8 <vTaskSwitchContext+0x100>)
 800e852:	681a      	ldr	r2, [r3, #0]
 800e854:	4b28      	ldr	r3, [pc, #160]	; (800e8f8 <vTaskSwitchContext+0x100>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	3334      	adds	r3, #52	; 0x34
 800e85a:	4619      	mov	r1, r3
 800e85c:	4610      	mov	r0, r2
 800e85e:	f7f2 fd41 	bl	80012e4 <vApplicationStackOverflowHook>
 800e862:	4b26      	ldr	r3, [pc, #152]	; (800e8fc <vTaskSwitchContext+0x104>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	60fb      	str	r3, [r7, #12]
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	fab3 f383 	clz	r3, r3
 800e86e:	72fb      	strb	r3, [r7, #11]
 800e870:	7afb      	ldrb	r3, [r7, #11]
 800e872:	f1c3 031f 	rsb	r3, r3, #31
 800e876:	617b      	str	r3, [r7, #20]
 800e878:	4921      	ldr	r1, [pc, #132]	; (800e900 <vTaskSwitchContext+0x108>)
 800e87a:	697a      	ldr	r2, [r7, #20]
 800e87c:	4613      	mov	r3, r2
 800e87e:	009b      	lsls	r3, r3, #2
 800e880:	4413      	add	r3, r2
 800e882:	009b      	lsls	r3, r3, #2
 800e884:	440b      	add	r3, r1
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d10a      	bne.n	800e8a2 <vTaskSwitchContext+0xaa>
 800e88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e890:	f383 8811 	msr	BASEPRI, r3
 800e894:	f3bf 8f6f 	isb	sy
 800e898:	f3bf 8f4f 	dsb	sy
 800e89c:	607b      	str	r3, [r7, #4]
 800e89e:	bf00      	nop
 800e8a0:	e7fe      	b.n	800e8a0 <vTaskSwitchContext+0xa8>
 800e8a2:	697a      	ldr	r2, [r7, #20]
 800e8a4:	4613      	mov	r3, r2
 800e8a6:	009b      	lsls	r3, r3, #2
 800e8a8:	4413      	add	r3, r2
 800e8aa:	009b      	lsls	r3, r3, #2
 800e8ac:	4a14      	ldr	r2, [pc, #80]	; (800e900 <vTaskSwitchContext+0x108>)
 800e8ae:	4413      	add	r3, r2
 800e8b0:	613b      	str	r3, [r7, #16]
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	685b      	ldr	r3, [r3, #4]
 800e8b6:	685a      	ldr	r2, [r3, #4]
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	605a      	str	r2, [r3, #4]
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	685a      	ldr	r2, [r3, #4]
 800e8c0:	693b      	ldr	r3, [r7, #16]
 800e8c2:	3308      	adds	r3, #8
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d104      	bne.n	800e8d2 <vTaskSwitchContext+0xda>
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	685b      	ldr	r3, [r3, #4]
 800e8cc:	685a      	ldr	r2, [r3, #4]
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	605a      	str	r2, [r3, #4]
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	685b      	ldr	r3, [r3, #4]
 800e8d6:	68db      	ldr	r3, [r3, #12]
 800e8d8:	4a07      	ldr	r2, [pc, #28]	; (800e8f8 <vTaskSwitchContext+0x100>)
 800e8da:	6013      	str	r3, [r2, #0]
 800e8dc:	4b06      	ldr	r3, [pc, #24]	; (800e8f8 <vTaskSwitchContext+0x100>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	3350      	adds	r3, #80	; 0x50
 800e8e2:	4a08      	ldr	r2, [pc, #32]	; (800e904 <vTaskSwitchContext+0x10c>)
 800e8e4:	6013      	str	r3, [r2, #0]
 800e8e6:	bf00      	nop
 800e8e8:	3720      	adds	r7, #32
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
 800e8ee:	bf00      	nop
 800e8f0:	20000e44 	.word	0x20000e44
 800e8f4:	20000e30 	.word	0x20000e30
 800e8f8:	20000d1c 	.word	0x20000d1c
 800e8fc:	20000e24 	.word	0x20000e24
 800e900:	20000d20 	.word	0x20000d20
 800e904:	20000114 	.word	0x20000114

0800e908 <prvIdleTask>:
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	f000 f854 	bl	800e9bc <prvCheckTasksWaitingTermination>
 800e914:	4b07      	ldr	r3, [pc, #28]	; (800e934 <prvIdleTask+0x2c>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	2b01      	cmp	r3, #1
 800e91a:	d907      	bls.n	800e92c <prvIdleTask+0x24>
 800e91c:	4b06      	ldr	r3, [pc, #24]	; (800e938 <prvIdleTask+0x30>)
 800e91e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e922:	601a      	str	r2, [r3, #0]
 800e924:	f3bf 8f4f 	dsb	sy
 800e928:	f3bf 8f6f 	isb	sy
 800e92c:	f7f2 fccc 	bl	80012c8 <vApplicationIdleHook>
 800e930:	e7ee      	b.n	800e910 <prvIdleTask+0x8>
 800e932:	bf00      	nop
 800e934:	20000d20 	.word	0x20000d20
 800e938:	e000ed04 	.word	0xe000ed04

0800e93c <prvInitialiseTaskLists>:
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b082      	sub	sp, #8
 800e940:	af00      	add	r7, sp, #0
 800e942:	2300      	movs	r3, #0
 800e944:	607b      	str	r3, [r7, #4]
 800e946:	e00c      	b.n	800e962 <prvInitialiseTaskLists+0x26>
 800e948:	687a      	ldr	r2, [r7, #4]
 800e94a:	4613      	mov	r3, r2
 800e94c:	009b      	lsls	r3, r3, #2
 800e94e:	4413      	add	r3, r2
 800e950:	009b      	lsls	r3, r3, #2
 800e952:	4a12      	ldr	r2, [pc, #72]	; (800e99c <prvInitialiseTaskLists+0x60>)
 800e954:	4413      	add	r3, r2
 800e956:	4618      	mov	r0, r3
 800e958:	f7ff fadf 	bl	800df1a <vListInitialise>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	3301      	adds	r3, #1
 800e960:	607b      	str	r3, [r7, #4]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2b06      	cmp	r3, #6
 800e966:	d9ef      	bls.n	800e948 <prvInitialiseTaskLists+0xc>
 800e968:	480d      	ldr	r0, [pc, #52]	; (800e9a0 <prvInitialiseTaskLists+0x64>)
 800e96a:	f7ff fad6 	bl	800df1a <vListInitialise>
 800e96e:	480d      	ldr	r0, [pc, #52]	; (800e9a4 <prvInitialiseTaskLists+0x68>)
 800e970:	f7ff fad3 	bl	800df1a <vListInitialise>
 800e974:	480c      	ldr	r0, [pc, #48]	; (800e9a8 <prvInitialiseTaskLists+0x6c>)
 800e976:	f7ff fad0 	bl	800df1a <vListInitialise>
 800e97a:	480c      	ldr	r0, [pc, #48]	; (800e9ac <prvInitialiseTaskLists+0x70>)
 800e97c:	f7ff facd 	bl	800df1a <vListInitialise>
 800e980:	480b      	ldr	r0, [pc, #44]	; (800e9b0 <prvInitialiseTaskLists+0x74>)
 800e982:	f7ff faca 	bl	800df1a <vListInitialise>
 800e986:	4b0b      	ldr	r3, [pc, #44]	; (800e9b4 <prvInitialiseTaskLists+0x78>)
 800e988:	4a05      	ldr	r2, [pc, #20]	; (800e9a0 <prvInitialiseTaskLists+0x64>)
 800e98a:	601a      	str	r2, [r3, #0]
 800e98c:	4b0a      	ldr	r3, [pc, #40]	; (800e9b8 <prvInitialiseTaskLists+0x7c>)
 800e98e:	4a05      	ldr	r2, [pc, #20]	; (800e9a4 <prvInitialiseTaskLists+0x68>)
 800e990:	601a      	str	r2, [r3, #0]
 800e992:	bf00      	nop
 800e994:	3708      	adds	r7, #8
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	20000d20 	.word	0x20000d20
 800e9a0:	20000dac 	.word	0x20000dac
 800e9a4:	20000dc0 	.word	0x20000dc0
 800e9a8:	20000ddc 	.word	0x20000ddc
 800e9ac:	20000df0 	.word	0x20000df0
 800e9b0:	20000e08 	.word	0x20000e08
 800e9b4:	20000dd4 	.word	0x20000dd4
 800e9b8:	20000dd8 	.word	0x20000dd8

0800e9bc <prvCheckTasksWaitingTermination>:
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b082      	sub	sp, #8
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	e019      	b.n	800e9f8 <prvCheckTasksWaitingTermination+0x3c>
 800e9c4:	f000 fa0e 	bl	800ede4 <vPortEnterCritical>
 800e9c8:	4b10      	ldr	r3, [pc, #64]	; (800ea0c <prvCheckTasksWaitingTermination+0x50>)
 800e9ca:	68db      	ldr	r3, [r3, #12]
 800e9cc:	68db      	ldr	r3, [r3, #12]
 800e9ce:	607b      	str	r3, [r7, #4]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	3304      	adds	r3, #4
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f7ff fb2a 	bl	800e02e <uxListRemove>
 800e9da:	4b0d      	ldr	r3, [pc, #52]	; (800ea10 <prvCheckTasksWaitingTermination+0x54>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	3b01      	subs	r3, #1
 800e9e0:	4a0b      	ldr	r2, [pc, #44]	; (800ea10 <prvCheckTasksWaitingTermination+0x54>)
 800e9e2:	6013      	str	r3, [r2, #0]
 800e9e4:	4b0b      	ldr	r3, [pc, #44]	; (800ea14 <prvCheckTasksWaitingTermination+0x58>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	3b01      	subs	r3, #1
 800e9ea:	4a0a      	ldr	r2, [pc, #40]	; (800ea14 <prvCheckTasksWaitingTermination+0x58>)
 800e9ec:	6013      	str	r3, [r2, #0]
 800e9ee:	f000 fa29 	bl	800ee44 <vPortExitCritical>
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f000 f810 	bl	800ea18 <prvDeleteTCB>
 800e9f8:	4b06      	ldr	r3, [pc, #24]	; (800ea14 <prvCheckTasksWaitingTermination+0x58>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d1e1      	bne.n	800e9c4 <prvCheckTasksWaitingTermination+0x8>
 800ea00:	bf00      	nop
 800ea02:	bf00      	nop
 800ea04:	3708      	adds	r7, #8
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}
 800ea0a:	bf00      	nop
 800ea0c:	20000df0 	.word	0x20000df0
 800ea10:	20000e1c 	.word	0x20000e1c
 800ea14:	20000e04 	.word	0x20000e04

0800ea18 <prvDeleteTCB>:
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b084      	sub	sp, #16
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	3350      	adds	r3, #80	; 0x50
 800ea24:	4618      	mov	r0, r3
 800ea26:	f002 f94f 	bl	8010cc8 <_reclaim_reent>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d108      	bne.n	800ea46 <prvDeleteTCB+0x2e>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f000 fb85 	bl	800f148 <vPortFree>
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f000 fb82 	bl	800f148 <vPortFree>
 800ea44:	e018      	b.n	800ea78 <prvDeleteTCB+0x60>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800ea4c:	2b01      	cmp	r3, #1
 800ea4e:	d103      	bne.n	800ea58 <prvDeleteTCB+0x40>
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f000 fb79 	bl	800f148 <vPortFree>
 800ea56:	e00f      	b.n	800ea78 <prvDeleteTCB+0x60>
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800ea5e:	2b02      	cmp	r3, #2
 800ea60:	d00a      	beq.n	800ea78 <prvDeleteTCB+0x60>
 800ea62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea66:	f383 8811 	msr	BASEPRI, r3
 800ea6a:	f3bf 8f6f 	isb	sy
 800ea6e:	f3bf 8f4f 	dsb	sy
 800ea72:	60fb      	str	r3, [r7, #12]
 800ea74:	bf00      	nop
 800ea76:	e7fe      	b.n	800ea76 <prvDeleteTCB+0x5e>
 800ea78:	bf00      	nop
 800ea7a:	3710      	adds	r7, #16
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}

0800ea80 <prvResetNextTaskUnblockTime>:
 800ea80:	b480      	push	{r7}
 800ea82:	b083      	sub	sp, #12
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	4b0c      	ldr	r3, [pc, #48]	; (800eab8 <prvResetNextTaskUnblockTime+0x38>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d104      	bne.n	800ea9a <prvResetNextTaskUnblockTime+0x1a>
 800ea90:	4b0a      	ldr	r3, [pc, #40]	; (800eabc <prvResetNextTaskUnblockTime+0x3c>)
 800ea92:	f04f 32ff 	mov.w	r2, #4294967295
 800ea96:	601a      	str	r2, [r3, #0]
 800ea98:	e008      	b.n	800eaac <prvResetNextTaskUnblockTime+0x2c>
 800ea9a:	4b07      	ldr	r3, [pc, #28]	; (800eab8 <prvResetNextTaskUnblockTime+0x38>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	68db      	ldr	r3, [r3, #12]
 800eaa2:	607b      	str	r3, [r7, #4]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	685b      	ldr	r3, [r3, #4]
 800eaa8:	4a04      	ldr	r2, [pc, #16]	; (800eabc <prvResetNextTaskUnblockTime+0x3c>)
 800eaaa:	6013      	str	r3, [r2, #0]
 800eaac:	bf00      	nop
 800eaae:	370c      	adds	r7, #12
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr
 800eab8:	20000dd4 	.word	0x20000dd4
 800eabc:	20000e3c 	.word	0x20000e3c

0800eac0 <prvAddCurrentTaskToDelayedList>:
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b084      	sub	sp, #16
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
 800eac8:	6039      	str	r1, [r7, #0]
 800eaca:	4b29      	ldr	r3, [pc, #164]	; (800eb70 <prvAddCurrentTaskToDelayedList+0xb0>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	60fb      	str	r3, [r7, #12]
 800ead0:	4b28      	ldr	r3, [pc, #160]	; (800eb74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	3304      	adds	r3, #4
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7ff faa9 	bl	800e02e <uxListRemove>
 800eadc:	4603      	mov	r3, r0
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d10b      	bne.n	800eafa <prvAddCurrentTaskToDelayedList+0x3a>
 800eae2:	4b24      	ldr	r3, [pc, #144]	; (800eb74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eae8:	2201      	movs	r2, #1
 800eaea:	fa02 f303 	lsl.w	r3, r2, r3
 800eaee:	43da      	mvns	r2, r3
 800eaf0:	4b21      	ldr	r3, [pc, #132]	; (800eb78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	4013      	ands	r3, r2
 800eaf6:	4a20      	ldr	r2, [pc, #128]	; (800eb78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eaf8:	6013      	str	r3, [r2, #0]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb00:	d10a      	bne.n	800eb18 <prvAddCurrentTaskToDelayedList+0x58>
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d007      	beq.n	800eb18 <prvAddCurrentTaskToDelayedList+0x58>
 800eb08:	4b1a      	ldr	r3, [pc, #104]	; (800eb74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	3304      	adds	r3, #4
 800eb0e:	4619      	mov	r1, r3
 800eb10:	481a      	ldr	r0, [pc, #104]	; (800eb7c <prvAddCurrentTaskToDelayedList+0xbc>)
 800eb12:	f7ff fa2f 	bl	800df74 <vListInsertEnd>
 800eb16:	e026      	b.n	800eb66 <prvAddCurrentTaskToDelayedList+0xa6>
 800eb18:	68fa      	ldr	r2, [r7, #12]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	4413      	add	r3, r2
 800eb1e:	60bb      	str	r3, [r7, #8]
 800eb20:	4b14      	ldr	r3, [pc, #80]	; (800eb74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	68ba      	ldr	r2, [r7, #8]
 800eb26:	605a      	str	r2, [r3, #4]
 800eb28:	68ba      	ldr	r2, [r7, #8]
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d209      	bcs.n	800eb44 <prvAddCurrentTaskToDelayedList+0x84>
 800eb30:	4b13      	ldr	r3, [pc, #76]	; (800eb80 <prvAddCurrentTaskToDelayedList+0xc0>)
 800eb32:	681a      	ldr	r2, [r3, #0]
 800eb34:	4b0f      	ldr	r3, [pc, #60]	; (800eb74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	3304      	adds	r3, #4
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	4610      	mov	r0, r2
 800eb3e:	f7ff fa3d 	bl	800dfbc <vListInsert>
 800eb42:	e010      	b.n	800eb66 <prvAddCurrentTaskToDelayedList+0xa6>
 800eb44:	4b0f      	ldr	r3, [pc, #60]	; (800eb84 <prvAddCurrentTaskToDelayedList+0xc4>)
 800eb46:	681a      	ldr	r2, [r3, #0]
 800eb48:	4b0a      	ldr	r3, [pc, #40]	; (800eb74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	3304      	adds	r3, #4
 800eb4e:	4619      	mov	r1, r3
 800eb50:	4610      	mov	r0, r2
 800eb52:	f7ff fa33 	bl	800dfbc <vListInsert>
 800eb56:	4b0c      	ldr	r3, [pc, #48]	; (800eb88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	68ba      	ldr	r2, [r7, #8]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d202      	bcs.n	800eb66 <prvAddCurrentTaskToDelayedList+0xa6>
 800eb60:	4a09      	ldr	r2, [pc, #36]	; (800eb88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	6013      	str	r3, [r2, #0]
 800eb66:	bf00      	nop
 800eb68:	3710      	adds	r7, #16
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	20000e20 	.word	0x20000e20
 800eb74:	20000d1c 	.word	0x20000d1c
 800eb78:	20000e24 	.word	0x20000e24
 800eb7c:	20000e08 	.word	0x20000e08
 800eb80:	20000dd8 	.word	0x20000dd8
 800eb84:	20000dd4 	.word	0x20000dd4
 800eb88:	20000e3c 	.word	0x20000e3c

0800eb8c <pxPortInitialiseStack>:
 800eb8c:	b480      	push	{r7}
 800eb8e:	b085      	sub	sp, #20
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	60b9      	str	r1, [r7, #8]
 800eb96:	607a      	str	r2, [r7, #4]
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	3b04      	subs	r3, #4
 800eb9c:	60fb      	str	r3, [r7, #12]
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800eba4:	601a      	str	r2, [r3, #0]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	3b04      	subs	r3, #4
 800ebaa:	60fb      	str	r3, [r7, #12]
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	f023 0201 	bic.w	r2, r3, #1
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	601a      	str	r2, [r3, #0]
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	3b04      	subs	r3, #4
 800ebba:	60fb      	str	r3, [r7, #12]
 800ebbc:	4a0c      	ldr	r2, [pc, #48]	; (800ebf0 <pxPortInitialiseStack+0x64>)
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	601a      	str	r2, [r3, #0]
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	3b14      	subs	r3, #20
 800ebc6:	60fb      	str	r3, [r7, #12]
 800ebc8:	687a      	ldr	r2, [r7, #4]
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	601a      	str	r2, [r3, #0]
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	3b04      	subs	r3, #4
 800ebd2:	60fb      	str	r3, [r7, #12]
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	f06f 0202 	mvn.w	r2, #2
 800ebda:	601a      	str	r2, [r3, #0]
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	3b20      	subs	r3, #32
 800ebe0:	60fb      	str	r3, [r7, #12]
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3714      	adds	r7, #20
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr
 800ebf0:	0800ebf5 	.word	0x0800ebf5

0800ebf4 <prvTaskExitError>:
 800ebf4:	b480      	push	{r7}
 800ebf6:	b085      	sub	sp, #20
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	607b      	str	r3, [r7, #4]
 800ebfe:	4b12      	ldr	r3, [pc, #72]	; (800ec48 <prvTaskExitError+0x54>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec06:	d00a      	beq.n	800ec1e <prvTaskExitError+0x2a>
 800ec08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec0c:	f383 8811 	msr	BASEPRI, r3
 800ec10:	f3bf 8f6f 	isb	sy
 800ec14:	f3bf 8f4f 	dsb	sy
 800ec18:	60fb      	str	r3, [r7, #12]
 800ec1a:	bf00      	nop
 800ec1c:	e7fe      	b.n	800ec1c <prvTaskExitError+0x28>
 800ec1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec22:	f383 8811 	msr	BASEPRI, r3
 800ec26:	f3bf 8f6f 	isb	sy
 800ec2a:	f3bf 8f4f 	dsb	sy
 800ec2e:	60bb      	str	r3, [r7, #8]
 800ec30:	bf00      	nop
 800ec32:	bf00      	nop
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d0fc      	beq.n	800ec34 <prvTaskExitError+0x40>
 800ec3a:	bf00      	nop
 800ec3c:	bf00      	nop
 800ec3e:	3714      	adds	r7, #20
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr
 800ec48:	200000ac 	.word	0x200000ac
 800ec4c:	00000000 	.word	0x00000000

0800ec50 <SVC_Handler>:
 800ec50:	4b07      	ldr	r3, [pc, #28]	; (800ec70 <pxCurrentTCBConst2>)
 800ec52:	6819      	ldr	r1, [r3, #0]
 800ec54:	6808      	ldr	r0, [r1, #0]
 800ec56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec5a:	f380 8809 	msr	PSP, r0
 800ec5e:	f3bf 8f6f 	isb	sy
 800ec62:	f04f 0000 	mov.w	r0, #0
 800ec66:	f380 8811 	msr	BASEPRI, r0
 800ec6a:	4770      	bx	lr
 800ec6c:	f3af 8000 	nop.w

0800ec70 <pxCurrentTCBConst2>:
 800ec70:	20000d1c 	.word	0x20000d1c
 800ec74:	bf00      	nop
 800ec76:	bf00      	nop

0800ec78 <prvPortStartFirstTask>:
 800ec78:	4808      	ldr	r0, [pc, #32]	; (800ec9c <prvPortStartFirstTask+0x24>)
 800ec7a:	6800      	ldr	r0, [r0, #0]
 800ec7c:	6800      	ldr	r0, [r0, #0]
 800ec7e:	f380 8808 	msr	MSP, r0
 800ec82:	f04f 0000 	mov.w	r0, #0
 800ec86:	f380 8814 	msr	CONTROL, r0
 800ec8a:	b662      	cpsie	i
 800ec8c:	b661      	cpsie	f
 800ec8e:	f3bf 8f4f 	dsb	sy
 800ec92:	f3bf 8f6f 	isb	sy
 800ec96:	df00      	svc	0
 800ec98:	bf00      	nop
 800ec9a:	bf00      	nop
 800ec9c:	e000ed08 	.word	0xe000ed08

0800eca0 <xPortStartScheduler>:
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b086      	sub	sp, #24
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	4b46      	ldr	r3, [pc, #280]	; (800edc0 <xPortStartScheduler+0x120>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	4a46      	ldr	r2, [pc, #280]	; (800edc4 <xPortStartScheduler+0x124>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d10a      	bne.n	800ecc6 <xPortStartScheduler+0x26>
 800ecb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb4:	f383 8811 	msr	BASEPRI, r3
 800ecb8:	f3bf 8f6f 	isb	sy
 800ecbc:	f3bf 8f4f 	dsb	sy
 800ecc0:	613b      	str	r3, [r7, #16]
 800ecc2:	bf00      	nop
 800ecc4:	e7fe      	b.n	800ecc4 <xPortStartScheduler+0x24>
 800ecc6:	4b3e      	ldr	r3, [pc, #248]	; (800edc0 <xPortStartScheduler+0x120>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	4a3f      	ldr	r2, [pc, #252]	; (800edc8 <xPortStartScheduler+0x128>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d10a      	bne.n	800ece6 <xPortStartScheduler+0x46>
 800ecd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd4:	f383 8811 	msr	BASEPRI, r3
 800ecd8:	f3bf 8f6f 	isb	sy
 800ecdc:	f3bf 8f4f 	dsb	sy
 800ece0:	60fb      	str	r3, [r7, #12]
 800ece2:	bf00      	nop
 800ece4:	e7fe      	b.n	800ece4 <xPortStartScheduler+0x44>
 800ece6:	4b39      	ldr	r3, [pc, #228]	; (800edcc <xPortStartScheduler+0x12c>)
 800ece8:	617b      	str	r3, [r7, #20]
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	b2db      	uxtb	r3, r3
 800ecf0:	607b      	str	r3, [r7, #4]
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	22ff      	movs	r2, #255	; 0xff
 800ecf6:	701a      	strb	r2, [r3, #0]
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	781b      	ldrb	r3, [r3, #0]
 800ecfc:	b2db      	uxtb	r3, r3
 800ecfe:	70fb      	strb	r3, [r7, #3]
 800ed00:	78fb      	ldrb	r3, [r7, #3]
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ed08:	b2da      	uxtb	r2, r3
 800ed0a:	4b31      	ldr	r3, [pc, #196]	; (800edd0 <xPortStartScheduler+0x130>)
 800ed0c:	701a      	strb	r2, [r3, #0]
 800ed0e:	4b31      	ldr	r3, [pc, #196]	; (800edd4 <xPortStartScheduler+0x134>)
 800ed10:	2207      	movs	r2, #7
 800ed12:	601a      	str	r2, [r3, #0]
 800ed14:	e009      	b.n	800ed2a <xPortStartScheduler+0x8a>
 800ed16:	4b2f      	ldr	r3, [pc, #188]	; (800edd4 <xPortStartScheduler+0x134>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	3b01      	subs	r3, #1
 800ed1c:	4a2d      	ldr	r2, [pc, #180]	; (800edd4 <xPortStartScheduler+0x134>)
 800ed1e:	6013      	str	r3, [r2, #0]
 800ed20:	78fb      	ldrb	r3, [r7, #3]
 800ed22:	b2db      	uxtb	r3, r3
 800ed24:	005b      	lsls	r3, r3, #1
 800ed26:	b2db      	uxtb	r3, r3
 800ed28:	70fb      	strb	r3, [r7, #3]
 800ed2a:	78fb      	ldrb	r3, [r7, #3]
 800ed2c:	b2db      	uxtb	r3, r3
 800ed2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed32:	2b80      	cmp	r3, #128	; 0x80
 800ed34:	d0ef      	beq.n	800ed16 <xPortStartScheduler+0x76>
 800ed36:	4b27      	ldr	r3, [pc, #156]	; (800edd4 <xPortStartScheduler+0x134>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f1c3 0307 	rsb	r3, r3, #7
 800ed3e:	2b04      	cmp	r3, #4
 800ed40:	d00a      	beq.n	800ed58 <xPortStartScheduler+0xb8>
 800ed42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed46:	f383 8811 	msr	BASEPRI, r3
 800ed4a:	f3bf 8f6f 	isb	sy
 800ed4e:	f3bf 8f4f 	dsb	sy
 800ed52:	60bb      	str	r3, [r7, #8]
 800ed54:	bf00      	nop
 800ed56:	e7fe      	b.n	800ed56 <xPortStartScheduler+0xb6>
 800ed58:	4b1e      	ldr	r3, [pc, #120]	; (800edd4 <xPortStartScheduler+0x134>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	021b      	lsls	r3, r3, #8
 800ed5e:	4a1d      	ldr	r2, [pc, #116]	; (800edd4 <xPortStartScheduler+0x134>)
 800ed60:	6013      	str	r3, [r2, #0]
 800ed62:	4b1c      	ldr	r3, [pc, #112]	; (800edd4 <xPortStartScheduler+0x134>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ed6a:	4a1a      	ldr	r2, [pc, #104]	; (800edd4 <xPortStartScheduler+0x134>)
 800ed6c:	6013      	str	r3, [r2, #0]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	b2da      	uxtb	r2, r3
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	701a      	strb	r2, [r3, #0]
 800ed76:	4b18      	ldr	r3, [pc, #96]	; (800edd8 <xPortStartScheduler+0x138>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	4a17      	ldr	r2, [pc, #92]	; (800edd8 <xPortStartScheduler+0x138>)
 800ed7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ed80:	6013      	str	r3, [r2, #0]
 800ed82:	4b15      	ldr	r3, [pc, #84]	; (800edd8 <xPortStartScheduler+0x138>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	4a14      	ldr	r2, [pc, #80]	; (800edd8 <xPortStartScheduler+0x138>)
 800ed88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ed8c:	6013      	str	r3, [r2, #0]
 800ed8e:	f000 f8dd 	bl	800ef4c <vPortSetupTimerInterrupt>
 800ed92:	4b12      	ldr	r3, [pc, #72]	; (800eddc <xPortStartScheduler+0x13c>)
 800ed94:	2200      	movs	r2, #0
 800ed96:	601a      	str	r2, [r3, #0]
 800ed98:	f000 f8fc 	bl	800ef94 <vPortEnableVFP>
 800ed9c:	4b10      	ldr	r3, [pc, #64]	; (800ede0 <xPortStartScheduler+0x140>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	4a0f      	ldr	r2, [pc, #60]	; (800ede0 <xPortStartScheduler+0x140>)
 800eda2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800eda6:	6013      	str	r3, [r2, #0]
 800eda8:	f7ff ff66 	bl	800ec78 <prvPortStartFirstTask>
 800edac:	f7ff fd24 	bl	800e7f8 <vTaskSwitchContext>
 800edb0:	f7ff ff20 	bl	800ebf4 <prvTaskExitError>
 800edb4:	2300      	movs	r3, #0
 800edb6:	4618      	mov	r0, r3
 800edb8:	3718      	adds	r7, #24
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}
 800edbe:	bf00      	nop
 800edc0:	e000ed00 	.word	0xe000ed00
 800edc4:	410fc271 	.word	0x410fc271
 800edc8:	410fc270 	.word	0x410fc270
 800edcc:	e000e400 	.word	0xe000e400
 800edd0:	20000e48 	.word	0x20000e48
 800edd4:	20000e4c 	.word	0x20000e4c
 800edd8:	e000ed20 	.word	0xe000ed20
 800eddc:	200000ac 	.word	0x200000ac
 800ede0:	e000ef34 	.word	0xe000ef34

0800ede4 <vPortEnterCritical>:
 800ede4:	b480      	push	{r7}
 800ede6:	b083      	sub	sp, #12
 800ede8:	af00      	add	r7, sp, #0
 800edea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edee:	f383 8811 	msr	BASEPRI, r3
 800edf2:	f3bf 8f6f 	isb	sy
 800edf6:	f3bf 8f4f 	dsb	sy
 800edfa:	607b      	str	r3, [r7, #4]
 800edfc:	bf00      	nop
 800edfe:	4b0f      	ldr	r3, [pc, #60]	; (800ee3c <vPortEnterCritical+0x58>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	3301      	adds	r3, #1
 800ee04:	4a0d      	ldr	r2, [pc, #52]	; (800ee3c <vPortEnterCritical+0x58>)
 800ee06:	6013      	str	r3, [r2, #0]
 800ee08:	4b0c      	ldr	r3, [pc, #48]	; (800ee3c <vPortEnterCritical+0x58>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	d10f      	bne.n	800ee30 <vPortEnterCritical+0x4c>
 800ee10:	4b0b      	ldr	r3, [pc, #44]	; (800ee40 <vPortEnterCritical+0x5c>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	b2db      	uxtb	r3, r3
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d00a      	beq.n	800ee30 <vPortEnterCritical+0x4c>
 800ee1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee1e:	f383 8811 	msr	BASEPRI, r3
 800ee22:	f3bf 8f6f 	isb	sy
 800ee26:	f3bf 8f4f 	dsb	sy
 800ee2a:	603b      	str	r3, [r7, #0]
 800ee2c:	bf00      	nop
 800ee2e:	e7fe      	b.n	800ee2e <vPortEnterCritical+0x4a>
 800ee30:	bf00      	nop
 800ee32:	370c      	adds	r7, #12
 800ee34:	46bd      	mov	sp, r7
 800ee36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3a:	4770      	bx	lr
 800ee3c:	200000ac 	.word	0x200000ac
 800ee40:	e000ed04 	.word	0xe000ed04

0800ee44 <vPortExitCritical>:
 800ee44:	b480      	push	{r7}
 800ee46:	b083      	sub	sp, #12
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	4b12      	ldr	r3, [pc, #72]	; (800ee94 <vPortExitCritical+0x50>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d10a      	bne.n	800ee68 <vPortExitCritical+0x24>
 800ee52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee56:	f383 8811 	msr	BASEPRI, r3
 800ee5a:	f3bf 8f6f 	isb	sy
 800ee5e:	f3bf 8f4f 	dsb	sy
 800ee62:	607b      	str	r3, [r7, #4]
 800ee64:	bf00      	nop
 800ee66:	e7fe      	b.n	800ee66 <vPortExitCritical+0x22>
 800ee68:	4b0a      	ldr	r3, [pc, #40]	; (800ee94 <vPortExitCritical+0x50>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	3b01      	subs	r3, #1
 800ee6e:	4a09      	ldr	r2, [pc, #36]	; (800ee94 <vPortExitCritical+0x50>)
 800ee70:	6013      	str	r3, [r2, #0]
 800ee72:	4b08      	ldr	r3, [pc, #32]	; (800ee94 <vPortExitCritical+0x50>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d105      	bne.n	800ee86 <vPortExitCritical+0x42>
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	603b      	str	r3, [r7, #0]
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	f383 8811 	msr	BASEPRI, r3
 800ee84:	bf00      	nop
 800ee86:	bf00      	nop
 800ee88:	370c      	adds	r7, #12
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee90:	4770      	bx	lr
 800ee92:	bf00      	nop
 800ee94:	200000ac 	.word	0x200000ac
	...

0800eea0 <PendSV_Handler>:
 800eea0:	f3ef 8009 	mrs	r0, PSP
 800eea4:	f3bf 8f6f 	isb	sy
 800eea8:	4b15      	ldr	r3, [pc, #84]	; (800ef00 <pxCurrentTCBConst>)
 800eeaa:	681a      	ldr	r2, [r3, #0]
 800eeac:	f01e 0f10 	tst.w	lr, #16
 800eeb0:	bf08      	it	eq
 800eeb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eeb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeba:	6010      	str	r0, [r2, #0]
 800eebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eec4:	f380 8811 	msr	BASEPRI, r0
 800eec8:	f3bf 8f4f 	dsb	sy
 800eecc:	f3bf 8f6f 	isb	sy
 800eed0:	f7ff fc92 	bl	800e7f8 <vTaskSwitchContext>
 800eed4:	f04f 0000 	mov.w	r0, #0
 800eed8:	f380 8811 	msr	BASEPRI, r0
 800eedc:	bc09      	pop	{r0, r3}
 800eede:	6819      	ldr	r1, [r3, #0]
 800eee0:	6808      	ldr	r0, [r1, #0]
 800eee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eee6:	f01e 0f10 	tst.w	lr, #16
 800eeea:	bf08      	it	eq
 800eeec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eef0:	f380 8809 	msr	PSP, r0
 800eef4:	f3bf 8f6f 	isb	sy
 800eef8:	4770      	bx	lr
 800eefa:	bf00      	nop
 800eefc:	f3af 8000 	nop.w

0800ef00 <pxCurrentTCBConst>:
 800ef00:	20000d1c 	.word	0x20000d1c
 800ef04:	bf00      	nop
 800ef06:	bf00      	nop

0800ef08 <SysTick_Handler>:
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b082      	sub	sp, #8
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef12:	f383 8811 	msr	BASEPRI, r3
 800ef16:	f3bf 8f6f 	isb	sy
 800ef1a:	f3bf 8f4f 	dsb	sy
 800ef1e:	607b      	str	r3, [r7, #4]
 800ef20:	bf00      	nop
 800ef22:	f7ff fba9 	bl	800e678 <xTaskIncrementTick>
 800ef26:	4603      	mov	r3, r0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d003      	beq.n	800ef34 <SysTick_Handler+0x2c>
 800ef2c:	4b06      	ldr	r3, [pc, #24]	; (800ef48 <SysTick_Handler+0x40>)
 800ef2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef32:	601a      	str	r2, [r3, #0]
 800ef34:	2300      	movs	r3, #0
 800ef36:	603b      	str	r3, [r7, #0]
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	f383 8811 	msr	BASEPRI, r3
 800ef3e:	bf00      	nop
 800ef40:	bf00      	nop
 800ef42:	3708      	adds	r7, #8
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}
 800ef48:	e000ed04 	.word	0xe000ed04

0800ef4c <vPortSetupTimerInterrupt>:
 800ef4c:	b480      	push	{r7}
 800ef4e:	af00      	add	r7, sp, #0
 800ef50:	4b0b      	ldr	r3, [pc, #44]	; (800ef80 <vPortSetupTimerInterrupt+0x34>)
 800ef52:	2200      	movs	r2, #0
 800ef54:	601a      	str	r2, [r3, #0]
 800ef56:	4b0b      	ldr	r3, [pc, #44]	; (800ef84 <vPortSetupTimerInterrupt+0x38>)
 800ef58:	2200      	movs	r2, #0
 800ef5a:	601a      	str	r2, [r3, #0]
 800ef5c:	4b0a      	ldr	r3, [pc, #40]	; (800ef88 <vPortSetupTimerInterrupt+0x3c>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	4a0a      	ldr	r2, [pc, #40]	; (800ef8c <vPortSetupTimerInterrupt+0x40>)
 800ef62:	fba2 2303 	umull	r2, r3, r2, r3
 800ef66:	099b      	lsrs	r3, r3, #6
 800ef68:	4a09      	ldr	r2, [pc, #36]	; (800ef90 <vPortSetupTimerInterrupt+0x44>)
 800ef6a:	3b01      	subs	r3, #1
 800ef6c:	6013      	str	r3, [r2, #0]
 800ef6e:	4b04      	ldr	r3, [pc, #16]	; (800ef80 <vPortSetupTimerInterrupt+0x34>)
 800ef70:	2207      	movs	r2, #7
 800ef72:	601a      	str	r2, [r3, #0]
 800ef74:	bf00      	nop
 800ef76:	46bd      	mov	sp, r7
 800ef78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7c:	4770      	bx	lr
 800ef7e:	bf00      	nop
 800ef80:	e000e010 	.word	0xe000e010
 800ef84:	e000e018 	.word	0xe000e018
 800ef88:	20000014 	.word	0x20000014
 800ef8c:	10624dd3 	.word	0x10624dd3
 800ef90:	e000e014 	.word	0xe000e014

0800ef94 <vPortEnableVFP>:
 800ef94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800efa4 <vPortEnableVFP+0x10>
 800ef98:	6801      	ldr	r1, [r0, #0]
 800ef9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ef9e:	6001      	str	r1, [r0, #0]
 800efa0:	4770      	bx	lr
 800efa2:	bf00      	nop
 800efa4:	e000ed88 	.word	0xe000ed88

0800efa8 <pvPortMalloc>:
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b08a      	sub	sp, #40	; 0x28
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	2300      	movs	r3, #0
 800efb2:	61fb      	str	r3, [r7, #28]
 800efb4:	f7ff fab6 	bl	800e524 <vTaskSuspendAll>
 800efb8:	4b5d      	ldr	r3, [pc, #372]	; (800f130 <pvPortMalloc+0x188>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d101      	bne.n	800efc4 <pvPortMalloc+0x1c>
 800efc0:	f000 f924 	bl	800f20c <prvHeapInit>
 800efc4:	4b5b      	ldr	r3, [pc, #364]	; (800f134 <pvPortMalloc+0x18c>)
 800efc6:	681a      	ldr	r2, [r3, #0]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	4013      	ands	r3, r2
 800efcc:	2b00      	cmp	r3, #0
 800efce:	f040 8093 	bne.w	800f0f8 <pvPortMalloc+0x150>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d01d      	beq.n	800f014 <pvPortMalloc+0x6c>
 800efd8:	2208      	movs	r2, #8
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	4413      	add	r3, r2
 800efde:	607b      	str	r3, [r7, #4]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f003 0307 	and.w	r3, r3, #7
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d014      	beq.n	800f014 <pvPortMalloc+0x6c>
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f023 0307 	bic.w	r3, r3, #7
 800eff0:	3308      	adds	r3, #8
 800eff2:	607b      	str	r3, [r7, #4]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f003 0307 	and.w	r3, r3, #7
 800effa:	2b00      	cmp	r3, #0
 800effc:	d00a      	beq.n	800f014 <pvPortMalloc+0x6c>
 800effe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f002:	f383 8811 	msr	BASEPRI, r3
 800f006:	f3bf 8f6f 	isb	sy
 800f00a:	f3bf 8f4f 	dsb	sy
 800f00e:	617b      	str	r3, [r7, #20]
 800f010:	bf00      	nop
 800f012:	e7fe      	b.n	800f012 <pvPortMalloc+0x6a>
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d06e      	beq.n	800f0f8 <pvPortMalloc+0x150>
 800f01a:	4b47      	ldr	r3, [pc, #284]	; (800f138 <pvPortMalloc+0x190>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	429a      	cmp	r2, r3
 800f022:	d869      	bhi.n	800f0f8 <pvPortMalloc+0x150>
 800f024:	4b45      	ldr	r3, [pc, #276]	; (800f13c <pvPortMalloc+0x194>)
 800f026:	623b      	str	r3, [r7, #32]
 800f028:	4b44      	ldr	r3, [pc, #272]	; (800f13c <pvPortMalloc+0x194>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	627b      	str	r3, [r7, #36]	; 0x24
 800f02e:	e004      	b.n	800f03a <pvPortMalloc+0x92>
 800f030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f032:	623b      	str	r3, [r7, #32]
 800f034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	627b      	str	r3, [r7, #36]	; 0x24
 800f03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	687a      	ldr	r2, [r7, #4]
 800f040:	429a      	cmp	r2, r3
 800f042:	d903      	bls.n	800f04c <pvPortMalloc+0xa4>
 800f044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d1f1      	bne.n	800f030 <pvPortMalloc+0x88>
 800f04c:	4b38      	ldr	r3, [pc, #224]	; (800f130 <pvPortMalloc+0x188>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f052:	429a      	cmp	r2, r3
 800f054:	d050      	beq.n	800f0f8 <pvPortMalloc+0x150>
 800f056:	6a3b      	ldr	r3, [r7, #32]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	2208      	movs	r2, #8
 800f05c:	4413      	add	r3, r2
 800f05e:	61fb      	str	r3, [r7, #28]
 800f060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f062:	681a      	ldr	r2, [r3, #0]
 800f064:	6a3b      	ldr	r3, [r7, #32]
 800f066:	601a      	str	r2, [r3, #0]
 800f068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f06a:	685a      	ldr	r2, [r3, #4]
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	1ad2      	subs	r2, r2, r3
 800f070:	2308      	movs	r3, #8
 800f072:	005b      	lsls	r3, r3, #1
 800f074:	429a      	cmp	r2, r3
 800f076:	d91f      	bls.n	800f0b8 <pvPortMalloc+0x110>
 800f078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	4413      	add	r3, r2
 800f07e:	61bb      	str	r3, [r7, #24]
 800f080:	69bb      	ldr	r3, [r7, #24]
 800f082:	f003 0307 	and.w	r3, r3, #7
 800f086:	2b00      	cmp	r3, #0
 800f088:	d00a      	beq.n	800f0a0 <pvPortMalloc+0xf8>
 800f08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f08e:	f383 8811 	msr	BASEPRI, r3
 800f092:	f3bf 8f6f 	isb	sy
 800f096:	f3bf 8f4f 	dsb	sy
 800f09a:	613b      	str	r3, [r7, #16]
 800f09c:	bf00      	nop
 800f09e:	e7fe      	b.n	800f09e <pvPortMalloc+0xf6>
 800f0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a2:	685a      	ldr	r2, [r3, #4]
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	1ad2      	subs	r2, r2, r3
 800f0a8:	69bb      	ldr	r3, [r7, #24]
 800f0aa:	605a      	str	r2, [r3, #4]
 800f0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ae:	687a      	ldr	r2, [r7, #4]
 800f0b0:	605a      	str	r2, [r3, #4]
 800f0b2:	69b8      	ldr	r0, [r7, #24]
 800f0b4:	f000 f90c 	bl	800f2d0 <prvInsertBlockIntoFreeList>
 800f0b8:	4b1f      	ldr	r3, [pc, #124]	; (800f138 <pvPortMalloc+0x190>)
 800f0ba:	681a      	ldr	r2, [r3, #0]
 800f0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0be:	685b      	ldr	r3, [r3, #4]
 800f0c0:	1ad3      	subs	r3, r2, r3
 800f0c2:	4a1d      	ldr	r2, [pc, #116]	; (800f138 <pvPortMalloc+0x190>)
 800f0c4:	6013      	str	r3, [r2, #0]
 800f0c6:	4b1c      	ldr	r3, [pc, #112]	; (800f138 <pvPortMalloc+0x190>)
 800f0c8:	681a      	ldr	r2, [r3, #0]
 800f0ca:	4b1d      	ldr	r3, [pc, #116]	; (800f140 <pvPortMalloc+0x198>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d203      	bcs.n	800f0da <pvPortMalloc+0x132>
 800f0d2:	4b19      	ldr	r3, [pc, #100]	; (800f138 <pvPortMalloc+0x190>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	4a1a      	ldr	r2, [pc, #104]	; (800f140 <pvPortMalloc+0x198>)
 800f0d8:	6013      	str	r3, [r2, #0]
 800f0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0dc:	685a      	ldr	r2, [r3, #4]
 800f0de:	4b15      	ldr	r3, [pc, #84]	; (800f134 <pvPortMalloc+0x18c>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	431a      	orrs	r2, r3
 800f0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e6:	605a      	str	r2, [r3, #4]
 800f0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	601a      	str	r2, [r3, #0]
 800f0ee:	4b15      	ldr	r3, [pc, #84]	; (800f144 <pvPortMalloc+0x19c>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	3301      	adds	r3, #1
 800f0f4:	4a13      	ldr	r2, [pc, #76]	; (800f144 <pvPortMalloc+0x19c>)
 800f0f6:	6013      	str	r3, [r2, #0]
 800f0f8:	f7ff fa22 	bl	800e540 <xTaskResumeAll>
 800f0fc:	69fb      	ldr	r3, [r7, #28]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d101      	bne.n	800f106 <pvPortMalloc+0x15e>
 800f102:	f7f2 f8fa 	bl	80012fa <vApplicationMallocFailedHook>
 800f106:	69fb      	ldr	r3, [r7, #28]
 800f108:	f003 0307 	and.w	r3, r3, #7
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d00a      	beq.n	800f126 <pvPortMalloc+0x17e>
 800f110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f114:	f383 8811 	msr	BASEPRI, r3
 800f118:	f3bf 8f6f 	isb	sy
 800f11c:	f3bf 8f4f 	dsb	sy
 800f120:	60fb      	str	r3, [r7, #12]
 800f122:	bf00      	nop
 800f124:	e7fe      	b.n	800f124 <pvPortMalloc+0x17c>
 800f126:	69fb      	ldr	r3, [r7, #28]
 800f128:	4618      	mov	r0, r3
 800f12a:	3728      	adds	r7, #40	; 0x28
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}
 800f130:	20004a58 	.word	0x20004a58
 800f134:	20004a6c 	.word	0x20004a6c
 800f138:	20004a5c 	.word	0x20004a5c
 800f13c:	20004a50 	.word	0x20004a50
 800f140:	20004a60 	.word	0x20004a60
 800f144:	20004a64 	.word	0x20004a64

0800f148 <vPortFree>:
 800f148:	b580      	push	{r7, lr}
 800f14a:	b086      	sub	sp, #24
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	617b      	str	r3, [r7, #20]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d04d      	beq.n	800f1f6 <vPortFree+0xae>
 800f15a:	2308      	movs	r3, #8
 800f15c:	425b      	negs	r3, r3
 800f15e:	697a      	ldr	r2, [r7, #20]
 800f160:	4413      	add	r3, r2
 800f162:	617b      	str	r3, [r7, #20]
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	613b      	str	r3, [r7, #16]
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	685a      	ldr	r2, [r3, #4]
 800f16c:	4b24      	ldr	r3, [pc, #144]	; (800f200 <vPortFree+0xb8>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	4013      	ands	r3, r2
 800f172:	2b00      	cmp	r3, #0
 800f174:	d10a      	bne.n	800f18c <vPortFree+0x44>
 800f176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f17a:	f383 8811 	msr	BASEPRI, r3
 800f17e:	f3bf 8f6f 	isb	sy
 800f182:	f3bf 8f4f 	dsb	sy
 800f186:	60fb      	str	r3, [r7, #12]
 800f188:	bf00      	nop
 800f18a:	e7fe      	b.n	800f18a <vPortFree+0x42>
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d00a      	beq.n	800f1aa <vPortFree+0x62>
 800f194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f198:	f383 8811 	msr	BASEPRI, r3
 800f19c:	f3bf 8f6f 	isb	sy
 800f1a0:	f3bf 8f4f 	dsb	sy
 800f1a4:	60bb      	str	r3, [r7, #8]
 800f1a6:	bf00      	nop
 800f1a8:	e7fe      	b.n	800f1a8 <vPortFree+0x60>
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	685a      	ldr	r2, [r3, #4]
 800f1ae:	4b14      	ldr	r3, [pc, #80]	; (800f200 <vPortFree+0xb8>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	4013      	ands	r3, r2
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d01e      	beq.n	800f1f6 <vPortFree+0xae>
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d11a      	bne.n	800f1f6 <vPortFree+0xae>
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	685a      	ldr	r2, [r3, #4]
 800f1c4:	4b0e      	ldr	r3, [pc, #56]	; (800f200 <vPortFree+0xb8>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	43db      	mvns	r3, r3
 800f1ca:	401a      	ands	r2, r3
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	605a      	str	r2, [r3, #4]
 800f1d0:	f7ff f9a8 	bl	800e524 <vTaskSuspendAll>
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	685a      	ldr	r2, [r3, #4]
 800f1d8:	4b0a      	ldr	r3, [pc, #40]	; (800f204 <vPortFree+0xbc>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	4413      	add	r3, r2
 800f1de:	4a09      	ldr	r2, [pc, #36]	; (800f204 <vPortFree+0xbc>)
 800f1e0:	6013      	str	r3, [r2, #0]
 800f1e2:	6938      	ldr	r0, [r7, #16]
 800f1e4:	f000 f874 	bl	800f2d0 <prvInsertBlockIntoFreeList>
 800f1e8:	4b07      	ldr	r3, [pc, #28]	; (800f208 <vPortFree+0xc0>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	3301      	adds	r3, #1
 800f1ee:	4a06      	ldr	r2, [pc, #24]	; (800f208 <vPortFree+0xc0>)
 800f1f0:	6013      	str	r3, [r2, #0]
 800f1f2:	f7ff f9a5 	bl	800e540 <xTaskResumeAll>
 800f1f6:	bf00      	nop
 800f1f8:	3718      	adds	r7, #24
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
 800f1fe:	bf00      	nop
 800f200:	20004a6c 	.word	0x20004a6c
 800f204:	20004a5c 	.word	0x20004a5c
 800f208:	20004a68 	.word	0x20004a68

0800f20c <prvHeapInit>:
 800f20c:	b480      	push	{r7}
 800f20e:	b085      	sub	sp, #20
 800f210:	af00      	add	r7, sp, #0
 800f212:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f216:	60bb      	str	r3, [r7, #8]
 800f218:	4b27      	ldr	r3, [pc, #156]	; (800f2b8 <prvHeapInit+0xac>)
 800f21a:	60fb      	str	r3, [r7, #12]
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f003 0307 	and.w	r3, r3, #7
 800f222:	2b00      	cmp	r3, #0
 800f224:	d00c      	beq.n	800f240 <prvHeapInit+0x34>
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	3307      	adds	r3, #7
 800f22a:	60fb      	str	r3, [r7, #12]
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	f023 0307 	bic.w	r3, r3, #7
 800f232:	60fb      	str	r3, [r7, #12]
 800f234:	68ba      	ldr	r2, [r7, #8]
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	1ad3      	subs	r3, r2, r3
 800f23a:	4a1f      	ldr	r2, [pc, #124]	; (800f2b8 <prvHeapInit+0xac>)
 800f23c:	4413      	add	r3, r2
 800f23e:	60bb      	str	r3, [r7, #8]
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	607b      	str	r3, [r7, #4]
 800f244:	4a1d      	ldr	r2, [pc, #116]	; (800f2bc <prvHeapInit+0xb0>)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6013      	str	r3, [r2, #0]
 800f24a:	4b1c      	ldr	r3, [pc, #112]	; (800f2bc <prvHeapInit+0xb0>)
 800f24c:	2200      	movs	r2, #0
 800f24e:	605a      	str	r2, [r3, #4]
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	68ba      	ldr	r2, [r7, #8]
 800f254:	4413      	add	r3, r2
 800f256:	60fb      	str	r3, [r7, #12]
 800f258:	2208      	movs	r2, #8
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	1a9b      	subs	r3, r3, r2
 800f25e:	60fb      	str	r3, [r7, #12]
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f023 0307 	bic.w	r3, r3, #7
 800f266:	60fb      	str	r3, [r7, #12]
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	4a15      	ldr	r2, [pc, #84]	; (800f2c0 <prvHeapInit+0xb4>)
 800f26c:	6013      	str	r3, [r2, #0]
 800f26e:	4b14      	ldr	r3, [pc, #80]	; (800f2c0 <prvHeapInit+0xb4>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	2200      	movs	r2, #0
 800f274:	605a      	str	r2, [r3, #4]
 800f276:	4b12      	ldr	r3, [pc, #72]	; (800f2c0 <prvHeapInit+0xb4>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	2200      	movs	r2, #0
 800f27c:	601a      	str	r2, [r3, #0]
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	603b      	str	r3, [r7, #0]
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	68fa      	ldr	r2, [r7, #12]
 800f286:	1ad2      	subs	r2, r2, r3
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	605a      	str	r2, [r3, #4]
 800f28c:	4b0c      	ldr	r3, [pc, #48]	; (800f2c0 <prvHeapInit+0xb4>)
 800f28e:	681a      	ldr	r2, [r3, #0]
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	601a      	str	r2, [r3, #0]
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	685b      	ldr	r3, [r3, #4]
 800f298:	4a0a      	ldr	r2, [pc, #40]	; (800f2c4 <prvHeapInit+0xb8>)
 800f29a:	6013      	str	r3, [r2, #0]
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	4a09      	ldr	r2, [pc, #36]	; (800f2c8 <prvHeapInit+0xbc>)
 800f2a2:	6013      	str	r3, [r2, #0]
 800f2a4:	4b09      	ldr	r3, [pc, #36]	; (800f2cc <prvHeapInit+0xc0>)
 800f2a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f2aa:	601a      	str	r2, [r3, #0]
 800f2ac:	bf00      	nop
 800f2ae:	3714      	adds	r7, #20
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b6:	4770      	bx	lr
 800f2b8:	20000e50 	.word	0x20000e50
 800f2bc:	20004a50 	.word	0x20004a50
 800f2c0:	20004a58 	.word	0x20004a58
 800f2c4:	20004a60 	.word	0x20004a60
 800f2c8:	20004a5c 	.word	0x20004a5c
 800f2cc:	20004a6c 	.word	0x20004a6c

0800f2d0 <prvInsertBlockIntoFreeList>:
 800f2d0:	b480      	push	{r7}
 800f2d2:	b085      	sub	sp, #20
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	4b28      	ldr	r3, [pc, #160]	; (800f37c <prvInsertBlockIntoFreeList+0xac>)
 800f2da:	60fb      	str	r3, [r7, #12]
 800f2dc:	e002      	b.n	800f2e4 <prvInsertBlockIntoFreeList+0x14>
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	60fb      	str	r3, [r7, #12]
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	687a      	ldr	r2, [r7, #4]
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d8f7      	bhi.n	800f2de <prvInsertBlockIntoFreeList+0xe>
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	60bb      	str	r3, [r7, #8]
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	68ba      	ldr	r2, [r7, #8]
 800f2f8:	4413      	add	r3, r2
 800f2fa:	687a      	ldr	r2, [r7, #4]
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d108      	bne.n	800f312 <prvInsertBlockIntoFreeList+0x42>
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	685a      	ldr	r2, [r3, #4]
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	685b      	ldr	r3, [r3, #4]
 800f308:	441a      	add	r2, r3
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	605a      	str	r2, [r3, #4]
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	607b      	str	r3, [r7, #4]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	60bb      	str	r3, [r7, #8]
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	68ba      	ldr	r2, [r7, #8]
 800f31c:	441a      	add	r2, r3
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	429a      	cmp	r2, r3
 800f324:	d118      	bne.n	800f358 <prvInsertBlockIntoFreeList+0x88>
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	681a      	ldr	r2, [r3, #0]
 800f32a:	4b15      	ldr	r3, [pc, #84]	; (800f380 <prvInsertBlockIntoFreeList+0xb0>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d00d      	beq.n	800f34e <prvInsertBlockIntoFreeList+0x7e>
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	685a      	ldr	r2, [r3, #4]
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	685b      	ldr	r3, [r3, #4]
 800f33c:	441a      	add	r2, r3
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	605a      	str	r2, [r3, #4]
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	681a      	ldr	r2, [r3, #0]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	601a      	str	r2, [r3, #0]
 800f34c:	e008      	b.n	800f360 <prvInsertBlockIntoFreeList+0x90>
 800f34e:	4b0c      	ldr	r3, [pc, #48]	; (800f380 <prvInsertBlockIntoFreeList+0xb0>)
 800f350:	681a      	ldr	r2, [r3, #0]
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	601a      	str	r2, [r3, #0]
 800f356:	e003      	b.n	800f360 <prvInsertBlockIntoFreeList+0x90>
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681a      	ldr	r2, [r3, #0]
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	601a      	str	r2, [r3, #0]
 800f360:	68fa      	ldr	r2, [r7, #12]
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	429a      	cmp	r2, r3
 800f366:	d002      	beq.n	800f36e <prvInsertBlockIntoFreeList+0x9e>
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	687a      	ldr	r2, [r7, #4]
 800f36c:	601a      	str	r2, [r3, #0]
 800f36e:	bf00      	nop
 800f370:	3714      	adds	r7, #20
 800f372:	46bd      	mov	sp, r7
 800f374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f378:	4770      	bx	lr
 800f37a:	bf00      	nop
 800f37c:	20004a50 	.word	0x20004a50
 800f380:	20004a58 	.word	0x20004a58

0800f384 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f388:	2200      	movs	r2, #0
 800f38a:	4912      	ldr	r1, [pc, #72]	; (800f3d4 <MX_USB_DEVICE_Init+0x50>)
 800f38c:	4812      	ldr	r0, [pc, #72]	; (800f3d8 <MX_USB_DEVICE_Init+0x54>)
 800f38e:	f7fd fa53 	bl	800c838 <USBD_Init>
 800f392:	4603      	mov	r3, r0
 800f394:	2b00      	cmp	r3, #0
 800f396:	d001      	beq.n	800f39c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f398:	f7f3 fca6 	bl	8002ce8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f39c:	490f      	ldr	r1, [pc, #60]	; (800f3dc <MX_USB_DEVICE_Init+0x58>)
 800f39e:	480e      	ldr	r0, [pc, #56]	; (800f3d8 <MX_USB_DEVICE_Init+0x54>)
 800f3a0:	f7fd fa7a 	bl	800c898 <USBD_RegisterClass>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d001      	beq.n	800f3ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f3aa:	f7f3 fc9d 	bl	8002ce8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f3ae:	490c      	ldr	r1, [pc, #48]	; (800f3e0 <MX_USB_DEVICE_Init+0x5c>)
 800f3b0:	4809      	ldr	r0, [pc, #36]	; (800f3d8 <MX_USB_DEVICE_Init+0x54>)
 800f3b2:	f7fd f96b 	bl	800c68c <USBD_CDC_RegisterInterface>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d001      	beq.n	800f3c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f3bc:	f7f3 fc94 	bl	8002ce8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f3c0:	4805      	ldr	r0, [pc, #20]	; (800f3d8 <MX_USB_DEVICE_Init+0x54>)
 800f3c2:	f7fd fa9f 	bl	800c904 <USBD_Start>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d001      	beq.n	800f3d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f3cc:	f7f3 fc8c 	bl	8002ce8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f3d0:	bf00      	nop
 800f3d2:	bd80      	pop	{r7, pc}
 800f3d4:	200000c4 	.word	0x200000c4
 800f3d8:	20004a70 	.word	0x20004a70
 800f3dc:	2000002c 	.word	0x2000002c
 800f3e0:	200000b0 	.word	0x200000b0

0800f3e4 <CDC_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	4905      	ldr	r1, [pc, #20]	; (800f400 <CDC_Init_FS+0x1c>)
 800f3ec:	4805      	ldr	r0, [pc, #20]	; (800f404 <CDC_Init_FS+0x20>)
 800f3ee:	f7fd f967 	bl	800c6c0 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f3f2:	4905      	ldr	r1, [pc, #20]	; (800f408 <CDC_Init_FS+0x24>)
 800f3f4:	4803      	ldr	r0, [pc, #12]	; (800f404 <CDC_Init_FS+0x20>)
 800f3f6:	f7fd f985 	bl	800c704 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800f3fa:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	bd80      	pop	{r7, pc}
 800f400:	20005150 	.word	0x20005150
 800f404:	20004a70 	.word	0x20004a70
 800f408:	20004d50 	.word	0x20004d50

0800f40c <CDC_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void)
{
 800f40c:	b480      	push	{r7}
 800f40e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 800f410:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 800f412:	4618      	mov	r0, r3
 800f414:	46bd      	mov	sp, r7
 800f416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41a:	4770      	bx	lr

0800f41c <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800f41c:	b480      	push	{r7}
 800f41e:	b083      	sub	sp, #12
 800f420:	af00      	add	r7, sp, #0
 800f422:	4603      	mov	r3, r0
 800f424:	6039      	str	r1, [r7, #0]
 800f426:	71fb      	strb	r3, [r7, #7]
 800f428:	4613      	mov	r3, r2
 800f42a:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd)
 800f42c:	79fb      	ldrb	r3, [r7, #7]
 800f42e:	2b23      	cmp	r3, #35	; 0x23
 800f430:	f200 808c 	bhi.w	800f54c <CDC_Control_FS+0x130>
 800f434:	a201      	add	r2, pc, #4	; (adr r2, 800f43c <CDC_Control_FS+0x20>)
 800f436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f43a:	bf00      	nop
 800f43c:	0800f54d 	.word	0x0800f54d
 800f440:	0800f54d 	.word	0x0800f54d
 800f444:	0800f54d 	.word	0x0800f54d
 800f448:	0800f54d 	.word	0x0800f54d
 800f44c:	0800f54d 	.word	0x0800f54d
 800f450:	0800f54d 	.word	0x0800f54d
 800f454:	0800f54d 	.word	0x0800f54d
 800f458:	0800f54d 	.word	0x0800f54d
 800f45c:	0800f54d 	.word	0x0800f54d
 800f460:	0800f54d 	.word	0x0800f54d
 800f464:	0800f54d 	.word	0x0800f54d
 800f468:	0800f54d 	.word	0x0800f54d
 800f46c:	0800f54d 	.word	0x0800f54d
 800f470:	0800f54d 	.word	0x0800f54d
 800f474:	0800f54d 	.word	0x0800f54d
 800f478:	0800f54d 	.word	0x0800f54d
 800f47c:	0800f54d 	.word	0x0800f54d
 800f480:	0800f54d 	.word	0x0800f54d
 800f484:	0800f54d 	.word	0x0800f54d
 800f488:	0800f54d 	.word	0x0800f54d
 800f48c:	0800f54d 	.word	0x0800f54d
 800f490:	0800f54d 	.word	0x0800f54d
 800f494:	0800f54d 	.word	0x0800f54d
 800f498:	0800f54d 	.word	0x0800f54d
 800f49c:	0800f54d 	.word	0x0800f54d
 800f4a0:	0800f54d 	.word	0x0800f54d
 800f4a4:	0800f54d 	.word	0x0800f54d
 800f4a8:	0800f54d 	.word	0x0800f54d
 800f4ac:	0800f54d 	.word	0x0800f54d
 800f4b0:	0800f54d 	.word	0x0800f54d
 800f4b4:	0800f54d 	.word	0x0800f54d
 800f4b8:	0800f54d 	.word	0x0800f54d
 800f4bc:	0800f4cd 	.word	0x0800f4cd
 800f4c0:	0800f507 	.word	0x0800f507
 800f4c4:	0800f54d 	.word	0x0800f54d
 800f4c8:	0800f54d 	.word	0x0800f54d
			/*                                        3 - Mark                             */
			/*                                        4 - Space                            */
			/* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
			/*******************************************************************************/
		case CDC_SET_LINE_CODING:
			tempBuffer[0] = pbuf[0];
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	781a      	ldrb	r2, [r3, #0]
 800f4d0:	4b22      	ldr	r3, [pc, #136]	; (800f55c <CDC_Control_FS+0x140>)
 800f4d2:	701a      	strb	r2, [r3, #0]
			tempBuffer[1] = pbuf[1];
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	785a      	ldrb	r2, [r3, #1]
 800f4d8:	4b20      	ldr	r3, [pc, #128]	; (800f55c <CDC_Control_FS+0x140>)
 800f4da:	705a      	strb	r2, [r3, #1]
			tempBuffer[2] = pbuf[2];
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	789a      	ldrb	r2, [r3, #2]
 800f4e0:	4b1e      	ldr	r3, [pc, #120]	; (800f55c <CDC_Control_FS+0x140>)
 800f4e2:	709a      	strb	r2, [r3, #2]
			tempBuffer[3] = pbuf[3];
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	78da      	ldrb	r2, [r3, #3]
 800f4e8:	4b1c      	ldr	r3, [pc, #112]	; (800f55c <CDC_Control_FS+0x140>)
 800f4ea:	70da      	strb	r2, [r3, #3]
			tempBuffer[4] = pbuf[4];
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	791a      	ldrb	r2, [r3, #4]
 800f4f0:	4b1a      	ldr	r3, [pc, #104]	; (800f55c <CDC_Control_FS+0x140>)
 800f4f2:	711a      	strb	r2, [r3, #4]
			tempBuffer[5] = pbuf[5];
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	795a      	ldrb	r2, [r3, #5]
 800f4f8:	4b18      	ldr	r3, [pc, #96]	; (800f55c <CDC_Control_FS+0x140>)
 800f4fa:	715a      	strb	r2, [r3, #5]
			tempBuffer[6] = pbuf[6];
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	799a      	ldrb	r2, [r3, #6]
 800f500:	4b16      	ldr	r3, [pc, #88]	; (800f55c <CDC_Control_FS+0x140>)
 800f502:	719a      	strb	r2, [r3, #6]
			break;
 800f504:	e023      	b.n	800f54e <CDC_Control_FS+0x132>

		case CDC_GET_LINE_CODING:
			pbuf[0] = tempBuffer[0];
 800f506:	4b15      	ldr	r3, [pc, #84]	; (800f55c <CDC_Control_FS+0x140>)
 800f508:	781a      	ldrb	r2, [r3, #0]
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	701a      	strb	r2, [r3, #0]
			pbuf[1] = tempBuffer[1];
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	3301      	adds	r3, #1
 800f512:	4a12      	ldr	r2, [pc, #72]	; (800f55c <CDC_Control_FS+0x140>)
 800f514:	7852      	ldrb	r2, [r2, #1]
 800f516:	701a      	strb	r2, [r3, #0]
			pbuf[2] = tempBuffer[2];
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	3302      	adds	r3, #2
 800f51c:	4a0f      	ldr	r2, [pc, #60]	; (800f55c <CDC_Control_FS+0x140>)
 800f51e:	7892      	ldrb	r2, [r2, #2]
 800f520:	701a      	strb	r2, [r3, #0]
			pbuf[3] = tempBuffer[3];
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	3303      	adds	r3, #3
 800f526:	4a0d      	ldr	r2, [pc, #52]	; (800f55c <CDC_Control_FS+0x140>)
 800f528:	78d2      	ldrb	r2, [r2, #3]
 800f52a:	701a      	strb	r2, [r3, #0]
			pbuf[4] = tempBuffer[4];
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	3304      	adds	r3, #4
 800f530:	4a0a      	ldr	r2, [pc, #40]	; (800f55c <CDC_Control_FS+0x140>)
 800f532:	7912      	ldrb	r2, [r2, #4]
 800f534:	701a      	strb	r2, [r3, #0]
			pbuf[5] = tempBuffer[5];
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	3305      	adds	r3, #5
 800f53a:	4a08      	ldr	r2, [pc, #32]	; (800f55c <CDC_Control_FS+0x140>)
 800f53c:	7952      	ldrb	r2, [r2, #5]
 800f53e:	701a      	strb	r2, [r3, #0]
			pbuf[6] = tempBuffer[6];
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	3306      	adds	r3, #6
 800f544:	4a05      	ldr	r2, [pc, #20]	; (800f55c <CDC_Control_FS+0x140>)
 800f546:	7992      	ldrb	r2, [r2, #6]
 800f548:	701a      	strb	r2, [r3, #0]
			break;
 800f54a:	e000      	b.n	800f54e <CDC_Control_FS+0x132>
		case CDC_SEND_BREAK:

			break;

		default:
			break;
 800f54c:	bf00      	nop
	}

	return (USBD_OK);
 800f54e:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 800f550:	4618      	mov	r0, r3
 800f552:	370c      	adds	r7, #12
 800f554:	46bd      	mov	sp, r7
 800f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55a:	4770      	bx	lr
 800f55c:	20005550 	.word	0x20005550

0800f560 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b082      	sub	sp, #8
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f56a:	6879      	ldr	r1, [r7, #4]
 800f56c:	4809      	ldr	r0, [pc, #36]	; (800f594 <CDC_Receive_FS+0x34>)
 800f56e:	f7fd f8c9 	bl	800c704 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f572:	4808      	ldr	r0, [pc, #32]	; (800f594 <CDC_Receive_FS+0x34>)
 800f574:	f7fd f92a 	bl	800c7cc <USBD_CDC_ReceivePacket>
	UserRxBufferFS[APP_RX_DATA_SIZE] = 0;
 800f578:	4b07      	ldr	r3, [pc, #28]	; (800f598 <CDC_Receive_FS+0x38>)
 800f57a:	2200      	movs	r2, #0
 800f57c:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	USBReceiveHandler(UserRxBufferFS, Len);
 800f580:	6839      	ldr	r1, [r7, #0]
 800f582:	4805      	ldr	r0, [pc, #20]	; (800f598 <CDC_Receive_FS+0x38>)
 800f584:	f000 f842 	bl	800f60c <USBReceiveHandler>
	return (USBD_OK);
 800f588:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3708      	adds	r7, #8
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
 800f592:	bf00      	nop
 800f594:	20004a70 	.word	0x20004a70
 800f598:	20004d50 	.word	0x20004d50

0800f59c <CDC_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b084      	sub	sp, #16
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	460b      	mov	r3, r1
 800f5a6:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 800f5ac:	4b0d      	ldr	r3, [pc, #52]	; (800f5e4 <CDC_Transmit_FS+0x48>)
 800f5ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f5b2:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0)
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d001      	beq.n	800f5c2 <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 800f5be:	2301      	movs	r3, #1
 800f5c0:	e00b      	b.n	800f5da <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f5c2:	887b      	ldrh	r3, [r7, #2]
 800f5c4:	461a      	mov	r2, r3
 800f5c6:	6879      	ldr	r1, [r7, #4]
 800f5c8:	4806      	ldr	r0, [pc, #24]	; (800f5e4 <CDC_Transmit_FS+0x48>)
 800f5ca:	f7fd f879 	bl	800c6c0 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f5ce:	4805      	ldr	r0, [pc, #20]	; (800f5e4 <CDC_Transmit_FS+0x48>)
 800f5d0:	f7fd f8b6 	bl	800c740 <USBD_CDC_TransmitPacket>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 800f5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3710      	adds	r7, #16
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd80      	pop	{r7, pc}
 800f5e2:	bf00      	nop
 800f5e4:	20004a70 	.word	0x20004a70

0800f5e8 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f5e8:	b480      	push	{r7}
 800f5ea:	b087      	sub	sp, #28
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	60f8      	str	r0, [r7, #12]
 800f5f0:	60b9      	str	r1, [r7, #8]
 800f5f2:	4613      	mov	r3, r2
 800f5f4:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 800f5fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	371c      	adds	r7, #28
 800f602:	46bd      	mov	sp, r7
 800f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f608:	4770      	bx	lr
	...

0800f60c <USBReceiveHandler>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void USBReceiveHandler(uint8_t *buf, uint32_t *len)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b082      	sub	sp, #8
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	6039      	str	r1, [r7, #0]
	USBRXDataBuffer = buf;
 800f616:	4a19      	ldr	r2, [pc, #100]	; (800f67c <USBReceiveHandler+0x70>)
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	6013      	str	r3, [r2, #0]
	USBRXDataLength = *len;
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	b2da      	uxtb	r2, r3
 800f622:	4b17      	ldr	r3, [pc, #92]	; (800f680 <USBReceiveHandler+0x74>)
 800f624:	701a      	strb	r2, [r3, #0]
	USBRXDataReady = 1;
 800f626:	4b17      	ldr	r3, [pc, #92]	; (800f684 <USBReceiveHandler+0x78>)
 800f628:	2201      	movs	r2, #1
 800f62a:	701a      	strb	r2, [r3, #0]
//	printf("test=%s\r\n", USBRXDataBuffer);
//	sprintf("%0.1fC", *USBRXDataBuffer);
//	CDC_Transmit_FS((uint8_t*) (USBRXDataBuffer), USBRXDataLength);
	switch (USB_State)
 800f62c:	4b16      	ldr	r3, [pc, #88]	; (800f688 <USBReceiveHandler+0x7c>)
 800f62e:	781b      	ldrb	r3, [r3, #0]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d002      	beq.n	800f63a <USBReceiveHandler+0x2e>
 800f634:	2b01      	cmp	r3, #1
 800f636:	d016      	beq.n	800f666 <USBReceiveHandler+0x5a>
		case USB_APP:
			g_regMapUpdateFlag = 1;
			USB_State = USB_START;
			break;
	}
}
 800f638:	e01c      	b.n	800f674 <USBReceiveHandler+0x68>
			if (USBRXDataBuffer[0] == '*' && USBRXDataBuffer[2] == '#')
 800f63a:	4b10      	ldr	r3, [pc, #64]	; (800f67c <USBReceiveHandler+0x70>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	781b      	ldrb	r3, [r3, #0]
 800f640:	2b2a      	cmp	r3, #42	; 0x2a
 800f642:	d10c      	bne.n	800f65e <USBReceiveHandler+0x52>
 800f644:	4b0d      	ldr	r3, [pc, #52]	; (800f67c <USBReceiveHandler+0x70>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	3302      	adds	r3, #2
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	2b23      	cmp	r3, #35	; 0x23
 800f64e:	d106      	bne.n	800f65e <USBReceiveHandler+0x52>
				USB_State = USB_APP;
 800f650:	4b0d      	ldr	r3, [pc, #52]	; (800f688 <USBReceiveHandler+0x7c>)
 800f652:	2201      	movs	r2, #1
 800f654:	701a      	strb	r2, [r3, #0]
				printf("ACK\r\n");
 800f656:	480d      	ldr	r0, [pc, #52]	; (800f68c <USBReceiveHandler+0x80>)
 800f658:	f001 fb20 	bl	8010c9c <puts>
			break;
 800f65c:	e00a      	b.n	800f674 <USBReceiveHandler+0x68>
				USB_State = USB_START;
 800f65e:	4b0a      	ldr	r3, [pc, #40]	; (800f688 <USBReceiveHandler+0x7c>)
 800f660:	2200      	movs	r2, #0
 800f662:	701a      	strb	r2, [r3, #0]
			break;
 800f664:	e006      	b.n	800f674 <USBReceiveHandler+0x68>
			g_regMapUpdateFlag = 1;
 800f666:	4b0a      	ldr	r3, [pc, #40]	; (800f690 <USBReceiveHandler+0x84>)
 800f668:	2201      	movs	r2, #1
 800f66a:	701a      	strb	r2, [r3, #0]
			USB_State = USB_START;
 800f66c:	4b06      	ldr	r3, [pc, #24]	; (800f688 <USBReceiveHandler+0x7c>)
 800f66e:	2200      	movs	r2, #0
 800f670:	701a      	strb	r2, [r3, #0]
			break;
 800f672:	bf00      	nop
}
 800f674:	bf00      	nop
 800f676:	3708      	adds	r7, #8
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}
 800f67c:	2000069c 	.word	0x2000069c
 800f680:	20000699 	.word	0x20000699
 800f684:	20000698 	.word	0x20000698
 800f688:	20004d4c 	.word	0x20004d4c
 800f68c:	080132f4 	.word	0x080132f4
 800f690:	200006a0 	.word	0x200006a0

0800f694 <_write>:

int _write(int file, char *ptr, int len)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b084      	sub	sp, #16
 800f698:	af00      	add	r7, sp, #0
 800f69a:	60f8      	str	r0, [r7, #12]
 800f69c:	60b9      	str	r1, [r7, #8]
 800f69e:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	b29b      	uxth	r3, r3
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	68b8      	ldr	r0, [r7, #8]
 800f6a8:	f7ff ff78 	bl	800f59c <CDC_Transmit_FS>
	return len;
 800f6ac:	687b      	ldr	r3, [r7, #4]
}
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	3710      	adds	r7, #16
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
	...

0800f6b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b083      	sub	sp, #12
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	4603      	mov	r3, r0
 800f6c0:	6039      	str	r1, [r7, #0]
 800f6c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	2212      	movs	r2, #18
 800f6c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f6ca:	4b03      	ldr	r3, [pc, #12]	; (800f6d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	370c      	adds	r7, #12
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr
 800f6d8:	200000e0 	.word	0x200000e0

0800f6dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6dc:	b480      	push	{r7}
 800f6de:	b083      	sub	sp, #12
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	6039      	str	r1, [r7, #0]
 800f6e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	2204      	movs	r2, #4
 800f6ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f6ee:	4b03      	ldr	r3, [pc, #12]	; (800f6fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	370c      	adds	r7, #12
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fa:	4770      	bx	lr
 800f6fc:	200000f4 	.word	0x200000f4

0800f700 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
 800f706:	4603      	mov	r3, r0
 800f708:	6039      	str	r1, [r7, #0]
 800f70a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f70c:	79fb      	ldrb	r3, [r7, #7]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d105      	bne.n	800f71e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f712:	683a      	ldr	r2, [r7, #0]
 800f714:	4907      	ldr	r1, [pc, #28]	; (800f734 <USBD_FS_ProductStrDescriptor+0x34>)
 800f716:	4808      	ldr	r0, [pc, #32]	; (800f738 <USBD_FS_ProductStrDescriptor+0x38>)
 800f718:	f7fe faa0 	bl	800dc5c <USBD_GetString>
 800f71c:	e004      	b.n	800f728 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f71e:	683a      	ldr	r2, [r7, #0]
 800f720:	4904      	ldr	r1, [pc, #16]	; (800f734 <USBD_FS_ProductStrDescriptor+0x34>)
 800f722:	4805      	ldr	r0, [pc, #20]	; (800f738 <USBD_FS_ProductStrDescriptor+0x38>)
 800f724:	f7fe fa9a 	bl	800dc5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f728:	4b02      	ldr	r3, [pc, #8]	; (800f734 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f72a:	4618      	mov	r0, r3
 800f72c:	3708      	adds	r7, #8
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}
 800f732:	bf00      	nop
 800f734:	20005558 	.word	0x20005558
 800f738:	080132fc 	.word	0x080132fc

0800f73c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
 800f742:	4603      	mov	r3, r0
 800f744:	6039      	str	r1, [r7, #0]
 800f746:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f748:	683a      	ldr	r2, [r7, #0]
 800f74a:	4904      	ldr	r1, [pc, #16]	; (800f75c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f74c:	4804      	ldr	r0, [pc, #16]	; (800f760 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f74e:	f7fe fa85 	bl	800dc5c <USBD_GetString>
  return USBD_StrDesc;
 800f752:	4b02      	ldr	r3, [pc, #8]	; (800f75c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f754:	4618      	mov	r0, r3
 800f756:	3708      	adds	r7, #8
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}
 800f75c:	20005558 	.word	0x20005558
 800f760:	08013314 	.word	0x08013314

0800f764 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
 800f76a:	4603      	mov	r3, r0
 800f76c:	6039      	str	r1, [r7, #0]
 800f76e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	221a      	movs	r2, #26
 800f774:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f776:	f000 f843 	bl	800f800 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f77a:	4b02      	ldr	r3, [pc, #8]	; (800f784 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	3708      	adds	r7, #8
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}
 800f784:	200000f8 	.word	0x200000f8

0800f788 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b082      	sub	sp, #8
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	4603      	mov	r3, r0
 800f790:	6039      	str	r1, [r7, #0]
 800f792:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f794:	79fb      	ldrb	r3, [r7, #7]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d105      	bne.n	800f7a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f79a:	683a      	ldr	r2, [r7, #0]
 800f79c:	4907      	ldr	r1, [pc, #28]	; (800f7bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800f79e:	4808      	ldr	r0, [pc, #32]	; (800f7c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f7a0:	f7fe fa5c 	bl	800dc5c <USBD_GetString>
 800f7a4:	e004      	b.n	800f7b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f7a6:	683a      	ldr	r2, [r7, #0]
 800f7a8:	4904      	ldr	r1, [pc, #16]	; (800f7bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800f7aa:	4805      	ldr	r0, [pc, #20]	; (800f7c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f7ac:	f7fe fa56 	bl	800dc5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f7b0:	4b02      	ldr	r3, [pc, #8]	; (800f7bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3708      	adds	r7, #8
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}
 800f7ba:	bf00      	nop
 800f7bc:	20005558 	.word	0x20005558
 800f7c0:	08013328 	.word	0x08013328

0800f7c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b082      	sub	sp, #8
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	6039      	str	r1, [r7, #0]
 800f7ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f7d0:	79fb      	ldrb	r3, [r7, #7]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d105      	bne.n	800f7e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f7d6:	683a      	ldr	r2, [r7, #0]
 800f7d8:	4907      	ldr	r1, [pc, #28]	; (800f7f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f7da:	4808      	ldr	r0, [pc, #32]	; (800f7fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f7dc:	f7fe fa3e 	bl	800dc5c <USBD_GetString>
 800f7e0:	e004      	b.n	800f7ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f7e2:	683a      	ldr	r2, [r7, #0]
 800f7e4:	4904      	ldr	r1, [pc, #16]	; (800f7f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f7e6:	4805      	ldr	r0, [pc, #20]	; (800f7fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f7e8:	f7fe fa38 	bl	800dc5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f7ec:	4b02      	ldr	r3, [pc, #8]	; (800f7f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3708      	adds	r7, #8
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}
 800f7f6:	bf00      	nop
 800f7f8:	20005558 	.word	0x20005558
 800f7fc:	08013334 	.word	0x08013334

0800f800 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b084      	sub	sp, #16
 800f804:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f806:	4b0f      	ldr	r3, [pc, #60]	; (800f844 <Get_SerialNum+0x44>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f80c:	4b0e      	ldr	r3, [pc, #56]	; (800f848 <Get_SerialNum+0x48>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f812:	4b0e      	ldr	r3, [pc, #56]	; (800f84c <Get_SerialNum+0x4c>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f818:	68fa      	ldr	r2, [r7, #12]
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	4413      	add	r3, r2
 800f81e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d009      	beq.n	800f83a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f826:	2208      	movs	r2, #8
 800f828:	4909      	ldr	r1, [pc, #36]	; (800f850 <Get_SerialNum+0x50>)
 800f82a:	68f8      	ldr	r0, [r7, #12]
 800f82c:	f000 f814 	bl	800f858 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f830:	2204      	movs	r2, #4
 800f832:	4908      	ldr	r1, [pc, #32]	; (800f854 <Get_SerialNum+0x54>)
 800f834:	68b8      	ldr	r0, [r7, #8]
 800f836:	f000 f80f 	bl	800f858 <IntToUnicode>
  }
}
 800f83a:	bf00      	nop
 800f83c:	3710      	adds	r7, #16
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}
 800f842:	bf00      	nop
 800f844:	1fff7a10 	.word	0x1fff7a10
 800f848:	1fff7a14 	.word	0x1fff7a14
 800f84c:	1fff7a18 	.word	0x1fff7a18
 800f850:	200000fa 	.word	0x200000fa
 800f854:	2000010a 	.word	0x2000010a

0800f858 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f858:	b480      	push	{r7}
 800f85a:	b087      	sub	sp, #28
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	60f8      	str	r0, [r7, #12]
 800f860:	60b9      	str	r1, [r7, #8]
 800f862:	4613      	mov	r3, r2
 800f864:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f866:	2300      	movs	r3, #0
 800f868:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f86a:	2300      	movs	r3, #0
 800f86c:	75fb      	strb	r3, [r7, #23]
 800f86e:	e027      	b.n	800f8c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	0f1b      	lsrs	r3, r3, #28
 800f874:	2b09      	cmp	r3, #9
 800f876:	d80b      	bhi.n	800f890 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	0f1b      	lsrs	r3, r3, #28
 800f87c:	b2da      	uxtb	r2, r3
 800f87e:	7dfb      	ldrb	r3, [r7, #23]
 800f880:	005b      	lsls	r3, r3, #1
 800f882:	4619      	mov	r1, r3
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	440b      	add	r3, r1
 800f888:	3230      	adds	r2, #48	; 0x30
 800f88a:	b2d2      	uxtb	r2, r2
 800f88c:	701a      	strb	r2, [r3, #0]
 800f88e:	e00a      	b.n	800f8a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	0f1b      	lsrs	r3, r3, #28
 800f894:	b2da      	uxtb	r2, r3
 800f896:	7dfb      	ldrb	r3, [r7, #23]
 800f898:	005b      	lsls	r3, r3, #1
 800f89a:	4619      	mov	r1, r3
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	440b      	add	r3, r1
 800f8a0:	3237      	adds	r2, #55	; 0x37
 800f8a2:	b2d2      	uxtb	r2, r2
 800f8a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	011b      	lsls	r3, r3, #4
 800f8aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f8ac:	7dfb      	ldrb	r3, [r7, #23]
 800f8ae:	005b      	lsls	r3, r3, #1
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	68ba      	ldr	r2, [r7, #8]
 800f8b4:	4413      	add	r3, r2
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f8ba:	7dfb      	ldrb	r3, [r7, #23]
 800f8bc:	3301      	adds	r3, #1
 800f8be:	75fb      	strb	r3, [r7, #23]
 800f8c0:	7dfa      	ldrb	r2, [r7, #23]
 800f8c2:	79fb      	ldrb	r3, [r7, #7]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d3d3      	bcc.n	800f870 <IntToUnicode+0x18>
  }
}
 800f8c8:	bf00      	nop
 800f8ca:	bf00      	nop
 800f8cc:	371c      	adds	r7, #28
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d4:	4770      	bx	lr
	...

0800f8d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b08a      	sub	sp, #40	; 0x28
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f8e0:	f107 0314 	add.w	r3, r7, #20
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	601a      	str	r2, [r3, #0]
 800f8e8:	605a      	str	r2, [r3, #4]
 800f8ea:	609a      	str	r2, [r3, #8]
 800f8ec:	60da      	str	r2, [r3, #12]
 800f8ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f8f8:	d13a      	bne.n	800f970 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	613b      	str	r3, [r7, #16]
 800f8fe:	4b1e      	ldr	r3, [pc, #120]	; (800f978 <HAL_PCD_MspInit+0xa0>)
 800f900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f902:	4a1d      	ldr	r2, [pc, #116]	; (800f978 <HAL_PCD_MspInit+0xa0>)
 800f904:	f043 0301 	orr.w	r3, r3, #1
 800f908:	6313      	str	r3, [r2, #48]	; 0x30
 800f90a:	4b1b      	ldr	r3, [pc, #108]	; (800f978 <HAL_PCD_MspInit+0xa0>)
 800f90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f90e:	f003 0301 	and.w	r3, r3, #1
 800f912:	613b      	str	r3, [r7, #16]
 800f914:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f916:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f91a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f91c:	2302      	movs	r3, #2
 800f91e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f920:	2300      	movs	r3, #0
 800f922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f924:	2303      	movs	r3, #3
 800f926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f928:	230a      	movs	r3, #10
 800f92a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f92c:	f107 0314 	add.w	r3, r7, #20
 800f930:	4619      	mov	r1, r3
 800f932:	4812      	ldr	r0, [pc, #72]	; (800f97c <HAL_PCD_MspInit+0xa4>)
 800f934:	f7f6 f8a2 	bl	8005a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f938:	4b0f      	ldr	r3, [pc, #60]	; (800f978 <HAL_PCD_MspInit+0xa0>)
 800f93a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f93c:	4a0e      	ldr	r2, [pc, #56]	; (800f978 <HAL_PCD_MspInit+0xa0>)
 800f93e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f942:	6353      	str	r3, [r2, #52]	; 0x34
 800f944:	2300      	movs	r3, #0
 800f946:	60fb      	str	r3, [r7, #12]
 800f948:	4b0b      	ldr	r3, [pc, #44]	; (800f978 <HAL_PCD_MspInit+0xa0>)
 800f94a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f94c:	4a0a      	ldr	r2, [pc, #40]	; (800f978 <HAL_PCD_MspInit+0xa0>)
 800f94e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f952:	6453      	str	r3, [r2, #68]	; 0x44
 800f954:	4b08      	ldr	r3, [pc, #32]	; (800f978 <HAL_PCD_MspInit+0xa0>)
 800f956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f95c:	60fb      	str	r3, [r7, #12]
 800f95e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f960:	2200      	movs	r2, #0
 800f962:	2105      	movs	r1, #5
 800f964:	2043      	movs	r0, #67	; 0x43
 800f966:	f7f5 fcea 	bl	800533e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f96a:	2043      	movs	r0, #67	; 0x43
 800f96c:	f7f5 fd03 	bl	8005376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f970:	bf00      	nop
 800f972:	3728      	adds	r7, #40	; 0x28
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}
 800f978:	40023800 	.word	0x40023800
 800f97c:	40020000 	.word	0x40020000

0800f980 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b082      	sub	sp, #8
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f994:	4619      	mov	r1, r3
 800f996:	4610      	mov	r0, r2
 800f998:	f7fd f801 	bl	800c99e <USBD_LL_SetupStage>
}
 800f99c:	bf00      	nop
 800f99e:	3708      	adds	r7, #8
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}

0800f9a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b082      	sub	sp, #8
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	460b      	mov	r3, r1
 800f9ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f9b6:	78fa      	ldrb	r2, [r7, #3]
 800f9b8:	6879      	ldr	r1, [r7, #4]
 800f9ba:	4613      	mov	r3, r2
 800f9bc:	00db      	lsls	r3, r3, #3
 800f9be:	4413      	add	r3, r2
 800f9c0:	009b      	lsls	r3, r3, #2
 800f9c2:	440b      	add	r3, r1
 800f9c4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f9c8:	681a      	ldr	r2, [r3, #0]
 800f9ca:	78fb      	ldrb	r3, [r7, #3]
 800f9cc:	4619      	mov	r1, r3
 800f9ce:	f7fd f83b 	bl	800ca48 <USBD_LL_DataOutStage>
}
 800f9d2:	bf00      	nop
 800f9d4:	3708      	adds	r7, #8
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bd80      	pop	{r7, pc}

0800f9da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9da:	b580      	push	{r7, lr}
 800f9dc:	b082      	sub	sp, #8
 800f9de:	af00      	add	r7, sp, #0
 800f9e0:	6078      	str	r0, [r7, #4]
 800f9e2:	460b      	mov	r3, r1
 800f9e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f9ec:	78fa      	ldrb	r2, [r7, #3]
 800f9ee:	6879      	ldr	r1, [r7, #4]
 800f9f0:	4613      	mov	r3, r2
 800f9f2:	00db      	lsls	r3, r3, #3
 800f9f4:	4413      	add	r3, r2
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	440b      	add	r3, r1
 800f9fa:	334c      	adds	r3, #76	; 0x4c
 800f9fc:	681a      	ldr	r2, [r3, #0]
 800f9fe:	78fb      	ldrb	r3, [r7, #3]
 800fa00:	4619      	mov	r1, r3
 800fa02:	f7fd f8d4 	bl	800cbae <USBD_LL_DataInStage>
}
 800fa06:	bf00      	nop
 800fa08:	3708      	adds	r7, #8
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}

0800fa0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa0e:	b580      	push	{r7, lr}
 800fa10:	b082      	sub	sp, #8
 800fa12:	af00      	add	r7, sp, #0
 800fa14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7fd fa08 	bl	800ce32 <USBD_LL_SOF>
}
 800fa22:	bf00      	nop
 800fa24:	3708      	adds	r7, #8
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}

0800fa2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa2a:	b580      	push	{r7, lr}
 800fa2c:	b084      	sub	sp, #16
 800fa2e:	af00      	add	r7, sp, #0
 800fa30:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fa32:	2301      	movs	r3, #1
 800fa34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	68db      	ldr	r3, [r3, #12]
 800fa3a:	2b02      	cmp	r3, #2
 800fa3c:	d001      	beq.n	800fa42 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800fa3e:	f7f3 f953 	bl	8002ce8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa48:	7bfa      	ldrb	r2, [r7, #15]
 800fa4a:	4611      	mov	r1, r2
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f7fd f9b2 	bl	800cdb6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7fd f95a 	bl	800cd12 <USBD_LL_Reset>
}
 800fa5e:	bf00      	nop
 800fa60:	3710      	adds	r7, #16
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}
	...

0800fa68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7fd f9ad 	bl	800cdd6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	687a      	ldr	r2, [r7, #4]
 800fa88:	6812      	ldr	r2, [r2, #0]
 800fa8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fa8e:	f043 0301 	orr.w	r3, r3, #1
 800fa92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6a1b      	ldr	r3, [r3, #32]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d005      	beq.n	800faa8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fa9c:	4b04      	ldr	r3, [pc, #16]	; (800fab0 <HAL_PCD_SuspendCallback+0x48>)
 800fa9e:	691b      	ldr	r3, [r3, #16]
 800faa0:	4a03      	ldr	r2, [pc, #12]	; (800fab0 <HAL_PCD_SuspendCallback+0x48>)
 800faa2:	f043 0306 	orr.w	r3, r3, #6
 800faa6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800faa8:	bf00      	nop
 800faaa:	3708      	adds	r7, #8
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}
 800fab0:	e000ed00 	.word	0xe000ed00

0800fab4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7fd f99d 	bl	800ce02 <USBD_LL_Resume>
}
 800fac8:	bf00      	nop
 800faca:	3708      	adds	r7, #8
 800facc:	46bd      	mov	sp, r7
 800face:	bd80      	pop	{r7, pc}

0800fad0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b082      	sub	sp, #8
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	460b      	mov	r3, r1
 800fada:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fae2:	78fa      	ldrb	r2, [r7, #3]
 800fae4:	4611      	mov	r1, r2
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7fd f9f5 	bl	800ced6 <USBD_LL_IsoOUTIncomplete>
}
 800faec:	bf00      	nop
 800faee:	3708      	adds	r7, #8
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b082      	sub	sp, #8
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	460b      	mov	r3, r1
 800fafe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fb06:	78fa      	ldrb	r2, [r7, #3]
 800fb08:	4611      	mov	r1, r2
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f7fd f9b1 	bl	800ce72 <USBD_LL_IsoINIncomplete>
}
 800fb10:	bf00      	nop
 800fb12:	3708      	adds	r7, #8
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}

0800fb18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7fd fa07 	bl	800cf3a <USBD_LL_DevConnected>
}
 800fb2c:	bf00      	nop
 800fb2e:	3708      	adds	r7, #8
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}

0800fb34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b082      	sub	sp, #8
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7fd fa04 	bl	800cf50 <USBD_LL_DevDisconnected>
}
 800fb48:	bf00      	nop
 800fb4a:	3708      	adds	r7, #8
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b082      	sub	sp, #8
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	781b      	ldrb	r3, [r3, #0]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d13c      	bne.n	800fbda <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fb60:	4a20      	ldr	r2, [pc, #128]	; (800fbe4 <USBD_LL_Init+0x94>)
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	4a1e      	ldr	r2, [pc, #120]	; (800fbe4 <USBD_LL_Init+0x94>)
 800fb6c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fb70:	4b1c      	ldr	r3, [pc, #112]	; (800fbe4 <USBD_LL_Init+0x94>)
 800fb72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fb76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800fb78:	4b1a      	ldr	r3, [pc, #104]	; (800fbe4 <USBD_LL_Init+0x94>)
 800fb7a:	2204      	movs	r2, #4
 800fb7c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fb7e:	4b19      	ldr	r3, [pc, #100]	; (800fbe4 <USBD_LL_Init+0x94>)
 800fb80:	2202      	movs	r2, #2
 800fb82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fb84:	4b17      	ldr	r3, [pc, #92]	; (800fbe4 <USBD_LL_Init+0x94>)
 800fb86:	2200      	movs	r2, #0
 800fb88:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fb8a:	4b16      	ldr	r3, [pc, #88]	; (800fbe4 <USBD_LL_Init+0x94>)
 800fb8c:	2202      	movs	r2, #2
 800fb8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fb90:	4b14      	ldr	r3, [pc, #80]	; (800fbe4 <USBD_LL_Init+0x94>)
 800fb92:	2200      	movs	r2, #0
 800fb94:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fb96:	4b13      	ldr	r3, [pc, #76]	; (800fbe4 <USBD_LL_Init+0x94>)
 800fb98:	2200      	movs	r2, #0
 800fb9a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fb9c:	4b11      	ldr	r3, [pc, #68]	; (800fbe4 <USBD_LL_Init+0x94>)
 800fb9e:	2200      	movs	r2, #0
 800fba0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fba2:	4b10      	ldr	r3, [pc, #64]	; (800fbe4 <USBD_LL_Init+0x94>)
 800fba4:	2200      	movs	r2, #0
 800fba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fba8:	4b0e      	ldr	r3, [pc, #56]	; (800fbe4 <USBD_LL_Init+0x94>)
 800fbaa:	2200      	movs	r2, #0
 800fbac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fbae:	480d      	ldr	r0, [pc, #52]	; (800fbe4 <USBD_LL_Init+0x94>)
 800fbb0:	f7f7 fd8b 	bl	80076ca <HAL_PCD_Init>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d001      	beq.n	800fbbe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fbba:	f7f3 f895 	bl	8002ce8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fbbe:	2180      	movs	r1, #128	; 0x80
 800fbc0:	4808      	ldr	r0, [pc, #32]	; (800fbe4 <USBD_LL_Init+0x94>)
 800fbc2:	f7f8 ffe2 	bl	8008b8a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fbc6:	2240      	movs	r2, #64	; 0x40
 800fbc8:	2100      	movs	r1, #0
 800fbca:	4806      	ldr	r0, [pc, #24]	; (800fbe4 <USBD_LL_Init+0x94>)
 800fbcc:	f7f8 ff96 	bl	8008afc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fbd0:	2280      	movs	r2, #128	; 0x80
 800fbd2:	2101      	movs	r1, #1
 800fbd4:	4803      	ldr	r0, [pc, #12]	; (800fbe4 <USBD_LL_Init+0x94>)
 800fbd6:	f7f8 ff91 	bl	8008afc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fbda:	2300      	movs	r3, #0
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3708      	adds	r7, #8
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	20005758 	.word	0x20005758

0800fbe8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b084      	sub	sp, #16
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f7f7 fe80 	bl	8007904 <HAL_PCD_Start>
 800fc04:	4603      	mov	r3, r0
 800fc06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc08:	7bfb      	ldrb	r3, [r7, #15]
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f000 f942 	bl	800fe94 <USBD_Get_USB_Status>
 800fc10:	4603      	mov	r3, r0
 800fc12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc14:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	3710      	adds	r7, #16
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}

0800fc1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fc1e:	b580      	push	{r7, lr}
 800fc20:	b084      	sub	sp, #16
 800fc22:	af00      	add	r7, sp, #0
 800fc24:	6078      	str	r0, [r7, #4]
 800fc26:	4608      	mov	r0, r1
 800fc28:	4611      	mov	r1, r2
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	70fb      	strb	r3, [r7, #3]
 800fc30:	460b      	mov	r3, r1
 800fc32:	70bb      	strb	r3, [r7, #2]
 800fc34:	4613      	mov	r3, r2
 800fc36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc38:	2300      	movs	r3, #0
 800fc3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fc46:	78bb      	ldrb	r3, [r7, #2]
 800fc48:	883a      	ldrh	r2, [r7, #0]
 800fc4a:	78f9      	ldrb	r1, [r7, #3]
 800fc4c:	f7f8 fb51 	bl	80082f2 <HAL_PCD_EP_Open>
 800fc50:	4603      	mov	r3, r0
 800fc52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc54:	7bfb      	ldrb	r3, [r7, #15]
 800fc56:	4618      	mov	r0, r3
 800fc58:	f000 f91c 	bl	800fe94 <USBD_Get_USB_Status>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc60:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	3710      	adds	r7, #16
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}

0800fc6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc6a:	b580      	push	{r7, lr}
 800fc6c:	b084      	sub	sp, #16
 800fc6e:	af00      	add	r7, sp, #0
 800fc70:	6078      	str	r0, [r7, #4]
 800fc72:	460b      	mov	r3, r1
 800fc74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc76:	2300      	movs	r3, #0
 800fc78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc84:	78fa      	ldrb	r2, [r7, #3]
 800fc86:	4611      	mov	r1, r2
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7f8 fb9a 	bl	80083c2 <HAL_PCD_EP_Close>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc92:	7bfb      	ldrb	r3, [r7, #15]
 800fc94:	4618      	mov	r0, r3
 800fc96:	f000 f8fd 	bl	800fe94 <USBD_Get_USB_Status>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3710      	adds	r7, #16
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}

0800fca8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b084      	sub	sp, #16
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fcb8:	2300      	movs	r3, #0
 800fcba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fcc2:	78fa      	ldrb	r2, [r7, #3]
 800fcc4:	4611      	mov	r1, r2
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7f8 fc72 	bl	80085b0 <HAL_PCD_EP_SetStall>
 800fccc:	4603      	mov	r3, r0
 800fcce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcd0:	7bfb      	ldrb	r3, [r7, #15]
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f000 f8de 	bl	800fe94 <USBD_Get_USB_Status>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcde:	4618      	mov	r0, r3
 800fce0:	3710      	adds	r7, #16
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}

0800fce6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fce6:	b580      	push	{r7, lr}
 800fce8:	b084      	sub	sp, #16
 800fcea:	af00      	add	r7, sp, #0
 800fcec:	6078      	str	r0, [r7, #4]
 800fcee:	460b      	mov	r3, r1
 800fcf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd00:	78fa      	ldrb	r2, [r7, #3]
 800fd02:	4611      	mov	r1, r2
 800fd04:	4618      	mov	r0, r3
 800fd06:	f7f8 fcb7 	bl	8008678 <HAL_PCD_EP_ClrStall>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd0e:	7bfb      	ldrb	r3, [r7, #15]
 800fd10:	4618      	mov	r0, r3
 800fd12:	f000 f8bf 	bl	800fe94 <USBD_Get_USB_Status>
 800fd16:	4603      	mov	r3, r0
 800fd18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	3710      	adds	r7, #16
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd80      	pop	{r7, pc}

0800fd24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd24:	b480      	push	{r7}
 800fd26:	b085      	sub	sp, #20
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
 800fd2c:	460b      	mov	r3, r1
 800fd2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fd38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	da0b      	bge.n	800fd58 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fd40:	78fb      	ldrb	r3, [r7, #3]
 800fd42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd46:	68f9      	ldr	r1, [r7, #12]
 800fd48:	4613      	mov	r3, r2
 800fd4a:	00db      	lsls	r3, r3, #3
 800fd4c:	4413      	add	r3, r2
 800fd4e:	009b      	lsls	r3, r3, #2
 800fd50:	440b      	add	r3, r1
 800fd52:	333e      	adds	r3, #62	; 0x3e
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	e00b      	b.n	800fd70 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fd58:	78fb      	ldrb	r3, [r7, #3]
 800fd5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd5e:	68f9      	ldr	r1, [r7, #12]
 800fd60:	4613      	mov	r3, r2
 800fd62:	00db      	lsls	r3, r3, #3
 800fd64:	4413      	add	r3, r2
 800fd66:	009b      	lsls	r3, r3, #2
 800fd68:	440b      	add	r3, r1
 800fd6a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fd6e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fd70:	4618      	mov	r0, r3
 800fd72:	3714      	adds	r7, #20
 800fd74:	46bd      	mov	sp, r7
 800fd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7a:	4770      	bx	lr

0800fd7c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b084      	sub	sp, #16
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	460b      	mov	r3, r1
 800fd86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd88:	2300      	movs	r3, #0
 800fd8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd96:	78fa      	ldrb	r2, [r7, #3]
 800fd98:	4611      	mov	r1, r2
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f7f8 fa84 	bl	80082a8 <HAL_PCD_SetAddress>
 800fda0:	4603      	mov	r3, r0
 800fda2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fda4:	7bfb      	ldrb	r3, [r7, #15]
 800fda6:	4618      	mov	r0, r3
 800fda8:	f000 f874 	bl	800fe94 <USBD_Get_USB_Status>
 800fdac:	4603      	mov	r3, r0
 800fdae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fdb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3710      	adds	r7, #16
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}

0800fdba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fdba:	b580      	push	{r7, lr}
 800fdbc:	b086      	sub	sp, #24
 800fdbe:	af00      	add	r7, sp, #0
 800fdc0:	60f8      	str	r0, [r7, #12]
 800fdc2:	607a      	str	r2, [r7, #4]
 800fdc4:	603b      	str	r3, [r7, #0]
 800fdc6:	460b      	mov	r3, r1
 800fdc8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fdd8:	7af9      	ldrb	r1, [r7, #11]
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	687a      	ldr	r2, [r7, #4]
 800fdde:	f7f8 fb9d 	bl	800851c <HAL_PCD_EP_Transmit>
 800fde2:	4603      	mov	r3, r0
 800fde4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fde6:	7dfb      	ldrb	r3, [r7, #23]
 800fde8:	4618      	mov	r0, r3
 800fdea:	f000 f853 	bl	800fe94 <USBD_Get_USB_Status>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fdf2:	7dbb      	ldrb	r3, [r7, #22]
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3718      	adds	r7, #24
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b086      	sub	sp, #24
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	60f8      	str	r0, [r7, #12]
 800fe04:	607a      	str	r2, [r7, #4]
 800fe06:	603b      	str	r3, [r7, #0]
 800fe08:	460b      	mov	r3, r1
 800fe0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe10:	2300      	movs	r3, #0
 800fe12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fe1a:	7af9      	ldrb	r1, [r7, #11]
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	687a      	ldr	r2, [r7, #4]
 800fe20:	f7f8 fb19 	bl	8008456 <HAL_PCD_EP_Receive>
 800fe24:	4603      	mov	r3, r0
 800fe26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe28:	7dfb      	ldrb	r3, [r7, #23]
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f000 f832 	bl	800fe94 <USBD_Get_USB_Status>
 800fe30:	4603      	mov	r3, r0
 800fe32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fe34:	7dbb      	ldrb	r3, [r7, #22]
}
 800fe36:	4618      	mov	r0, r3
 800fe38:	3718      	adds	r7, #24
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd80      	pop	{r7, pc}

0800fe3e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe3e:	b580      	push	{r7, lr}
 800fe40:	b082      	sub	sp, #8
 800fe42:	af00      	add	r7, sp, #0
 800fe44:	6078      	str	r0, [r7, #4]
 800fe46:	460b      	mov	r3, r1
 800fe48:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fe50:	78fa      	ldrb	r2, [r7, #3]
 800fe52:	4611      	mov	r1, r2
 800fe54:	4618      	mov	r0, r3
 800fe56:	f7f8 fb49 	bl	80084ec <HAL_PCD_EP_GetRxCount>
 800fe5a:	4603      	mov	r3, r0
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3708      	adds	r7, #8
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}

0800fe64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fe64:	b480      	push	{r7}
 800fe66:	b083      	sub	sp, #12
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fe6c:	4b03      	ldr	r3, [pc, #12]	; (800fe7c <USBD_static_malloc+0x18>)
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	370c      	adds	r7, #12
 800fe72:	46bd      	mov	sp, r7
 800fe74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe78:	4770      	bx	lr
 800fe7a:	bf00      	nop
 800fe7c:	20005c64 	.word	0x20005c64

0800fe80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b083      	sub	sp, #12
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]

}
 800fe88:	bf00      	nop
 800fe8a:	370c      	adds	r7, #12
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe92:	4770      	bx	lr

0800fe94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b085      	sub	sp, #20
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fea2:	79fb      	ldrb	r3, [r7, #7]
 800fea4:	2b03      	cmp	r3, #3
 800fea6:	d817      	bhi.n	800fed8 <USBD_Get_USB_Status+0x44>
 800fea8:	a201      	add	r2, pc, #4	; (adr r2, 800feb0 <USBD_Get_USB_Status+0x1c>)
 800feaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feae:	bf00      	nop
 800feb0:	0800fec1 	.word	0x0800fec1
 800feb4:	0800fec7 	.word	0x0800fec7
 800feb8:	0800fecd 	.word	0x0800fecd
 800febc:	0800fed3 	.word	0x0800fed3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fec0:	2300      	movs	r3, #0
 800fec2:	73fb      	strb	r3, [r7, #15]
    break;
 800fec4:	e00b      	b.n	800fede <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fec6:	2303      	movs	r3, #3
 800fec8:	73fb      	strb	r3, [r7, #15]
    break;
 800feca:	e008      	b.n	800fede <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fecc:	2301      	movs	r3, #1
 800fece:	73fb      	strb	r3, [r7, #15]
    break;
 800fed0:	e005      	b.n	800fede <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fed2:	2303      	movs	r3, #3
 800fed4:	73fb      	strb	r3, [r7, #15]
    break;
 800fed6:	e002      	b.n	800fede <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fed8:	2303      	movs	r3, #3
 800feda:	73fb      	strb	r3, [r7, #15]
    break;
 800fedc:	bf00      	nop
  }
  return usb_status;
 800fede:	7bfb      	ldrb	r3, [r7, #15]
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	3714      	adds	r7, #20
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr

0800feec <__errno>:
 800feec:	4b01      	ldr	r3, [pc, #4]	; (800fef4 <__errno+0x8>)
 800feee:	6818      	ldr	r0, [r3, #0]
 800fef0:	4770      	bx	lr
 800fef2:	bf00      	nop
 800fef4:	20000114 	.word	0x20000114

0800fef8 <std>:
 800fef8:	2300      	movs	r3, #0
 800fefa:	b510      	push	{r4, lr}
 800fefc:	4604      	mov	r4, r0
 800fefe:	e9c0 3300 	strd	r3, r3, [r0]
 800ff02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff06:	6083      	str	r3, [r0, #8]
 800ff08:	8181      	strh	r1, [r0, #12]
 800ff0a:	6643      	str	r3, [r0, #100]	; 0x64
 800ff0c:	81c2      	strh	r2, [r0, #14]
 800ff0e:	6183      	str	r3, [r0, #24]
 800ff10:	4619      	mov	r1, r3
 800ff12:	2208      	movs	r2, #8
 800ff14:	305c      	adds	r0, #92	; 0x5c
 800ff16:	f000 f934 	bl	8010182 <memset>
 800ff1a:	4b05      	ldr	r3, [pc, #20]	; (800ff30 <std+0x38>)
 800ff1c:	6263      	str	r3, [r4, #36]	; 0x24
 800ff1e:	4b05      	ldr	r3, [pc, #20]	; (800ff34 <std+0x3c>)
 800ff20:	62a3      	str	r3, [r4, #40]	; 0x28
 800ff22:	4b05      	ldr	r3, [pc, #20]	; (800ff38 <std+0x40>)
 800ff24:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ff26:	4b05      	ldr	r3, [pc, #20]	; (800ff3c <std+0x44>)
 800ff28:	6224      	str	r4, [r4, #32]
 800ff2a:	6323      	str	r3, [r4, #48]	; 0x30
 800ff2c:	bd10      	pop	{r4, pc}
 800ff2e:	bf00      	nop
 800ff30:	08010de1 	.word	0x08010de1
 800ff34:	08010e03 	.word	0x08010e03
 800ff38:	08010e3b 	.word	0x08010e3b
 800ff3c:	08010e5f 	.word	0x08010e5f

0800ff40 <_cleanup_r>:
 800ff40:	4901      	ldr	r1, [pc, #4]	; (800ff48 <_cleanup_r+0x8>)
 800ff42:	f000 b8af 	b.w	80100a4 <_fwalk_reent>
 800ff46:	bf00      	nop
 800ff48:	08011f49 	.word	0x08011f49

0800ff4c <__sfmoreglue>:
 800ff4c:	b570      	push	{r4, r5, r6, lr}
 800ff4e:	2268      	movs	r2, #104	; 0x68
 800ff50:	1e4d      	subs	r5, r1, #1
 800ff52:	4355      	muls	r5, r2
 800ff54:	460e      	mov	r6, r1
 800ff56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ff5a:	f000 f93b 	bl	80101d4 <_malloc_r>
 800ff5e:	4604      	mov	r4, r0
 800ff60:	b140      	cbz	r0, 800ff74 <__sfmoreglue+0x28>
 800ff62:	2100      	movs	r1, #0
 800ff64:	e9c0 1600 	strd	r1, r6, [r0]
 800ff68:	300c      	adds	r0, #12
 800ff6a:	60a0      	str	r0, [r4, #8]
 800ff6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ff70:	f000 f907 	bl	8010182 <memset>
 800ff74:	4620      	mov	r0, r4
 800ff76:	bd70      	pop	{r4, r5, r6, pc}

0800ff78 <__sfp_lock_acquire>:
 800ff78:	4801      	ldr	r0, [pc, #4]	; (800ff80 <__sfp_lock_acquire+0x8>)
 800ff7a:	f000 b8d8 	b.w	801012e <__retarget_lock_acquire_recursive>
 800ff7e:	bf00      	nop
 800ff80:	20005e85 	.word	0x20005e85

0800ff84 <__sfp_lock_release>:
 800ff84:	4801      	ldr	r0, [pc, #4]	; (800ff8c <__sfp_lock_release+0x8>)
 800ff86:	f000 b8d3 	b.w	8010130 <__retarget_lock_release_recursive>
 800ff8a:	bf00      	nop
 800ff8c:	20005e85 	.word	0x20005e85

0800ff90 <__sinit_lock_acquire>:
 800ff90:	4801      	ldr	r0, [pc, #4]	; (800ff98 <__sinit_lock_acquire+0x8>)
 800ff92:	f000 b8cc 	b.w	801012e <__retarget_lock_acquire_recursive>
 800ff96:	bf00      	nop
 800ff98:	20005e86 	.word	0x20005e86

0800ff9c <__sinit_lock_release>:
 800ff9c:	4801      	ldr	r0, [pc, #4]	; (800ffa4 <__sinit_lock_release+0x8>)
 800ff9e:	f000 b8c7 	b.w	8010130 <__retarget_lock_release_recursive>
 800ffa2:	bf00      	nop
 800ffa4:	20005e86 	.word	0x20005e86

0800ffa8 <__sinit>:
 800ffa8:	b510      	push	{r4, lr}
 800ffaa:	4604      	mov	r4, r0
 800ffac:	f7ff fff0 	bl	800ff90 <__sinit_lock_acquire>
 800ffb0:	69a3      	ldr	r3, [r4, #24]
 800ffb2:	b11b      	cbz	r3, 800ffbc <__sinit+0x14>
 800ffb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffb8:	f7ff bff0 	b.w	800ff9c <__sinit_lock_release>
 800ffbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ffc0:	6523      	str	r3, [r4, #80]	; 0x50
 800ffc2:	4b13      	ldr	r3, [pc, #76]	; (8010010 <__sinit+0x68>)
 800ffc4:	4a13      	ldr	r2, [pc, #76]	; (8010014 <__sinit+0x6c>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	62a2      	str	r2, [r4, #40]	; 0x28
 800ffca:	42a3      	cmp	r3, r4
 800ffcc:	bf04      	itt	eq
 800ffce:	2301      	moveq	r3, #1
 800ffd0:	61a3      	streq	r3, [r4, #24]
 800ffd2:	4620      	mov	r0, r4
 800ffd4:	f000 f820 	bl	8010018 <__sfp>
 800ffd8:	6060      	str	r0, [r4, #4]
 800ffda:	4620      	mov	r0, r4
 800ffdc:	f000 f81c 	bl	8010018 <__sfp>
 800ffe0:	60a0      	str	r0, [r4, #8]
 800ffe2:	4620      	mov	r0, r4
 800ffe4:	f000 f818 	bl	8010018 <__sfp>
 800ffe8:	2200      	movs	r2, #0
 800ffea:	60e0      	str	r0, [r4, #12]
 800ffec:	2104      	movs	r1, #4
 800ffee:	6860      	ldr	r0, [r4, #4]
 800fff0:	f7ff ff82 	bl	800fef8 <std>
 800fff4:	68a0      	ldr	r0, [r4, #8]
 800fff6:	2201      	movs	r2, #1
 800fff8:	2109      	movs	r1, #9
 800fffa:	f7ff ff7d 	bl	800fef8 <std>
 800fffe:	68e0      	ldr	r0, [r4, #12]
 8010000:	2202      	movs	r2, #2
 8010002:	2112      	movs	r1, #18
 8010004:	f7ff ff78 	bl	800fef8 <std>
 8010008:	2301      	movs	r3, #1
 801000a:	61a3      	str	r3, [r4, #24]
 801000c:	e7d2      	b.n	800ffb4 <__sinit+0xc>
 801000e:	bf00      	nop
 8010010:	0801488c 	.word	0x0801488c
 8010014:	0800ff41 	.word	0x0800ff41

08010018 <__sfp>:
 8010018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801001a:	4607      	mov	r7, r0
 801001c:	f7ff ffac 	bl	800ff78 <__sfp_lock_acquire>
 8010020:	4b1e      	ldr	r3, [pc, #120]	; (801009c <__sfp+0x84>)
 8010022:	681e      	ldr	r6, [r3, #0]
 8010024:	69b3      	ldr	r3, [r6, #24]
 8010026:	b913      	cbnz	r3, 801002e <__sfp+0x16>
 8010028:	4630      	mov	r0, r6
 801002a:	f7ff ffbd 	bl	800ffa8 <__sinit>
 801002e:	3648      	adds	r6, #72	; 0x48
 8010030:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010034:	3b01      	subs	r3, #1
 8010036:	d503      	bpl.n	8010040 <__sfp+0x28>
 8010038:	6833      	ldr	r3, [r6, #0]
 801003a:	b30b      	cbz	r3, 8010080 <__sfp+0x68>
 801003c:	6836      	ldr	r6, [r6, #0]
 801003e:	e7f7      	b.n	8010030 <__sfp+0x18>
 8010040:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010044:	b9d5      	cbnz	r5, 801007c <__sfp+0x64>
 8010046:	4b16      	ldr	r3, [pc, #88]	; (80100a0 <__sfp+0x88>)
 8010048:	60e3      	str	r3, [r4, #12]
 801004a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801004e:	6665      	str	r5, [r4, #100]	; 0x64
 8010050:	f000 f86c 	bl	801012c <__retarget_lock_init_recursive>
 8010054:	f7ff ff96 	bl	800ff84 <__sfp_lock_release>
 8010058:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801005c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010060:	6025      	str	r5, [r4, #0]
 8010062:	61a5      	str	r5, [r4, #24]
 8010064:	2208      	movs	r2, #8
 8010066:	4629      	mov	r1, r5
 8010068:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801006c:	f000 f889 	bl	8010182 <memset>
 8010070:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010074:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010078:	4620      	mov	r0, r4
 801007a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801007c:	3468      	adds	r4, #104	; 0x68
 801007e:	e7d9      	b.n	8010034 <__sfp+0x1c>
 8010080:	2104      	movs	r1, #4
 8010082:	4638      	mov	r0, r7
 8010084:	f7ff ff62 	bl	800ff4c <__sfmoreglue>
 8010088:	4604      	mov	r4, r0
 801008a:	6030      	str	r0, [r6, #0]
 801008c:	2800      	cmp	r0, #0
 801008e:	d1d5      	bne.n	801003c <__sfp+0x24>
 8010090:	f7ff ff78 	bl	800ff84 <__sfp_lock_release>
 8010094:	230c      	movs	r3, #12
 8010096:	603b      	str	r3, [r7, #0]
 8010098:	e7ee      	b.n	8010078 <__sfp+0x60>
 801009a:	bf00      	nop
 801009c:	0801488c 	.word	0x0801488c
 80100a0:	ffff0001 	.word	0xffff0001

080100a4 <_fwalk_reent>:
 80100a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100a8:	4606      	mov	r6, r0
 80100aa:	4688      	mov	r8, r1
 80100ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80100b0:	2700      	movs	r7, #0
 80100b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80100b6:	f1b9 0901 	subs.w	r9, r9, #1
 80100ba:	d505      	bpl.n	80100c8 <_fwalk_reent+0x24>
 80100bc:	6824      	ldr	r4, [r4, #0]
 80100be:	2c00      	cmp	r4, #0
 80100c0:	d1f7      	bne.n	80100b2 <_fwalk_reent+0xe>
 80100c2:	4638      	mov	r0, r7
 80100c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100c8:	89ab      	ldrh	r3, [r5, #12]
 80100ca:	2b01      	cmp	r3, #1
 80100cc:	d907      	bls.n	80100de <_fwalk_reent+0x3a>
 80100ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80100d2:	3301      	adds	r3, #1
 80100d4:	d003      	beq.n	80100de <_fwalk_reent+0x3a>
 80100d6:	4629      	mov	r1, r5
 80100d8:	4630      	mov	r0, r6
 80100da:	47c0      	blx	r8
 80100dc:	4307      	orrs	r7, r0
 80100de:	3568      	adds	r5, #104	; 0x68
 80100e0:	e7e9      	b.n	80100b6 <_fwalk_reent+0x12>
	...

080100e4 <__libc_init_array>:
 80100e4:	b570      	push	{r4, r5, r6, lr}
 80100e6:	4d0d      	ldr	r5, [pc, #52]	; (801011c <__libc_init_array+0x38>)
 80100e8:	4c0d      	ldr	r4, [pc, #52]	; (8010120 <__libc_init_array+0x3c>)
 80100ea:	1b64      	subs	r4, r4, r5
 80100ec:	10a4      	asrs	r4, r4, #2
 80100ee:	2600      	movs	r6, #0
 80100f0:	42a6      	cmp	r6, r4
 80100f2:	d109      	bne.n	8010108 <__libc_init_array+0x24>
 80100f4:	4d0b      	ldr	r5, [pc, #44]	; (8010124 <__libc_init_array+0x40>)
 80100f6:	4c0c      	ldr	r4, [pc, #48]	; (8010128 <__libc_init_array+0x44>)
 80100f8:	f002 ff94 	bl	8013024 <_init>
 80100fc:	1b64      	subs	r4, r4, r5
 80100fe:	10a4      	asrs	r4, r4, #2
 8010100:	2600      	movs	r6, #0
 8010102:	42a6      	cmp	r6, r4
 8010104:	d105      	bne.n	8010112 <__libc_init_array+0x2e>
 8010106:	bd70      	pop	{r4, r5, r6, pc}
 8010108:	f855 3b04 	ldr.w	r3, [r5], #4
 801010c:	4798      	blx	r3
 801010e:	3601      	adds	r6, #1
 8010110:	e7ee      	b.n	80100f0 <__libc_init_array+0xc>
 8010112:	f855 3b04 	ldr.w	r3, [r5], #4
 8010116:	4798      	blx	r3
 8010118:	3601      	adds	r6, #1
 801011a:	e7f2      	b.n	8010102 <__libc_init_array+0x1e>
 801011c:	08014c14 	.word	0x08014c14
 8010120:	08014c14 	.word	0x08014c14
 8010124:	08014c14 	.word	0x08014c14
 8010128:	08014c18 	.word	0x08014c18

0801012c <__retarget_lock_init_recursive>:
 801012c:	4770      	bx	lr

0801012e <__retarget_lock_acquire_recursive>:
 801012e:	4770      	bx	lr

08010130 <__retarget_lock_release_recursive>:
 8010130:	4770      	bx	lr

08010132 <memcpy>:
 8010132:	440a      	add	r2, r1
 8010134:	4291      	cmp	r1, r2
 8010136:	f100 33ff 	add.w	r3, r0, #4294967295
 801013a:	d100      	bne.n	801013e <memcpy+0xc>
 801013c:	4770      	bx	lr
 801013e:	b510      	push	{r4, lr}
 8010140:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010144:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010148:	4291      	cmp	r1, r2
 801014a:	d1f9      	bne.n	8010140 <memcpy+0xe>
 801014c:	bd10      	pop	{r4, pc}

0801014e <memmove>:
 801014e:	4288      	cmp	r0, r1
 8010150:	b510      	push	{r4, lr}
 8010152:	eb01 0402 	add.w	r4, r1, r2
 8010156:	d902      	bls.n	801015e <memmove+0x10>
 8010158:	4284      	cmp	r4, r0
 801015a:	4623      	mov	r3, r4
 801015c:	d807      	bhi.n	801016e <memmove+0x20>
 801015e:	1e43      	subs	r3, r0, #1
 8010160:	42a1      	cmp	r1, r4
 8010162:	d008      	beq.n	8010176 <memmove+0x28>
 8010164:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010168:	f803 2f01 	strb.w	r2, [r3, #1]!
 801016c:	e7f8      	b.n	8010160 <memmove+0x12>
 801016e:	4402      	add	r2, r0
 8010170:	4601      	mov	r1, r0
 8010172:	428a      	cmp	r2, r1
 8010174:	d100      	bne.n	8010178 <memmove+0x2a>
 8010176:	bd10      	pop	{r4, pc}
 8010178:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801017c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010180:	e7f7      	b.n	8010172 <memmove+0x24>

08010182 <memset>:
 8010182:	4402      	add	r2, r0
 8010184:	4603      	mov	r3, r0
 8010186:	4293      	cmp	r3, r2
 8010188:	d100      	bne.n	801018c <memset+0xa>
 801018a:	4770      	bx	lr
 801018c:	f803 1b01 	strb.w	r1, [r3], #1
 8010190:	e7f9      	b.n	8010186 <memset+0x4>
	...

08010194 <sbrk_aligned>:
 8010194:	b570      	push	{r4, r5, r6, lr}
 8010196:	4e0e      	ldr	r6, [pc, #56]	; (80101d0 <sbrk_aligned+0x3c>)
 8010198:	460c      	mov	r4, r1
 801019a:	6831      	ldr	r1, [r6, #0]
 801019c:	4605      	mov	r5, r0
 801019e:	b911      	cbnz	r1, 80101a6 <sbrk_aligned+0x12>
 80101a0:	f000 fdee 	bl	8010d80 <_sbrk_r>
 80101a4:	6030      	str	r0, [r6, #0]
 80101a6:	4621      	mov	r1, r4
 80101a8:	4628      	mov	r0, r5
 80101aa:	f000 fde9 	bl	8010d80 <_sbrk_r>
 80101ae:	1c43      	adds	r3, r0, #1
 80101b0:	d00a      	beq.n	80101c8 <sbrk_aligned+0x34>
 80101b2:	1cc4      	adds	r4, r0, #3
 80101b4:	f024 0403 	bic.w	r4, r4, #3
 80101b8:	42a0      	cmp	r0, r4
 80101ba:	d007      	beq.n	80101cc <sbrk_aligned+0x38>
 80101bc:	1a21      	subs	r1, r4, r0
 80101be:	4628      	mov	r0, r5
 80101c0:	f000 fdde 	bl	8010d80 <_sbrk_r>
 80101c4:	3001      	adds	r0, #1
 80101c6:	d101      	bne.n	80101cc <sbrk_aligned+0x38>
 80101c8:	f04f 34ff 	mov.w	r4, #4294967295
 80101cc:	4620      	mov	r0, r4
 80101ce:	bd70      	pop	{r4, r5, r6, pc}
 80101d0:	20005e8c 	.word	0x20005e8c

080101d4 <_malloc_r>:
 80101d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101d8:	1ccd      	adds	r5, r1, #3
 80101da:	f025 0503 	bic.w	r5, r5, #3
 80101de:	3508      	adds	r5, #8
 80101e0:	2d0c      	cmp	r5, #12
 80101e2:	bf38      	it	cc
 80101e4:	250c      	movcc	r5, #12
 80101e6:	2d00      	cmp	r5, #0
 80101e8:	4607      	mov	r7, r0
 80101ea:	db01      	blt.n	80101f0 <_malloc_r+0x1c>
 80101ec:	42a9      	cmp	r1, r5
 80101ee:	d905      	bls.n	80101fc <_malloc_r+0x28>
 80101f0:	230c      	movs	r3, #12
 80101f2:	603b      	str	r3, [r7, #0]
 80101f4:	2600      	movs	r6, #0
 80101f6:	4630      	mov	r0, r6
 80101f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101fc:	4e2e      	ldr	r6, [pc, #184]	; (80102b8 <_malloc_r+0xe4>)
 80101fe:	f001 ff63 	bl	80120c8 <__malloc_lock>
 8010202:	6833      	ldr	r3, [r6, #0]
 8010204:	461c      	mov	r4, r3
 8010206:	bb34      	cbnz	r4, 8010256 <_malloc_r+0x82>
 8010208:	4629      	mov	r1, r5
 801020a:	4638      	mov	r0, r7
 801020c:	f7ff ffc2 	bl	8010194 <sbrk_aligned>
 8010210:	1c43      	adds	r3, r0, #1
 8010212:	4604      	mov	r4, r0
 8010214:	d14d      	bne.n	80102b2 <_malloc_r+0xde>
 8010216:	6834      	ldr	r4, [r6, #0]
 8010218:	4626      	mov	r6, r4
 801021a:	2e00      	cmp	r6, #0
 801021c:	d140      	bne.n	80102a0 <_malloc_r+0xcc>
 801021e:	6823      	ldr	r3, [r4, #0]
 8010220:	4631      	mov	r1, r6
 8010222:	4638      	mov	r0, r7
 8010224:	eb04 0803 	add.w	r8, r4, r3
 8010228:	f000 fdaa 	bl	8010d80 <_sbrk_r>
 801022c:	4580      	cmp	r8, r0
 801022e:	d13a      	bne.n	80102a6 <_malloc_r+0xd2>
 8010230:	6821      	ldr	r1, [r4, #0]
 8010232:	3503      	adds	r5, #3
 8010234:	1a6d      	subs	r5, r5, r1
 8010236:	f025 0503 	bic.w	r5, r5, #3
 801023a:	3508      	adds	r5, #8
 801023c:	2d0c      	cmp	r5, #12
 801023e:	bf38      	it	cc
 8010240:	250c      	movcc	r5, #12
 8010242:	4629      	mov	r1, r5
 8010244:	4638      	mov	r0, r7
 8010246:	f7ff ffa5 	bl	8010194 <sbrk_aligned>
 801024a:	3001      	adds	r0, #1
 801024c:	d02b      	beq.n	80102a6 <_malloc_r+0xd2>
 801024e:	6823      	ldr	r3, [r4, #0]
 8010250:	442b      	add	r3, r5
 8010252:	6023      	str	r3, [r4, #0]
 8010254:	e00e      	b.n	8010274 <_malloc_r+0xa0>
 8010256:	6822      	ldr	r2, [r4, #0]
 8010258:	1b52      	subs	r2, r2, r5
 801025a:	d41e      	bmi.n	801029a <_malloc_r+0xc6>
 801025c:	2a0b      	cmp	r2, #11
 801025e:	d916      	bls.n	801028e <_malloc_r+0xba>
 8010260:	1961      	adds	r1, r4, r5
 8010262:	42a3      	cmp	r3, r4
 8010264:	6025      	str	r5, [r4, #0]
 8010266:	bf18      	it	ne
 8010268:	6059      	strne	r1, [r3, #4]
 801026a:	6863      	ldr	r3, [r4, #4]
 801026c:	bf08      	it	eq
 801026e:	6031      	streq	r1, [r6, #0]
 8010270:	5162      	str	r2, [r4, r5]
 8010272:	604b      	str	r3, [r1, #4]
 8010274:	4638      	mov	r0, r7
 8010276:	f104 060b 	add.w	r6, r4, #11
 801027a:	f001 ff2b 	bl	80120d4 <__malloc_unlock>
 801027e:	f026 0607 	bic.w	r6, r6, #7
 8010282:	1d23      	adds	r3, r4, #4
 8010284:	1af2      	subs	r2, r6, r3
 8010286:	d0b6      	beq.n	80101f6 <_malloc_r+0x22>
 8010288:	1b9b      	subs	r3, r3, r6
 801028a:	50a3      	str	r3, [r4, r2]
 801028c:	e7b3      	b.n	80101f6 <_malloc_r+0x22>
 801028e:	6862      	ldr	r2, [r4, #4]
 8010290:	42a3      	cmp	r3, r4
 8010292:	bf0c      	ite	eq
 8010294:	6032      	streq	r2, [r6, #0]
 8010296:	605a      	strne	r2, [r3, #4]
 8010298:	e7ec      	b.n	8010274 <_malloc_r+0xa0>
 801029a:	4623      	mov	r3, r4
 801029c:	6864      	ldr	r4, [r4, #4]
 801029e:	e7b2      	b.n	8010206 <_malloc_r+0x32>
 80102a0:	4634      	mov	r4, r6
 80102a2:	6876      	ldr	r6, [r6, #4]
 80102a4:	e7b9      	b.n	801021a <_malloc_r+0x46>
 80102a6:	230c      	movs	r3, #12
 80102a8:	603b      	str	r3, [r7, #0]
 80102aa:	4638      	mov	r0, r7
 80102ac:	f001 ff12 	bl	80120d4 <__malloc_unlock>
 80102b0:	e7a1      	b.n	80101f6 <_malloc_r+0x22>
 80102b2:	6025      	str	r5, [r4, #0]
 80102b4:	e7de      	b.n	8010274 <_malloc_r+0xa0>
 80102b6:	bf00      	nop
 80102b8:	20005e88 	.word	0x20005e88

080102bc <__cvt>:
 80102bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80102c0:	ec55 4b10 	vmov	r4, r5, d0
 80102c4:	2d00      	cmp	r5, #0
 80102c6:	460e      	mov	r6, r1
 80102c8:	4619      	mov	r1, r3
 80102ca:	462b      	mov	r3, r5
 80102cc:	bfbb      	ittet	lt
 80102ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80102d2:	461d      	movlt	r5, r3
 80102d4:	2300      	movge	r3, #0
 80102d6:	232d      	movlt	r3, #45	; 0x2d
 80102d8:	700b      	strb	r3, [r1, #0]
 80102da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80102e0:	4691      	mov	r9, r2
 80102e2:	f023 0820 	bic.w	r8, r3, #32
 80102e6:	bfbc      	itt	lt
 80102e8:	4622      	movlt	r2, r4
 80102ea:	4614      	movlt	r4, r2
 80102ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80102f0:	d005      	beq.n	80102fe <__cvt+0x42>
 80102f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80102f6:	d100      	bne.n	80102fa <__cvt+0x3e>
 80102f8:	3601      	adds	r6, #1
 80102fa:	2102      	movs	r1, #2
 80102fc:	e000      	b.n	8010300 <__cvt+0x44>
 80102fe:	2103      	movs	r1, #3
 8010300:	ab03      	add	r3, sp, #12
 8010302:	9301      	str	r3, [sp, #4]
 8010304:	ab02      	add	r3, sp, #8
 8010306:	9300      	str	r3, [sp, #0]
 8010308:	ec45 4b10 	vmov	d0, r4, r5
 801030c:	4653      	mov	r3, sl
 801030e:	4632      	mov	r2, r6
 8010310:	f000 ffa6 	bl	8011260 <_dtoa_r>
 8010314:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010318:	4607      	mov	r7, r0
 801031a:	d102      	bne.n	8010322 <__cvt+0x66>
 801031c:	f019 0f01 	tst.w	r9, #1
 8010320:	d022      	beq.n	8010368 <__cvt+0xac>
 8010322:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010326:	eb07 0906 	add.w	r9, r7, r6
 801032a:	d110      	bne.n	801034e <__cvt+0x92>
 801032c:	783b      	ldrb	r3, [r7, #0]
 801032e:	2b30      	cmp	r3, #48	; 0x30
 8010330:	d10a      	bne.n	8010348 <__cvt+0x8c>
 8010332:	2200      	movs	r2, #0
 8010334:	2300      	movs	r3, #0
 8010336:	4620      	mov	r0, r4
 8010338:	4629      	mov	r1, r5
 801033a:	f7f0 fbcd 	bl	8000ad8 <__aeabi_dcmpeq>
 801033e:	b918      	cbnz	r0, 8010348 <__cvt+0x8c>
 8010340:	f1c6 0601 	rsb	r6, r6, #1
 8010344:	f8ca 6000 	str.w	r6, [sl]
 8010348:	f8da 3000 	ldr.w	r3, [sl]
 801034c:	4499      	add	r9, r3
 801034e:	2200      	movs	r2, #0
 8010350:	2300      	movs	r3, #0
 8010352:	4620      	mov	r0, r4
 8010354:	4629      	mov	r1, r5
 8010356:	f7f0 fbbf 	bl	8000ad8 <__aeabi_dcmpeq>
 801035a:	b108      	cbz	r0, 8010360 <__cvt+0xa4>
 801035c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010360:	2230      	movs	r2, #48	; 0x30
 8010362:	9b03      	ldr	r3, [sp, #12]
 8010364:	454b      	cmp	r3, r9
 8010366:	d307      	bcc.n	8010378 <__cvt+0xbc>
 8010368:	9b03      	ldr	r3, [sp, #12]
 801036a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801036c:	1bdb      	subs	r3, r3, r7
 801036e:	4638      	mov	r0, r7
 8010370:	6013      	str	r3, [r2, #0]
 8010372:	b004      	add	sp, #16
 8010374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010378:	1c59      	adds	r1, r3, #1
 801037a:	9103      	str	r1, [sp, #12]
 801037c:	701a      	strb	r2, [r3, #0]
 801037e:	e7f0      	b.n	8010362 <__cvt+0xa6>

08010380 <__exponent>:
 8010380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010382:	4603      	mov	r3, r0
 8010384:	2900      	cmp	r1, #0
 8010386:	bfb8      	it	lt
 8010388:	4249      	neglt	r1, r1
 801038a:	f803 2b02 	strb.w	r2, [r3], #2
 801038e:	bfb4      	ite	lt
 8010390:	222d      	movlt	r2, #45	; 0x2d
 8010392:	222b      	movge	r2, #43	; 0x2b
 8010394:	2909      	cmp	r1, #9
 8010396:	7042      	strb	r2, [r0, #1]
 8010398:	dd2a      	ble.n	80103f0 <__exponent+0x70>
 801039a:	f10d 0407 	add.w	r4, sp, #7
 801039e:	46a4      	mov	ip, r4
 80103a0:	270a      	movs	r7, #10
 80103a2:	46a6      	mov	lr, r4
 80103a4:	460a      	mov	r2, r1
 80103a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80103aa:	fb07 1516 	mls	r5, r7, r6, r1
 80103ae:	3530      	adds	r5, #48	; 0x30
 80103b0:	2a63      	cmp	r2, #99	; 0x63
 80103b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80103b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80103ba:	4631      	mov	r1, r6
 80103bc:	dcf1      	bgt.n	80103a2 <__exponent+0x22>
 80103be:	3130      	adds	r1, #48	; 0x30
 80103c0:	f1ae 0502 	sub.w	r5, lr, #2
 80103c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80103c8:	1c44      	adds	r4, r0, #1
 80103ca:	4629      	mov	r1, r5
 80103cc:	4561      	cmp	r1, ip
 80103ce:	d30a      	bcc.n	80103e6 <__exponent+0x66>
 80103d0:	f10d 0209 	add.w	r2, sp, #9
 80103d4:	eba2 020e 	sub.w	r2, r2, lr
 80103d8:	4565      	cmp	r5, ip
 80103da:	bf88      	it	hi
 80103dc:	2200      	movhi	r2, #0
 80103de:	4413      	add	r3, r2
 80103e0:	1a18      	subs	r0, r3, r0
 80103e2:	b003      	add	sp, #12
 80103e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80103ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80103ee:	e7ed      	b.n	80103cc <__exponent+0x4c>
 80103f0:	2330      	movs	r3, #48	; 0x30
 80103f2:	3130      	adds	r1, #48	; 0x30
 80103f4:	7083      	strb	r3, [r0, #2]
 80103f6:	70c1      	strb	r1, [r0, #3]
 80103f8:	1d03      	adds	r3, r0, #4
 80103fa:	e7f1      	b.n	80103e0 <__exponent+0x60>

080103fc <_printf_float>:
 80103fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010400:	ed2d 8b02 	vpush	{d8}
 8010404:	b08d      	sub	sp, #52	; 0x34
 8010406:	460c      	mov	r4, r1
 8010408:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801040c:	4616      	mov	r6, r2
 801040e:	461f      	mov	r7, r3
 8010410:	4605      	mov	r5, r0
 8010412:	f001 fdd5 	bl	8011fc0 <_localeconv_r>
 8010416:	f8d0 a000 	ldr.w	sl, [r0]
 801041a:	4650      	mov	r0, sl
 801041c:	f7ef fee0 	bl	80001e0 <strlen>
 8010420:	2300      	movs	r3, #0
 8010422:	930a      	str	r3, [sp, #40]	; 0x28
 8010424:	6823      	ldr	r3, [r4, #0]
 8010426:	9305      	str	r3, [sp, #20]
 8010428:	f8d8 3000 	ldr.w	r3, [r8]
 801042c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010430:	3307      	adds	r3, #7
 8010432:	f023 0307 	bic.w	r3, r3, #7
 8010436:	f103 0208 	add.w	r2, r3, #8
 801043a:	f8c8 2000 	str.w	r2, [r8]
 801043e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010442:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010446:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801044a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801044e:	9307      	str	r3, [sp, #28]
 8010450:	f8cd 8018 	str.w	r8, [sp, #24]
 8010454:	ee08 0a10 	vmov	s16, r0
 8010458:	4b9f      	ldr	r3, [pc, #636]	; (80106d8 <_printf_float+0x2dc>)
 801045a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801045e:	f04f 32ff 	mov.w	r2, #4294967295
 8010462:	f7f0 fb6b 	bl	8000b3c <__aeabi_dcmpun>
 8010466:	bb88      	cbnz	r0, 80104cc <_printf_float+0xd0>
 8010468:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801046c:	4b9a      	ldr	r3, [pc, #616]	; (80106d8 <_printf_float+0x2dc>)
 801046e:	f04f 32ff 	mov.w	r2, #4294967295
 8010472:	f7f0 fb45 	bl	8000b00 <__aeabi_dcmple>
 8010476:	bb48      	cbnz	r0, 80104cc <_printf_float+0xd0>
 8010478:	2200      	movs	r2, #0
 801047a:	2300      	movs	r3, #0
 801047c:	4640      	mov	r0, r8
 801047e:	4649      	mov	r1, r9
 8010480:	f7f0 fb34 	bl	8000aec <__aeabi_dcmplt>
 8010484:	b110      	cbz	r0, 801048c <_printf_float+0x90>
 8010486:	232d      	movs	r3, #45	; 0x2d
 8010488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801048c:	4b93      	ldr	r3, [pc, #588]	; (80106dc <_printf_float+0x2e0>)
 801048e:	4894      	ldr	r0, [pc, #592]	; (80106e0 <_printf_float+0x2e4>)
 8010490:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010494:	bf94      	ite	ls
 8010496:	4698      	movls	r8, r3
 8010498:	4680      	movhi	r8, r0
 801049a:	2303      	movs	r3, #3
 801049c:	6123      	str	r3, [r4, #16]
 801049e:	9b05      	ldr	r3, [sp, #20]
 80104a0:	f023 0204 	bic.w	r2, r3, #4
 80104a4:	6022      	str	r2, [r4, #0]
 80104a6:	f04f 0900 	mov.w	r9, #0
 80104aa:	9700      	str	r7, [sp, #0]
 80104ac:	4633      	mov	r3, r6
 80104ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80104b0:	4621      	mov	r1, r4
 80104b2:	4628      	mov	r0, r5
 80104b4:	f000 f9d8 	bl	8010868 <_printf_common>
 80104b8:	3001      	adds	r0, #1
 80104ba:	f040 8090 	bne.w	80105de <_printf_float+0x1e2>
 80104be:	f04f 30ff 	mov.w	r0, #4294967295
 80104c2:	b00d      	add	sp, #52	; 0x34
 80104c4:	ecbd 8b02 	vpop	{d8}
 80104c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104cc:	4642      	mov	r2, r8
 80104ce:	464b      	mov	r3, r9
 80104d0:	4640      	mov	r0, r8
 80104d2:	4649      	mov	r1, r9
 80104d4:	f7f0 fb32 	bl	8000b3c <__aeabi_dcmpun>
 80104d8:	b140      	cbz	r0, 80104ec <_printf_float+0xf0>
 80104da:	464b      	mov	r3, r9
 80104dc:	2b00      	cmp	r3, #0
 80104de:	bfbc      	itt	lt
 80104e0:	232d      	movlt	r3, #45	; 0x2d
 80104e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80104e6:	487f      	ldr	r0, [pc, #508]	; (80106e4 <_printf_float+0x2e8>)
 80104e8:	4b7f      	ldr	r3, [pc, #508]	; (80106e8 <_printf_float+0x2ec>)
 80104ea:	e7d1      	b.n	8010490 <_printf_float+0x94>
 80104ec:	6863      	ldr	r3, [r4, #4]
 80104ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80104f2:	9206      	str	r2, [sp, #24]
 80104f4:	1c5a      	adds	r2, r3, #1
 80104f6:	d13f      	bne.n	8010578 <_printf_float+0x17c>
 80104f8:	2306      	movs	r3, #6
 80104fa:	6063      	str	r3, [r4, #4]
 80104fc:	9b05      	ldr	r3, [sp, #20]
 80104fe:	6861      	ldr	r1, [r4, #4]
 8010500:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010504:	2300      	movs	r3, #0
 8010506:	9303      	str	r3, [sp, #12]
 8010508:	ab0a      	add	r3, sp, #40	; 0x28
 801050a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801050e:	ab09      	add	r3, sp, #36	; 0x24
 8010510:	ec49 8b10 	vmov	d0, r8, r9
 8010514:	9300      	str	r3, [sp, #0]
 8010516:	6022      	str	r2, [r4, #0]
 8010518:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801051c:	4628      	mov	r0, r5
 801051e:	f7ff fecd 	bl	80102bc <__cvt>
 8010522:	9b06      	ldr	r3, [sp, #24]
 8010524:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010526:	2b47      	cmp	r3, #71	; 0x47
 8010528:	4680      	mov	r8, r0
 801052a:	d108      	bne.n	801053e <_printf_float+0x142>
 801052c:	1cc8      	adds	r0, r1, #3
 801052e:	db02      	blt.n	8010536 <_printf_float+0x13a>
 8010530:	6863      	ldr	r3, [r4, #4]
 8010532:	4299      	cmp	r1, r3
 8010534:	dd41      	ble.n	80105ba <_printf_float+0x1be>
 8010536:	f1ab 0b02 	sub.w	fp, fp, #2
 801053a:	fa5f fb8b 	uxtb.w	fp, fp
 801053e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010542:	d820      	bhi.n	8010586 <_printf_float+0x18a>
 8010544:	3901      	subs	r1, #1
 8010546:	465a      	mov	r2, fp
 8010548:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801054c:	9109      	str	r1, [sp, #36]	; 0x24
 801054e:	f7ff ff17 	bl	8010380 <__exponent>
 8010552:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010554:	1813      	adds	r3, r2, r0
 8010556:	2a01      	cmp	r2, #1
 8010558:	4681      	mov	r9, r0
 801055a:	6123      	str	r3, [r4, #16]
 801055c:	dc02      	bgt.n	8010564 <_printf_float+0x168>
 801055e:	6822      	ldr	r2, [r4, #0]
 8010560:	07d2      	lsls	r2, r2, #31
 8010562:	d501      	bpl.n	8010568 <_printf_float+0x16c>
 8010564:	3301      	adds	r3, #1
 8010566:	6123      	str	r3, [r4, #16]
 8010568:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801056c:	2b00      	cmp	r3, #0
 801056e:	d09c      	beq.n	80104aa <_printf_float+0xae>
 8010570:	232d      	movs	r3, #45	; 0x2d
 8010572:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010576:	e798      	b.n	80104aa <_printf_float+0xae>
 8010578:	9a06      	ldr	r2, [sp, #24]
 801057a:	2a47      	cmp	r2, #71	; 0x47
 801057c:	d1be      	bne.n	80104fc <_printf_float+0x100>
 801057e:	2b00      	cmp	r3, #0
 8010580:	d1bc      	bne.n	80104fc <_printf_float+0x100>
 8010582:	2301      	movs	r3, #1
 8010584:	e7b9      	b.n	80104fa <_printf_float+0xfe>
 8010586:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801058a:	d118      	bne.n	80105be <_printf_float+0x1c2>
 801058c:	2900      	cmp	r1, #0
 801058e:	6863      	ldr	r3, [r4, #4]
 8010590:	dd0b      	ble.n	80105aa <_printf_float+0x1ae>
 8010592:	6121      	str	r1, [r4, #16]
 8010594:	b913      	cbnz	r3, 801059c <_printf_float+0x1a0>
 8010596:	6822      	ldr	r2, [r4, #0]
 8010598:	07d0      	lsls	r0, r2, #31
 801059a:	d502      	bpl.n	80105a2 <_printf_float+0x1a6>
 801059c:	3301      	adds	r3, #1
 801059e:	440b      	add	r3, r1
 80105a0:	6123      	str	r3, [r4, #16]
 80105a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80105a4:	f04f 0900 	mov.w	r9, #0
 80105a8:	e7de      	b.n	8010568 <_printf_float+0x16c>
 80105aa:	b913      	cbnz	r3, 80105b2 <_printf_float+0x1b6>
 80105ac:	6822      	ldr	r2, [r4, #0]
 80105ae:	07d2      	lsls	r2, r2, #31
 80105b0:	d501      	bpl.n	80105b6 <_printf_float+0x1ba>
 80105b2:	3302      	adds	r3, #2
 80105b4:	e7f4      	b.n	80105a0 <_printf_float+0x1a4>
 80105b6:	2301      	movs	r3, #1
 80105b8:	e7f2      	b.n	80105a0 <_printf_float+0x1a4>
 80105ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80105be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105c0:	4299      	cmp	r1, r3
 80105c2:	db05      	blt.n	80105d0 <_printf_float+0x1d4>
 80105c4:	6823      	ldr	r3, [r4, #0]
 80105c6:	6121      	str	r1, [r4, #16]
 80105c8:	07d8      	lsls	r0, r3, #31
 80105ca:	d5ea      	bpl.n	80105a2 <_printf_float+0x1a6>
 80105cc:	1c4b      	adds	r3, r1, #1
 80105ce:	e7e7      	b.n	80105a0 <_printf_float+0x1a4>
 80105d0:	2900      	cmp	r1, #0
 80105d2:	bfd4      	ite	le
 80105d4:	f1c1 0202 	rsble	r2, r1, #2
 80105d8:	2201      	movgt	r2, #1
 80105da:	4413      	add	r3, r2
 80105dc:	e7e0      	b.n	80105a0 <_printf_float+0x1a4>
 80105de:	6823      	ldr	r3, [r4, #0]
 80105e0:	055a      	lsls	r2, r3, #21
 80105e2:	d407      	bmi.n	80105f4 <_printf_float+0x1f8>
 80105e4:	6923      	ldr	r3, [r4, #16]
 80105e6:	4642      	mov	r2, r8
 80105e8:	4631      	mov	r1, r6
 80105ea:	4628      	mov	r0, r5
 80105ec:	47b8      	blx	r7
 80105ee:	3001      	adds	r0, #1
 80105f0:	d12c      	bne.n	801064c <_printf_float+0x250>
 80105f2:	e764      	b.n	80104be <_printf_float+0xc2>
 80105f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80105f8:	f240 80e0 	bls.w	80107bc <_printf_float+0x3c0>
 80105fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010600:	2200      	movs	r2, #0
 8010602:	2300      	movs	r3, #0
 8010604:	f7f0 fa68 	bl	8000ad8 <__aeabi_dcmpeq>
 8010608:	2800      	cmp	r0, #0
 801060a:	d034      	beq.n	8010676 <_printf_float+0x27a>
 801060c:	4a37      	ldr	r2, [pc, #220]	; (80106ec <_printf_float+0x2f0>)
 801060e:	2301      	movs	r3, #1
 8010610:	4631      	mov	r1, r6
 8010612:	4628      	mov	r0, r5
 8010614:	47b8      	blx	r7
 8010616:	3001      	adds	r0, #1
 8010618:	f43f af51 	beq.w	80104be <_printf_float+0xc2>
 801061c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010620:	429a      	cmp	r2, r3
 8010622:	db02      	blt.n	801062a <_printf_float+0x22e>
 8010624:	6823      	ldr	r3, [r4, #0]
 8010626:	07d8      	lsls	r0, r3, #31
 8010628:	d510      	bpl.n	801064c <_printf_float+0x250>
 801062a:	ee18 3a10 	vmov	r3, s16
 801062e:	4652      	mov	r2, sl
 8010630:	4631      	mov	r1, r6
 8010632:	4628      	mov	r0, r5
 8010634:	47b8      	blx	r7
 8010636:	3001      	adds	r0, #1
 8010638:	f43f af41 	beq.w	80104be <_printf_float+0xc2>
 801063c:	f04f 0800 	mov.w	r8, #0
 8010640:	f104 091a 	add.w	r9, r4, #26
 8010644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010646:	3b01      	subs	r3, #1
 8010648:	4543      	cmp	r3, r8
 801064a:	dc09      	bgt.n	8010660 <_printf_float+0x264>
 801064c:	6823      	ldr	r3, [r4, #0]
 801064e:	079b      	lsls	r3, r3, #30
 8010650:	f100 8105 	bmi.w	801085e <_printf_float+0x462>
 8010654:	68e0      	ldr	r0, [r4, #12]
 8010656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010658:	4298      	cmp	r0, r3
 801065a:	bfb8      	it	lt
 801065c:	4618      	movlt	r0, r3
 801065e:	e730      	b.n	80104c2 <_printf_float+0xc6>
 8010660:	2301      	movs	r3, #1
 8010662:	464a      	mov	r2, r9
 8010664:	4631      	mov	r1, r6
 8010666:	4628      	mov	r0, r5
 8010668:	47b8      	blx	r7
 801066a:	3001      	adds	r0, #1
 801066c:	f43f af27 	beq.w	80104be <_printf_float+0xc2>
 8010670:	f108 0801 	add.w	r8, r8, #1
 8010674:	e7e6      	b.n	8010644 <_printf_float+0x248>
 8010676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010678:	2b00      	cmp	r3, #0
 801067a:	dc39      	bgt.n	80106f0 <_printf_float+0x2f4>
 801067c:	4a1b      	ldr	r2, [pc, #108]	; (80106ec <_printf_float+0x2f0>)
 801067e:	2301      	movs	r3, #1
 8010680:	4631      	mov	r1, r6
 8010682:	4628      	mov	r0, r5
 8010684:	47b8      	blx	r7
 8010686:	3001      	adds	r0, #1
 8010688:	f43f af19 	beq.w	80104be <_printf_float+0xc2>
 801068c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010690:	4313      	orrs	r3, r2
 8010692:	d102      	bne.n	801069a <_printf_float+0x29e>
 8010694:	6823      	ldr	r3, [r4, #0]
 8010696:	07d9      	lsls	r1, r3, #31
 8010698:	d5d8      	bpl.n	801064c <_printf_float+0x250>
 801069a:	ee18 3a10 	vmov	r3, s16
 801069e:	4652      	mov	r2, sl
 80106a0:	4631      	mov	r1, r6
 80106a2:	4628      	mov	r0, r5
 80106a4:	47b8      	blx	r7
 80106a6:	3001      	adds	r0, #1
 80106a8:	f43f af09 	beq.w	80104be <_printf_float+0xc2>
 80106ac:	f04f 0900 	mov.w	r9, #0
 80106b0:	f104 0a1a 	add.w	sl, r4, #26
 80106b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106b6:	425b      	negs	r3, r3
 80106b8:	454b      	cmp	r3, r9
 80106ba:	dc01      	bgt.n	80106c0 <_printf_float+0x2c4>
 80106bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106be:	e792      	b.n	80105e6 <_printf_float+0x1ea>
 80106c0:	2301      	movs	r3, #1
 80106c2:	4652      	mov	r2, sl
 80106c4:	4631      	mov	r1, r6
 80106c6:	4628      	mov	r0, r5
 80106c8:	47b8      	blx	r7
 80106ca:	3001      	adds	r0, #1
 80106cc:	f43f aef7 	beq.w	80104be <_printf_float+0xc2>
 80106d0:	f109 0901 	add.w	r9, r9, #1
 80106d4:	e7ee      	b.n	80106b4 <_printf_float+0x2b8>
 80106d6:	bf00      	nop
 80106d8:	7fefffff 	.word	0x7fefffff
 80106dc:	08014890 	.word	0x08014890
 80106e0:	08014894 	.word	0x08014894
 80106e4:	0801489c 	.word	0x0801489c
 80106e8:	08014898 	.word	0x08014898
 80106ec:	080148a0 	.word	0x080148a0
 80106f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80106f4:	429a      	cmp	r2, r3
 80106f6:	bfa8      	it	ge
 80106f8:	461a      	movge	r2, r3
 80106fa:	2a00      	cmp	r2, #0
 80106fc:	4691      	mov	r9, r2
 80106fe:	dc37      	bgt.n	8010770 <_printf_float+0x374>
 8010700:	f04f 0b00 	mov.w	fp, #0
 8010704:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010708:	f104 021a 	add.w	r2, r4, #26
 801070c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801070e:	9305      	str	r3, [sp, #20]
 8010710:	eba3 0309 	sub.w	r3, r3, r9
 8010714:	455b      	cmp	r3, fp
 8010716:	dc33      	bgt.n	8010780 <_printf_float+0x384>
 8010718:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801071c:	429a      	cmp	r2, r3
 801071e:	db3b      	blt.n	8010798 <_printf_float+0x39c>
 8010720:	6823      	ldr	r3, [r4, #0]
 8010722:	07da      	lsls	r2, r3, #31
 8010724:	d438      	bmi.n	8010798 <_printf_float+0x39c>
 8010726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010728:	9a05      	ldr	r2, [sp, #20]
 801072a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801072c:	1a9a      	subs	r2, r3, r2
 801072e:	eba3 0901 	sub.w	r9, r3, r1
 8010732:	4591      	cmp	r9, r2
 8010734:	bfa8      	it	ge
 8010736:	4691      	movge	r9, r2
 8010738:	f1b9 0f00 	cmp.w	r9, #0
 801073c:	dc35      	bgt.n	80107aa <_printf_float+0x3ae>
 801073e:	f04f 0800 	mov.w	r8, #0
 8010742:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010746:	f104 0a1a 	add.w	sl, r4, #26
 801074a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801074e:	1a9b      	subs	r3, r3, r2
 8010750:	eba3 0309 	sub.w	r3, r3, r9
 8010754:	4543      	cmp	r3, r8
 8010756:	f77f af79 	ble.w	801064c <_printf_float+0x250>
 801075a:	2301      	movs	r3, #1
 801075c:	4652      	mov	r2, sl
 801075e:	4631      	mov	r1, r6
 8010760:	4628      	mov	r0, r5
 8010762:	47b8      	blx	r7
 8010764:	3001      	adds	r0, #1
 8010766:	f43f aeaa 	beq.w	80104be <_printf_float+0xc2>
 801076a:	f108 0801 	add.w	r8, r8, #1
 801076e:	e7ec      	b.n	801074a <_printf_float+0x34e>
 8010770:	4613      	mov	r3, r2
 8010772:	4631      	mov	r1, r6
 8010774:	4642      	mov	r2, r8
 8010776:	4628      	mov	r0, r5
 8010778:	47b8      	blx	r7
 801077a:	3001      	adds	r0, #1
 801077c:	d1c0      	bne.n	8010700 <_printf_float+0x304>
 801077e:	e69e      	b.n	80104be <_printf_float+0xc2>
 8010780:	2301      	movs	r3, #1
 8010782:	4631      	mov	r1, r6
 8010784:	4628      	mov	r0, r5
 8010786:	9205      	str	r2, [sp, #20]
 8010788:	47b8      	blx	r7
 801078a:	3001      	adds	r0, #1
 801078c:	f43f ae97 	beq.w	80104be <_printf_float+0xc2>
 8010790:	9a05      	ldr	r2, [sp, #20]
 8010792:	f10b 0b01 	add.w	fp, fp, #1
 8010796:	e7b9      	b.n	801070c <_printf_float+0x310>
 8010798:	ee18 3a10 	vmov	r3, s16
 801079c:	4652      	mov	r2, sl
 801079e:	4631      	mov	r1, r6
 80107a0:	4628      	mov	r0, r5
 80107a2:	47b8      	blx	r7
 80107a4:	3001      	adds	r0, #1
 80107a6:	d1be      	bne.n	8010726 <_printf_float+0x32a>
 80107a8:	e689      	b.n	80104be <_printf_float+0xc2>
 80107aa:	9a05      	ldr	r2, [sp, #20]
 80107ac:	464b      	mov	r3, r9
 80107ae:	4442      	add	r2, r8
 80107b0:	4631      	mov	r1, r6
 80107b2:	4628      	mov	r0, r5
 80107b4:	47b8      	blx	r7
 80107b6:	3001      	adds	r0, #1
 80107b8:	d1c1      	bne.n	801073e <_printf_float+0x342>
 80107ba:	e680      	b.n	80104be <_printf_float+0xc2>
 80107bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80107be:	2a01      	cmp	r2, #1
 80107c0:	dc01      	bgt.n	80107c6 <_printf_float+0x3ca>
 80107c2:	07db      	lsls	r3, r3, #31
 80107c4:	d538      	bpl.n	8010838 <_printf_float+0x43c>
 80107c6:	2301      	movs	r3, #1
 80107c8:	4642      	mov	r2, r8
 80107ca:	4631      	mov	r1, r6
 80107cc:	4628      	mov	r0, r5
 80107ce:	47b8      	blx	r7
 80107d0:	3001      	adds	r0, #1
 80107d2:	f43f ae74 	beq.w	80104be <_printf_float+0xc2>
 80107d6:	ee18 3a10 	vmov	r3, s16
 80107da:	4652      	mov	r2, sl
 80107dc:	4631      	mov	r1, r6
 80107de:	4628      	mov	r0, r5
 80107e0:	47b8      	blx	r7
 80107e2:	3001      	adds	r0, #1
 80107e4:	f43f ae6b 	beq.w	80104be <_printf_float+0xc2>
 80107e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80107ec:	2200      	movs	r2, #0
 80107ee:	2300      	movs	r3, #0
 80107f0:	f7f0 f972 	bl	8000ad8 <__aeabi_dcmpeq>
 80107f4:	b9d8      	cbnz	r0, 801082e <_printf_float+0x432>
 80107f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107f8:	f108 0201 	add.w	r2, r8, #1
 80107fc:	3b01      	subs	r3, #1
 80107fe:	4631      	mov	r1, r6
 8010800:	4628      	mov	r0, r5
 8010802:	47b8      	blx	r7
 8010804:	3001      	adds	r0, #1
 8010806:	d10e      	bne.n	8010826 <_printf_float+0x42a>
 8010808:	e659      	b.n	80104be <_printf_float+0xc2>
 801080a:	2301      	movs	r3, #1
 801080c:	4652      	mov	r2, sl
 801080e:	4631      	mov	r1, r6
 8010810:	4628      	mov	r0, r5
 8010812:	47b8      	blx	r7
 8010814:	3001      	adds	r0, #1
 8010816:	f43f ae52 	beq.w	80104be <_printf_float+0xc2>
 801081a:	f108 0801 	add.w	r8, r8, #1
 801081e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010820:	3b01      	subs	r3, #1
 8010822:	4543      	cmp	r3, r8
 8010824:	dcf1      	bgt.n	801080a <_printf_float+0x40e>
 8010826:	464b      	mov	r3, r9
 8010828:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801082c:	e6dc      	b.n	80105e8 <_printf_float+0x1ec>
 801082e:	f04f 0800 	mov.w	r8, #0
 8010832:	f104 0a1a 	add.w	sl, r4, #26
 8010836:	e7f2      	b.n	801081e <_printf_float+0x422>
 8010838:	2301      	movs	r3, #1
 801083a:	4642      	mov	r2, r8
 801083c:	e7df      	b.n	80107fe <_printf_float+0x402>
 801083e:	2301      	movs	r3, #1
 8010840:	464a      	mov	r2, r9
 8010842:	4631      	mov	r1, r6
 8010844:	4628      	mov	r0, r5
 8010846:	47b8      	blx	r7
 8010848:	3001      	adds	r0, #1
 801084a:	f43f ae38 	beq.w	80104be <_printf_float+0xc2>
 801084e:	f108 0801 	add.w	r8, r8, #1
 8010852:	68e3      	ldr	r3, [r4, #12]
 8010854:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010856:	1a5b      	subs	r3, r3, r1
 8010858:	4543      	cmp	r3, r8
 801085a:	dcf0      	bgt.n	801083e <_printf_float+0x442>
 801085c:	e6fa      	b.n	8010654 <_printf_float+0x258>
 801085e:	f04f 0800 	mov.w	r8, #0
 8010862:	f104 0919 	add.w	r9, r4, #25
 8010866:	e7f4      	b.n	8010852 <_printf_float+0x456>

08010868 <_printf_common>:
 8010868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801086c:	4616      	mov	r6, r2
 801086e:	4699      	mov	r9, r3
 8010870:	688a      	ldr	r2, [r1, #8]
 8010872:	690b      	ldr	r3, [r1, #16]
 8010874:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010878:	4293      	cmp	r3, r2
 801087a:	bfb8      	it	lt
 801087c:	4613      	movlt	r3, r2
 801087e:	6033      	str	r3, [r6, #0]
 8010880:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010884:	4607      	mov	r7, r0
 8010886:	460c      	mov	r4, r1
 8010888:	b10a      	cbz	r2, 801088e <_printf_common+0x26>
 801088a:	3301      	adds	r3, #1
 801088c:	6033      	str	r3, [r6, #0]
 801088e:	6823      	ldr	r3, [r4, #0]
 8010890:	0699      	lsls	r1, r3, #26
 8010892:	bf42      	ittt	mi
 8010894:	6833      	ldrmi	r3, [r6, #0]
 8010896:	3302      	addmi	r3, #2
 8010898:	6033      	strmi	r3, [r6, #0]
 801089a:	6825      	ldr	r5, [r4, #0]
 801089c:	f015 0506 	ands.w	r5, r5, #6
 80108a0:	d106      	bne.n	80108b0 <_printf_common+0x48>
 80108a2:	f104 0a19 	add.w	sl, r4, #25
 80108a6:	68e3      	ldr	r3, [r4, #12]
 80108a8:	6832      	ldr	r2, [r6, #0]
 80108aa:	1a9b      	subs	r3, r3, r2
 80108ac:	42ab      	cmp	r3, r5
 80108ae:	dc26      	bgt.n	80108fe <_printf_common+0x96>
 80108b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80108b4:	1e13      	subs	r3, r2, #0
 80108b6:	6822      	ldr	r2, [r4, #0]
 80108b8:	bf18      	it	ne
 80108ba:	2301      	movne	r3, #1
 80108bc:	0692      	lsls	r2, r2, #26
 80108be:	d42b      	bmi.n	8010918 <_printf_common+0xb0>
 80108c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80108c4:	4649      	mov	r1, r9
 80108c6:	4638      	mov	r0, r7
 80108c8:	47c0      	blx	r8
 80108ca:	3001      	adds	r0, #1
 80108cc:	d01e      	beq.n	801090c <_printf_common+0xa4>
 80108ce:	6823      	ldr	r3, [r4, #0]
 80108d0:	68e5      	ldr	r5, [r4, #12]
 80108d2:	6832      	ldr	r2, [r6, #0]
 80108d4:	f003 0306 	and.w	r3, r3, #6
 80108d8:	2b04      	cmp	r3, #4
 80108da:	bf08      	it	eq
 80108dc:	1aad      	subeq	r5, r5, r2
 80108de:	68a3      	ldr	r3, [r4, #8]
 80108e0:	6922      	ldr	r2, [r4, #16]
 80108e2:	bf0c      	ite	eq
 80108e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80108e8:	2500      	movne	r5, #0
 80108ea:	4293      	cmp	r3, r2
 80108ec:	bfc4      	itt	gt
 80108ee:	1a9b      	subgt	r3, r3, r2
 80108f0:	18ed      	addgt	r5, r5, r3
 80108f2:	2600      	movs	r6, #0
 80108f4:	341a      	adds	r4, #26
 80108f6:	42b5      	cmp	r5, r6
 80108f8:	d11a      	bne.n	8010930 <_printf_common+0xc8>
 80108fa:	2000      	movs	r0, #0
 80108fc:	e008      	b.n	8010910 <_printf_common+0xa8>
 80108fe:	2301      	movs	r3, #1
 8010900:	4652      	mov	r2, sl
 8010902:	4649      	mov	r1, r9
 8010904:	4638      	mov	r0, r7
 8010906:	47c0      	blx	r8
 8010908:	3001      	adds	r0, #1
 801090a:	d103      	bne.n	8010914 <_printf_common+0xac>
 801090c:	f04f 30ff 	mov.w	r0, #4294967295
 8010910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010914:	3501      	adds	r5, #1
 8010916:	e7c6      	b.n	80108a6 <_printf_common+0x3e>
 8010918:	18e1      	adds	r1, r4, r3
 801091a:	1c5a      	adds	r2, r3, #1
 801091c:	2030      	movs	r0, #48	; 0x30
 801091e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010922:	4422      	add	r2, r4
 8010924:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010928:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801092c:	3302      	adds	r3, #2
 801092e:	e7c7      	b.n	80108c0 <_printf_common+0x58>
 8010930:	2301      	movs	r3, #1
 8010932:	4622      	mov	r2, r4
 8010934:	4649      	mov	r1, r9
 8010936:	4638      	mov	r0, r7
 8010938:	47c0      	blx	r8
 801093a:	3001      	adds	r0, #1
 801093c:	d0e6      	beq.n	801090c <_printf_common+0xa4>
 801093e:	3601      	adds	r6, #1
 8010940:	e7d9      	b.n	80108f6 <_printf_common+0x8e>
	...

08010944 <_printf_i>:
 8010944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010948:	7e0f      	ldrb	r7, [r1, #24]
 801094a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801094c:	2f78      	cmp	r7, #120	; 0x78
 801094e:	4691      	mov	r9, r2
 8010950:	4680      	mov	r8, r0
 8010952:	460c      	mov	r4, r1
 8010954:	469a      	mov	sl, r3
 8010956:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801095a:	d807      	bhi.n	801096c <_printf_i+0x28>
 801095c:	2f62      	cmp	r7, #98	; 0x62
 801095e:	d80a      	bhi.n	8010976 <_printf_i+0x32>
 8010960:	2f00      	cmp	r7, #0
 8010962:	f000 80d8 	beq.w	8010b16 <_printf_i+0x1d2>
 8010966:	2f58      	cmp	r7, #88	; 0x58
 8010968:	f000 80a3 	beq.w	8010ab2 <_printf_i+0x16e>
 801096c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010970:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010974:	e03a      	b.n	80109ec <_printf_i+0xa8>
 8010976:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801097a:	2b15      	cmp	r3, #21
 801097c:	d8f6      	bhi.n	801096c <_printf_i+0x28>
 801097e:	a101      	add	r1, pc, #4	; (adr r1, 8010984 <_printf_i+0x40>)
 8010980:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010984:	080109dd 	.word	0x080109dd
 8010988:	080109f1 	.word	0x080109f1
 801098c:	0801096d 	.word	0x0801096d
 8010990:	0801096d 	.word	0x0801096d
 8010994:	0801096d 	.word	0x0801096d
 8010998:	0801096d 	.word	0x0801096d
 801099c:	080109f1 	.word	0x080109f1
 80109a0:	0801096d 	.word	0x0801096d
 80109a4:	0801096d 	.word	0x0801096d
 80109a8:	0801096d 	.word	0x0801096d
 80109ac:	0801096d 	.word	0x0801096d
 80109b0:	08010afd 	.word	0x08010afd
 80109b4:	08010a21 	.word	0x08010a21
 80109b8:	08010adf 	.word	0x08010adf
 80109bc:	0801096d 	.word	0x0801096d
 80109c0:	0801096d 	.word	0x0801096d
 80109c4:	08010b1f 	.word	0x08010b1f
 80109c8:	0801096d 	.word	0x0801096d
 80109cc:	08010a21 	.word	0x08010a21
 80109d0:	0801096d 	.word	0x0801096d
 80109d4:	0801096d 	.word	0x0801096d
 80109d8:	08010ae7 	.word	0x08010ae7
 80109dc:	682b      	ldr	r3, [r5, #0]
 80109de:	1d1a      	adds	r2, r3, #4
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	602a      	str	r2, [r5, #0]
 80109e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80109e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80109ec:	2301      	movs	r3, #1
 80109ee:	e0a3      	b.n	8010b38 <_printf_i+0x1f4>
 80109f0:	6820      	ldr	r0, [r4, #0]
 80109f2:	6829      	ldr	r1, [r5, #0]
 80109f4:	0606      	lsls	r6, r0, #24
 80109f6:	f101 0304 	add.w	r3, r1, #4
 80109fa:	d50a      	bpl.n	8010a12 <_printf_i+0xce>
 80109fc:	680e      	ldr	r6, [r1, #0]
 80109fe:	602b      	str	r3, [r5, #0]
 8010a00:	2e00      	cmp	r6, #0
 8010a02:	da03      	bge.n	8010a0c <_printf_i+0xc8>
 8010a04:	232d      	movs	r3, #45	; 0x2d
 8010a06:	4276      	negs	r6, r6
 8010a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a0c:	485e      	ldr	r0, [pc, #376]	; (8010b88 <_printf_i+0x244>)
 8010a0e:	230a      	movs	r3, #10
 8010a10:	e019      	b.n	8010a46 <_printf_i+0x102>
 8010a12:	680e      	ldr	r6, [r1, #0]
 8010a14:	602b      	str	r3, [r5, #0]
 8010a16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010a1a:	bf18      	it	ne
 8010a1c:	b236      	sxthne	r6, r6
 8010a1e:	e7ef      	b.n	8010a00 <_printf_i+0xbc>
 8010a20:	682b      	ldr	r3, [r5, #0]
 8010a22:	6820      	ldr	r0, [r4, #0]
 8010a24:	1d19      	adds	r1, r3, #4
 8010a26:	6029      	str	r1, [r5, #0]
 8010a28:	0601      	lsls	r1, r0, #24
 8010a2a:	d501      	bpl.n	8010a30 <_printf_i+0xec>
 8010a2c:	681e      	ldr	r6, [r3, #0]
 8010a2e:	e002      	b.n	8010a36 <_printf_i+0xf2>
 8010a30:	0646      	lsls	r6, r0, #25
 8010a32:	d5fb      	bpl.n	8010a2c <_printf_i+0xe8>
 8010a34:	881e      	ldrh	r6, [r3, #0]
 8010a36:	4854      	ldr	r0, [pc, #336]	; (8010b88 <_printf_i+0x244>)
 8010a38:	2f6f      	cmp	r7, #111	; 0x6f
 8010a3a:	bf0c      	ite	eq
 8010a3c:	2308      	moveq	r3, #8
 8010a3e:	230a      	movne	r3, #10
 8010a40:	2100      	movs	r1, #0
 8010a42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010a46:	6865      	ldr	r5, [r4, #4]
 8010a48:	60a5      	str	r5, [r4, #8]
 8010a4a:	2d00      	cmp	r5, #0
 8010a4c:	bfa2      	ittt	ge
 8010a4e:	6821      	ldrge	r1, [r4, #0]
 8010a50:	f021 0104 	bicge.w	r1, r1, #4
 8010a54:	6021      	strge	r1, [r4, #0]
 8010a56:	b90e      	cbnz	r6, 8010a5c <_printf_i+0x118>
 8010a58:	2d00      	cmp	r5, #0
 8010a5a:	d04d      	beq.n	8010af8 <_printf_i+0x1b4>
 8010a5c:	4615      	mov	r5, r2
 8010a5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010a62:	fb03 6711 	mls	r7, r3, r1, r6
 8010a66:	5dc7      	ldrb	r7, [r0, r7]
 8010a68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010a6c:	4637      	mov	r7, r6
 8010a6e:	42bb      	cmp	r3, r7
 8010a70:	460e      	mov	r6, r1
 8010a72:	d9f4      	bls.n	8010a5e <_printf_i+0x11a>
 8010a74:	2b08      	cmp	r3, #8
 8010a76:	d10b      	bne.n	8010a90 <_printf_i+0x14c>
 8010a78:	6823      	ldr	r3, [r4, #0]
 8010a7a:	07de      	lsls	r6, r3, #31
 8010a7c:	d508      	bpl.n	8010a90 <_printf_i+0x14c>
 8010a7e:	6923      	ldr	r3, [r4, #16]
 8010a80:	6861      	ldr	r1, [r4, #4]
 8010a82:	4299      	cmp	r1, r3
 8010a84:	bfde      	ittt	le
 8010a86:	2330      	movle	r3, #48	; 0x30
 8010a88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010a8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010a90:	1b52      	subs	r2, r2, r5
 8010a92:	6122      	str	r2, [r4, #16]
 8010a94:	f8cd a000 	str.w	sl, [sp]
 8010a98:	464b      	mov	r3, r9
 8010a9a:	aa03      	add	r2, sp, #12
 8010a9c:	4621      	mov	r1, r4
 8010a9e:	4640      	mov	r0, r8
 8010aa0:	f7ff fee2 	bl	8010868 <_printf_common>
 8010aa4:	3001      	adds	r0, #1
 8010aa6:	d14c      	bne.n	8010b42 <_printf_i+0x1fe>
 8010aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8010aac:	b004      	add	sp, #16
 8010aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ab2:	4835      	ldr	r0, [pc, #212]	; (8010b88 <_printf_i+0x244>)
 8010ab4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010ab8:	6829      	ldr	r1, [r5, #0]
 8010aba:	6823      	ldr	r3, [r4, #0]
 8010abc:	f851 6b04 	ldr.w	r6, [r1], #4
 8010ac0:	6029      	str	r1, [r5, #0]
 8010ac2:	061d      	lsls	r5, r3, #24
 8010ac4:	d514      	bpl.n	8010af0 <_printf_i+0x1ac>
 8010ac6:	07df      	lsls	r7, r3, #31
 8010ac8:	bf44      	itt	mi
 8010aca:	f043 0320 	orrmi.w	r3, r3, #32
 8010ace:	6023      	strmi	r3, [r4, #0]
 8010ad0:	b91e      	cbnz	r6, 8010ada <_printf_i+0x196>
 8010ad2:	6823      	ldr	r3, [r4, #0]
 8010ad4:	f023 0320 	bic.w	r3, r3, #32
 8010ad8:	6023      	str	r3, [r4, #0]
 8010ada:	2310      	movs	r3, #16
 8010adc:	e7b0      	b.n	8010a40 <_printf_i+0xfc>
 8010ade:	6823      	ldr	r3, [r4, #0]
 8010ae0:	f043 0320 	orr.w	r3, r3, #32
 8010ae4:	6023      	str	r3, [r4, #0]
 8010ae6:	2378      	movs	r3, #120	; 0x78
 8010ae8:	4828      	ldr	r0, [pc, #160]	; (8010b8c <_printf_i+0x248>)
 8010aea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010aee:	e7e3      	b.n	8010ab8 <_printf_i+0x174>
 8010af0:	0659      	lsls	r1, r3, #25
 8010af2:	bf48      	it	mi
 8010af4:	b2b6      	uxthmi	r6, r6
 8010af6:	e7e6      	b.n	8010ac6 <_printf_i+0x182>
 8010af8:	4615      	mov	r5, r2
 8010afa:	e7bb      	b.n	8010a74 <_printf_i+0x130>
 8010afc:	682b      	ldr	r3, [r5, #0]
 8010afe:	6826      	ldr	r6, [r4, #0]
 8010b00:	6961      	ldr	r1, [r4, #20]
 8010b02:	1d18      	adds	r0, r3, #4
 8010b04:	6028      	str	r0, [r5, #0]
 8010b06:	0635      	lsls	r5, r6, #24
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	d501      	bpl.n	8010b10 <_printf_i+0x1cc>
 8010b0c:	6019      	str	r1, [r3, #0]
 8010b0e:	e002      	b.n	8010b16 <_printf_i+0x1d2>
 8010b10:	0670      	lsls	r0, r6, #25
 8010b12:	d5fb      	bpl.n	8010b0c <_printf_i+0x1c8>
 8010b14:	8019      	strh	r1, [r3, #0]
 8010b16:	2300      	movs	r3, #0
 8010b18:	6123      	str	r3, [r4, #16]
 8010b1a:	4615      	mov	r5, r2
 8010b1c:	e7ba      	b.n	8010a94 <_printf_i+0x150>
 8010b1e:	682b      	ldr	r3, [r5, #0]
 8010b20:	1d1a      	adds	r2, r3, #4
 8010b22:	602a      	str	r2, [r5, #0]
 8010b24:	681d      	ldr	r5, [r3, #0]
 8010b26:	6862      	ldr	r2, [r4, #4]
 8010b28:	2100      	movs	r1, #0
 8010b2a:	4628      	mov	r0, r5
 8010b2c:	f7ef fb60 	bl	80001f0 <memchr>
 8010b30:	b108      	cbz	r0, 8010b36 <_printf_i+0x1f2>
 8010b32:	1b40      	subs	r0, r0, r5
 8010b34:	6060      	str	r0, [r4, #4]
 8010b36:	6863      	ldr	r3, [r4, #4]
 8010b38:	6123      	str	r3, [r4, #16]
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b40:	e7a8      	b.n	8010a94 <_printf_i+0x150>
 8010b42:	6923      	ldr	r3, [r4, #16]
 8010b44:	462a      	mov	r2, r5
 8010b46:	4649      	mov	r1, r9
 8010b48:	4640      	mov	r0, r8
 8010b4a:	47d0      	blx	sl
 8010b4c:	3001      	adds	r0, #1
 8010b4e:	d0ab      	beq.n	8010aa8 <_printf_i+0x164>
 8010b50:	6823      	ldr	r3, [r4, #0]
 8010b52:	079b      	lsls	r3, r3, #30
 8010b54:	d413      	bmi.n	8010b7e <_printf_i+0x23a>
 8010b56:	68e0      	ldr	r0, [r4, #12]
 8010b58:	9b03      	ldr	r3, [sp, #12]
 8010b5a:	4298      	cmp	r0, r3
 8010b5c:	bfb8      	it	lt
 8010b5e:	4618      	movlt	r0, r3
 8010b60:	e7a4      	b.n	8010aac <_printf_i+0x168>
 8010b62:	2301      	movs	r3, #1
 8010b64:	4632      	mov	r2, r6
 8010b66:	4649      	mov	r1, r9
 8010b68:	4640      	mov	r0, r8
 8010b6a:	47d0      	blx	sl
 8010b6c:	3001      	adds	r0, #1
 8010b6e:	d09b      	beq.n	8010aa8 <_printf_i+0x164>
 8010b70:	3501      	adds	r5, #1
 8010b72:	68e3      	ldr	r3, [r4, #12]
 8010b74:	9903      	ldr	r1, [sp, #12]
 8010b76:	1a5b      	subs	r3, r3, r1
 8010b78:	42ab      	cmp	r3, r5
 8010b7a:	dcf2      	bgt.n	8010b62 <_printf_i+0x21e>
 8010b7c:	e7eb      	b.n	8010b56 <_printf_i+0x212>
 8010b7e:	2500      	movs	r5, #0
 8010b80:	f104 0619 	add.w	r6, r4, #25
 8010b84:	e7f5      	b.n	8010b72 <_printf_i+0x22e>
 8010b86:	bf00      	nop
 8010b88:	080148a2 	.word	0x080148a2
 8010b8c:	080148b3 	.word	0x080148b3

08010b90 <iprintf>:
 8010b90:	b40f      	push	{r0, r1, r2, r3}
 8010b92:	4b0a      	ldr	r3, [pc, #40]	; (8010bbc <iprintf+0x2c>)
 8010b94:	b513      	push	{r0, r1, r4, lr}
 8010b96:	681c      	ldr	r4, [r3, #0]
 8010b98:	b124      	cbz	r4, 8010ba4 <iprintf+0x14>
 8010b9a:	69a3      	ldr	r3, [r4, #24]
 8010b9c:	b913      	cbnz	r3, 8010ba4 <iprintf+0x14>
 8010b9e:	4620      	mov	r0, r4
 8010ba0:	f7ff fa02 	bl	800ffa8 <__sinit>
 8010ba4:	ab05      	add	r3, sp, #20
 8010ba6:	9a04      	ldr	r2, [sp, #16]
 8010ba8:	68a1      	ldr	r1, [r4, #8]
 8010baa:	9301      	str	r3, [sp, #4]
 8010bac:	4620      	mov	r0, r4
 8010bae:	f002 f803 	bl	8012bb8 <_vfiprintf_r>
 8010bb2:	b002      	add	sp, #8
 8010bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bb8:	b004      	add	sp, #16
 8010bba:	4770      	bx	lr
 8010bbc:	20000114 	.word	0x20000114

08010bc0 <_puts_r>:
 8010bc0:	b570      	push	{r4, r5, r6, lr}
 8010bc2:	460e      	mov	r6, r1
 8010bc4:	4605      	mov	r5, r0
 8010bc6:	b118      	cbz	r0, 8010bd0 <_puts_r+0x10>
 8010bc8:	6983      	ldr	r3, [r0, #24]
 8010bca:	b90b      	cbnz	r3, 8010bd0 <_puts_r+0x10>
 8010bcc:	f7ff f9ec 	bl	800ffa8 <__sinit>
 8010bd0:	69ab      	ldr	r3, [r5, #24]
 8010bd2:	68ac      	ldr	r4, [r5, #8]
 8010bd4:	b913      	cbnz	r3, 8010bdc <_puts_r+0x1c>
 8010bd6:	4628      	mov	r0, r5
 8010bd8:	f7ff f9e6 	bl	800ffa8 <__sinit>
 8010bdc:	4b2c      	ldr	r3, [pc, #176]	; (8010c90 <_puts_r+0xd0>)
 8010bde:	429c      	cmp	r4, r3
 8010be0:	d120      	bne.n	8010c24 <_puts_r+0x64>
 8010be2:	686c      	ldr	r4, [r5, #4]
 8010be4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010be6:	07db      	lsls	r3, r3, #31
 8010be8:	d405      	bmi.n	8010bf6 <_puts_r+0x36>
 8010bea:	89a3      	ldrh	r3, [r4, #12]
 8010bec:	0598      	lsls	r0, r3, #22
 8010bee:	d402      	bmi.n	8010bf6 <_puts_r+0x36>
 8010bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010bf2:	f7ff fa9c 	bl	801012e <__retarget_lock_acquire_recursive>
 8010bf6:	89a3      	ldrh	r3, [r4, #12]
 8010bf8:	0719      	lsls	r1, r3, #28
 8010bfa:	d51d      	bpl.n	8010c38 <_puts_r+0x78>
 8010bfc:	6923      	ldr	r3, [r4, #16]
 8010bfe:	b1db      	cbz	r3, 8010c38 <_puts_r+0x78>
 8010c00:	3e01      	subs	r6, #1
 8010c02:	68a3      	ldr	r3, [r4, #8]
 8010c04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010c08:	3b01      	subs	r3, #1
 8010c0a:	60a3      	str	r3, [r4, #8]
 8010c0c:	bb39      	cbnz	r1, 8010c5e <_puts_r+0x9e>
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	da38      	bge.n	8010c84 <_puts_r+0xc4>
 8010c12:	4622      	mov	r2, r4
 8010c14:	210a      	movs	r1, #10
 8010c16:	4628      	mov	r0, r5
 8010c18:	f000 f9b2 	bl	8010f80 <__swbuf_r>
 8010c1c:	3001      	adds	r0, #1
 8010c1e:	d011      	beq.n	8010c44 <_puts_r+0x84>
 8010c20:	250a      	movs	r5, #10
 8010c22:	e011      	b.n	8010c48 <_puts_r+0x88>
 8010c24:	4b1b      	ldr	r3, [pc, #108]	; (8010c94 <_puts_r+0xd4>)
 8010c26:	429c      	cmp	r4, r3
 8010c28:	d101      	bne.n	8010c2e <_puts_r+0x6e>
 8010c2a:	68ac      	ldr	r4, [r5, #8]
 8010c2c:	e7da      	b.n	8010be4 <_puts_r+0x24>
 8010c2e:	4b1a      	ldr	r3, [pc, #104]	; (8010c98 <_puts_r+0xd8>)
 8010c30:	429c      	cmp	r4, r3
 8010c32:	bf08      	it	eq
 8010c34:	68ec      	ldreq	r4, [r5, #12]
 8010c36:	e7d5      	b.n	8010be4 <_puts_r+0x24>
 8010c38:	4621      	mov	r1, r4
 8010c3a:	4628      	mov	r0, r5
 8010c3c:	f000 fa04 	bl	8011048 <__swsetup_r>
 8010c40:	2800      	cmp	r0, #0
 8010c42:	d0dd      	beq.n	8010c00 <_puts_r+0x40>
 8010c44:	f04f 35ff 	mov.w	r5, #4294967295
 8010c48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c4a:	07da      	lsls	r2, r3, #31
 8010c4c:	d405      	bmi.n	8010c5a <_puts_r+0x9a>
 8010c4e:	89a3      	ldrh	r3, [r4, #12]
 8010c50:	059b      	lsls	r3, r3, #22
 8010c52:	d402      	bmi.n	8010c5a <_puts_r+0x9a>
 8010c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c56:	f7ff fa6b 	bl	8010130 <__retarget_lock_release_recursive>
 8010c5a:	4628      	mov	r0, r5
 8010c5c:	bd70      	pop	{r4, r5, r6, pc}
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	da04      	bge.n	8010c6c <_puts_r+0xac>
 8010c62:	69a2      	ldr	r2, [r4, #24]
 8010c64:	429a      	cmp	r2, r3
 8010c66:	dc06      	bgt.n	8010c76 <_puts_r+0xb6>
 8010c68:	290a      	cmp	r1, #10
 8010c6a:	d004      	beq.n	8010c76 <_puts_r+0xb6>
 8010c6c:	6823      	ldr	r3, [r4, #0]
 8010c6e:	1c5a      	adds	r2, r3, #1
 8010c70:	6022      	str	r2, [r4, #0]
 8010c72:	7019      	strb	r1, [r3, #0]
 8010c74:	e7c5      	b.n	8010c02 <_puts_r+0x42>
 8010c76:	4622      	mov	r2, r4
 8010c78:	4628      	mov	r0, r5
 8010c7a:	f000 f981 	bl	8010f80 <__swbuf_r>
 8010c7e:	3001      	adds	r0, #1
 8010c80:	d1bf      	bne.n	8010c02 <_puts_r+0x42>
 8010c82:	e7df      	b.n	8010c44 <_puts_r+0x84>
 8010c84:	6823      	ldr	r3, [r4, #0]
 8010c86:	250a      	movs	r5, #10
 8010c88:	1c5a      	adds	r2, r3, #1
 8010c8a:	6022      	str	r2, [r4, #0]
 8010c8c:	701d      	strb	r5, [r3, #0]
 8010c8e:	e7db      	b.n	8010c48 <_puts_r+0x88>
 8010c90:	0801484c 	.word	0x0801484c
 8010c94:	0801486c 	.word	0x0801486c
 8010c98:	0801482c 	.word	0x0801482c

08010c9c <puts>:
 8010c9c:	4b02      	ldr	r3, [pc, #8]	; (8010ca8 <puts+0xc>)
 8010c9e:	4601      	mov	r1, r0
 8010ca0:	6818      	ldr	r0, [r3, #0]
 8010ca2:	f7ff bf8d 	b.w	8010bc0 <_puts_r>
 8010ca6:	bf00      	nop
 8010ca8:	20000114 	.word	0x20000114

08010cac <cleanup_glue>:
 8010cac:	b538      	push	{r3, r4, r5, lr}
 8010cae:	460c      	mov	r4, r1
 8010cb0:	6809      	ldr	r1, [r1, #0]
 8010cb2:	4605      	mov	r5, r0
 8010cb4:	b109      	cbz	r1, 8010cba <cleanup_glue+0xe>
 8010cb6:	f7ff fff9 	bl	8010cac <cleanup_glue>
 8010cba:	4621      	mov	r1, r4
 8010cbc:	4628      	mov	r0, r5
 8010cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cc2:	f001 bda7 	b.w	8012814 <_free_r>
	...

08010cc8 <_reclaim_reent>:
 8010cc8:	4b2c      	ldr	r3, [pc, #176]	; (8010d7c <_reclaim_reent+0xb4>)
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	4283      	cmp	r3, r0
 8010cce:	b570      	push	{r4, r5, r6, lr}
 8010cd0:	4604      	mov	r4, r0
 8010cd2:	d051      	beq.n	8010d78 <_reclaim_reent+0xb0>
 8010cd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010cd6:	b143      	cbz	r3, 8010cea <_reclaim_reent+0x22>
 8010cd8:	68db      	ldr	r3, [r3, #12]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d14a      	bne.n	8010d74 <_reclaim_reent+0xac>
 8010cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ce0:	6819      	ldr	r1, [r3, #0]
 8010ce2:	b111      	cbz	r1, 8010cea <_reclaim_reent+0x22>
 8010ce4:	4620      	mov	r0, r4
 8010ce6:	f001 fd95 	bl	8012814 <_free_r>
 8010cea:	6961      	ldr	r1, [r4, #20]
 8010cec:	b111      	cbz	r1, 8010cf4 <_reclaim_reent+0x2c>
 8010cee:	4620      	mov	r0, r4
 8010cf0:	f001 fd90 	bl	8012814 <_free_r>
 8010cf4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010cf6:	b111      	cbz	r1, 8010cfe <_reclaim_reent+0x36>
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	f001 fd8b 	bl	8012814 <_free_r>
 8010cfe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010d00:	b111      	cbz	r1, 8010d08 <_reclaim_reent+0x40>
 8010d02:	4620      	mov	r0, r4
 8010d04:	f001 fd86 	bl	8012814 <_free_r>
 8010d08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010d0a:	b111      	cbz	r1, 8010d12 <_reclaim_reent+0x4a>
 8010d0c:	4620      	mov	r0, r4
 8010d0e:	f001 fd81 	bl	8012814 <_free_r>
 8010d12:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010d14:	b111      	cbz	r1, 8010d1c <_reclaim_reent+0x54>
 8010d16:	4620      	mov	r0, r4
 8010d18:	f001 fd7c 	bl	8012814 <_free_r>
 8010d1c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8010d1e:	b111      	cbz	r1, 8010d26 <_reclaim_reent+0x5e>
 8010d20:	4620      	mov	r0, r4
 8010d22:	f001 fd77 	bl	8012814 <_free_r>
 8010d26:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010d28:	b111      	cbz	r1, 8010d30 <_reclaim_reent+0x68>
 8010d2a:	4620      	mov	r0, r4
 8010d2c:	f001 fd72 	bl	8012814 <_free_r>
 8010d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d32:	b111      	cbz	r1, 8010d3a <_reclaim_reent+0x72>
 8010d34:	4620      	mov	r0, r4
 8010d36:	f001 fd6d 	bl	8012814 <_free_r>
 8010d3a:	69a3      	ldr	r3, [r4, #24]
 8010d3c:	b1e3      	cbz	r3, 8010d78 <_reclaim_reent+0xb0>
 8010d3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010d40:	4620      	mov	r0, r4
 8010d42:	4798      	blx	r3
 8010d44:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010d46:	b1b9      	cbz	r1, 8010d78 <_reclaim_reent+0xb0>
 8010d48:	4620      	mov	r0, r4
 8010d4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d4e:	f7ff bfad 	b.w	8010cac <cleanup_glue>
 8010d52:	5949      	ldr	r1, [r1, r5]
 8010d54:	b941      	cbnz	r1, 8010d68 <_reclaim_reent+0xa0>
 8010d56:	3504      	adds	r5, #4
 8010d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d5a:	2d80      	cmp	r5, #128	; 0x80
 8010d5c:	68d9      	ldr	r1, [r3, #12]
 8010d5e:	d1f8      	bne.n	8010d52 <_reclaim_reent+0x8a>
 8010d60:	4620      	mov	r0, r4
 8010d62:	f001 fd57 	bl	8012814 <_free_r>
 8010d66:	e7ba      	b.n	8010cde <_reclaim_reent+0x16>
 8010d68:	680e      	ldr	r6, [r1, #0]
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	f001 fd52 	bl	8012814 <_free_r>
 8010d70:	4631      	mov	r1, r6
 8010d72:	e7ef      	b.n	8010d54 <_reclaim_reent+0x8c>
 8010d74:	2500      	movs	r5, #0
 8010d76:	e7ef      	b.n	8010d58 <_reclaim_reent+0x90>
 8010d78:	bd70      	pop	{r4, r5, r6, pc}
 8010d7a:	bf00      	nop
 8010d7c:	20000114 	.word	0x20000114

08010d80 <_sbrk_r>:
 8010d80:	b538      	push	{r3, r4, r5, lr}
 8010d82:	4d06      	ldr	r5, [pc, #24]	; (8010d9c <_sbrk_r+0x1c>)
 8010d84:	2300      	movs	r3, #0
 8010d86:	4604      	mov	r4, r0
 8010d88:	4608      	mov	r0, r1
 8010d8a:	602b      	str	r3, [r5, #0]
 8010d8c:	f7f3 fc58 	bl	8004640 <_sbrk>
 8010d90:	1c43      	adds	r3, r0, #1
 8010d92:	d102      	bne.n	8010d9a <_sbrk_r+0x1a>
 8010d94:	682b      	ldr	r3, [r5, #0]
 8010d96:	b103      	cbz	r3, 8010d9a <_sbrk_r+0x1a>
 8010d98:	6023      	str	r3, [r4, #0]
 8010d9a:	bd38      	pop	{r3, r4, r5, pc}
 8010d9c:	20005e90 	.word	0x20005e90

08010da0 <siprintf>:
 8010da0:	b40e      	push	{r1, r2, r3}
 8010da2:	b500      	push	{lr}
 8010da4:	b09c      	sub	sp, #112	; 0x70
 8010da6:	ab1d      	add	r3, sp, #116	; 0x74
 8010da8:	9002      	str	r0, [sp, #8]
 8010daa:	9006      	str	r0, [sp, #24]
 8010dac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010db0:	4809      	ldr	r0, [pc, #36]	; (8010dd8 <siprintf+0x38>)
 8010db2:	9107      	str	r1, [sp, #28]
 8010db4:	9104      	str	r1, [sp, #16]
 8010db6:	4909      	ldr	r1, [pc, #36]	; (8010ddc <siprintf+0x3c>)
 8010db8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010dbc:	9105      	str	r1, [sp, #20]
 8010dbe:	6800      	ldr	r0, [r0, #0]
 8010dc0:	9301      	str	r3, [sp, #4]
 8010dc2:	a902      	add	r1, sp, #8
 8010dc4:	f001 fdce 	bl	8012964 <_svfiprintf_r>
 8010dc8:	9b02      	ldr	r3, [sp, #8]
 8010dca:	2200      	movs	r2, #0
 8010dcc:	701a      	strb	r2, [r3, #0]
 8010dce:	b01c      	add	sp, #112	; 0x70
 8010dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010dd4:	b003      	add	sp, #12
 8010dd6:	4770      	bx	lr
 8010dd8:	20000114 	.word	0x20000114
 8010ddc:	ffff0208 	.word	0xffff0208

08010de0 <__sread>:
 8010de0:	b510      	push	{r4, lr}
 8010de2:	460c      	mov	r4, r1
 8010de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010de8:	f002 f816 	bl	8012e18 <_read_r>
 8010dec:	2800      	cmp	r0, #0
 8010dee:	bfab      	itete	ge
 8010df0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010df2:	89a3      	ldrhlt	r3, [r4, #12]
 8010df4:	181b      	addge	r3, r3, r0
 8010df6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010dfa:	bfac      	ite	ge
 8010dfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8010dfe:	81a3      	strhlt	r3, [r4, #12]
 8010e00:	bd10      	pop	{r4, pc}

08010e02 <__swrite>:
 8010e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e06:	461f      	mov	r7, r3
 8010e08:	898b      	ldrh	r3, [r1, #12]
 8010e0a:	05db      	lsls	r3, r3, #23
 8010e0c:	4605      	mov	r5, r0
 8010e0e:	460c      	mov	r4, r1
 8010e10:	4616      	mov	r6, r2
 8010e12:	d505      	bpl.n	8010e20 <__swrite+0x1e>
 8010e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e18:	2302      	movs	r3, #2
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	f001 f8d4 	bl	8011fc8 <_lseek_r>
 8010e20:	89a3      	ldrh	r3, [r4, #12]
 8010e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e2a:	81a3      	strh	r3, [r4, #12]
 8010e2c:	4632      	mov	r2, r6
 8010e2e:	463b      	mov	r3, r7
 8010e30:	4628      	mov	r0, r5
 8010e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e36:	f000 b8f5 	b.w	8011024 <_write_r>

08010e3a <__sseek>:
 8010e3a:	b510      	push	{r4, lr}
 8010e3c:	460c      	mov	r4, r1
 8010e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e42:	f001 f8c1 	bl	8011fc8 <_lseek_r>
 8010e46:	1c43      	adds	r3, r0, #1
 8010e48:	89a3      	ldrh	r3, [r4, #12]
 8010e4a:	bf15      	itete	ne
 8010e4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8010e4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010e52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010e56:	81a3      	strheq	r3, [r4, #12]
 8010e58:	bf18      	it	ne
 8010e5a:	81a3      	strhne	r3, [r4, #12]
 8010e5c:	bd10      	pop	{r4, pc}

08010e5e <__sclose>:
 8010e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e62:	f000 b95f 	b.w	8011124 <_close_r>
	...

08010e68 <_strtol_l.constprop.0>:
 8010e68:	2b01      	cmp	r3, #1
 8010e6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e6e:	d001      	beq.n	8010e74 <_strtol_l.constprop.0+0xc>
 8010e70:	2b24      	cmp	r3, #36	; 0x24
 8010e72:	d906      	bls.n	8010e82 <_strtol_l.constprop.0+0x1a>
 8010e74:	f7ff f83a 	bl	800feec <__errno>
 8010e78:	2316      	movs	r3, #22
 8010e7a:	6003      	str	r3, [r0, #0]
 8010e7c:	2000      	movs	r0, #0
 8010e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e82:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010f68 <_strtol_l.constprop.0+0x100>
 8010e86:	460d      	mov	r5, r1
 8010e88:	462e      	mov	r6, r5
 8010e8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010e8e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010e92:	f017 0708 	ands.w	r7, r7, #8
 8010e96:	d1f7      	bne.n	8010e88 <_strtol_l.constprop.0+0x20>
 8010e98:	2c2d      	cmp	r4, #45	; 0x2d
 8010e9a:	d132      	bne.n	8010f02 <_strtol_l.constprop.0+0x9a>
 8010e9c:	782c      	ldrb	r4, [r5, #0]
 8010e9e:	2701      	movs	r7, #1
 8010ea0:	1cb5      	adds	r5, r6, #2
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d05b      	beq.n	8010f5e <_strtol_l.constprop.0+0xf6>
 8010ea6:	2b10      	cmp	r3, #16
 8010ea8:	d109      	bne.n	8010ebe <_strtol_l.constprop.0+0x56>
 8010eaa:	2c30      	cmp	r4, #48	; 0x30
 8010eac:	d107      	bne.n	8010ebe <_strtol_l.constprop.0+0x56>
 8010eae:	782c      	ldrb	r4, [r5, #0]
 8010eb0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010eb4:	2c58      	cmp	r4, #88	; 0x58
 8010eb6:	d14d      	bne.n	8010f54 <_strtol_l.constprop.0+0xec>
 8010eb8:	786c      	ldrb	r4, [r5, #1]
 8010eba:	2310      	movs	r3, #16
 8010ebc:	3502      	adds	r5, #2
 8010ebe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010ec2:	f108 38ff 	add.w	r8, r8, #4294967295
 8010ec6:	f04f 0c00 	mov.w	ip, #0
 8010eca:	fbb8 f9f3 	udiv	r9, r8, r3
 8010ece:	4666      	mov	r6, ip
 8010ed0:	fb03 8a19 	mls	sl, r3, r9, r8
 8010ed4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010ed8:	f1be 0f09 	cmp.w	lr, #9
 8010edc:	d816      	bhi.n	8010f0c <_strtol_l.constprop.0+0xa4>
 8010ede:	4674      	mov	r4, lr
 8010ee0:	42a3      	cmp	r3, r4
 8010ee2:	dd24      	ble.n	8010f2e <_strtol_l.constprop.0+0xc6>
 8010ee4:	f1bc 0f00 	cmp.w	ip, #0
 8010ee8:	db1e      	blt.n	8010f28 <_strtol_l.constprop.0+0xc0>
 8010eea:	45b1      	cmp	r9, r6
 8010eec:	d31c      	bcc.n	8010f28 <_strtol_l.constprop.0+0xc0>
 8010eee:	d101      	bne.n	8010ef4 <_strtol_l.constprop.0+0x8c>
 8010ef0:	45a2      	cmp	sl, r4
 8010ef2:	db19      	blt.n	8010f28 <_strtol_l.constprop.0+0xc0>
 8010ef4:	fb06 4603 	mla	r6, r6, r3, r4
 8010ef8:	f04f 0c01 	mov.w	ip, #1
 8010efc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010f00:	e7e8      	b.n	8010ed4 <_strtol_l.constprop.0+0x6c>
 8010f02:	2c2b      	cmp	r4, #43	; 0x2b
 8010f04:	bf04      	itt	eq
 8010f06:	782c      	ldrbeq	r4, [r5, #0]
 8010f08:	1cb5      	addeq	r5, r6, #2
 8010f0a:	e7ca      	b.n	8010ea2 <_strtol_l.constprop.0+0x3a>
 8010f0c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010f10:	f1be 0f19 	cmp.w	lr, #25
 8010f14:	d801      	bhi.n	8010f1a <_strtol_l.constprop.0+0xb2>
 8010f16:	3c37      	subs	r4, #55	; 0x37
 8010f18:	e7e2      	b.n	8010ee0 <_strtol_l.constprop.0+0x78>
 8010f1a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010f1e:	f1be 0f19 	cmp.w	lr, #25
 8010f22:	d804      	bhi.n	8010f2e <_strtol_l.constprop.0+0xc6>
 8010f24:	3c57      	subs	r4, #87	; 0x57
 8010f26:	e7db      	b.n	8010ee0 <_strtol_l.constprop.0+0x78>
 8010f28:	f04f 3cff 	mov.w	ip, #4294967295
 8010f2c:	e7e6      	b.n	8010efc <_strtol_l.constprop.0+0x94>
 8010f2e:	f1bc 0f00 	cmp.w	ip, #0
 8010f32:	da05      	bge.n	8010f40 <_strtol_l.constprop.0+0xd8>
 8010f34:	2322      	movs	r3, #34	; 0x22
 8010f36:	6003      	str	r3, [r0, #0]
 8010f38:	4646      	mov	r6, r8
 8010f3a:	b942      	cbnz	r2, 8010f4e <_strtol_l.constprop.0+0xe6>
 8010f3c:	4630      	mov	r0, r6
 8010f3e:	e79e      	b.n	8010e7e <_strtol_l.constprop.0+0x16>
 8010f40:	b107      	cbz	r7, 8010f44 <_strtol_l.constprop.0+0xdc>
 8010f42:	4276      	negs	r6, r6
 8010f44:	2a00      	cmp	r2, #0
 8010f46:	d0f9      	beq.n	8010f3c <_strtol_l.constprop.0+0xd4>
 8010f48:	f1bc 0f00 	cmp.w	ip, #0
 8010f4c:	d000      	beq.n	8010f50 <_strtol_l.constprop.0+0xe8>
 8010f4e:	1e69      	subs	r1, r5, #1
 8010f50:	6011      	str	r1, [r2, #0]
 8010f52:	e7f3      	b.n	8010f3c <_strtol_l.constprop.0+0xd4>
 8010f54:	2430      	movs	r4, #48	; 0x30
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d1b1      	bne.n	8010ebe <_strtol_l.constprop.0+0x56>
 8010f5a:	2308      	movs	r3, #8
 8010f5c:	e7af      	b.n	8010ebe <_strtol_l.constprop.0+0x56>
 8010f5e:	2c30      	cmp	r4, #48	; 0x30
 8010f60:	d0a5      	beq.n	8010eae <_strtol_l.constprop.0+0x46>
 8010f62:	230a      	movs	r3, #10
 8010f64:	e7ab      	b.n	8010ebe <_strtol_l.constprop.0+0x56>
 8010f66:	bf00      	nop
 8010f68:	080148c5 	.word	0x080148c5

08010f6c <strtol>:
 8010f6c:	4613      	mov	r3, r2
 8010f6e:	460a      	mov	r2, r1
 8010f70:	4601      	mov	r1, r0
 8010f72:	4802      	ldr	r0, [pc, #8]	; (8010f7c <strtol+0x10>)
 8010f74:	6800      	ldr	r0, [r0, #0]
 8010f76:	f7ff bf77 	b.w	8010e68 <_strtol_l.constprop.0>
 8010f7a:	bf00      	nop
 8010f7c:	20000114 	.word	0x20000114

08010f80 <__swbuf_r>:
 8010f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f82:	460e      	mov	r6, r1
 8010f84:	4614      	mov	r4, r2
 8010f86:	4605      	mov	r5, r0
 8010f88:	b118      	cbz	r0, 8010f92 <__swbuf_r+0x12>
 8010f8a:	6983      	ldr	r3, [r0, #24]
 8010f8c:	b90b      	cbnz	r3, 8010f92 <__swbuf_r+0x12>
 8010f8e:	f7ff f80b 	bl	800ffa8 <__sinit>
 8010f92:	4b21      	ldr	r3, [pc, #132]	; (8011018 <__swbuf_r+0x98>)
 8010f94:	429c      	cmp	r4, r3
 8010f96:	d12b      	bne.n	8010ff0 <__swbuf_r+0x70>
 8010f98:	686c      	ldr	r4, [r5, #4]
 8010f9a:	69a3      	ldr	r3, [r4, #24]
 8010f9c:	60a3      	str	r3, [r4, #8]
 8010f9e:	89a3      	ldrh	r3, [r4, #12]
 8010fa0:	071a      	lsls	r2, r3, #28
 8010fa2:	d52f      	bpl.n	8011004 <__swbuf_r+0x84>
 8010fa4:	6923      	ldr	r3, [r4, #16]
 8010fa6:	b36b      	cbz	r3, 8011004 <__swbuf_r+0x84>
 8010fa8:	6923      	ldr	r3, [r4, #16]
 8010faa:	6820      	ldr	r0, [r4, #0]
 8010fac:	1ac0      	subs	r0, r0, r3
 8010fae:	6963      	ldr	r3, [r4, #20]
 8010fb0:	b2f6      	uxtb	r6, r6
 8010fb2:	4283      	cmp	r3, r0
 8010fb4:	4637      	mov	r7, r6
 8010fb6:	dc04      	bgt.n	8010fc2 <__swbuf_r+0x42>
 8010fb8:	4621      	mov	r1, r4
 8010fba:	4628      	mov	r0, r5
 8010fbc:	f000 ffc4 	bl	8011f48 <_fflush_r>
 8010fc0:	bb30      	cbnz	r0, 8011010 <__swbuf_r+0x90>
 8010fc2:	68a3      	ldr	r3, [r4, #8]
 8010fc4:	3b01      	subs	r3, #1
 8010fc6:	60a3      	str	r3, [r4, #8]
 8010fc8:	6823      	ldr	r3, [r4, #0]
 8010fca:	1c5a      	adds	r2, r3, #1
 8010fcc:	6022      	str	r2, [r4, #0]
 8010fce:	701e      	strb	r6, [r3, #0]
 8010fd0:	6963      	ldr	r3, [r4, #20]
 8010fd2:	3001      	adds	r0, #1
 8010fd4:	4283      	cmp	r3, r0
 8010fd6:	d004      	beq.n	8010fe2 <__swbuf_r+0x62>
 8010fd8:	89a3      	ldrh	r3, [r4, #12]
 8010fda:	07db      	lsls	r3, r3, #31
 8010fdc:	d506      	bpl.n	8010fec <__swbuf_r+0x6c>
 8010fde:	2e0a      	cmp	r6, #10
 8010fe0:	d104      	bne.n	8010fec <__swbuf_r+0x6c>
 8010fe2:	4621      	mov	r1, r4
 8010fe4:	4628      	mov	r0, r5
 8010fe6:	f000 ffaf 	bl	8011f48 <_fflush_r>
 8010fea:	b988      	cbnz	r0, 8011010 <__swbuf_r+0x90>
 8010fec:	4638      	mov	r0, r7
 8010fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ff0:	4b0a      	ldr	r3, [pc, #40]	; (801101c <__swbuf_r+0x9c>)
 8010ff2:	429c      	cmp	r4, r3
 8010ff4:	d101      	bne.n	8010ffa <__swbuf_r+0x7a>
 8010ff6:	68ac      	ldr	r4, [r5, #8]
 8010ff8:	e7cf      	b.n	8010f9a <__swbuf_r+0x1a>
 8010ffa:	4b09      	ldr	r3, [pc, #36]	; (8011020 <__swbuf_r+0xa0>)
 8010ffc:	429c      	cmp	r4, r3
 8010ffe:	bf08      	it	eq
 8011000:	68ec      	ldreq	r4, [r5, #12]
 8011002:	e7ca      	b.n	8010f9a <__swbuf_r+0x1a>
 8011004:	4621      	mov	r1, r4
 8011006:	4628      	mov	r0, r5
 8011008:	f000 f81e 	bl	8011048 <__swsetup_r>
 801100c:	2800      	cmp	r0, #0
 801100e:	d0cb      	beq.n	8010fa8 <__swbuf_r+0x28>
 8011010:	f04f 37ff 	mov.w	r7, #4294967295
 8011014:	e7ea      	b.n	8010fec <__swbuf_r+0x6c>
 8011016:	bf00      	nop
 8011018:	0801484c 	.word	0x0801484c
 801101c:	0801486c 	.word	0x0801486c
 8011020:	0801482c 	.word	0x0801482c

08011024 <_write_r>:
 8011024:	b538      	push	{r3, r4, r5, lr}
 8011026:	4d07      	ldr	r5, [pc, #28]	; (8011044 <_write_r+0x20>)
 8011028:	4604      	mov	r4, r0
 801102a:	4608      	mov	r0, r1
 801102c:	4611      	mov	r1, r2
 801102e:	2200      	movs	r2, #0
 8011030:	602a      	str	r2, [r5, #0]
 8011032:	461a      	mov	r2, r3
 8011034:	f7fe fb2e 	bl	800f694 <_write>
 8011038:	1c43      	adds	r3, r0, #1
 801103a:	d102      	bne.n	8011042 <_write_r+0x1e>
 801103c:	682b      	ldr	r3, [r5, #0]
 801103e:	b103      	cbz	r3, 8011042 <_write_r+0x1e>
 8011040:	6023      	str	r3, [r4, #0]
 8011042:	bd38      	pop	{r3, r4, r5, pc}
 8011044:	20005e90 	.word	0x20005e90

08011048 <__swsetup_r>:
 8011048:	4b32      	ldr	r3, [pc, #200]	; (8011114 <__swsetup_r+0xcc>)
 801104a:	b570      	push	{r4, r5, r6, lr}
 801104c:	681d      	ldr	r5, [r3, #0]
 801104e:	4606      	mov	r6, r0
 8011050:	460c      	mov	r4, r1
 8011052:	b125      	cbz	r5, 801105e <__swsetup_r+0x16>
 8011054:	69ab      	ldr	r3, [r5, #24]
 8011056:	b913      	cbnz	r3, 801105e <__swsetup_r+0x16>
 8011058:	4628      	mov	r0, r5
 801105a:	f7fe ffa5 	bl	800ffa8 <__sinit>
 801105e:	4b2e      	ldr	r3, [pc, #184]	; (8011118 <__swsetup_r+0xd0>)
 8011060:	429c      	cmp	r4, r3
 8011062:	d10f      	bne.n	8011084 <__swsetup_r+0x3c>
 8011064:	686c      	ldr	r4, [r5, #4]
 8011066:	89a3      	ldrh	r3, [r4, #12]
 8011068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801106c:	0719      	lsls	r1, r3, #28
 801106e:	d42c      	bmi.n	80110ca <__swsetup_r+0x82>
 8011070:	06dd      	lsls	r5, r3, #27
 8011072:	d411      	bmi.n	8011098 <__swsetup_r+0x50>
 8011074:	2309      	movs	r3, #9
 8011076:	6033      	str	r3, [r6, #0]
 8011078:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801107c:	81a3      	strh	r3, [r4, #12]
 801107e:	f04f 30ff 	mov.w	r0, #4294967295
 8011082:	e03e      	b.n	8011102 <__swsetup_r+0xba>
 8011084:	4b25      	ldr	r3, [pc, #148]	; (801111c <__swsetup_r+0xd4>)
 8011086:	429c      	cmp	r4, r3
 8011088:	d101      	bne.n	801108e <__swsetup_r+0x46>
 801108a:	68ac      	ldr	r4, [r5, #8]
 801108c:	e7eb      	b.n	8011066 <__swsetup_r+0x1e>
 801108e:	4b24      	ldr	r3, [pc, #144]	; (8011120 <__swsetup_r+0xd8>)
 8011090:	429c      	cmp	r4, r3
 8011092:	bf08      	it	eq
 8011094:	68ec      	ldreq	r4, [r5, #12]
 8011096:	e7e6      	b.n	8011066 <__swsetup_r+0x1e>
 8011098:	0758      	lsls	r0, r3, #29
 801109a:	d512      	bpl.n	80110c2 <__swsetup_r+0x7a>
 801109c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801109e:	b141      	cbz	r1, 80110b2 <__swsetup_r+0x6a>
 80110a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110a4:	4299      	cmp	r1, r3
 80110a6:	d002      	beq.n	80110ae <__swsetup_r+0x66>
 80110a8:	4630      	mov	r0, r6
 80110aa:	f001 fbb3 	bl	8012814 <_free_r>
 80110ae:	2300      	movs	r3, #0
 80110b0:	6363      	str	r3, [r4, #52]	; 0x34
 80110b2:	89a3      	ldrh	r3, [r4, #12]
 80110b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80110b8:	81a3      	strh	r3, [r4, #12]
 80110ba:	2300      	movs	r3, #0
 80110bc:	6063      	str	r3, [r4, #4]
 80110be:	6923      	ldr	r3, [r4, #16]
 80110c0:	6023      	str	r3, [r4, #0]
 80110c2:	89a3      	ldrh	r3, [r4, #12]
 80110c4:	f043 0308 	orr.w	r3, r3, #8
 80110c8:	81a3      	strh	r3, [r4, #12]
 80110ca:	6923      	ldr	r3, [r4, #16]
 80110cc:	b94b      	cbnz	r3, 80110e2 <__swsetup_r+0x9a>
 80110ce:	89a3      	ldrh	r3, [r4, #12]
 80110d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80110d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110d8:	d003      	beq.n	80110e2 <__swsetup_r+0x9a>
 80110da:	4621      	mov	r1, r4
 80110dc:	4630      	mov	r0, r6
 80110de:	f000 ffab 	bl	8012038 <__smakebuf_r>
 80110e2:	89a0      	ldrh	r0, [r4, #12]
 80110e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110e8:	f010 0301 	ands.w	r3, r0, #1
 80110ec:	d00a      	beq.n	8011104 <__swsetup_r+0xbc>
 80110ee:	2300      	movs	r3, #0
 80110f0:	60a3      	str	r3, [r4, #8]
 80110f2:	6963      	ldr	r3, [r4, #20]
 80110f4:	425b      	negs	r3, r3
 80110f6:	61a3      	str	r3, [r4, #24]
 80110f8:	6923      	ldr	r3, [r4, #16]
 80110fa:	b943      	cbnz	r3, 801110e <__swsetup_r+0xc6>
 80110fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011100:	d1ba      	bne.n	8011078 <__swsetup_r+0x30>
 8011102:	bd70      	pop	{r4, r5, r6, pc}
 8011104:	0781      	lsls	r1, r0, #30
 8011106:	bf58      	it	pl
 8011108:	6963      	ldrpl	r3, [r4, #20]
 801110a:	60a3      	str	r3, [r4, #8]
 801110c:	e7f4      	b.n	80110f8 <__swsetup_r+0xb0>
 801110e:	2000      	movs	r0, #0
 8011110:	e7f7      	b.n	8011102 <__swsetup_r+0xba>
 8011112:	bf00      	nop
 8011114:	20000114 	.word	0x20000114
 8011118:	0801484c 	.word	0x0801484c
 801111c:	0801486c 	.word	0x0801486c
 8011120:	0801482c 	.word	0x0801482c

08011124 <_close_r>:
 8011124:	b538      	push	{r3, r4, r5, lr}
 8011126:	4d06      	ldr	r5, [pc, #24]	; (8011140 <_close_r+0x1c>)
 8011128:	2300      	movs	r3, #0
 801112a:	4604      	mov	r4, r0
 801112c:	4608      	mov	r0, r1
 801112e:	602b      	str	r3, [r5, #0]
 8011130:	f7f3 fa51 	bl	80045d6 <_close>
 8011134:	1c43      	adds	r3, r0, #1
 8011136:	d102      	bne.n	801113e <_close_r+0x1a>
 8011138:	682b      	ldr	r3, [r5, #0]
 801113a:	b103      	cbz	r3, 801113e <_close_r+0x1a>
 801113c:	6023      	str	r3, [r4, #0]
 801113e:	bd38      	pop	{r3, r4, r5, pc}
 8011140:	20005e90 	.word	0x20005e90

08011144 <quorem>:
 8011144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011148:	6903      	ldr	r3, [r0, #16]
 801114a:	690c      	ldr	r4, [r1, #16]
 801114c:	42a3      	cmp	r3, r4
 801114e:	4607      	mov	r7, r0
 8011150:	f2c0 8081 	blt.w	8011256 <quorem+0x112>
 8011154:	3c01      	subs	r4, #1
 8011156:	f101 0814 	add.w	r8, r1, #20
 801115a:	f100 0514 	add.w	r5, r0, #20
 801115e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011162:	9301      	str	r3, [sp, #4]
 8011164:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011168:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801116c:	3301      	adds	r3, #1
 801116e:	429a      	cmp	r2, r3
 8011170:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011174:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011178:	fbb2 f6f3 	udiv	r6, r2, r3
 801117c:	d331      	bcc.n	80111e2 <quorem+0x9e>
 801117e:	f04f 0e00 	mov.w	lr, #0
 8011182:	4640      	mov	r0, r8
 8011184:	46ac      	mov	ip, r5
 8011186:	46f2      	mov	sl, lr
 8011188:	f850 2b04 	ldr.w	r2, [r0], #4
 801118c:	b293      	uxth	r3, r2
 801118e:	fb06 e303 	mla	r3, r6, r3, lr
 8011192:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011196:	b29b      	uxth	r3, r3
 8011198:	ebaa 0303 	sub.w	r3, sl, r3
 801119c:	f8dc a000 	ldr.w	sl, [ip]
 80111a0:	0c12      	lsrs	r2, r2, #16
 80111a2:	fa13 f38a 	uxtah	r3, r3, sl
 80111a6:	fb06 e202 	mla	r2, r6, r2, lr
 80111aa:	9300      	str	r3, [sp, #0]
 80111ac:	9b00      	ldr	r3, [sp, #0]
 80111ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80111b2:	b292      	uxth	r2, r2
 80111b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80111b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80111bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80111c0:	4581      	cmp	r9, r0
 80111c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80111c6:	f84c 3b04 	str.w	r3, [ip], #4
 80111ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80111ce:	d2db      	bcs.n	8011188 <quorem+0x44>
 80111d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80111d4:	b92b      	cbnz	r3, 80111e2 <quorem+0x9e>
 80111d6:	9b01      	ldr	r3, [sp, #4]
 80111d8:	3b04      	subs	r3, #4
 80111da:	429d      	cmp	r5, r3
 80111dc:	461a      	mov	r2, r3
 80111de:	d32e      	bcc.n	801123e <quorem+0xfa>
 80111e0:	613c      	str	r4, [r7, #16]
 80111e2:	4638      	mov	r0, r7
 80111e4:	f001 f9fe 	bl	80125e4 <__mcmp>
 80111e8:	2800      	cmp	r0, #0
 80111ea:	db24      	blt.n	8011236 <quorem+0xf2>
 80111ec:	3601      	adds	r6, #1
 80111ee:	4628      	mov	r0, r5
 80111f0:	f04f 0c00 	mov.w	ip, #0
 80111f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80111f8:	f8d0 e000 	ldr.w	lr, [r0]
 80111fc:	b293      	uxth	r3, r2
 80111fe:	ebac 0303 	sub.w	r3, ip, r3
 8011202:	0c12      	lsrs	r2, r2, #16
 8011204:	fa13 f38e 	uxtah	r3, r3, lr
 8011208:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801120c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011210:	b29b      	uxth	r3, r3
 8011212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011216:	45c1      	cmp	r9, r8
 8011218:	f840 3b04 	str.w	r3, [r0], #4
 801121c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011220:	d2e8      	bcs.n	80111f4 <quorem+0xb0>
 8011222:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011226:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801122a:	b922      	cbnz	r2, 8011236 <quorem+0xf2>
 801122c:	3b04      	subs	r3, #4
 801122e:	429d      	cmp	r5, r3
 8011230:	461a      	mov	r2, r3
 8011232:	d30a      	bcc.n	801124a <quorem+0x106>
 8011234:	613c      	str	r4, [r7, #16]
 8011236:	4630      	mov	r0, r6
 8011238:	b003      	add	sp, #12
 801123a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801123e:	6812      	ldr	r2, [r2, #0]
 8011240:	3b04      	subs	r3, #4
 8011242:	2a00      	cmp	r2, #0
 8011244:	d1cc      	bne.n	80111e0 <quorem+0x9c>
 8011246:	3c01      	subs	r4, #1
 8011248:	e7c7      	b.n	80111da <quorem+0x96>
 801124a:	6812      	ldr	r2, [r2, #0]
 801124c:	3b04      	subs	r3, #4
 801124e:	2a00      	cmp	r2, #0
 8011250:	d1f0      	bne.n	8011234 <quorem+0xf0>
 8011252:	3c01      	subs	r4, #1
 8011254:	e7eb      	b.n	801122e <quorem+0xea>
 8011256:	2000      	movs	r0, #0
 8011258:	e7ee      	b.n	8011238 <quorem+0xf4>
 801125a:	0000      	movs	r0, r0
 801125c:	0000      	movs	r0, r0
	...

08011260 <_dtoa_r>:
 8011260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011264:	ed2d 8b04 	vpush	{d8-d9}
 8011268:	ec57 6b10 	vmov	r6, r7, d0
 801126c:	b093      	sub	sp, #76	; 0x4c
 801126e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011270:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011274:	9106      	str	r1, [sp, #24]
 8011276:	ee10 aa10 	vmov	sl, s0
 801127a:	4604      	mov	r4, r0
 801127c:	9209      	str	r2, [sp, #36]	; 0x24
 801127e:	930c      	str	r3, [sp, #48]	; 0x30
 8011280:	46bb      	mov	fp, r7
 8011282:	b975      	cbnz	r5, 80112a2 <_dtoa_r+0x42>
 8011284:	2010      	movs	r0, #16
 8011286:	f000 ff17 	bl	80120b8 <malloc>
 801128a:	4602      	mov	r2, r0
 801128c:	6260      	str	r0, [r4, #36]	; 0x24
 801128e:	b920      	cbnz	r0, 801129a <_dtoa_r+0x3a>
 8011290:	4ba7      	ldr	r3, [pc, #668]	; (8011530 <_dtoa_r+0x2d0>)
 8011292:	21ea      	movs	r1, #234	; 0xea
 8011294:	48a7      	ldr	r0, [pc, #668]	; (8011534 <_dtoa_r+0x2d4>)
 8011296:	f001 fdd1 	bl	8012e3c <__assert_func>
 801129a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801129e:	6005      	str	r5, [r0, #0]
 80112a0:	60c5      	str	r5, [r0, #12]
 80112a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112a4:	6819      	ldr	r1, [r3, #0]
 80112a6:	b151      	cbz	r1, 80112be <_dtoa_r+0x5e>
 80112a8:	685a      	ldr	r2, [r3, #4]
 80112aa:	604a      	str	r2, [r1, #4]
 80112ac:	2301      	movs	r3, #1
 80112ae:	4093      	lsls	r3, r2
 80112b0:	608b      	str	r3, [r1, #8]
 80112b2:	4620      	mov	r0, r4
 80112b4:	f000 ff54 	bl	8012160 <_Bfree>
 80112b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112ba:	2200      	movs	r2, #0
 80112bc:	601a      	str	r2, [r3, #0]
 80112be:	1e3b      	subs	r3, r7, #0
 80112c0:	bfaa      	itet	ge
 80112c2:	2300      	movge	r3, #0
 80112c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80112c8:	f8c8 3000 	strge.w	r3, [r8]
 80112cc:	4b9a      	ldr	r3, [pc, #616]	; (8011538 <_dtoa_r+0x2d8>)
 80112ce:	bfbc      	itt	lt
 80112d0:	2201      	movlt	r2, #1
 80112d2:	f8c8 2000 	strlt.w	r2, [r8]
 80112d6:	ea33 030b 	bics.w	r3, r3, fp
 80112da:	d11b      	bne.n	8011314 <_dtoa_r+0xb4>
 80112dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80112de:	f242 730f 	movw	r3, #9999	; 0x270f
 80112e2:	6013      	str	r3, [r2, #0]
 80112e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80112e8:	4333      	orrs	r3, r6
 80112ea:	f000 8592 	beq.w	8011e12 <_dtoa_r+0xbb2>
 80112ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80112f0:	b963      	cbnz	r3, 801130c <_dtoa_r+0xac>
 80112f2:	4b92      	ldr	r3, [pc, #584]	; (801153c <_dtoa_r+0x2dc>)
 80112f4:	e022      	b.n	801133c <_dtoa_r+0xdc>
 80112f6:	4b92      	ldr	r3, [pc, #584]	; (8011540 <_dtoa_r+0x2e0>)
 80112f8:	9301      	str	r3, [sp, #4]
 80112fa:	3308      	adds	r3, #8
 80112fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80112fe:	6013      	str	r3, [r2, #0]
 8011300:	9801      	ldr	r0, [sp, #4]
 8011302:	b013      	add	sp, #76	; 0x4c
 8011304:	ecbd 8b04 	vpop	{d8-d9}
 8011308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801130c:	4b8b      	ldr	r3, [pc, #556]	; (801153c <_dtoa_r+0x2dc>)
 801130e:	9301      	str	r3, [sp, #4]
 8011310:	3303      	adds	r3, #3
 8011312:	e7f3      	b.n	80112fc <_dtoa_r+0x9c>
 8011314:	2200      	movs	r2, #0
 8011316:	2300      	movs	r3, #0
 8011318:	4650      	mov	r0, sl
 801131a:	4659      	mov	r1, fp
 801131c:	f7ef fbdc 	bl	8000ad8 <__aeabi_dcmpeq>
 8011320:	ec4b ab19 	vmov	d9, sl, fp
 8011324:	4680      	mov	r8, r0
 8011326:	b158      	cbz	r0, 8011340 <_dtoa_r+0xe0>
 8011328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801132a:	2301      	movs	r3, #1
 801132c:	6013      	str	r3, [r2, #0]
 801132e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011330:	2b00      	cmp	r3, #0
 8011332:	f000 856b 	beq.w	8011e0c <_dtoa_r+0xbac>
 8011336:	4883      	ldr	r0, [pc, #524]	; (8011544 <_dtoa_r+0x2e4>)
 8011338:	6018      	str	r0, [r3, #0]
 801133a:	1e43      	subs	r3, r0, #1
 801133c:	9301      	str	r3, [sp, #4]
 801133e:	e7df      	b.n	8011300 <_dtoa_r+0xa0>
 8011340:	ec4b ab10 	vmov	d0, sl, fp
 8011344:	aa10      	add	r2, sp, #64	; 0x40
 8011346:	a911      	add	r1, sp, #68	; 0x44
 8011348:	4620      	mov	r0, r4
 801134a:	f001 f9f1 	bl	8012730 <__d2b>
 801134e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011352:	ee08 0a10 	vmov	s16, r0
 8011356:	2d00      	cmp	r5, #0
 8011358:	f000 8084 	beq.w	8011464 <_dtoa_r+0x204>
 801135c:	ee19 3a90 	vmov	r3, s19
 8011360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011364:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011368:	4656      	mov	r6, sl
 801136a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801136e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011372:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011376:	4b74      	ldr	r3, [pc, #464]	; (8011548 <_dtoa_r+0x2e8>)
 8011378:	2200      	movs	r2, #0
 801137a:	4630      	mov	r0, r6
 801137c:	4639      	mov	r1, r7
 801137e:	f7ee ff8b 	bl	8000298 <__aeabi_dsub>
 8011382:	a365      	add	r3, pc, #404	; (adr r3, 8011518 <_dtoa_r+0x2b8>)
 8011384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011388:	f7ef f93e 	bl	8000608 <__aeabi_dmul>
 801138c:	a364      	add	r3, pc, #400	; (adr r3, 8011520 <_dtoa_r+0x2c0>)
 801138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011392:	f7ee ff83 	bl	800029c <__adddf3>
 8011396:	4606      	mov	r6, r0
 8011398:	4628      	mov	r0, r5
 801139a:	460f      	mov	r7, r1
 801139c:	f7ef f8ca 	bl	8000534 <__aeabi_i2d>
 80113a0:	a361      	add	r3, pc, #388	; (adr r3, 8011528 <_dtoa_r+0x2c8>)
 80113a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a6:	f7ef f92f 	bl	8000608 <__aeabi_dmul>
 80113aa:	4602      	mov	r2, r0
 80113ac:	460b      	mov	r3, r1
 80113ae:	4630      	mov	r0, r6
 80113b0:	4639      	mov	r1, r7
 80113b2:	f7ee ff73 	bl	800029c <__adddf3>
 80113b6:	4606      	mov	r6, r0
 80113b8:	460f      	mov	r7, r1
 80113ba:	f7ef fbd5 	bl	8000b68 <__aeabi_d2iz>
 80113be:	2200      	movs	r2, #0
 80113c0:	9000      	str	r0, [sp, #0]
 80113c2:	2300      	movs	r3, #0
 80113c4:	4630      	mov	r0, r6
 80113c6:	4639      	mov	r1, r7
 80113c8:	f7ef fb90 	bl	8000aec <__aeabi_dcmplt>
 80113cc:	b150      	cbz	r0, 80113e4 <_dtoa_r+0x184>
 80113ce:	9800      	ldr	r0, [sp, #0]
 80113d0:	f7ef f8b0 	bl	8000534 <__aeabi_i2d>
 80113d4:	4632      	mov	r2, r6
 80113d6:	463b      	mov	r3, r7
 80113d8:	f7ef fb7e 	bl	8000ad8 <__aeabi_dcmpeq>
 80113dc:	b910      	cbnz	r0, 80113e4 <_dtoa_r+0x184>
 80113de:	9b00      	ldr	r3, [sp, #0]
 80113e0:	3b01      	subs	r3, #1
 80113e2:	9300      	str	r3, [sp, #0]
 80113e4:	9b00      	ldr	r3, [sp, #0]
 80113e6:	2b16      	cmp	r3, #22
 80113e8:	d85a      	bhi.n	80114a0 <_dtoa_r+0x240>
 80113ea:	9a00      	ldr	r2, [sp, #0]
 80113ec:	4b57      	ldr	r3, [pc, #348]	; (801154c <_dtoa_r+0x2ec>)
 80113ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80113f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113f6:	ec51 0b19 	vmov	r0, r1, d9
 80113fa:	f7ef fb77 	bl	8000aec <__aeabi_dcmplt>
 80113fe:	2800      	cmp	r0, #0
 8011400:	d050      	beq.n	80114a4 <_dtoa_r+0x244>
 8011402:	9b00      	ldr	r3, [sp, #0]
 8011404:	3b01      	subs	r3, #1
 8011406:	9300      	str	r3, [sp, #0]
 8011408:	2300      	movs	r3, #0
 801140a:	930b      	str	r3, [sp, #44]	; 0x2c
 801140c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801140e:	1b5d      	subs	r5, r3, r5
 8011410:	1e6b      	subs	r3, r5, #1
 8011412:	9305      	str	r3, [sp, #20]
 8011414:	bf45      	ittet	mi
 8011416:	f1c5 0301 	rsbmi	r3, r5, #1
 801141a:	9304      	strmi	r3, [sp, #16]
 801141c:	2300      	movpl	r3, #0
 801141e:	2300      	movmi	r3, #0
 8011420:	bf4c      	ite	mi
 8011422:	9305      	strmi	r3, [sp, #20]
 8011424:	9304      	strpl	r3, [sp, #16]
 8011426:	9b00      	ldr	r3, [sp, #0]
 8011428:	2b00      	cmp	r3, #0
 801142a:	db3d      	blt.n	80114a8 <_dtoa_r+0x248>
 801142c:	9b05      	ldr	r3, [sp, #20]
 801142e:	9a00      	ldr	r2, [sp, #0]
 8011430:	920a      	str	r2, [sp, #40]	; 0x28
 8011432:	4413      	add	r3, r2
 8011434:	9305      	str	r3, [sp, #20]
 8011436:	2300      	movs	r3, #0
 8011438:	9307      	str	r3, [sp, #28]
 801143a:	9b06      	ldr	r3, [sp, #24]
 801143c:	2b09      	cmp	r3, #9
 801143e:	f200 8089 	bhi.w	8011554 <_dtoa_r+0x2f4>
 8011442:	2b05      	cmp	r3, #5
 8011444:	bfc4      	itt	gt
 8011446:	3b04      	subgt	r3, #4
 8011448:	9306      	strgt	r3, [sp, #24]
 801144a:	9b06      	ldr	r3, [sp, #24]
 801144c:	f1a3 0302 	sub.w	r3, r3, #2
 8011450:	bfcc      	ite	gt
 8011452:	2500      	movgt	r5, #0
 8011454:	2501      	movle	r5, #1
 8011456:	2b03      	cmp	r3, #3
 8011458:	f200 8087 	bhi.w	801156a <_dtoa_r+0x30a>
 801145c:	e8df f003 	tbb	[pc, r3]
 8011460:	59383a2d 	.word	0x59383a2d
 8011464:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011468:	441d      	add	r5, r3
 801146a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801146e:	2b20      	cmp	r3, #32
 8011470:	bfc1      	itttt	gt
 8011472:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011476:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801147a:	fa0b f303 	lslgt.w	r3, fp, r3
 801147e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011482:	bfda      	itte	le
 8011484:	f1c3 0320 	rsble	r3, r3, #32
 8011488:	fa06 f003 	lslle.w	r0, r6, r3
 801148c:	4318      	orrgt	r0, r3
 801148e:	f7ef f841 	bl	8000514 <__aeabi_ui2d>
 8011492:	2301      	movs	r3, #1
 8011494:	4606      	mov	r6, r0
 8011496:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801149a:	3d01      	subs	r5, #1
 801149c:	930e      	str	r3, [sp, #56]	; 0x38
 801149e:	e76a      	b.n	8011376 <_dtoa_r+0x116>
 80114a0:	2301      	movs	r3, #1
 80114a2:	e7b2      	b.n	801140a <_dtoa_r+0x1aa>
 80114a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80114a6:	e7b1      	b.n	801140c <_dtoa_r+0x1ac>
 80114a8:	9b04      	ldr	r3, [sp, #16]
 80114aa:	9a00      	ldr	r2, [sp, #0]
 80114ac:	1a9b      	subs	r3, r3, r2
 80114ae:	9304      	str	r3, [sp, #16]
 80114b0:	4253      	negs	r3, r2
 80114b2:	9307      	str	r3, [sp, #28]
 80114b4:	2300      	movs	r3, #0
 80114b6:	930a      	str	r3, [sp, #40]	; 0x28
 80114b8:	e7bf      	b.n	801143a <_dtoa_r+0x1da>
 80114ba:	2300      	movs	r3, #0
 80114bc:	9308      	str	r3, [sp, #32]
 80114be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	dc55      	bgt.n	8011570 <_dtoa_r+0x310>
 80114c4:	2301      	movs	r3, #1
 80114c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80114ca:	461a      	mov	r2, r3
 80114cc:	9209      	str	r2, [sp, #36]	; 0x24
 80114ce:	e00c      	b.n	80114ea <_dtoa_r+0x28a>
 80114d0:	2301      	movs	r3, #1
 80114d2:	e7f3      	b.n	80114bc <_dtoa_r+0x25c>
 80114d4:	2300      	movs	r3, #0
 80114d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114d8:	9308      	str	r3, [sp, #32]
 80114da:	9b00      	ldr	r3, [sp, #0]
 80114dc:	4413      	add	r3, r2
 80114de:	9302      	str	r3, [sp, #8]
 80114e0:	3301      	adds	r3, #1
 80114e2:	2b01      	cmp	r3, #1
 80114e4:	9303      	str	r3, [sp, #12]
 80114e6:	bfb8      	it	lt
 80114e8:	2301      	movlt	r3, #1
 80114ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80114ec:	2200      	movs	r2, #0
 80114ee:	6042      	str	r2, [r0, #4]
 80114f0:	2204      	movs	r2, #4
 80114f2:	f102 0614 	add.w	r6, r2, #20
 80114f6:	429e      	cmp	r6, r3
 80114f8:	6841      	ldr	r1, [r0, #4]
 80114fa:	d93d      	bls.n	8011578 <_dtoa_r+0x318>
 80114fc:	4620      	mov	r0, r4
 80114fe:	f000 fdef 	bl	80120e0 <_Balloc>
 8011502:	9001      	str	r0, [sp, #4]
 8011504:	2800      	cmp	r0, #0
 8011506:	d13b      	bne.n	8011580 <_dtoa_r+0x320>
 8011508:	4b11      	ldr	r3, [pc, #68]	; (8011550 <_dtoa_r+0x2f0>)
 801150a:	4602      	mov	r2, r0
 801150c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011510:	e6c0      	b.n	8011294 <_dtoa_r+0x34>
 8011512:	2301      	movs	r3, #1
 8011514:	e7df      	b.n	80114d6 <_dtoa_r+0x276>
 8011516:	bf00      	nop
 8011518:	636f4361 	.word	0x636f4361
 801151c:	3fd287a7 	.word	0x3fd287a7
 8011520:	8b60c8b3 	.word	0x8b60c8b3
 8011524:	3fc68a28 	.word	0x3fc68a28
 8011528:	509f79fb 	.word	0x509f79fb
 801152c:	3fd34413 	.word	0x3fd34413
 8011530:	080149d2 	.word	0x080149d2
 8011534:	080149e9 	.word	0x080149e9
 8011538:	7ff00000 	.word	0x7ff00000
 801153c:	080149ce 	.word	0x080149ce
 8011540:	080149c5 	.word	0x080149c5
 8011544:	080148a1 	.word	0x080148a1
 8011548:	3ff80000 	.word	0x3ff80000
 801154c:	08014ae0 	.word	0x08014ae0
 8011550:	08014a44 	.word	0x08014a44
 8011554:	2501      	movs	r5, #1
 8011556:	2300      	movs	r3, #0
 8011558:	9306      	str	r3, [sp, #24]
 801155a:	9508      	str	r5, [sp, #32]
 801155c:	f04f 33ff 	mov.w	r3, #4294967295
 8011560:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011564:	2200      	movs	r2, #0
 8011566:	2312      	movs	r3, #18
 8011568:	e7b0      	b.n	80114cc <_dtoa_r+0x26c>
 801156a:	2301      	movs	r3, #1
 801156c:	9308      	str	r3, [sp, #32]
 801156e:	e7f5      	b.n	801155c <_dtoa_r+0x2fc>
 8011570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011572:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011576:	e7b8      	b.n	80114ea <_dtoa_r+0x28a>
 8011578:	3101      	adds	r1, #1
 801157a:	6041      	str	r1, [r0, #4]
 801157c:	0052      	lsls	r2, r2, #1
 801157e:	e7b8      	b.n	80114f2 <_dtoa_r+0x292>
 8011580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011582:	9a01      	ldr	r2, [sp, #4]
 8011584:	601a      	str	r2, [r3, #0]
 8011586:	9b03      	ldr	r3, [sp, #12]
 8011588:	2b0e      	cmp	r3, #14
 801158a:	f200 809d 	bhi.w	80116c8 <_dtoa_r+0x468>
 801158e:	2d00      	cmp	r5, #0
 8011590:	f000 809a 	beq.w	80116c8 <_dtoa_r+0x468>
 8011594:	9b00      	ldr	r3, [sp, #0]
 8011596:	2b00      	cmp	r3, #0
 8011598:	dd32      	ble.n	8011600 <_dtoa_r+0x3a0>
 801159a:	4ab7      	ldr	r2, [pc, #732]	; (8011878 <_dtoa_r+0x618>)
 801159c:	f003 030f 	and.w	r3, r3, #15
 80115a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80115a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80115a8:	9b00      	ldr	r3, [sp, #0]
 80115aa:	05d8      	lsls	r0, r3, #23
 80115ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80115b0:	d516      	bpl.n	80115e0 <_dtoa_r+0x380>
 80115b2:	4bb2      	ldr	r3, [pc, #712]	; (801187c <_dtoa_r+0x61c>)
 80115b4:	ec51 0b19 	vmov	r0, r1, d9
 80115b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80115bc:	f7ef f94e 	bl	800085c <__aeabi_ddiv>
 80115c0:	f007 070f 	and.w	r7, r7, #15
 80115c4:	4682      	mov	sl, r0
 80115c6:	468b      	mov	fp, r1
 80115c8:	2503      	movs	r5, #3
 80115ca:	4eac      	ldr	r6, [pc, #688]	; (801187c <_dtoa_r+0x61c>)
 80115cc:	b957      	cbnz	r7, 80115e4 <_dtoa_r+0x384>
 80115ce:	4642      	mov	r2, r8
 80115d0:	464b      	mov	r3, r9
 80115d2:	4650      	mov	r0, sl
 80115d4:	4659      	mov	r1, fp
 80115d6:	f7ef f941 	bl	800085c <__aeabi_ddiv>
 80115da:	4682      	mov	sl, r0
 80115dc:	468b      	mov	fp, r1
 80115de:	e028      	b.n	8011632 <_dtoa_r+0x3d2>
 80115e0:	2502      	movs	r5, #2
 80115e2:	e7f2      	b.n	80115ca <_dtoa_r+0x36a>
 80115e4:	07f9      	lsls	r1, r7, #31
 80115e6:	d508      	bpl.n	80115fa <_dtoa_r+0x39a>
 80115e8:	4640      	mov	r0, r8
 80115ea:	4649      	mov	r1, r9
 80115ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80115f0:	f7ef f80a 	bl	8000608 <__aeabi_dmul>
 80115f4:	3501      	adds	r5, #1
 80115f6:	4680      	mov	r8, r0
 80115f8:	4689      	mov	r9, r1
 80115fa:	107f      	asrs	r7, r7, #1
 80115fc:	3608      	adds	r6, #8
 80115fe:	e7e5      	b.n	80115cc <_dtoa_r+0x36c>
 8011600:	f000 809b 	beq.w	801173a <_dtoa_r+0x4da>
 8011604:	9b00      	ldr	r3, [sp, #0]
 8011606:	4f9d      	ldr	r7, [pc, #628]	; (801187c <_dtoa_r+0x61c>)
 8011608:	425e      	negs	r6, r3
 801160a:	4b9b      	ldr	r3, [pc, #620]	; (8011878 <_dtoa_r+0x618>)
 801160c:	f006 020f 	and.w	r2, r6, #15
 8011610:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011618:	ec51 0b19 	vmov	r0, r1, d9
 801161c:	f7ee fff4 	bl	8000608 <__aeabi_dmul>
 8011620:	1136      	asrs	r6, r6, #4
 8011622:	4682      	mov	sl, r0
 8011624:	468b      	mov	fp, r1
 8011626:	2300      	movs	r3, #0
 8011628:	2502      	movs	r5, #2
 801162a:	2e00      	cmp	r6, #0
 801162c:	d17a      	bne.n	8011724 <_dtoa_r+0x4c4>
 801162e:	2b00      	cmp	r3, #0
 8011630:	d1d3      	bne.n	80115da <_dtoa_r+0x37a>
 8011632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011634:	2b00      	cmp	r3, #0
 8011636:	f000 8082 	beq.w	801173e <_dtoa_r+0x4de>
 801163a:	4b91      	ldr	r3, [pc, #580]	; (8011880 <_dtoa_r+0x620>)
 801163c:	2200      	movs	r2, #0
 801163e:	4650      	mov	r0, sl
 8011640:	4659      	mov	r1, fp
 8011642:	f7ef fa53 	bl	8000aec <__aeabi_dcmplt>
 8011646:	2800      	cmp	r0, #0
 8011648:	d079      	beq.n	801173e <_dtoa_r+0x4de>
 801164a:	9b03      	ldr	r3, [sp, #12]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d076      	beq.n	801173e <_dtoa_r+0x4de>
 8011650:	9b02      	ldr	r3, [sp, #8]
 8011652:	2b00      	cmp	r3, #0
 8011654:	dd36      	ble.n	80116c4 <_dtoa_r+0x464>
 8011656:	9b00      	ldr	r3, [sp, #0]
 8011658:	4650      	mov	r0, sl
 801165a:	4659      	mov	r1, fp
 801165c:	1e5f      	subs	r7, r3, #1
 801165e:	2200      	movs	r2, #0
 8011660:	4b88      	ldr	r3, [pc, #544]	; (8011884 <_dtoa_r+0x624>)
 8011662:	f7ee ffd1 	bl	8000608 <__aeabi_dmul>
 8011666:	9e02      	ldr	r6, [sp, #8]
 8011668:	4682      	mov	sl, r0
 801166a:	468b      	mov	fp, r1
 801166c:	3501      	adds	r5, #1
 801166e:	4628      	mov	r0, r5
 8011670:	f7ee ff60 	bl	8000534 <__aeabi_i2d>
 8011674:	4652      	mov	r2, sl
 8011676:	465b      	mov	r3, fp
 8011678:	f7ee ffc6 	bl	8000608 <__aeabi_dmul>
 801167c:	4b82      	ldr	r3, [pc, #520]	; (8011888 <_dtoa_r+0x628>)
 801167e:	2200      	movs	r2, #0
 8011680:	f7ee fe0c 	bl	800029c <__adddf3>
 8011684:	46d0      	mov	r8, sl
 8011686:	46d9      	mov	r9, fp
 8011688:	4682      	mov	sl, r0
 801168a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801168e:	2e00      	cmp	r6, #0
 8011690:	d158      	bne.n	8011744 <_dtoa_r+0x4e4>
 8011692:	4b7e      	ldr	r3, [pc, #504]	; (801188c <_dtoa_r+0x62c>)
 8011694:	2200      	movs	r2, #0
 8011696:	4640      	mov	r0, r8
 8011698:	4649      	mov	r1, r9
 801169a:	f7ee fdfd 	bl	8000298 <__aeabi_dsub>
 801169e:	4652      	mov	r2, sl
 80116a0:	465b      	mov	r3, fp
 80116a2:	4680      	mov	r8, r0
 80116a4:	4689      	mov	r9, r1
 80116a6:	f7ef fa3f 	bl	8000b28 <__aeabi_dcmpgt>
 80116aa:	2800      	cmp	r0, #0
 80116ac:	f040 8295 	bne.w	8011bda <_dtoa_r+0x97a>
 80116b0:	4652      	mov	r2, sl
 80116b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80116b6:	4640      	mov	r0, r8
 80116b8:	4649      	mov	r1, r9
 80116ba:	f7ef fa17 	bl	8000aec <__aeabi_dcmplt>
 80116be:	2800      	cmp	r0, #0
 80116c0:	f040 8289 	bne.w	8011bd6 <_dtoa_r+0x976>
 80116c4:	ec5b ab19 	vmov	sl, fp, d9
 80116c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	f2c0 8148 	blt.w	8011960 <_dtoa_r+0x700>
 80116d0:	9a00      	ldr	r2, [sp, #0]
 80116d2:	2a0e      	cmp	r2, #14
 80116d4:	f300 8144 	bgt.w	8011960 <_dtoa_r+0x700>
 80116d8:	4b67      	ldr	r3, [pc, #412]	; (8011878 <_dtoa_r+0x618>)
 80116da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80116e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	f280 80d5 	bge.w	8011894 <_dtoa_r+0x634>
 80116ea:	9b03      	ldr	r3, [sp, #12]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	f300 80d1 	bgt.w	8011894 <_dtoa_r+0x634>
 80116f2:	f040 826f 	bne.w	8011bd4 <_dtoa_r+0x974>
 80116f6:	4b65      	ldr	r3, [pc, #404]	; (801188c <_dtoa_r+0x62c>)
 80116f8:	2200      	movs	r2, #0
 80116fa:	4640      	mov	r0, r8
 80116fc:	4649      	mov	r1, r9
 80116fe:	f7ee ff83 	bl	8000608 <__aeabi_dmul>
 8011702:	4652      	mov	r2, sl
 8011704:	465b      	mov	r3, fp
 8011706:	f7ef fa05 	bl	8000b14 <__aeabi_dcmpge>
 801170a:	9e03      	ldr	r6, [sp, #12]
 801170c:	4637      	mov	r7, r6
 801170e:	2800      	cmp	r0, #0
 8011710:	f040 8245 	bne.w	8011b9e <_dtoa_r+0x93e>
 8011714:	9d01      	ldr	r5, [sp, #4]
 8011716:	2331      	movs	r3, #49	; 0x31
 8011718:	f805 3b01 	strb.w	r3, [r5], #1
 801171c:	9b00      	ldr	r3, [sp, #0]
 801171e:	3301      	adds	r3, #1
 8011720:	9300      	str	r3, [sp, #0]
 8011722:	e240      	b.n	8011ba6 <_dtoa_r+0x946>
 8011724:	07f2      	lsls	r2, r6, #31
 8011726:	d505      	bpl.n	8011734 <_dtoa_r+0x4d4>
 8011728:	e9d7 2300 	ldrd	r2, r3, [r7]
 801172c:	f7ee ff6c 	bl	8000608 <__aeabi_dmul>
 8011730:	3501      	adds	r5, #1
 8011732:	2301      	movs	r3, #1
 8011734:	1076      	asrs	r6, r6, #1
 8011736:	3708      	adds	r7, #8
 8011738:	e777      	b.n	801162a <_dtoa_r+0x3ca>
 801173a:	2502      	movs	r5, #2
 801173c:	e779      	b.n	8011632 <_dtoa_r+0x3d2>
 801173e:	9f00      	ldr	r7, [sp, #0]
 8011740:	9e03      	ldr	r6, [sp, #12]
 8011742:	e794      	b.n	801166e <_dtoa_r+0x40e>
 8011744:	9901      	ldr	r1, [sp, #4]
 8011746:	4b4c      	ldr	r3, [pc, #304]	; (8011878 <_dtoa_r+0x618>)
 8011748:	4431      	add	r1, r6
 801174a:	910d      	str	r1, [sp, #52]	; 0x34
 801174c:	9908      	ldr	r1, [sp, #32]
 801174e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011752:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011756:	2900      	cmp	r1, #0
 8011758:	d043      	beq.n	80117e2 <_dtoa_r+0x582>
 801175a:	494d      	ldr	r1, [pc, #308]	; (8011890 <_dtoa_r+0x630>)
 801175c:	2000      	movs	r0, #0
 801175e:	f7ef f87d 	bl	800085c <__aeabi_ddiv>
 8011762:	4652      	mov	r2, sl
 8011764:	465b      	mov	r3, fp
 8011766:	f7ee fd97 	bl	8000298 <__aeabi_dsub>
 801176a:	9d01      	ldr	r5, [sp, #4]
 801176c:	4682      	mov	sl, r0
 801176e:	468b      	mov	fp, r1
 8011770:	4649      	mov	r1, r9
 8011772:	4640      	mov	r0, r8
 8011774:	f7ef f9f8 	bl	8000b68 <__aeabi_d2iz>
 8011778:	4606      	mov	r6, r0
 801177a:	f7ee fedb 	bl	8000534 <__aeabi_i2d>
 801177e:	4602      	mov	r2, r0
 8011780:	460b      	mov	r3, r1
 8011782:	4640      	mov	r0, r8
 8011784:	4649      	mov	r1, r9
 8011786:	f7ee fd87 	bl	8000298 <__aeabi_dsub>
 801178a:	3630      	adds	r6, #48	; 0x30
 801178c:	f805 6b01 	strb.w	r6, [r5], #1
 8011790:	4652      	mov	r2, sl
 8011792:	465b      	mov	r3, fp
 8011794:	4680      	mov	r8, r0
 8011796:	4689      	mov	r9, r1
 8011798:	f7ef f9a8 	bl	8000aec <__aeabi_dcmplt>
 801179c:	2800      	cmp	r0, #0
 801179e:	d163      	bne.n	8011868 <_dtoa_r+0x608>
 80117a0:	4642      	mov	r2, r8
 80117a2:	464b      	mov	r3, r9
 80117a4:	4936      	ldr	r1, [pc, #216]	; (8011880 <_dtoa_r+0x620>)
 80117a6:	2000      	movs	r0, #0
 80117a8:	f7ee fd76 	bl	8000298 <__aeabi_dsub>
 80117ac:	4652      	mov	r2, sl
 80117ae:	465b      	mov	r3, fp
 80117b0:	f7ef f99c 	bl	8000aec <__aeabi_dcmplt>
 80117b4:	2800      	cmp	r0, #0
 80117b6:	f040 80b5 	bne.w	8011924 <_dtoa_r+0x6c4>
 80117ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117bc:	429d      	cmp	r5, r3
 80117be:	d081      	beq.n	80116c4 <_dtoa_r+0x464>
 80117c0:	4b30      	ldr	r3, [pc, #192]	; (8011884 <_dtoa_r+0x624>)
 80117c2:	2200      	movs	r2, #0
 80117c4:	4650      	mov	r0, sl
 80117c6:	4659      	mov	r1, fp
 80117c8:	f7ee ff1e 	bl	8000608 <__aeabi_dmul>
 80117cc:	4b2d      	ldr	r3, [pc, #180]	; (8011884 <_dtoa_r+0x624>)
 80117ce:	4682      	mov	sl, r0
 80117d0:	468b      	mov	fp, r1
 80117d2:	4640      	mov	r0, r8
 80117d4:	4649      	mov	r1, r9
 80117d6:	2200      	movs	r2, #0
 80117d8:	f7ee ff16 	bl	8000608 <__aeabi_dmul>
 80117dc:	4680      	mov	r8, r0
 80117de:	4689      	mov	r9, r1
 80117e0:	e7c6      	b.n	8011770 <_dtoa_r+0x510>
 80117e2:	4650      	mov	r0, sl
 80117e4:	4659      	mov	r1, fp
 80117e6:	f7ee ff0f 	bl	8000608 <__aeabi_dmul>
 80117ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117ec:	9d01      	ldr	r5, [sp, #4]
 80117ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80117f0:	4682      	mov	sl, r0
 80117f2:	468b      	mov	fp, r1
 80117f4:	4649      	mov	r1, r9
 80117f6:	4640      	mov	r0, r8
 80117f8:	f7ef f9b6 	bl	8000b68 <__aeabi_d2iz>
 80117fc:	4606      	mov	r6, r0
 80117fe:	f7ee fe99 	bl	8000534 <__aeabi_i2d>
 8011802:	3630      	adds	r6, #48	; 0x30
 8011804:	4602      	mov	r2, r0
 8011806:	460b      	mov	r3, r1
 8011808:	4640      	mov	r0, r8
 801180a:	4649      	mov	r1, r9
 801180c:	f7ee fd44 	bl	8000298 <__aeabi_dsub>
 8011810:	f805 6b01 	strb.w	r6, [r5], #1
 8011814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011816:	429d      	cmp	r5, r3
 8011818:	4680      	mov	r8, r0
 801181a:	4689      	mov	r9, r1
 801181c:	f04f 0200 	mov.w	r2, #0
 8011820:	d124      	bne.n	801186c <_dtoa_r+0x60c>
 8011822:	4b1b      	ldr	r3, [pc, #108]	; (8011890 <_dtoa_r+0x630>)
 8011824:	4650      	mov	r0, sl
 8011826:	4659      	mov	r1, fp
 8011828:	f7ee fd38 	bl	800029c <__adddf3>
 801182c:	4602      	mov	r2, r0
 801182e:	460b      	mov	r3, r1
 8011830:	4640      	mov	r0, r8
 8011832:	4649      	mov	r1, r9
 8011834:	f7ef f978 	bl	8000b28 <__aeabi_dcmpgt>
 8011838:	2800      	cmp	r0, #0
 801183a:	d173      	bne.n	8011924 <_dtoa_r+0x6c4>
 801183c:	4652      	mov	r2, sl
 801183e:	465b      	mov	r3, fp
 8011840:	4913      	ldr	r1, [pc, #76]	; (8011890 <_dtoa_r+0x630>)
 8011842:	2000      	movs	r0, #0
 8011844:	f7ee fd28 	bl	8000298 <__aeabi_dsub>
 8011848:	4602      	mov	r2, r0
 801184a:	460b      	mov	r3, r1
 801184c:	4640      	mov	r0, r8
 801184e:	4649      	mov	r1, r9
 8011850:	f7ef f94c 	bl	8000aec <__aeabi_dcmplt>
 8011854:	2800      	cmp	r0, #0
 8011856:	f43f af35 	beq.w	80116c4 <_dtoa_r+0x464>
 801185a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801185c:	1e6b      	subs	r3, r5, #1
 801185e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011860:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011864:	2b30      	cmp	r3, #48	; 0x30
 8011866:	d0f8      	beq.n	801185a <_dtoa_r+0x5fa>
 8011868:	9700      	str	r7, [sp, #0]
 801186a:	e049      	b.n	8011900 <_dtoa_r+0x6a0>
 801186c:	4b05      	ldr	r3, [pc, #20]	; (8011884 <_dtoa_r+0x624>)
 801186e:	f7ee fecb 	bl	8000608 <__aeabi_dmul>
 8011872:	4680      	mov	r8, r0
 8011874:	4689      	mov	r9, r1
 8011876:	e7bd      	b.n	80117f4 <_dtoa_r+0x594>
 8011878:	08014ae0 	.word	0x08014ae0
 801187c:	08014ab8 	.word	0x08014ab8
 8011880:	3ff00000 	.word	0x3ff00000
 8011884:	40240000 	.word	0x40240000
 8011888:	401c0000 	.word	0x401c0000
 801188c:	40140000 	.word	0x40140000
 8011890:	3fe00000 	.word	0x3fe00000
 8011894:	9d01      	ldr	r5, [sp, #4]
 8011896:	4656      	mov	r6, sl
 8011898:	465f      	mov	r7, fp
 801189a:	4642      	mov	r2, r8
 801189c:	464b      	mov	r3, r9
 801189e:	4630      	mov	r0, r6
 80118a0:	4639      	mov	r1, r7
 80118a2:	f7ee ffdb 	bl	800085c <__aeabi_ddiv>
 80118a6:	f7ef f95f 	bl	8000b68 <__aeabi_d2iz>
 80118aa:	4682      	mov	sl, r0
 80118ac:	f7ee fe42 	bl	8000534 <__aeabi_i2d>
 80118b0:	4642      	mov	r2, r8
 80118b2:	464b      	mov	r3, r9
 80118b4:	f7ee fea8 	bl	8000608 <__aeabi_dmul>
 80118b8:	4602      	mov	r2, r0
 80118ba:	460b      	mov	r3, r1
 80118bc:	4630      	mov	r0, r6
 80118be:	4639      	mov	r1, r7
 80118c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80118c4:	f7ee fce8 	bl	8000298 <__aeabi_dsub>
 80118c8:	f805 6b01 	strb.w	r6, [r5], #1
 80118cc:	9e01      	ldr	r6, [sp, #4]
 80118ce:	9f03      	ldr	r7, [sp, #12]
 80118d0:	1bae      	subs	r6, r5, r6
 80118d2:	42b7      	cmp	r7, r6
 80118d4:	4602      	mov	r2, r0
 80118d6:	460b      	mov	r3, r1
 80118d8:	d135      	bne.n	8011946 <_dtoa_r+0x6e6>
 80118da:	f7ee fcdf 	bl	800029c <__adddf3>
 80118de:	4642      	mov	r2, r8
 80118e0:	464b      	mov	r3, r9
 80118e2:	4606      	mov	r6, r0
 80118e4:	460f      	mov	r7, r1
 80118e6:	f7ef f91f 	bl	8000b28 <__aeabi_dcmpgt>
 80118ea:	b9d0      	cbnz	r0, 8011922 <_dtoa_r+0x6c2>
 80118ec:	4642      	mov	r2, r8
 80118ee:	464b      	mov	r3, r9
 80118f0:	4630      	mov	r0, r6
 80118f2:	4639      	mov	r1, r7
 80118f4:	f7ef f8f0 	bl	8000ad8 <__aeabi_dcmpeq>
 80118f8:	b110      	cbz	r0, 8011900 <_dtoa_r+0x6a0>
 80118fa:	f01a 0f01 	tst.w	sl, #1
 80118fe:	d110      	bne.n	8011922 <_dtoa_r+0x6c2>
 8011900:	4620      	mov	r0, r4
 8011902:	ee18 1a10 	vmov	r1, s16
 8011906:	f000 fc2b 	bl	8012160 <_Bfree>
 801190a:	2300      	movs	r3, #0
 801190c:	9800      	ldr	r0, [sp, #0]
 801190e:	702b      	strb	r3, [r5, #0]
 8011910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011912:	3001      	adds	r0, #1
 8011914:	6018      	str	r0, [r3, #0]
 8011916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011918:	2b00      	cmp	r3, #0
 801191a:	f43f acf1 	beq.w	8011300 <_dtoa_r+0xa0>
 801191e:	601d      	str	r5, [r3, #0]
 8011920:	e4ee      	b.n	8011300 <_dtoa_r+0xa0>
 8011922:	9f00      	ldr	r7, [sp, #0]
 8011924:	462b      	mov	r3, r5
 8011926:	461d      	mov	r5, r3
 8011928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801192c:	2a39      	cmp	r2, #57	; 0x39
 801192e:	d106      	bne.n	801193e <_dtoa_r+0x6de>
 8011930:	9a01      	ldr	r2, [sp, #4]
 8011932:	429a      	cmp	r2, r3
 8011934:	d1f7      	bne.n	8011926 <_dtoa_r+0x6c6>
 8011936:	9901      	ldr	r1, [sp, #4]
 8011938:	2230      	movs	r2, #48	; 0x30
 801193a:	3701      	adds	r7, #1
 801193c:	700a      	strb	r2, [r1, #0]
 801193e:	781a      	ldrb	r2, [r3, #0]
 8011940:	3201      	adds	r2, #1
 8011942:	701a      	strb	r2, [r3, #0]
 8011944:	e790      	b.n	8011868 <_dtoa_r+0x608>
 8011946:	4ba6      	ldr	r3, [pc, #664]	; (8011be0 <_dtoa_r+0x980>)
 8011948:	2200      	movs	r2, #0
 801194a:	f7ee fe5d 	bl	8000608 <__aeabi_dmul>
 801194e:	2200      	movs	r2, #0
 8011950:	2300      	movs	r3, #0
 8011952:	4606      	mov	r6, r0
 8011954:	460f      	mov	r7, r1
 8011956:	f7ef f8bf 	bl	8000ad8 <__aeabi_dcmpeq>
 801195a:	2800      	cmp	r0, #0
 801195c:	d09d      	beq.n	801189a <_dtoa_r+0x63a>
 801195e:	e7cf      	b.n	8011900 <_dtoa_r+0x6a0>
 8011960:	9a08      	ldr	r2, [sp, #32]
 8011962:	2a00      	cmp	r2, #0
 8011964:	f000 80d7 	beq.w	8011b16 <_dtoa_r+0x8b6>
 8011968:	9a06      	ldr	r2, [sp, #24]
 801196a:	2a01      	cmp	r2, #1
 801196c:	f300 80ba 	bgt.w	8011ae4 <_dtoa_r+0x884>
 8011970:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011972:	2a00      	cmp	r2, #0
 8011974:	f000 80b2 	beq.w	8011adc <_dtoa_r+0x87c>
 8011978:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801197c:	9e07      	ldr	r6, [sp, #28]
 801197e:	9d04      	ldr	r5, [sp, #16]
 8011980:	9a04      	ldr	r2, [sp, #16]
 8011982:	441a      	add	r2, r3
 8011984:	9204      	str	r2, [sp, #16]
 8011986:	9a05      	ldr	r2, [sp, #20]
 8011988:	2101      	movs	r1, #1
 801198a:	441a      	add	r2, r3
 801198c:	4620      	mov	r0, r4
 801198e:	9205      	str	r2, [sp, #20]
 8011990:	f000 fc9e 	bl	80122d0 <__i2b>
 8011994:	4607      	mov	r7, r0
 8011996:	2d00      	cmp	r5, #0
 8011998:	dd0c      	ble.n	80119b4 <_dtoa_r+0x754>
 801199a:	9b05      	ldr	r3, [sp, #20]
 801199c:	2b00      	cmp	r3, #0
 801199e:	dd09      	ble.n	80119b4 <_dtoa_r+0x754>
 80119a0:	42ab      	cmp	r3, r5
 80119a2:	9a04      	ldr	r2, [sp, #16]
 80119a4:	bfa8      	it	ge
 80119a6:	462b      	movge	r3, r5
 80119a8:	1ad2      	subs	r2, r2, r3
 80119aa:	9204      	str	r2, [sp, #16]
 80119ac:	9a05      	ldr	r2, [sp, #20]
 80119ae:	1aed      	subs	r5, r5, r3
 80119b0:	1ad3      	subs	r3, r2, r3
 80119b2:	9305      	str	r3, [sp, #20]
 80119b4:	9b07      	ldr	r3, [sp, #28]
 80119b6:	b31b      	cbz	r3, 8011a00 <_dtoa_r+0x7a0>
 80119b8:	9b08      	ldr	r3, [sp, #32]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	f000 80af 	beq.w	8011b1e <_dtoa_r+0x8be>
 80119c0:	2e00      	cmp	r6, #0
 80119c2:	dd13      	ble.n	80119ec <_dtoa_r+0x78c>
 80119c4:	4639      	mov	r1, r7
 80119c6:	4632      	mov	r2, r6
 80119c8:	4620      	mov	r0, r4
 80119ca:	f000 fd41 	bl	8012450 <__pow5mult>
 80119ce:	ee18 2a10 	vmov	r2, s16
 80119d2:	4601      	mov	r1, r0
 80119d4:	4607      	mov	r7, r0
 80119d6:	4620      	mov	r0, r4
 80119d8:	f000 fc90 	bl	80122fc <__multiply>
 80119dc:	ee18 1a10 	vmov	r1, s16
 80119e0:	4680      	mov	r8, r0
 80119e2:	4620      	mov	r0, r4
 80119e4:	f000 fbbc 	bl	8012160 <_Bfree>
 80119e8:	ee08 8a10 	vmov	s16, r8
 80119ec:	9b07      	ldr	r3, [sp, #28]
 80119ee:	1b9a      	subs	r2, r3, r6
 80119f0:	d006      	beq.n	8011a00 <_dtoa_r+0x7a0>
 80119f2:	ee18 1a10 	vmov	r1, s16
 80119f6:	4620      	mov	r0, r4
 80119f8:	f000 fd2a 	bl	8012450 <__pow5mult>
 80119fc:	ee08 0a10 	vmov	s16, r0
 8011a00:	2101      	movs	r1, #1
 8011a02:	4620      	mov	r0, r4
 8011a04:	f000 fc64 	bl	80122d0 <__i2b>
 8011a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	4606      	mov	r6, r0
 8011a0e:	f340 8088 	ble.w	8011b22 <_dtoa_r+0x8c2>
 8011a12:	461a      	mov	r2, r3
 8011a14:	4601      	mov	r1, r0
 8011a16:	4620      	mov	r0, r4
 8011a18:	f000 fd1a 	bl	8012450 <__pow5mult>
 8011a1c:	9b06      	ldr	r3, [sp, #24]
 8011a1e:	2b01      	cmp	r3, #1
 8011a20:	4606      	mov	r6, r0
 8011a22:	f340 8081 	ble.w	8011b28 <_dtoa_r+0x8c8>
 8011a26:	f04f 0800 	mov.w	r8, #0
 8011a2a:	6933      	ldr	r3, [r6, #16]
 8011a2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011a30:	6918      	ldr	r0, [r3, #16]
 8011a32:	f000 fbfd 	bl	8012230 <__hi0bits>
 8011a36:	f1c0 0020 	rsb	r0, r0, #32
 8011a3a:	9b05      	ldr	r3, [sp, #20]
 8011a3c:	4418      	add	r0, r3
 8011a3e:	f010 001f 	ands.w	r0, r0, #31
 8011a42:	f000 8092 	beq.w	8011b6a <_dtoa_r+0x90a>
 8011a46:	f1c0 0320 	rsb	r3, r0, #32
 8011a4a:	2b04      	cmp	r3, #4
 8011a4c:	f340 808a 	ble.w	8011b64 <_dtoa_r+0x904>
 8011a50:	f1c0 001c 	rsb	r0, r0, #28
 8011a54:	9b04      	ldr	r3, [sp, #16]
 8011a56:	4403      	add	r3, r0
 8011a58:	9304      	str	r3, [sp, #16]
 8011a5a:	9b05      	ldr	r3, [sp, #20]
 8011a5c:	4403      	add	r3, r0
 8011a5e:	4405      	add	r5, r0
 8011a60:	9305      	str	r3, [sp, #20]
 8011a62:	9b04      	ldr	r3, [sp, #16]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	dd07      	ble.n	8011a78 <_dtoa_r+0x818>
 8011a68:	ee18 1a10 	vmov	r1, s16
 8011a6c:	461a      	mov	r2, r3
 8011a6e:	4620      	mov	r0, r4
 8011a70:	f000 fd48 	bl	8012504 <__lshift>
 8011a74:	ee08 0a10 	vmov	s16, r0
 8011a78:	9b05      	ldr	r3, [sp, #20]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	dd05      	ble.n	8011a8a <_dtoa_r+0x82a>
 8011a7e:	4631      	mov	r1, r6
 8011a80:	461a      	mov	r2, r3
 8011a82:	4620      	mov	r0, r4
 8011a84:	f000 fd3e 	bl	8012504 <__lshift>
 8011a88:	4606      	mov	r6, r0
 8011a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d06e      	beq.n	8011b6e <_dtoa_r+0x90e>
 8011a90:	ee18 0a10 	vmov	r0, s16
 8011a94:	4631      	mov	r1, r6
 8011a96:	f000 fda5 	bl	80125e4 <__mcmp>
 8011a9a:	2800      	cmp	r0, #0
 8011a9c:	da67      	bge.n	8011b6e <_dtoa_r+0x90e>
 8011a9e:	9b00      	ldr	r3, [sp, #0]
 8011aa0:	3b01      	subs	r3, #1
 8011aa2:	ee18 1a10 	vmov	r1, s16
 8011aa6:	9300      	str	r3, [sp, #0]
 8011aa8:	220a      	movs	r2, #10
 8011aaa:	2300      	movs	r3, #0
 8011aac:	4620      	mov	r0, r4
 8011aae:	f000 fb79 	bl	80121a4 <__multadd>
 8011ab2:	9b08      	ldr	r3, [sp, #32]
 8011ab4:	ee08 0a10 	vmov	s16, r0
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	f000 81b1 	beq.w	8011e20 <_dtoa_r+0xbc0>
 8011abe:	2300      	movs	r3, #0
 8011ac0:	4639      	mov	r1, r7
 8011ac2:	220a      	movs	r2, #10
 8011ac4:	4620      	mov	r0, r4
 8011ac6:	f000 fb6d 	bl	80121a4 <__multadd>
 8011aca:	9b02      	ldr	r3, [sp, #8]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	4607      	mov	r7, r0
 8011ad0:	f300 808e 	bgt.w	8011bf0 <_dtoa_r+0x990>
 8011ad4:	9b06      	ldr	r3, [sp, #24]
 8011ad6:	2b02      	cmp	r3, #2
 8011ad8:	dc51      	bgt.n	8011b7e <_dtoa_r+0x91e>
 8011ada:	e089      	b.n	8011bf0 <_dtoa_r+0x990>
 8011adc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011ade:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011ae2:	e74b      	b.n	801197c <_dtoa_r+0x71c>
 8011ae4:	9b03      	ldr	r3, [sp, #12]
 8011ae6:	1e5e      	subs	r6, r3, #1
 8011ae8:	9b07      	ldr	r3, [sp, #28]
 8011aea:	42b3      	cmp	r3, r6
 8011aec:	bfbf      	itttt	lt
 8011aee:	9b07      	ldrlt	r3, [sp, #28]
 8011af0:	9607      	strlt	r6, [sp, #28]
 8011af2:	1af2      	sublt	r2, r6, r3
 8011af4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011af6:	bfb6      	itet	lt
 8011af8:	189b      	addlt	r3, r3, r2
 8011afa:	1b9e      	subge	r6, r3, r6
 8011afc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011afe:	9b03      	ldr	r3, [sp, #12]
 8011b00:	bfb8      	it	lt
 8011b02:	2600      	movlt	r6, #0
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	bfb7      	itett	lt
 8011b08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011b0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011b10:	1a9d      	sublt	r5, r3, r2
 8011b12:	2300      	movlt	r3, #0
 8011b14:	e734      	b.n	8011980 <_dtoa_r+0x720>
 8011b16:	9e07      	ldr	r6, [sp, #28]
 8011b18:	9d04      	ldr	r5, [sp, #16]
 8011b1a:	9f08      	ldr	r7, [sp, #32]
 8011b1c:	e73b      	b.n	8011996 <_dtoa_r+0x736>
 8011b1e:	9a07      	ldr	r2, [sp, #28]
 8011b20:	e767      	b.n	80119f2 <_dtoa_r+0x792>
 8011b22:	9b06      	ldr	r3, [sp, #24]
 8011b24:	2b01      	cmp	r3, #1
 8011b26:	dc18      	bgt.n	8011b5a <_dtoa_r+0x8fa>
 8011b28:	f1ba 0f00 	cmp.w	sl, #0
 8011b2c:	d115      	bne.n	8011b5a <_dtoa_r+0x8fa>
 8011b2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011b32:	b993      	cbnz	r3, 8011b5a <_dtoa_r+0x8fa>
 8011b34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011b38:	0d1b      	lsrs	r3, r3, #20
 8011b3a:	051b      	lsls	r3, r3, #20
 8011b3c:	b183      	cbz	r3, 8011b60 <_dtoa_r+0x900>
 8011b3e:	9b04      	ldr	r3, [sp, #16]
 8011b40:	3301      	adds	r3, #1
 8011b42:	9304      	str	r3, [sp, #16]
 8011b44:	9b05      	ldr	r3, [sp, #20]
 8011b46:	3301      	adds	r3, #1
 8011b48:	9305      	str	r3, [sp, #20]
 8011b4a:	f04f 0801 	mov.w	r8, #1
 8011b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	f47f af6a 	bne.w	8011a2a <_dtoa_r+0x7ca>
 8011b56:	2001      	movs	r0, #1
 8011b58:	e76f      	b.n	8011a3a <_dtoa_r+0x7da>
 8011b5a:	f04f 0800 	mov.w	r8, #0
 8011b5e:	e7f6      	b.n	8011b4e <_dtoa_r+0x8ee>
 8011b60:	4698      	mov	r8, r3
 8011b62:	e7f4      	b.n	8011b4e <_dtoa_r+0x8ee>
 8011b64:	f43f af7d 	beq.w	8011a62 <_dtoa_r+0x802>
 8011b68:	4618      	mov	r0, r3
 8011b6a:	301c      	adds	r0, #28
 8011b6c:	e772      	b.n	8011a54 <_dtoa_r+0x7f4>
 8011b6e:	9b03      	ldr	r3, [sp, #12]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	dc37      	bgt.n	8011be4 <_dtoa_r+0x984>
 8011b74:	9b06      	ldr	r3, [sp, #24]
 8011b76:	2b02      	cmp	r3, #2
 8011b78:	dd34      	ble.n	8011be4 <_dtoa_r+0x984>
 8011b7a:	9b03      	ldr	r3, [sp, #12]
 8011b7c:	9302      	str	r3, [sp, #8]
 8011b7e:	9b02      	ldr	r3, [sp, #8]
 8011b80:	b96b      	cbnz	r3, 8011b9e <_dtoa_r+0x93e>
 8011b82:	4631      	mov	r1, r6
 8011b84:	2205      	movs	r2, #5
 8011b86:	4620      	mov	r0, r4
 8011b88:	f000 fb0c 	bl	80121a4 <__multadd>
 8011b8c:	4601      	mov	r1, r0
 8011b8e:	4606      	mov	r6, r0
 8011b90:	ee18 0a10 	vmov	r0, s16
 8011b94:	f000 fd26 	bl	80125e4 <__mcmp>
 8011b98:	2800      	cmp	r0, #0
 8011b9a:	f73f adbb 	bgt.w	8011714 <_dtoa_r+0x4b4>
 8011b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ba0:	9d01      	ldr	r5, [sp, #4]
 8011ba2:	43db      	mvns	r3, r3
 8011ba4:	9300      	str	r3, [sp, #0]
 8011ba6:	f04f 0800 	mov.w	r8, #0
 8011baa:	4631      	mov	r1, r6
 8011bac:	4620      	mov	r0, r4
 8011bae:	f000 fad7 	bl	8012160 <_Bfree>
 8011bb2:	2f00      	cmp	r7, #0
 8011bb4:	f43f aea4 	beq.w	8011900 <_dtoa_r+0x6a0>
 8011bb8:	f1b8 0f00 	cmp.w	r8, #0
 8011bbc:	d005      	beq.n	8011bca <_dtoa_r+0x96a>
 8011bbe:	45b8      	cmp	r8, r7
 8011bc0:	d003      	beq.n	8011bca <_dtoa_r+0x96a>
 8011bc2:	4641      	mov	r1, r8
 8011bc4:	4620      	mov	r0, r4
 8011bc6:	f000 facb 	bl	8012160 <_Bfree>
 8011bca:	4639      	mov	r1, r7
 8011bcc:	4620      	mov	r0, r4
 8011bce:	f000 fac7 	bl	8012160 <_Bfree>
 8011bd2:	e695      	b.n	8011900 <_dtoa_r+0x6a0>
 8011bd4:	2600      	movs	r6, #0
 8011bd6:	4637      	mov	r7, r6
 8011bd8:	e7e1      	b.n	8011b9e <_dtoa_r+0x93e>
 8011bda:	9700      	str	r7, [sp, #0]
 8011bdc:	4637      	mov	r7, r6
 8011bde:	e599      	b.n	8011714 <_dtoa_r+0x4b4>
 8011be0:	40240000 	.word	0x40240000
 8011be4:	9b08      	ldr	r3, [sp, #32]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	f000 80ca 	beq.w	8011d80 <_dtoa_r+0xb20>
 8011bec:	9b03      	ldr	r3, [sp, #12]
 8011bee:	9302      	str	r3, [sp, #8]
 8011bf0:	2d00      	cmp	r5, #0
 8011bf2:	dd05      	ble.n	8011c00 <_dtoa_r+0x9a0>
 8011bf4:	4639      	mov	r1, r7
 8011bf6:	462a      	mov	r2, r5
 8011bf8:	4620      	mov	r0, r4
 8011bfa:	f000 fc83 	bl	8012504 <__lshift>
 8011bfe:	4607      	mov	r7, r0
 8011c00:	f1b8 0f00 	cmp.w	r8, #0
 8011c04:	d05b      	beq.n	8011cbe <_dtoa_r+0xa5e>
 8011c06:	6879      	ldr	r1, [r7, #4]
 8011c08:	4620      	mov	r0, r4
 8011c0a:	f000 fa69 	bl	80120e0 <_Balloc>
 8011c0e:	4605      	mov	r5, r0
 8011c10:	b928      	cbnz	r0, 8011c1e <_dtoa_r+0x9be>
 8011c12:	4b87      	ldr	r3, [pc, #540]	; (8011e30 <_dtoa_r+0xbd0>)
 8011c14:	4602      	mov	r2, r0
 8011c16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011c1a:	f7ff bb3b 	b.w	8011294 <_dtoa_r+0x34>
 8011c1e:	693a      	ldr	r2, [r7, #16]
 8011c20:	3202      	adds	r2, #2
 8011c22:	0092      	lsls	r2, r2, #2
 8011c24:	f107 010c 	add.w	r1, r7, #12
 8011c28:	300c      	adds	r0, #12
 8011c2a:	f7fe fa82 	bl	8010132 <memcpy>
 8011c2e:	2201      	movs	r2, #1
 8011c30:	4629      	mov	r1, r5
 8011c32:	4620      	mov	r0, r4
 8011c34:	f000 fc66 	bl	8012504 <__lshift>
 8011c38:	9b01      	ldr	r3, [sp, #4]
 8011c3a:	f103 0901 	add.w	r9, r3, #1
 8011c3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011c42:	4413      	add	r3, r2
 8011c44:	9305      	str	r3, [sp, #20]
 8011c46:	f00a 0301 	and.w	r3, sl, #1
 8011c4a:	46b8      	mov	r8, r7
 8011c4c:	9304      	str	r3, [sp, #16]
 8011c4e:	4607      	mov	r7, r0
 8011c50:	4631      	mov	r1, r6
 8011c52:	ee18 0a10 	vmov	r0, s16
 8011c56:	f7ff fa75 	bl	8011144 <quorem>
 8011c5a:	4641      	mov	r1, r8
 8011c5c:	9002      	str	r0, [sp, #8]
 8011c5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011c62:	ee18 0a10 	vmov	r0, s16
 8011c66:	f000 fcbd 	bl	80125e4 <__mcmp>
 8011c6a:	463a      	mov	r2, r7
 8011c6c:	9003      	str	r0, [sp, #12]
 8011c6e:	4631      	mov	r1, r6
 8011c70:	4620      	mov	r0, r4
 8011c72:	f000 fcd3 	bl	801261c <__mdiff>
 8011c76:	68c2      	ldr	r2, [r0, #12]
 8011c78:	f109 3bff 	add.w	fp, r9, #4294967295
 8011c7c:	4605      	mov	r5, r0
 8011c7e:	bb02      	cbnz	r2, 8011cc2 <_dtoa_r+0xa62>
 8011c80:	4601      	mov	r1, r0
 8011c82:	ee18 0a10 	vmov	r0, s16
 8011c86:	f000 fcad 	bl	80125e4 <__mcmp>
 8011c8a:	4602      	mov	r2, r0
 8011c8c:	4629      	mov	r1, r5
 8011c8e:	4620      	mov	r0, r4
 8011c90:	9207      	str	r2, [sp, #28]
 8011c92:	f000 fa65 	bl	8012160 <_Bfree>
 8011c96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011c9a:	ea43 0102 	orr.w	r1, r3, r2
 8011c9e:	9b04      	ldr	r3, [sp, #16]
 8011ca0:	430b      	orrs	r3, r1
 8011ca2:	464d      	mov	r5, r9
 8011ca4:	d10f      	bne.n	8011cc6 <_dtoa_r+0xa66>
 8011ca6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011caa:	d02a      	beq.n	8011d02 <_dtoa_r+0xaa2>
 8011cac:	9b03      	ldr	r3, [sp, #12]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	dd02      	ble.n	8011cb8 <_dtoa_r+0xa58>
 8011cb2:	9b02      	ldr	r3, [sp, #8]
 8011cb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011cb8:	f88b a000 	strb.w	sl, [fp]
 8011cbc:	e775      	b.n	8011baa <_dtoa_r+0x94a>
 8011cbe:	4638      	mov	r0, r7
 8011cc0:	e7ba      	b.n	8011c38 <_dtoa_r+0x9d8>
 8011cc2:	2201      	movs	r2, #1
 8011cc4:	e7e2      	b.n	8011c8c <_dtoa_r+0xa2c>
 8011cc6:	9b03      	ldr	r3, [sp, #12]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	db04      	blt.n	8011cd6 <_dtoa_r+0xa76>
 8011ccc:	9906      	ldr	r1, [sp, #24]
 8011cce:	430b      	orrs	r3, r1
 8011cd0:	9904      	ldr	r1, [sp, #16]
 8011cd2:	430b      	orrs	r3, r1
 8011cd4:	d122      	bne.n	8011d1c <_dtoa_r+0xabc>
 8011cd6:	2a00      	cmp	r2, #0
 8011cd8:	ddee      	ble.n	8011cb8 <_dtoa_r+0xa58>
 8011cda:	ee18 1a10 	vmov	r1, s16
 8011cde:	2201      	movs	r2, #1
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	f000 fc0f 	bl	8012504 <__lshift>
 8011ce6:	4631      	mov	r1, r6
 8011ce8:	ee08 0a10 	vmov	s16, r0
 8011cec:	f000 fc7a 	bl	80125e4 <__mcmp>
 8011cf0:	2800      	cmp	r0, #0
 8011cf2:	dc03      	bgt.n	8011cfc <_dtoa_r+0xa9c>
 8011cf4:	d1e0      	bne.n	8011cb8 <_dtoa_r+0xa58>
 8011cf6:	f01a 0f01 	tst.w	sl, #1
 8011cfa:	d0dd      	beq.n	8011cb8 <_dtoa_r+0xa58>
 8011cfc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011d00:	d1d7      	bne.n	8011cb2 <_dtoa_r+0xa52>
 8011d02:	2339      	movs	r3, #57	; 0x39
 8011d04:	f88b 3000 	strb.w	r3, [fp]
 8011d08:	462b      	mov	r3, r5
 8011d0a:	461d      	mov	r5, r3
 8011d0c:	3b01      	subs	r3, #1
 8011d0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011d12:	2a39      	cmp	r2, #57	; 0x39
 8011d14:	d071      	beq.n	8011dfa <_dtoa_r+0xb9a>
 8011d16:	3201      	adds	r2, #1
 8011d18:	701a      	strb	r2, [r3, #0]
 8011d1a:	e746      	b.n	8011baa <_dtoa_r+0x94a>
 8011d1c:	2a00      	cmp	r2, #0
 8011d1e:	dd07      	ble.n	8011d30 <_dtoa_r+0xad0>
 8011d20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011d24:	d0ed      	beq.n	8011d02 <_dtoa_r+0xaa2>
 8011d26:	f10a 0301 	add.w	r3, sl, #1
 8011d2a:	f88b 3000 	strb.w	r3, [fp]
 8011d2e:	e73c      	b.n	8011baa <_dtoa_r+0x94a>
 8011d30:	9b05      	ldr	r3, [sp, #20]
 8011d32:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011d36:	4599      	cmp	r9, r3
 8011d38:	d047      	beq.n	8011dca <_dtoa_r+0xb6a>
 8011d3a:	ee18 1a10 	vmov	r1, s16
 8011d3e:	2300      	movs	r3, #0
 8011d40:	220a      	movs	r2, #10
 8011d42:	4620      	mov	r0, r4
 8011d44:	f000 fa2e 	bl	80121a4 <__multadd>
 8011d48:	45b8      	cmp	r8, r7
 8011d4a:	ee08 0a10 	vmov	s16, r0
 8011d4e:	f04f 0300 	mov.w	r3, #0
 8011d52:	f04f 020a 	mov.w	r2, #10
 8011d56:	4641      	mov	r1, r8
 8011d58:	4620      	mov	r0, r4
 8011d5a:	d106      	bne.n	8011d6a <_dtoa_r+0xb0a>
 8011d5c:	f000 fa22 	bl	80121a4 <__multadd>
 8011d60:	4680      	mov	r8, r0
 8011d62:	4607      	mov	r7, r0
 8011d64:	f109 0901 	add.w	r9, r9, #1
 8011d68:	e772      	b.n	8011c50 <_dtoa_r+0x9f0>
 8011d6a:	f000 fa1b 	bl	80121a4 <__multadd>
 8011d6e:	4639      	mov	r1, r7
 8011d70:	4680      	mov	r8, r0
 8011d72:	2300      	movs	r3, #0
 8011d74:	220a      	movs	r2, #10
 8011d76:	4620      	mov	r0, r4
 8011d78:	f000 fa14 	bl	80121a4 <__multadd>
 8011d7c:	4607      	mov	r7, r0
 8011d7e:	e7f1      	b.n	8011d64 <_dtoa_r+0xb04>
 8011d80:	9b03      	ldr	r3, [sp, #12]
 8011d82:	9302      	str	r3, [sp, #8]
 8011d84:	9d01      	ldr	r5, [sp, #4]
 8011d86:	ee18 0a10 	vmov	r0, s16
 8011d8a:	4631      	mov	r1, r6
 8011d8c:	f7ff f9da 	bl	8011144 <quorem>
 8011d90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011d94:	9b01      	ldr	r3, [sp, #4]
 8011d96:	f805 ab01 	strb.w	sl, [r5], #1
 8011d9a:	1aea      	subs	r2, r5, r3
 8011d9c:	9b02      	ldr	r3, [sp, #8]
 8011d9e:	4293      	cmp	r3, r2
 8011da0:	dd09      	ble.n	8011db6 <_dtoa_r+0xb56>
 8011da2:	ee18 1a10 	vmov	r1, s16
 8011da6:	2300      	movs	r3, #0
 8011da8:	220a      	movs	r2, #10
 8011daa:	4620      	mov	r0, r4
 8011dac:	f000 f9fa 	bl	80121a4 <__multadd>
 8011db0:	ee08 0a10 	vmov	s16, r0
 8011db4:	e7e7      	b.n	8011d86 <_dtoa_r+0xb26>
 8011db6:	9b02      	ldr	r3, [sp, #8]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	bfc8      	it	gt
 8011dbc:	461d      	movgt	r5, r3
 8011dbe:	9b01      	ldr	r3, [sp, #4]
 8011dc0:	bfd8      	it	le
 8011dc2:	2501      	movle	r5, #1
 8011dc4:	441d      	add	r5, r3
 8011dc6:	f04f 0800 	mov.w	r8, #0
 8011dca:	ee18 1a10 	vmov	r1, s16
 8011dce:	2201      	movs	r2, #1
 8011dd0:	4620      	mov	r0, r4
 8011dd2:	f000 fb97 	bl	8012504 <__lshift>
 8011dd6:	4631      	mov	r1, r6
 8011dd8:	ee08 0a10 	vmov	s16, r0
 8011ddc:	f000 fc02 	bl	80125e4 <__mcmp>
 8011de0:	2800      	cmp	r0, #0
 8011de2:	dc91      	bgt.n	8011d08 <_dtoa_r+0xaa8>
 8011de4:	d102      	bne.n	8011dec <_dtoa_r+0xb8c>
 8011de6:	f01a 0f01 	tst.w	sl, #1
 8011dea:	d18d      	bne.n	8011d08 <_dtoa_r+0xaa8>
 8011dec:	462b      	mov	r3, r5
 8011dee:	461d      	mov	r5, r3
 8011df0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011df4:	2a30      	cmp	r2, #48	; 0x30
 8011df6:	d0fa      	beq.n	8011dee <_dtoa_r+0xb8e>
 8011df8:	e6d7      	b.n	8011baa <_dtoa_r+0x94a>
 8011dfa:	9a01      	ldr	r2, [sp, #4]
 8011dfc:	429a      	cmp	r2, r3
 8011dfe:	d184      	bne.n	8011d0a <_dtoa_r+0xaaa>
 8011e00:	9b00      	ldr	r3, [sp, #0]
 8011e02:	3301      	adds	r3, #1
 8011e04:	9300      	str	r3, [sp, #0]
 8011e06:	2331      	movs	r3, #49	; 0x31
 8011e08:	7013      	strb	r3, [r2, #0]
 8011e0a:	e6ce      	b.n	8011baa <_dtoa_r+0x94a>
 8011e0c:	4b09      	ldr	r3, [pc, #36]	; (8011e34 <_dtoa_r+0xbd4>)
 8011e0e:	f7ff ba95 	b.w	801133c <_dtoa_r+0xdc>
 8011e12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	f47f aa6e 	bne.w	80112f6 <_dtoa_r+0x96>
 8011e1a:	4b07      	ldr	r3, [pc, #28]	; (8011e38 <_dtoa_r+0xbd8>)
 8011e1c:	f7ff ba8e 	b.w	801133c <_dtoa_r+0xdc>
 8011e20:	9b02      	ldr	r3, [sp, #8]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	dcae      	bgt.n	8011d84 <_dtoa_r+0xb24>
 8011e26:	9b06      	ldr	r3, [sp, #24]
 8011e28:	2b02      	cmp	r3, #2
 8011e2a:	f73f aea8 	bgt.w	8011b7e <_dtoa_r+0x91e>
 8011e2e:	e7a9      	b.n	8011d84 <_dtoa_r+0xb24>
 8011e30:	08014a44 	.word	0x08014a44
 8011e34:	080148a0 	.word	0x080148a0
 8011e38:	080149c5 	.word	0x080149c5

08011e3c <__sflush_r>:
 8011e3c:	898a      	ldrh	r2, [r1, #12]
 8011e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e42:	4605      	mov	r5, r0
 8011e44:	0710      	lsls	r0, r2, #28
 8011e46:	460c      	mov	r4, r1
 8011e48:	d458      	bmi.n	8011efc <__sflush_r+0xc0>
 8011e4a:	684b      	ldr	r3, [r1, #4]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	dc05      	bgt.n	8011e5c <__sflush_r+0x20>
 8011e50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	dc02      	bgt.n	8011e5c <__sflush_r+0x20>
 8011e56:	2000      	movs	r0, #0
 8011e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e5e:	2e00      	cmp	r6, #0
 8011e60:	d0f9      	beq.n	8011e56 <__sflush_r+0x1a>
 8011e62:	2300      	movs	r3, #0
 8011e64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011e68:	682f      	ldr	r7, [r5, #0]
 8011e6a:	602b      	str	r3, [r5, #0]
 8011e6c:	d032      	beq.n	8011ed4 <__sflush_r+0x98>
 8011e6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011e70:	89a3      	ldrh	r3, [r4, #12]
 8011e72:	075a      	lsls	r2, r3, #29
 8011e74:	d505      	bpl.n	8011e82 <__sflush_r+0x46>
 8011e76:	6863      	ldr	r3, [r4, #4]
 8011e78:	1ac0      	subs	r0, r0, r3
 8011e7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011e7c:	b10b      	cbz	r3, 8011e82 <__sflush_r+0x46>
 8011e7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011e80:	1ac0      	subs	r0, r0, r3
 8011e82:	2300      	movs	r3, #0
 8011e84:	4602      	mov	r2, r0
 8011e86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e88:	6a21      	ldr	r1, [r4, #32]
 8011e8a:	4628      	mov	r0, r5
 8011e8c:	47b0      	blx	r6
 8011e8e:	1c43      	adds	r3, r0, #1
 8011e90:	89a3      	ldrh	r3, [r4, #12]
 8011e92:	d106      	bne.n	8011ea2 <__sflush_r+0x66>
 8011e94:	6829      	ldr	r1, [r5, #0]
 8011e96:	291d      	cmp	r1, #29
 8011e98:	d82c      	bhi.n	8011ef4 <__sflush_r+0xb8>
 8011e9a:	4a2a      	ldr	r2, [pc, #168]	; (8011f44 <__sflush_r+0x108>)
 8011e9c:	40ca      	lsrs	r2, r1
 8011e9e:	07d6      	lsls	r6, r2, #31
 8011ea0:	d528      	bpl.n	8011ef4 <__sflush_r+0xb8>
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	6062      	str	r2, [r4, #4]
 8011ea6:	04d9      	lsls	r1, r3, #19
 8011ea8:	6922      	ldr	r2, [r4, #16]
 8011eaa:	6022      	str	r2, [r4, #0]
 8011eac:	d504      	bpl.n	8011eb8 <__sflush_r+0x7c>
 8011eae:	1c42      	adds	r2, r0, #1
 8011eb0:	d101      	bne.n	8011eb6 <__sflush_r+0x7a>
 8011eb2:	682b      	ldr	r3, [r5, #0]
 8011eb4:	b903      	cbnz	r3, 8011eb8 <__sflush_r+0x7c>
 8011eb6:	6560      	str	r0, [r4, #84]	; 0x54
 8011eb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011eba:	602f      	str	r7, [r5, #0]
 8011ebc:	2900      	cmp	r1, #0
 8011ebe:	d0ca      	beq.n	8011e56 <__sflush_r+0x1a>
 8011ec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011ec4:	4299      	cmp	r1, r3
 8011ec6:	d002      	beq.n	8011ece <__sflush_r+0x92>
 8011ec8:	4628      	mov	r0, r5
 8011eca:	f000 fca3 	bl	8012814 <_free_r>
 8011ece:	2000      	movs	r0, #0
 8011ed0:	6360      	str	r0, [r4, #52]	; 0x34
 8011ed2:	e7c1      	b.n	8011e58 <__sflush_r+0x1c>
 8011ed4:	6a21      	ldr	r1, [r4, #32]
 8011ed6:	2301      	movs	r3, #1
 8011ed8:	4628      	mov	r0, r5
 8011eda:	47b0      	blx	r6
 8011edc:	1c41      	adds	r1, r0, #1
 8011ede:	d1c7      	bne.n	8011e70 <__sflush_r+0x34>
 8011ee0:	682b      	ldr	r3, [r5, #0]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d0c4      	beq.n	8011e70 <__sflush_r+0x34>
 8011ee6:	2b1d      	cmp	r3, #29
 8011ee8:	d001      	beq.n	8011eee <__sflush_r+0xb2>
 8011eea:	2b16      	cmp	r3, #22
 8011eec:	d101      	bne.n	8011ef2 <__sflush_r+0xb6>
 8011eee:	602f      	str	r7, [r5, #0]
 8011ef0:	e7b1      	b.n	8011e56 <__sflush_r+0x1a>
 8011ef2:	89a3      	ldrh	r3, [r4, #12]
 8011ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ef8:	81a3      	strh	r3, [r4, #12]
 8011efa:	e7ad      	b.n	8011e58 <__sflush_r+0x1c>
 8011efc:	690f      	ldr	r7, [r1, #16]
 8011efe:	2f00      	cmp	r7, #0
 8011f00:	d0a9      	beq.n	8011e56 <__sflush_r+0x1a>
 8011f02:	0793      	lsls	r3, r2, #30
 8011f04:	680e      	ldr	r6, [r1, #0]
 8011f06:	bf08      	it	eq
 8011f08:	694b      	ldreq	r3, [r1, #20]
 8011f0a:	600f      	str	r7, [r1, #0]
 8011f0c:	bf18      	it	ne
 8011f0e:	2300      	movne	r3, #0
 8011f10:	eba6 0807 	sub.w	r8, r6, r7
 8011f14:	608b      	str	r3, [r1, #8]
 8011f16:	f1b8 0f00 	cmp.w	r8, #0
 8011f1a:	dd9c      	ble.n	8011e56 <__sflush_r+0x1a>
 8011f1c:	6a21      	ldr	r1, [r4, #32]
 8011f1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011f20:	4643      	mov	r3, r8
 8011f22:	463a      	mov	r2, r7
 8011f24:	4628      	mov	r0, r5
 8011f26:	47b0      	blx	r6
 8011f28:	2800      	cmp	r0, #0
 8011f2a:	dc06      	bgt.n	8011f3a <__sflush_r+0xfe>
 8011f2c:	89a3      	ldrh	r3, [r4, #12]
 8011f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f32:	81a3      	strh	r3, [r4, #12]
 8011f34:	f04f 30ff 	mov.w	r0, #4294967295
 8011f38:	e78e      	b.n	8011e58 <__sflush_r+0x1c>
 8011f3a:	4407      	add	r7, r0
 8011f3c:	eba8 0800 	sub.w	r8, r8, r0
 8011f40:	e7e9      	b.n	8011f16 <__sflush_r+0xda>
 8011f42:	bf00      	nop
 8011f44:	20400001 	.word	0x20400001

08011f48 <_fflush_r>:
 8011f48:	b538      	push	{r3, r4, r5, lr}
 8011f4a:	690b      	ldr	r3, [r1, #16]
 8011f4c:	4605      	mov	r5, r0
 8011f4e:	460c      	mov	r4, r1
 8011f50:	b913      	cbnz	r3, 8011f58 <_fflush_r+0x10>
 8011f52:	2500      	movs	r5, #0
 8011f54:	4628      	mov	r0, r5
 8011f56:	bd38      	pop	{r3, r4, r5, pc}
 8011f58:	b118      	cbz	r0, 8011f62 <_fflush_r+0x1a>
 8011f5a:	6983      	ldr	r3, [r0, #24]
 8011f5c:	b90b      	cbnz	r3, 8011f62 <_fflush_r+0x1a>
 8011f5e:	f7fe f823 	bl	800ffa8 <__sinit>
 8011f62:	4b14      	ldr	r3, [pc, #80]	; (8011fb4 <_fflush_r+0x6c>)
 8011f64:	429c      	cmp	r4, r3
 8011f66:	d11b      	bne.n	8011fa0 <_fflush_r+0x58>
 8011f68:	686c      	ldr	r4, [r5, #4]
 8011f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d0ef      	beq.n	8011f52 <_fflush_r+0xa>
 8011f72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011f74:	07d0      	lsls	r0, r2, #31
 8011f76:	d404      	bmi.n	8011f82 <_fflush_r+0x3a>
 8011f78:	0599      	lsls	r1, r3, #22
 8011f7a:	d402      	bmi.n	8011f82 <_fflush_r+0x3a>
 8011f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f7e:	f7fe f8d6 	bl	801012e <__retarget_lock_acquire_recursive>
 8011f82:	4628      	mov	r0, r5
 8011f84:	4621      	mov	r1, r4
 8011f86:	f7ff ff59 	bl	8011e3c <__sflush_r>
 8011f8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011f8c:	07da      	lsls	r2, r3, #31
 8011f8e:	4605      	mov	r5, r0
 8011f90:	d4e0      	bmi.n	8011f54 <_fflush_r+0xc>
 8011f92:	89a3      	ldrh	r3, [r4, #12]
 8011f94:	059b      	lsls	r3, r3, #22
 8011f96:	d4dd      	bmi.n	8011f54 <_fflush_r+0xc>
 8011f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f9a:	f7fe f8c9 	bl	8010130 <__retarget_lock_release_recursive>
 8011f9e:	e7d9      	b.n	8011f54 <_fflush_r+0xc>
 8011fa0:	4b05      	ldr	r3, [pc, #20]	; (8011fb8 <_fflush_r+0x70>)
 8011fa2:	429c      	cmp	r4, r3
 8011fa4:	d101      	bne.n	8011faa <_fflush_r+0x62>
 8011fa6:	68ac      	ldr	r4, [r5, #8]
 8011fa8:	e7df      	b.n	8011f6a <_fflush_r+0x22>
 8011faa:	4b04      	ldr	r3, [pc, #16]	; (8011fbc <_fflush_r+0x74>)
 8011fac:	429c      	cmp	r4, r3
 8011fae:	bf08      	it	eq
 8011fb0:	68ec      	ldreq	r4, [r5, #12]
 8011fb2:	e7da      	b.n	8011f6a <_fflush_r+0x22>
 8011fb4:	0801484c 	.word	0x0801484c
 8011fb8:	0801486c 	.word	0x0801486c
 8011fbc:	0801482c 	.word	0x0801482c

08011fc0 <_localeconv_r>:
 8011fc0:	4800      	ldr	r0, [pc, #0]	; (8011fc4 <_localeconv_r+0x4>)
 8011fc2:	4770      	bx	lr
 8011fc4:	20000268 	.word	0x20000268

08011fc8 <_lseek_r>:
 8011fc8:	b538      	push	{r3, r4, r5, lr}
 8011fca:	4d07      	ldr	r5, [pc, #28]	; (8011fe8 <_lseek_r+0x20>)
 8011fcc:	4604      	mov	r4, r0
 8011fce:	4608      	mov	r0, r1
 8011fd0:	4611      	mov	r1, r2
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	602a      	str	r2, [r5, #0]
 8011fd6:	461a      	mov	r2, r3
 8011fd8:	f7f2 fb24 	bl	8004624 <_lseek>
 8011fdc:	1c43      	adds	r3, r0, #1
 8011fde:	d102      	bne.n	8011fe6 <_lseek_r+0x1e>
 8011fe0:	682b      	ldr	r3, [r5, #0]
 8011fe2:	b103      	cbz	r3, 8011fe6 <_lseek_r+0x1e>
 8011fe4:	6023      	str	r3, [r4, #0]
 8011fe6:	bd38      	pop	{r3, r4, r5, pc}
 8011fe8:	20005e90 	.word	0x20005e90

08011fec <__swhatbuf_r>:
 8011fec:	b570      	push	{r4, r5, r6, lr}
 8011fee:	460e      	mov	r6, r1
 8011ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ff4:	2900      	cmp	r1, #0
 8011ff6:	b096      	sub	sp, #88	; 0x58
 8011ff8:	4614      	mov	r4, r2
 8011ffa:	461d      	mov	r5, r3
 8011ffc:	da08      	bge.n	8012010 <__swhatbuf_r+0x24>
 8011ffe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012002:	2200      	movs	r2, #0
 8012004:	602a      	str	r2, [r5, #0]
 8012006:	061a      	lsls	r2, r3, #24
 8012008:	d410      	bmi.n	801202c <__swhatbuf_r+0x40>
 801200a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801200e:	e00e      	b.n	801202e <__swhatbuf_r+0x42>
 8012010:	466a      	mov	r2, sp
 8012012:	f000 ff43 	bl	8012e9c <_fstat_r>
 8012016:	2800      	cmp	r0, #0
 8012018:	dbf1      	blt.n	8011ffe <__swhatbuf_r+0x12>
 801201a:	9a01      	ldr	r2, [sp, #4]
 801201c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012020:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012024:	425a      	negs	r2, r3
 8012026:	415a      	adcs	r2, r3
 8012028:	602a      	str	r2, [r5, #0]
 801202a:	e7ee      	b.n	801200a <__swhatbuf_r+0x1e>
 801202c:	2340      	movs	r3, #64	; 0x40
 801202e:	2000      	movs	r0, #0
 8012030:	6023      	str	r3, [r4, #0]
 8012032:	b016      	add	sp, #88	; 0x58
 8012034:	bd70      	pop	{r4, r5, r6, pc}
	...

08012038 <__smakebuf_r>:
 8012038:	898b      	ldrh	r3, [r1, #12]
 801203a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801203c:	079d      	lsls	r5, r3, #30
 801203e:	4606      	mov	r6, r0
 8012040:	460c      	mov	r4, r1
 8012042:	d507      	bpl.n	8012054 <__smakebuf_r+0x1c>
 8012044:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012048:	6023      	str	r3, [r4, #0]
 801204a:	6123      	str	r3, [r4, #16]
 801204c:	2301      	movs	r3, #1
 801204e:	6163      	str	r3, [r4, #20]
 8012050:	b002      	add	sp, #8
 8012052:	bd70      	pop	{r4, r5, r6, pc}
 8012054:	ab01      	add	r3, sp, #4
 8012056:	466a      	mov	r2, sp
 8012058:	f7ff ffc8 	bl	8011fec <__swhatbuf_r>
 801205c:	9900      	ldr	r1, [sp, #0]
 801205e:	4605      	mov	r5, r0
 8012060:	4630      	mov	r0, r6
 8012062:	f7fe f8b7 	bl	80101d4 <_malloc_r>
 8012066:	b948      	cbnz	r0, 801207c <__smakebuf_r+0x44>
 8012068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801206c:	059a      	lsls	r2, r3, #22
 801206e:	d4ef      	bmi.n	8012050 <__smakebuf_r+0x18>
 8012070:	f023 0303 	bic.w	r3, r3, #3
 8012074:	f043 0302 	orr.w	r3, r3, #2
 8012078:	81a3      	strh	r3, [r4, #12]
 801207a:	e7e3      	b.n	8012044 <__smakebuf_r+0xc>
 801207c:	4b0d      	ldr	r3, [pc, #52]	; (80120b4 <__smakebuf_r+0x7c>)
 801207e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012080:	89a3      	ldrh	r3, [r4, #12]
 8012082:	6020      	str	r0, [r4, #0]
 8012084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012088:	81a3      	strh	r3, [r4, #12]
 801208a:	9b00      	ldr	r3, [sp, #0]
 801208c:	6163      	str	r3, [r4, #20]
 801208e:	9b01      	ldr	r3, [sp, #4]
 8012090:	6120      	str	r0, [r4, #16]
 8012092:	b15b      	cbz	r3, 80120ac <__smakebuf_r+0x74>
 8012094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012098:	4630      	mov	r0, r6
 801209a:	f000 ff11 	bl	8012ec0 <_isatty_r>
 801209e:	b128      	cbz	r0, 80120ac <__smakebuf_r+0x74>
 80120a0:	89a3      	ldrh	r3, [r4, #12]
 80120a2:	f023 0303 	bic.w	r3, r3, #3
 80120a6:	f043 0301 	orr.w	r3, r3, #1
 80120aa:	81a3      	strh	r3, [r4, #12]
 80120ac:	89a0      	ldrh	r0, [r4, #12]
 80120ae:	4305      	orrs	r5, r0
 80120b0:	81a5      	strh	r5, [r4, #12]
 80120b2:	e7cd      	b.n	8012050 <__smakebuf_r+0x18>
 80120b4:	0800ff41 	.word	0x0800ff41

080120b8 <malloc>:
 80120b8:	4b02      	ldr	r3, [pc, #8]	; (80120c4 <malloc+0xc>)
 80120ba:	4601      	mov	r1, r0
 80120bc:	6818      	ldr	r0, [r3, #0]
 80120be:	f7fe b889 	b.w	80101d4 <_malloc_r>
 80120c2:	bf00      	nop
 80120c4:	20000114 	.word	0x20000114

080120c8 <__malloc_lock>:
 80120c8:	4801      	ldr	r0, [pc, #4]	; (80120d0 <__malloc_lock+0x8>)
 80120ca:	f7fe b830 	b.w	801012e <__retarget_lock_acquire_recursive>
 80120ce:	bf00      	nop
 80120d0:	20005e84 	.word	0x20005e84

080120d4 <__malloc_unlock>:
 80120d4:	4801      	ldr	r0, [pc, #4]	; (80120dc <__malloc_unlock+0x8>)
 80120d6:	f7fe b82b 	b.w	8010130 <__retarget_lock_release_recursive>
 80120da:	bf00      	nop
 80120dc:	20005e84 	.word	0x20005e84

080120e0 <_Balloc>:
 80120e0:	b570      	push	{r4, r5, r6, lr}
 80120e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80120e4:	4604      	mov	r4, r0
 80120e6:	460d      	mov	r5, r1
 80120e8:	b976      	cbnz	r6, 8012108 <_Balloc+0x28>
 80120ea:	2010      	movs	r0, #16
 80120ec:	f7ff ffe4 	bl	80120b8 <malloc>
 80120f0:	4602      	mov	r2, r0
 80120f2:	6260      	str	r0, [r4, #36]	; 0x24
 80120f4:	b920      	cbnz	r0, 8012100 <_Balloc+0x20>
 80120f6:	4b18      	ldr	r3, [pc, #96]	; (8012158 <_Balloc+0x78>)
 80120f8:	4818      	ldr	r0, [pc, #96]	; (801215c <_Balloc+0x7c>)
 80120fa:	2166      	movs	r1, #102	; 0x66
 80120fc:	f000 fe9e 	bl	8012e3c <__assert_func>
 8012100:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012104:	6006      	str	r6, [r0, #0]
 8012106:	60c6      	str	r6, [r0, #12]
 8012108:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801210a:	68f3      	ldr	r3, [r6, #12]
 801210c:	b183      	cbz	r3, 8012130 <_Balloc+0x50>
 801210e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012110:	68db      	ldr	r3, [r3, #12]
 8012112:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012116:	b9b8      	cbnz	r0, 8012148 <_Balloc+0x68>
 8012118:	2101      	movs	r1, #1
 801211a:	fa01 f605 	lsl.w	r6, r1, r5
 801211e:	1d72      	adds	r2, r6, #5
 8012120:	0092      	lsls	r2, r2, #2
 8012122:	4620      	mov	r0, r4
 8012124:	f000 fb60 	bl	80127e8 <_calloc_r>
 8012128:	b160      	cbz	r0, 8012144 <_Balloc+0x64>
 801212a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801212e:	e00e      	b.n	801214e <_Balloc+0x6e>
 8012130:	2221      	movs	r2, #33	; 0x21
 8012132:	2104      	movs	r1, #4
 8012134:	4620      	mov	r0, r4
 8012136:	f000 fb57 	bl	80127e8 <_calloc_r>
 801213a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801213c:	60f0      	str	r0, [r6, #12]
 801213e:	68db      	ldr	r3, [r3, #12]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d1e4      	bne.n	801210e <_Balloc+0x2e>
 8012144:	2000      	movs	r0, #0
 8012146:	bd70      	pop	{r4, r5, r6, pc}
 8012148:	6802      	ldr	r2, [r0, #0]
 801214a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801214e:	2300      	movs	r3, #0
 8012150:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012154:	e7f7      	b.n	8012146 <_Balloc+0x66>
 8012156:	bf00      	nop
 8012158:	080149d2 	.word	0x080149d2
 801215c:	08014a55 	.word	0x08014a55

08012160 <_Bfree>:
 8012160:	b570      	push	{r4, r5, r6, lr}
 8012162:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012164:	4605      	mov	r5, r0
 8012166:	460c      	mov	r4, r1
 8012168:	b976      	cbnz	r6, 8012188 <_Bfree+0x28>
 801216a:	2010      	movs	r0, #16
 801216c:	f7ff ffa4 	bl	80120b8 <malloc>
 8012170:	4602      	mov	r2, r0
 8012172:	6268      	str	r0, [r5, #36]	; 0x24
 8012174:	b920      	cbnz	r0, 8012180 <_Bfree+0x20>
 8012176:	4b09      	ldr	r3, [pc, #36]	; (801219c <_Bfree+0x3c>)
 8012178:	4809      	ldr	r0, [pc, #36]	; (80121a0 <_Bfree+0x40>)
 801217a:	218a      	movs	r1, #138	; 0x8a
 801217c:	f000 fe5e 	bl	8012e3c <__assert_func>
 8012180:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012184:	6006      	str	r6, [r0, #0]
 8012186:	60c6      	str	r6, [r0, #12]
 8012188:	b13c      	cbz	r4, 801219a <_Bfree+0x3a>
 801218a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801218c:	6862      	ldr	r2, [r4, #4]
 801218e:	68db      	ldr	r3, [r3, #12]
 8012190:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012194:	6021      	str	r1, [r4, #0]
 8012196:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801219a:	bd70      	pop	{r4, r5, r6, pc}
 801219c:	080149d2 	.word	0x080149d2
 80121a0:	08014a55 	.word	0x08014a55

080121a4 <__multadd>:
 80121a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121a8:	690d      	ldr	r5, [r1, #16]
 80121aa:	4607      	mov	r7, r0
 80121ac:	460c      	mov	r4, r1
 80121ae:	461e      	mov	r6, r3
 80121b0:	f101 0c14 	add.w	ip, r1, #20
 80121b4:	2000      	movs	r0, #0
 80121b6:	f8dc 3000 	ldr.w	r3, [ip]
 80121ba:	b299      	uxth	r1, r3
 80121bc:	fb02 6101 	mla	r1, r2, r1, r6
 80121c0:	0c1e      	lsrs	r6, r3, #16
 80121c2:	0c0b      	lsrs	r3, r1, #16
 80121c4:	fb02 3306 	mla	r3, r2, r6, r3
 80121c8:	b289      	uxth	r1, r1
 80121ca:	3001      	adds	r0, #1
 80121cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80121d0:	4285      	cmp	r5, r0
 80121d2:	f84c 1b04 	str.w	r1, [ip], #4
 80121d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80121da:	dcec      	bgt.n	80121b6 <__multadd+0x12>
 80121dc:	b30e      	cbz	r6, 8012222 <__multadd+0x7e>
 80121de:	68a3      	ldr	r3, [r4, #8]
 80121e0:	42ab      	cmp	r3, r5
 80121e2:	dc19      	bgt.n	8012218 <__multadd+0x74>
 80121e4:	6861      	ldr	r1, [r4, #4]
 80121e6:	4638      	mov	r0, r7
 80121e8:	3101      	adds	r1, #1
 80121ea:	f7ff ff79 	bl	80120e0 <_Balloc>
 80121ee:	4680      	mov	r8, r0
 80121f0:	b928      	cbnz	r0, 80121fe <__multadd+0x5a>
 80121f2:	4602      	mov	r2, r0
 80121f4:	4b0c      	ldr	r3, [pc, #48]	; (8012228 <__multadd+0x84>)
 80121f6:	480d      	ldr	r0, [pc, #52]	; (801222c <__multadd+0x88>)
 80121f8:	21b5      	movs	r1, #181	; 0xb5
 80121fa:	f000 fe1f 	bl	8012e3c <__assert_func>
 80121fe:	6922      	ldr	r2, [r4, #16]
 8012200:	3202      	adds	r2, #2
 8012202:	f104 010c 	add.w	r1, r4, #12
 8012206:	0092      	lsls	r2, r2, #2
 8012208:	300c      	adds	r0, #12
 801220a:	f7fd ff92 	bl	8010132 <memcpy>
 801220e:	4621      	mov	r1, r4
 8012210:	4638      	mov	r0, r7
 8012212:	f7ff ffa5 	bl	8012160 <_Bfree>
 8012216:	4644      	mov	r4, r8
 8012218:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801221c:	3501      	adds	r5, #1
 801221e:	615e      	str	r6, [r3, #20]
 8012220:	6125      	str	r5, [r4, #16]
 8012222:	4620      	mov	r0, r4
 8012224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012228:	08014a44 	.word	0x08014a44
 801222c:	08014a55 	.word	0x08014a55

08012230 <__hi0bits>:
 8012230:	0c03      	lsrs	r3, r0, #16
 8012232:	041b      	lsls	r3, r3, #16
 8012234:	b9d3      	cbnz	r3, 801226c <__hi0bits+0x3c>
 8012236:	0400      	lsls	r0, r0, #16
 8012238:	2310      	movs	r3, #16
 801223a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801223e:	bf04      	itt	eq
 8012240:	0200      	lsleq	r0, r0, #8
 8012242:	3308      	addeq	r3, #8
 8012244:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012248:	bf04      	itt	eq
 801224a:	0100      	lsleq	r0, r0, #4
 801224c:	3304      	addeq	r3, #4
 801224e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012252:	bf04      	itt	eq
 8012254:	0080      	lsleq	r0, r0, #2
 8012256:	3302      	addeq	r3, #2
 8012258:	2800      	cmp	r0, #0
 801225a:	db05      	blt.n	8012268 <__hi0bits+0x38>
 801225c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012260:	f103 0301 	add.w	r3, r3, #1
 8012264:	bf08      	it	eq
 8012266:	2320      	moveq	r3, #32
 8012268:	4618      	mov	r0, r3
 801226a:	4770      	bx	lr
 801226c:	2300      	movs	r3, #0
 801226e:	e7e4      	b.n	801223a <__hi0bits+0xa>

08012270 <__lo0bits>:
 8012270:	6803      	ldr	r3, [r0, #0]
 8012272:	f013 0207 	ands.w	r2, r3, #7
 8012276:	4601      	mov	r1, r0
 8012278:	d00b      	beq.n	8012292 <__lo0bits+0x22>
 801227a:	07da      	lsls	r2, r3, #31
 801227c:	d423      	bmi.n	80122c6 <__lo0bits+0x56>
 801227e:	0798      	lsls	r0, r3, #30
 8012280:	bf49      	itett	mi
 8012282:	085b      	lsrmi	r3, r3, #1
 8012284:	089b      	lsrpl	r3, r3, #2
 8012286:	2001      	movmi	r0, #1
 8012288:	600b      	strmi	r3, [r1, #0]
 801228a:	bf5c      	itt	pl
 801228c:	600b      	strpl	r3, [r1, #0]
 801228e:	2002      	movpl	r0, #2
 8012290:	4770      	bx	lr
 8012292:	b298      	uxth	r0, r3
 8012294:	b9a8      	cbnz	r0, 80122c2 <__lo0bits+0x52>
 8012296:	0c1b      	lsrs	r3, r3, #16
 8012298:	2010      	movs	r0, #16
 801229a:	b2da      	uxtb	r2, r3
 801229c:	b90a      	cbnz	r2, 80122a2 <__lo0bits+0x32>
 801229e:	3008      	adds	r0, #8
 80122a0:	0a1b      	lsrs	r3, r3, #8
 80122a2:	071a      	lsls	r2, r3, #28
 80122a4:	bf04      	itt	eq
 80122a6:	091b      	lsreq	r3, r3, #4
 80122a8:	3004      	addeq	r0, #4
 80122aa:	079a      	lsls	r2, r3, #30
 80122ac:	bf04      	itt	eq
 80122ae:	089b      	lsreq	r3, r3, #2
 80122b0:	3002      	addeq	r0, #2
 80122b2:	07da      	lsls	r2, r3, #31
 80122b4:	d403      	bmi.n	80122be <__lo0bits+0x4e>
 80122b6:	085b      	lsrs	r3, r3, #1
 80122b8:	f100 0001 	add.w	r0, r0, #1
 80122bc:	d005      	beq.n	80122ca <__lo0bits+0x5a>
 80122be:	600b      	str	r3, [r1, #0]
 80122c0:	4770      	bx	lr
 80122c2:	4610      	mov	r0, r2
 80122c4:	e7e9      	b.n	801229a <__lo0bits+0x2a>
 80122c6:	2000      	movs	r0, #0
 80122c8:	4770      	bx	lr
 80122ca:	2020      	movs	r0, #32
 80122cc:	4770      	bx	lr
	...

080122d0 <__i2b>:
 80122d0:	b510      	push	{r4, lr}
 80122d2:	460c      	mov	r4, r1
 80122d4:	2101      	movs	r1, #1
 80122d6:	f7ff ff03 	bl	80120e0 <_Balloc>
 80122da:	4602      	mov	r2, r0
 80122dc:	b928      	cbnz	r0, 80122ea <__i2b+0x1a>
 80122de:	4b05      	ldr	r3, [pc, #20]	; (80122f4 <__i2b+0x24>)
 80122e0:	4805      	ldr	r0, [pc, #20]	; (80122f8 <__i2b+0x28>)
 80122e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80122e6:	f000 fda9 	bl	8012e3c <__assert_func>
 80122ea:	2301      	movs	r3, #1
 80122ec:	6144      	str	r4, [r0, #20]
 80122ee:	6103      	str	r3, [r0, #16]
 80122f0:	bd10      	pop	{r4, pc}
 80122f2:	bf00      	nop
 80122f4:	08014a44 	.word	0x08014a44
 80122f8:	08014a55 	.word	0x08014a55

080122fc <__multiply>:
 80122fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012300:	4691      	mov	r9, r2
 8012302:	690a      	ldr	r2, [r1, #16]
 8012304:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012308:	429a      	cmp	r2, r3
 801230a:	bfb8      	it	lt
 801230c:	460b      	movlt	r3, r1
 801230e:	460c      	mov	r4, r1
 8012310:	bfbc      	itt	lt
 8012312:	464c      	movlt	r4, r9
 8012314:	4699      	movlt	r9, r3
 8012316:	6927      	ldr	r7, [r4, #16]
 8012318:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801231c:	68a3      	ldr	r3, [r4, #8]
 801231e:	6861      	ldr	r1, [r4, #4]
 8012320:	eb07 060a 	add.w	r6, r7, sl
 8012324:	42b3      	cmp	r3, r6
 8012326:	b085      	sub	sp, #20
 8012328:	bfb8      	it	lt
 801232a:	3101      	addlt	r1, #1
 801232c:	f7ff fed8 	bl	80120e0 <_Balloc>
 8012330:	b930      	cbnz	r0, 8012340 <__multiply+0x44>
 8012332:	4602      	mov	r2, r0
 8012334:	4b44      	ldr	r3, [pc, #272]	; (8012448 <__multiply+0x14c>)
 8012336:	4845      	ldr	r0, [pc, #276]	; (801244c <__multiply+0x150>)
 8012338:	f240 115d 	movw	r1, #349	; 0x15d
 801233c:	f000 fd7e 	bl	8012e3c <__assert_func>
 8012340:	f100 0514 	add.w	r5, r0, #20
 8012344:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012348:	462b      	mov	r3, r5
 801234a:	2200      	movs	r2, #0
 801234c:	4543      	cmp	r3, r8
 801234e:	d321      	bcc.n	8012394 <__multiply+0x98>
 8012350:	f104 0314 	add.w	r3, r4, #20
 8012354:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012358:	f109 0314 	add.w	r3, r9, #20
 801235c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012360:	9202      	str	r2, [sp, #8]
 8012362:	1b3a      	subs	r2, r7, r4
 8012364:	3a15      	subs	r2, #21
 8012366:	f022 0203 	bic.w	r2, r2, #3
 801236a:	3204      	adds	r2, #4
 801236c:	f104 0115 	add.w	r1, r4, #21
 8012370:	428f      	cmp	r7, r1
 8012372:	bf38      	it	cc
 8012374:	2204      	movcc	r2, #4
 8012376:	9201      	str	r2, [sp, #4]
 8012378:	9a02      	ldr	r2, [sp, #8]
 801237a:	9303      	str	r3, [sp, #12]
 801237c:	429a      	cmp	r2, r3
 801237e:	d80c      	bhi.n	801239a <__multiply+0x9e>
 8012380:	2e00      	cmp	r6, #0
 8012382:	dd03      	ble.n	801238c <__multiply+0x90>
 8012384:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012388:	2b00      	cmp	r3, #0
 801238a:	d05a      	beq.n	8012442 <__multiply+0x146>
 801238c:	6106      	str	r6, [r0, #16]
 801238e:	b005      	add	sp, #20
 8012390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012394:	f843 2b04 	str.w	r2, [r3], #4
 8012398:	e7d8      	b.n	801234c <__multiply+0x50>
 801239a:	f8b3 a000 	ldrh.w	sl, [r3]
 801239e:	f1ba 0f00 	cmp.w	sl, #0
 80123a2:	d024      	beq.n	80123ee <__multiply+0xf2>
 80123a4:	f104 0e14 	add.w	lr, r4, #20
 80123a8:	46a9      	mov	r9, r5
 80123aa:	f04f 0c00 	mov.w	ip, #0
 80123ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80123b2:	f8d9 1000 	ldr.w	r1, [r9]
 80123b6:	fa1f fb82 	uxth.w	fp, r2
 80123ba:	b289      	uxth	r1, r1
 80123bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80123c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80123c4:	f8d9 2000 	ldr.w	r2, [r9]
 80123c8:	4461      	add	r1, ip
 80123ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80123ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80123d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80123d6:	b289      	uxth	r1, r1
 80123d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80123dc:	4577      	cmp	r7, lr
 80123de:	f849 1b04 	str.w	r1, [r9], #4
 80123e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80123e6:	d8e2      	bhi.n	80123ae <__multiply+0xb2>
 80123e8:	9a01      	ldr	r2, [sp, #4]
 80123ea:	f845 c002 	str.w	ip, [r5, r2]
 80123ee:	9a03      	ldr	r2, [sp, #12]
 80123f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80123f4:	3304      	adds	r3, #4
 80123f6:	f1b9 0f00 	cmp.w	r9, #0
 80123fa:	d020      	beq.n	801243e <__multiply+0x142>
 80123fc:	6829      	ldr	r1, [r5, #0]
 80123fe:	f104 0c14 	add.w	ip, r4, #20
 8012402:	46ae      	mov	lr, r5
 8012404:	f04f 0a00 	mov.w	sl, #0
 8012408:	f8bc b000 	ldrh.w	fp, [ip]
 801240c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012410:	fb09 220b 	mla	r2, r9, fp, r2
 8012414:	4492      	add	sl, r2
 8012416:	b289      	uxth	r1, r1
 8012418:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801241c:	f84e 1b04 	str.w	r1, [lr], #4
 8012420:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012424:	f8be 1000 	ldrh.w	r1, [lr]
 8012428:	0c12      	lsrs	r2, r2, #16
 801242a:	fb09 1102 	mla	r1, r9, r2, r1
 801242e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012432:	4567      	cmp	r7, ip
 8012434:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012438:	d8e6      	bhi.n	8012408 <__multiply+0x10c>
 801243a:	9a01      	ldr	r2, [sp, #4]
 801243c:	50a9      	str	r1, [r5, r2]
 801243e:	3504      	adds	r5, #4
 8012440:	e79a      	b.n	8012378 <__multiply+0x7c>
 8012442:	3e01      	subs	r6, #1
 8012444:	e79c      	b.n	8012380 <__multiply+0x84>
 8012446:	bf00      	nop
 8012448:	08014a44 	.word	0x08014a44
 801244c:	08014a55 	.word	0x08014a55

08012450 <__pow5mult>:
 8012450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012454:	4615      	mov	r5, r2
 8012456:	f012 0203 	ands.w	r2, r2, #3
 801245a:	4606      	mov	r6, r0
 801245c:	460f      	mov	r7, r1
 801245e:	d007      	beq.n	8012470 <__pow5mult+0x20>
 8012460:	4c25      	ldr	r4, [pc, #148]	; (80124f8 <__pow5mult+0xa8>)
 8012462:	3a01      	subs	r2, #1
 8012464:	2300      	movs	r3, #0
 8012466:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801246a:	f7ff fe9b 	bl	80121a4 <__multadd>
 801246e:	4607      	mov	r7, r0
 8012470:	10ad      	asrs	r5, r5, #2
 8012472:	d03d      	beq.n	80124f0 <__pow5mult+0xa0>
 8012474:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012476:	b97c      	cbnz	r4, 8012498 <__pow5mult+0x48>
 8012478:	2010      	movs	r0, #16
 801247a:	f7ff fe1d 	bl	80120b8 <malloc>
 801247e:	4602      	mov	r2, r0
 8012480:	6270      	str	r0, [r6, #36]	; 0x24
 8012482:	b928      	cbnz	r0, 8012490 <__pow5mult+0x40>
 8012484:	4b1d      	ldr	r3, [pc, #116]	; (80124fc <__pow5mult+0xac>)
 8012486:	481e      	ldr	r0, [pc, #120]	; (8012500 <__pow5mult+0xb0>)
 8012488:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801248c:	f000 fcd6 	bl	8012e3c <__assert_func>
 8012490:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012494:	6004      	str	r4, [r0, #0]
 8012496:	60c4      	str	r4, [r0, #12]
 8012498:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801249c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80124a0:	b94c      	cbnz	r4, 80124b6 <__pow5mult+0x66>
 80124a2:	f240 2171 	movw	r1, #625	; 0x271
 80124a6:	4630      	mov	r0, r6
 80124a8:	f7ff ff12 	bl	80122d0 <__i2b>
 80124ac:	2300      	movs	r3, #0
 80124ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80124b2:	4604      	mov	r4, r0
 80124b4:	6003      	str	r3, [r0, #0]
 80124b6:	f04f 0900 	mov.w	r9, #0
 80124ba:	07eb      	lsls	r3, r5, #31
 80124bc:	d50a      	bpl.n	80124d4 <__pow5mult+0x84>
 80124be:	4639      	mov	r1, r7
 80124c0:	4622      	mov	r2, r4
 80124c2:	4630      	mov	r0, r6
 80124c4:	f7ff ff1a 	bl	80122fc <__multiply>
 80124c8:	4639      	mov	r1, r7
 80124ca:	4680      	mov	r8, r0
 80124cc:	4630      	mov	r0, r6
 80124ce:	f7ff fe47 	bl	8012160 <_Bfree>
 80124d2:	4647      	mov	r7, r8
 80124d4:	106d      	asrs	r5, r5, #1
 80124d6:	d00b      	beq.n	80124f0 <__pow5mult+0xa0>
 80124d8:	6820      	ldr	r0, [r4, #0]
 80124da:	b938      	cbnz	r0, 80124ec <__pow5mult+0x9c>
 80124dc:	4622      	mov	r2, r4
 80124de:	4621      	mov	r1, r4
 80124e0:	4630      	mov	r0, r6
 80124e2:	f7ff ff0b 	bl	80122fc <__multiply>
 80124e6:	6020      	str	r0, [r4, #0]
 80124e8:	f8c0 9000 	str.w	r9, [r0]
 80124ec:	4604      	mov	r4, r0
 80124ee:	e7e4      	b.n	80124ba <__pow5mult+0x6a>
 80124f0:	4638      	mov	r0, r7
 80124f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124f6:	bf00      	nop
 80124f8:	08014ba8 	.word	0x08014ba8
 80124fc:	080149d2 	.word	0x080149d2
 8012500:	08014a55 	.word	0x08014a55

08012504 <__lshift>:
 8012504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012508:	460c      	mov	r4, r1
 801250a:	6849      	ldr	r1, [r1, #4]
 801250c:	6923      	ldr	r3, [r4, #16]
 801250e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012512:	68a3      	ldr	r3, [r4, #8]
 8012514:	4607      	mov	r7, r0
 8012516:	4691      	mov	r9, r2
 8012518:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801251c:	f108 0601 	add.w	r6, r8, #1
 8012520:	42b3      	cmp	r3, r6
 8012522:	db0b      	blt.n	801253c <__lshift+0x38>
 8012524:	4638      	mov	r0, r7
 8012526:	f7ff fddb 	bl	80120e0 <_Balloc>
 801252a:	4605      	mov	r5, r0
 801252c:	b948      	cbnz	r0, 8012542 <__lshift+0x3e>
 801252e:	4602      	mov	r2, r0
 8012530:	4b2a      	ldr	r3, [pc, #168]	; (80125dc <__lshift+0xd8>)
 8012532:	482b      	ldr	r0, [pc, #172]	; (80125e0 <__lshift+0xdc>)
 8012534:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012538:	f000 fc80 	bl	8012e3c <__assert_func>
 801253c:	3101      	adds	r1, #1
 801253e:	005b      	lsls	r3, r3, #1
 8012540:	e7ee      	b.n	8012520 <__lshift+0x1c>
 8012542:	2300      	movs	r3, #0
 8012544:	f100 0114 	add.w	r1, r0, #20
 8012548:	f100 0210 	add.w	r2, r0, #16
 801254c:	4618      	mov	r0, r3
 801254e:	4553      	cmp	r3, sl
 8012550:	db37      	blt.n	80125c2 <__lshift+0xbe>
 8012552:	6920      	ldr	r0, [r4, #16]
 8012554:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012558:	f104 0314 	add.w	r3, r4, #20
 801255c:	f019 091f 	ands.w	r9, r9, #31
 8012560:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012564:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012568:	d02f      	beq.n	80125ca <__lshift+0xc6>
 801256a:	f1c9 0e20 	rsb	lr, r9, #32
 801256e:	468a      	mov	sl, r1
 8012570:	f04f 0c00 	mov.w	ip, #0
 8012574:	681a      	ldr	r2, [r3, #0]
 8012576:	fa02 f209 	lsl.w	r2, r2, r9
 801257a:	ea42 020c 	orr.w	r2, r2, ip
 801257e:	f84a 2b04 	str.w	r2, [sl], #4
 8012582:	f853 2b04 	ldr.w	r2, [r3], #4
 8012586:	4298      	cmp	r0, r3
 8012588:	fa22 fc0e 	lsr.w	ip, r2, lr
 801258c:	d8f2      	bhi.n	8012574 <__lshift+0x70>
 801258e:	1b03      	subs	r3, r0, r4
 8012590:	3b15      	subs	r3, #21
 8012592:	f023 0303 	bic.w	r3, r3, #3
 8012596:	3304      	adds	r3, #4
 8012598:	f104 0215 	add.w	r2, r4, #21
 801259c:	4290      	cmp	r0, r2
 801259e:	bf38      	it	cc
 80125a0:	2304      	movcc	r3, #4
 80125a2:	f841 c003 	str.w	ip, [r1, r3]
 80125a6:	f1bc 0f00 	cmp.w	ip, #0
 80125aa:	d001      	beq.n	80125b0 <__lshift+0xac>
 80125ac:	f108 0602 	add.w	r6, r8, #2
 80125b0:	3e01      	subs	r6, #1
 80125b2:	4638      	mov	r0, r7
 80125b4:	612e      	str	r6, [r5, #16]
 80125b6:	4621      	mov	r1, r4
 80125b8:	f7ff fdd2 	bl	8012160 <_Bfree>
 80125bc:	4628      	mov	r0, r5
 80125be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80125c6:	3301      	adds	r3, #1
 80125c8:	e7c1      	b.n	801254e <__lshift+0x4a>
 80125ca:	3904      	subs	r1, #4
 80125cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80125d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80125d4:	4298      	cmp	r0, r3
 80125d6:	d8f9      	bhi.n	80125cc <__lshift+0xc8>
 80125d8:	e7ea      	b.n	80125b0 <__lshift+0xac>
 80125da:	bf00      	nop
 80125dc:	08014a44 	.word	0x08014a44
 80125e0:	08014a55 	.word	0x08014a55

080125e4 <__mcmp>:
 80125e4:	b530      	push	{r4, r5, lr}
 80125e6:	6902      	ldr	r2, [r0, #16]
 80125e8:	690c      	ldr	r4, [r1, #16]
 80125ea:	1b12      	subs	r2, r2, r4
 80125ec:	d10e      	bne.n	801260c <__mcmp+0x28>
 80125ee:	f100 0314 	add.w	r3, r0, #20
 80125f2:	3114      	adds	r1, #20
 80125f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80125f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80125fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012600:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012604:	42a5      	cmp	r5, r4
 8012606:	d003      	beq.n	8012610 <__mcmp+0x2c>
 8012608:	d305      	bcc.n	8012616 <__mcmp+0x32>
 801260a:	2201      	movs	r2, #1
 801260c:	4610      	mov	r0, r2
 801260e:	bd30      	pop	{r4, r5, pc}
 8012610:	4283      	cmp	r3, r0
 8012612:	d3f3      	bcc.n	80125fc <__mcmp+0x18>
 8012614:	e7fa      	b.n	801260c <__mcmp+0x28>
 8012616:	f04f 32ff 	mov.w	r2, #4294967295
 801261a:	e7f7      	b.n	801260c <__mcmp+0x28>

0801261c <__mdiff>:
 801261c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012620:	460c      	mov	r4, r1
 8012622:	4606      	mov	r6, r0
 8012624:	4611      	mov	r1, r2
 8012626:	4620      	mov	r0, r4
 8012628:	4690      	mov	r8, r2
 801262a:	f7ff ffdb 	bl	80125e4 <__mcmp>
 801262e:	1e05      	subs	r5, r0, #0
 8012630:	d110      	bne.n	8012654 <__mdiff+0x38>
 8012632:	4629      	mov	r1, r5
 8012634:	4630      	mov	r0, r6
 8012636:	f7ff fd53 	bl	80120e0 <_Balloc>
 801263a:	b930      	cbnz	r0, 801264a <__mdiff+0x2e>
 801263c:	4b3a      	ldr	r3, [pc, #232]	; (8012728 <__mdiff+0x10c>)
 801263e:	4602      	mov	r2, r0
 8012640:	f240 2132 	movw	r1, #562	; 0x232
 8012644:	4839      	ldr	r0, [pc, #228]	; (801272c <__mdiff+0x110>)
 8012646:	f000 fbf9 	bl	8012e3c <__assert_func>
 801264a:	2301      	movs	r3, #1
 801264c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012654:	bfa4      	itt	ge
 8012656:	4643      	movge	r3, r8
 8012658:	46a0      	movge	r8, r4
 801265a:	4630      	mov	r0, r6
 801265c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012660:	bfa6      	itte	ge
 8012662:	461c      	movge	r4, r3
 8012664:	2500      	movge	r5, #0
 8012666:	2501      	movlt	r5, #1
 8012668:	f7ff fd3a 	bl	80120e0 <_Balloc>
 801266c:	b920      	cbnz	r0, 8012678 <__mdiff+0x5c>
 801266e:	4b2e      	ldr	r3, [pc, #184]	; (8012728 <__mdiff+0x10c>)
 8012670:	4602      	mov	r2, r0
 8012672:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012676:	e7e5      	b.n	8012644 <__mdiff+0x28>
 8012678:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801267c:	6926      	ldr	r6, [r4, #16]
 801267e:	60c5      	str	r5, [r0, #12]
 8012680:	f104 0914 	add.w	r9, r4, #20
 8012684:	f108 0514 	add.w	r5, r8, #20
 8012688:	f100 0e14 	add.w	lr, r0, #20
 801268c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012690:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012694:	f108 0210 	add.w	r2, r8, #16
 8012698:	46f2      	mov	sl, lr
 801269a:	2100      	movs	r1, #0
 801269c:	f859 3b04 	ldr.w	r3, [r9], #4
 80126a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80126a4:	fa1f f883 	uxth.w	r8, r3
 80126a8:	fa11 f18b 	uxtah	r1, r1, fp
 80126ac:	0c1b      	lsrs	r3, r3, #16
 80126ae:	eba1 0808 	sub.w	r8, r1, r8
 80126b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80126b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80126ba:	fa1f f888 	uxth.w	r8, r8
 80126be:	1419      	asrs	r1, r3, #16
 80126c0:	454e      	cmp	r6, r9
 80126c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80126c6:	f84a 3b04 	str.w	r3, [sl], #4
 80126ca:	d8e7      	bhi.n	801269c <__mdiff+0x80>
 80126cc:	1b33      	subs	r3, r6, r4
 80126ce:	3b15      	subs	r3, #21
 80126d0:	f023 0303 	bic.w	r3, r3, #3
 80126d4:	3304      	adds	r3, #4
 80126d6:	3415      	adds	r4, #21
 80126d8:	42a6      	cmp	r6, r4
 80126da:	bf38      	it	cc
 80126dc:	2304      	movcc	r3, #4
 80126de:	441d      	add	r5, r3
 80126e0:	4473      	add	r3, lr
 80126e2:	469e      	mov	lr, r3
 80126e4:	462e      	mov	r6, r5
 80126e6:	4566      	cmp	r6, ip
 80126e8:	d30e      	bcc.n	8012708 <__mdiff+0xec>
 80126ea:	f10c 0203 	add.w	r2, ip, #3
 80126ee:	1b52      	subs	r2, r2, r5
 80126f0:	f022 0203 	bic.w	r2, r2, #3
 80126f4:	3d03      	subs	r5, #3
 80126f6:	45ac      	cmp	ip, r5
 80126f8:	bf38      	it	cc
 80126fa:	2200      	movcc	r2, #0
 80126fc:	441a      	add	r2, r3
 80126fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012702:	b17b      	cbz	r3, 8012724 <__mdiff+0x108>
 8012704:	6107      	str	r7, [r0, #16]
 8012706:	e7a3      	b.n	8012650 <__mdiff+0x34>
 8012708:	f856 8b04 	ldr.w	r8, [r6], #4
 801270c:	fa11 f288 	uxtah	r2, r1, r8
 8012710:	1414      	asrs	r4, r2, #16
 8012712:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012716:	b292      	uxth	r2, r2
 8012718:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801271c:	f84e 2b04 	str.w	r2, [lr], #4
 8012720:	1421      	asrs	r1, r4, #16
 8012722:	e7e0      	b.n	80126e6 <__mdiff+0xca>
 8012724:	3f01      	subs	r7, #1
 8012726:	e7ea      	b.n	80126fe <__mdiff+0xe2>
 8012728:	08014a44 	.word	0x08014a44
 801272c:	08014a55 	.word	0x08014a55

08012730 <__d2b>:
 8012730:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012734:	4689      	mov	r9, r1
 8012736:	2101      	movs	r1, #1
 8012738:	ec57 6b10 	vmov	r6, r7, d0
 801273c:	4690      	mov	r8, r2
 801273e:	f7ff fccf 	bl	80120e0 <_Balloc>
 8012742:	4604      	mov	r4, r0
 8012744:	b930      	cbnz	r0, 8012754 <__d2b+0x24>
 8012746:	4602      	mov	r2, r0
 8012748:	4b25      	ldr	r3, [pc, #148]	; (80127e0 <__d2b+0xb0>)
 801274a:	4826      	ldr	r0, [pc, #152]	; (80127e4 <__d2b+0xb4>)
 801274c:	f240 310a 	movw	r1, #778	; 0x30a
 8012750:	f000 fb74 	bl	8012e3c <__assert_func>
 8012754:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012758:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801275c:	bb35      	cbnz	r5, 80127ac <__d2b+0x7c>
 801275e:	2e00      	cmp	r6, #0
 8012760:	9301      	str	r3, [sp, #4]
 8012762:	d028      	beq.n	80127b6 <__d2b+0x86>
 8012764:	4668      	mov	r0, sp
 8012766:	9600      	str	r6, [sp, #0]
 8012768:	f7ff fd82 	bl	8012270 <__lo0bits>
 801276c:	9900      	ldr	r1, [sp, #0]
 801276e:	b300      	cbz	r0, 80127b2 <__d2b+0x82>
 8012770:	9a01      	ldr	r2, [sp, #4]
 8012772:	f1c0 0320 	rsb	r3, r0, #32
 8012776:	fa02 f303 	lsl.w	r3, r2, r3
 801277a:	430b      	orrs	r3, r1
 801277c:	40c2      	lsrs	r2, r0
 801277e:	6163      	str	r3, [r4, #20]
 8012780:	9201      	str	r2, [sp, #4]
 8012782:	9b01      	ldr	r3, [sp, #4]
 8012784:	61a3      	str	r3, [r4, #24]
 8012786:	2b00      	cmp	r3, #0
 8012788:	bf14      	ite	ne
 801278a:	2202      	movne	r2, #2
 801278c:	2201      	moveq	r2, #1
 801278e:	6122      	str	r2, [r4, #16]
 8012790:	b1d5      	cbz	r5, 80127c8 <__d2b+0x98>
 8012792:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012796:	4405      	add	r5, r0
 8012798:	f8c9 5000 	str.w	r5, [r9]
 801279c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80127a0:	f8c8 0000 	str.w	r0, [r8]
 80127a4:	4620      	mov	r0, r4
 80127a6:	b003      	add	sp, #12
 80127a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80127b0:	e7d5      	b.n	801275e <__d2b+0x2e>
 80127b2:	6161      	str	r1, [r4, #20]
 80127b4:	e7e5      	b.n	8012782 <__d2b+0x52>
 80127b6:	a801      	add	r0, sp, #4
 80127b8:	f7ff fd5a 	bl	8012270 <__lo0bits>
 80127bc:	9b01      	ldr	r3, [sp, #4]
 80127be:	6163      	str	r3, [r4, #20]
 80127c0:	2201      	movs	r2, #1
 80127c2:	6122      	str	r2, [r4, #16]
 80127c4:	3020      	adds	r0, #32
 80127c6:	e7e3      	b.n	8012790 <__d2b+0x60>
 80127c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80127cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80127d0:	f8c9 0000 	str.w	r0, [r9]
 80127d4:	6918      	ldr	r0, [r3, #16]
 80127d6:	f7ff fd2b 	bl	8012230 <__hi0bits>
 80127da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80127de:	e7df      	b.n	80127a0 <__d2b+0x70>
 80127e0:	08014a44 	.word	0x08014a44
 80127e4:	08014a55 	.word	0x08014a55

080127e8 <_calloc_r>:
 80127e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80127ea:	fba1 2402 	umull	r2, r4, r1, r2
 80127ee:	b94c      	cbnz	r4, 8012804 <_calloc_r+0x1c>
 80127f0:	4611      	mov	r1, r2
 80127f2:	9201      	str	r2, [sp, #4]
 80127f4:	f7fd fcee 	bl	80101d4 <_malloc_r>
 80127f8:	9a01      	ldr	r2, [sp, #4]
 80127fa:	4605      	mov	r5, r0
 80127fc:	b930      	cbnz	r0, 801280c <_calloc_r+0x24>
 80127fe:	4628      	mov	r0, r5
 8012800:	b003      	add	sp, #12
 8012802:	bd30      	pop	{r4, r5, pc}
 8012804:	220c      	movs	r2, #12
 8012806:	6002      	str	r2, [r0, #0]
 8012808:	2500      	movs	r5, #0
 801280a:	e7f8      	b.n	80127fe <_calloc_r+0x16>
 801280c:	4621      	mov	r1, r4
 801280e:	f7fd fcb8 	bl	8010182 <memset>
 8012812:	e7f4      	b.n	80127fe <_calloc_r+0x16>

08012814 <_free_r>:
 8012814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012816:	2900      	cmp	r1, #0
 8012818:	d044      	beq.n	80128a4 <_free_r+0x90>
 801281a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801281e:	9001      	str	r0, [sp, #4]
 8012820:	2b00      	cmp	r3, #0
 8012822:	f1a1 0404 	sub.w	r4, r1, #4
 8012826:	bfb8      	it	lt
 8012828:	18e4      	addlt	r4, r4, r3
 801282a:	f7ff fc4d 	bl	80120c8 <__malloc_lock>
 801282e:	4a1e      	ldr	r2, [pc, #120]	; (80128a8 <_free_r+0x94>)
 8012830:	9801      	ldr	r0, [sp, #4]
 8012832:	6813      	ldr	r3, [r2, #0]
 8012834:	b933      	cbnz	r3, 8012844 <_free_r+0x30>
 8012836:	6063      	str	r3, [r4, #4]
 8012838:	6014      	str	r4, [r2, #0]
 801283a:	b003      	add	sp, #12
 801283c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012840:	f7ff bc48 	b.w	80120d4 <__malloc_unlock>
 8012844:	42a3      	cmp	r3, r4
 8012846:	d908      	bls.n	801285a <_free_r+0x46>
 8012848:	6825      	ldr	r5, [r4, #0]
 801284a:	1961      	adds	r1, r4, r5
 801284c:	428b      	cmp	r3, r1
 801284e:	bf01      	itttt	eq
 8012850:	6819      	ldreq	r1, [r3, #0]
 8012852:	685b      	ldreq	r3, [r3, #4]
 8012854:	1949      	addeq	r1, r1, r5
 8012856:	6021      	streq	r1, [r4, #0]
 8012858:	e7ed      	b.n	8012836 <_free_r+0x22>
 801285a:	461a      	mov	r2, r3
 801285c:	685b      	ldr	r3, [r3, #4]
 801285e:	b10b      	cbz	r3, 8012864 <_free_r+0x50>
 8012860:	42a3      	cmp	r3, r4
 8012862:	d9fa      	bls.n	801285a <_free_r+0x46>
 8012864:	6811      	ldr	r1, [r2, #0]
 8012866:	1855      	adds	r5, r2, r1
 8012868:	42a5      	cmp	r5, r4
 801286a:	d10b      	bne.n	8012884 <_free_r+0x70>
 801286c:	6824      	ldr	r4, [r4, #0]
 801286e:	4421      	add	r1, r4
 8012870:	1854      	adds	r4, r2, r1
 8012872:	42a3      	cmp	r3, r4
 8012874:	6011      	str	r1, [r2, #0]
 8012876:	d1e0      	bne.n	801283a <_free_r+0x26>
 8012878:	681c      	ldr	r4, [r3, #0]
 801287a:	685b      	ldr	r3, [r3, #4]
 801287c:	6053      	str	r3, [r2, #4]
 801287e:	4421      	add	r1, r4
 8012880:	6011      	str	r1, [r2, #0]
 8012882:	e7da      	b.n	801283a <_free_r+0x26>
 8012884:	d902      	bls.n	801288c <_free_r+0x78>
 8012886:	230c      	movs	r3, #12
 8012888:	6003      	str	r3, [r0, #0]
 801288a:	e7d6      	b.n	801283a <_free_r+0x26>
 801288c:	6825      	ldr	r5, [r4, #0]
 801288e:	1961      	adds	r1, r4, r5
 8012890:	428b      	cmp	r3, r1
 8012892:	bf04      	itt	eq
 8012894:	6819      	ldreq	r1, [r3, #0]
 8012896:	685b      	ldreq	r3, [r3, #4]
 8012898:	6063      	str	r3, [r4, #4]
 801289a:	bf04      	itt	eq
 801289c:	1949      	addeq	r1, r1, r5
 801289e:	6021      	streq	r1, [r4, #0]
 80128a0:	6054      	str	r4, [r2, #4]
 80128a2:	e7ca      	b.n	801283a <_free_r+0x26>
 80128a4:	b003      	add	sp, #12
 80128a6:	bd30      	pop	{r4, r5, pc}
 80128a8:	20005e88 	.word	0x20005e88

080128ac <__ssputs_r>:
 80128ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128b0:	688e      	ldr	r6, [r1, #8]
 80128b2:	429e      	cmp	r6, r3
 80128b4:	4682      	mov	sl, r0
 80128b6:	460c      	mov	r4, r1
 80128b8:	4690      	mov	r8, r2
 80128ba:	461f      	mov	r7, r3
 80128bc:	d838      	bhi.n	8012930 <__ssputs_r+0x84>
 80128be:	898a      	ldrh	r2, [r1, #12]
 80128c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80128c4:	d032      	beq.n	801292c <__ssputs_r+0x80>
 80128c6:	6825      	ldr	r5, [r4, #0]
 80128c8:	6909      	ldr	r1, [r1, #16]
 80128ca:	eba5 0901 	sub.w	r9, r5, r1
 80128ce:	6965      	ldr	r5, [r4, #20]
 80128d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80128d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80128d8:	3301      	adds	r3, #1
 80128da:	444b      	add	r3, r9
 80128dc:	106d      	asrs	r5, r5, #1
 80128de:	429d      	cmp	r5, r3
 80128e0:	bf38      	it	cc
 80128e2:	461d      	movcc	r5, r3
 80128e4:	0553      	lsls	r3, r2, #21
 80128e6:	d531      	bpl.n	801294c <__ssputs_r+0xa0>
 80128e8:	4629      	mov	r1, r5
 80128ea:	f7fd fc73 	bl	80101d4 <_malloc_r>
 80128ee:	4606      	mov	r6, r0
 80128f0:	b950      	cbnz	r0, 8012908 <__ssputs_r+0x5c>
 80128f2:	230c      	movs	r3, #12
 80128f4:	f8ca 3000 	str.w	r3, [sl]
 80128f8:	89a3      	ldrh	r3, [r4, #12]
 80128fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128fe:	81a3      	strh	r3, [r4, #12]
 8012900:	f04f 30ff 	mov.w	r0, #4294967295
 8012904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012908:	6921      	ldr	r1, [r4, #16]
 801290a:	464a      	mov	r2, r9
 801290c:	f7fd fc11 	bl	8010132 <memcpy>
 8012910:	89a3      	ldrh	r3, [r4, #12]
 8012912:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801291a:	81a3      	strh	r3, [r4, #12]
 801291c:	6126      	str	r6, [r4, #16]
 801291e:	6165      	str	r5, [r4, #20]
 8012920:	444e      	add	r6, r9
 8012922:	eba5 0509 	sub.w	r5, r5, r9
 8012926:	6026      	str	r6, [r4, #0]
 8012928:	60a5      	str	r5, [r4, #8]
 801292a:	463e      	mov	r6, r7
 801292c:	42be      	cmp	r6, r7
 801292e:	d900      	bls.n	8012932 <__ssputs_r+0x86>
 8012930:	463e      	mov	r6, r7
 8012932:	6820      	ldr	r0, [r4, #0]
 8012934:	4632      	mov	r2, r6
 8012936:	4641      	mov	r1, r8
 8012938:	f7fd fc09 	bl	801014e <memmove>
 801293c:	68a3      	ldr	r3, [r4, #8]
 801293e:	1b9b      	subs	r3, r3, r6
 8012940:	60a3      	str	r3, [r4, #8]
 8012942:	6823      	ldr	r3, [r4, #0]
 8012944:	4433      	add	r3, r6
 8012946:	6023      	str	r3, [r4, #0]
 8012948:	2000      	movs	r0, #0
 801294a:	e7db      	b.n	8012904 <__ssputs_r+0x58>
 801294c:	462a      	mov	r2, r5
 801294e:	f000 fad9 	bl	8012f04 <_realloc_r>
 8012952:	4606      	mov	r6, r0
 8012954:	2800      	cmp	r0, #0
 8012956:	d1e1      	bne.n	801291c <__ssputs_r+0x70>
 8012958:	6921      	ldr	r1, [r4, #16]
 801295a:	4650      	mov	r0, sl
 801295c:	f7ff ff5a 	bl	8012814 <_free_r>
 8012960:	e7c7      	b.n	80128f2 <__ssputs_r+0x46>
	...

08012964 <_svfiprintf_r>:
 8012964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012968:	4698      	mov	r8, r3
 801296a:	898b      	ldrh	r3, [r1, #12]
 801296c:	061b      	lsls	r3, r3, #24
 801296e:	b09d      	sub	sp, #116	; 0x74
 8012970:	4607      	mov	r7, r0
 8012972:	460d      	mov	r5, r1
 8012974:	4614      	mov	r4, r2
 8012976:	d50e      	bpl.n	8012996 <_svfiprintf_r+0x32>
 8012978:	690b      	ldr	r3, [r1, #16]
 801297a:	b963      	cbnz	r3, 8012996 <_svfiprintf_r+0x32>
 801297c:	2140      	movs	r1, #64	; 0x40
 801297e:	f7fd fc29 	bl	80101d4 <_malloc_r>
 8012982:	6028      	str	r0, [r5, #0]
 8012984:	6128      	str	r0, [r5, #16]
 8012986:	b920      	cbnz	r0, 8012992 <_svfiprintf_r+0x2e>
 8012988:	230c      	movs	r3, #12
 801298a:	603b      	str	r3, [r7, #0]
 801298c:	f04f 30ff 	mov.w	r0, #4294967295
 8012990:	e0d1      	b.n	8012b36 <_svfiprintf_r+0x1d2>
 8012992:	2340      	movs	r3, #64	; 0x40
 8012994:	616b      	str	r3, [r5, #20]
 8012996:	2300      	movs	r3, #0
 8012998:	9309      	str	r3, [sp, #36]	; 0x24
 801299a:	2320      	movs	r3, #32
 801299c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80129a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80129a4:	2330      	movs	r3, #48	; 0x30
 80129a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012b50 <_svfiprintf_r+0x1ec>
 80129aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80129ae:	f04f 0901 	mov.w	r9, #1
 80129b2:	4623      	mov	r3, r4
 80129b4:	469a      	mov	sl, r3
 80129b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129ba:	b10a      	cbz	r2, 80129c0 <_svfiprintf_r+0x5c>
 80129bc:	2a25      	cmp	r2, #37	; 0x25
 80129be:	d1f9      	bne.n	80129b4 <_svfiprintf_r+0x50>
 80129c0:	ebba 0b04 	subs.w	fp, sl, r4
 80129c4:	d00b      	beq.n	80129de <_svfiprintf_r+0x7a>
 80129c6:	465b      	mov	r3, fp
 80129c8:	4622      	mov	r2, r4
 80129ca:	4629      	mov	r1, r5
 80129cc:	4638      	mov	r0, r7
 80129ce:	f7ff ff6d 	bl	80128ac <__ssputs_r>
 80129d2:	3001      	adds	r0, #1
 80129d4:	f000 80aa 	beq.w	8012b2c <_svfiprintf_r+0x1c8>
 80129d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129da:	445a      	add	r2, fp
 80129dc:	9209      	str	r2, [sp, #36]	; 0x24
 80129de:	f89a 3000 	ldrb.w	r3, [sl]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	f000 80a2 	beq.w	8012b2c <_svfiprintf_r+0x1c8>
 80129e8:	2300      	movs	r3, #0
 80129ea:	f04f 32ff 	mov.w	r2, #4294967295
 80129ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80129f2:	f10a 0a01 	add.w	sl, sl, #1
 80129f6:	9304      	str	r3, [sp, #16]
 80129f8:	9307      	str	r3, [sp, #28]
 80129fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80129fe:	931a      	str	r3, [sp, #104]	; 0x68
 8012a00:	4654      	mov	r4, sl
 8012a02:	2205      	movs	r2, #5
 8012a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a08:	4851      	ldr	r0, [pc, #324]	; (8012b50 <_svfiprintf_r+0x1ec>)
 8012a0a:	f7ed fbf1 	bl	80001f0 <memchr>
 8012a0e:	9a04      	ldr	r2, [sp, #16]
 8012a10:	b9d8      	cbnz	r0, 8012a4a <_svfiprintf_r+0xe6>
 8012a12:	06d0      	lsls	r0, r2, #27
 8012a14:	bf44      	itt	mi
 8012a16:	2320      	movmi	r3, #32
 8012a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a1c:	0711      	lsls	r1, r2, #28
 8012a1e:	bf44      	itt	mi
 8012a20:	232b      	movmi	r3, #43	; 0x2b
 8012a22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a26:	f89a 3000 	ldrb.w	r3, [sl]
 8012a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8012a2c:	d015      	beq.n	8012a5a <_svfiprintf_r+0xf6>
 8012a2e:	9a07      	ldr	r2, [sp, #28]
 8012a30:	4654      	mov	r4, sl
 8012a32:	2000      	movs	r0, #0
 8012a34:	f04f 0c0a 	mov.w	ip, #10
 8012a38:	4621      	mov	r1, r4
 8012a3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a3e:	3b30      	subs	r3, #48	; 0x30
 8012a40:	2b09      	cmp	r3, #9
 8012a42:	d94e      	bls.n	8012ae2 <_svfiprintf_r+0x17e>
 8012a44:	b1b0      	cbz	r0, 8012a74 <_svfiprintf_r+0x110>
 8012a46:	9207      	str	r2, [sp, #28]
 8012a48:	e014      	b.n	8012a74 <_svfiprintf_r+0x110>
 8012a4a:	eba0 0308 	sub.w	r3, r0, r8
 8012a4e:	fa09 f303 	lsl.w	r3, r9, r3
 8012a52:	4313      	orrs	r3, r2
 8012a54:	9304      	str	r3, [sp, #16]
 8012a56:	46a2      	mov	sl, r4
 8012a58:	e7d2      	b.n	8012a00 <_svfiprintf_r+0x9c>
 8012a5a:	9b03      	ldr	r3, [sp, #12]
 8012a5c:	1d19      	adds	r1, r3, #4
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	9103      	str	r1, [sp, #12]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	bfbb      	ittet	lt
 8012a66:	425b      	neglt	r3, r3
 8012a68:	f042 0202 	orrlt.w	r2, r2, #2
 8012a6c:	9307      	strge	r3, [sp, #28]
 8012a6e:	9307      	strlt	r3, [sp, #28]
 8012a70:	bfb8      	it	lt
 8012a72:	9204      	strlt	r2, [sp, #16]
 8012a74:	7823      	ldrb	r3, [r4, #0]
 8012a76:	2b2e      	cmp	r3, #46	; 0x2e
 8012a78:	d10c      	bne.n	8012a94 <_svfiprintf_r+0x130>
 8012a7a:	7863      	ldrb	r3, [r4, #1]
 8012a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8012a7e:	d135      	bne.n	8012aec <_svfiprintf_r+0x188>
 8012a80:	9b03      	ldr	r3, [sp, #12]
 8012a82:	1d1a      	adds	r2, r3, #4
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	9203      	str	r2, [sp, #12]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	bfb8      	it	lt
 8012a8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012a90:	3402      	adds	r4, #2
 8012a92:	9305      	str	r3, [sp, #20]
 8012a94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012b60 <_svfiprintf_r+0x1fc>
 8012a98:	7821      	ldrb	r1, [r4, #0]
 8012a9a:	2203      	movs	r2, #3
 8012a9c:	4650      	mov	r0, sl
 8012a9e:	f7ed fba7 	bl	80001f0 <memchr>
 8012aa2:	b140      	cbz	r0, 8012ab6 <_svfiprintf_r+0x152>
 8012aa4:	2340      	movs	r3, #64	; 0x40
 8012aa6:	eba0 000a 	sub.w	r0, r0, sl
 8012aaa:	fa03 f000 	lsl.w	r0, r3, r0
 8012aae:	9b04      	ldr	r3, [sp, #16]
 8012ab0:	4303      	orrs	r3, r0
 8012ab2:	3401      	adds	r4, #1
 8012ab4:	9304      	str	r3, [sp, #16]
 8012ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012aba:	4826      	ldr	r0, [pc, #152]	; (8012b54 <_svfiprintf_r+0x1f0>)
 8012abc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012ac0:	2206      	movs	r2, #6
 8012ac2:	f7ed fb95 	bl	80001f0 <memchr>
 8012ac6:	2800      	cmp	r0, #0
 8012ac8:	d038      	beq.n	8012b3c <_svfiprintf_r+0x1d8>
 8012aca:	4b23      	ldr	r3, [pc, #140]	; (8012b58 <_svfiprintf_r+0x1f4>)
 8012acc:	bb1b      	cbnz	r3, 8012b16 <_svfiprintf_r+0x1b2>
 8012ace:	9b03      	ldr	r3, [sp, #12]
 8012ad0:	3307      	adds	r3, #7
 8012ad2:	f023 0307 	bic.w	r3, r3, #7
 8012ad6:	3308      	adds	r3, #8
 8012ad8:	9303      	str	r3, [sp, #12]
 8012ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012adc:	4433      	add	r3, r6
 8012ade:	9309      	str	r3, [sp, #36]	; 0x24
 8012ae0:	e767      	b.n	80129b2 <_svfiprintf_r+0x4e>
 8012ae2:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ae6:	460c      	mov	r4, r1
 8012ae8:	2001      	movs	r0, #1
 8012aea:	e7a5      	b.n	8012a38 <_svfiprintf_r+0xd4>
 8012aec:	2300      	movs	r3, #0
 8012aee:	3401      	adds	r4, #1
 8012af0:	9305      	str	r3, [sp, #20]
 8012af2:	4619      	mov	r1, r3
 8012af4:	f04f 0c0a 	mov.w	ip, #10
 8012af8:	4620      	mov	r0, r4
 8012afa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012afe:	3a30      	subs	r2, #48	; 0x30
 8012b00:	2a09      	cmp	r2, #9
 8012b02:	d903      	bls.n	8012b0c <_svfiprintf_r+0x1a8>
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d0c5      	beq.n	8012a94 <_svfiprintf_r+0x130>
 8012b08:	9105      	str	r1, [sp, #20]
 8012b0a:	e7c3      	b.n	8012a94 <_svfiprintf_r+0x130>
 8012b0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b10:	4604      	mov	r4, r0
 8012b12:	2301      	movs	r3, #1
 8012b14:	e7f0      	b.n	8012af8 <_svfiprintf_r+0x194>
 8012b16:	ab03      	add	r3, sp, #12
 8012b18:	9300      	str	r3, [sp, #0]
 8012b1a:	462a      	mov	r2, r5
 8012b1c:	4b0f      	ldr	r3, [pc, #60]	; (8012b5c <_svfiprintf_r+0x1f8>)
 8012b1e:	a904      	add	r1, sp, #16
 8012b20:	4638      	mov	r0, r7
 8012b22:	f7fd fc6b 	bl	80103fc <_printf_float>
 8012b26:	1c42      	adds	r2, r0, #1
 8012b28:	4606      	mov	r6, r0
 8012b2a:	d1d6      	bne.n	8012ada <_svfiprintf_r+0x176>
 8012b2c:	89ab      	ldrh	r3, [r5, #12]
 8012b2e:	065b      	lsls	r3, r3, #25
 8012b30:	f53f af2c 	bmi.w	801298c <_svfiprintf_r+0x28>
 8012b34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b36:	b01d      	add	sp, #116	; 0x74
 8012b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b3c:	ab03      	add	r3, sp, #12
 8012b3e:	9300      	str	r3, [sp, #0]
 8012b40:	462a      	mov	r2, r5
 8012b42:	4b06      	ldr	r3, [pc, #24]	; (8012b5c <_svfiprintf_r+0x1f8>)
 8012b44:	a904      	add	r1, sp, #16
 8012b46:	4638      	mov	r0, r7
 8012b48:	f7fd fefc 	bl	8010944 <_printf_i>
 8012b4c:	e7eb      	b.n	8012b26 <_svfiprintf_r+0x1c2>
 8012b4e:	bf00      	nop
 8012b50:	08014bb4 	.word	0x08014bb4
 8012b54:	08014bbe 	.word	0x08014bbe
 8012b58:	080103fd 	.word	0x080103fd
 8012b5c:	080128ad 	.word	0x080128ad
 8012b60:	08014bba 	.word	0x08014bba

08012b64 <__sfputc_r>:
 8012b64:	6893      	ldr	r3, [r2, #8]
 8012b66:	3b01      	subs	r3, #1
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	b410      	push	{r4}
 8012b6c:	6093      	str	r3, [r2, #8]
 8012b6e:	da08      	bge.n	8012b82 <__sfputc_r+0x1e>
 8012b70:	6994      	ldr	r4, [r2, #24]
 8012b72:	42a3      	cmp	r3, r4
 8012b74:	db01      	blt.n	8012b7a <__sfputc_r+0x16>
 8012b76:	290a      	cmp	r1, #10
 8012b78:	d103      	bne.n	8012b82 <__sfputc_r+0x1e>
 8012b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b7e:	f7fe b9ff 	b.w	8010f80 <__swbuf_r>
 8012b82:	6813      	ldr	r3, [r2, #0]
 8012b84:	1c58      	adds	r0, r3, #1
 8012b86:	6010      	str	r0, [r2, #0]
 8012b88:	7019      	strb	r1, [r3, #0]
 8012b8a:	4608      	mov	r0, r1
 8012b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b90:	4770      	bx	lr

08012b92 <__sfputs_r>:
 8012b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b94:	4606      	mov	r6, r0
 8012b96:	460f      	mov	r7, r1
 8012b98:	4614      	mov	r4, r2
 8012b9a:	18d5      	adds	r5, r2, r3
 8012b9c:	42ac      	cmp	r4, r5
 8012b9e:	d101      	bne.n	8012ba4 <__sfputs_r+0x12>
 8012ba0:	2000      	movs	r0, #0
 8012ba2:	e007      	b.n	8012bb4 <__sfputs_r+0x22>
 8012ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ba8:	463a      	mov	r2, r7
 8012baa:	4630      	mov	r0, r6
 8012bac:	f7ff ffda 	bl	8012b64 <__sfputc_r>
 8012bb0:	1c43      	adds	r3, r0, #1
 8012bb2:	d1f3      	bne.n	8012b9c <__sfputs_r+0xa>
 8012bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012bb8 <_vfiprintf_r>:
 8012bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bbc:	460d      	mov	r5, r1
 8012bbe:	b09d      	sub	sp, #116	; 0x74
 8012bc0:	4614      	mov	r4, r2
 8012bc2:	4698      	mov	r8, r3
 8012bc4:	4606      	mov	r6, r0
 8012bc6:	b118      	cbz	r0, 8012bd0 <_vfiprintf_r+0x18>
 8012bc8:	6983      	ldr	r3, [r0, #24]
 8012bca:	b90b      	cbnz	r3, 8012bd0 <_vfiprintf_r+0x18>
 8012bcc:	f7fd f9ec 	bl	800ffa8 <__sinit>
 8012bd0:	4b89      	ldr	r3, [pc, #548]	; (8012df8 <_vfiprintf_r+0x240>)
 8012bd2:	429d      	cmp	r5, r3
 8012bd4:	d11b      	bne.n	8012c0e <_vfiprintf_r+0x56>
 8012bd6:	6875      	ldr	r5, [r6, #4]
 8012bd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012bda:	07d9      	lsls	r1, r3, #31
 8012bdc:	d405      	bmi.n	8012bea <_vfiprintf_r+0x32>
 8012bde:	89ab      	ldrh	r3, [r5, #12]
 8012be0:	059a      	lsls	r2, r3, #22
 8012be2:	d402      	bmi.n	8012bea <_vfiprintf_r+0x32>
 8012be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012be6:	f7fd faa2 	bl	801012e <__retarget_lock_acquire_recursive>
 8012bea:	89ab      	ldrh	r3, [r5, #12]
 8012bec:	071b      	lsls	r3, r3, #28
 8012bee:	d501      	bpl.n	8012bf4 <_vfiprintf_r+0x3c>
 8012bf0:	692b      	ldr	r3, [r5, #16]
 8012bf2:	b9eb      	cbnz	r3, 8012c30 <_vfiprintf_r+0x78>
 8012bf4:	4629      	mov	r1, r5
 8012bf6:	4630      	mov	r0, r6
 8012bf8:	f7fe fa26 	bl	8011048 <__swsetup_r>
 8012bfc:	b1c0      	cbz	r0, 8012c30 <_vfiprintf_r+0x78>
 8012bfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c00:	07dc      	lsls	r4, r3, #31
 8012c02:	d50e      	bpl.n	8012c22 <_vfiprintf_r+0x6a>
 8012c04:	f04f 30ff 	mov.w	r0, #4294967295
 8012c08:	b01d      	add	sp, #116	; 0x74
 8012c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c0e:	4b7b      	ldr	r3, [pc, #492]	; (8012dfc <_vfiprintf_r+0x244>)
 8012c10:	429d      	cmp	r5, r3
 8012c12:	d101      	bne.n	8012c18 <_vfiprintf_r+0x60>
 8012c14:	68b5      	ldr	r5, [r6, #8]
 8012c16:	e7df      	b.n	8012bd8 <_vfiprintf_r+0x20>
 8012c18:	4b79      	ldr	r3, [pc, #484]	; (8012e00 <_vfiprintf_r+0x248>)
 8012c1a:	429d      	cmp	r5, r3
 8012c1c:	bf08      	it	eq
 8012c1e:	68f5      	ldreq	r5, [r6, #12]
 8012c20:	e7da      	b.n	8012bd8 <_vfiprintf_r+0x20>
 8012c22:	89ab      	ldrh	r3, [r5, #12]
 8012c24:	0598      	lsls	r0, r3, #22
 8012c26:	d4ed      	bmi.n	8012c04 <_vfiprintf_r+0x4c>
 8012c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c2a:	f7fd fa81 	bl	8010130 <__retarget_lock_release_recursive>
 8012c2e:	e7e9      	b.n	8012c04 <_vfiprintf_r+0x4c>
 8012c30:	2300      	movs	r3, #0
 8012c32:	9309      	str	r3, [sp, #36]	; 0x24
 8012c34:	2320      	movs	r3, #32
 8012c36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c3e:	2330      	movs	r3, #48	; 0x30
 8012c40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012e04 <_vfiprintf_r+0x24c>
 8012c44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c48:	f04f 0901 	mov.w	r9, #1
 8012c4c:	4623      	mov	r3, r4
 8012c4e:	469a      	mov	sl, r3
 8012c50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c54:	b10a      	cbz	r2, 8012c5a <_vfiprintf_r+0xa2>
 8012c56:	2a25      	cmp	r2, #37	; 0x25
 8012c58:	d1f9      	bne.n	8012c4e <_vfiprintf_r+0x96>
 8012c5a:	ebba 0b04 	subs.w	fp, sl, r4
 8012c5e:	d00b      	beq.n	8012c78 <_vfiprintf_r+0xc0>
 8012c60:	465b      	mov	r3, fp
 8012c62:	4622      	mov	r2, r4
 8012c64:	4629      	mov	r1, r5
 8012c66:	4630      	mov	r0, r6
 8012c68:	f7ff ff93 	bl	8012b92 <__sfputs_r>
 8012c6c:	3001      	adds	r0, #1
 8012c6e:	f000 80aa 	beq.w	8012dc6 <_vfiprintf_r+0x20e>
 8012c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c74:	445a      	add	r2, fp
 8012c76:	9209      	str	r2, [sp, #36]	; 0x24
 8012c78:	f89a 3000 	ldrb.w	r3, [sl]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	f000 80a2 	beq.w	8012dc6 <_vfiprintf_r+0x20e>
 8012c82:	2300      	movs	r3, #0
 8012c84:	f04f 32ff 	mov.w	r2, #4294967295
 8012c88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c8c:	f10a 0a01 	add.w	sl, sl, #1
 8012c90:	9304      	str	r3, [sp, #16]
 8012c92:	9307      	str	r3, [sp, #28]
 8012c94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c98:	931a      	str	r3, [sp, #104]	; 0x68
 8012c9a:	4654      	mov	r4, sl
 8012c9c:	2205      	movs	r2, #5
 8012c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ca2:	4858      	ldr	r0, [pc, #352]	; (8012e04 <_vfiprintf_r+0x24c>)
 8012ca4:	f7ed faa4 	bl	80001f0 <memchr>
 8012ca8:	9a04      	ldr	r2, [sp, #16]
 8012caa:	b9d8      	cbnz	r0, 8012ce4 <_vfiprintf_r+0x12c>
 8012cac:	06d1      	lsls	r1, r2, #27
 8012cae:	bf44      	itt	mi
 8012cb0:	2320      	movmi	r3, #32
 8012cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012cb6:	0713      	lsls	r3, r2, #28
 8012cb8:	bf44      	itt	mi
 8012cba:	232b      	movmi	r3, #43	; 0x2b
 8012cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8012cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8012cc6:	d015      	beq.n	8012cf4 <_vfiprintf_r+0x13c>
 8012cc8:	9a07      	ldr	r2, [sp, #28]
 8012cca:	4654      	mov	r4, sl
 8012ccc:	2000      	movs	r0, #0
 8012cce:	f04f 0c0a 	mov.w	ip, #10
 8012cd2:	4621      	mov	r1, r4
 8012cd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012cd8:	3b30      	subs	r3, #48	; 0x30
 8012cda:	2b09      	cmp	r3, #9
 8012cdc:	d94e      	bls.n	8012d7c <_vfiprintf_r+0x1c4>
 8012cde:	b1b0      	cbz	r0, 8012d0e <_vfiprintf_r+0x156>
 8012ce0:	9207      	str	r2, [sp, #28]
 8012ce2:	e014      	b.n	8012d0e <_vfiprintf_r+0x156>
 8012ce4:	eba0 0308 	sub.w	r3, r0, r8
 8012ce8:	fa09 f303 	lsl.w	r3, r9, r3
 8012cec:	4313      	orrs	r3, r2
 8012cee:	9304      	str	r3, [sp, #16]
 8012cf0:	46a2      	mov	sl, r4
 8012cf2:	e7d2      	b.n	8012c9a <_vfiprintf_r+0xe2>
 8012cf4:	9b03      	ldr	r3, [sp, #12]
 8012cf6:	1d19      	adds	r1, r3, #4
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	9103      	str	r1, [sp, #12]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	bfbb      	ittet	lt
 8012d00:	425b      	neglt	r3, r3
 8012d02:	f042 0202 	orrlt.w	r2, r2, #2
 8012d06:	9307      	strge	r3, [sp, #28]
 8012d08:	9307      	strlt	r3, [sp, #28]
 8012d0a:	bfb8      	it	lt
 8012d0c:	9204      	strlt	r2, [sp, #16]
 8012d0e:	7823      	ldrb	r3, [r4, #0]
 8012d10:	2b2e      	cmp	r3, #46	; 0x2e
 8012d12:	d10c      	bne.n	8012d2e <_vfiprintf_r+0x176>
 8012d14:	7863      	ldrb	r3, [r4, #1]
 8012d16:	2b2a      	cmp	r3, #42	; 0x2a
 8012d18:	d135      	bne.n	8012d86 <_vfiprintf_r+0x1ce>
 8012d1a:	9b03      	ldr	r3, [sp, #12]
 8012d1c:	1d1a      	adds	r2, r3, #4
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	9203      	str	r2, [sp, #12]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	bfb8      	it	lt
 8012d26:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d2a:	3402      	adds	r4, #2
 8012d2c:	9305      	str	r3, [sp, #20]
 8012d2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012e14 <_vfiprintf_r+0x25c>
 8012d32:	7821      	ldrb	r1, [r4, #0]
 8012d34:	2203      	movs	r2, #3
 8012d36:	4650      	mov	r0, sl
 8012d38:	f7ed fa5a 	bl	80001f0 <memchr>
 8012d3c:	b140      	cbz	r0, 8012d50 <_vfiprintf_r+0x198>
 8012d3e:	2340      	movs	r3, #64	; 0x40
 8012d40:	eba0 000a 	sub.w	r0, r0, sl
 8012d44:	fa03 f000 	lsl.w	r0, r3, r0
 8012d48:	9b04      	ldr	r3, [sp, #16]
 8012d4a:	4303      	orrs	r3, r0
 8012d4c:	3401      	adds	r4, #1
 8012d4e:	9304      	str	r3, [sp, #16]
 8012d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d54:	482c      	ldr	r0, [pc, #176]	; (8012e08 <_vfiprintf_r+0x250>)
 8012d56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d5a:	2206      	movs	r2, #6
 8012d5c:	f7ed fa48 	bl	80001f0 <memchr>
 8012d60:	2800      	cmp	r0, #0
 8012d62:	d03f      	beq.n	8012de4 <_vfiprintf_r+0x22c>
 8012d64:	4b29      	ldr	r3, [pc, #164]	; (8012e0c <_vfiprintf_r+0x254>)
 8012d66:	bb1b      	cbnz	r3, 8012db0 <_vfiprintf_r+0x1f8>
 8012d68:	9b03      	ldr	r3, [sp, #12]
 8012d6a:	3307      	adds	r3, #7
 8012d6c:	f023 0307 	bic.w	r3, r3, #7
 8012d70:	3308      	adds	r3, #8
 8012d72:	9303      	str	r3, [sp, #12]
 8012d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d76:	443b      	add	r3, r7
 8012d78:	9309      	str	r3, [sp, #36]	; 0x24
 8012d7a:	e767      	b.n	8012c4c <_vfiprintf_r+0x94>
 8012d7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d80:	460c      	mov	r4, r1
 8012d82:	2001      	movs	r0, #1
 8012d84:	e7a5      	b.n	8012cd2 <_vfiprintf_r+0x11a>
 8012d86:	2300      	movs	r3, #0
 8012d88:	3401      	adds	r4, #1
 8012d8a:	9305      	str	r3, [sp, #20]
 8012d8c:	4619      	mov	r1, r3
 8012d8e:	f04f 0c0a 	mov.w	ip, #10
 8012d92:	4620      	mov	r0, r4
 8012d94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d98:	3a30      	subs	r2, #48	; 0x30
 8012d9a:	2a09      	cmp	r2, #9
 8012d9c:	d903      	bls.n	8012da6 <_vfiprintf_r+0x1ee>
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d0c5      	beq.n	8012d2e <_vfiprintf_r+0x176>
 8012da2:	9105      	str	r1, [sp, #20]
 8012da4:	e7c3      	b.n	8012d2e <_vfiprintf_r+0x176>
 8012da6:	fb0c 2101 	mla	r1, ip, r1, r2
 8012daa:	4604      	mov	r4, r0
 8012dac:	2301      	movs	r3, #1
 8012dae:	e7f0      	b.n	8012d92 <_vfiprintf_r+0x1da>
 8012db0:	ab03      	add	r3, sp, #12
 8012db2:	9300      	str	r3, [sp, #0]
 8012db4:	462a      	mov	r2, r5
 8012db6:	4b16      	ldr	r3, [pc, #88]	; (8012e10 <_vfiprintf_r+0x258>)
 8012db8:	a904      	add	r1, sp, #16
 8012dba:	4630      	mov	r0, r6
 8012dbc:	f7fd fb1e 	bl	80103fc <_printf_float>
 8012dc0:	4607      	mov	r7, r0
 8012dc2:	1c78      	adds	r0, r7, #1
 8012dc4:	d1d6      	bne.n	8012d74 <_vfiprintf_r+0x1bc>
 8012dc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012dc8:	07d9      	lsls	r1, r3, #31
 8012dca:	d405      	bmi.n	8012dd8 <_vfiprintf_r+0x220>
 8012dcc:	89ab      	ldrh	r3, [r5, #12]
 8012dce:	059a      	lsls	r2, r3, #22
 8012dd0:	d402      	bmi.n	8012dd8 <_vfiprintf_r+0x220>
 8012dd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012dd4:	f7fd f9ac 	bl	8010130 <__retarget_lock_release_recursive>
 8012dd8:	89ab      	ldrh	r3, [r5, #12]
 8012dda:	065b      	lsls	r3, r3, #25
 8012ddc:	f53f af12 	bmi.w	8012c04 <_vfiprintf_r+0x4c>
 8012de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012de2:	e711      	b.n	8012c08 <_vfiprintf_r+0x50>
 8012de4:	ab03      	add	r3, sp, #12
 8012de6:	9300      	str	r3, [sp, #0]
 8012de8:	462a      	mov	r2, r5
 8012dea:	4b09      	ldr	r3, [pc, #36]	; (8012e10 <_vfiprintf_r+0x258>)
 8012dec:	a904      	add	r1, sp, #16
 8012dee:	4630      	mov	r0, r6
 8012df0:	f7fd fda8 	bl	8010944 <_printf_i>
 8012df4:	e7e4      	b.n	8012dc0 <_vfiprintf_r+0x208>
 8012df6:	bf00      	nop
 8012df8:	0801484c 	.word	0x0801484c
 8012dfc:	0801486c 	.word	0x0801486c
 8012e00:	0801482c 	.word	0x0801482c
 8012e04:	08014bb4 	.word	0x08014bb4
 8012e08:	08014bbe 	.word	0x08014bbe
 8012e0c:	080103fd 	.word	0x080103fd
 8012e10:	08012b93 	.word	0x08012b93
 8012e14:	08014bba 	.word	0x08014bba

08012e18 <_read_r>:
 8012e18:	b538      	push	{r3, r4, r5, lr}
 8012e1a:	4d07      	ldr	r5, [pc, #28]	; (8012e38 <_read_r+0x20>)
 8012e1c:	4604      	mov	r4, r0
 8012e1e:	4608      	mov	r0, r1
 8012e20:	4611      	mov	r1, r2
 8012e22:	2200      	movs	r2, #0
 8012e24:	602a      	str	r2, [r5, #0]
 8012e26:	461a      	mov	r2, r3
 8012e28:	f7f1 fbb8 	bl	800459c <_read>
 8012e2c:	1c43      	adds	r3, r0, #1
 8012e2e:	d102      	bne.n	8012e36 <_read_r+0x1e>
 8012e30:	682b      	ldr	r3, [r5, #0]
 8012e32:	b103      	cbz	r3, 8012e36 <_read_r+0x1e>
 8012e34:	6023      	str	r3, [r4, #0]
 8012e36:	bd38      	pop	{r3, r4, r5, pc}
 8012e38:	20005e90 	.word	0x20005e90

08012e3c <__assert_func>:
 8012e3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012e3e:	4614      	mov	r4, r2
 8012e40:	461a      	mov	r2, r3
 8012e42:	4b09      	ldr	r3, [pc, #36]	; (8012e68 <__assert_func+0x2c>)
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	4605      	mov	r5, r0
 8012e48:	68d8      	ldr	r0, [r3, #12]
 8012e4a:	b14c      	cbz	r4, 8012e60 <__assert_func+0x24>
 8012e4c:	4b07      	ldr	r3, [pc, #28]	; (8012e6c <__assert_func+0x30>)
 8012e4e:	9100      	str	r1, [sp, #0]
 8012e50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012e54:	4906      	ldr	r1, [pc, #24]	; (8012e70 <__assert_func+0x34>)
 8012e56:	462b      	mov	r3, r5
 8012e58:	f000 f80e 	bl	8012e78 <fiprintf>
 8012e5c:	f000 f88e 	bl	8012f7c <abort>
 8012e60:	4b04      	ldr	r3, [pc, #16]	; (8012e74 <__assert_func+0x38>)
 8012e62:	461c      	mov	r4, r3
 8012e64:	e7f3      	b.n	8012e4e <__assert_func+0x12>
 8012e66:	bf00      	nop
 8012e68:	20000114 	.word	0x20000114
 8012e6c:	08014bc5 	.word	0x08014bc5
 8012e70:	08014bd2 	.word	0x08014bd2
 8012e74:	08014c00 	.word	0x08014c00

08012e78 <fiprintf>:
 8012e78:	b40e      	push	{r1, r2, r3}
 8012e7a:	b503      	push	{r0, r1, lr}
 8012e7c:	4601      	mov	r1, r0
 8012e7e:	ab03      	add	r3, sp, #12
 8012e80:	4805      	ldr	r0, [pc, #20]	; (8012e98 <fiprintf+0x20>)
 8012e82:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e86:	6800      	ldr	r0, [r0, #0]
 8012e88:	9301      	str	r3, [sp, #4]
 8012e8a:	f7ff fe95 	bl	8012bb8 <_vfiprintf_r>
 8012e8e:	b002      	add	sp, #8
 8012e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e94:	b003      	add	sp, #12
 8012e96:	4770      	bx	lr
 8012e98:	20000114 	.word	0x20000114

08012e9c <_fstat_r>:
 8012e9c:	b538      	push	{r3, r4, r5, lr}
 8012e9e:	4d07      	ldr	r5, [pc, #28]	; (8012ebc <_fstat_r+0x20>)
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	4604      	mov	r4, r0
 8012ea4:	4608      	mov	r0, r1
 8012ea6:	4611      	mov	r1, r2
 8012ea8:	602b      	str	r3, [r5, #0]
 8012eaa:	f7f1 fba0 	bl	80045ee <_fstat>
 8012eae:	1c43      	adds	r3, r0, #1
 8012eb0:	d102      	bne.n	8012eb8 <_fstat_r+0x1c>
 8012eb2:	682b      	ldr	r3, [r5, #0]
 8012eb4:	b103      	cbz	r3, 8012eb8 <_fstat_r+0x1c>
 8012eb6:	6023      	str	r3, [r4, #0]
 8012eb8:	bd38      	pop	{r3, r4, r5, pc}
 8012eba:	bf00      	nop
 8012ebc:	20005e90 	.word	0x20005e90

08012ec0 <_isatty_r>:
 8012ec0:	b538      	push	{r3, r4, r5, lr}
 8012ec2:	4d06      	ldr	r5, [pc, #24]	; (8012edc <_isatty_r+0x1c>)
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	4604      	mov	r4, r0
 8012ec8:	4608      	mov	r0, r1
 8012eca:	602b      	str	r3, [r5, #0]
 8012ecc:	f7f1 fb9f 	bl	800460e <_isatty>
 8012ed0:	1c43      	adds	r3, r0, #1
 8012ed2:	d102      	bne.n	8012eda <_isatty_r+0x1a>
 8012ed4:	682b      	ldr	r3, [r5, #0]
 8012ed6:	b103      	cbz	r3, 8012eda <_isatty_r+0x1a>
 8012ed8:	6023      	str	r3, [r4, #0]
 8012eda:	bd38      	pop	{r3, r4, r5, pc}
 8012edc:	20005e90 	.word	0x20005e90

08012ee0 <__ascii_mbtowc>:
 8012ee0:	b082      	sub	sp, #8
 8012ee2:	b901      	cbnz	r1, 8012ee6 <__ascii_mbtowc+0x6>
 8012ee4:	a901      	add	r1, sp, #4
 8012ee6:	b142      	cbz	r2, 8012efa <__ascii_mbtowc+0x1a>
 8012ee8:	b14b      	cbz	r3, 8012efe <__ascii_mbtowc+0x1e>
 8012eea:	7813      	ldrb	r3, [r2, #0]
 8012eec:	600b      	str	r3, [r1, #0]
 8012eee:	7812      	ldrb	r2, [r2, #0]
 8012ef0:	1e10      	subs	r0, r2, #0
 8012ef2:	bf18      	it	ne
 8012ef4:	2001      	movne	r0, #1
 8012ef6:	b002      	add	sp, #8
 8012ef8:	4770      	bx	lr
 8012efa:	4610      	mov	r0, r2
 8012efc:	e7fb      	b.n	8012ef6 <__ascii_mbtowc+0x16>
 8012efe:	f06f 0001 	mvn.w	r0, #1
 8012f02:	e7f8      	b.n	8012ef6 <__ascii_mbtowc+0x16>

08012f04 <_realloc_r>:
 8012f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f08:	4680      	mov	r8, r0
 8012f0a:	4614      	mov	r4, r2
 8012f0c:	460e      	mov	r6, r1
 8012f0e:	b921      	cbnz	r1, 8012f1a <_realloc_r+0x16>
 8012f10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f14:	4611      	mov	r1, r2
 8012f16:	f7fd b95d 	b.w	80101d4 <_malloc_r>
 8012f1a:	b92a      	cbnz	r2, 8012f28 <_realloc_r+0x24>
 8012f1c:	f7ff fc7a 	bl	8012814 <_free_r>
 8012f20:	4625      	mov	r5, r4
 8012f22:	4628      	mov	r0, r5
 8012f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f28:	f000 f82f 	bl	8012f8a <_malloc_usable_size_r>
 8012f2c:	4284      	cmp	r4, r0
 8012f2e:	4607      	mov	r7, r0
 8012f30:	d802      	bhi.n	8012f38 <_realloc_r+0x34>
 8012f32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012f36:	d812      	bhi.n	8012f5e <_realloc_r+0x5a>
 8012f38:	4621      	mov	r1, r4
 8012f3a:	4640      	mov	r0, r8
 8012f3c:	f7fd f94a 	bl	80101d4 <_malloc_r>
 8012f40:	4605      	mov	r5, r0
 8012f42:	2800      	cmp	r0, #0
 8012f44:	d0ed      	beq.n	8012f22 <_realloc_r+0x1e>
 8012f46:	42bc      	cmp	r4, r7
 8012f48:	4622      	mov	r2, r4
 8012f4a:	4631      	mov	r1, r6
 8012f4c:	bf28      	it	cs
 8012f4e:	463a      	movcs	r2, r7
 8012f50:	f7fd f8ef 	bl	8010132 <memcpy>
 8012f54:	4631      	mov	r1, r6
 8012f56:	4640      	mov	r0, r8
 8012f58:	f7ff fc5c 	bl	8012814 <_free_r>
 8012f5c:	e7e1      	b.n	8012f22 <_realloc_r+0x1e>
 8012f5e:	4635      	mov	r5, r6
 8012f60:	e7df      	b.n	8012f22 <_realloc_r+0x1e>

08012f62 <__ascii_wctomb>:
 8012f62:	b149      	cbz	r1, 8012f78 <__ascii_wctomb+0x16>
 8012f64:	2aff      	cmp	r2, #255	; 0xff
 8012f66:	bf85      	ittet	hi
 8012f68:	238a      	movhi	r3, #138	; 0x8a
 8012f6a:	6003      	strhi	r3, [r0, #0]
 8012f6c:	700a      	strbls	r2, [r1, #0]
 8012f6e:	f04f 30ff 	movhi.w	r0, #4294967295
 8012f72:	bf98      	it	ls
 8012f74:	2001      	movls	r0, #1
 8012f76:	4770      	bx	lr
 8012f78:	4608      	mov	r0, r1
 8012f7a:	4770      	bx	lr

08012f7c <abort>:
 8012f7c:	b508      	push	{r3, lr}
 8012f7e:	2006      	movs	r0, #6
 8012f80:	f000 f834 	bl	8012fec <raise>
 8012f84:	2001      	movs	r0, #1
 8012f86:	f7f1 faff 	bl	8004588 <_exit>

08012f8a <_malloc_usable_size_r>:
 8012f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f8e:	1f18      	subs	r0, r3, #4
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	bfbc      	itt	lt
 8012f94:	580b      	ldrlt	r3, [r1, r0]
 8012f96:	18c0      	addlt	r0, r0, r3
 8012f98:	4770      	bx	lr

08012f9a <_raise_r>:
 8012f9a:	291f      	cmp	r1, #31
 8012f9c:	b538      	push	{r3, r4, r5, lr}
 8012f9e:	4604      	mov	r4, r0
 8012fa0:	460d      	mov	r5, r1
 8012fa2:	d904      	bls.n	8012fae <_raise_r+0x14>
 8012fa4:	2316      	movs	r3, #22
 8012fa6:	6003      	str	r3, [r0, #0]
 8012fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8012fac:	bd38      	pop	{r3, r4, r5, pc}
 8012fae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012fb0:	b112      	cbz	r2, 8012fb8 <_raise_r+0x1e>
 8012fb2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012fb6:	b94b      	cbnz	r3, 8012fcc <_raise_r+0x32>
 8012fb8:	4620      	mov	r0, r4
 8012fba:	f000 f831 	bl	8013020 <_getpid_r>
 8012fbe:	462a      	mov	r2, r5
 8012fc0:	4601      	mov	r1, r0
 8012fc2:	4620      	mov	r0, r4
 8012fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012fc8:	f000 b818 	b.w	8012ffc <_kill_r>
 8012fcc:	2b01      	cmp	r3, #1
 8012fce:	d00a      	beq.n	8012fe6 <_raise_r+0x4c>
 8012fd0:	1c59      	adds	r1, r3, #1
 8012fd2:	d103      	bne.n	8012fdc <_raise_r+0x42>
 8012fd4:	2316      	movs	r3, #22
 8012fd6:	6003      	str	r3, [r0, #0]
 8012fd8:	2001      	movs	r0, #1
 8012fda:	e7e7      	b.n	8012fac <_raise_r+0x12>
 8012fdc:	2400      	movs	r4, #0
 8012fde:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012fe2:	4628      	mov	r0, r5
 8012fe4:	4798      	blx	r3
 8012fe6:	2000      	movs	r0, #0
 8012fe8:	e7e0      	b.n	8012fac <_raise_r+0x12>
	...

08012fec <raise>:
 8012fec:	4b02      	ldr	r3, [pc, #8]	; (8012ff8 <raise+0xc>)
 8012fee:	4601      	mov	r1, r0
 8012ff0:	6818      	ldr	r0, [r3, #0]
 8012ff2:	f7ff bfd2 	b.w	8012f9a <_raise_r>
 8012ff6:	bf00      	nop
 8012ff8:	20000114 	.word	0x20000114

08012ffc <_kill_r>:
 8012ffc:	b538      	push	{r3, r4, r5, lr}
 8012ffe:	4d07      	ldr	r5, [pc, #28]	; (801301c <_kill_r+0x20>)
 8013000:	2300      	movs	r3, #0
 8013002:	4604      	mov	r4, r0
 8013004:	4608      	mov	r0, r1
 8013006:	4611      	mov	r1, r2
 8013008:	602b      	str	r3, [r5, #0]
 801300a:	f7f1 faad 	bl	8004568 <_kill>
 801300e:	1c43      	adds	r3, r0, #1
 8013010:	d102      	bne.n	8013018 <_kill_r+0x1c>
 8013012:	682b      	ldr	r3, [r5, #0]
 8013014:	b103      	cbz	r3, 8013018 <_kill_r+0x1c>
 8013016:	6023      	str	r3, [r4, #0]
 8013018:	bd38      	pop	{r3, r4, r5, pc}
 801301a:	bf00      	nop
 801301c:	20005e90 	.word	0x20005e90

08013020 <_getpid_r>:
 8013020:	f7f1 ba9a 	b.w	8004558 <_getpid>

08013024 <_init>:
 8013024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013026:	bf00      	nop
 8013028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801302a:	bc08      	pop	{r3}
 801302c:	469e      	mov	lr, r3
 801302e:	4770      	bx	lr

08013030 <_fini>:
 8013030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013032:	bf00      	nop
 8013034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013036:	bc08      	pop	{r3}
 8013038:	469e      	mov	lr, r3
 801303a:	4770      	bx	lr
